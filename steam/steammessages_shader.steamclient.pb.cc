// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_shader.steamclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_shader.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CShader_RegisterShader_Request_ShaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CShader_RegisterShader_Request_Shader> {
} _CShader_RegisterShader_Request_Shader_default_instance_;
class CShader_RegisterShader_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CShader_RegisterShader_Request> {
} _CShader_RegisterShader_Request_default_instance_;
class CShader_RegisterShader_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CShader_RegisterShader_Response> {
} _CShader_RegisterShader_Response_default_instance_;
class CShader_SendShader_Request_ShaderCodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CShader_SendShader_Request_ShaderCode> {
} _CShader_SendShader_Request_ShaderCode_default_instance_;
class CShader_SendShader_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CShader_SendShader_Request> {
} _CShader_SendShader_Request_default_instance_;
class CShader_SendShader_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CShader_SendShader_Response> {
} _CShader_SendShader_Response_default_instance_;
class CShader_GetBucketManifest_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CShader_GetBucketManifest_Request> {
} _CShader_GetBucketManifest_Request_default_instance_;
class CShader_GetBucketManifest_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CShader_GetBucketManifest_Response> {
} _CShader_GetBucketManifest_Response_default_instance_;

namespace protobuf_steammessages_5fshader_2esteamclient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_RegisterShader_Request_Shader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_RegisterShader_Request_Shader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_RegisterShader_Request_Shader, cache_key_sha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_RegisterShader_Request_Shader, shader_code_sha_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_RegisterShader_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_RegisterShader_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_RegisterShader_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_RegisterShader_Request, gpu_desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_RegisterShader_Request, driver_desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_RegisterShader_Request, shaders_),
  2,
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_RegisterShader_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_RegisterShader_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_RegisterShader_Response, requested_codeids_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_SendShader_Request_ShaderCode, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_SendShader_Request_ShaderCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_SendShader_Request_ShaderCode, shader_code_sha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_SendShader_Request_ShaderCode, shader_code_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_SendShader_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_SendShader_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_SendShader_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_SendShader_Request, shaders_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_SendShader_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_SendShader_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_GetBucketManifest_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_GetBucketManifest_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_GetBucketManifest_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_GetBucketManifest_Request, gpu_desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_GetBucketManifest_Request, driver_desc_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_GetBucketManifest_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_GetBucketManifest_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CShader_GetBucketManifest_Response, manifestid_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(CShader_RegisterShader_Request_Shader)},
  { 9, 18, sizeof(CShader_RegisterShader_Request)},
  { 22, 28, sizeof(CShader_RegisterShader_Response)},
  { 29, 36, sizeof(CShader_SendShader_Request_ShaderCode)},
  { 38, 45, sizeof(CShader_SendShader_Request)},
  { 47, 52, sizeof(CShader_SendShader_Response)},
  { 52, 60, sizeof(CShader_GetBucketManifest_Request)},
  { 63, 69, sizeof(CShader_GetBucketManifest_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CShader_RegisterShader_Request_Shader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CShader_RegisterShader_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CShader_RegisterShader_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CShader_SendShader_Request_ShaderCode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CShader_SendShader_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CShader_SendShader_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CShader_GetBucketManifest_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CShader_GetBucketManifest_Response_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_shader.steamclient.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _CShader_RegisterShader_Request_Shader_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CShader_RegisterShader_Request_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CShader_RegisterShader_Response_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CShader_SendShader_Request_ShaderCode_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CShader_SendShader_Request_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CShader_SendShader_Response_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CShader_GetBucketManifest_Request_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CShader_GetBucketManifest_Response_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::InitDefaults();
  _CShader_RegisterShader_Request_Shader_default_instance_.DefaultConstruct();
  _CShader_RegisterShader_Request_default_instance_.DefaultConstruct();
  _CShader_RegisterShader_Response_default_instance_.DefaultConstruct();
  _CShader_SendShader_Request_ShaderCode_default_instance_.DefaultConstruct();
  _CShader_SendShader_Request_default_instance_.DefaultConstruct();
  _CShader_SendShader_Response_default_instance_.DefaultConstruct();
  _CShader_GetBucketManifest_Request_default_instance_.DefaultConstruct();
  _CShader_GetBucketManifest_Response_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n&steammessages_shader.steamclient.proto"
      "\022\013proto.steam\032,steammessages_unified_bas"
      "e.steamclient.proto\"\325\001\n\036CShader_Register"
      "Shader_Request\022\r\n\005appid\030\001 \001(\r\022\020\n\010gpu_des"
      "c\030\002 \001(\t\022\023\n\013driver_desc\030\003 \001(\t\022C\n\007shaders\030"
      "\004 \003(\01322.proto.steam.CShader_RegisterShad"
      "er_Request.Shader\0328\n\006Shader\022\025\n\rcache_key"
      "_sha\030\001 \001(\014\022\027\n\017shader_code_sha\030\002 \001(\014\"<\n\037C"
      "Shader_RegisterShader_Response\022\031\n\021reques"
      "ted_codeids\030\001 \003(\r\"\254\001\n\032CShader_SendShader"
      "_Request\022\r\n\005appid\030\001 \001(\r\022C\n\007shaders\030\002 \003(\013"
      "22.proto.steam.CShader_SendShader_Reques"
      "t.ShaderCode\032:\n\nShaderCode\022\027\n\017shader_cod"
      "e_sha\030\001 \001(\014\022\023\n\013shader_code\030\002 \001(\014\"\035\n\033CSha"
      "der_SendShader_Response\"Y\n!CShader_GetBu"
      "cketManifest_Request\022\r\n\005appid\030\001 \001(\r\022\020\n\010g"
      "pu_desc\030\002 \001(\t\022\023\n\013driver_desc\030\003 \001(\t\"8\n\"CS"
      "hader_GetBucketManifest_Response\022\022\n\nmani"
      "festid\030\001 \001(\0042\347\004\n\006Shader\022\326\001\n\016RegisterShad"
      "er\022+.proto.steam.CShader_RegisterShader_"
      "Request\032,.proto.steam.CShader_RegisterSh"
      "ader_Response\"i\202\265\030eClient just finished "
      "playing a game, detected new shader cach"
      "e entries and is notifying us about them"
      "\022\247\001\n\nSendShader\022\'.proto.steam.CShader_Se"
      "ndShader_Request\032(.proto.steam.CShader_S"
      "endShader_Response\"F\202\265\030BClient is sendin"
      "g us actual compiled shader code that we"
      " requested\022\305\001\n\021GetBucketManifest\022..proto"
      ".steam.CShader_GetBucketManifest_Request"
      "\032/.proto.steam.CShader_GetBucketManifest"
      "_Response\"O\202\265\030KClient wants to know the "
      "manifest ID to fetch (if any) for a buck"
      "et\'s depot\032\022\202\265\030\016Shader methodsB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1355);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_shader.steamclient.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fshader_2esteamclient_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CShader_RegisterShader_Request_Shader::kCacheKeyShaFieldNumber;
const int CShader_RegisterShader_Request_Shader::kShaderCodeShaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CShader_RegisterShader_Request_Shader::CShader_RegisterShader_Request_Shader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fshader_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CShader_RegisterShader_Request.Shader)
}
CShader_RegisterShader_Request_Shader::CShader_RegisterShader_Request_Shader(const CShader_RegisterShader_Request_Shader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cache_key_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cache_key_sha()) {
    cache_key_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cache_key_sha_);
  }
  shader_code_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_shader_code_sha()) {
    shader_code_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shader_code_sha_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CShader_RegisterShader_Request.Shader)
}

void CShader_RegisterShader_Request_Shader::SharedCtor() {
  _cached_size_ = 0;
  cache_key_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shader_code_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CShader_RegisterShader_Request_Shader::~CShader_RegisterShader_Request_Shader() {
  // @@protoc_insertion_point(destructor:proto.steam.CShader_RegisterShader_Request.Shader)
  SharedDtor();
}

void CShader_RegisterShader_Request_Shader::SharedDtor() {
  cache_key_sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shader_code_sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CShader_RegisterShader_Request_Shader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CShader_RegisterShader_Request_Shader::descriptor() {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fshader_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CShader_RegisterShader_Request_Shader& CShader_RegisterShader_Request_Shader::default_instance() {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CShader_RegisterShader_Request_Shader* CShader_RegisterShader_Request_Shader::New(::google::protobuf::Arena* arena) const {
  CShader_RegisterShader_Request_Shader* n = new CShader_RegisterShader_Request_Shader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CShader_RegisterShader_Request_Shader::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CShader_RegisterShader_Request.Shader)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_cache_key_sha()) {
      GOOGLE_DCHECK(!cache_key_sha_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cache_key_sha_.UnsafeRawStringPointer())->clear();
    }
    if (has_shader_code_sha()) {
      GOOGLE_DCHECK(!shader_code_sha_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*shader_code_sha_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CShader_RegisterShader_Request_Shader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CShader_RegisterShader_Request.Shader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes cache_key_sha = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cache_key_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes shader_code_sha = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_shader_code_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CShader_RegisterShader_Request.Shader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CShader_RegisterShader_Request.Shader)
  return false;
#undef DO_
}

void CShader_RegisterShader_Request_Shader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CShader_RegisterShader_Request.Shader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes cache_key_sha = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->cache_key_sha(), output);
  }

  // optional bytes shader_code_sha = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->shader_code_sha(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CShader_RegisterShader_Request.Shader)
}

::google::protobuf::uint8* CShader_RegisterShader_Request_Shader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CShader_RegisterShader_Request.Shader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes cache_key_sha = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->cache_key_sha(), target);
  }

  // optional bytes shader_code_sha = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->shader_code_sha(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CShader_RegisterShader_Request.Shader)
  return target;
}

size_t CShader_RegisterShader_Request_Shader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CShader_RegisterShader_Request.Shader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes cache_key_sha = 1;
    if (has_cache_key_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cache_key_sha());
    }

    // optional bytes shader_code_sha = 2;
    if (has_shader_code_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->shader_code_sha());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CShader_RegisterShader_Request_Shader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CShader_RegisterShader_Request.Shader)
  GOOGLE_DCHECK_NE(&from, this);
  const CShader_RegisterShader_Request_Shader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CShader_RegisterShader_Request_Shader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CShader_RegisterShader_Request.Shader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CShader_RegisterShader_Request.Shader)
    MergeFrom(*source);
  }
}

void CShader_RegisterShader_Request_Shader::MergeFrom(const CShader_RegisterShader_Request_Shader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CShader_RegisterShader_Request.Shader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_cache_key_sha();
      cache_key_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cache_key_sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_shader_code_sha();
      shader_code_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shader_code_sha_);
    }
  }
}

void CShader_RegisterShader_Request_Shader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CShader_RegisterShader_Request.Shader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CShader_RegisterShader_Request_Shader::CopyFrom(const CShader_RegisterShader_Request_Shader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CShader_RegisterShader_Request.Shader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CShader_RegisterShader_Request_Shader::IsInitialized() const {
  return true;
}

void CShader_RegisterShader_Request_Shader::Swap(CShader_RegisterShader_Request_Shader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CShader_RegisterShader_Request_Shader::InternalSwap(CShader_RegisterShader_Request_Shader* other) {
  cache_key_sha_.Swap(&other->cache_key_sha_);
  shader_code_sha_.Swap(&other->shader_code_sha_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CShader_RegisterShader_Request_Shader::GetMetadata() const {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fshader_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CShader_RegisterShader_Request_Shader

// optional bytes cache_key_sha = 1;
bool CShader_RegisterShader_Request_Shader::has_cache_key_sha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CShader_RegisterShader_Request_Shader::set_has_cache_key_sha() {
  _has_bits_[0] |= 0x00000001u;
}
void CShader_RegisterShader_Request_Shader::clear_has_cache_key_sha() {
  _has_bits_[0] &= ~0x00000001u;
}
void CShader_RegisterShader_Request_Shader::clear_cache_key_sha() {
  cache_key_sha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cache_key_sha();
}
const ::std::string& CShader_RegisterShader_Request_Shader::cache_key_sha() const {
  // @@protoc_insertion_point(field_get:proto.steam.CShader_RegisterShader_Request.Shader.cache_key_sha)
  return cache_key_sha_.GetNoArena();
}
void CShader_RegisterShader_Request_Shader::set_cache_key_sha(const ::std::string& value) {
  set_has_cache_key_sha();
  cache_key_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CShader_RegisterShader_Request.Shader.cache_key_sha)
}
#if LANG_CXX11
void CShader_RegisterShader_Request_Shader::set_cache_key_sha(::std::string&& value) {
  set_has_cache_key_sha();
  cache_key_sha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CShader_RegisterShader_Request.Shader.cache_key_sha)
}
#endif
void CShader_RegisterShader_Request_Shader::set_cache_key_sha(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cache_key_sha();
  cache_key_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CShader_RegisterShader_Request.Shader.cache_key_sha)
}
void CShader_RegisterShader_Request_Shader::set_cache_key_sha(const void* value, size_t size) {
  set_has_cache_key_sha();
  cache_key_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CShader_RegisterShader_Request.Shader.cache_key_sha)
}
::std::string* CShader_RegisterShader_Request_Shader::mutable_cache_key_sha() {
  set_has_cache_key_sha();
  // @@protoc_insertion_point(field_mutable:proto.steam.CShader_RegisterShader_Request.Shader.cache_key_sha)
  return cache_key_sha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CShader_RegisterShader_Request_Shader::release_cache_key_sha() {
  // @@protoc_insertion_point(field_release:proto.steam.CShader_RegisterShader_Request.Shader.cache_key_sha)
  clear_has_cache_key_sha();
  return cache_key_sha_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CShader_RegisterShader_Request_Shader::set_allocated_cache_key_sha(::std::string* cache_key_sha) {
  if (cache_key_sha != NULL) {
    set_has_cache_key_sha();
  } else {
    clear_has_cache_key_sha();
  }
  cache_key_sha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cache_key_sha);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CShader_RegisterShader_Request.Shader.cache_key_sha)
}

// optional bytes shader_code_sha = 2;
bool CShader_RegisterShader_Request_Shader::has_shader_code_sha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CShader_RegisterShader_Request_Shader::set_has_shader_code_sha() {
  _has_bits_[0] |= 0x00000002u;
}
void CShader_RegisterShader_Request_Shader::clear_has_shader_code_sha() {
  _has_bits_[0] &= ~0x00000002u;
}
void CShader_RegisterShader_Request_Shader::clear_shader_code_sha() {
  shader_code_sha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_shader_code_sha();
}
const ::std::string& CShader_RegisterShader_Request_Shader::shader_code_sha() const {
  // @@protoc_insertion_point(field_get:proto.steam.CShader_RegisterShader_Request.Shader.shader_code_sha)
  return shader_code_sha_.GetNoArena();
}
void CShader_RegisterShader_Request_Shader::set_shader_code_sha(const ::std::string& value) {
  set_has_shader_code_sha();
  shader_code_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CShader_RegisterShader_Request.Shader.shader_code_sha)
}
#if LANG_CXX11
void CShader_RegisterShader_Request_Shader::set_shader_code_sha(::std::string&& value) {
  set_has_shader_code_sha();
  shader_code_sha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CShader_RegisterShader_Request.Shader.shader_code_sha)
}
#endif
void CShader_RegisterShader_Request_Shader::set_shader_code_sha(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_shader_code_sha();
  shader_code_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CShader_RegisterShader_Request.Shader.shader_code_sha)
}
void CShader_RegisterShader_Request_Shader::set_shader_code_sha(const void* value, size_t size) {
  set_has_shader_code_sha();
  shader_code_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CShader_RegisterShader_Request.Shader.shader_code_sha)
}
::std::string* CShader_RegisterShader_Request_Shader::mutable_shader_code_sha() {
  set_has_shader_code_sha();
  // @@protoc_insertion_point(field_mutable:proto.steam.CShader_RegisterShader_Request.Shader.shader_code_sha)
  return shader_code_sha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CShader_RegisterShader_Request_Shader::release_shader_code_sha() {
  // @@protoc_insertion_point(field_release:proto.steam.CShader_RegisterShader_Request.Shader.shader_code_sha)
  clear_has_shader_code_sha();
  return shader_code_sha_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CShader_RegisterShader_Request_Shader::set_allocated_shader_code_sha(::std::string* shader_code_sha) {
  if (shader_code_sha != NULL) {
    set_has_shader_code_sha();
  } else {
    clear_has_shader_code_sha();
  }
  shader_code_sha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shader_code_sha);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CShader_RegisterShader_Request.Shader.shader_code_sha)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CShader_RegisterShader_Request::kAppidFieldNumber;
const int CShader_RegisterShader_Request::kGpuDescFieldNumber;
const int CShader_RegisterShader_Request::kDriverDescFieldNumber;
const int CShader_RegisterShader_Request::kShadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CShader_RegisterShader_Request::CShader_RegisterShader_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fshader_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CShader_RegisterShader_Request)
}
CShader_RegisterShader_Request::CShader_RegisterShader_Request(const CShader_RegisterShader_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      shaders_(from.shaders_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gpu_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gpu_desc()) {
    gpu_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gpu_desc_);
  }
  driver_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_driver_desc()) {
    driver_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_desc_);
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CShader_RegisterShader_Request)
}

void CShader_RegisterShader_Request::SharedCtor() {
  _cached_size_ = 0;
  gpu_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_ = 0u;
}

CShader_RegisterShader_Request::~CShader_RegisterShader_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CShader_RegisterShader_Request)
  SharedDtor();
}

void CShader_RegisterShader_Request::SharedDtor() {
  gpu_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CShader_RegisterShader_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CShader_RegisterShader_Request::descriptor() {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fshader_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CShader_RegisterShader_Request& CShader_RegisterShader_Request::default_instance() {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CShader_RegisterShader_Request* CShader_RegisterShader_Request::New(::google::protobuf::Arena* arena) const {
  CShader_RegisterShader_Request* n = new CShader_RegisterShader_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CShader_RegisterShader_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CShader_RegisterShader_Request)
  shaders_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_gpu_desc()) {
      GOOGLE_DCHECK(!gpu_desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gpu_desc_.UnsafeRawStringPointer())->clear();
    }
    if (has_driver_desc()) {
      GOOGLE_DCHECK(!driver_desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*driver_desc_.UnsafeRawStringPointer())->clear();
    }
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CShader_RegisterShader_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CShader_RegisterShader_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gpu_desc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpu_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gpu_desc().data(), this->gpu_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CShader_RegisterShader_Request.gpu_desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string driver_desc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driver_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->driver_desc().data(), this->driver_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CShader_RegisterShader_Request.driver_desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CShader_RegisterShader_Request.Shader shaders = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shaders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CShader_RegisterShader_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CShader_RegisterShader_Request)
  return false;
#undef DO_
}

void CShader_RegisterShader_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CShader_RegisterShader_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string gpu_desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gpu_desc().data(), this->gpu_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CShader_RegisterShader_Request.gpu_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gpu_desc(), output);
  }

  // optional string driver_desc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->driver_desc().data(), this->driver_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CShader_RegisterShader_Request.driver_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->driver_desc(), output);
  }

  // repeated .proto.steam.CShader_RegisterShader_Request.Shader shaders = 4;
  for (unsigned int i = 0, n = this->shaders_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->shaders(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CShader_RegisterShader_Request)
}

::google::protobuf::uint8* CShader_RegisterShader_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CShader_RegisterShader_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string gpu_desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gpu_desc().data(), this->gpu_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CShader_RegisterShader_Request.gpu_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gpu_desc(), target);
  }

  // optional string driver_desc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->driver_desc().data(), this->driver_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CShader_RegisterShader_Request.driver_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->driver_desc(), target);
  }

  // repeated .proto.steam.CShader_RegisterShader_Request.Shader shaders = 4;
  for (unsigned int i = 0, n = this->shaders_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->shaders(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CShader_RegisterShader_Request)
  return target;
}

size_t CShader_RegisterShader_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CShader_RegisterShader_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CShader_RegisterShader_Request.Shader shaders = 4;
  {
    unsigned int count = this->shaders_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shaders(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string gpu_desc = 2;
    if (has_gpu_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gpu_desc());
    }

    // optional string driver_desc = 3;
    if (has_driver_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->driver_desc());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CShader_RegisterShader_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CShader_RegisterShader_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CShader_RegisterShader_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CShader_RegisterShader_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CShader_RegisterShader_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CShader_RegisterShader_Request)
    MergeFrom(*source);
  }
}

void CShader_RegisterShader_Request::MergeFrom(const CShader_RegisterShader_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CShader_RegisterShader_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shaders_.MergeFrom(from.shaders_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gpu_desc();
      gpu_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gpu_desc_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_driver_desc();
      driver_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_desc_);
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CShader_RegisterShader_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CShader_RegisterShader_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CShader_RegisterShader_Request::CopyFrom(const CShader_RegisterShader_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CShader_RegisterShader_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CShader_RegisterShader_Request::IsInitialized() const {
  return true;
}

void CShader_RegisterShader_Request::Swap(CShader_RegisterShader_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CShader_RegisterShader_Request::InternalSwap(CShader_RegisterShader_Request* other) {
  shaders_.InternalSwap(&other->shaders_);
  gpu_desc_.Swap(&other->gpu_desc_);
  driver_desc_.Swap(&other->driver_desc_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CShader_RegisterShader_Request::GetMetadata() const {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fshader_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CShader_RegisterShader_Request

// optional uint32 appid = 1;
bool CShader_RegisterShader_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CShader_RegisterShader_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
void CShader_RegisterShader_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CShader_RegisterShader_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CShader_RegisterShader_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CShader_RegisterShader_Request.appid)
  return appid_;
}
void CShader_RegisterShader_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CShader_RegisterShader_Request.appid)
}

// optional string gpu_desc = 2;
bool CShader_RegisterShader_Request::has_gpu_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CShader_RegisterShader_Request::set_has_gpu_desc() {
  _has_bits_[0] |= 0x00000001u;
}
void CShader_RegisterShader_Request::clear_has_gpu_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
void CShader_RegisterShader_Request::clear_gpu_desc() {
  gpu_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gpu_desc();
}
const ::std::string& CShader_RegisterShader_Request::gpu_desc() const {
  // @@protoc_insertion_point(field_get:proto.steam.CShader_RegisterShader_Request.gpu_desc)
  return gpu_desc_.GetNoArena();
}
void CShader_RegisterShader_Request::set_gpu_desc(const ::std::string& value) {
  set_has_gpu_desc();
  gpu_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CShader_RegisterShader_Request.gpu_desc)
}
#if LANG_CXX11
void CShader_RegisterShader_Request::set_gpu_desc(::std::string&& value) {
  set_has_gpu_desc();
  gpu_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CShader_RegisterShader_Request.gpu_desc)
}
#endif
void CShader_RegisterShader_Request::set_gpu_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gpu_desc();
  gpu_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CShader_RegisterShader_Request.gpu_desc)
}
void CShader_RegisterShader_Request::set_gpu_desc(const char* value, size_t size) {
  set_has_gpu_desc();
  gpu_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CShader_RegisterShader_Request.gpu_desc)
}
::std::string* CShader_RegisterShader_Request::mutable_gpu_desc() {
  set_has_gpu_desc();
  // @@protoc_insertion_point(field_mutable:proto.steam.CShader_RegisterShader_Request.gpu_desc)
  return gpu_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CShader_RegisterShader_Request::release_gpu_desc() {
  // @@protoc_insertion_point(field_release:proto.steam.CShader_RegisterShader_Request.gpu_desc)
  clear_has_gpu_desc();
  return gpu_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CShader_RegisterShader_Request::set_allocated_gpu_desc(::std::string* gpu_desc) {
  if (gpu_desc != NULL) {
    set_has_gpu_desc();
  } else {
    clear_has_gpu_desc();
  }
  gpu_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gpu_desc);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CShader_RegisterShader_Request.gpu_desc)
}

// optional string driver_desc = 3;
bool CShader_RegisterShader_Request::has_driver_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CShader_RegisterShader_Request::set_has_driver_desc() {
  _has_bits_[0] |= 0x00000002u;
}
void CShader_RegisterShader_Request::clear_has_driver_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
void CShader_RegisterShader_Request::clear_driver_desc() {
  driver_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_driver_desc();
}
const ::std::string& CShader_RegisterShader_Request::driver_desc() const {
  // @@protoc_insertion_point(field_get:proto.steam.CShader_RegisterShader_Request.driver_desc)
  return driver_desc_.GetNoArena();
}
void CShader_RegisterShader_Request::set_driver_desc(const ::std::string& value) {
  set_has_driver_desc();
  driver_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CShader_RegisterShader_Request.driver_desc)
}
#if LANG_CXX11
void CShader_RegisterShader_Request::set_driver_desc(::std::string&& value) {
  set_has_driver_desc();
  driver_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CShader_RegisterShader_Request.driver_desc)
}
#endif
void CShader_RegisterShader_Request::set_driver_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_driver_desc();
  driver_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CShader_RegisterShader_Request.driver_desc)
}
void CShader_RegisterShader_Request::set_driver_desc(const char* value, size_t size) {
  set_has_driver_desc();
  driver_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CShader_RegisterShader_Request.driver_desc)
}
::std::string* CShader_RegisterShader_Request::mutable_driver_desc() {
  set_has_driver_desc();
  // @@protoc_insertion_point(field_mutable:proto.steam.CShader_RegisterShader_Request.driver_desc)
  return driver_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CShader_RegisterShader_Request::release_driver_desc() {
  // @@protoc_insertion_point(field_release:proto.steam.CShader_RegisterShader_Request.driver_desc)
  clear_has_driver_desc();
  return driver_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CShader_RegisterShader_Request::set_allocated_driver_desc(::std::string* driver_desc) {
  if (driver_desc != NULL) {
    set_has_driver_desc();
  } else {
    clear_has_driver_desc();
  }
  driver_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver_desc);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CShader_RegisterShader_Request.driver_desc)
}

// repeated .proto.steam.CShader_RegisterShader_Request.Shader shaders = 4;
int CShader_RegisterShader_Request::shaders_size() const {
  return shaders_.size();
}
void CShader_RegisterShader_Request::clear_shaders() {
  shaders_.Clear();
}
const ::proto::steam::CShader_RegisterShader_Request_Shader& CShader_RegisterShader_Request::shaders(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CShader_RegisterShader_Request.shaders)
  return shaders_.Get(index);
}
::proto::steam::CShader_RegisterShader_Request_Shader* CShader_RegisterShader_Request::mutable_shaders(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CShader_RegisterShader_Request.shaders)
  return shaders_.Mutable(index);
}
::proto::steam::CShader_RegisterShader_Request_Shader* CShader_RegisterShader_Request::add_shaders() {
  // @@protoc_insertion_point(field_add:proto.steam.CShader_RegisterShader_Request.shaders)
  return shaders_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CShader_RegisterShader_Request_Shader >*
CShader_RegisterShader_Request::mutable_shaders() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CShader_RegisterShader_Request.shaders)
  return &shaders_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CShader_RegisterShader_Request_Shader >&
CShader_RegisterShader_Request::shaders() const {
  // @@protoc_insertion_point(field_list:proto.steam.CShader_RegisterShader_Request.shaders)
  return shaders_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CShader_RegisterShader_Response::kRequestedCodeidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CShader_RegisterShader_Response::CShader_RegisterShader_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fshader_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CShader_RegisterShader_Response)
}
CShader_RegisterShader_Response::CShader_RegisterShader_Response(const CShader_RegisterShader_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      requested_codeids_(from.requested_codeids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CShader_RegisterShader_Response)
}

void CShader_RegisterShader_Response::SharedCtor() {
  _cached_size_ = 0;
}

CShader_RegisterShader_Response::~CShader_RegisterShader_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CShader_RegisterShader_Response)
  SharedDtor();
}

void CShader_RegisterShader_Response::SharedDtor() {
}

void CShader_RegisterShader_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CShader_RegisterShader_Response::descriptor() {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fshader_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CShader_RegisterShader_Response& CShader_RegisterShader_Response::default_instance() {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CShader_RegisterShader_Response* CShader_RegisterShader_Response::New(::google::protobuf::Arena* arena) const {
  CShader_RegisterShader_Response* n = new CShader_RegisterShader_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CShader_RegisterShader_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CShader_RegisterShader_Response)
  requested_codeids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CShader_RegisterShader_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CShader_RegisterShader_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 requested_codeids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_requested_codeids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_requested_codeids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CShader_RegisterShader_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CShader_RegisterShader_Response)
  return false;
#undef DO_
}

void CShader_RegisterShader_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CShader_RegisterShader_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 requested_codeids = 1;
  for (int i = 0, n = this->requested_codeids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->requested_codeids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CShader_RegisterShader_Response)
}

::google::protobuf::uint8* CShader_RegisterShader_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CShader_RegisterShader_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 requested_codeids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->requested_codeids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CShader_RegisterShader_Response)
  return target;
}

size_t CShader_RegisterShader_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CShader_RegisterShader_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 requested_codeids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->requested_codeids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->requested_codeids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CShader_RegisterShader_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CShader_RegisterShader_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CShader_RegisterShader_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CShader_RegisterShader_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CShader_RegisterShader_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CShader_RegisterShader_Response)
    MergeFrom(*source);
  }
}

void CShader_RegisterShader_Response::MergeFrom(const CShader_RegisterShader_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CShader_RegisterShader_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requested_codeids_.MergeFrom(from.requested_codeids_);
}

void CShader_RegisterShader_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CShader_RegisterShader_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CShader_RegisterShader_Response::CopyFrom(const CShader_RegisterShader_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CShader_RegisterShader_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CShader_RegisterShader_Response::IsInitialized() const {
  return true;
}

void CShader_RegisterShader_Response::Swap(CShader_RegisterShader_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CShader_RegisterShader_Response::InternalSwap(CShader_RegisterShader_Response* other) {
  requested_codeids_.InternalSwap(&other->requested_codeids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CShader_RegisterShader_Response::GetMetadata() const {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fshader_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CShader_RegisterShader_Response

// repeated uint32 requested_codeids = 1;
int CShader_RegisterShader_Response::requested_codeids_size() const {
  return requested_codeids_.size();
}
void CShader_RegisterShader_Response::clear_requested_codeids() {
  requested_codeids_.Clear();
}
::google::protobuf::uint32 CShader_RegisterShader_Response::requested_codeids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CShader_RegisterShader_Response.requested_codeids)
  return requested_codeids_.Get(index);
}
void CShader_RegisterShader_Response::set_requested_codeids(int index, ::google::protobuf::uint32 value) {
  requested_codeids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CShader_RegisterShader_Response.requested_codeids)
}
void CShader_RegisterShader_Response::add_requested_codeids(::google::protobuf::uint32 value) {
  requested_codeids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CShader_RegisterShader_Response.requested_codeids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CShader_RegisterShader_Response::requested_codeids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CShader_RegisterShader_Response.requested_codeids)
  return requested_codeids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CShader_RegisterShader_Response::mutable_requested_codeids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CShader_RegisterShader_Response.requested_codeids)
  return &requested_codeids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CShader_SendShader_Request_ShaderCode::kShaderCodeShaFieldNumber;
const int CShader_SendShader_Request_ShaderCode::kShaderCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CShader_SendShader_Request_ShaderCode::CShader_SendShader_Request_ShaderCode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fshader_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CShader_SendShader_Request.ShaderCode)
}
CShader_SendShader_Request_ShaderCode::CShader_SendShader_Request_ShaderCode(const CShader_SendShader_Request_ShaderCode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shader_code_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_shader_code_sha()) {
    shader_code_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shader_code_sha_);
  }
  shader_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_shader_code()) {
    shader_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shader_code_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CShader_SendShader_Request.ShaderCode)
}

void CShader_SendShader_Request_ShaderCode::SharedCtor() {
  _cached_size_ = 0;
  shader_code_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shader_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CShader_SendShader_Request_ShaderCode::~CShader_SendShader_Request_ShaderCode() {
  // @@protoc_insertion_point(destructor:proto.steam.CShader_SendShader_Request.ShaderCode)
  SharedDtor();
}

void CShader_SendShader_Request_ShaderCode::SharedDtor() {
  shader_code_sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shader_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CShader_SendShader_Request_ShaderCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CShader_SendShader_Request_ShaderCode::descriptor() {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fshader_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CShader_SendShader_Request_ShaderCode& CShader_SendShader_Request_ShaderCode::default_instance() {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CShader_SendShader_Request_ShaderCode* CShader_SendShader_Request_ShaderCode::New(::google::protobuf::Arena* arena) const {
  CShader_SendShader_Request_ShaderCode* n = new CShader_SendShader_Request_ShaderCode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CShader_SendShader_Request_ShaderCode::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CShader_SendShader_Request.ShaderCode)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_shader_code_sha()) {
      GOOGLE_DCHECK(!shader_code_sha_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*shader_code_sha_.UnsafeRawStringPointer())->clear();
    }
    if (has_shader_code()) {
      GOOGLE_DCHECK(!shader_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*shader_code_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CShader_SendShader_Request_ShaderCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CShader_SendShader_Request.ShaderCode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes shader_code_sha = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_shader_code_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes shader_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_shader_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CShader_SendShader_Request.ShaderCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CShader_SendShader_Request.ShaderCode)
  return false;
#undef DO_
}

void CShader_SendShader_Request_ShaderCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CShader_SendShader_Request.ShaderCode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes shader_code_sha = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->shader_code_sha(), output);
  }

  // optional bytes shader_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->shader_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CShader_SendShader_Request.ShaderCode)
}

::google::protobuf::uint8* CShader_SendShader_Request_ShaderCode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CShader_SendShader_Request.ShaderCode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes shader_code_sha = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->shader_code_sha(), target);
  }

  // optional bytes shader_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->shader_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CShader_SendShader_Request.ShaderCode)
  return target;
}

size_t CShader_SendShader_Request_ShaderCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CShader_SendShader_Request.ShaderCode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes shader_code_sha = 1;
    if (has_shader_code_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->shader_code_sha());
    }

    // optional bytes shader_code = 2;
    if (has_shader_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->shader_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CShader_SendShader_Request_ShaderCode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CShader_SendShader_Request.ShaderCode)
  GOOGLE_DCHECK_NE(&from, this);
  const CShader_SendShader_Request_ShaderCode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CShader_SendShader_Request_ShaderCode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CShader_SendShader_Request.ShaderCode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CShader_SendShader_Request.ShaderCode)
    MergeFrom(*source);
  }
}

void CShader_SendShader_Request_ShaderCode::MergeFrom(const CShader_SendShader_Request_ShaderCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CShader_SendShader_Request.ShaderCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_shader_code_sha();
      shader_code_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shader_code_sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_shader_code();
      shader_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shader_code_);
    }
  }
}

void CShader_SendShader_Request_ShaderCode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CShader_SendShader_Request.ShaderCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CShader_SendShader_Request_ShaderCode::CopyFrom(const CShader_SendShader_Request_ShaderCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CShader_SendShader_Request.ShaderCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CShader_SendShader_Request_ShaderCode::IsInitialized() const {
  return true;
}

void CShader_SendShader_Request_ShaderCode::Swap(CShader_SendShader_Request_ShaderCode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CShader_SendShader_Request_ShaderCode::InternalSwap(CShader_SendShader_Request_ShaderCode* other) {
  shader_code_sha_.Swap(&other->shader_code_sha_);
  shader_code_.Swap(&other->shader_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CShader_SendShader_Request_ShaderCode::GetMetadata() const {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fshader_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CShader_SendShader_Request_ShaderCode

// optional bytes shader_code_sha = 1;
bool CShader_SendShader_Request_ShaderCode::has_shader_code_sha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CShader_SendShader_Request_ShaderCode::set_has_shader_code_sha() {
  _has_bits_[0] |= 0x00000001u;
}
void CShader_SendShader_Request_ShaderCode::clear_has_shader_code_sha() {
  _has_bits_[0] &= ~0x00000001u;
}
void CShader_SendShader_Request_ShaderCode::clear_shader_code_sha() {
  shader_code_sha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_shader_code_sha();
}
const ::std::string& CShader_SendShader_Request_ShaderCode::shader_code_sha() const {
  // @@protoc_insertion_point(field_get:proto.steam.CShader_SendShader_Request.ShaderCode.shader_code_sha)
  return shader_code_sha_.GetNoArena();
}
void CShader_SendShader_Request_ShaderCode::set_shader_code_sha(const ::std::string& value) {
  set_has_shader_code_sha();
  shader_code_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CShader_SendShader_Request.ShaderCode.shader_code_sha)
}
#if LANG_CXX11
void CShader_SendShader_Request_ShaderCode::set_shader_code_sha(::std::string&& value) {
  set_has_shader_code_sha();
  shader_code_sha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CShader_SendShader_Request.ShaderCode.shader_code_sha)
}
#endif
void CShader_SendShader_Request_ShaderCode::set_shader_code_sha(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_shader_code_sha();
  shader_code_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CShader_SendShader_Request.ShaderCode.shader_code_sha)
}
void CShader_SendShader_Request_ShaderCode::set_shader_code_sha(const void* value, size_t size) {
  set_has_shader_code_sha();
  shader_code_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CShader_SendShader_Request.ShaderCode.shader_code_sha)
}
::std::string* CShader_SendShader_Request_ShaderCode::mutable_shader_code_sha() {
  set_has_shader_code_sha();
  // @@protoc_insertion_point(field_mutable:proto.steam.CShader_SendShader_Request.ShaderCode.shader_code_sha)
  return shader_code_sha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CShader_SendShader_Request_ShaderCode::release_shader_code_sha() {
  // @@protoc_insertion_point(field_release:proto.steam.CShader_SendShader_Request.ShaderCode.shader_code_sha)
  clear_has_shader_code_sha();
  return shader_code_sha_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CShader_SendShader_Request_ShaderCode::set_allocated_shader_code_sha(::std::string* shader_code_sha) {
  if (shader_code_sha != NULL) {
    set_has_shader_code_sha();
  } else {
    clear_has_shader_code_sha();
  }
  shader_code_sha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shader_code_sha);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CShader_SendShader_Request.ShaderCode.shader_code_sha)
}

// optional bytes shader_code = 2;
bool CShader_SendShader_Request_ShaderCode::has_shader_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CShader_SendShader_Request_ShaderCode::set_has_shader_code() {
  _has_bits_[0] |= 0x00000002u;
}
void CShader_SendShader_Request_ShaderCode::clear_has_shader_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void CShader_SendShader_Request_ShaderCode::clear_shader_code() {
  shader_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_shader_code();
}
const ::std::string& CShader_SendShader_Request_ShaderCode::shader_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CShader_SendShader_Request.ShaderCode.shader_code)
  return shader_code_.GetNoArena();
}
void CShader_SendShader_Request_ShaderCode::set_shader_code(const ::std::string& value) {
  set_has_shader_code();
  shader_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CShader_SendShader_Request.ShaderCode.shader_code)
}
#if LANG_CXX11
void CShader_SendShader_Request_ShaderCode::set_shader_code(::std::string&& value) {
  set_has_shader_code();
  shader_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CShader_SendShader_Request.ShaderCode.shader_code)
}
#endif
void CShader_SendShader_Request_ShaderCode::set_shader_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_shader_code();
  shader_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CShader_SendShader_Request.ShaderCode.shader_code)
}
void CShader_SendShader_Request_ShaderCode::set_shader_code(const void* value, size_t size) {
  set_has_shader_code();
  shader_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CShader_SendShader_Request.ShaderCode.shader_code)
}
::std::string* CShader_SendShader_Request_ShaderCode::mutable_shader_code() {
  set_has_shader_code();
  // @@protoc_insertion_point(field_mutable:proto.steam.CShader_SendShader_Request.ShaderCode.shader_code)
  return shader_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CShader_SendShader_Request_ShaderCode::release_shader_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CShader_SendShader_Request.ShaderCode.shader_code)
  clear_has_shader_code();
  return shader_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CShader_SendShader_Request_ShaderCode::set_allocated_shader_code(::std::string* shader_code) {
  if (shader_code != NULL) {
    set_has_shader_code();
  } else {
    clear_has_shader_code();
  }
  shader_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shader_code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CShader_SendShader_Request.ShaderCode.shader_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CShader_SendShader_Request::kAppidFieldNumber;
const int CShader_SendShader_Request::kShadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CShader_SendShader_Request::CShader_SendShader_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fshader_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CShader_SendShader_Request)
}
CShader_SendShader_Request::CShader_SendShader_Request(const CShader_SendShader_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      shaders_(from.shaders_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CShader_SendShader_Request)
}

void CShader_SendShader_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
}

CShader_SendShader_Request::~CShader_SendShader_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CShader_SendShader_Request)
  SharedDtor();
}

void CShader_SendShader_Request::SharedDtor() {
}

void CShader_SendShader_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CShader_SendShader_Request::descriptor() {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fshader_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CShader_SendShader_Request& CShader_SendShader_Request::default_instance() {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CShader_SendShader_Request* CShader_SendShader_Request::New(::google::protobuf::Arena* arena) const {
  CShader_SendShader_Request* n = new CShader_SendShader_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CShader_SendShader_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CShader_SendShader_Request)
  shaders_.Clear();
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CShader_SendShader_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CShader_SendShader_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CShader_SendShader_Request.ShaderCode shaders = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shaders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CShader_SendShader_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CShader_SendShader_Request)
  return false;
#undef DO_
}

void CShader_SendShader_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CShader_SendShader_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // repeated .proto.steam.CShader_SendShader_Request.ShaderCode shaders = 2;
  for (unsigned int i = 0, n = this->shaders_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shaders(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CShader_SendShader_Request)
}

::google::protobuf::uint8* CShader_SendShader_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CShader_SendShader_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // repeated .proto.steam.CShader_SendShader_Request.ShaderCode shaders = 2;
  for (unsigned int i = 0, n = this->shaders_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->shaders(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CShader_SendShader_Request)
  return target;
}

size_t CShader_SendShader_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CShader_SendShader_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CShader_SendShader_Request.ShaderCode shaders = 2;
  {
    unsigned int count = this->shaders_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shaders(i));
    }
  }

  // optional uint32 appid = 1;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CShader_SendShader_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CShader_SendShader_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CShader_SendShader_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CShader_SendShader_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CShader_SendShader_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CShader_SendShader_Request)
    MergeFrom(*source);
  }
}

void CShader_SendShader_Request::MergeFrom(const CShader_SendShader_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CShader_SendShader_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shaders_.MergeFrom(from.shaders_);
  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CShader_SendShader_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CShader_SendShader_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CShader_SendShader_Request::CopyFrom(const CShader_SendShader_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CShader_SendShader_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CShader_SendShader_Request::IsInitialized() const {
  return true;
}

void CShader_SendShader_Request::Swap(CShader_SendShader_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CShader_SendShader_Request::InternalSwap(CShader_SendShader_Request* other) {
  shaders_.InternalSwap(&other->shaders_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CShader_SendShader_Request::GetMetadata() const {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fshader_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CShader_SendShader_Request

// optional uint32 appid = 1;
bool CShader_SendShader_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CShader_SendShader_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CShader_SendShader_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CShader_SendShader_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CShader_SendShader_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CShader_SendShader_Request.appid)
  return appid_;
}
void CShader_SendShader_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CShader_SendShader_Request.appid)
}

// repeated .proto.steam.CShader_SendShader_Request.ShaderCode shaders = 2;
int CShader_SendShader_Request::shaders_size() const {
  return shaders_.size();
}
void CShader_SendShader_Request::clear_shaders() {
  shaders_.Clear();
}
const ::proto::steam::CShader_SendShader_Request_ShaderCode& CShader_SendShader_Request::shaders(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CShader_SendShader_Request.shaders)
  return shaders_.Get(index);
}
::proto::steam::CShader_SendShader_Request_ShaderCode* CShader_SendShader_Request::mutable_shaders(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CShader_SendShader_Request.shaders)
  return shaders_.Mutable(index);
}
::proto::steam::CShader_SendShader_Request_ShaderCode* CShader_SendShader_Request::add_shaders() {
  // @@protoc_insertion_point(field_add:proto.steam.CShader_SendShader_Request.shaders)
  return shaders_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CShader_SendShader_Request_ShaderCode >*
CShader_SendShader_Request::mutable_shaders() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CShader_SendShader_Request.shaders)
  return &shaders_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CShader_SendShader_Request_ShaderCode >&
CShader_SendShader_Request::shaders() const {
  // @@protoc_insertion_point(field_list:proto.steam.CShader_SendShader_Request.shaders)
  return shaders_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CShader_SendShader_Response::CShader_SendShader_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fshader_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CShader_SendShader_Response)
}
CShader_SendShader_Response::CShader_SendShader_Response(const CShader_SendShader_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CShader_SendShader_Response)
}

void CShader_SendShader_Response::SharedCtor() {
  _cached_size_ = 0;
}

CShader_SendShader_Response::~CShader_SendShader_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CShader_SendShader_Response)
  SharedDtor();
}

void CShader_SendShader_Response::SharedDtor() {
}

void CShader_SendShader_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CShader_SendShader_Response::descriptor() {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fshader_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CShader_SendShader_Response& CShader_SendShader_Response::default_instance() {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CShader_SendShader_Response* CShader_SendShader_Response::New(::google::protobuf::Arena* arena) const {
  CShader_SendShader_Response* n = new CShader_SendShader_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CShader_SendShader_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CShader_SendShader_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CShader_SendShader_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CShader_SendShader_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CShader_SendShader_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CShader_SendShader_Response)
  return false;
#undef DO_
}

void CShader_SendShader_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CShader_SendShader_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CShader_SendShader_Response)
}

::google::protobuf::uint8* CShader_SendShader_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CShader_SendShader_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CShader_SendShader_Response)
  return target;
}

size_t CShader_SendShader_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CShader_SendShader_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CShader_SendShader_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CShader_SendShader_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CShader_SendShader_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CShader_SendShader_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CShader_SendShader_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CShader_SendShader_Response)
    MergeFrom(*source);
  }
}

void CShader_SendShader_Response::MergeFrom(const CShader_SendShader_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CShader_SendShader_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CShader_SendShader_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CShader_SendShader_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CShader_SendShader_Response::CopyFrom(const CShader_SendShader_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CShader_SendShader_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CShader_SendShader_Response::IsInitialized() const {
  return true;
}

void CShader_SendShader_Response::Swap(CShader_SendShader_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CShader_SendShader_Response::InternalSwap(CShader_SendShader_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CShader_SendShader_Response::GetMetadata() const {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fshader_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CShader_SendShader_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CShader_GetBucketManifest_Request::kAppidFieldNumber;
const int CShader_GetBucketManifest_Request::kGpuDescFieldNumber;
const int CShader_GetBucketManifest_Request::kDriverDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CShader_GetBucketManifest_Request::CShader_GetBucketManifest_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fshader_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CShader_GetBucketManifest_Request)
}
CShader_GetBucketManifest_Request::CShader_GetBucketManifest_Request(const CShader_GetBucketManifest_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gpu_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gpu_desc()) {
    gpu_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gpu_desc_);
  }
  driver_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_driver_desc()) {
    driver_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_desc_);
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CShader_GetBucketManifest_Request)
}

void CShader_GetBucketManifest_Request::SharedCtor() {
  _cached_size_ = 0;
  gpu_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_ = 0u;
}

CShader_GetBucketManifest_Request::~CShader_GetBucketManifest_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CShader_GetBucketManifest_Request)
  SharedDtor();
}

void CShader_GetBucketManifest_Request::SharedDtor() {
  gpu_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CShader_GetBucketManifest_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CShader_GetBucketManifest_Request::descriptor() {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fshader_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CShader_GetBucketManifest_Request& CShader_GetBucketManifest_Request::default_instance() {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CShader_GetBucketManifest_Request* CShader_GetBucketManifest_Request::New(::google::protobuf::Arena* arena) const {
  CShader_GetBucketManifest_Request* n = new CShader_GetBucketManifest_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CShader_GetBucketManifest_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CShader_GetBucketManifest_Request)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_gpu_desc()) {
      GOOGLE_DCHECK(!gpu_desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gpu_desc_.UnsafeRawStringPointer())->clear();
    }
    if (has_driver_desc()) {
      GOOGLE_DCHECK(!driver_desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*driver_desc_.UnsafeRawStringPointer())->clear();
    }
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CShader_GetBucketManifest_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CShader_GetBucketManifest_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gpu_desc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpu_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gpu_desc().data(), this->gpu_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CShader_GetBucketManifest_Request.gpu_desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string driver_desc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driver_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->driver_desc().data(), this->driver_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CShader_GetBucketManifest_Request.driver_desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CShader_GetBucketManifest_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CShader_GetBucketManifest_Request)
  return false;
#undef DO_
}

void CShader_GetBucketManifest_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CShader_GetBucketManifest_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string gpu_desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gpu_desc().data(), this->gpu_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CShader_GetBucketManifest_Request.gpu_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gpu_desc(), output);
  }

  // optional string driver_desc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->driver_desc().data(), this->driver_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CShader_GetBucketManifest_Request.driver_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->driver_desc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CShader_GetBucketManifest_Request)
}

::google::protobuf::uint8* CShader_GetBucketManifest_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CShader_GetBucketManifest_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string gpu_desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gpu_desc().data(), this->gpu_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CShader_GetBucketManifest_Request.gpu_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gpu_desc(), target);
  }

  // optional string driver_desc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->driver_desc().data(), this->driver_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CShader_GetBucketManifest_Request.driver_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->driver_desc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CShader_GetBucketManifest_Request)
  return target;
}

size_t CShader_GetBucketManifest_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CShader_GetBucketManifest_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string gpu_desc = 2;
    if (has_gpu_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gpu_desc());
    }

    // optional string driver_desc = 3;
    if (has_driver_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->driver_desc());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CShader_GetBucketManifest_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CShader_GetBucketManifest_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CShader_GetBucketManifest_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CShader_GetBucketManifest_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CShader_GetBucketManifest_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CShader_GetBucketManifest_Request)
    MergeFrom(*source);
  }
}

void CShader_GetBucketManifest_Request::MergeFrom(const CShader_GetBucketManifest_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CShader_GetBucketManifest_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gpu_desc();
      gpu_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gpu_desc_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_driver_desc();
      driver_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_desc_);
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CShader_GetBucketManifest_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CShader_GetBucketManifest_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CShader_GetBucketManifest_Request::CopyFrom(const CShader_GetBucketManifest_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CShader_GetBucketManifest_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CShader_GetBucketManifest_Request::IsInitialized() const {
  return true;
}

void CShader_GetBucketManifest_Request::Swap(CShader_GetBucketManifest_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CShader_GetBucketManifest_Request::InternalSwap(CShader_GetBucketManifest_Request* other) {
  gpu_desc_.Swap(&other->gpu_desc_);
  driver_desc_.Swap(&other->driver_desc_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CShader_GetBucketManifest_Request::GetMetadata() const {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fshader_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CShader_GetBucketManifest_Request

// optional uint32 appid = 1;
bool CShader_GetBucketManifest_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CShader_GetBucketManifest_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
void CShader_GetBucketManifest_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CShader_GetBucketManifest_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CShader_GetBucketManifest_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CShader_GetBucketManifest_Request.appid)
  return appid_;
}
void CShader_GetBucketManifest_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CShader_GetBucketManifest_Request.appid)
}

// optional string gpu_desc = 2;
bool CShader_GetBucketManifest_Request::has_gpu_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CShader_GetBucketManifest_Request::set_has_gpu_desc() {
  _has_bits_[0] |= 0x00000001u;
}
void CShader_GetBucketManifest_Request::clear_has_gpu_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
void CShader_GetBucketManifest_Request::clear_gpu_desc() {
  gpu_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gpu_desc();
}
const ::std::string& CShader_GetBucketManifest_Request::gpu_desc() const {
  // @@protoc_insertion_point(field_get:proto.steam.CShader_GetBucketManifest_Request.gpu_desc)
  return gpu_desc_.GetNoArena();
}
void CShader_GetBucketManifest_Request::set_gpu_desc(const ::std::string& value) {
  set_has_gpu_desc();
  gpu_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CShader_GetBucketManifest_Request.gpu_desc)
}
#if LANG_CXX11
void CShader_GetBucketManifest_Request::set_gpu_desc(::std::string&& value) {
  set_has_gpu_desc();
  gpu_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CShader_GetBucketManifest_Request.gpu_desc)
}
#endif
void CShader_GetBucketManifest_Request::set_gpu_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gpu_desc();
  gpu_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CShader_GetBucketManifest_Request.gpu_desc)
}
void CShader_GetBucketManifest_Request::set_gpu_desc(const char* value, size_t size) {
  set_has_gpu_desc();
  gpu_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CShader_GetBucketManifest_Request.gpu_desc)
}
::std::string* CShader_GetBucketManifest_Request::mutable_gpu_desc() {
  set_has_gpu_desc();
  // @@protoc_insertion_point(field_mutable:proto.steam.CShader_GetBucketManifest_Request.gpu_desc)
  return gpu_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CShader_GetBucketManifest_Request::release_gpu_desc() {
  // @@protoc_insertion_point(field_release:proto.steam.CShader_GetBucketManifest_Request.gpu_desc)
  clear_has_gpu_desc();
  return gpu_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CShader_GetBucketManifest_Request::set_allocated_gpu_desc(::std::string* gpu_desc) {
  if (gpu_desc != NULL) {
    set_has_gpu_desc();
  } else {
    clear_has_gpu_desc();
  }
  gpu_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gpu_desc);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CShader_GetBucketManifest_Request.gpu_desc)
}

// optional string driver_desc = 3;
bool CShader_GetBucketManifest_Request::has_driver_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CShader_GetBucketManifest_Request::set_has_driver_desc() {
  _has_bits_[0] |= 0x00000002u;
}
void CShader_GetBucketManifest_Request::clear_has_driver_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
void CShader_GetBucketManifest_Request::clear_driver_desc() {
  driver_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_driver_desc();
}
const ::std::string& CShader_GetBucketManifest_Request::driver_desc() const {
  // @@protoc_insertion_point(field_get:proto.steam.CShader_GetBucketManifest_Request.driver_desc)
  return driver_desc_.GetNoArena();
}
void CShader_GetBucketManifest_Request::set_driver_desc(const ::std::string& value) {
  set_has_driver_desc();
  driver_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CShader_GetBucketManifest_Request.driver_desc)
}
#if LANG_CXX11
void CShader_GetBucketManifest_Request::set_driver_desc(::std::string&& value) {
  set_has_driver_desc();
  driver_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CShader_GetBucketManifest_Request.driver_desc)
}
#endif
void CShader_GetBucketManifest_Request::set_driver_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_driver_desc();
  driver_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CShader_GetBucketManifest_Request.driver_desc)
}
void CShader_GetBucketManifest_Request::set_driver_desc(const char* value, size_t size) {
  set_has_driver_desc();
  driver_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CShader_GetBucketManifest_Request.driver_desc)
}
::std::string* CShader_GetBucketManifest_Request::mutable_driver_desc() {
  set_has_driver_desc();
  // @@protoc_insertion_point(field_mutable:proto.steam.CShader_GetBucketManifest_Request.driver_desc)
  return driver_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CShader_GetBucketManifest_Request::release_driver_desc() {
  // @@protoc_insertion_point(field_release:proto.steam.CShader_GetBucketManifest_Request.driver_desc)
  clear_has_driver_desc();
  return driver_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CShader_GetBucketManifest_Request::set_allocated_driver_desc(::std::string* driver_desc) {
  if (driver_desc != NULL) {
    set_has_driver_desc();
  } else {
    clear_has_driver_desc();
  }
  driver_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver_desc);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CShader_GetBucketManifest_Request.driver_desc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CShader_GetBucketManifest_Response::kManifestidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CShader_GetBucketManifest_Response::CShader_GetBucketManifest_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fshader_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CShader_GetBucketManifest_Response)
}
CShader_GetBucketManifest_Response::CShader_GetBucketManifest_Response(const CShader_GetBucketManifest_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manifestid_ = from.manifestid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CShader_GetBucketManifest_Response)
}

void CShader_GetBucketManifest_Response::SharedCtor() {
  _cached_size_ = 0;
  manifestid_ = GOOGLE_ULONGLONG(0);
}

CShader_GetBucketManifest_Response::~CShader_GetBucketManifest_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CShader_GetBucketManifest_Response)
  SharedDtor();
}

void CShader_GetBucketManifest_Response::SharedDtor() {
}

void CShader_GetBucketManifest_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CShader_GetBucketManifest_Response::descriptor() {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fshader_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CShader_GetBucketManifest_Response& CShader_GetBucketManifest_Response::default_instance() {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CShader_GetBucketManifest_Response* CShader_GetBucketManifest_Response::New(::google::protobuf::Arena* arena) const {
  CShader_GetBucketManifest_Response* n = new CShader_GetBucketManifest_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CShader_GetBucketManifest_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CShader_GetBucketManifest_Response)
  manifestid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CShader_GetBucketManifest_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CShader_GetBucketManifest_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 manifestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_manifestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &manifestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CShader_GetBucketManifest_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CShader_GetBucketManifest_Response)
  return false;
#undef DO_
}

void CShader_GetBucketManifest_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CShader_GetBucketManifest_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 manifestid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->manifestid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CShader_GetBucketManifest_Response)
}

::google::protobuf::uint8* CShader_GetBucketManifest_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CShader_GetBucketManifest_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 manifestid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->manifestid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CShader_GetBucketManifest_Response)
  return target;
}

size_t CShader_GetBucketManifest_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CShader_GetBucketManifest_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint64 manifestid = 1;
  if (has_manifestid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->manifestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CShader_GetBucketManifest_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CShader_GetBucketManifest_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CShader_GetBucketManifest_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CShader_GetBucketManifest_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CShader_GetBucketManifest_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CShader_GetBucketManifest_Response)
    MergeFrom(*source);
  }
}

void CShader_GetBucketManifest_Response::MergeFrom(const CShader_GetBucketManifest_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CShader_GetBucketManifest_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_manifestid()) {
    set_manifestid(from.manifestid());
  }
}

void CShader_GetBucketManifest_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CShader_GetBucketManifest_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CShader_GetBucketManifest_Response::CopyFrom(const CShader_GetBucketManifest_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CShader_GetBucketManifest_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CShader_GetBucketManifest_Response::IsInitialized() const {
  return true;
}

void CShader_GetBucketManifest_Response::Swap(CShader_GetBucketManifest_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CShader_GetBucketManifest_Response::InternalSwap(CShader_GetBucketManifest_Response* other) {
  std::swap(manifestid_, other->manifestid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CShader_GetBucketManifest_Response::GetMetadata() const {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fshader_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CShader_GetBucketManifest_Response

// optional uint64 manifestid = 1;
bool CShader_GetBucketManifest_Response::has_manifestid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CShader_GetBucketManifest_Response::set_has_manifestid() {
  _has_bits_[0] |= 0x00000001u;
}
void CShader_GetBucketManifest_Response::clear_has_manifestid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CShader_GetBucketManifest_Response::clear_manifestid() {
  manifestid_ = GOOGLE_ULONGLONG(0);
  clear_has_manifestid();
}
::google::protobuf::uint64 CShader_GetBucketManifest_Response::manifestid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CShader_GetBucketManifest_Response.manifestid)
  return manifestid_;
}
void CShader_GetBucketManifest_Response::set_manifestid(::google::protobuf::uint64 value) {
  set_has_manifestid();
  manifestid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CShader_GetBucketManifest_Response.manifestid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Shader::~Shader() {}

const ::google::protobuf::ServiceDescriptor* Shader::descriptor() {
  protobuf_steammessages_5fshader_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fshader_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* Shader::GetDescriptor() {
  return descriptor();
}

void Shader::RegisterShader(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CShader_RegisterShader_Request*,
                         ::proto::steam::CShader_RegisterShader_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RegisterShader() not implemented.");
  done->Run();
}

void Shader::SendShader(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CShader_SendShader_Request*,
                         ::proto::steam::CShader_SendShader_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendShader() not implemented.");
  done->Run();
}

void Shader::GetBucketManifest(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CShader_GetBucketManifest_Request*,
                         ::proto::steam::CShader_GetBucketManifest_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBucketManifest() not implemented.");
  done->Run();
}

void Shader::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fshader_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      RegisterShader(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CShader_RegisterShader_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CShader_RegisterShader_Response*>(response),
             done);
      break;
    case 1:
      SendShader(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CShader_SendShader_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CShader_SendShader_Response*>(response),
             done);
      break;
    case 2:
      GetBucketManifest(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CShader_GetBucketManifest_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CShader_GetBucketManifest_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Shader::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CShader_RegisterShader_Request::default_instance();
    case 1:
      return ::proto::steam::CShader_SendShader_Request::default_instance();
    case 2:
      return ::proto::steam::CShader_GetBucketManifest_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& Shader::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CShader_RegisterShader_Response::default_instance();
    case 1:
      return ::proto::steam::CShader_SendShader_Response::default_instance();
    case 2:
      return ::proto::steam::CShader_GetBucketManifest_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Shader_Stub::Shader_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Shader_Stub::Shader_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Shader_Stub::~Shader_Stub() {
  if (owns_channel_) delete channel_;
}

void Shader_Stub::RegisterShader(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CShader_RegisterShader_Request* request,
                              ::proto::steam::CShader_RegisterShader_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Shader_Stub::SendShader(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CShader_SendShader_Request* request,
                              ::proto::steam::CShader_SendShader_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Shader_Stub::GetBucketManifest(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CShader_GetBucketManifest_Request* request,
                              ::proto::steam::CShader_GetBucketManifest_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
