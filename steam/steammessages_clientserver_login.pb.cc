// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_clientserver_login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CMsgClientHeartBeatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientHeartBeat> {
} _CMsgClientHeartBeat_default_instance_;
class CMsgClientLogonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLogon> {
} _CMsgClientLogon_default_instance_;
class CMsgClientLogonResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLogonResponse> {
} _CMsgClientLogonResponse_default_instance_;
class CMsgClientRequestWebAPIAuthenticateUserNonceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRequestWebAPIAuthenticateUserNonce> {
} _CMsgClientRequestWebAPIAuthenticateUserNonce_default_instance_;
class CMsgClientRequestWebAPIAuthenticateUserNonceResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRequestWebAPIAuthenticateUserNonceResponse> {
} _CMsgClientRequestWebAPIAuthenticateUserNonceResponse_default_instance_;
class CMsgClientLogOffDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLogOff> {
} _CMsgClientLogOff_default_instance_;
class CMsgClientLoggedOffDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLoggedOff> {
} _CMsgClientLoggedOff_default_instance_;
class CMsgClientNewLoginKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientNewLoginKey> {
} _CMsgClientNewLoginKey_default_instance_;
class CMsgClientNewLoginKeyAcceptedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientNewLoginKeyAccepted> {
} _CMsgClientNewLoginKeyAccepted_default_instance_;
class CMsgClientAccountInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAccountInfo> {
} _CMsgClientAccountInfo_default_instance_;

namespace protobuf_steammessages_5fclientserver_5flogin_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHeartBeat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, protocol_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, obfustucated_private_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, cell_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, last_session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, client_package_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, client_language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, client_os_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, should_remember_password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, wine_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, ping_ms_from_cell_search_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, qos_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, client_supplied_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, machine_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, launcher_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, ui_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, steam2_auth_ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, email_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, rtime32_account_creation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, account_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, game_server_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, login_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, was_converted_deprecated_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, anon_user_target_account_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, resolved_user_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, eresult_sentryfile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, sha_sentryfile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, auth_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, otp_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, otp_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, otp_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, steam2_ticket_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, sony_psn_ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, sony_psn_service_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, create_new_psn_linked_account_if_needed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, sony_psn_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, game_server_app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, steamguard_dont_remember_computer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, machine_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, machine_name_userchosen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, country_override_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, is_steam_box_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, client_instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, two_factor_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, supports_rate_limit_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, web_logon_nonce_),
  21,
  22,
  23,
  24,
  25,
  0,
  26,
  34,
  1,
  27,
  28,
  30,
  29,
  2,
  31,
  32,
  3,
  4,
  33,
  5,
  6,
  7,
  8,
  35,
  9,
  39,
  38,
  10,
  11,
  40,
  41,
  12,
  36,
  13,
  14,
  37,
  15,
  42,
  43,
  16,
  17,
  18,
  44,
  46,
  19,
  45,
  20,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, out_of_game_heartbeat_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, in_game_heartbeat_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, rtime32_server_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, account_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, cell_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, email_domain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, steam2_ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, eresult_extended_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, webapi_authenticate_user_nonce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, cell_id_ping_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, use_pics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, vanity_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, client_supplied_steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, ip_country_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, parental_settings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, parental_setting_signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, count_loginfailures_to_migrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, count_disconnects_to_migrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, ogs_data_report_time_window_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, client_instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, force_client_update_check_),
  22,
  7,
  8,
  9,
  10,
  11,
  12,
  0,
  1,
  13,
  2,
  14,
  16,
  3,
  15,
  4,
  5,
  6,
  18,
  19,
  20,
  21,
  17,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestWebAPIAuthenticateUserNonce, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestWebAPIAuthenticateUserNonce, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestWebAPIAuthenticateUserNonce, token_type_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestWebAPIAuthenticateUserNonceResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestWebAPIAuthenticateUserNonceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestWebAPIAuthenticateUserNonceResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestWebAPIAuthenticateUserNonceResponse, webapi_authenticate_user_nonce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestWebAPIAuthenticateUserNonceResponse, token_type_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogOff, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogOff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLoggedOff, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLoggedOff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLoggedOff, eresult_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNewLoginKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNewLoginKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNewLoginKey, unique_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNewLoginKey, login_key_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNewLoginKeyAccepted, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNewLoginKeyAccepted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNewLoginKeyAccepted, unique_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, persona_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, ip_country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, count_authed_computers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, account_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, facebook_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, facebook_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, steamguard_notify_newmachines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, steamguard_machine_name_user_chosen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, is_phone_verified_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, two_factor_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, is_phone_identifying_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, is_phone_needing_reverify_),
  0,
  1,
  4,
  5,
  6,
  2,
  7,
  3,
  8,
  11,
  9,
  10,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 5, sizeof(CMsgClientHeartBeat)},
  { 5, 57, sizeof(CMsgClientLogon)},
  { 104, 132, sizeof(CMsgClientLogonResponse)},
  { 155, 161, sizeof(CMsgClientRequestWebAPIAuthenticateUserNonce)},
  { 162, 170, sizeof(CMsgClientRequestWebAPIAuthenticateUserNonceResponse)},
  { 173, 178, sizeof(CMsgClientLogOff)},
  { 178, 184, sizeof(CMsgClientLoggedOff)},
  { 185, 192, sizeof(CMsgClientNewLoginKey)},
  { 194, 200, sizeof(CMsgClientNewLoginKeyAccepted)},
  { 201, 218, sizeof(CMsgClientAccountInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientHeartBeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientLogon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientLogonResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientRequestWebAPIAuthenticateUserNonce_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientRequestWebAPIAuthenticateUserNonceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientLogOff_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientLoggedOff_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientNewLoginKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientNewLoginKeyAccepted_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientAccountInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_clientserver_login.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgClientHeartBeat_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgClientLogon_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgClientLogonResponse_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgClientRequestWebAPIAuthenticateUserNonce_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMsgClientRequestWebAPIAuthenticateUserNonceResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgClientLogOff_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CMsgClientLoggedOff_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CMsgClientNewLoginKey_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CMsgClientNewLoginKeyAccepted_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CMsgClientAccountInfo_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5fbase_2eproto::InitDefaults();
  _CMsgClientHeartBeat_default_instance_.DefaultConstruct();
  _CMsgClientLogon_default_instance_.DefaultConstruct();
  _CMsgClientLogonResponse_default_instance_.DefaultConstruct();
  _CMsgClientRequestWebAPIAuthenticateUserNonce_default_instance_.DefaultConstruct();
  _CMsgClientRequestWebAPIAuthenticateUserNonceResponse_default_instance_.DefaultConstruct();
  _CMsgClientLogOff_default_instance_.DefaultConstruct();
  _CMsgClientLoggedOff_default_instance_.DefaultConstruct();
  _CMsgClientNewLoginKey_default_instance_.DefaultConstruct();
  _CMsgClientNewLoginKeyAccepted_default_instance_.DefaultConstruct();
  _CMsgClientAccountInfo_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n&steammessages_clientserver_login.proto"
      "\022\013proto.steam\032\030steammessages_base.proto\""
      "\025\n\023CMsgClientHeartBeat\"\233\n\n\017CMsgClientLog"
      "on\022\030\n\020protocol_version\030\001 \001(\r\022\037\n\027obfustuc"
      "ated_private_ip\030\002 \001(\r\022\017\n\007cell_id\030\003 \001(\r\022\027"
      "\n\017last_session_id\030\004 \001(\r\022\036\n\026client_packag"
      "e_version\030\005 \001(\r\022\027\n\017client_language\030\006 \001(\t"
      "\022\026\n\016client_os_type\030\007 \001(\r\022\'\n\030should_remem"
      "ber_password\030\010 \001(\010:\005false\022\024\n\014wine_versio"
      "n\030\t \001(\t\022 \n\030ping_ms_from_cell_search\030\n \001("
      "\r\022\021\n\tpublic_ip\030\024 \001(\r\022\021\n\tqos_level\030\025 \001(\r\022"
      " \n\030client_supplied_steam_id\030\026 \001(\006\022\022\n\nmac"
      "hine_id\030\036 \001(\014\022\030\n\rlauncher_type\030\037 \001(\r:\0010\022"
      "\022\n\007ui_mode\030  \001(\r:\0010\022\032\n\022steam2_auth_ticke"
      "t\030) \001(\014\022\025\n\remail_address\030* \001(\t\022 \n\030rtime3"
      "2_account_creation\030+ \001(\007\022\024\n\014account_name"
      "\0302 \001(\t\022\020\n\010password\0303 \001(\t\022\031\n\021game_server_"
      "token\0304 \001(\t\022\021\n\tlogin_key\030< \001(\t\022+\n\034was_co"
      "nverted_deprecated_msg\030F \001(\010:\005false\022%\n\035a"
      "non_user_target_account_name\030P \001(\t\022\036\n\026re"
      "solved_user_steam_id\030Q \001(\006\022\032\n\022eresult_se"
      "ntryfile\030R \001(\005\022\026\n\016sha_sentryfile\030S \001(\014\022\021"
      "\n\tauth_code\030T \001(\t\022\020\n\010otp_type\030U \001(\005\022\021\n\to"
      "tp_value\030V \001(\r\022\026\n\016otp_identifier\030W \001(\t\022\035"
      "\n\025steam2_ticket_request\030X \001(\010\022\027\n\017sony_ps"
      "n_ticket\030Z \001(\014\022\033\n\023sony_psn_service_id\030[ "
      "\001(\t\0226\n\'create_new_psn_linked_account_if_"
      "needed\030\\ \001(\010:\005false\022\025\n\rsony_psn_name\030] \001"
      "(\t\022\032\n\022game_server_app_id\030^ \001(\005\022)\n!steamg"
      "uard_dont_remember_computer\030_ \001(\010\022\024\n\014mac"
      "hine_name\030` \001(\t\022\037\n\027machine_name_userchos"
      "en\030a \001(\t\022\030\n\020country_override\030b \001(\t\022\024\n\014is"
      "_steam_box\030c \001(\010\022\032\n\022client_instance_id\030d"
      " \001(\004\022\027\n\017two_factor_code\030e \001(\t\022$\n\034support"
      "s_rate_limit_response\030f \001(\010\022\027\n\017web_logon"
      "_nonce\030g \001(\t\"\257\005\n\027CMsgClientLogonResponse"
      "\022\022\n\007eresult\030\001 \001(\005:\0012\022%\n\035out_of_game_hear"
      "tbeat_seconds\030\002 \001(\005\022!\n\031in_game_heartbeat"
      "_seconds\030\003 \001(\005\022\021\n\tpublic_ip\030\004 \001(\r\022\033\n\023rti"
      "me32_server_time\030\005 \001(\007\022\025\n\raccount_flags\030"
      "\006 \001(\r\022\017\n\007cell_id\030\007 \001(\r\022\024\n\014email_domain\030\010"
      " \001(\t\022\025\n\rsteam2_ticket\030\t \001(\014\022\030\n\020eresult_e"
      "xtended\030\n \001(\005\022&\n\036webapi_authenticate_use"
      "r_nonce\030\013 \001(\t\022\036\n\026cell_id_ping_threshold\030"
      "\014 \001(\r\022\020\n\010use_pics\030\r \001(\010\022\022\n\nvanity_url\030\016 "
      "\001(\t\022\037\n\027client_supplied_steamid\030\024 \001(\006\022\027\n\017"
      "ip_country_code\030\025 \001(\t\022\031\n\021parental_settin"
      "gs\030\026 \001(\014\022\"\n\032parental_setting_signature\030\027"
      " \001(\014\022&\n\036count_loginfailures_to_migrate\030\030"
      " \001(\005\022$\n\034count_disconnects_to_migrate\030\031 \001"
      "(\005\022#\n\033ogs_data_report_time_window\030\032 \001(\005\022"
      "\032\n\022client_instance_id\030\033 \001(\004\022!\n\031force_cli"
      "ent_update_check\030\034 \001(\010\"F\n,CMsgClientRequ"
      "estWebAPIAuthenticateUserNonce\022\026\n\ntoken_"
      "type\030\001 \001(\005:\002-1\"\212\001\n4CMsgClientRequestWebA"
      "PIAuthenticateUserNonceResponse\022\022\n\007eresu"
      "lt\030\001 \001(\005:\0012\022&\n\036webapi_authenticate_user_"
      "nonce\030\013 \001(\t\022\026\n\ntoken_type\030\003 \001(\005:\002-1\"\022\n\020C"
      "MsgClientLogOff\")\n\023CMsgClientLoggedOff\022\022"
      "\n\007eresult\030\001 \001(\005:\0012\"=\n\025CMsgClientNewLogin"
      "Key\022\021\n\tunique_id\030\001 \001(\r\022\021\n\tlogin_key\030\002 \001("
      "\t\"2\n\035CMsgClientNewLoginKeyAccepted\022\021\n\tun"
      "ique_id\030\001 \001(\r\"\356\002\n\025CMsgClientAccountInfo\022"
      "\024\n\014persona_name\030\001 \001(\t\022\022\n\nip_country\030\002 \001("
      "\t\022\036\n\026count_authed_computers\030\005 \001(\005\022\025\n\racc"
      "ount_flags\030\007 \001(\r\022\023\n\013facebook_id\030\010 \001(\004\022\025\n"
      "\rfacebook_name\030\t \001(\t\022%\n\035steamguard_notif"
      "y_newmachines\030\016 \001(\010\022+\n#steamguard_machin"
      "e_name_user_chosen\030\017 \001(\t\022\031\n\021is_phone_ver"
      "ified\030\020 \001(\010\022\030\n\020two_factor_state\030\021 \001(\r\022\034\n"
      "\024is_phone_identifying\030\022 \001(\010\022!\n\031is_phone_"
      "needing_reverify\030\023 \001(\010B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2869);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_clientserver_login.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5fbase_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fclientserver_5flogin_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientHeartBeat::CMsgClientHeartBeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5flogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientHeartBeat)
}
CMsgClientHeartBeat::CMsgClientHeartBeat(const CMsgClientHeartBeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientHeartBeat)
}

void CMsgClientHeartBeat::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClientHeartBeat::~CMsgClientHeartBeat() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientHeartBeat)
  SharedDtor();
}

void CMsgClientHeartBeat::SharedDtor() {
}

void CMsgClientHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientHeartBeat::descriptor() {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5flogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientHeartBeat& CMsgClientHeartBeat::default_instance() {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientHeartBeat* CMsgClientHeartBeat::New(::google::protobuf::Arena* arena) const {
  CMsgClientHeartBeat* n = new CMsgClientHeartBeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientHeartBeat)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientHeartBeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientHeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientHeartBeat)
  return false;
#undef DO_
}

void CMsgClientHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientHeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientHeartBeat)
}

::google::protobuf::uint8* CMsgClientHeartBeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientHeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientHeartBeat)
  return target;
}

size_t CMsgClientHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientHeartBeat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientHeartBeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientHeartBeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientHeartBeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientHeartBeat)
    MergeFrom(*source);
  }
}

void CMsgClientHeartBeat::MergeFrom(const CMsgClientHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClientHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientHeartBeat::CopyFrom(const CMsgClientHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientHeartBeat::IsInitialized() const {
  return true;
}

void CMsgClientHeartBeat::Swap(CMsgClientHeartBeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientHeartBeat::InternalSwap(CMsgClientHeartBeat* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientHeartBeat::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5flogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientHeartBeat

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLogon::kProtocolVersionFieldNumber;
const int CMsgClientLogon::kObfustucatedPrivateIpFieldNumber;
const int CMsgClientLogon::kCellIdFieldNumber;
const int CMsgClientLogon::kLastSessionIdFieldNumber;
const int CMsgClientLogon::kClientPackageVersionFieldNumber;
const int CMsgClientLogon::kClientLanguageFieldNumber;
const int CMsgClientLogon::kClientOsTypeFieldNumber;
const int CMsgClientLogon::kShouldRememberPasswordFieldNumber;
const int CMsgClientLogon::kWineVersionFieldNumber;
const int CMsgClientLogon::kPingMsFromCellSearchFieldNumber;
const int CMsgClientLogon::kPublicIpFieldNumber;
const int CMsgClientLogon::kQosLevelFieldNumber;
const int CMsgClientLogon::kClientSuppliedSteamIdFieldNumber;
const int CMsgClientLogon::kMachineIdFieldNumber;
const int CMsgClientLogon::kLauncherTypeFieldNumber;
const int CMsgClientLogon::kUiModeFieldNumber;
const int CMsgClientLogon::kSteam2AuthTicketFieldNumber;
const int CMsgClientLogon::kEmailAddressFieldNumber;
const int CMsgClientLogon::kRtime32AccountCreationFieldNumber;
const int CMsgClientLogon::kAccountNameFieldNumber;
const int CMsgClientLogon::kPasswordFieldNumber;
const int CMsgClientLogon::kGameServerTokenFieldNumber;
const int CMsgClientLogon::kLoginKeyFieldNumber;
const int CMsgClientLogon::kWasConvertedDeprecatedMsgFieldNumber;
const int CMsgClientLogon::kAnonUserTargetAccountNameFieldNumber;
const int CMsgClientLogon::kResolvedUserSteamIdFieldNumber;
const int CMsgClientLogon::kEresultSentryfileFieldNumber;
const int CMsgClientLogon::kShaSentryfileFieldNumber;
const int CMsgClientLogon::kAuthCodeFieldNumber;
const int CMsgClientLogon::kOtpTypeFieldNumber;
const int CMsgClientLogon::kOtpValueFieldNumber;
const int CMsgClientLogon::kOtpIdentifierFieldNumber;
const int CMsgClientLogon::kSteam2TicketRequestFieldNumber;
const int CMsgClientLogon::kSonyPsnTicketFieldNumber;
const int CMsgClientLogon::kSonyPsnServiceIdFieldNumber;
const int CMsgClientLogon::kCreateNewPsnLinkedAccountIfNeededFieldNumber;
const int CMsgClientLogon::kSonyPsnNameFieldNumber;
const int CMsgClientLogon::kGameServerAppIdFieldNumber;
const int CMsgClientLogon::kSteamguardDontRememberComputerFieldNumber;
const int CMsgClientLogon::kMachineNameFieldNumber;
const int CMsgClientLogon::kMachineNameUserchosenFieldNumber;
const int CMsgClientLogon::kCountryOverrideFieldNumber;
const int CMsgClientLogon::kIsSteamBoxFieldNumber;
const int CMsgClientLogon::kClientInstanceIdFieldNumber;
const int CMsgClientLogon::kTwoFactorCodeFieldNumber;
const int CMsgClientLogon::kSupportsRateLimitResponseFieldNumber;
const int CMsgClientLogon::kWebLogonNonceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLogon::CMsgClientLogon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5flogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLogon)
}
CMsgClientLogon::CMsgClientLogon(const CMsgClientLogon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_language()) {
    client_language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_language_);
  }
  wine_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wine_version()) {
    wine_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wine_version_);
  }
  machine_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_id()) {
    machine_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_id_);
  }
  steam2_auth_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_steam2_auth_ticket()) {
    steam2_auth_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steam2_auth_ticket_);
  }
  email_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_email_address()) {
    email_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_address_);
  }
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_name()) {
    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  game_server_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_server_token()) {
    game_server_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_server_token_);
  }
  login_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_login_key()) {
    login_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_key_);
  }
  anon_user_target_account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_anon_user_target_account_name()) {
    anon_user_target_account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.anon_user_target_account_name_);
  }
  sha_sentryfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_sentryfile()) {
    sha_sentryfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_sentryfile_);
  }
  auth_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_auth_code()) {
    auth_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_code_);
  }
  otp_identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_otp_identifier()) {
    otp_identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.otp_identifier_);
  }
  sony_psn_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sony_psn_ticket()) {
    sony_psn_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sony_psn_ticket_);
  }
  sony_psn_service_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sony_psn_service_id()) {
    sony_psn_service_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sony_psn_service_id_);
  }
  sony_psn_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sony_psn_name()) {
    sony_psn_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sony_psn_name_);
  }
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_name()) {
    machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
  }
  machine_name_userchosen_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_name_userchosen()) {
    machine_name_userchosen_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_userchosen_);
  }
  country_override_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_override()) {
    country_override_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_override_);
  }
  two_factor_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_two_factor_code()) {
    two_factor_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.two_factor_code_);
  }
  web_logon_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_web_logon_nonce()) {
    web_logon_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.web_logon_nonce_);
  }
  ::memcpy(&protocol_version_, &from.protocol_version_,
    reinterpret_cast<char*>(&client_instance_id_) -
    reinterpret_cast<char*>(&protocol_version_) + sizeof(client_instance_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLogon)
}

void CMsgClientLogon::SharedCtor() {
  client_language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wine_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam2_auth_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_server_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  anon_user_target_account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_sentryfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  otp_identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sony_psn_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sony_psn_service_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sony_psn_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_name_userchosen_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_override_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  two_factor_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  web_logon_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocol_version_, 0, reinterpret_cast<char*>(&client_instance_id_) -
    reinterpret_cast<char*>(&protocol_version_) + sizeof(client_instance_id_));
  _cached_size_ = 0;
}

CMsgClientLogon::~CMsgClientLogon() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLogon)
  SharedDtor();
}

void CMsgClientLogon::SharedDtor() {
  client_language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wine_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam2_auth_ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_server_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  anon_user_target_account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_sentryfile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  otp_identifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sony_psn_ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sony_psn_service_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sony_psn_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_name_userchosen_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_override_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  two_factor_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  web_logon_nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLogon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLogon::descriptor() {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5flogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientLogon& CMsgClientLogon::default_instance() {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientLogon* CMsgClientLogon::New(::google::protobuf::Arena* arena) const {
  CMsgClientLogon* n = new CMsgClientLogon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientLogon::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLogon)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_client_language()) {
      GOOGLE_DCHECK(!client_language_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*client_language_.UnsafeRawStringPointer())->clear();
    }
    if (has_wine_version()) {
      GOOGLE_DCHECK(!wine_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*wine_version_.UnsafeRawStringPointer())->clear();
    }
    if (has_machine_id()) {
      GOOGLE_DCHECK(!machine_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*machine_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_steam2_auth_ticket()) {
      GOOGLE_DCHECK(!steam2_auth_ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*steam2_auth_ticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_email_address()) {
      GOOGLE_DCHECK(!email_address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*email_address_.UnsafeRawStringPointer())->clear();
    }
    if (has_account_name()) {
      GOOGLE_DCHECK(!account_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*account_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_password()) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
    if (has_game_server_token()) {
      GOOGLE_DCHECK(!game_server_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_server_token_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_login_key()) {
      GOOGLE_DCHECK(!login_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*login_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_anon_user_target_account_name()) {
      GOOGLE_DCHECK(!anon_user_target_account_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*anon_user_target_account_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_sha_sentryfile()) {
      GOOGLE_DCHECK(!sha_sentryfile_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sha_sentryfile_.UnsafeRawStringPointer())->clear();
    }
    if (has_auth_code()) {
      GOOGLE_DCHECK(!auth_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*auth_code_.UnsafeRawStringPointer())->clear();
    }
    if (has_otp_identifier()) {
      GOOGLE_DCHECK(!otp_identifier_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*otp_identifier_.UnsafeRawStringPointer())->clear();
    }
    if (has_sony_psn_ticket()) {
      GOOGLE_DCHECK(!sony_psn_ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sony_psn_ticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_sony_psn_service_id()) {
      GOOGLE_DCHECK(!sony_psn_service_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sony_psn_service_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_sony_psn_name()) {
      GOOGLE_DCHECK(!sony_psn_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sony_psn_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[16 / 32] & 2031616u) {
    if (has_machine_name()) {
      GOOGLE_DCHECK(!machine_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*machine_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_machine_name_userchosen()) {
      GOOGLE_DCHECK(!machine_name_userchosen_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*machine_name_userchosen_.UnsafeRawStringPointer())->clear();
    }
    if (has_country_override()) {
      GOOGLE_DCHECK(!country_override_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_override_.UnsafeRawStringPointer())->clear();
    }
    if (has_two_factor_code()) {
      GOOGLE_DCHECK(!two_factor_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*two_factor_code_.UnsafeRawStringPointer())->clear();
    }
    if (has_web_logon_nonce()) {
      GOOGLE_DCHECK(!web_logon_nonce_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*web_logon_nonce_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[16 / 32] & 14680064u) {
    ::memset(&protocol_version_, 0, reinterpret_cast<char*>(&cell_id_) -
      reinterpret_cast<char*>(&protocol_version_) + sizeof(cell_id_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&last_session_id_, 0, reinterpret_cast<char*>(&launcher_type_) -
      reinterpret_cast<char*>(&last_session_id_) + sizeof(launcher_type_));
  }
  if (_has_bits_[32 / 32] & 255u) {
    ::memset(&ui_mode_, 0, reinterpret_cast<char*>(&resolved_user_steam_id_) -
      reinterpret_cast<char*>(&ui_mode_) + sizeof(resolved_user_steam_id_));
  }
  if (_has_bits_[40 / 32] & 32512u) {
    ::memset(&otp_type_, 0, reinterpret_cast<char*>(&client_instance_id_) -
      reinterpret_cast<char*>(&otp_type_) + sizeof(client_instance_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientLogon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLogon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 protocol_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 obfustucated_private_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_obfustucated_private_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obfustucated_private_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cell_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_cell_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_session_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_last_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_package_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_client_package_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_package_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string client_language = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_language().data(), this->client_language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.client_language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_os_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_client_os_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_os_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool should_remember_password = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_should_remember_password();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_remember_password_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string wine_version = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wine_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wine_version().data(), this->wine_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.wine_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_ms_from_cell_search = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_ping_ms_from_cell_search();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ms_from_cell_search_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 public_ip = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_public_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 qos_level = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_qos_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qos_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 client_supplied_steam_id = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u)) {
          set_has_client_supplied_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_supplied_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes machine_id = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_machine_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 launcher_type = 31 [default = 0];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_launcher_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &launcher_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ui_mode = 32 [default = 0];
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(256u)) {
          set_has_ui_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ui_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes steam2_auth_ticket = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(330u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_steam2_auth_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string email_address = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(338u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email_address().data(), this->email_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.email_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 rtime32_account_creation = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(349u)) {
          set_has_rtime32_account_creation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_account_creation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_name = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(402u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), this->account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(410u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_server_token = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(418u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_server_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_server_token().data(), this->game_server_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.game_server_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string login_key = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(482u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login_key().data(), this->login_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.login_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool was_converted_deprecated_msg = 70 [default = false];
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(560u)) {
          set_has_was_converted_deprecated_msg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_converted_deprecated_msg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string anon_user_target_account_name = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(642u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_anon_user_target_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->anon_user_target_account_name().data(), this->anon_user_target_account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.anon_user_target_account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 resolved_user_steam_id = 81;
      case 81: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(649u)) {
          set_has_resolved_user_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &resolved_user_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult_sentryfile = 82;
      case 82: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(656u)) {
          set_has_eresult_sentryfile();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_sentryfile_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_sentryfile = 83;
      case 83: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(666u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_sentryfile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string auth_code = 84;
      case 84: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(674u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->auth_code().data(), this->auth_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.auth_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 otp_type = 85;
      case 85: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(680u)) {
          set_has_otp_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &otp_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 otp_value = 86;
      case 86: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(688u)) {
          set_has_otp_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &otp_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string otp_identifier = 87;
      case 87: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(698u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otp_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->otp_identifier().data(), this->otp_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.otp_identifier");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool steam2_ticket_request = 88;
      case 88: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(704u)) {
          set_has_steam2_ticket_request();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steam2_ticket_request_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sony_psn_ticket = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(722u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sony_psn_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sony_psn_service_id = 91;
      case 91: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(730u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sony_psn_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sony_psn_service_id().data(), this->sony_psn_service_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.sony_psn_service_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
      case 92: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(736u)) {
          set_has_create_new_psn_linked_account_if_needed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_new_psn_linked_account_if_needed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sony_psn_name = 93;
      case 93: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(746u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sony_psn_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sony_psn_name().data(), this->sony_psn_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.sony_psn_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_server_app_id = 94;
      case 94: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(752u)) {
          set_has_game_server_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_server_app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool steamguard_dont_remember_computer = 95;
      case 95: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(760u)) {
          set_has_steamguard_dont_remember_computer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steamguard_dont_remember_computer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string machine_name = 96;
      case 96: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(770u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_name().data(), this->machine_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.machine_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string machine_name_userchosen = 97;
      case 97: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(778u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name_userchosen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_name_userchosen().data(), this->machine_name_userchosen().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.machine_name_userchosen");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country_override = 98;
      case 98: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(786u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_override()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_override().data(), this->country_override().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.country_override");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_steam_box = 99;
      case 99: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(792u)) {
          set_has_is_steam_box();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_steam_box_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 client_instance_id = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(800u)) {
          set_has_client_instance_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string two_factor_code = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(810u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_two_factor_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->two_factor_code().data(), this->two_factor_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.two_factor_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool supports_rate_limit_response = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(816u)) {
          set_has_supports_rate_limit_response();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supports_rate_limit_response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string web_logon_nonce = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(826u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_web_logon_nonce()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->web_logon_nonce().data(), this->web_logon_nonce().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogon.web_logon_nonce");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLogon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLogon)
  return false;
#undef DO_
}

void CMsgClientLogon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLogon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 protocol_version = 1;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->protocol_version(), output);
  }

  // optional uint32 obfustucated_private_ip = 2;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->obfustucated_private_ip(), output);
  }

  // optional uint32 cell_id = 3;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cell_id(), output);
  }

  // optional uint32 last_session_id = 4;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_session_id(), output);
  }

  // optional uint32 client_package_version = 5;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->client_package_version(), output);
  }

  // optional string client_language = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_language().data(), this->client_language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.client_language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->client_language(), output);
  }

  // optional uint32 client_os_type = 7;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->client_os_type(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool should_remember_password = 8 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->should_remember_password(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string wine_version = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wine_version().data(), this->wine_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.wine_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->wine_version(), output);
  }

  // optional uint32 ping_ms_from_cell_search = 10;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->ping_ms_from_cell_search(), output);
  }

  // optional uint32 public_ip = 20;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->public_ip(), output);
  }

  // optional uint32 qos_level = 21;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->qos_level(), output);
  }

  // optional fixed64 client_supplied_steam_id = 22;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(22, this->client_supplied_steam_id(), output);
  }

  // optional bytes machine_id = 30;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      30, this->machine_id(), output);
  }

  // optional uint32 launcher_type = 31 [default = 0];
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->launcher_type(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 ui_mode = 32 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->ui_mode(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes steam2_auth_ticket = 41;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      41, this->steam2_auth_ticket(), output);
  }

  // optional string email_address = 42;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email_address().data(), this->email_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.email_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      42, this->email_address(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed32 rtime32_account_creation = 43;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(43, this->rtime32_account_creation(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string account_name = 50;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      50, this->account_name(), output);
  }

  // optional string password = 51;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      51, this->password(), output);
  }

  // optional string game_server_token = 52;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_server_token().data(), this->game_server_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.game_server_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      52, this->game_server_token(), output);
  }

  // optional string login_key = 60;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_key().data(), this->login_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.login_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      60, this->login_key(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool was_converted_deprecated_msg = 70 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(70, this->was_converted_deprecated_msg(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string anon_user_target_account_name = 80;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->anon_user_target_account_name().data(), this->anon_user_target_account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.anon_user_target_account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      80, this->anon_user_target_account_name(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed64 resolved_user_steam_id = 81;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(81, this->resolved_user_steam_id(), output);
  }

  // optional int32 eresult_sentryfile = 82;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(82, this->eresult_sentryfile(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes sha_sentryfile = 83;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      83, this->sha_sentryfile(), output);
  }

  // optional string auth_code = 84;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_code().data(), this->auth_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.auth_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      84, this->auth_code(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 otp_type = 85;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(85, this->otp_type(), output);
  }

  // optional uint32 otp_value = 86;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(86, this->otp_value(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string otp_identifier = 87;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->otp_identifier().data(), this->otp_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.otp_identifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      87, this->otp_identifier(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool steam2_ticket_request = 88;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(88, this->steam2_ticket_request(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes sony_psn_ticket = 90;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      90, this->sony_psn_ticket(), output);
  }

  // optional string sony_psn_service_id = 91;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sony_psn_service_id().data(), this->sony_psn_service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.sony_psn_service_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      91, this->sony_psn_service_id(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(92, this->create_new_psn_linked_account_if_needed(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string sony_psn_name = 93;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sony_psn_name().data(), this->sony_psn_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.sony_psn_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      93, this->sony_psn_name(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 game_server_app_id = 94;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(94, this->game_server_app_id(), output);
  }

  // optional bool steamguard_dont_remember_computer = 95;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(95, this->steamguard_dont_remember_computer(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string machine_name = 96;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), this->machine_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.machine_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      96, this->machine_name(), output);
  }

  // optional string machine_name_userchosen = 97;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name_userchosen().data(), this->machine_name_userchosen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.machine_name_userchosen");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      97, this->machine_name_userchosen(), output);
  }

  // optional string country_override = 98;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_override().data(), this->country_override().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.country_override");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      98, this->country_override(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_steam_box = 99;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(99, this->is_steam_box(), output);
  }

  // optional uint64 client_instance_id = 100;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(100, this->client_instance_id(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string two_factor_code = 101;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->two_factor_code().data(), this->two_factor_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.two_factor_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      101, this->two_factor_code(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool supports_rate_limit_response = 102;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(102, this->supports_rate_limit_response(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string web_logon_nonce = 103;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->web_logon_nonce().data(), this->web_logon_nonce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.web_logon_nonce");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      103, this->web_logon_nonce(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLogon)
}

::google::protobuf::uint8* CMsgClientLogon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLogon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 protocol_version = 1;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->protocol_version(), target);
  }

  // optional uint32 obfustucated_private_ip = 2;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->obfustucated_private_ip(), target);
  }

  // optional uint32 cell_id = 3;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cell_id(), target);
  }

  // optional uint32 last_session_id = 4;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_session_id(), target);
  }

  // optional uint32 client_package_version = 5;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->client_package_version(), target);
  }

  // optional string client_language = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_language().data(), this->client_language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.client_language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->client_language(), target);
  }

  // optional uint32 client_os_type = 7;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->client_os_type(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool should_remember_password = 8 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->should_remember_password(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string wine_version = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wine_version().data(), this->wine_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.wine_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->wine_version(), target);
  }

  // optional uint32 ping_ms_from_cell_search = 10;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->ping_ms_from_cell_search(), target);
  }

  // optional uint32 public_ip = 20;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->public_ip(), target);
  }

  // optional uint32 qos_level = 21;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->qos_level(), target);
  }

  // optional fixed64 client_supplied_steam_id = 22;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(22, this->client_supplied_steam_id(), target);
  }

  // optional bytes machine_id = 30;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->machine_id(), target);
  }

  // optional uint32 launcher_type = 31 [default = 0];
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->launcher_type(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 ui_mode = 32 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->ui_mode(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes steam2_auth_ticket = 41;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        41, this->steam2_auth_ticket(), target);
  }

  // optional string email_address = 42;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email_address().data(), this->email_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.email_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->email_address(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed32 rtime32_account_creation = 43;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(43, this->rtime32_account_creation(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string account_name = 50;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->account_name(), target);
  }

  // optional string password = 51;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->password(), target);
  }

  // optional string game_server_token = 52;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_server_token().data(), this->game_server_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.game_server_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        52, this->game_server_token(), target);
  }

  // optional string login_key = 60;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_key().data(), this->login_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.login_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        60, this->login_key(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool was_converted_deprecated_msg = 70 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(70, this->was_converted_deprecated_msg(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string anon_user_target_account_name = 80;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->anon_user_target_account_name().data(), this->anon_user_target_account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.anon_user_target_account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        80, this->anon_user_target_account_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed64 resolved_user_steam_id = 81;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(81, this->resolved_user_steam_id(), target);
  }

  // optional int32 eresult_sentryfile = 82;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(82, this->eresult_sentryfile(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes sha_sentryfile = 83;
  if (cached_has_bits & 0x00000400u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        83, this->sha_sentryfile(), target);
  }

  // optional string auth_code = 84;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_code().data(), this->auth_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.auth_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        84, this->auth_code(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 otp_type = 85;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(85, this->otp_type(), target);
  }

  // optional uint32 otp_value = 86;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(86, this->otp_value(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string otp_identifier = 87;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->otp_identifier().data(), this->otp_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.otp_identifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        87, this->otp_identifier(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool steam2_ticket_request = 88;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(88, this->steam2_ticket_request(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes sony_psn_ticket = 90;
  if (cached_has_bits & 0x00002000u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        90, this->sony_psn_ticket(), target);
  }

  // optional string sony_psn_service_id = 91;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sony_psn_service_id().data(), this->sony_psn_service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.sony_psn_service_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        91, this->sony_psn_service_id(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(92, this->create_new_psn_linked_account_if_needed(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string sony_psn_name = 93;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sony_psn_name().data(), this->sony_psn_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.sony_psn_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        93, this->sony_psn_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 game_server_app_id = 94;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(94, this->game_server_app_id(), target);
  }

  // optional bool steamguard_dont_remember_computer = 95;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(95, this->steamguard_dont_remember_computer(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string machine_name = 96;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), this->machine_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.machine_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        96, this->machine_name(), target);
  }

  // optional string machine_name_userchosen = 97;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name_userchosen().data(), this->machine_name_userchosen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.machine_name_userchosen");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        97, this->machine_name_userchosen(), target);
  }

  // optional string country_override = 98;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_override().data(), this->country_override().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.country_override");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        98, this->country_override(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_steam_box = 99;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(99, this->is_steam_box(), target);
  }

  // optional uint64 client_instance_id = 100;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(100, this->client_instance_id(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string two_factor_code = 101;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->two_factor_code().data(), this->two_factor_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.two_factor_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->two_factor_code(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool supports_rate_limit_response = 102;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(102, this->supports_rate_limit_response(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string web_logon_nonce = 103;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->web_logon_nonce().data(), this->web_logon_nonce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogon.web_logon_nonce");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        103, this->web_logon_nonce(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLogon)
  return target;
}

size_t CMsgClientLogon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLogon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string client_language = 6;
    if (has_client_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_language());
    }

    // optional string wine_version = 9;
    if (has_wine_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wine_version());
    }

    // optional bytes machine_id = 30;
    if (has_machine_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->machine_id());
    }

    // optional bytes steam2_auth_ticket = 41;
    if (has_steam2_auth_ticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->steam2_auth_ticket());
    }

    // optional string email_address = 42;
    if (has_email_address()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email_address());
    }

    // optional string account_name = 50;
    if (has_account_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional string password = 51;
    if (has_password()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string game_server_token = 52;
    if (has_game_server_token()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_server_token());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string login_key = 60;
    if (has_login_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_key());
    }

    // optional string anon_user_target_account_name = 80;
    if (has_anon_user_target_account_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->anon_user_target_account_name());
    }

    // optional bytes sha_sentryfile = 83;
    if (has_sha_sentryfile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_sentryfile());
    }

    // optional string auth_code = 84;
    if (has_auth_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_code());
    }

    // optional string otp_identifier = 87;
    if (has_otp_identifier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->otp_identifier());
    }

    // optional bytes sony_psn_ticket = 90;
    if (has_sony_psn_ticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sony_psn_ticket());
    }

    // optional string sony_psn_service_id = 91;
    if (has_sony_psn_service_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sony_psn_service_id());
    }

    // optional string sony_psn_name = 93;
    if (has_sony_psn_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sony_psn_name());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional string machine_name = 96;
    if (has_machine_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

    // optional string machine_name_userchosen = 97;
    if (has_machine_name_userchosen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name_userchosen());
    }

    // optional string country_override = 98;
    if (has_country_override()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_override());
    }

    // optional string two_factor_code = 101;
    if (has_two_factor_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->two_factor_code());
    }

    // optional string web_logon_nonce = 103;
    if (has_web_logon_nonce()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->web_logon_nonce());
    }

    // optional uint32 protocol_version = 1;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

    // optional uint32 obfustucated_private_ip = 2;
    if (has_obfustucated_private_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obfustucated_private_ip());
    }

    // optional uint32 cell_id = 3;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 last_session_id = 4;
    if (has_last_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_session_id());
    }

    // optional uint32 client_package_version = 5;
    if (has_client_package_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_package_version());
    }

    // optional uint32 client_os_type = 7;
    if (has_client_os_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_os_type());
    }

    // optional uint32 ping_ms_from_cell_search = 10;
    if (has_ping_ms_from_cell_search()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ms_from_cell_search());
    }

    // optional uint32 public_ip = 20;
    if (has_public_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_ip());
    }

    // optional fixed64 client_supplied_steam_id = 22;
    if (has_client_supplied_steam_id()) {
      total_size += 2 + 8;
    }

    // optional uint32 qos_level = 21;
    if (has_qos_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qos_level());
    }

    // optional uint32 launcher_type = 31 [default = 0];
    if (has_launcher_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->launcher_type());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional uint32 ui_mode = 32 [default = 0];
    if (has_ui_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ui_mode());
    }

    // optional fixed32 rtime32_account_creation = 43;
    if (has_rtime32_account_creation()) {
      total_size += 2 + 4;
    }

    // optional bool should_remember_password = 8 [default = false];
    if (has_should_remember_password()) {
      total_size += 1 + 1;
    }

    // optional bool was_converted_deprecated_msg = 70 [default = false];
    if (has_was_converted_deprecated_msg()) {
      total_size += 2 + 1;
    }

    // optional bool steam2_ticket_request = 88;
    if (has_steam2_ticket_request()) {
      total_size += 2 + 1;
    }

    // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
    if (has_create_new_psn_linked_account_if_needed()) {
      total_size += 2 + 1;
    }

    // optional int32 eresult_sentryfile = 82;
    if (has_eresult_sentryfile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult_sentryfile());
    }

    // optional fixed64 resolved_user_steam_id = 81;
    if (has_resolved_user_steam_id()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[40 / 32] & 32512u) {
    // optional int32 otp_type = 85;
    if (has_otp_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->otp_type());
    }

    // optional uint32 otp_value = 86;
    if (has_otp_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->otp_value());
    }

    // optional int32 game_server_app_id = 94;
    if (has_game_server_app_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_server_app_id());
    }

    // optional bool steamguard_dont_remember_computer = 95;
    if (has_steamguard_dont_remember_computer()) {
      total_size += 2 + 1;
    }

    // optional bool is_steam_box = 99;
    if (has_is_steam_box()) {
      total_size += 2 + 1;
    }

    // optional bool supports_rate_limit_response = 102;
    if (has_supports_rate_limit_response()) {
      total_size += 2 + 1;
    }

    // optional uint64 client_instance_id = 100;
    if (has_client_instance_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_instance_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLogon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLogon)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLogon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientLogon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLogon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLogon)
    MergeFrom(*source);
  }
}

void CMsgClientLogon::MergeFrom(const CMsgClientLogon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLogon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_client_language();
      client_language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_language_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_wine_version();
      wine_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wine_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_machine_id();
      machine_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_steam2_auth_ticket();
      steam2_auth_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steam2_auth_ticket_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_email_address();
      email_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_address_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_account_name();
      account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_game_server_token();
      game_server_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_server_token_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_login_key();
      login_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_key_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_anon_user_target_account_name();
      anon_user_target_account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.anon_user_target_account_name_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_sha_sentryfile();
      sha_sentryfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_sentryfile_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_auth_code();
      auth_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_code_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_otp_identifier();
      otp_identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.otp_identifier_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_sony_psn_ticket();
      sony_psn_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sony_psn_ticket_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_sony_psn_service_id();
      sony_psn_service_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sony_psn_service_id_);
    }
    if (cached_has_bits & 0x00008000u) {
      set_has_sony_psn_name();
      sony_psn_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sony_psn_name_);
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      set_has_machine_name();
      machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
    }
    if (cached_has_bits & 0x00020000u) {
      set_has_machine_name_userchosen();
      machine_name_userchosen_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_userchosen_);
    }
    if (cached_has_bits & 0x00040000u) {
      set_has_country_override();
      country_override_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_override_);
    }
    if (cached_has_bits & 0x00080000u) {
      set_has_two_factor_code();
      two_factor_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.two_factor_code_);
    }
    if (cached_has_bits & 0x00100000u) {
      set_has_web_logon_nonce();
      web_logon_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.web_logon_nonce_);
    }
    if (cached_has_bits & 0x00200000u) {
      protocol_version_ = from.protocol_version_;
    }
    if (cached_has_bits & 0x00400000u) {
      obfustucated_private_ip_ = from.obfustucated_private_ip_;
    }
    if (cached_has_bits & 0x00800000u) {
      cell_id_ = from.cell_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      last_session_id_ = from.last_session_id_;
    }
    if (cached_has_bits & 0x02000000u) {
      client_package_version_ = from.client_package_version_;
    }
    if (cached_has_bits & 0x04000000u) {
      client_os_type_ = from.client_os_type_;
    }
    if (cached_has_bits & 0x08000000u) {
      ping_ms_from_cell_search_ = from.ping_ms_from_cell_search_;
    }
    if (cached_has_bits & 0x10000000u) {
      public_ip_ = from.public_ip_;
    }
    if (cached_has_bits & 0x20000000u) {
      client_supplied_steam_id_ = from.client_supplied_steam_id_;
    }
    if (cached_has_bits & 0x40000000u) {
      qos_level_ = from.qos_level_;
    }
    if (cached_has_bits & 0x80000000u) {
      launcher_type_ = from.launcher_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      ui_mode_ = from.ui_mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      rtime32_account_creation_ = from.rtime32_account_creation_;
    }
    if (cached_has_bits & 0x00000004u) {
      should_remember_password_ = from.should_remember_password_;
    }
    if (cached_has_bits & 0x00000008u) {
      was_converted_deprecated_msg_ = from.was_converted_deprecated_msg_;
    }
    if (cached_has_bits & 0x00000010u) {
      steam2_ticket_request_ = from.steam2_ticket_request_;
    }
    if (cached_has_bits & 0x00000020u) {
      create_new_psn_linked_account_if_needed_ = from.create_new_psn_linked_account_if_needed_;
    }
    if (cached_has_bits & 0x00000040u) {
      eresult_sentryfile_ = from.eresult_sentryfile_;
    }
    if (cached_has_bits & 0x00000080u) {
      resolved_user_steam_id_ = from.resolved_user_steam_id_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      otp_type_ = from.otp_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      otp_value_ = from.otp_value_;
    }
    if (cached_has_bits & 0x00000400u) {
      game_server_app_id_ = from.game_server_app_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      steamguard_dont_remember_computer_ = from.steamguard_dont_remember_computer_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_steam_box_ = from.is_steam_box_;
    }
    if (cached_has_bits & 0x00002000u) {
      supports_rate_limit_response_ = from.supports_rate_limit_response_;
    }
    if (cached_has_bits & 0x00004000u) {
      client_instance_id_ = from.client_instance_id_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CMsgClientLogon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLogon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLogon::CopyFrom(const CMsgClientLogon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLogon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLogon::IsInitialized() const {
  return true;
}

void CMsgClientLogon::Swap(CMsgClientLogon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLogon::InternalSwap(CMsgClientLogon* other) {
  client_language_.Swap(&other->client_language_);
  wine_version_.Swap(&other->wine_version_);
  machine_id_.Swap(&other->machine_id_);
  steam2_auth_ticket_.Swap(&other->steam2_auth_ticket_);
  email_address_.Swap(&other->email_address_);
  account_name_.Swap(&other->account_name_);
  password_.Swap(&other->password_);
  game_server_token_.Swap(&other->game_server_token_);
  login_key_.Swap(&other->login_key_);
  anon_user_target_account_name_.Swap(&other->anon_user_target_account_name_);
  sha_sentryfile_.Swap(&other->sha_sentryfile_);
  auth_code_.Swap(&other->auth_code_);
  otp_identifier_.Swap(&other->otp_identifier_);
  sony_psn_ticket_.Swap(&other->sony_psn_ticket_);
  sony_psn_service_id_.Swap(&other->sony_psn_service_id_);
  sony_psn_name_.Swap(&other->sony_psn_name_);
  machine_name_.Swap(&other->machine_name_);
  machine_name_userchosen_.Swap(&other->machine_name_userchosen_);
  country_override_.Swap(&other->country_override_);
  two_factor_code_.Swap(&other->two_factor_code_);
  web_logon_nonce_.Swap(&other->web_logon_nonce_);
  std::swap(protocol_version_, other->protocol_version_);
  std::swap(obfustucated_private_ip_, other->obfustucated_private_ip_);
  std::swap(cell_id_, other->cell_id_);
  std::swap(last_session_id_, other->last_session_id_);
  std::swap(client_package_version_, other->client_package_version_);
  std::swap(client_os_type_, other->client_os_type_);
  std::swap(ping_ms_from_cell_search_, other->ping_ms_from_cell_search_);
  std::swap(public_ip_, other->public_ip_);
  std::swap(client_supplied_steam_id_, other->client_supplied_steam_id_);
  std::swap(qos_level_, other->qos_level_);
  std::swap(launcher_type_, other->launcher_type_);
  std::swap(ui_mode_, other->ui_mode_);
  std::swap(rtime32_account_creation_, other->rtime32_account_creation_);
  std::swap(should_remember_password_, other->should_remember_password_);
  std::swap(was_converted_deprecated_msg_, other->was_converted_deprecated_msg_);
  std::swap(steam2_ticket_request_, other->steam2_ticket_request_);
  std::swap(create_new_psn_linked_account_if_needed_, other->create_new_psn_linked_account_if_needed_);
  std::swap(eresult_sentryfile_, other->eresult_sentryfile_);
  std::swap(resolved_user_steam_id_, other->resolved_user_steam_id_);
  std::swap(otp_type_, other->otp_type_);
  std::swap(otp_value_, other->otp_value_);
  std::swap(game_server_app_id_, other->game_server_app_id_);
  std::swap(steamguard_dont_remember_computer_, other->steamguard_dont_remember_computer_);
  std::swap(is_steam_box_, other->is_steam_box_);
  std::swap(supports_rate_limit_response_, other->supports_rate_limit_response_);
  std::swap(client_instance_id_, other->client_instance_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientLogon::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5flogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientLogon

// optional uint32 protocol_version = 1;
bool CMsgClientLogon::has_protocol_version() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CMsgClientLogon::set_has_protocol_version() {
  _has_bits_[0] |= 0x00200000u;
}
void CMsgClientLogon::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00200000u;
}
void CMsgClientLogon::clear_protocol_version() {
  protocol_version_ = 0u;
  clear_has_protocol_version();
}
::google::protobuf::uint32 CMsgClientLogon::protocol_version() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.protocol_version)
  return protocol_version_;
}
void CMsgClientLogon::set_protocol_version(::google::protobuf::uint32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.protocol_version)
}

// optional uint32 obfustucated_private_ip = 2;
bool CMsgClientLogon::has_obfustucated_private_ip() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CMsgClientLogon::set_has_obfustucated_private_ip() {
  _has_bits_[0] |= 0x00400000u;
}
void CMsgClientLogon::clear_has_obfustucated_private_ip() {
  _has_bits_[0] &= ~0x00400000u;
}
void CMsgClientLogon::clear_obfustucated_private_ip() {
  obfustucated_private_ip_ = 0u;
  clear_has_obfustucated_private_ip();
}
::google::protobuf::uint32 CMsgClientLogon::obfustucated_private_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.obfustucated_private_ip)
  return obfustucated_private_ip_;
}
void CMsgClientLogon::set_obfustucated_private_ip(::google::protobuf::uint32 value) {
  set_has_obfustucated_private_ip();
  obfustucated_private_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.obfustucated_private_ip)
}

// optional uint32 cell_id = 3;
bool CMsgClientLogon::has_cell_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CMsgClientLogon::set_has_cell_id() {
  _has_bits_[0] |= 0x00800000u;
}
void CMsgClientLogon::clear_has_cell_id() {
  _has_bits_[0] &= ~0x00800000u;
}
void CMsgClientLogon::clear_cell_id() {
  cell_id_ = 0u;
  clear_has_cell_id();
}
::google::protobuf::uint32 CMsgClientLogon::cell_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.cell_id)
  return cell_id_;
}
void CMsgClientLogon::set_cell_id(::google::protobuf::uint32 value) {
  set_has_cell_id();
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.cell_id)
}

// optional uint32 last_session_id = 4;
bool CMsgClientLogon::has_last_session_id() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void CMsgClientLogon::set_has_last_session_id() {
  _has_bits_[0] |= 0x01000000u;
}
void CMsgClientLogon::clear_has_last_session_id() {
  _has_bits_[0] &= ~0x01000000u;
}
void CMsgClientLogon::clear_last_session_id() {
  last_session_id_ = 0u;
  clear_has_last_session_id();
}
::google::protobuf::uint32 CMsgClientLogon::last_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.last_session_id)
  return last_session_id_;
}
void CMsgClientLogon::set_last_session_id(::google::protobuf::uint32 value) {
  set_has_last_session_id();
  last_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.last_session_id)
}

// optional uint32 client_package_version = 5;
bool CMsgClientLogon::has_client_package_version() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void CMsgClientLogon::set_has_client_package_version() {
  _has_bits_[0] |= 0x02000000u;
}
void CMsgClientLogon::clear_has_client_package_version() {
  _has_bits_[0] &= ~0x02000000u;
}
void CMsgClientLogon::clear_client_package_version() {
  client_package_version_ = 0u;
  clear_has_client_package_version();
}
::google::protobuf::uint32 CMsgClientLogon::client_package_version() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.client_package_version)
  return client_package_version_;
}
void CMsgClientLogon::set_client_package_version(::google::protobuf::uint32 value) {
  set_has_client_package_version();
  client_package_version_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.client_package_version)
}

// optional string client_language = 6;
bool CMsgClientLogon::has_client_language() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientLogon::set_has_client_language() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientLogon::clear_has_client_language() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientLogon::clear_client_language() {
  client_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_language();
}
const ::std::string& CMsgClientLogon::client_language() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.client_language)
  return client_language_.GetNoArena();
}
void CMsgClientLogon::set_client_language(const ::std::string& value) {
  set_has_client_language();
  client_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.client_language)
}
#if LANG_CXX11
void CMsgClientLogon::set_client_language(::std::string&& value) {
  set_has_client_language();
  client_language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogon.client_language)
}
#endif
void CMsgClientLogon::set_client_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_language();
  client_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogon.client_language)
}
void CMsgClientLogon::set_client_language(const char* value, size_t size) {
  set_has_client_language();
  client_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogon.client_language)
}
::std::string* CMsgClientLogon::mutable_client_language() {
  set_has_client_language();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogon.client_language)
  return client_language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogon::release_client_language() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogon.client_language)
  clear_has_client_language();
  return client_language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogon::set_allocated_client_language(::std::string* client_language) {
  if (client_language != NULL) {
    set_has_client_language();
  } else {
    clear_has_client_language();
  }
  client_language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_language);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogon.client_language)
}

// optional uint32 client_os_type = 7;
bool CMsgClientLogon::has_client_os_type() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void CMsgClientLogon::set_has_client_os_type() {
  _has_bits_[0] |= 0x04000000u;
}
void CMsgClientLogon::clear_has_client_os_type() {
  _has_bits_[0] &= ~0x04000000u;
}
void CMsgClientLogon::clear_client_os_type() {
  client_os_type_ = 0u;
  clear_has_client_os_type();
}
::google::protobuf::uint32 CMsgClientLogon::client_os_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.client_os_type)
  return client_os_type_;
}
void CMsgClientLogon::set_client_os_type(::google::protobuf::uint32 value) {
  set_has_client_os_type();
  client_os_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.client_os_type)
}

// optional bool should_remember_password = 8 [default = false];
bool CMsgClientLogon::has_should_remember_password() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void CMsgClientLogon::set_has_should_remember_password() {
  _has_bits_[1] |= 0x00000004u;
}
void CMsgClientLogon::clear_has_should_remember_password() {
  _has_bits_[1] &= ~0x00000004u;
}
void CMsgClientLogon::clear_should_remember_password() {
  should_remember_password_ = false;
  clear_has_should_remember_password();
}
bool CMsgClientLogon::should_remember_password() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.should_remember_password)
  return should_remember_password_;
}
void CMsgClientLogon::set_should_remember_password(bool value) {
  set_has_should_remember_password();
  should_remember_password_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.should_remember_password)
}

// optional string wine_version = 9;
bool CMsgClientLogon::has_wine_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientLogon::set_has_wine_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientLogon::clear_has_wine_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientLogon::clear_wine_version() {
  wine_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wine_version();
}
const ::std::string& CMsgClientLogon::wine_version() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.wine_version)
  return wine_version_.GetNoArena();
}
void CMsgClientLogon::set_wine_version(const ::std::string& value) {
  set_has_wine_version();
  wine_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.wine_version)
}
#if LANG_CXX11
void CMsgClientLogon::set_wine_version(::std::string&& value) {
  set_has_wine_version();
  wine_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogon.wine_version)
}
#endif
void CMsgClientLogon::set_wine_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wine_version();
  wine_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogon.wine_version)
}
void CMsgClientLogon::set_wine_version(const char* value, size_t size) {
  set_has_wine_version();
  wine_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogon.wine_version)
}
::std::string* CMsgClientLogon::mutable_wine_version() {
  set_has_wine_version();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogon.wine_version)
  return wine_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogon::release_wine_version() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogon.wine_version)
  clear_has_wine_version();
  return wine_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogon::set_allocated_wine_version(::std::string* wine_version) {
  if (wine_version != NULL) {
    set_has_wine_version();
  } else {
    clear_has_wine_version();
  }
  wine_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wine_version);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogon.wine_version)
}

// optional uint32 ping_ms_from_cell_search = 10;
bool CMsgClientLogon::has_ping_ms_from_cell_search() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void CMsgClientLogon::set_has_ping_ms_from_cell_search() {
  _has_bits_[0] |= 0x08000000u;
}
void CMsgClientLogon::clear_has_ping_ms_from_cell_search() {
  _has_bits_[0] &= ~0x08000000u;
}
void CMsgClientLogon::clear_ping_ms_from_cell_search() {
  ping_ms_from_cell_search_ = 0u;
  clear_has_ping_ms_from_cell_search();
}
::google::protobuf::uint32 CMsgClientLogon::ping_ms_from_cell_search() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.ping_ms_from_cell_search)
  return ping_ms_from_cell_search_;
}
void CMsgClientLogon::set_ping_ms_from_cell_search(::google::protobuf::uint32 value) {
  set_has_ping_ms_from_cell_search();
  ping_ms_from_cell_search_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.ping_ms_from_cell_search)
}

// optional uint32 public_ip = 20;
bool CMsgClientLogon::has_public_ip() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void CMsgClientLogon::set_has_public_ip() {
  _has_bits_[0] |= 0x10000000u;
}
void CMsgClientLogon::clear_has_public_ip() {
  _has_bits_[0] &= ~0x10000000u;
}
void CMsgClientLogon::clear_public_ip() {
  public_ip_ = 0u;
  clear_has_public_ip();
}
::google::protobuf::uint32 CMsgClientLogon::public_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.public_ip)
  return public_ip_;
}
void CMsgClientLogon::set_public_ip(::google::protobuf::uint32 value) {
  set_has_public_ip();
  public_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.public_ip)
}

// optional uint32 qos_level = 21;
bool CMsgClientLogon::has_qos_level() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void CMsgClientLogon::set_has_qos_level() {
  _has_bits_[0] |= 0x40000000u;
}
void CMsgClientLogon::clear_has_qos_level() {
  _has_bits_[0] &= ~0x40000000u;
}
void CMsgClientLogon::clear_qos_level() {
  qos_level_ = 0u;
  clear_has_qos_level();
}
::google::protobuf::uint32 CMsgClientLogon::qos_level() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.qos_level)
  return qos_level_;
}
void CMsgClientLogon::set_qos_level(::google::protobuf::uint32 value) {
  set_has_qos_level();
  qos_level_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.qos_level)
}

// optional fixed64 client_supplied_steam_id = 22;
bool CMsgClientLogon::has_client_supplied_steam_id() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void CMsgClientLogon::set_has_client_supplied_steam_id() {
  _has_bits_[0] |= 0x20000000u;
}
void CMsgClientLogon::clear_has_client_supplied_steam_id() {
  _has_bits_[0] &= ~0x20000000u;
}
void CMsgClientLogon::clear_client_supplied_steam_id() {
  client_supplied_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_client_supplied_steam_id();
}
::google::protobuf::uint64 CMsgClientLogon::client_supplied_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.client_supplied_steam_id)
  return client_supplied_steam_id_;
}
void CMsgClientLogon::set_client_supplied_steam_id(::google::protobuf::uint64 value) {
  set_has_client_supplied_steam_id();
  client_supplied_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.client_supplied_steam_id)
}

// optional bytes machine_id = 30;
bool CMsgClientLogon::has_machine_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientLogon::set_has_machine_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientLogon::clear_has_machine_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientLogon::clear_machine_id() {
  machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_id();
}
const ::std::string& CMsgClientLogon::machine_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.machine_id)
  return machine_id_.GetNoArena();
}
void CMsgClientLogon::set_machine_id(const ::std::string& value) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.machine_id)
}
#if LANG_CXX11
void CMsgClientLogon::set_machine_id(::std::string&& value) {
  set_has_machine_id();
  machine_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogon.machine_id)
}
#endif
void CMsgClientLogon::set_machine_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogon.machine_id)
}
void CMsgClientLogon::set_machine_id(const void* value, size_t size) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogon.machine_id)
}
::std::string* CMsgClientLogon::mutable_machine_id() {
  set_has_machine_id();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogon.machine_id)
  return machine_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogon::release_machine_id() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogon.machine_id)
  clear_has_machine_id();
  return machine_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogon::set_allocated_machine_id(::std::string* machine_id) {
  if (machine_id != NULL) {
    set_has_machine_id();
  } else {
    clear_has_machine_id();
  }
  machine_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_id);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogon.machine_id)
}

// optional uint32 launcher_type = 31 [default = 0];
bool CMsgClientLogon::has_launcher_type() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void CMsgClientLogon::set_has_launcher_type() {
  _has_bits_[0] |= 0x80000000u;
}
void CMsgClientLogon::clear_has_launcher_type() {
  _has_bits_[0] &= ~0x80000000u;
}
void CMsgClientLogon::clear_launcher_type() {
  launcher_type_ = 0u;
  clear_has_launcher_type();
}
::google::protobuf::uint32 CMsgClientLogon::launcher_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.launcher_type)
  return launcher_type_;
}
void CMsgClientLogon::set_launcher_type(::google::protobuf::uint32 value) {
  set_has_launcher_type();
  launcher_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.launcher_type)
}

// optional uint32 ui_mode = 32 [default = 0];
bool CMsgClientLogon::has_ui_mode() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void CMsgClientLogon::set_has_ui_mode() {
  _has_bits_[1] |= 0x00000001u;
}
void CMsgClientLogon::clear_has_ui_mode() {
  _has_bits_[1] &= ~0x00000001u;
}
void CMsgClientLogon::clear_ui_mode() {
  ui_mode_ = 0u;
  clear_has_ui_mode();
}
::google::protobuf::uint32 CMsgClientLogon::ui_mode() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.ui_mode)
  return ui_mode_;
}
void CMsgClientLogon::set_ui_mode(::google::protobuf::uint32 value) {
  set_has_ui_mode();
  ui_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.ui_mode)
}

// optional bytes steam2_auth_ticket = 41;
bool CMsgClientLogon::has_steam2_auth_ticket() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientLogon::set_has_steam2_auth_ticket() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientLogon::clear_has_steam2_auth_ticket() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientLogon::clear_steam2_auth_ticket() {
  steam2_auth_ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_steam2_auth_ticket();
}
const ::std::string& CMsgClientLogon::steam2_auth_ticket() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.steam2_auth_ticket)
  return steam2_auth_ticket_.GetNoArena();
}
void CMsgClientLogon::set_steam2_auth_ticket(const ::std::string& value) {
  set_has_steam2_auth_ticket();
  steam2_auth_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.steam2_auth_ticket)
}
#if LANG_CXX11
void CMsgClientLogon::set_steam2_auth_ticket(::std::string&& value) {
  set_has_steam2_auth_ticket();
  steam2_auth_ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogon.steam2_auth_ticket)
}
#endif
void CMsgClientLogon::set_steam2_auth_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_steam2_auth_ticket();
  steam2_auth_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogon.steam2_auth_ticket)
}
void CMsgClientLogon::set_steam2_auth_ticket(const void* value, size_t size) {
  set_has_steam2_auth_ticket();
  steam2_auth_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogon.steam2_auth_ticket)
}
::std::string* CMsgClientLogon::mutable_steam2_auth_ticket() {
  set_has_steam2_auth_ticket();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogon.steam2_auth_ticket)
  return steam2_auth_ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogon::release_steam2_auth_ticket() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogon.steam2_auth_ticket)
  clear_has_steam2_auth_ticket();
  return steam2_auth_ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogon::set_allocated_steam2_auth_ticket(::std::string* steam2_auth_ticket) {
  if (steam2_auth_ticket != NULL) {
    set_has_steam2_auth_ticket();
  } else {
    clear_has_steam2_auth_ticket();
  }
  steam2_auth_ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), steam2_auth_ticket);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogon.steam2_auth_ticket)
}

// optional string email_address = 42;
bool CMsgClientLogon::has_email_address() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientLogon::set_has_email_address() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientLogon::clear_has_email_address() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientLogon::clear_email_address() {
  email_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email_address();
}
const ::std::string& CMsgClientLogon::email_address() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.email_address)
  return email_address_.GetNoArena();
}
void CMsgClientLogon::set_email_address(const ::std::string& value) {
  set_has_email_address();
  email_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.email_address)
}
#if LANG_CXX11
void CMsgClientLogon::set_email_address(::std::string&& value) {
  set_has_email_address();
  email_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogon.email_address)
}
#endif
void CMsgClientLogon::set_email_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email_address();
  email_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogon.email_address)
}
void CMsgClientLogon::set_email_address(const char* value, size_t size) {
  set_has_email_address();
  email_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogon.email_address)
}
::std::string* CMsgClientLogon::mutable_email_address() {
  set_has_email_address();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogon.email_address)
  return email_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogon::release_email_address() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogon.email_address)
  clear_has_email_address();
  return email_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogon::set_allocated_email_address(::std::string* email_address) {
  if (email_address != NULL) {
    set_has_email_address();
  } else {
    clear_has_email_address();
  }
  email_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email_address);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogon.email_address)
}

// optional fixed32 rtime32_account_creation = 43;
bool CMsgClientLogon::has_rtime32_account_creation() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void CMsgClientLogon::set_has_rtime32_account_creation() {
  _has_bits_[1] |= 0x00000002u;
}
void CMsgClientLogon::clear_has_rtime32_account_creation() {
  _has_bits_[1] &= ~0x00000002u;
}
void CMsgClientLogon::clear_rtime32_account_creation() {
  rtime32_account_creation_ = 0u;
  clear_has_rtime32_account_creation();
}
::google::protobuf::uint32 CMsgClientLogon::rtime32_account_creation() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.rtime32_account_creation)
  return rtime32_account_creation_;
}
void CMsgClientLogon::set_rtime32_account_creation(::google::protobuf::uint32 value) {
  set_has_rtime32_account_creation();
  rtime32_account_creation_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.rtime32_account_creation)
}

// optional string account_name = 50;
bool CMsgClientLogon::has_account_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientLogon::set_has_account_name() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientLogon::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientLogon::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_name();
}
const ::std::string& CMsgClientLogon::account_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.account_name)
  return account_name_.GetNoArena();
}
void CMsgClientLogon::set_account_name(const ::std::string& value) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.account_name)
}
#if LANG_CXX11
void CMsgClientLogon::set_account_name(::std::string&& value) {
  set_has_account_name();
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogon.account_name)
}
#endif
void CMsgClientLogon::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogon.account_name)
}
void CMsgClientLogon::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogon.account_name)
}
::std::string* CMsgClientLogon::mutable_account_name() {
  set_has_account_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogon.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogon::release_account_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogon.account_name)
  clear_has_account_name();
  return account_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogon::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    set_has_account_name();
  } else {
    clear_has_account_name();
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogon.account_name)
}

// optional string password = 51;
bool CMsgClientLogon::has_password() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientLogon::set_has_password() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientLogon::clear_has_password() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientLogon::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& CMsgClientLogon::password() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.password)
  return password_.GetNoArena();
}
void CMsgClientLogon::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.password)
}
#if LANG_CXX11
void CMsgClientLogon::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogon.password)
}
#endif
void CMsgClientLogon::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogon.password)
}
void CMsgClientLogon::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogon.password)
}
::std::string* CMsgClientLogon::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogon.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogon::release_password() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogon.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogon::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogon.password)
}

// optional string game_server_token = 52;
bool CMsgClientLogon::has_game_server_token() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgClientLogon::set_has_game_server_token() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgClientLogon::clear_has_game_server_token() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgClientLogon::clear_game_server_token() {
  game_server_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_server_token();
}
const ::std::string& CMsgClientLogon::game_server_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.game_server_token)
  return game_server_token_.GetNoArena();
}
void CMsgClientLogon::set_game_server_token(const ::std::string& value) {
  set_has_game_server_token();
  game_server_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.game_server_token)
}
#if LANG_CXX11
void CMsgClientLogon::set_game_server_token(::std::string&& value) {
  set_has_game_server_token();
  game_server_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogon.game_server_token)
}
#endif
void CMsgClientLogon::set_game_server_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_server_token();
  game_server_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogon.game_server_token)
}
void CMsgClientLogon::set_game_server_token(const char* value, size_t size) {
  set_has_game_server_token();
  game_server_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogon.game_server_token)
}
::std::string* CMsgClientLogon::mutable_game_server_token() {
  set_has_game_server_token();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogon.game_server_token)
  return game_server_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogon::release_game_server_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogon.game_server_token)
  clear_has_game_server_token();
  return game_server_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogon::set_allocated_game_server_token(::std::string* game_server_token) {
  if (game_server_token != NULL) {
    set_has_game_server_token();
  } else {
    clear_has_game_server_token();
  }
  game_server_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_server_token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogon.game_server_token)
}

// optional string login_key = 60;
bool CMsgClientLogon::has_login_key() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgClientLogon::set_has_login_key() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgClientLogon::clear_has_login_key() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgClientLogon::clear_login_key() {
  login_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_login_key();
}
const ::std::string& CMsgClientLogon::login_key() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.login_key)
  return login_key_.GetNoArena();
}
void CMsgClientLogon::set_login_key(const ::std::string& value) {
  set_has_login_key();
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.login_key)
}
#if LANG_CXX11
void CMsgClientLogon::set_login_key(::std::string&& value) {
  set_has_login_key();
  login_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogon.login_key)
}
#endif
void CMsgClientLogon::set_login_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_login_key();
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogon.login_key)
}
void CMsgClientLogon::set_login_key(const char* value, size_t size) {
  set_has_login_key();
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogon.login_key)
}
::std::string* CMsgClientLogon::mutable_login_key() {
  set_has_login_key();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogon.login_key)
  return login_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogon::release_login_key() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogon.login_key)
  clear_has_login_key();
  return login_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogon::set_allocated_login_key(::std::string* login_key) {
  if (login_key != NULL) {
    set_has_login_key();
  } else {
    clear_has_login_key();
  }
  login_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_key);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogon.login_key)
}

// optional bool was_converted_deprecated_msg = 70 [default = false];
bool CMsgClientLogon::has_was_converted_deprecated_msg() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void CMsgClientLogon::set_has_was_converted_deprecated_msg() {
  _has_bits_[1] |= 0x00000008u;
}
void CMsgClientLogon::clear_has_was_converted_deprecated_msg() {
  _has_bits_[1] &= ~0x00000008u;
}
void CMsgClientLogon::clear_was_converted_deprecated_msg() {
  was_converted_deprecated_msg_ = false;
  clear_has_was_converted_deprecated_msg();
}
bool CMsgClientLogon::was_converted_deprecated_msg() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.was_converted_deprecated_msg)
  return was_converted_deprecated_msg_;
}
void CMsgClientLogon::set_was_converted_deprecated_msg(bool value) {
  set_has_was_converted_deprecated_msg();
  was_converted_deprecated_msg_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.was_converted_deprecated_msg)
}

// optional string anon_user_target_account_name = 80;
bool CMsgClientLogon::has_anon_user_target_account_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgClientLogon::set_has_anon_user_target_account_name() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgClientLogon::clear_has_anon_user_target_account_name() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgClientLogon::clear_anon_user_target_account_name() {
  anon_user_target_account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_anon_user_target_account_name();
}
const ::std::string& CMsgClientLogon::anon_user_target_account_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.anon_user_target_account_name)
  return anon_user_target_account_name_.GetNoArena();
}
void CMsgClientLogon::set_anon_user_target_account_name(const ::std::string& value) {
  set_has_anon_user_target_account_name();
  anon_user_target_account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.anon_user_target_account_name)
}
#if LANG_CXX11
void CMsgClientLogon::set_anon_user_target_account_name(::std::string&& value) {
  set_has_anon_user_target_account_name();
  anon_user_target_account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogon.anon_user_target_account_name)
}
#endif
void CMsgClientLogon::set_anon_user_target_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_anon_user_target_account_name();
  anon_user_target_account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogon.anon_user_target_account_name)
}
void CMsgClientLogon::set_anon_user_target_account_name(const char* value, size_t size) {
  set_has_anon_user_target_account_name();
  anon_user_target_account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogon.anon_user_target_account_name)
}
::std::string* CMsgClientLogon::mutable_anon_user_target_account_name() {
  set_has_anon_user_target_account_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogon.anon_user_target_account_name)
  return anon_user_target_account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogon::release_anon_user_target_account_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogon.anon_user_target_account_name)
  clear_has_anon_user_target_account_name();
  return anon_user_target_account_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogon::set_allocated_anon_user_target_account_name(::std::string* anon_user_target_account_name) {
  if (anon_user_target_account_name != NULL) {
    set_has_anon_user_target_account_name();
  } else {
    clear_has_anon_user_target_account_name();
  }
  anon_user_target_account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), anon_user_target_account_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogon.anon_user_target_account_name)
}

// optional fixed64 resolved_user_steam_id = 81;
bool CMsgClientLogon::has_resolved_user_steam_id() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void CMsgClientLogon::set_has_resolved_user_steam_id() {
  _has_bits_[1] |= 0x00000080u;
}
void CMsgClientLogon::clear_has_resolved_user_steam_id() {
  _has_bits_[1] &= ~0x00000080u;
}
void CMsgClientLogon::clear_resolved_user_steam_id() {
  resolved_user_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_resolved_user_steam_id();
}
::google::protobuf::uint64 CMsgClientLogon::resolved_user_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.resolved_user_steam_id)
  return resolved_user_steam_id_;
}
void CMsgClientLogon::set_resolved_user_steam_id(::google::protobuf::uint64 value) {
  set_has_resolved_user_steam_id();
  resolved_user_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.resolved_user_steam_id)
}

// optional int32 eresult_sentryfile = 82;
bool CMsgClientLogon::has_eresult_sentryfile() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void CMsgClientLogon::set_has_eresult_sentryfile() {
  _has_bits_[1] |= 0x00000040u;
}
void CMsgClientLogon::clear_has_eresult_sentryfile() {
  _has_bits_[1] &= ~0x00000040u;
}
void CMsgClientLogon::clear_eresult_sentryfile() {
  eresult_sentryfile_ = 0;
  clear_has_eresult_sentryfile();
}
::google::protobuf::int32 CMsgClientLogon::eresult_sentryfile() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.eresult_sentryfile)
  return eresult_sentryfile_;
}
void CMsgClientLogon::set_eresult_sentryfile(::google::protobuf::int32 value) {
  set_has_eresult_sentryfile();
  eresult_sentryfile_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.eresult_sentryfile)
}

// optional bytes sha_sentryfile = 83;
bool CMsgClientLogon::has_sha_sentryfile() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgClientLogon::set_has_sha_sentryfile() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgClientLogon::clear_has_sha_sentryfile() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgClientLogon::clear_sha_sentryfile() {
  sha_sentryfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha_sentryfile();
}
const ::std::string& CMsgClientLogon::sha_sentryfile() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.sha_sentryfile)
  return sha_sentryfile_.GetNoArena();
}
void CMsgClientLogon::set_sha_sentryfile(const ::std::string& value) {
  set_has_sha_sentryfile();
  sha_sentryfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.sha_sentryfile)
}
#if LANG_CXX11
void CMsgClientLogon::set_sha_sentryfile(::std::string&& value) {
  set_has_sha_sentryfile();
  sha_sentryfile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogon.sha_sentryfile)
}
#endif
void CMsgClientLogon::set_sha_sentryfile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha_sentryfile();
  sha_sentryfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogon.sha_sentryfile)
}
void CMsgClientLogon::set_sha_sentryfile(const void* value, size_t size) {
  set_has_sha_sentryfile();
  sha_sentryfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogon.sha_sentryfile)
}
::std::string* CMsgClientLogon::mutable_sha_sentryfile() {
  set_has_sha_sentryfile();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogon.sha_sentryfile)
  return sha_sentryfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogon::release_sha_sentryfile() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogon.sha_sentryfile)
  clear_has_sha_sentryfile();
  return sha_sentryfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogon::set_allocated_sha_sentryfile(::std::string* sha_sentryfile) {
  if (sha_sentryfile != NULL) {
    set_has_sha_sentryfile();
  } else {
    clear_has_sha_sentryfile();
  }
  sha_sentryfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha_sentryfile);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogon.sha_sentryfile)
}

// optional string auth_code = 84;
bool CMsgClientLogon::has_auth_code() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgClientLogon::set_has_auth_code() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgClientLogon::clear_has_auth_code() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgClientLogon::clear_auth_code() {
  auth_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_code();
}
const ::std::string& CMsgClientLogon::auth_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.auth_code)
  return auth_code_.GetNoArena();
}
void CMsgClientLogon::set_auth_code(const ::std::string& value) {
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.auth_code)
}
#if LANG_CXX11
void CMsgClientLogon::set_auth_code(::std::string&& value) {
  set_has_auth_code();
  auth_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogon.auth_code)
}
#endif
void CMsgClientLogon::set_auth_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogon.auth_code)
}
void CMsgClientLogon::set_auth_code(const char* value, size_t size) {
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogon.auth_code)
}
::std::string* CMsgClientLogon::mutable_auth_code() {
  set_has_auth_code();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogon.auth_code)
  return auth_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogon::release_auth_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogon.auth_code)
  clear_has_auth_code();
  return auth_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogon::set_allocated_auth_code(::std::string* auth_code) {
  if (auth_code != NULL) {
    set_has_auth_code();
  } else {
    clear_has_auth_code();
  }
  auth_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogon.auth_code)
}

// optional int32 otp_type = 85;
bool CMsgClientLogon::has_otp_type() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void CMsgClientLogon::set_has_otp_type() {
  _has_bits_[1] |= 0x00000100u;
}
void CMsgClientLogon::clear_has_otp_type() {
  _has_bits_[1] &= ~0x00000100u;
}
void CMsgClientLogon::clear_otp_type() {
  otp_type_ = 0;
  clear_has_otp_type();
}
::google::protobuf::int32 CMsgClientLogon::otp_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.otp_type)
  return otp_type_;
}
void CMsgClientLogon::set_otp_type(::google::protobuf::int32 value) {
  set_has_otp_type();
  otp_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.otp_type)
}

// optional uint32 otp_value = 86;
bool CMsgClientLogon::has_otp_value() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void CMsgClientLogon::set_has_otp_value() {
  _has_bits_[1] |= 0x00000200u;
}
void CMsgClientLogon::clear_has_otp_value() {
  _has_bits_[1] &= ~0x00000200u;
}
void CMsgClientLogon::clear_otp_value() {
  otp_value_ = 0u;
  clear_has_otp_value();
}
::google::protobuf::uint32 CMsgClientLogon::otp_value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.otp_value)
  return otp_value_;
}
void CMsgClientLogon::set_otp_value(::google::protobuf::uint32 value) {
  set_has_otp_value();
  otp_value_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.otp_value)
}

// optional string otp_identifier = 87;
bool CMsgClientLogon::has_otp_identifier() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgClientLogon::set_has_otp_identifier() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgClientLogon::clear_has_otp_identifier() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgClientLogon::clear_otp_identifier() {
  otp_identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_otp_identifier();
}
const ::std::string& CMsgClientLogon::otp_identifier() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.otp_identifier)
  return otp_identifier_.GetNoArena();
}
void CMsgClientLogon::set_otp_identifier(const ::std::string& value) {
  set_has_otp_identifier();
  otp_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.otp_identifier)
}
#if LANG_CXX11
void CMsgClientLogon::set_otp_identifier(::std::string&& value) {
  set_has_otp_identifier();
  otp_identifier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogon.otp_identifier)
}
#endif
void CMsgClientLogon::set_otp_identifier(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_otp_identifier();
  otp_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogon.otp_identifier)
}
void CMsgClientLogon::set_otp_identifier(const char* value, size_t size) {
  set_has_otp_identifier();
  otp_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogon.otp_identifier)
}
::std::string* CMsgClientLogon::mutable_otp_identifier() {
  set_has_otp_identifier();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogon.otp_identifier)
  return otp_identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogon::release_otp_identifier() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogon.otp_identifier)
  clear_has_otp_identifier();
  return otp_identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogon::set_allocated_otp_identifier(::std::string* otp_identifier) {
  if (otp_identifier != NULL) {
    set_has_otp_identifier();
  } else {
    clear_has_otp_identifier();
  }
  otp_identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), otp_identifier);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogon.otp_identifier)
}

// optional bool steam2_ticket_request = 88;
bool CMsgClientLogon::has_steam2_ticket_request() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void CMsgClientLogon::set_has_steam2_ticket_request() {
  _has_bits_[1] |= 0x00000010u;
}
void CMsgClientLogon::clear_has_steam2_ticket_request() {
  _has_bits_[1] &= ~0x00000010u;
}
void CMsgClientLogon::clear_steam2_ticket_request() {
  steam2_ticket_request_ = false;
  clear_has_steam2_ticket_request();
}
bool CMsgClientLogon::steam2_ticket_request() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.steam2_ticket_request)
  return steam2_ticket_request_;
}
void CMsgClientLogon::set_steam2_ticket_request(bool value) {
  set_has_steam2_ticket_request();
  steam2_ticket_request_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.steam2_ticket_request)
}

// optional bytes sony_psn_ticket = 90;
bool CMsgClientLogon::has_sony_psn_ticket() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgClientLogon::set_has_sony_psn_ticket() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgClientLogon::clear_has_sony_psn_ticket() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgClientLogon::clear_sony_psn_ticket() {
  sony_psn_ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sony_psn_ticket();
}
const ::std::string& CMsgClientLogon::sony_psn_ticket() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.sony_psn_ticket)
  return sony_psn_ticket_.GetNoArena();
}
void CMsgClientLogon::set_sony_psn_ticket(const ::std::string& value) {
  set_has_sony_psn_ticket();
  sony_psn_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.sony_psn_ticket)
}
#if LANG_CXX11
void CMsgClientLogon::set_sony_psn_ticket(::std::string&& value) {
  set_has_sony_psn_ticket();
  sony_psn_ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogon.sony_psn_ticket)
}
#endif
void CMsgClientLogon::set_sony_psn_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sony_psn_ticket();
  sony_psn_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogon.sony_psn_ticket)
}
void CMsgClientLogon::set_sony_psn_ticket(const void* value, size_t size) {
  set_has_sony_psn_ticket();
  sony_psn_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogon.sony_psn_ticket)
}
::std::string* CMsgClientLogon::mutable_sony_psn_ticket() {
  set_has_sony_psn_ticket();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogon.sony_psn_ticket)
  return sony_psn_ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogon::release_sony_psn_ticket() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogon.sony_psn_ticket)
  clear_has_sony_psn_ticket();
  return sony_psn_ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogon::set_allocated_sony_psn_ticket(::std::string* sony_psn_ticket) {
  if (sony_psn_ticket != NULL) {
    set_has_sony_psn_ticket();
  } else {
    clear_has_sony_psn_ticket();
  }
  sony_psn_ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sony_psn_ticket);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogon.sony_psn_ticket)
}

// optional string sony_psn_service_id = 91;
bool CMsgClientLogon::has_sony_psn_service_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgClientLogon::set_has_sony_psn_service_id() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgClientLogon::clear_has_sony_psn_service_id() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgClientLogon::clear_sony_psn_service_id() {
  sony_psn_service_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sony_psn_service_id();
}
const ::std::string& CMsgClientLogon::sony_psn_service_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.sony_psn_service_id)
  return sony_psn_service_id_.GetNoArena();
}
void CMsgClientLogon::set_sony_psn_service_id(const ::std::string& value) {
  set_has_sony_psn_service_id();
  sony_psn_service_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.sony_psn_service_id)
}
#if LANG_CXX11
void CMsgClientLogon::set_sony_psn_service_id(::std::string&& value) {
  set_has_sony_psn_service_id();
  sony_psn_service_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogon.sony_psn_service_id)
}
#endif
void CMsgClientLogon::set_sony_psn_service_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sony_psn_service_id();
  sony_psn_service_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogon.sony_psn_service_id)
}
void CMsgClientLogon::set_sony_psn_service_id(const char* value, size_t size) {
  set_has_sony_psn_service_id();
  sony_psn_service_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogon.sony_psn_service_id)
}
::std::string* CMsgClientLogon::mutable_sony_psn_service_id() {
  set_has_sony_psn_service_id();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogon.sony_psn_service_id)
  return sony_psn_service_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogon::release_sony_psn_service_id() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogon.sony_psn_service_id)
  clear_has_sony_psn_service_id();
  return sony_psn_service_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogon::set_allocated_sony_psn_service_id(::std::string* sony_psn_service_id) {
  if (sony_psn_service_id != NULL) {
    set_has_sony_psn_service_id();
  } else {
    clear_has_sony_psn_service_id();
  }
  sony_psn_service_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sony_psn_service_id);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogon.sony_psn_service_id)
}

// optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
bool CMsgClientLogon::has_create_new_psn_linked_account_if_needed() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void CMsgClientLogon::set_has_create_new_psn_linked_account_if_needed() {
  _has_bits_[1] |= 0x00000020u;
}
void CMsgClientLogon::clear_has_create_new_psn_linked_account_if_needed() {
  _has_bits_[1] &= ~0x00000020u;
}
void CMsgClientLogon::clear_create_new_psn_linked_account_if_needed() {
  create_new_psn_linked_account_if_needed_ = false;
  clear_has_create_new_psn_linked_account_if_needed();
}
bool CMsgClientLogon::create_new_psn_linked_account_if_needed() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.create_new_psn_linked_account_if_needed)
  return create_new_psn_linked_account_if_needed_;
}
void CMsgClientLogon::set_create_new_psn_linked_account_if_needed(bool value) {
  set_has_create_new_psn_linked_account_if_needed();
  create_new_psn_linked_account_if_needed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.create_new_psn_linked_account_if_needed)
}

// optional string sony_psn_name = 93;
bool CMsgClientLogon::has_sony_psn_name() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgClientLogon::set_has_sony_psn_name() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgClientLogon::clear_has_sony_psn_name() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgClientLogon::clear_sony_psn_name() {
  sony_psn_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sony_psn_name();
}
const ::std::string& CMsgClientLogon::sony_psn_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.sony_psn_name)
  return sony_psn_name_.GetNoArena();
}
void CMsgClientLogon::set_sony_psn_name(const ::std::string& value) {
  set_has_sony_psn_name();
  sony_psn_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.sony_psn_name)
}
#if LANG_CXX11
void CMsgClientLogon::set_sony_psn_name(::std::string&& value) {
  set_has_sony_psn_name();
  sony_psn_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogon.sony_psn_name)
}
#endif
void CMsgClientLogon::set_sony_psn_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sony_psn_name();
  sony_psn_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogon.sony_psn_name)
}
void CMsgClientLogon::set_sony_psn_name(const char* value, size_t size) {
  set_has_sony_psn_name();
  sony_psn_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogon.sony_psn_name)
}
::std::string* CMsgClientLogon::mutable_sony_psn_name() {
  set_has_sony_psn_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogon.sony_psn_name)
  return sony_psn_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogon::release_sony_psn_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogon.sony_psn_name)
  clear_has_sony_psn_name();
  return sony_psn_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogon::set_allocated_sony_psn_name(::std::string* sony_psn_name) {
  if (sony_psn_name != NULL) {
    set_has_sony_psn_name();
  } else {
    clear_has_sony_psn_name();
  }
  sony_psn_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sony_psn_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogon.sony_psn_name)
}

// optional int32 game_server_app_id = 94;
bool CMsgClientLogon::has_game_server_app_id() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void CMsgClientLogon::set_has_game_server_app_id() {
  _has_bits_[1] |= 0x00000400u;
}
void CMsgClientLogon::clear_has_game_server_app_id() {
  _has_bits_[1] &= ~0x00000400u;
}
void CMsgClientLogon::clear_game_server_app_id() {
  game_server_app_id_ = 0;
  clear_has_game_server_app_id();
}
::google::protobuf::int32 CMsgClientLogon::game_server_app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.game_server_app_id)
  return game_server_app_id_;
}
void CMsgClientLogon::set_game_server_app_id(::google::protobuf::int32 value) {
  set_has_game_server_app_id();
  game_server_app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.game_server_app_id)
}

// optional bool steamguard_dont_remember_computer = 95;
bool CMsgClientLogon::has_steamguard_dont_remember_computer() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void CMsgClientLogon::set_has_steamguard_dont_remember_computer() {
  _has_bits_[1] |= 0x00000800u;
}
void CMsgClientLogon::clear_has_steamguard_dont_remember_computer() {
  _has_bits_[1] &= ~0x00000800u;
}
void CMsgClientLogon::clear_steamguard_dont_remember_computer() {
  steamguard_dont_remember_computer_ = false;
  clear_has_steamguard_dont_remember_computer();
}
bool CMsgClientLogon::steamguard_dont_remember_computer() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.steamguard_dont_remember_computer)
  return steamguard_dont_remember_computer_;
}
void CMsgClientLogon::set_steamguard_dont_remember_computer(bool value) {
  set_has_steamguard_dont_remember_computer();
  steamguard_dont_remember_computer_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.steamguard_dont_remember_computer)
}

// optional string machine_name = 96;
bool CMsgClientLogon::has_machine_name() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgClientLogon::set_has_machine_name() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgClientLogon::clear_has_machine_name() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgClientLogon::clear_machine_name() {
  machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_name();
}
const ::std::string& CMsgClientLogon::machine_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.machine_name)
  return machine_name_.GetNoArena();
}
void CMsgClientLogon::set_machine_name(const ::std::string& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.machine_name)
}
#if LANG_CXX11
void CMsgClientLogon::set_machine_name(::std::string&& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogon.machine_name)
}
#endif
void CMsgClientLogon::set_machine_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogon.machine_name)
}
void CMsgClientLogon::set_machine_name(const char* value, size_t size) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogon.machine_name)
}
::std::string* CMsgClientLogon::mutable_machine_name() {
  set_has_machine_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogon.machine_name)
  return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogon::release_machine_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogon.machine_name)
  clear_has_machine_name();
  return machine_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogon::set_allocated_machine_name(::std::string* machine_name) {
  if (machine_name != NULL) {
    set_has_machine_name();
  } else {
    clear_has_machine_name();
  }
  machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogon.machine_name)
}

// optional string machine_name_userchosen = 97;
bool CMsgClientLogon::has_machine_name_userchosen() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgClientLogon::set_has_machine_name_userchosen() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgClientLogon::clear_has_machine_name_userchosen() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgClientLogon::clear_machine_name_userchosen() {
  machine_name_userchosen_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_name_userchosen();
}
const ::std::string& CMsgClientLogon::machine_name_userchosen() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.machine_name_userchosen)
  return machine_name_userchosen_.GetNoArena();
}
void CMsgClientLogon::set_machine_name_userchosen(const ::std::string& value) {
  set_has_machine_name_userchosen();
  machine_name_userchosen_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.machine_name_userchosen)
}
#if LANG_CXX11
void CMsgClientLogon::set_machine_name_userchosen(::std::string&& value) {
  set_has_machine_name_userchosen();
  machine_name_userchosen_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogon.machine_name_userchosen)
}
#endif
void CMsgClientLogon::set_machine_name_userchosen(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine_name_userchosen();
  machine_name_userchosen_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogon.machine_name_userchosen)
}
void CMsgClientLogon::set_machine_name_userchosen(const char* value, size_t size) {
  set_has_machine_name_userchosen();
  machine_name_userchosen_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogon.machine_name_userchosen)
}
::std::string* CMsgClientLogon::mutable_machine_name_userchosen() {
  set_has_machine_name_userchosen();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogon.machine_name_userchosen)
  return machine_name_userchosen_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogon::release_machine_name_userchosen() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogon.machine_name_userchosen)
  clear_has_machine_name_userchosen();
  return machine_name_userchosen_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogon::set_allocated_machine_name_userchosen(::std::string* machine_name_userchosen) {
  if (machine_name_userchosen != NULL) {
    set_has_machine_name_userchosen();
  } else {
    clear_has_machine_name_userchosen();
  }
  machine_name_userchosen_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name_userchosen);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogon.machine_name_userchosen)
}

// optional string country_override = 98;
bool CMsgClientLogon::has_country_override() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgClientLogon::set_has_country_override() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgClientLogon::clear_has_country_override() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgClientLogon::clear_country_override() {
  country_override_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_override();
}
const ::std::string& CMsgClientLogon::country_override() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.country_override)
  return country_override_.GetNoArena();
}
void CMsgClientLogon::set_country_override(const ::std::string& value) {
  set_has_country_override();
  country_override_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.country_override)
}
#if LANG_CXX11
void CMsgClientLogon::set_country_override(::std::string&& value) {
  set_has_country_override();
  country_override_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogon.country_override)
}
#endif
void CMsgClientLogon::set_country_override(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_override();
  country_override_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogon.country_override)
}
void CMsgClientLogon::set_country_override(const char* value, size_t size) {
  set_has_country_override();
  country_override_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogon.country_override)
}
::std::string* CMsgClientLogon::mutable_country_override() {
  set_has_country_override();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogon.country_override)
  return country_override_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogon::release_country_override() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogon.country_override)
  clear_has_country_override();
  return country_override_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogon::set_allocated_country_override(::std::string* country_override) {
  if (country_override != NULL) {
    set_has_country_override();
  } else {
    clear_has_country_override();
  }
  country_override_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_override);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogon.country_override)
}

// optional bool is_steam_box = 99;
bool CMsgClientLogon::has_is_steam_box() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void CMsgClientLogon::set_has_is_steam_box() {
  _has_bits_[1] |= 0x00001000u;
}
void CMsgClientLogon::clear_has_is_steam_box() {
  _has_bits_[1] &= ~0x00001000u;
}
void CMsgClientLogon::clear_is_steam_box() {
  is_steam_box_ = false;
  clear_has_is_steam_box();
}
bool CMsgClientLogon::is_steam_box() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.is_steam_box)
  return is_steam_box_;
}
void CMsgClientLogon::set_is_steam_box(bool value) {
  set_has_is_steam_box();
  is_steam_box_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.is_steam_box)
}

// optional uint64 client_instance_id = 100;
bool CMsgClientLogon::has_client_instance_id() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void CMsgClientLogon::set_has_client_instance_id() {
  _has_bits_[1] |= 0x00004000u;
}
void CMsgClientLogon::clear_has_client_instance_id() {
  _has_bits_[1] &= ~0x00004000u;
}
void CMsgClientLogon::clear_client_instance_id() {
  client_instance_id_ = GOOGLE_ULONGLONG(0);
  clear_has_client_instance_id();
}
::google::protobuf::uint64 CMsgClientLogon::client_instance_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.client_instance_id)
  return client_instance_id_;
}
void CMsgClientLogon::set_client_instance_id(::google::protobuf::uint64 value) {
  set_has_client_instance_id();
  client_instance_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.client_instance_id)
}

// optional string two_factor_code = 101;
bool CMsgClientLogon::has_two_factor_code() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgClientLogon::set_has_two_factor_code() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgClientLogon::clear_has_two_factor_code() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgClientLogon::clear_two_factor_code() {
  two_factor_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_two_factor_code();
}
const ::std::string& CMsgClientLogon::two_factor_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.two_factor_code)
  return two_factor_code_.GetNoArena();
}
void CMsgClientLogon::set_two_factor_code(const ::std::string& value) {
  set_has_two_factor_code();
  two_factor_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.two_factor_code)
}
#if LANG_CXX11
void CMsgClientLogon::set_two_factor_code(::std::string&& value) {
  set_has_two_factor_code();
  two_factor_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogon.two_factor_code)
}
#endif
void CMsgClientLogon::set_two_factor_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_two_factor_code();
  two_factor_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogon.two_factor_code)
}
void CMsgClientLogon::set_two_factor_code(const char* value, size_t size) {
  set_has_two_factor_code();
  two_factor_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogon.two_factor_code)
}
::std::string* CMsgClientLogon::mutable_two_factor_code() {
  set_has_two_factor_code();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogon.two_factor_code)
  return two_factor_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogon::release_two_factor_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogon.two_factor_code)
  clear_has_two_factor_code();
  return two_factor_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogon::set_allocated_two_factor_code(::std::string* two_factor_code) {
  if (two_factor_code != NULL) {
    set_has_two_factor_code();
  } else {
    clear_has_two_factor_code();
  }
  two_factor_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), two_factor_code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogon.two_factor_code)
}

// optional bool supports_rate_limit_response = 102;
bool CMsgClientLogon::has_supports_rate_limit_response() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void CMsgClientLogon::set_has_supports_rate_limit_response() {
  _has_bits_[1] |= 0x00002000u;
}
void CMsgClientLogon::clear_has_supports_rate_limit_response() {
  _has_bits_[1] &= ~0x00002000u;
}
void CMsgClientLogon::clear_supports_rate_limit_response() {
  supports_rate_limit_response_ = false;
  clear_has_supports_rate_limit_response();
}
bool CMsgClientLogon::supports_rate_limit_response() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.supports_rate_limit_response)
  return supports_rate_limit_response_;
}
void CMsgClientLogon::set_supports_rate_limit_response(bool value) {
  set_has_supports_rate_limit_response();
  supports_rate_limit_response_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.supports_rate_limit_response)
}

// optional string web_logon_nonce = 103;
bool CMsgClientLogon::has_web_logon_nonce() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CMsgClientLogon::set_has_web_logon_nonce() {
  _has_bits_[0] |= 0x00100000u;
}
void CMsgClientLogon::clear_has_web_logon_nonce() {
  _has_bits_[0] &= ~0x00100000u;
}
void CMsgClientLogon::clear_web_logon_nonce() {
  web_logon_nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_web_logon_nonce();
}
const ::std::string& CMsgClientLogon::web_logon_nonce() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogon.web_logon_nonce)
  return web_logon_nonce_.GetNoArena();
}
void CMsgClientLogon::set_web_logon_nonce(const ::std::string& value) {
  set_has_web_logon_nonce();
  web_logon_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogon.web_logon_nonce)
}
#if LANG_CXX11
void CMsgClientLogon::set_web_logon_nonce(::std::string&& value) {
  set_has_web_logon_nonce();
  web_logon_nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogon.web_logon_nonce)
}
#endif
void CMsgClientLogon::set_web_logon_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_web_logon_nonce();
  web_logon_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogon.web_logon_nonce)
}
void CMsgClientLogon::set_web_logon_nonce(const char* value, size_t size) {
  set_has_web_logon_nonce();
  web_logon_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogon.web_logon_nonce)
}
::std::string* CMsgClientLogon::mutable_web_logon_nonce() {
  set_has_web_logon_nonce();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogon.web_logon_nonce)
  return web_logon_nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogon::release_web_logon_nonce() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogon.web_logon_nonce)
  clear_has_web_logon_nonce();
  return web_logon_nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogon::set_allocated_web_logon_nonce(::std::string* web_logon_nonce) {
  if (web_logon_nonce != NULL) {
    set_has_web_logon_nonce();
  } else {
    clear_has_web_logon_nonce();
  }
  web_logon_nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), web_logon_nonce);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogon.web_logon_nonce)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLogonResponse::kEresultFieldNumber;
const int CMsgClientLogonResponse::kOutOfGameHeartbeatSecondsFieldNumber;
const int CMsgClientLogonResponse::kInGameHeartbeatSecondsFieldNumber;
const int CMsgClientLogonResponse::kPublicIpFieldNumber;
const int CMsgClientLogonResponse::kRtime32ServerTimeFieldNumber;
const int CMsgClientLogonResponse::kAccountFlagsFieldNumber;
const int CMsgClientLogonResponse::kCellIdFieldNumber;
const int CMsgClientLogonResponse::kEmailDomainFieldNumber;
const int CMsgClientLogonResponse::kSteam2TicketFieldNumber;
const int CMsgClientLogonResponse::kEresultExtendedFieldNumber;
const int CMsgClientLogonResponse::kWebapiAuthenticateUserNonceFieldNumber;
const int CMsgClientLogonResponse::kCellIdPingThresholdFieldNumber;
const int CMsgClientLogonResponse::kUsePicsFieldNumber;
const int CMsgClientLogonResponse::kVanityUrlFieldNumber;
const int CMsgClientLogonResponse::kClientSuppliedSteamidFieldNumber;
const int CMsgClientLogonResponse::kIpCountryCodeFieldNumber;
const int CMsgClientLogonResponse::kParentalSettingsFieldNumber;
const int CMsgClientLogonResponse::kParentalSettingSignatureFieldNumber;
const int CMsgClientLogonResponse::kCountLoginfailuresToMigrateFieldNumber;
const int CMsgClientLogonResponse::kCountDisconnectsToMigrateFieldNumber;
const int CMsgClientLogonResponse::kOgsDataReportTimeWindowFieldNumber;
const int CMsgClientLogonResponse::kClientInstanceIdFieldNumber;
const int CMsgClientLogonResponse::kForceClientUpdateCheckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLogonResponse::CMsgClientLogonResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5flogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLogonResponse)
}
CMsgClientLogonResponse::CMsgClientLogonResponse(const CMsgClientLogonResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_email_domain()) {
    email_domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_domain_);
  }
  steam2_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_steam2_ticket()) {
    steam2_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steam2_ticket_);
  }
  webapi_authenticate_user_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_webapi_authenticate_user_nonce()) {
    webapi_authenticate_user_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webapi_authenticate_user_nonce_);
  }
  vanity_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vanity_url()) {
    vanity_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vanity_url_);
  }
  ip_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip_country_code()) {
    ip_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_country_code_);
  }
  parental_settings_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parental_settings()) {
    parental_settings_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parental_settings_);
  }
  parental_setting_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parental_setting_signature()) {
    parental_setting_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parental_setting_signature_);
  }
  ::memcpy(&out_of_game_heartbeat_seconds_, &from.out_of_game_heartbeat_seconds_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&out_of_game_heartbeat_seconds_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLogonResponse)
}

void CMsgClientLogonResponse::SharedCtor() {
  _cached_size_ = 0;
  email_domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam2_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  webapi_authenticate_user_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vanity_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parental_settings_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parental_setting_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&out_of_game_heartbeat_seconds_, 0, reinterpret_cast<char*>(&client_instance_id_) -
    reinterpret_cast<char*>(&out_of_game_heartbeat_seconds_) + sizeof(client_instance_id_));
  eresult_ = 2;
}

CMsgClientLogonResponse::~CMsgClientLogonResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLogonResponse)
  SharedDtor();
}

void CMsgClientLogonResponse::SharedDtor() {
  email_domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam2_ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  webapi_authenticate_user_nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vanity_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parental_settings_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parental_setting_signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLogonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLogonResponse::descriptor() {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5flogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientLogonResponse& CMsgClientLogonResponse::default_instance() {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientLogonResponse* CMsgClientLogonResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientLogonResponse* n = new CMsgClientLogonResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientLogonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLogonResponse)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_email_domain()) {
      GOOGLE_DCHECK(!email_domain_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*email_domain_.UnsafeRawStringPointer())->clear();
    }
    if (has_steam2_ticket()) {
      GOOGLE_DCHECK(!steam2_ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*steam2_ticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_webapi_authenticate_user_nonce()) {
      GOOGLE_DCHECK(!webapi_authenticate_user_nonce_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*webapi_authenticate_user_nonce_.UnsafeRawStringPointer())->clear();
    }
    if (has_vanity_url()) {
      GOOGLE_DCHECK(!vanity_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vanity_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_ip_country_code()) {
      GOOGLE_DCHECK(!ip_country_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_country_code_.UnsafeRawStringPointer())->clear();
    }
    if (has_parental_settings()) {
      GOOGLE_DCHECK(!parental_settings_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*parental_settings_.UnsafeRawStringPointer())->clear();
    }
    if (has_parental_setting_signature()) {
      GOOGLE_DCHECK(!parental_setting_signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*parental_setting_signature_.UnsafeRawStringPointer())->clear();
    }
  }
  out_of_game_heartbeat_seconds_ = 0;
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&in_game_heartbeat_seconds_, 0, reinterpret_cast<char*>(&client_supplied_steamid_) -
      reinterpret_cast<char*>(&in_game_heartbeat_seconds_) + sizeof(client_supplied_steamid_));
  }
  if (_has_bits_[16 / 32] & 8323072u) {
    ::memset(&use_pics_, 0, reinterpret_cast<char*>(&client_instance_id_) -
      reinterpret_cast<char*>(&use_pics_) + sizeof(client_instance_id_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientLogonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLogonResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 out_of_game_heartbeat_seconds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_out_of_game_heartbeat_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_of_game_heartbeat_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 in_game_heartbeat_seconds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_in_game_heartbeat_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &in_game_heartbeat_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 public_ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_public_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 rtime32_server_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_rtime32_server_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_server_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_flags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_account_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cell_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_cell_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string email_domain = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email_domain().data(), this->email_domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogonResponse.email_domain");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes steam2_ticket = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_steam2_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult_extended = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_eresult_extended();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_extended_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string webapi_authenticate_user_nonce = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webapi_authenticate_user_nonce()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->webapi_authenticate_user_nonce().data(), this->webapi_authenticate_user_nonce().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogonResponse.webapi_authenticate_user_nonce");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cell_id_ping_threshold = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_cell_id_ping_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_ping_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_pics = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_use_pics();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_pics_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vanity_url = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vanity_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vanity_url().data(), this->vanity_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogonResponse.vanity_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 client_supplied_steamid = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u)) {
          set_has_client_supplied_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_supplied_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip_country_code = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_country_code().data(), this->ip_country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLogonResponse.ip_country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes parental_settings = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_parental_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes parental_setting_signature = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_parental_setting_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count_loginfailures_to_migrate = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_count_loginfailures_to_migrate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_loginfailures_to_migrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count_disconnects_to_migrate = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_count_disconnects_to_migrate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_disconnects_to_migrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ogs_data_report_time_window = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_ogs_data_report_time_window();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ogs_data_report_time_window_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 client_instance_id = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_client_instance_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_client_update_check = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_force_client_update_check();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_client_update_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLogonResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLogonResponse)
  return false;
#undef DO_
}

void CMsgClientLogonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLogonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 out_of_game_heartbeat_seconds = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->out_of_game_heartbeat_seconds(), output);
  }

  // optional int32 in_game_heartbeat_seconds = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->in_game_heartbeat_seconds(), output);
  }

  // optional uint32 public_ip = 4;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->public_ip(), output);
  }

  // optional fixed32 rtime32_server_time = 5;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->rtime32_server_time(), output);
  }

  // optional uint32 account_flags = 6;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->account_flags(), output);
  }

  // optional uint32 cell_id = 7;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cell_id(), output);
  }

  // optional string email_domain = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email_domain().data(), this->email_domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogonResponse.email_domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->email_domain(), output);
  }

  // optional bytes steam2_ticket = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->steam2_ticket(), output);
  }

  // optional int32 eresult_extended = 10;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->eresult_extended(), output);
  }

  // optional string webapi_authenticate_user_nonce = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webapi_authenticate_user_nonce().data(), this->webapi_authenticate_user_nonce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogonResponse.webapi_authenticate_user_nonce");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->webapi_authenticate_user_nonce(), output);
  }

  // optional uint32 cell_id_ping_threshold = 12;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->cell_id_ping_threshold(), output);
  }

  // optional bool use_pics = 13;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->use_pics(), output);
  }

  // optional string vanity_url = 14;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vanity_url().data(), this->vanity_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogonResponse.vanity_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->vanity_url(), output);
  }

  // optional fixed64 client_supplied_steamid = 20;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(20, this->client_supplied_steamid(), output);
  }

  // optional string ip_country_code = 21;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_country_code().data(), this->ip_country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogonResponse.ip_country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->ip_country_code(), output);
  }

  // optional bytes parental_settings = 22;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->parental_settings(), output);
  }

  // optional bytes parental_setting_signature = 23;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      23, this->parental_setting_signature(), output);
  }

  // optional int32 count_loginfailures_to_migrate = 24;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->count_loginfailures_to_migrate(), output);
  }

  // optional int32 count_disconnects_to_migrate = 25;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->count_disconnects_to_migrate(), output);
  }

  // optional int32 ogs_data_report_time_window = 26;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->ogs_data_report_time_window(), output);
  }

  // optional uint64 client_instance_id = 27;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(27, this->client_instance_id(), output);
  }

  // optional bool force_client_update_check = 28;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->force_client_update_check(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLogonResponse)
}

::google::protobuf::uint8* CMsgClientLogonResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLogonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 out_of_game_heartbeat_seconds = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->out_of_game_heartbeat_seconds(), target);
  }

  // optional int32 in_game_heartbeat_seconds = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->in_game_heartbeat_seconds(), target);
  }

  // optional uint32 public_ip = 4;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->public_ip(), target);
  }

  // optional fixed32 rtime32_server_time = 5;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->rtime32_server_time(), target);
  }

  // optional uint32 account_flags = 6;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->account_flags(), target);
  }

  // optional uint32 cell_id = 7;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cell_id(), target);
  }

  // optional string email_domain = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email_domain().data(), this->email_domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogonResponse.email_domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->email_domain(), target);
  }

  // optional bytes steam2_ticket = 9;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->steam2_ticket(), target);
  }

  // optional int32 eresult_extended = 10;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->eresult_extended(), target);
  }

  // optional string webapi_authenticate_user_nonce = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webapi_authenticate_user_nonce().data(), this->webapi_authenticate_user_nonce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogonResponse.webapi_authenticate_user_nonce");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->webapi_authenticate_user_nonce(), target);
  }

  // optional uint32 cell_id_ping_threshold = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->cell_id_ping_threshold(), target);
  }

  // optional bool use_pics = 13;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->use_pics(), target);
  }

  // optional string vanity_url = 14;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vanity_url().data(), this->vanity_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogonResponse.vanity_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->vanity_url(), target);
  }

  // optional fixed64 client_supplied_steamid = 20;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(20, this->client_supplied_steamid(), target);
  }

  // optional string ip_country_code = 21;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_country_code().data(), this->ip_country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLogonResponse.ip_country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->ip_country_code(), target);
  }

  // optional bytes parental_settings = 22;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->parental_settings(), target);
  }

  // optional bytes parental_setting_signature = 23;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->parental_setting_signature(), target);
  }

  // optional int32 count_loginfailures_to_migrate = 24;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->count_loginfailures_to_migrate(), target);
  }

  // optional int32 count_disconnects_to_migrate = 25;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->count_disconnects_to_migrate(), target);
  }

  // optional int32 ogs_data_report_time_window = 26;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->ogs_data_report_time_window(), target);
  }

  // optional uint64 client_instance_id = 27;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(27, this->client_instance_id(), target);
  }

  // optional bool force_client_update_check = 28;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->force_client_update_check(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLogonResponse)
  return target;
}

size_t CMsgClientLogonResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLogonResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string email_domain = 8;
    if (has_email_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email_domain());
    }

    // optional bytes steam2_ticket = 9;
    if (has_steam2_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->steam2_ticket());
    }

    // optional string webapi_authenticate_user_nonce = 11;
    if (has_webapi_authenticate_user_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webapi_authenticate_user_nonce());
    }

    // optional string vanity_url = 14;
    if (has_vanity_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vanity_url());
    }

    // optional string ip_country_code = 21;
    if (has_ip_country_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_country_code());
    }

    // optional bytes parental_settings = 22;
    if (has_parental_settings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->parental_settings());
    }

    // optional bytes parental_setting_signature = 23;
    if (has_parental_setting_signature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->parental_setting_signature());
    }

    // optional int32 out_of_game_heartbeat_seconds = 2;
    if (has_out_of_game_heartbeat_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_of_game_heartbeat_seconds());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 in_game_heartbeat_seconds = 3;
    if (has_in_game_heartbeat_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->in_game_heartbeat_seconds());
    }

    // optional uint32 public_ip = 4;
    if (has_public_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_ip());
    }

    // optional fixed32 rtime32_server_time = 5;
    if (has_rtime32_server_time()) {
      total_size += 1 + 4;
    }

    // optional uint32 account_flags = 6;
    if (has_account_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_flags());
    }

    // optional uint32 cell_id = 7;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // optional int32 eresult_extended = 10;
    if (has_eresult_extended()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult_extended());
    }

    // optional uint32 cell_id_ping_threshold = 12;
    if (has_cell_id_ping_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id_ping_threshold());
    }

    // optional fixed64 client_supplied_steamid = 20;
    if (has_client_supplied_steamid()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional bool use_pics = 13;
    if (has_use_pics()) {
      total_size += 1 + 1;
    }

    // optional bool force_client_update_check = 28;
    if (has_force_client_update_check()) {
      total_size += 2 + 1;
    }

    // optional int32 count_loginfailures_to_migrate = 24;
    if (has_count_loginfailures_to_migrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_loginfailures_to_migrate());
    }

    // optional int32 count_disconnects_to_migrate = 25;
    if (has_count_disconnects_to_migrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_disconnects_to_migrate());
    }

    // optional int32 ogs_data_report_time_window = 26;
    if (has_ogs_data_report_time_window()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ogs_data_report_time_window());
    }

    // optional uint64 client_instance_id = 27;
    if (has_client_instance_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_instance_id());
    }

    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLogonResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLogonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLogonResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientLogonResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLogonResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLogonResponse)
    MergeFrom(*source);
  }
}

void CMsgClientLogonResponse::MergeFrom(const CMsgClientLogonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLogonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_email_domain();
      email_domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_domain_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_steam2_ticket();
      steam2_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steam2_ticket_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_webapi_authenticate_user_nonce();
      webapi_authenticate_user_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webapi_authenticate_user_nonce_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_vanity_url();
      vanity_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vanity_url_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_ip_country_code();
      ip_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_country_code_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_parental_settings();
      parental_settings_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parental_settings_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_parental_setting_signature();
      parental_setting_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parental_setting_signature_);
    }
    if (cached_has_bits & 0x00000080u) {
      out_of_game_heartbeat_seconds_ = from.out_of_game_heartbeat_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      in_game_heartbeat_seconds_ = from.in_game_heartbeat_seconds_;
    }
    if (cached_has_bits & 0x00000200u) {
      public_ip_ = from.public_ip_;
    }
    if (cached_has_bits & 0x00000400u) {
      rtime32_server_time_ = from.rtime32_server_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      account_flags_ = from.account_flags_;
    }
    if (cached_has_bits & 0x00001000u) {
      cell_id_ = from.cell_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      eresult_extended_ = from.eresult_extended_;
    }
    if (cached_has_bits & 0x00004000u) {
      cell_id_ping_threshold_ = from.cell_id_ping_threshold_;
    }
    if (cached_has_bits & 0x00008000u) {
      client_supplied_steamid_ = from.client_supplied_steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      use_pics_ = from.use_pics_;
    }
    if (cached_has_bits & 0x00020000u) {
      force_client_update_check_ = from.force_client_update_check_;
    }
    if (cached_has_bits & 0x00040000u) {
      count_loginfailures_to_migrate_ = from.count_loginfailures_to_migrate_;
    }
    if (cached_has_bits & 0x00080000u) {
      count_disconnects_to_migrate_ = from.count_disconnects_to_migrate_;
    }
    if (cached_has_bits & 0x00100000u) {
      ogs_data_report_time_window_ = from.ogs_data_report_time_window_;
    }
    if (cached_has_bits & 0x00200000u) {
      client_instance_id_ = from.client_instance_id_;
    }
    if (cached_has_bits & 0x00400000u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLogonResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLogonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLogonResponse::CopyFrom(const CMsgClientLogonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLogonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLogonResponse::IsInitialized() const {
  return true;
}

void CMsgClientLogonResponse::Swap(CMsgClientLogonResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLogonResponse::InternalSwap(CMsgClientLogonResponse* other) {
  email_domain_.Swap(&other->email_domain_);
  steam2_ticket_.Swap(&other->steam2_ticket_);
  webapi_authenticate_user_nonce_.Swap(&other->webapi_authenticate_user_nonce_);
  vanity_url_.Swap(&other->vanity_url_);
  ip_country_code_.Swap(&other->ip_country_code_);
  parental_settings_.Swap(&other->parental_settings_);
  parental_setting_signature_.Swap(&other->parental_setting_signature_);
  std::swap(out_of_game_heartbeat_seconds_, other->out_of_game_heartbeat_seconds_);
  std::swap(in_game_heartbeat_seconds_, other->in_game_heartbeat_seconds_);
  std::swap(public_ip_, other->public_ip_);
  std::swap(rtime32_server_time_, other->rtime32_server_time_);
  std::swap(account_flags_, other->account_flags_);
  std::swap(cell_id_, other->cell_id_);
  std::swap(eresult_extended_, other->eresult_extended_);
  std::swap(cell_id_ping_threshold_, other->cell_id_ping_threshold_);
  std::swap(client_supplied_steamid_, other->client_supplied_steamid_);
  std::swap(use_pics_, other->use_pics_);
  std::swap(force_client_update_check_, other->force_client_update_check_);
  std::swap(count_loginfailures_to_migrate_, other->count_loginfailures_to_migrate_);
  std::swap(count_disconnects_to_migrate_, other->count_disconnects_to_migrate_);
  std::swap(ogs_data_report_time_window_, other->ogs_data_report_time_window_);
  std::swap(client_instance_id_, other->client_instance_id_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientLogonResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5flogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientLogonResponse

// optional int32 eresult = 1 [default = 2];
bool CMsgClientLogonResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CMsgClientLogonResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00400000u;
}
void CMsgClientLogonResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00400000u;
}
void CMsgClientLogonResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientLogonResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogonResponse.eresult)
  return eresult_;
}
void CMsgClientLogonResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogonResponse.eresult)
}

// optional int32 out_of_game_heartbeat_seconds = 2;
bool CMsgClientLogonResponse::has_out_of_game_heartbeat_seconds() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgClientLogonResponse::set_has_out_of_game_heartbeat_seconds() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgClientLogonResponse::clear_has_out_of_game_heartbeat_seconds() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgClientLogonResponse::clear_out_of_game_heartbeat_seconds() {
  out_of_game_heartbeat_seconds_ = 0;
  clear_has_out_of_game_heartbeat_seconds();
}
::google::protobuf::int32 CMsgClientLogonResponse::out_of_game_heartbeat_seconds() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogonResponse.out_of_game_heartbeat_seconds)
  return out_of_game_heartbeat_seconds_;
}
void CMsgClientLogonResponse::set_out_of_game_heartbeat_seconds(::google::protobuf::int32 value) {
  set_has_out_of_game_heartbeat_seconds();
  out_of_game_heartbeat_seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogonResponse.out_of_game_heartbeat_seconds)
}

// optional int32 in_game_heartbeat_seconds = 3;
bool CMsgClientLogonResponse::has_in_game_heartbeat_seconds() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgClientLogonResponse::set_has_in_game_heartbeat_seconds() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgClientLogonResponse::clear_has_in_game_heartbeat_seconds() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgClientLogonResponse::clear_in_game_heartbeat_seconds() {
  in_game_heartbeat_seconds_ = 0;
  clear_has_in_game_heartbeat_seconds();
}
::google::protobuf::int32 CMsgClientLogonResponse::in_game_heartbeat_seconds() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogonResponse.in_game_heartbeat_seconds)
  return in_game_heartbeat_seconds_;
}
void CMsgClientLogonResponse::set_in_game_heartbeat_seconds(::google::protobuf::int32 value) {
  set_has_in_game_heartbeat_seconds();
  in_game_heartbeat_seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogonResponse.in_game_heartbeat_seconds)
}

// optional uint32 public_ip = 4;
bool CMsgClientLogonResponse::has_public_ip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgClientLogonResponse::set_has_public_ip() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgClientLogonResponse::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgClientLogonResponse::clear_public_ip() {
  public_ip_ = 0u;
  clear_has_public_ip();
}
::google::protobuf::uint32 CMsgClientLogonResponse::public_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogonResponse.public_ip)
  return public_ip_;
}
void CMsgClientLogonResponse::set_public_ip(::google::protobuf::uint32 value) {
  set_has_public_ip();
  public_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogonResponse.public_ip)
}

// optional fixed32 rtime32_server_time = 5;
bool CMsgClientLogonResponse::has_rtime32_server_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgClientLogonResponse::set_has_rtime32_server_time() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgClientLogonResponse::clear_has_rtime32_server_time() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgClientLogonResponse::clear_rtime32_server_time() {
  rtime32_server_time_ = 0u;
  clear_has_rtime32_server_time();
}
::google::protobuf::uint32 CMsgClientLogonResponse::rtime32_server_time() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogonResponse.rtime32_server_time)
  return rtime32_server_time_;
}
void CMsgClientLogonResponse::set_rtime32_server_time(::google::protobuf::uint32 value) {
  set_has_rtime32_server_time();
  rtime32_server_time_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogonResponse.rtime32_server_time)
}

// optional uint32 account_flags = 6;
bool CMsgClientLogonResponse::has_account_flags() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgClientLogonResponse::set_has_account_flags() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgClientLogonResponse::clear_has_account_flags() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgClientLogonResponse::clear_account_flags() {
  account_flags_ = 0u;
  clear_has_account_flags();
}
::google::protobuf::uint32 CMsgClientLogonResponse::account_flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogonResponse.account_flags)
  return account_flags_;
}
void CMsgClientLogonResponse::set_account_flags(::google::protobuf::uint32 value) {
  set_has_account_flags();
  account_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogonResponse.account_flags)
}

// optional uint32 cell_id = 7;
bool CMsgClientLogonResponse::has_cell_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgClientLogonResponse::set_has_cell_id() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgClientLogonResponse::clear_has_cell_id() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgClientLogonResponse::clear_cell_id() {
  cell_id_ = 0u;
  clear_has_cell_id();
}
::google::protobuf::uint32 CMsgClientLogonResponse::cell_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogonResponse.cell_id)
  return cell_id_;
}
void CMsgClientLogonResponse::set_cell_id(::google::protobuf::uint32 value) {
  set_has_cell_id();
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogonResponse.cell_id)
}

// optional string email_domain = 8;
bool CMsgClientLogonResponse::has_email_domain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientLogonResponse::set_has_email_domain() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientLogonResponse::clear_has_email_domain() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientLogonResponse::clear_email_domain() {
  email_domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email_domain();
}
const ::std::string& CMsgClientLogonResponse::email_domain() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogonResponse.email_domain)
  return email_domain_.GetNoArena();
}
void CMsgClientLogonResponse::set_email_domain(const ::std::string& value) {
  set_has_email_domain();
  email_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogonResponse.email_domain)
}
#if LANG_CXX11
void CMsgClientLogonResponse::set_email_domain(::std::string&& value) {
  set_has_email_domain();
  email_domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogonResponse.email_domain)
}
#endif
void CMsgClientLogonResponse::set_email_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email_domain();
  email_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogonResponse.email_domain)
}
void CMsgClientLogonResponse::set_email_domain(const char* value, size_t size) {
  set_has_email_domain();
  email_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogonResponse.email_domain)
}
::std::string* CMsgClientLogonResponse::mutable_email_domain() {
  set_has_email_domain();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogonResponse.email_domain)
  return email_domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogonResponse::release_email_domain() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogonResponse.email_domain)
  clear_has_email_domain();
  return email_domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogonResponse::set_allocated_email_domain(::std::string* email_domain) {
  if (email_domain != NULL) {
    set_has_email_domain();
  } else {
    clear_has_email_domain();
  }
  email_domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email_domain);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogonResponse.email_domain)
}

// optional bytes steam2_ticket = 9;
bool CMsgClientLogonResponse::has_steam2_ticket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientLogonResponse::set_has_steam2_ticket() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientLogonResponse::clear_has_steam2_ticket() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientLogonResponse::clear_steam2_ticket() {
  steam2_ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_steam2_ticket();
}
const ::std::string& CMsgClientLogonResponse::steam2_ticket() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogonResponse.steam2_ticket)
  return steam2_ticket_.GetNoArena();
}
void CMsgClientLogonResponse::set_steam2_ticket(const ::std::string& value) {
  set_has_steam2_ticket();
  steam2_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogonResponse.steam2_ticket)
}
#if LANG_CXX11
void CMsgClientLogonResponse::set_steam2_ticket(::std::string&& value) {
  set_has_steam2_ticket();
  steam2_ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogonResponse.steam2_ticket)
}
#endif
void CMsgClientLogonResponse::set_steam2_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_steam2_ticket();
  steam2_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogonResponse.steam2_ticket)
}
void CMsgClientLogonResponse::set_steam2_ticket(const void* value, size_t size) {
  set_has_steam2_ticket();
  steam2_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogonResponse.steam2_ticket)
}
::std::string* CMsgClientLogonResponse::mutable_steam2_ticket() {
  set_has_steam2_ticket();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogonResponse.steam2_ticket)
  return steam2_ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogonResponse::release_steam2_ticket() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogonResponse.steam2_ticket)
  clear_has_steam2_ticket();
  return steam2_ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogonResponse::set_allocated_steam2_ticket(::std::string* steam2_ticket) {
  if (steam2_ticket != NULL) {
    set_has_steam2_ticket();
  } else {
    clear_has_steam2_ticket();
  }
  steam2_ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), steam2_ticket);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogonResponse.steam2_ticket)
}

// optional int32 eresult_extended = 10;
bool CMsgClientLogonResponse::has_eresult_extended() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgClientLogonResponse::set_has_eresult_extended() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgClientLogonResponse::clear_has_eresult_extended() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgClientLogonResponse::clear_eresult_extended() {
  eresult_extended_ = 0;
  clear_has_eresult_extended();
}
::google::protobuf::int32 CMsgClientLogonResponse::eresult_extended() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogonResponse.eresult_extended)
  return eresult_extended_;
}
void CMsgClientLogonResponse::set_eresult_extended(::google::protobuf::int32 value) {
  set_has_eresult_extended();
  eresult_extended_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogonResponse.eresult_extended)
}

// optional string webapi_authenticate_user_nonce = 11;
bool CMsgClientLogonResponse::has_webapi_authenticate_user_nonce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientLogonResponse::set_has_webapi_authenticate_user_nonce() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientLogonResponse::clear_has_webapi_authenticate_user_nonce() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientLogonResponse::clear_webapi_authenticate_user_nonce() {
  webapi_authenticate_user_nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_webapi_authenticate_user_nonce();
}
const ::std::string& CMsgClientLogonResponse::webapi_authenticate_user_nonce() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogonResponse.webapi_authenticate_user_nonce)
  return webapi_authenticate_user_nonce_.GetNoArena();
}
void CMsgClientLogonResponse::set_webapi_authenticate_user_nonce(const ::std::string& value) {
  set_has_webapi_authenticate_user_nonce();
  webapi_authenticate_user_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogonResponse.webapi_authenticate_user_nonce)
}
#if LANG_CXX11
void CMsgClientLogonResponse::set_webapi_authenticate_user_nonce(::std::string&& value) {
  set_has_webapi_authenticate_user_nonce();
  webapi_authenticate_user_nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogonResponse.webapi_authenticate_user_nonce)
}
#endif
void CMsgClientLogonResponse::set_webapi_authenticate_user_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_webapi_authenticate_user_nonce();
  webapi_authenticate_user_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogonResponse.webapi_authenticate_user_nonce)
}
void CMsgClientLogonResponse::set_webapi_authenticate_user_nonce(const char* value, size_t size) {
  set_has_webapi_authenticate_user_nonce();
  webapi_authenticate_user_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogonResponse.webapi_authenticate_user_nonce)
}
::std::string* CMsgClientLogonResponse::mutable_webapi_authenticate_user_nonce() {
  set_has_webapi_authenticate_user_nonce();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogonResponse.webapi_authenticate_user_nonce)
  return webapi_authenticate_user_nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogonResponse::release_webapi_authenticate_user_nonce() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogonResponse.webapi_authenticate_user_nonce)
  clear_has_webapi_authenticate_user_nonce();
  return webapi_authenticate_user_nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogonResponse::set_allocated_webapi_authenticate_user_nonce(::std::string* webapi_authenticate_user_nonce) {
  if (webapi_authenticate_user_nonce != NULL) {
    set_has_webapi_authenticate_user_nonce();
  } else {
    clear_has_webapi_authenticate_user_nonce();
  }
  webapi_authenticate_user_nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), webapi_authenticate_user_nonce);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogonResponse.webapi_authenticate_user_nonce)
}

// optional uint32 cell_id_ping_threshold = 12;
bool CMsgClientLogonResponse::has_cell_id_ping_threshold() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgClientLogonResponse::set_has_cell_id_ping_threshold() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgClientLogonResponse::clear_has_cell_id_ping_threshold() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgClientLogonResponse::clear_cell_id_ping_threshold() {
  cell_id_ping_threshold_ = 0u;
  clear_has_cell_id_ping_threshold();
}
::google::protobuf::uint32 CMsgClientLogonResponse::cell_id_ping_threshold() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogonResponse.cell_id_ping_threshold)
  return cell_id_ping_threshold_;
}
void CMsgClientLogonResponse::set_cell_id_ping_threshold(::google::protobuf::uint32 value) {
  set_has_cell_id_ping_threshold();
  cell_id_ping_threshold_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogonResponse.cell_id_ping_threshold)
}

// optional bool use_pics = 13;
bool CMsgClientLogonResponse::has_use_pics() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgClientLogonResponse::set_has_use_pics() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgClientLogonResponse::clear_has_use_pics() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgClientLogonResponse::clear_use_pics() {
  use_pics_ = false;
  clear_has_use_pics();
}
bool CMsgClientLogonResponse::use_pics() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogonResponse.use_pics)
  return use_pics_;
}
void CMsgClientLogonResponse::set_use_pics(bool value) {
  set_has_use_pics();
  use_pics_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogonResponse.use_pics)
}

// optional string vanity_url = 14;
bool CMsgClientLogonResponse::has_vanity_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientLogonResponse::set_has_vanity_url() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientLogonResponse::clear_has_vanity_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientLogonResponse::clear_vanity_url() {
  vanity_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vanity_url();
}
const ::std::string& CMsgClientLogonResponse::vanity_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogonResponse.vanity_url)
  return vanity_url_.GetNoArena();
}
void CMsgClientLogonResponse::set_vanity_url(const ::std::string& value) {
  set_has_vanity_url();
  vanity_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogonResponse.vanity_url)
}
#if LANG_CXX11
void CMsgClientLogonResponse::set_vanity_url(::std::string&& value) {
  set_has_vanity_url();
  vanity_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogonResponse.vanity_url)
}
#endif
void CMsgClientLogonResponse::set_vanity_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vanity_url();
  vanity_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogonResponse.vanity_url)
}
void CMsgClientLogonResponse::set_vanity_url(const char* value, size_t size) {
  set_has_vanity_url();
  vanity_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogonResponse.vanity_url)
}
::std::string* CMsgClientLogonResponse::mutable_vanity_url() {
  set_has_vanity_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogonResponse.vanity_url)
  return vanity_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogonResponse::release_vanity_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogonResponse.vanity_url)
  clear_has_vanity_url();
  return vanity_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogonResponse::set_allocated_vanity_url(::std::string* vanity_url) {
  if (vanity_url != NULL) {
    set_has_vanity_url();
  } else {
    clear_has_vanity_url();
  }
  vanity_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vanity_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogonResponse.vanity_url)
}

// optional fixed64 client_supplied_steamid = 20;
bool CMsgClientLogonResponse::has_client_supplied_steamid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgClientLogonResponse::set_has_client_supplied_steamid() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgClientLogonResponse::clear_has_client_supplied_steamid() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgClientLogonResponse::clear_client_supplied_steamid() {
  client_supplied_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_client_supplied_steamid();
}
::google::protobuf::uint64 CMsgClientLogonResponse::client_supplied_steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogonResponse.client_supplied_steamid)
  return client_supplied_steamid_;
}
void CMsgClientLogonResponse::set_client_supplied_steamid(::google::protobuf::uint64 value) {
  set_has_client_supplied_steamid();
  client_supplied_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogonResponse.client_supplied_steamid)
}

// optional string ip_country_code = 21;
bool CMsgClientLogonResponse::has_ip_country_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientLogonResponse::set_has_ip_country_code() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientLogonResponse::clear_has_ip_country_code() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientLogonResponse::clear_ip_country_code() {
  ip_country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip_country_code();
}
const ::std::string& CMsgClientLogonResponse::ip_country_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogonResponse.ip_country_code)
  return ip_country_code_.GetNoArena();
}
void CMsgClientLogonResponse::set_ip_country_code(const ::std::string& value) {
  set_has_ip_country_code();
  ip_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogonResponse.ip_country_code)
}
#if LANG_CXX11
void CMsgClientLogonResponse::set_ip_country_code(::std::string&& value) {
  set_has_ip_country_code();
  ip_country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogonResponse.ip_country_code)
}
#endif
void CMsgClientLogonResponse::set_ip_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip_country_code();
  ip_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogonResponse.ip_country_code)
}
void CMsgClientLogonResponse::set_ip_country_code(const char* value, size_t size) {
  set_has_ip_country_code();
  ip_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogonResponse.ip_country_code)
}
::std::string* CMsgClientLogonResponse::mutable_ip_country_code() {
  set_has_ip_country_code();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogonResponse.ip_country_code)
  return ip_country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogonResponse::release_ip_country_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogonResponse.ip_country_code)
  clear_has_ip_country_code();
  return ip_country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogonResponse::set_allocated_ip_country_code(::std::string* ip_country_code) {
  if (ip_country_code != NULL) {
    set_has_ip_country_code();
  } else {
    clear_has_ip_country_code();
  }
  ip_country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_country_code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogonResponse.ip_country_code)
}

// optional bytes parental_settings = 22;
bool CMsgClientLogonResponse::has_parental_settings() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientLogonResponse::set_has_parental_settings() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientLogonResponse::clear_has_parental_settings() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientLogonResponse::clear_parental_settings() {
  parental_settings_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parental_settings();
}
const ::std::string& CMsgClientLogonResponse::parental_settings() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogonResponse.parental_settings)
  return parental_settings_.GetNoArena();
}
void CMsgClientLogonResponse::set_parental_settings(const ::std::string& value) {
  set_has_parental_settings();
  parental_settings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogonResponse.parental_settings)
}
#if LANG_CXX11
void CMsgClientLogonResponse::set_parental_settings(::std::string&& value) {
  set_has_parental_settings();
  parental_settings_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogonResponse.parental_settings)
}
#endif
void CMsgClientLogonResponse::set_parental_settings(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parental_settings();
  parental_settings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogonResponse.parental_settings)
}
void CMsgClientLogonResponse::set_parental_settings(const void* value, size_t size) {
  set_has_parental_settings();
  parental_settings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogonResponse.parental_settings)
}
::std::string* CMsgClientLogonResponse::mutable_parental_settings() {
  set_has_parental_settings();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogonResponse.parental_settings)
  return parental_settings_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogonResponse::release_parental_settings() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogonResponse.parental_settings)
  clear_has_parental_settings();
  return parental_settings_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogonResponse::set_allocated_parental_settings(::std::string* parental_settings) {
  if (parental_settings != NULL) {
    set_has_parental_settings();
  } else {
    clear_has_parental_settings();
  }
  parental_settings_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parental_settings);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogonResponse.parental_settings)
}

// optional bytes parental_setting_signature = 23;
bool CMsgClientLogonResponse::has_parental_setting_signature() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientLogonResponse::set_has_parental_setting_signature() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientLogonResponse::clear_has_parental_setting_signature() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientLogonResponse::clear_parental_setting_signature() {
  parental_setting_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parental_setting_signature();
}
const ::std::string& CMsgClientLogonResponse::parental_setting_signature() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogonResponse.parental_setting_signature)
  return parental_setting_signature_.GetNoArena();
}
void CMsgClientLogonResponse::set_parental_setting_signature(const ::std::string& value) {
  set_has_parental_setting_signature();
  parental_setting_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogonResponse.parental_setting_signature)
}
#if LANG_CXX11
void CMsgClientLogonResponse::set_parental_setting_signature(::std::string&& value) {
  set_has_parental_setting_signature();
  parental_setting_signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLogonResponse.parental_setting_signature)
}
#endif
void CMsgClientLogonResponse::set_parental_setting_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parental_setting_signature();
  parental_setting_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLogonResponse.parental_setting_signature)
}
void CMsgClientLogonResponse::set_parental_setting_signature(const void* value, size_t size) {
  set_has_parental_setting_signature();
  parental_setting_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLogonResponse.parental_setting_signature)
}
::std::string* CMsgClientLogonResponse::mutable_parental_setting_signature() {
  set_has_parental_setting_signature();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLogonResponse.parental_setting_signature)
  return parental_setting_signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLogonResponse::release_parental_setting_signature() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLogonResponse.parental_setting_signature)
  clear_has_parental_setting_signature();
  return parental_setting_signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLogonResponse::set_allocated_parental_setting_signature(::std::string* parental_setting_signature) {
  if (parental_setting_signature != NULL) {
    set_has_parental_setting_signature();
  } else {
    clear_has_parental_setting_signature();
  }
  parental_setting_signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parental_setting_signature);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLogonResponse.parental_setting_signature)
}

// optional int32 count_loginfailures_to_migrate = 24;
bool CMsgClientLogonResponse::has_count_loginfailures_to_migrate() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgClientLogonResponse::set_has_count_loginfailures_to_migrate() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgClientLogonResponse::clear_has_count_loginfailures_to_migrate() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgClientLogonResponse::clear_count_loginfailures_to_migrate() {
  count_loginfailures_to_migrate_ = 0;
  clear_has_count_loginfailures_to_migrate();
}
::google::protobuf::int32 CMsgClientLogonResponse::count_loginfailures_to_migrate() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogonResponse.count_loginfailures_to_migrate)
  return count_loginfailures_to_migrate_;
}
void CMsgClientLogonResponse::set_count_loginfailures_to_migrate(::google::protobuf::int32 value) {
  set_has_count_loginfailures_to_migrate();
  count_loginfailures_to_migrate_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogonResponse.count_loginfailures_to_migrate)
}

// optional int32 count_disconnects_to_migrate = 25;
bool CMsgClientLogonResponse::has_count_disconnects_to_migrate() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgClientLogonResponse::set_has_count_disconnects_to_migrate() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgClientLogonResponse::clear_has_count_disconnects_to_migrate() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgClientLogonResponse::clear_count_disconnects_to_migrate() {
  count_disconnects_to_migrate_ = 0;
  clear_has_count_disconnects_to_migrate();
}
::google::protobuf::int32 CMsgClientLogonResponse::count_disconnects_to_migrate() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogonResponse.count_disconnects_to_migrate)
  return count_disconnects_to_migrate_;
}
void CMsgClientLogonResponse::set_count_disconnects_to_migrate(::google::protobuf::int32 value) {
  set_has_count_disconnects_to_migrate();
  count_disconnects_to_migrate_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogonResponse.count_disconnects_to_migrate)
}

// optional int32 ogs_data_report_time_window = 26;
bool CMsgClientLogonResponse::has_ogs_data_report_time_window() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CMsgClientLogonResponse::set_has_ogs_data_report_time_window() {
  _has_bits_[0] |= 0x00100000u;
}
void CMsgClientLogonResponse::clear_has_ogs_data_report_time_window() {
  _has_bits_[0] &= ~0x00100000u;
}
void CMsgClientLogonResponse::clear_ogs_data_report_time_window() {
  ogs_data_report_time_window_ = 0;
  clear_has_ogs_data_report_time_window();
}
::google::protobuf::int32 CMsgClientLogonResponse::ogs_data_report_time_window() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogonResponse.ogs_data_report_time_window)
  return ogs_data_report_time_window_;
}
void CMsgClientLogonResponse::set_ogs_data_report_time_window(::google::protobuf::int32 value) {
  set_has_ogs_data_report_time_window();
  ogs_data_report_time_window_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogonResponse.ogs_data_report_time_window)
}

// optional uint64 client_instance_id = 27;
bool CMsgClientLogonResponse::has_client_instance_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CMsgClientLogonResponse::set_has_client_instance_id() {
  _has_bits_[0] |= 0x00200000u;
}
void CMsgClientLogonResponse::clear_has_client_instance_id() {
  _has_bits_[0] &= ~0x00200000u;
}
void CMsgClientLogonResponse::clear_client_instance_id() {
  client_instance_id_ = GOOGLE_ULONGLONG(0);
  clear_has_client_instance_id();
}
::google::protobuf::uint64 CMsgClientLogonResponse::client_instance_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogonResponse.client_instance_id)
  return client_instance_id_;
}
void CMsgClientLogonResponse::set_client_instance_id(::google::protobuf::uint64 value) {
  set_has_client_instance_id();
  client_instance_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogonResponse.client_instance_id)
}

// optional bool force_client_update_check = 28;
bool CMsgClientLogonResponse::has_force_client_update_check() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgClientLogonResponse::set_has_force_client_update_check() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgClientLogonResponse::clear_has_force_client_update_check() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgClientLogonResponse::clear_force_client_update_check() {
  force_client_update_check_ = false;
  clear_has_force_client_update_check();
}
bool CMsgClientLogonResponse::force_client_update_check() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLogonResponse.force_client_update_check)
  return force_client_update_check_;
}
void CMsgClientLogonResponse::set_force_client_update_check(bool value) {
  set_has_force_client_update_check();
  force_client_update_check_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLogonResponse.force_client_update_check)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRequestWebAPIAuthenticateUserNonce::kTokenTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRequestWebAPIAuthenticateUserNonce::CMsgClientRequestWebAPIAuthenticateUserNonce()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5flogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
}
CMsgClientRequestWebAPIAuthenticateUserNonce::CMsgClientRequestWebAPIAuthenticateUserNonce(const CMsgClientRequestWebAPIAuthenticateUserNonce& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_type_ = from.token_type_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::SharedCtor() {
  _cached_size_ = 0;
  token_type_ = -1;
}

CMsgClientRequestWebAPIAuthenticateUserNonce::~CMsgClientRequestWebAPIAuthenticateUserNonce() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  SharedDtor();
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::SharedDtor() {
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestWebAPIAuthenticateUserNonce::descriptor() {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5flogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientRequestWebAPIAuthenticateUserNonce& CMsgClientRequestWebAPIAuthenticateUserNonce::default_instance() {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientRequestWebAPIAuthenticateUserNonce* CMsgClientRequestWebAPIAuthenticateUserNonce::New(::google::protobuf::Arena* arena) const {
  CMsgClientRequestWebAPIAuthenticateUserNonce* n = new CMsgClientRequestWebAPIAuthenticateUserNonce;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  token_type_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientRequestWebAPIAuthenticateUserNonce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 token_type = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_token_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  return false;
#undef DO_
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 token_type = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->token_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
}

::google::protobuf::uint8* CMsgClientRequestWebAPIAuthenticateUserNonce::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 token_type = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->token_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  return target;
}

size_t CMsgClientRequestWebAPIAuthenticateUserNonce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 token_type = 1 [default = -1];
  if (has_token_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->token_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRequestWebAPIAuthenticateUserNonce* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientRequestWebAPIAuthenticateUserNonce>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
    MergeFrom(*source);
  }
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::MergeFrom(const CMsgClientRequestWebAPIAuthenticateUserNonce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_token_type()) {
    set_token_type(from.token_type());
  }
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::CopyFrom(const CMsgClientRequestWebAPIAuthenticateUserNonce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestWebAPIAuthenticateUserNonce::IsInitialized() const {
  return true;
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::Swap(CMsgClientRequestWebAPIAuthenticateUserNonce* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRequestWebAPIAuthenticateUserNonce::InternalSwap(CMsgClientRequestWebAPIAuthenticateUserNonce* other) {
  std::swap(token_type_, other->token_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientRequestWebAPIAuthenticateUserNonce::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5flogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientRequestWebAPIAuthenticateUserNonce

// optional int32 token_type = 1 [default = -1];
bool CMsgClientRequestWebAPIAuthenticateUserNonce::has_token_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientRequestWebAPIAuthenticateUserNonce::set_has_token_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientRequestWebAPIAuthenticateUserNonce::clear_has_token_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientRequestWebAPIAuthenticateUserNonce::clear_token_type() {
  token_type_ = -1;
  clear_has_token_type();
}
::google::protobuf::int32 CMsgClientRequestWebAPIAuthenticateUserNonce::token_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce.token_type)
  return token_type_;
}
void CMsgClientRequestWebAPIAuthenticateUserNonce::set_token_type(::google::protobuf::int32 value) {
  set_has_token_type();
  token_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonce.token_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRequestWebAPIAuthenticateUserNonceResponse::kEresultFieldNumber;
const int CMsgClientRequestWebAPIAuthenticateUserNonceResponse::kWebapiAuthenticateUserNonceFieldNumber;
const int CMsgClientRequestWebAPIAuthenticateUserNonceResponse::kTokenTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CMsgClientRequestWebAPIAuthenticateUserNonceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5flogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
}
CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CMsgClientRequestWebAPIAuthenticateUserNonceResponse(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  webapi_authenticate_user_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_webapi_authenticate_user_nonce()) {
    webapi_authenticate_user_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webapi_authenticate_user_nonce_);
  }
  ::memcpy(&eresult_, &from.eresult_,
    reinterpret_cast<char*>(&token_type_) -
    reinterpret_cast<char*>(&eresult_) + sizeof(token_type_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::SharedCtor() {
  _cached_size_ = 0;
  webapi_authenticate_user_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eresult_ = 2;
  token_type_ = -1;
}

CMsgClientRequestWebAPIAuthenticateUserNonceResponse::~CMsgClientRequestWebAPIAuthenticateUserNonceResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  SharedDtor();
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::SharedDtor() {
  webapi_authenticate_user_nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestWebAPIAuthenticateUserNonceResponse::descriptor() {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5flogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& CMsgClientRequestWebAPIAuthenticateUserNonceResponse::default_instance() {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientRequestWebAPIAuthenticateUserNonceResponse* CMsgClientRequestWebAPIAuthenticateUserNonceResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientRequestWebAPIAuthenticateUserNonceResponse* n = new CMsgClientRequestWebAPIAuthenticateUserNonceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_webapi_authenticate_user_nonce()) {
      GOOGLE_DCHECK(!webapi_authenticate_user_nonce_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*webapi_authenticate_user_nonce_.UnsafeRawStringPointer())->clear();
    }
    eresult_ = 2;
    token_type_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientRequestWebAPIAuthenticateUserNonceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 token_type = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_token_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string webapi_authenticate_user_nonce = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webapi_authenticate_user_nonce()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->webapi_authenticate_user_nonce().data(), this->webapi_authenticate_user_nonce().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  return false;
#undef DO_
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 token_type = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->token_type(), output);
  }

  // optional string webapi_authenticate_user_nonce = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webapi_authenticate_user_nonce().data(), this->webapi_authenticate_user_nonce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->webapi_authenticate_user_nonce(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
}

::google::protobuf::uint8* CMsgClientRequestWebAPIAuthenticateUserNonceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 token_type = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->token_type(), target);
  }

  // optional string webapi_authenticate_user_nonce = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webapi_authenticate_user_nonce().data(), this->webapi_authenticate_user_nonce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->webapi_authenticate_user_nonce(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  return target;
}

size_t CMsgClientRequestWebAPIAuthenticateUserNonceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string webapi_authenticate_user_nonce = 11;
    if (has_webapi_authenticate_user_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webapi_authenticate_user_nonce());
    }

    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional int32 token_type = 3 [default = -1];
    if (has_token_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->token_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRequestWebAPIAuthenticateUserNonceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientRequestWebAPIAuthenticateUserNonceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
    MergeFrom(*source);
  }
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::MergeFrom(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_webapi_authenticate_user_nonce();
      webapi_authenticate_user_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webapi_authenticate_user_nonce_);
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    if (cached_has_bits & 0x00000004u) {
      token_type_ = from.token_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CopyFrom(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestWebAPIAuthenticateUserNonceResponse::IsInitialized() const {
  return true;
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::Swap(CMsgClientRequestWebAPIAuthenticateUserNonceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::InternalSwap(CMsgClientRequestWebAPIAuthenticateUserNonceResponse* other) {
  webapi_authenticate_user_nonce_.Swap(&other->webapi_authenticate_user_nonce_);
  std::swap(eresult_, other->eresult_);
  std::swap(token_type_, other->token_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientRequestWebAPIAuthenticateUserNonceResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5flogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientRequestWebAPIAuthenticateUserNonceResponse

// optional int32 eresult = 1 [default = 2];
bool CMsgClientRequestWebAPIAuthenticateUserNonceResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientRequestWebAPIAuthenticateUserNonceResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse.eresult)
  return eresult_;
}
void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse.eresult)
}

// optional string webapi_authenticate_user_nonce = 11;
bool CMsgClientRequestWebAPIAuthenticateUserNonceResponse::has_webapi_authenticate_user_nonce() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_has_webapi_authenticate_user_nonce() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::clear_has_webapi_authenticate_user_nonce() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::clear_webapi_authenticate_user_nonce() {
  webapi_authenticate_user_nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_webapi_authenticate_user_nonce();
}
const ::std::string& CMsgClientRequestWebAPIAuthenticateUserNonceResponse::webapi_authenticate_user_nonce() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
  return webapi_authenticate_user_nonce_.GetNoArena();
}
void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_webapi_authenticate_user_nonce(const ::std::string& value) {
  set_has_webapi_authenticate_user_nonce();
  webapi_authenticate_user_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
}
#if LANG_CXX11
void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_webapi_authenticate_user_nonce(::std::string&& value) {
  set_has_webapi_authenticate_user_nonce();
  webapi_authenticate_user_nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
}
#endif
void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_webapi_authenticate_user_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_webapi_authenticate_user_nonce();
  webapi_authenticate_user_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
}
void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_webapi_authenticate_user_nonce(const char* value, size_t size) {
  set_has_webapi_authenticate_user_nonce();
  webapi_authenticate_user_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
}
::std::string* CMsgClientRequestWebAPIAuthenticateUserNonceResponse::mutable_webapi_authenticate_user_nonce() {
  set_has_webapi_authenticate_user_nonce();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
  return webapi_authenticate_user_nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientRequestWebAPIAuthenticateUserNonceResponse::release_webapi_authenticate_user_nonce() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
  clear_has_webapi_authenticate_user_nonce();
  return webapi_authenticate_user_nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_allocated_webapi_authenticate_user_nonce(::std::string* webapi_authenticate_user_nonce) {
  if (webapi_authenticate_user_nonce != NULL) {
    set_has_webapi_authenticate_user_nonce();
  } else {
    clear_has_webapi_authenticate_user_nonce();
  }
  webapi_authenticate_user_nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), webapi_authenticate_user_nonce);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
}

// optional int32 token_type = 3 [default = -1];
bool CMsgClientRequestWebAPIAuthenticateUserNonceResponse::has_token_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_has_token_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::clear_has_token_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::clear_token_type() {
  token_type_ = -1;
  clear_has_token_type();
}
::google::protobuf::int32 CMsgClientRequestWebAPIAuthenticateUserNonceResponse::token_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse.token_type)
  return token_type_;
}
void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_token_type(::google::protobuf::int32 value) {
  set_has_token_type();
  token_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse.token_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLogOff::CMsgClientLogOff()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5flogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLogOff)
}
CMsgClientLogOff::CMsgClientLogOff(const CMsgClientLogOff& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLogOff)
}

void CMsgClientLogOff::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClientLogOff::~CMsgClientLogOff() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLogOff)
  SharedDtor();
}

void CMsgClientLogOff::SharedDtor() {
}

void CMsgClientLogOff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLogOff::descriptor() {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5flogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientLogOff& CMsgClientLogOff::default_instance() {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientLogOff* CMsgClientLogOff::New(::google::protobuf::Arena* arena) const {
  CMsgClientLogOff* n = new CMsgClientLogOff;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientLogOff::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLogOff)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientLogOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLogOff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLogOff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLogOff)
  return false;
#undef DO_
}

void CMsgClientLogOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLogOff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLogOff)
}

::google::protobuf::uint8* CMsgClientLogOff::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLogOff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLogOff)
  return target;
}

size_t CMsgClientLogOff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLogOff)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLogOff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLogOff)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLogOff* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientLogOff>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLogOff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLogOff)
    MergeFrom(*source);
  }
}

void CMsgClientLogOff::MergeFrom(const CMsgClientLogOff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLogOff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClientLogOff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLogOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLogOff::CopyFrom(const CMsgClientLogOff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLogOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLogOff::IsInitialized() const {
  return true;
}

void CMsgClientLogOff::Swap(CMsgClientLogOff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLogOff::InternalSwap(CMsgClientLogOff* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientLogOff::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5flogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientLogOff

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLoggedOff::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLoggedOff::CMsgClientLoggedOff()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5flogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLoggedOff)
}
CMsgClientLoggedOff::CMsgClientLoggedOff(const CMsgClientLoggedOff& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLoggedOff)
}

void CMsgClientLoggedOff::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
}

CMsgClientLoggedOff::~CMsgClientLoggedOff() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLoggedOff)
  SharedDtor();
}

void CMsgClientLoggedOff::SharedDtor() {
}

void CMsgClientLoggedOff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLoggedOff::descriptor() {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5flogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientLoggedOff& CMsgClientLoggedOff::default_instance() {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientLoggedOff* CMsgClientLoggedOff::New(::google::protobuf::Arena* arena) const {
  CMsgClientLoggedOff* n = new CMsgClientLoggedOff;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientLoggedOff::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLoggedOff)
  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientLoggedOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLoggedOff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLoggedOff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLoggedOff)
  return false;
#undef DO_
}

void CMsgClientLoggedOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLoggedOff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLoggedOff)
}

::google::protobuf::uint8* CMsgClientLoggedOff::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLoggedOff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLoggedOff)
  return target;
}

size_t CMsgClientLoggedOff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLoggedOff)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLoggedOff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLoggedOff)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLoggedOff* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientLoggedOff>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLoggedOff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLoggedOff)
    MergeFrom(*source);
  }
}

void CMsgClientLoggedOff::MergeFrom(const CMsgClientLoggedOff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLoggedOff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgClientLoggedOff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLoggedOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLoggedOff::CopyFrom(const CMsgClientLoggedOff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLoggedOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLoggedOff::IsInitialized() const {
  return true;
}

void CMsgClientLoggedOff::Swap(CMsgClientLoggedOff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLoggedOff::InternalSwap(CMsgClientLoggedOff* other) {
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientLoggedOff::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5flogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientLoggedOff

// optional int32 eresult = 1 [default = 2];
bool CMsgClientLoggedOff::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientLoggedOff::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientLoggedOff::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientLoggedOff::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientLoggedOff::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLoggedOff.eresult)
  return eresult_;
}
void CMsgClientLoggedOff::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLoggedOff.eresult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientNewLoginKey::kUniqueIdFieldNumber;
const int CMsgClientNewLoginKey::kLoginKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientNewLoginKey::CMsgClientNewLoginKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5flogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientNewLoginKey)
}
CMsgClientNewLoginKey::CMsgClientNewLoginKey(const CMsgClientNewLoginKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  login_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_login_key()) {
    login_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_key_);
  }
  unique_id_ = from.unique_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientNewLoginKey)
}

void CMsgClientNewLoginKey::SharedCtor() {
  _cached_size_ = 0;
  login_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unique_id_ = 0u;
}

CMsgClientNewLoginKey::~CMsgClientNewLoginKey() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientNewLoginKey)
  SharedDtor();
}

void CMsgClientNewLoginKey::SharedDtor() {
  login_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientNewLoginKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientNewLoginKey::descriptor() {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5flogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientNewLoginKey& CMsgClientNewLoginKey::default_instance() {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientNewLoginKey* CMsgClientNewLoginKey::New(::google::protobuf::Arena* arena) const {
  CMsgClientNewLoginKey* n = new CMsgClientNewLoginKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientNewLoginKey::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientNewLoginKey)
  if (has_login_key()) {
    GOOGLE_DCHECK(!login_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*login_key_.UnsafeRawStringPointer())->clear();
  }
  unique_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientNewLoginKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientNewLoginKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unique_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_unique_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unique_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string login_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login_key().data(), this->login_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientNewLoginKey.login_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientNewLoginKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientNewLoginKey)
  return false;
#undef DO_
}

void CMsgClientNewLoginKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientNewLoginKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 unique_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unique_id(), output);
  }

  // optional string login_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_key().data(), this->login_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientNewLoginKey.login_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->login_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientNewLoginKey)
}

::google::protobuf::uint8* CMsgClientNewLoginKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientNewLoginKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 unique_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unique_id(), target);
  }

  // optional string login_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_key().data(), this->login_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientNewLoginKey.login_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->login_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientNewLoginKey)
  return target;
}

size_t CMsgClientNewLoginKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientNewLoginKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string login_key = 2;
    if (has_login_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_key());
    }

    // optional uint32 unique_id = 1;
    if (has_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unique_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientNewLoginKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientNewLoginKey)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientNewLoginKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientNewLoginKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientNewLoginKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientNewLoginKey)
    MergeFrom(*source);
  }
}

void CMsgClientNewLoginKey::MergeFrom(const CMsgClientNewLoginKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientNewLoginKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_login_key();
      login_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      unique_id_ = from.unique_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientNewLoginKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientNewLoginKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientNewLoginKey::CopyFrom(const CMsgClientNewLoginKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientNewLoginKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientNewLoginKey::IsInitialized() const {
  return true;
}

void CMsgClientNewLoginKey::Swap(CMsgClientNewLoginKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientNewLoginKey::InternalSwap(CMsgClientNewLoginKey* other) {
  login_key_.Swap(&other->login_key_);
  std::swap(unique_id_, other->unique_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientNewLoginKey::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5flogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientNewLoginKey

// optional uint32 unique_id = 1;
bool CMsgClientNewLoginKey::has_unique_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientNewLoginKey::set_has_unique_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientNewLoginKey::clear_has_unique_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientNewLoginKey::clear_unique_id() {
  unique_id_ = 0u;
  clear_has_unique_id();
}
::google::protobuf::uint32 CMsgClientNewLoginKey::unique_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientNewLoginKey.unique_id)
  return unique_id_;
}
void CMsgClientNewLoginKey::set_unique_id(::google::protobuf::uint32 value) {
  set_has_unique_id();
  unique_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientNewLoginKey.unique_id)
}

// optional string login_key = 2;
bool CMsgClientNewLoginKey::has_login_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientNewLoginKey::set_has_login_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientNewLoginKey::clear_has_login_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientNewLoginKey::clear_login_key() {
  login_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_login_key();
}
const ::std::string& CMsgClientNewLoginKey::login_key() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientNewLoginKey.login_key)
  return login_key_.GetNoArena();
}
void CMsgClientNewLoginKey::set_login_key(const ::std::string& value) {
  set_has_login_key();
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientNewLoginKey.login_key)
}
#if LANG_CXX11
void CMsgClientNewLoginKey::set_login_key(::std::string&& value) {
  set_has_login_key();
  login_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientNewLoginKey.login_key)
}
#endif
void CMsgClientNewLoginKey::set_login_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_login_key();
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientNewLoginKey.login_key)
}
void CMsgClientNewLoginKey::set_login_key(const char* value, size_t size) {
  set_has_login_key();
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientNewLoginKey.login_key)
}
::std::string* CMsgClientNewLoginKey::mutable_login_key() {
  set_has_login_key();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientNewLoginKey.login_key)
  return login_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientNewLoginKey::release_login_key() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientNewLoginKey.login_key)
  clear_has_login_key();
  return login_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientNewLoginKey::set_allocated_login_key(::std::string* login_key) {
  if (login_key != NULL) {
    set_has_login_key();
  } else {
    clear_has_login_key();
  }
  login_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_key);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientNewLoginKey.login_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientNewLoginKeyAccepted::kUniqueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientNewLoginKeyAccepted::CMsgClientNewLoginKeyAccepted()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5flogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientNewLoginKeyAccepted)
}
CMsgClientNewLoginKeyAccepted::CMsgClientNewLoginKeyAccepted(const CMsgClientNewLoginKeyAccepted& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unique_id_ = from.unique_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientNewLoginKeyAccepted)
}

void CMsgClientNewLoginKeyAccepted::SharedCtor() {
  _cached_size_ = 0;
  unique_id_ = 0u;
}

CMsgClientNewLoginKeyAccepted::~CMsgClientNewLoginKeyAccepted() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientNewLoginKeyAccepted)
  SharedDtor();
}

void CMsgClientNewLoginKeyAccepted::SharedDtor() {
}

void CMsgClientNewLoginKeyAccepted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientNewLoginKeyAccepted::descriptor() {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5flogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientNewLoginKeyAccepted& CMsgClientNewLoginKeyAccepted::default_instance() {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientNewLoginKeyAccepted* CMsgClientNewLoginKeyAccepted::New(::google::protobuf::Arena* arena) const {
  CMsgClientNewLoginKeyAccepted* n = new CMsgClientNewLoginKeyAccepted;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientNewLoginKeyAccepted::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientNewLoginKeyAccepted)
  unique_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientNewLoginKeyAccepted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientNewLoginKeyAccepted)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unique_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_unique_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unique_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientNewLoginKeyAccepted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientNewLoginKeyAccepted)
  return false;
#undef DO_
}

void CMsgClientNewLoginKeyAccepted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientNewLoginKeyAccepted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 unique_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unique_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientNewLoginKeyAccepted)
}

::google::protobuf::uint8* CMsgClientNewLoginKeyAccepted::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientNewLoginKeyAccepted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 unique_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unique_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientNewLoginKeyAccepted)
  return target;
}

size_t CMsgClientNewLoginKeyAccepted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientNewLoginKeyAccepted)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 unique_id = 1;
  if (has_unique_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->unique_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientNewLoginKeyAccepted::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientNewLoginKeyAccepted)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientNewLoginKeyAccepted* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientNewLoginKeyAccepted>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientNewLoginKeyAccepted)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientNewLoginKeyAccepted)
    MergeFrom(*source);
  }
}

void CMsgClientNewLoginKeyAccepted::MergeFrom(const CMsgClientNewLoginKeyAccepted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientNewLoginKeyAccepted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_unique_id()) {
    set_unique_id(from.unique_id());
  }
}

void CMsgClientNewLoginKeyAccepted::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientNewLoginKeyAccepted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientNewLoginKeyAccepted::CopyFrom(const CMsgClientNewLoginKeyAccepted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientNewLoginKeyAccepted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientNewLoginKeyAccepted::IsInitialized() const {
  return true;
}

void CMsgClientNewLoginKeyAccepted::Swap(CMsgClientNewLoginKeyAccepted* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientNewLoginKeyAccepted::InternalSwap(CMsgClientNewLoginKeyAccepted* other) {
  std::swap(unique_id_, other->unique_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientNewLoginKeyAccepted::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5flogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientNewLoginKeyAccepted

// optional uint32 unique_id = 1;
bool CMsgClientNewLoginKeyAccepted::has_unique_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientNewLoginKeyAccepted::set_has_unique_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientNewLoginKeyAccepted::clear_has_unique_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientNewLoginKeyAccepted::clear_unique_id() {
  unique_id_ = 0u;
  clear_has_unique_id();
}
::google::protobuf::uint32 CMsgClientNewLoginKeyAccepted::unique_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientNewLoginKeyAccepted.unique_id)
  return unique_id_;
}
void CMsgClientNewLoginKeyAccepted::set_unique_id(::google::protobuf::uint32 value) {
  set_has_unique_id();
  unique_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientNewLoginKeyAccepted.unique_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAccountInfo::kPersonaNameFieldNumber;
const int CMsgClientAccountInfo::kIpCountryFieldNumber;
const int CMsgClientAccountInfo::kCountAuthedComputersFieldNumber;
const int CMsgClientAccountInfo::kAccountFlagsFieldNumber;
const int CMsgClientAccountInfo::kFacebookIdFieldNumber;
const int CMsgClientAccountInfo::kFacebookNameFieldNumber;
const int CMsgClientAccountInfo::kSteamguardNotifyNewmachinesFieldNumber;
const int CMsgClientAccountInfo::kSteamguardMachineNameUserChosenFieldNumber;
const int CMsgClientAccountInfo::kIsPhoneVerifiedFieldNumber;
const int CMsgClientAccountInfo::kTwoFactorStateFieldNumber;
const int CMsgClientAccountInfo::kIsPhoneIdentifyingFieldNumber;
const int CMsgClientAccountInfo::kIsPhoneNeedingReverifyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAccountInfo::CMsgClientAccountInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5flogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAccountInfo)
}
CMsgClientAccountInfo::CMsgClientAccountInfo(const CMsgClientAccountInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  ip_country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip_country()) {
    ip_country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_country_);
  }
  facebook_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_facebook_name()) {
    facebook_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.facebook_name_);
  }
  steamguard_machine_name_user_chosen_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_steamguard_machine_name_user_chosen()) {
    steamguard_machine_name_user_chosen_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steamguard_machine_name_user_chosen_);
  }
  ::memcpy(&count_authed_computers_, &from.count_authed_computers_,
    reinterpret_cast<char*>(&two_factor_state_) -
    reinterpret_cast<char*>(&count_authed_computers_) + sizeof(two_factor_state_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAccountInfo)
}

void CMsgClientAccountInfo::SharedCtor() {
  _cached_size_ = 0;
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  facebook_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamguard_machine_name_user_chosen_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_authed_computers_, 0, reinterpret_cast<char*>(&two_factor_state_) -
    reinterpret_cast<char*>(&count_authed_computers_) + sizeof(two_factor_state_));
}

CMsgClientAccountInfo::~CMsgClientAccountInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAccountInfo)
  SharedDtor();
}

void CMsgClientAccountInfo::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  facebook_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamguard_machine_name_user_chosen_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientAccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAccountInfo::descriptor() {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5flogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientAccountInfo& CMsgClientAccountInfo::default_instance() {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientAccountInfo* CMsgClientAccountInfo::New(::google::protobuf::Arena* arena) const {
  CMsgClientAccountInfo* n = new CMsgClientAccountInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientAccountInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAccountInfo)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_persona_name()) {
      GOOGLE_DCHECK(!persona_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*persona_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_ip_country()) {
      GOOGLE_DCHECK(!ip_country_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_country_.UnsafeRawStringPointer())->clear();
    }
    if (has_facebook_name()) {
      GOOGLE_DCHECK(!facebook_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*facebook_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_steamguard_machine_name_user_chosen()) {
      GOOGLE_DCHECK(!steamguard_machine_name_user_chosen_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*steamguard_machine_name_user_chosen_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&count_authed_computers_, 0, reinterpret_cast<char*>(&steamguard_notify_newmachines_) -
      reinterpret_cast<char*>(&count_authed_computers_) + sizeof(steamguard_notify_newmachines_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&is_phone_verified_, 0, reinterpret_cast<char*>(&two_factor_state_) -
      reinterpret_cast<char*>(&is_phone_verified_) + sizeof(two_factor_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientAccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAccountInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string persona_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), this->persona_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientAccountInfo.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip_country = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_country().data(), this->ip_country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientAccountInfo.ip_country");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count_authed_computers = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_count_authed_computers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_authed_computers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_flags = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_account_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 facebook_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_facebook_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &facebook_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string facebook_name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facebook_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->facebook_name().data(), this->facebook_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientAccountInfo.facebook_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool steamguard_notify_newmachines = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_steamguard_notify_newmachines();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steamguard_notify_newmachines_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string steamguard_machine_name_user_chosen = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steamguard_machine_name_user_chosen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->steamguard_machine_name_user_chosen().data(), this->steamguard_machine_name_user_chosen().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientAccountInfo.steamguard_machine_name_user_chosen");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_phone_verified = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_is_phone_verified();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_phone_verified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 two_factor_state = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_two_factor_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &two_factor_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_phone_identifying = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_is_phone_identifying();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_phone_identifying_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_phone_needing_reverify = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_is_phone_needing_reverify();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_phone_needing_reverify_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAccountInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAccountInfo)
  return false;
#undef DO_
}

void CMsgClientAccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAccountInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string persona_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAccountInfo.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->persona_name(), output);
  }

  // optional string ip_country = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_country().data(), this->ip_country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAccountInfo.ip_country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip_country(), output);
  }

  // optional int32 count_authed_computers = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count_authed_computers(), output);
  }

  // optional uint32 account_flags = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->account_flags(), output);
  }

  // optional uint64 facebook_id = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->facebook_id(), output);
  }

  // optional string facebook_name = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->facebook_name().data(), this->facebook_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAccountInfo.facebook_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->facebook_name(), output);
  }

  // optional bool steamguard_notify_newmachines = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->steamguard_notify_newmachines(), output);
  }

  // optional string steamguard_machine_name_user_chosen = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->steamguard_machine_name_user_chosen().data(), this->steamguard_machine_name_user_chosen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAccountInfo.steamguard_machine_name_user_chosen");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->steamguard_machine_name_user_chosen(), output);
  }

  // optional bool is_phone_verified = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_phone_verified(), output);
  }

  // optional uint32 two_factor_state = 17;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->two_factor_state(), output);
  }

  // optional bool is_phone_identifying = 18;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_phone_identifying(), output);
  }

  // optional bool is_phone_needing_reverify = 19;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->is_phone_needing_reverify(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAccountInfo)
}

::google::protobuf::uint8* CMsgClientAccountInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAccountInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string persona_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAccountInfo.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->persona_name(), target);
  }

  // optional string ip_country = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_country().data(), this->ip_country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAccountInfo.ip_country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip_country(), target);
  }

  // optional int32 count_authed_computers = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count_authed_computers(), target);
  }

  // optional uint32 account_flags = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->account_flags(), target);
  }

  // optional uint64 facebook_id = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->facebook_id(), target);
  }

  // optional string facebook_name = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->facebook_name().data(), this->facebook_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAccountInfo.facebook_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->facebook_name(), target);
  }

  // optional bool steamguard_notify_newmachines = 14;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->steamguard_notify_newmachines(), target);
  }

  // optional string steamguard_machine_name_user_chosen = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->steamguard_machine_name_user_chosen().data(), this->steamguard_machine_name_user_chosen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAccountInfo.steamguard_machine_name_user_chosen");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->steamguard_machine_name_user_chosen(), target);
  }

  // optional bool is_phone_verified = 16;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_phone_verified(), target);
  }

  // optional uint32 two_factor_state = 17;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->two_factor_state(), target);
  }

  // optional bool is_phone_identifying = 18;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_phone_identifying(), target);
  }

  // optional bool is_phone_needing_reverify = 19;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->is_phone_needing_reverify(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAccountInfo)
  return target;
}

size_t CMsgClientAccountInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAccountInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string persona_name = 1;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional string ip_country = 2;
    if (has_ip_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_country());
    }

    // optional string facebook_name = 9;
    if (has_facebook_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facebook_name());
    }

    // optional string steamguard_machine_name_user_chosen = 15;
    if (has_steamguard_machine_name_user_chosen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steamguard_machine_name_user_chosen());
    }

    // optional int32 count_authed_computers = 5;
    if (has_count_authed_computers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_authed_computers());
    }

    // optional uint32 account_flags = 7;
    if (has_account_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_flags());
    }

    // optional uint64 facebook_id = 8;
    if (has_facebook_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->facebook_id());
    }

    // optional bool steamguard_notify_newmachines = 14;
    if (has_steamguard_notify_newmachines()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional bool is_phone_verified = 16;
    if (has_is_phone_verified()) {
      total_size += 2 + 1;
    }

    // optional bool is_phone_identifying = 18;
    if (has_is_phone_identifying()) {
      total_size += 2 + 1;
    }

    // optional bool is_phone_needing_reverify = 19;
    if (has_is_phone_needing_reverify()) {
      total_size += 2 + 1;
    }

    // optional uint32 two_factor_state = 17;
    if (has_two_factor_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->two_factor_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAccountInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAccountInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientAccountInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAccountInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAccountInfo)
    MergeFrom(*source);
  }
}

void CMsgClientAccountInfo::MergeFrom(const CMsgClientAccountInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAccountInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_persona_name();
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ip_country();
      ip_country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_country_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_facebook_name();
      facebook_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.facebook_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_steamguard_machine_name_user_chosen();
      steamguard_machine_name_user_chosen_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steamguard_machine_name_user_chosen_);
    }
    if (cached_has_bits & 0x00000010u) {
      count_authed_computers_ = from.count_authed_computers_;
    }
    if (cached_has_bits & 0x00000020u) {
      account_flags_ = from.account_flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      facebook_id_ = from.facebook_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      steamguard_notify_newmachines_ = from.steamguard_notify_newmachines_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      is_phone_verified_ = from.is_phone_verified_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_phone_identifying_ = from.is_phone_identifying_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_phone_needing_reverify_ = from.is_phone_needing_reverify_;
    }
    if (cached_has_bits & 0x00000800u) {
      two_factor_state_ = from.two_factor_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAccountInfo::CopyFrom(const CMsgClientAccountInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAccountInfo::IsInitialized() const {
  return true;
}

void CMsgClientAccountInfo::Swap(CMsgClientAccountInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAccountInfo::InternalSwap(CMsgClientAccountInfo* other) {
  persona_name_.Swap(&other->persona_name_);
  ip_country_.Swap(&other->ip_country_);
  facebook_name_.Swap(&other->facebook_name_);
  steamguard_machine_name_user_chosen_.Swap(&other->steamguard_machine_name_user_chosen_);
  std::swap(count_authed_computers_, other->count_authed_computers_);
  std::swap(account_flags_, other->account_flags_);
  std::swap(facebook_id_, other->facebook_id_);
  std::swap(steamguard_notify_newmachines_, other->steamguard_notify_newmachines_);
  std::swap(is_phone_verified_, other->is_phone_verified_);
  std::swap(is_phone_identifying_, other->is_phone_identifying_);
  std::swap(is_phone_needing_reverify_, other->is_phone_needing_reverify_);
  std::swap(two_factor_state_, other->two_factor_state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientAccountInfo::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5flogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientAccountInfo

// optional string persona_name = 1;
bool CMsgClientAccountInfo::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientAccountInfo::set_has_persona_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientAccountInfo::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientAccountInfo::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona_name();
}
const ::std::string& CMsgClientAccountInfo::persona_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAccountInfo.persona_name)
  return persona_name_.GetNoArena();
}
void CMsgClientAccountInfo::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAccountInfo.persona_name)
}
#if LANG_CXX11
void CMsgClientAccountInfo::set_persona_name(::std::string&& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientAccountInfo.persona_name)
}
#endif
void CMsgClientAccountInfo::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientAccountInfo.persona_name)
}
void CMsgClientAccountInfo::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientAccountInfo.persona_name)
}
::std::string* CMsgClientAccountInfo::mutable_persona_name() {
  set_has_persona_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientAccountInfo.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientAccountInfo::release_persona_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientAccountInfo.persona_name)
  clear_has_persona_name();
  return persona_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientAccountInfo::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != NULL) {
    set_has_persona_name();
  } else {
    clear_has_persona_name();
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientAccountInfo.persona_name)
}

// optional string ip_country = 2;
bool CMsgClientAccountInfo::has_ip_country() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientAccountInfo::set_has_ip_country() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientAccountInfo::clear_has_ip_country() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientAccountInfo::clear_ip_country() {
  ip_country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip_country();
}
const ::std::string& CMsgClientAccountInfo::ip_country() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAccountInfo.ip_country)
  return ip_country_.GetNoArena();
}
void CMsgClientAccountInfo::set_ip_country(const ::std::string& value) {
  set_has_ip_country();
  ip_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAccountInfo.ip_country)
}
#if LANG_CXX11
void CMsgClientAccountInfo::set_ip_country(::std::string&& value) {
  set_has_ip_country();
  ip_country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientAccountInfo.ip_country)
}
#endif
void CMsgClientAccountInfo::set_ip_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip_country();
  ip_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientAccountInfo.ip_country)
}
void CMsgClientAccountInfo::set_ip_country(const char* value, size_t size) {
  set_has_ip_country();
  ip_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientAccountInfo.ip_country)
}
::std::string* CMsgClientAccountInfo::mutable_ip_country() {
  set_has_ip_country();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientAccountInfo.ip_country)
  return ip_country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientAccountInfo::release_ip_country() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientAccountInfo.ip_country)
  clear_has_ip_country();
  return ip_country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientAccountInfo::set_allocated_ip_country(::std::string* ip_country) {
  if (ip_country != NULL) {
    set_has_ip_country();
  } else {
    clear_has_ip_country();
  }
  ip_country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_country);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientAccountInfo.ip_country)
}

// optional int32 count_authed_computers = 5;
bool CMsgClientAccountInfo::has_count_authed_computers() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientAccountInfo::set_has_count_authed_computers() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientAccountInfo::clear_has_count_authed_computers() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientAccountInfo::clear_count_authed_computers() {
  count_authed_computers_ = 0;
  clear_has_count_authed_computers();
}
::google::protobuf::int32 CMsgClientAccountInfo::count_authed_computers() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAccountInfo.count_authed_computers)
  return count_authed_computers_;
}
void CMsgClientAccountInfo::set_count_authed_computers(::google::protobuf::int32 value) {
  set_has_count_authed_computers();
  count_authed_computers_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAccountInfo.count_authed_computers)
}

// optional uint32 account_flags = 7;
bool CMsgClientAccountInfo::has_account_flags() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientAccountInfo::set_has_account_flags() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientAccountInfo::clear_has_account_flags() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientAccountInfo::clear_account_flags() {
  account_flags_ = 0u;
  clear_has_account_flags();
}
::google::protobuf::uint32 CMsgClientAccountInfo::account_flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAccountInfo.account_flags)
  return account_flags_;
}
void CMsgClientAccountInfo::set_account_flags(::google::protobuf::uint32 value) {
  set_has_account_flags();
  account_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAccountInfo.account_flags)
}

// optional uint64 facebook_id = 8;
bool CMsgClientAccountInfo::has_facebook_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientAccountInfo::set_has_facebook_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientAccountInfo::clear_has_facebook_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientAccountInfo::clear_facebook_id() {
  facebook_id_ = GOOGLE_ULONGLONG(0);
  clear_has_facebook_id();
}
::google::protobuf::uint64 CMsgClientAccountInfo::facebook_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAccountInfo.facebook_id)
  return facebook_id_;
}
void CMsgClientAccountInfo::set_facebook_id(::google::protobuf::uint64 value) {
  set_has_facebook_id();
  facebook_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAccountInfo.facebook_id)
}

// optional string facebook_name = 9;
bool CMsgClientAccountInfo::has_facebook_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientAccountInfo::set_has_facebook_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientAccountInfo::clear_has_facebook_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientAccountInfo::clear_facebook_name() {
  facebook_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_facebook_name();
}
const ::std::string& CMsgClientAccountInfo::facebook_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAccountInfo.facebook_name)
  return facebook_name_.GetNoArena();
}
void CMsgClientAccountInfo::set_facebook_name(const ::std::string& value) {
  set_has_facebook_name();
  facebook_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAccountInfo.facebook_name)
}
#if LANG_CXX11
void CMsgClientAccountInfo::set_facebook_name(::std::string&& value) {
  set_has_facebook_name();
  facebook_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientAccountInfo.facebook_name)
}
#endif
void CMsgClientAccountInfo::set_facebook_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_facebook_name();
  facebook_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientAccountInfo.facebook_name)
}
void CMsgClientAccountInfo::set_facebook_name(const char* value, size_t size) {
  set_has_facebook_name();
  facebook_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientAccountInfo.facebook_name)
}
::std::string* CMsgClientAccountInfo::mutable_facebook_name() {
  set_has_facebook_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientAccountInfo.facebook_name)
  return facebook_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientAccountInfo::release_facebook_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientAccountInfo.facebook_name)
  clear_has_facebook_name();
  return facebook_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientAccountInfo::set_allocated_facebook_name(::std::string* facebook_name) {
  if (facebook_name != NULL) {
    set_has_facebook_name();
  } else {
    clear_has_facebook_name();
  }
  facebook_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), facebook_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientAccountInfo.facebook_name)
}

// optional bool steamguard_notify_newmachines = 14;
bool CMsgClientAccountInfo::has_steamguard_notify_newmachines() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgClientAccountInfo::set_has_steamguard_notify_newmachines() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgClientAccountInfo::clear_has_steamguard_notify_newmachines() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgClientAccountInfo::clear_steamguard_notify_newmachines() {
  steamguard_notify_newmachines_ = false;
  clear_has_steamguard_notify_newmachines();
}
bool CMsgClientAccountInfo::steamguard_notify_newmachines() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAccountInfo.steamguard_notify_newmachines)
  return steamguard_notify_newmachines_;
}
void CMsgClientAccountInfo::set_steamguard_notify_newmachines(bool value) {
  set_has_steamguard_notify_newmachines();
  steamguard_notify_newmachines_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAccountInfo.steamguard_notify_newmachines)
}

// optional string steamguard_machine_name_user_chosen = 15;
bool CMsgClientAccountInfo::has_steamguard_machine_name_user_chosen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientAccountInfo::set_has_steamguard_machine_name_user_chosen() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientAccountInfo::clear_has_steamguard_machine_name_user_chosen() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientAccountInfo::clear_steamguard_machine_name_user_chosen() {
  steamguard_machine_name_user_chosen_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_steamguard_machine_name_user_chosen();
}
const ::std::string& CMsgClientAccountInfo::steamguard_machine_name_user_chosen() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
  return steamguard_machine_name_user_chosen_.GetNoArena();
}
void CMsgClientAccountInfo::set_steamguard_machine_name_user_chosen(const ::std::string& value) {
  set_has_steamguard_machine_name_user_chosen();
  steamguard_machine_name_user_chosen_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
}
#if LANG_CXX11
void CMsgClientAccountInfo::set_steamguard_machine_name_user_chosen(::std::string&& value) {
  set_has_steamguard_machine_name_user_chosen();
  steamguard_machine_name_user_chosen_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
}
#endif
void CMsgClientAccountInfo::set_steamguard_machine_name_user_chosen(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_steamguard_machine_name_user_chosen();
  steamguard_machine_name_user_chosen_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
}
void CMsgClientAccountInfo::set_steamguard_machine_name_user_chosen(const char* value, size_t size) {
  set_has_steamguard_machine_name_user_chosen();
  steamguard_machine_name_user_chosen_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
}
::std::string* CMsgClientAccountInfo::mutable_steamguard_machine_name_user_chosen() {
  set_has_steamguard_machine_name_user_chosen();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
  return steamguard_machine_name_user_chosen_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientAccountInfo::release_steamguard_machine_name_user_chosen() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
  clear_has_steamguard_machine_name_user_chosen();
  return steamguard_machine_name_user_chosen_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientAccountInfo::set_allocated_steamguard_machine_name_user_chosen(::std::string* steamguard_machine_name_user_chosen) {
  if (steamguard_machine_name_user_chosen != NULL) {
    set_has_steamguard_machine_name_user_chosen();
  } else {
    clear_has_steamguard_machine_name_user_chosen();
  }
  steamguard_machine_name_user_chosen_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), steamguard_machine_name_user_chosen);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
}

// optional bool is_phone_verified = 16;
bool CMsgClientAccountInfo::has_is_phone_verified() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgClientAccountInfo::set_has_is_phone_verified() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgClientAccountInfo::clear_has_is_phone_verified() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgClientAccountInfo::clear_is_phone_verified() {
  is_phone_verified_ = false;
  clear_has_is_phone_verified();
}
bool CMsgClientAccountInfo::is_phone_verified() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAccountInfo.is_phone_verified)
  return is_phone_verified_;
}
void CMsgClientAccountInfo::set_is_phone_verified(bool value) {
  set_has_is_phone_verified();
  is_phone_verified_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAccountInfo.is_phone_verified)
}

// optional uint32 two_factor_state = 17;
bool CMsgClientAccountInfo::has_two_factor_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgClientAccountInfo::set_has_two_factor_state() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgClientAccountInfo::clear_has_two_factor_state() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgClientAccountInfo::clear_two_factor_state() {
  two_factor_state_ = 0u;
  clear_has_two_factor_state();
}
::google::protobuf::uint32 CMsgClientAccountInfo::two_factor_state() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAccountInfo.two_factor_state)
  return two_factor_state_;
}
void CMsgClientAccountInfo::set_two_factor_state(::google::protobuf::uint32 value) {
  set_has_two_factor_state();
  two_factor_state_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAccountInfo.two_factor_state)
}

// optional bool is_phone_identifying = 18;
bool CMsgClientAccountInfo::has_is_phone_identifying() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgClientAccountInfo::set_has_is_phone_identifying() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgClientAccountInfo::clear_has_is_phone_identifying() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgClientAccountInfo::clear_is_phone_identifying() {
  is_phone_identifying_ = false;
  clear_has_is_phone_identifying();
}
bool CMsgClientAccountInfo::is_phone_identifying() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAccountInfo.is_phone_identifying)
  return is_phone_identifying_;
}
void CMsgClientAccountInfo::set_is_phone_identifying(bool value) {
  set_has_is_phone_identifying();
  is_phone_identifying_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAccountInfo.is_phone_identifying)
}

// optional bool is_phone_needing_reverify = 19;
bool CMsgClientAccountInfo::has_is_phone_needing_reverify() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgClientAccountInfo::set_has_is_phone_needing_reverify() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgClientAccountInfo::clear_has_is_phone_needing_reverify() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgClientAccountInfo::clear_is_phone_needing_reverify() {
  is_phone_needing_reverify_ = false;
  clear_has_is_phone_needing_reverify();
}
bool CMsgClientAccountInfo::is_phone_needing_reverify() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAccountInfo.is_phone_needing_reverify)
  return is_phone_needing_reverify_;
}
void CMsgClientAccountInfo::set_is_phone_needing_reverify(bool value) {
  set_has_is_phone_needing_reverify();
  is_phone_needing_reverify_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAccountInfo.is_phone_needing_reverify)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
