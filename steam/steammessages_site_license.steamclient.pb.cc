// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_site_license.steamclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_site_license.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CSiteManagerClient_IncomingClient_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteManagerClient_IncomingClient_Request> {
} _CSiteManagerClient_IncomingClient_Request_default_instance_;
class CSiteManagerClient_IncomingClient_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteManagerClient_IncomingClient_Response> {
} _CSiteManagerClient_IncomingClient_Response_default_instance_;
class CSiteLicense_InitiateAssociation_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_InitiateAssociation_Request> {
} _CSiteLicense_InitiateAssociation_Request_default_instance_;
class CSiteLicense_InitiateAssociation_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_InitiateAssociation_Response> {
} _CSiteLicense_InitiateAssociation_Response_default_instance_;
class CSiteLicense_ClientSiteAssociation_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_ClientSiteAssociation_Request> {
} _CSiteLicense_ClientSiteAssociation_Request_default_instance_;
class CSiteLicense_ClientSiteAssociation_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_ClientSiteAssociation_Response> {
} _CSiteLicense_ClientSiteAssociation_Response_default_instance_;
class CSiteLicense_ClientSiteLicenseSeatCheckout_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_ClientSiteLicenseSeatCheckout_Request> {
} _CSiteLicense_ClientSiteLicenseSeatCheckout_Request_default_instance_;
class CSiteLicense_ClientSiteLicenseSeatCheckout_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_ClientSiteLicenseSeatCheckout_Response> {
} _CSiteLicense_ClientSiteLicenseSeatCheckout_Response_default_instance_;
class CSiteLicense_LCSAuthenticate_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_LCSAuthenticate_Request> {
} _CSiteLicense_LCSAuthenticate_Request_default_instance_;
class CSiteLicense_LCSAuthenticate_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_LCSAuthenticate_Response> {
} _CSiteLicense_LCSAuthenticate_Response_default_instance_;
class CSiteLicense_LCSAssociateUser_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_LCSAssociateUser_Request> {
} _CSiteLicense_LCSAssociateUser_Request_default_instance_;
class CSiteLicense_LCSAssociateUser_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_LCSAssociateUser_Response> {
} _CSiteLicense_LCSAssociateUser_Response_default_instance_;
class CSiteLicense_ClientSeatCheckout_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_ClientSeatCheckout_Request> {
} _CSiteLicense_ClientSeatCheckout_Request_default_instance_;
class CSiteLicense_ClientSeatCheckout_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_ClientSeatCheckout_Response> {
} _CSiteLicense_ClientSeatCheckout_Response_default_instance_;

namespace protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[14];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteManagerClient_IncomingClient_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteManagerClient_IncomingClient_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteManagerClient_IncomingClient_Request, client_steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteManagerClient_IncomingClient_Request, client_local_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteManagerClient_IncomingClient_Request, site_local_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteManagerClient_IncomingClient_Request, connection_key_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteManagerClient_IncomingClient_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteManagerClient_IncomingClient_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_InitiateAssociation_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_InitiateAssociation_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_InitiateAssociation_Request, site_steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_InitiateAssociation_Request, site_local_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_InitiateAssociation_Request, client_local_ip_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_InitiateAssociation_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_InitiateAssociation_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_InitiateAssociation_Response, connection_key_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSiteAssociation_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSiteAssociation_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSiteAssociation_Request, site_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSiteAssociation_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSiteAssociation_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSiteAssociation_Response, site_name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSiteLicenseSeatCheckout_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSiteLicenseSeatCheckout_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSiteLicenseSeatCheckout_Request, packageid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSiteLicenseSeatCheckout_Request, appid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSiteLicenseSeatCheckout_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSiteLicenseSeatCheckout_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAuthenticate_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAuthenticate_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAuthenticate_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAuthenticate_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAuthenticate_Response, site_name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAssociateUser_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAssociateUser_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAssociateUser_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAssociateUser_Request, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAssociateUser_Request, local_ip_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAssociateUser_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAssociateUser_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSeatCheckout_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSeatCheckout_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSeatCheckout_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSeatCheckout_Request, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSeatCheckout_Request, packageid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSeatCheckout_Request, appid_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSeatCheckout_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSeatCheckout_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(CSiteManagerClient_IncomingClient_Request)},
  { 13, 18, sizeof(CSiteManagerClient_IncomingClient_Response)},
  { 18, 26, sizeof(CSiteLicense_InitiateAssociation_Request)},
  { 29, 35, sizeof(CSiteLicense_InitiateAssociation_Response)},
  { 36, 42, sizeof(CSiteLicense_ClientSiteAssociation_Request)},
  { 43, 49, sizeof(CSiteLicense_ClientSiteAssociation_Response)},
  { 50, 57, sizeof(CSiteLicense_ClientSiteLicenseSeatCheckout_Request)},
  { 59, 64, sizeof(CSiteLicense_ClientSiteLicenseSeatCheckout_Response)},
  { 64, 69, sizeof(CSiteLicense_LCSAuthenticate_Request)},
  { 69, 75, sizeof(CSiteLicense_LCSAuthenticate_Response)},
  { 76, 84, sizeof(CSiteLicense_LCSAssociateUser_Request)},
  { 87, 92, sizeof(CSiteLicense_LCSAssociateUser_Response)},
  { 92, 101, sizeof(CSiteLicense_ClientSeatCheckout_Request)},
  { 105, 110, sizeof(CSiteLicense_ClientSeatCheckout_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteManagerClient_IncomingClient_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteManagerClient_IncomingClient_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteLicense_InitiateAssociation_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteLicense_InitiateAssociation_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteLicense_ClientSiteAssociation_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteLicense_ClientSiteAssociation_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteLicense_ClientSiteLicenseSeatCheckout_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteLicense_ClientSiteLicenseSeatCheckout_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteLicense_LCSAuthenticate_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteLicense_LCSAuthenticate_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteLicense_LCSAssociateUser_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteLicense_LCSAssociateUser_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteLicense_ClientSeatCheckout_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteLicense_ClientSeatCheckout_Response_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_site_license.steamclient.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

}  // namespace

void TableStruct::Shutdown() {
  _CSiteManagerClient_IncomingClient_Request_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CSiteManagerClient_IncomingClient_Response_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CSiteLicense_InitiateAssociation_Request_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CSiteLicense_InitiateAssociation_Response_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CSiteLicense_ClientSiteAssociation_Request_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CSiteLicense_ClientSiteAssociation_Response_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CSiteLicense_ClientSiteLicenseSeatCheckout_Request_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CSiteLicense_ClientSiteLicenseSeatCheckout_Response_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CSiteLicense_LCSAuthenticate_Request_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CSiteLicense_LCSAuthenticate_Response_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CSiteLicense_LCSAssociateUser_Request_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CSiteLicense_LCSAssociateUser_Response_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CSiteLicense_ClientSeatCheckout_Request_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CSiteLicense_ClientSeatCheckout_Response_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::InitDefaults();
  _CSiteManagerClient_IncomingClient_Request_default_instance_.DefaultConstruct();
  _CSiteManagerClient_IncomingClient_Response_default_instance_.DefaultConstruct();
  _CSiteLicense_InitiateAssociation_Request_default_instance_.DefaultConstruct();
  _CSiteLicense_InitiateAssociation_Response_default_instance_.DefaultConstruct();
  _CSiteLicense_ClientSiteAssociation_Request_default_instance_.DefaultConstruct();
  _CSiteLicense_ClientSiteAssociation_Response_default_instance_.DefaultConstruct();
  _CSiteLicense_ClientSiteLicenseSeatCheckout_Request_default_instance_.DefaultConstruct();
  _CSiteLicense_ClientSiteLicenseSeatCheckout_Response_default_instance_.DefaultConstruct();
  _CSiteLicense_LCSAuthenticate_Request_default_instance_.DefaultConstruct();
  _CSiteLicense_LCSAuthenticate_Response_default_instance_.DefaultConstruct();
  _CSiteLicense_LCSAssociateUser_Request_default_instance_.DefaultConstruct();
  _CSiteLicense_LCSAssociateUser_Response_default_instance_.DefaultConstruct();
  _CSiteLicense_ClientSeatCheckout_Request_default_instance_.DefaultConstruct();
  _CSiteLicense_ClientSeatCheckout_Response_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n,steammessages_site_license.steamclient"
      ".proto\022\013proto.steam\032,steammessages_unifi"
      "ed_base.steamclient.proto\"\213\001\n)CSiteManag"
      "erClient_IncomingClient_Request\022\026\n\016clien"
      "t_steamid\030\001 \001(\006\022\027\n\017client_local_ip\030\002 \001(\007"
      "\022\025\n\rsite_local_ip\030\003 \001(\007\022\026\n\016connection_ke"
      "y\030\004 \001(\014\",\n*CSiteManagerClient_IncomingCl"
      "ient_Response\"p\n(CSiteLicense_InitiateAs"
      "sociation_Request\022\024\n\014site_steamid\030\001 \001(\006\022"
      "\025\n\rsite_local_ip\030\002 \001(\007\022\027\n\017client_local_i"
      "p\030\003 \001(\007\"C\n)CSiteLicense_InitiateAssociat"
      "ion_Response\022\026\n\016connection_key\030\001 \001(\014\"=\n*"
      "CSiteLicense_ClientSiteAssociation_Reque"
      "st\022\017\n\007site_id\030\001 \001(\004\"@\n+CSiteLicense_Clie"
      "ntSiteAssociation_Response\022\021\n\tsite_name\030"
      "\001 \001(\t\"\253\001\n2CSiteLicense_ClientSiteLicense"
      "SeatCheckout_Request\022@\n\tpackageid\030\001 \001(\rB"
      "-\202\265\030)Package ID that client wants to che"
      "ck out\0223\n\005appid\030\002 \001(\rB$\202\265\030 App ID that c"
      "lient wants to play\"5\n3CSiteLicense_Clie"
      "ntSiteLicenseSeatCheckout_Response\"&\n$CS"
      "iteLicense_LCSAuthenticate_Request\":\n%CS"
      "iteLicense_LCSAuthenticate_Response\022\021\n\ts"
      "ite_name\030\001 \001(\t\"]\n%CSiteLicense_LCSAssoci"
      "ateUser_Request\022\017\n\007steamid\030\001 \001(\006\022\021\n\tsess"
      "ionid\030\002 \001(\r\022\020\n\010local_ip\030\003 \001(\007\"(\n&CSiteLi"
      "cense_LCSAssociateUser_Response\"o\n\'CSite"
      "License_ClientSeatCheckout_Request\022\017\n\007st"
      "eamid\030\001 \001(\006\022\021\n\tsessionid\030\002 \001(\005\022\021\n\tpackag"
      "eid\030\003 \001(\r\022\r\n\005appid\030\004 \001(\r\"*\n(CSiteLicense"
      "_ClientSeatCheckout_Response2\216\002\n\021SiteMan"
      "agerClient\022\315\001\n\024ExpectIncomingClient\0226.pr"
      "oto.steam.CSiteManagerClient_IncomingCli"
      "ent_Request\0327.proto.steam.CSiteManagerCl"
      "ient_IncomingClient_Response\"D\202\265\030@Rack i"
      "nforming site manager of new inbound cli"
      "ent PSK connection\032)\202\265\030!Local site manag"
      "er client service\300\265\030\0022\217\t\n\013SiteLicense\022\274\001"
      "\n\023InitiateAssociation\0225.proto.steam.CSit"
      "eLicense_InitiateAssociation_Request\0326.p"
      "roto.steam.CSiteLicense_InitiateAssociat"
      "ion_Response\"6\202\265\0302Client is requesting c"
      "onnetion info for local site\022\272\001\n\025ClientS"
      "iteAssociation\0227.proto.steam.CSiteLicens"
      "e_ClientSiteAssociation_Request\0328.proto."
      "steam.CSiteLicense_ClientSiteAssociation"
      "_Response\".\202\265\030*Client is sending up site"
      " association info\022\327\001\n\035ClientSiteLicenseS"
      "eatCheckout\022\?.proto.steam.CSiteLicense_C"
      "lientSiteLicenseSeatCheckout_Request\032@.p"
      "roto.steam.CSiteLicense_ClientSiteLicens"
      "eSeatCheckout_Response\"3\202\265\030/Client is re"
      "questing use of a site license seat\022\236\001\n\017"
      "LCSAuthenticate\0221.proto.steam.CSiteLicen"
      "se_LCSAuthenticate_Request\0322.proto.steam"
      ".CSiteLicense_LCSAuthenticate_Response\"$"
      "\202\265\030 Local cafe server authentication\022\265\001\n"
      "\020LCSAssociateUser\0222.proto.steam.CSiteLic"
      "ense_LCSAssociateUser_Request\0323.proto.st"
      "eam.CSiteLicense_LCSAssociateUser_Respon"
      "se\"8\202\265\0304Local cafe server wants to grant"
      " user access to site\022\266\001\n\022ClientSeatCheck"
      "out\0224.proto.steam.CSiteLicense_ClientSea"
      "tCheckout_Request\0325.proto.steam.CSiteLic"
      "ense_ClientSeatCheckout_Response\"3\202\265\030/Cl"
      "ient is requesting use of a site license"
      " seat\032\030\202\265\030\024Site License serviceB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2676);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_site_license.steamclient.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteManagerClient_IncomingClient_Request::kClientSteamidFieldNumber;
const int CSiteManagerClient_IncomingClient_Request::kClientLocalIpFieldNumber;
const int CSiteManagerClient_IncomingClient_Request::kSiteLocalIpFieldNumber;
const int CSiteManagerClient_IncomingClient_Request::kConnectionKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteManagerClient_IncomingClient_Request::CSiteManagerClient_IncomingClient_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteManagerClient_IncomingClient_Request)
}
CSiteManagerClient_IncomingClient_Request::CSiteManagerClient_IncomingClient_Request(const CSiteManagerClient_IncomingClient_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connection_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_connection_key()) {
    connection_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_key_);
  }
  ::memcpy(&client_steamid_, &from.client_steamid_,
    reinterpret_cast<char*>(&site_local_ip_) -
    reinterpret_cast<char*>(&client_steamid_) + sizeof(site_local_ip_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteManagerClient_IncomingClient_Request)
}

void CSiteManagerClient_IncomingClient_Request::SharedCtor() {
  _cached_size_ = 0;
  connection_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_steamid_, 0, reinterpret_cast<char*>(&site_local_ip_) -
    reinterpret_cast<char*>(&client_steamid_) + sizeof(site_local_ip_));
}

CSiteManagerClient_IncomingClient_Request::~CSiteManagerClient_IncomingClient_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteManagerClient_IncomingClient_Request)
  SharedDtor();
}

void CSiteManagerClient_IncomingClient_Request::SharedDtor() {
  connection_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSiteManagerClient_IncomingClient_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteManagerClient_IncomingClient_Request::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteManagerClient_IncomingClient_Request& CSiteManagerClient_IncomingClient_Request::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteManagerClient_IncomingClient_Request* CSiteManagerClient_IncomingClient_Request::New(::google::protobuf::Arena* arena) const {
  CSiteManagerClient_IncomingClient_Request* n = new CSiteManagerClient_IncomingClient_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteManagerClient_IncomingClient_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteManagerClient_IncomingClient_Request)
  if (has_connection_key()) {
    GOOGLE_DCHECK(!connection_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*connection_key_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&client_steamid_, 0, reinterpret_cast<char*>(&site_local_ip_) -
      reinterpret_cast<char*>(&client_steamid_) + sizeof(site_local_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteManagerClient_IncomingClient_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteManagerClient_IncomingClient_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 client_steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_client_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_local_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_client_local_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_local_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 site_local_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_site_local_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &site_local_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes connection_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_connection_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteManagerClient_IncomingClient_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteManagerClient_IncomingClient_Request)
  return false;
#undef DO_
}

void CSiteManagerClient_IncomingClient_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteManagerClient_IncomingClient_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 client_steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->client_steamid(), output);
  }

  // optional fixed32 client_local_ip = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->client_local_ip(), output);
  }

  // optional fixed32 site_local_ip = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->site_local_ip(), output);
  }

  // optional bytes connection_key = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->connection_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteManagerClient_IncomingClient_Request)
}

::google::protobuf::uint8* CSiteManagerClient_IncomingClient_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteManagerClient_IncomingClient_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 client_steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->client_steamid(), target);
  }

  // optional fixed32 client_local_ip = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->client_local_ip(), target);
  }

  // optional fixed32 site_local_ip = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->site_local_ip(), target);
  }

  // optional bytes connection_key = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->connection_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteManagerClient_IncomingClient_Request)
  return target;
}

size_t CSiteManagerClient_IncomingClient_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteManagerClient_IncomingClient_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes connection_key = 4;
    if (has_connection_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->connection_key());
    }

    // optional fixed64 client_steamid = 1;
    if (has_client_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed32 client_local_ip = 2;
    if (has_client_local_ip()) {
      total_size += 1 + 4;
    }

    // optional fixed32 site_local_ip = 3;
    if (has_site_local_ip()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteManagerClient_IncomingClient_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteManagerClient_IncomingClient_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteManagerClient_IncomingClient_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteManagerClient_IncomingClient_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteManagerClient_IncomingClient_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteManagerClient_IncomingClient_Request)
    MergeFrom(*source);
  }
}

void CSiteManagerClient_IncomingClient_Request::MergeFrom(const CSiteManagerClient_IncomingClient_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteManagerClient_IncomingClient_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_connection_key();
      connection_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      client_steamid_ = from.client_steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_local_ip_ = from.client_local_ip_;
    }
    if (cached_has_bits & 0x00000008u) {
      site_local_ip_ = from.site_local_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSiteManagerClient_IncomingClient_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteManagerClient_IncomingClient_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteManagerClient_IncomingClient_Request::CopyFrom(const CSiteManagerClient_IncomingClient_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteManagerClient_IncomingClient_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteManagerClient_IncomingClient_Request::IsInitialized() const {
  return true;
}

void CSiteManagerClient_IncomingClient_Request::Swap(CSiteManagerClient_IncomingClient_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteManagerClient_IncomingClient_Request::InternalSwap(CSiteManagerClient_IncomingClient_Request* other) {
  connection_key_.Swap(&other->connection_key_);
  std::swap(client_steamid_, other->client_steamid_);
  std::swap(client_local_ip_, other->client_local_ip_);
  std::swap(site_local_ip_, other->site_local_ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteManagerClient_IncomingClient_Request::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteManagerClient_IncomingClient_Request

// optional fixed64 client_steamid = 1;
bool CSiteManagerClient_IncomingClient_Request::has_client_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSiteManagerClient_IncomingClient_Request::set_has_client_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
void CSiteManagerClient_IncomingClient_Request::clear_has_client_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSiteManagerClient_IncomingClient_Request::clear_client_steamid() {
  client_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_client_steamid();
}
::google::protobuf::uint64 CSiteManagerClient_IncomingClient_Request::client_steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteManagerClient_IncomingClient_Request.client_steamid)
  return client_steamid_;
}
void CSiteManagerClient_IncomingClient_Request::set_client_steamid(::google::protobuf::uint64 value) {
  set_has_client_steamid();
  client_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteManagerClient_IncomingClient_Request.client_steamid)
}

// optional fixed32 client_local_ip = 2;
bool CSiteManagerClient_IncomingClient_Request::has_client_local_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSiteManagerClient_IncomingClient_Request::set_has_client_local_ip() {
  _has_bits_[0] |= 0x00000004u;
}
void CSiteManagerClient_IncomingClient_Request::clear_has_client_local_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSiteManagerClient_IncomingClient_Request::clear_client_local_ip() {
  client_local_ip_ = 0u;
  clear_has_client_local_ip();
}
::google::protobuf::uint32 CSiteManagerClient_IncomingClient_Request::client_local_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteManagerClient_IncomingClient_Request.client_local_ip)
  return client_local_ip_;
}
void CSiteManagerClient_IncomingClient_Request::set_client_local_ip(::google::protobuf::uint32 value) {
  set_has_client_local_ip();
  client_local_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteManagerClient_IncomingClient_Request.client_local_ip)
}

// optional fixed32 site_local_ip = 3;
bool CSiteManagerClient_IncomingClient_Request::has_site_local_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSiteManagerClient_IncomingClient_Request::set_has_site_local_ip() {
  _has_bits_[0] |= 0x00000008u;
}
void CSiteManagerClient_IncomingClient_Request::clear_has_site_local_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSiteManagerClient_IncomingClient_Request::clear_site_local_ip() {
  site_local_ip_ = 0u;
  clear_has_site_local_ip();
}
::google::protobuf::uint32 CSiteManagerClient_IncomingClient_Request::site_local_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteManagerClient_IncomingClient_Request.site_local_ip)
  return site_local_ip_;
}
void CSiteManagerClient_IncomingClient_Request::set_site_local_ip(::google::protobuf::uint32 value) {
  set_has_site_local_ip();
  site_local_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteManagerClient_IncomingClient_Request.site_local_ip)
}

// optional bytes connection_key = 4;
bool CSiteManagerClient_IncomingClient_Request::has_connection_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSiteManagerClient_IncomingClient_Request::set_has_connection_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CSiteManagerClient_IncomingClient_Request::clear_has_connection_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSiteManagerClient_IncomingClient_Request::clear_connection_key() {
  connection_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_connection_key();
}
const ::std::string& CSiteManagerClient_IncomingClient_Request::connection_key() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteManagerClient_IncomingClient_Request.connection_key)
  return connection_key_.GetNoArena();
}
void CSiteManagerClient_IncomingClient_Request::set_connection_key(const ::std::string& value) {
  set_has_connection_key();
  connection_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CSiteManagerClient_IncomingClient_Request.connection_key)
}
#if LANG_CXX11
void CSiteManagerClient_IncomingClient_Request::set_connection_key(::std::string&& value) {
  set_has_connection_key();
  connection_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CSiteManagerClient_IncomingClient_Request.connection_key)
}
#endif
void CSiteManagerClient_IncomingClient_Request::set_connection_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_connection_key();
  connection_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CSiteManagerClient_IncomingClient_Request.connection_key)
}
void CSiteManagerClient_IncomingClient_Request::set_connection_key(const void* value, size_t size) {
  set_has_connection_key();
  connection_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CSiteManagerClient_IncomingClient_Request.connection_key)
}
::std::string* CSiteManagerClient_IncomingClient_Request::mutable_connection_key() {
  set_has_connection_key();
  // @@protoc_insertion_point(field_mutable:proto.steam.CSiteManagerClient_IncomingClient_Request.connection_key)
  return connection_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSiteManagerClient_IncomingClient_Request::release_connection_key() {
  // @@protoc_insertion_point(field_release:proto.steam.CSiteManagerClient_IncomingClient_Request.connection_key)
  clear_has_connection_key();
  return connection_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSiteManagerClient_IncomingClient_Request::set_allocated_connection_key(::std::string* connection_key) {
  if (connection_key != NULL) {
    set_has_connection_key();
  } else {
    clear_has_connection_key();
  }
  connection_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connection_key);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CSiteManagerClient_IncomingClient_Request.connection_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteManagerClient_IncomingClient_Response::CSiteManagerClient_IncomingClient_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteManagerClient_IncomingClient_Response)
}
CSiteManagerClient_IncomingClient_Response::CSiteManagerClient_IncomingClient_Response(const CSiteManagerClient_IncomingClient_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteManagerClient_IncomingClient_Response)
}

void CSiteManagerClient_IncomingClient_Response::SharedCtor() {
  _cached_size_ = 0;
}

CSiteManagerClient_IncomingClient_Response::~CSiteManagerClient_IncomingClient_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteManagerClient_IncomingClient_Response)
  SharedDtor();
}

void CSiteManagerClient_IncomingClient_Response::SharedDtor() {
}

void CSiteManagerClient_IncomingClient_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteManagerClient_IncomingClient_Response::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteManagerClient_IncomingClient_Response& CSiteManagerClient_IncomingClient_Response::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteManagerClient_IncomingClient_Response* CSiteManagerClient_IncomingClient_Response::New(::google::protobuf::Arena* arena) const {
  CSiteManagerClient_IncomingClient_Response* n = new CSiteManagerClient_IncomingClient_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteManagerClient_IncomingClient_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteManagerClient_IncomingClient_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteManagerClient_IncomingClient_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteManagerClient_IncomingClient_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteManagerClient_IncomingClient_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteManagerClient_IncomingClient_Response)
  return false;
#undef DO_
}

void CSiteManagerClient_IncomingClient_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteManagerClient_IncomingClient_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteManagerClient_IncomingClient_Response)
}

::google::protobuf::uint8* CSiteManagerClient_IncomingClient_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteManagerClient_IncomingClient_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteManagerClient_IncomingClient_Response)
  return target;
}

size_t CSiteManagerClient_IncomingClient_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteManagerClient_IncomingClient_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteManagerClient_IncomingClient_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteManagerClient_IncomingClient_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteManagerClient_IncomingClient_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteManagerClient_IncomingClient_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteManagerClient_IncomingClient_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteManagerClient_IncomingClient_Response)
    MergeFrom(*source);
  }
}

void CSiteManagerClient_IncomingClient_Response::MergeFrom(const CSiteManagerClient_IncomingClient_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteManagerClient_IncomingClient_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSiteManagerClient_IncomingClient_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteManagerClient_IncomingClient_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteManagerClient_IncomingClient_Response::CopyFrom(const CSiteManagerClient_IncomingClient_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteManagerClient_IncomingClient_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteManagerClient_IncomingClient_Response::IsInitialized() const {
  return true;
}

void CSiteManagerClient_IncomingClient_Response::Swap(CSiteManagerClient_IncomingClient_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteManagerClient_IncomingClient_Response::InternalSwap(CSiteManagerClient_IncomingClient_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteManagerClient_IncomingClient_Response::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteManagerClient_IncomingClient_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_InitiateAssociation_Request::kSiteSteamidFieldNumber;
const int CSiteLicense_InitiateAssociation_Request::kSiteLocalIpFieldNumber;
const int CSiteLicense_InitiateAssociation_Request::kClientLocalIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_InitiateAssociation_Request::CSiteLicense_InitiateAssociation_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteLicense_InitiateAssociation_Request)
}
CSiteLicense_InitiateAssociation_Request::CSiteLicense_InitiateAssociation_Request(const CSiteLicense_InitiateAssociation_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&site_steamid_, &from.site_steamid_,
    reinterpret_cast<char*>(&client_local_ip_) -
    reinterpret_cast<char*>(&site_steamid_) + sizeof(client_local_ip_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteLicense_InitiateAssociation_Request)
}

void CSiteLicense_InitiateAssociation_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&site_steamid_, 0, reinterpret_cast<char*>(&client_local_ip_) -
    reinterpret_cast<char*>(&site_steamid_) + sizeof(client_local_ip_));
}

CSiteLicense_InitiateAssociation_Request::~CSiteLicense_InitiateAssociation_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteLicense_InitiateAssociation_Request)
  SharedDtor();
}

void CSiteLicense_InitiateAssociation_Request::SharedDtor() {
}

void CSiteLicense_InitiateAssociation_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteLicense_InitiateAssociation_Request::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_InitiateAssociation_Request& CSiteLicense_InitiateAssociation_Request::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteLicense_InitiateAssociation_Request* CSiteLicense_InitiateAssociation_Request::New(::google::protobuf::Arena* arena) const {
  CSiteLicense_InitiateAssociation_Request* n = new CSiteLicense_InitiateAssociation_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteLicense_InitiateAssociation_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteLicense_InitiateAssociation_Request)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&site_steamid_, 0, reinterpret_cast<char*>(&client_local_ip_) -
      reinterpret_cast<char*>(&site_steamid_) + sizeof(client_local_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_InitiateAssociation_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteLicense_InitiateAssociation_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 site_steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_site_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &site_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 site_local_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_site_local_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &site_local_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_local_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_client_local_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_local_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteLicense_InitiateAssociation_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteLicense_InitiateAssociation_Request)
  return false;
#undef DO_
}

void CSiteLicense_InitiateAssociation_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteLicense_InitiateAssociation_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 site_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->site_steamid(), output);
  }

  // optional fixed32 site_local_ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->site_local_ip(), output);
  }

  // optional fixed32 client_local_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->client_local_ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteLicense_InitiateAssociation_Request)
}

::google::protobuf::uint8* CSiteLicense_InitiateAssociation_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteLicense_InitiateAssociation_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 site_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->site_steamid(), target);
  }

  // optional fixed32 site_local_ip = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->site_local_ip(), target);
  }

  // optional fixed32 client_local_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->client_local_ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteLicense_InitiateAssociation_Request)
  return target;
}

size_t CSiteLicense_InitiateAssociation_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteLicense_InitiateAssociation_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 site_steamid = 1;
    if (has_site_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed32 site_local_ip = 2;
    if (has_site_local_ip()) {
      total_size += 1 + 4;
    }

    // optional fixed32 client_local_ip = 3;
    if (has_client_local_ip()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteLicense_InitiateAssociation_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteLicense_InitiateAssociation_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_InitiateAssociation_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_InitiateAssociation_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteLicense_InitiateAssociation_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteLicense_InitiateAssociation_Request)
    MergeFrom(*source);
  }
}

void CSiteLicense_InitiateAssociation_Request::MergeFrom(const CSiteLicense_InitiateAssociation_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteLicense_InitiateAssociation_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      site_steamid_ = from.site_steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      site_local_ip_ = from.site_local_ip_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_local_ip_ = from.client_local_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSiteLicense_InitiateAssociation_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteLicense_InitiateAssociation_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_InitiateAssociation_Request::CopyFrom(const CSiteLicense_InitiateAssociation_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteLicense_InitiateAssociation_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_InitiateAssociation_Request::IsInitialized() const {
  return true;
}

void CSiteLicense_InitiateAssociation_Request::Swap(CSiteLicense_InitiateAssociation_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_InitiateAssociation_Request::InternalSwap(CSiteLicense_InitiateAssociation_Request* other) {
  std::swap(site_steamid_, other->site_steamid_);
  std::swap(site_local_ip_, other->site_local_ip_);
  std::swap(client_local_ip_, other->client_local_ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteLicense_InitiateAssociation_Request::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteLicense_InitiateAssociation_Request

// optional fixed64 site_steamid = 1;
bool CSiteLicense_InitiateAssociation_Request::has_site_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSiteLicense_InitiateAssociation_Request::set_has_site_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CSiteLicense_InitiateAssociation_Request::clear_has_site_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSiteLicense_InitiateAssociation_Request::clear_site_steamid() {
  site_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_site_steamid();
}
::google::protobuf::uint64 CSiteLicense_InitiateAssociation_Request::site_steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_InitiateAssociation_Request.site_steamid)
  return site_steamid_;
}
void CSiteLicense_InitiateAssociation_Request::set_site_steamid(::google::protobuf::uint64 value) {
  set_has_site_steamid();
  site_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_InitiateAssociation_Request.site_steamid)
}

// optional fixed32 site_local_ip = 2;
bool CSiteLicense_InitiateAssociation_Request::has_site_local_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSiteLicense_InitiateAssociation_Request::set_has_site_local_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void CSiteLicense_InitiateAssociation_Request::clear_has_site_local_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSiteLicense_InitiateAssociation_Request::clear_site_local_ip() {
  site_local_ip_ = 0u;
  clear_has_site_local_ip();
}
::google::protobuf::uint32 CSiteLicense_InitiateAssociation_Request::site_local_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_InitiateAssociation_Request.site_local_ip)
  return site_local_ip_;
}
void CSiteLicense_InitiateAssociation_Request::set_site_local_ip(::google::protobuf::uint32 value) {
  set_has_site_local_ip();
  site_local_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_InitiateAssociation_Request.site_local_ip)
}

// optional fixed32 client_local_ip = 3;
bool CSiteLicense_InitiateAssociation_Request::has_client_local_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSiteLicense_InitiateAssociation_Request::set_has_client_local_ip() {
  _has_bits_[0] |= 0x00000004u;
}
void CSiteLicense_InitiateAssociation_Request::clear_has_client_local_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSiteLicense_InitiateAssociation_Request::clear_client_local_ip() {
  client_local_ip_ = 0u;
  clear_has_client_local_ip();
}
::google::protobuf::uint32 CSiteLicense_InitiateAssociation_Request::client_local_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_InitiateAssociation_Request.client_local_ip)
  return client_local_ip_;
}
void CSiteLicense_InitiateAssociation_Request::set_client_local_ip(::google::protobuf::uint32 value) {
  set_has_client_local_ip();
  client_local_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_InitiateAssociation_Request.client_local_ip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_InitiateAssociation_Response::kConnectionKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_InitiateAssociation_Response::CSiteLicense_InitiateAssociation_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteLicense_InitiateAssociation_Response)
}
CSiteLicense_InitiateAssociation_Response::CSiteLicense_InitiateAssociation_Response(const CSiteLicense_InitiateAssociation_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connection_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_connection_key()) {
    connection_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_key_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteLicense_InitiateAssociation_Response)
}

void CSiteLicense_InitiateAssociation_Response::SharedCtor() {
  _cached_size_ = 0;
  connection_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CSiteLicense_InitiateAssociation_Response::~CSiteLicense_InitiateAssociation_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteLicense_InitiateAssociation_Response)
  SharedDtor();
}

void CSiteLicense_InitiateAssociation_Response::SharedDtor() {
  connection_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSiteLicense_InitiateAssociation_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteLicense_InitiateAssociation_Response::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_InitiateAssociation_Response& CSiteLicense_InitiateAssociation_Response::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteLicense_InitiateAssociation_Response* CSiteLicense_InitiateAssociation_Response::New(::google::protobuf::Arena* arena) const {
  CSiteLicense_InitiateAssociation_Response* n = new CSiteLicense_InitiateAssociation_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteLicense_InitiateAssociation_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteLicense_InitiateAssociation_Response)
  if (has_connection_key()) {
    GOOGLE_DCHECK(!connection_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*connection_key_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_InitiateAssociation_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteLicense_InitiateAssociation_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes connection_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_connection_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteLicense_InitiateAssociation_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteLicense_InitiateAssociation_Response)
  return false;
#undef DO_
}

void CSiteLicense_InitiateAssociation_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteLicense_InitiateAssociation_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes connection_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->connection_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteLicense_InitiateAssociation_Response)
}

::google::protobuf::uint8* CSiteLicense_InitiateAssociation_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteLicense_InitiateAssociation_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes connection_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->connection_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteLicense_InitiateAssociation_Response)
  return target;
}

size_t CSiteLicense_InitiateAssociation_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteLicense_InitiateAssociation_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bytes connection_key = 1;
  if (has_connection_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->connection_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteLicense_InitiateAssociation_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteLicense_InitiateAssociation_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_InitiateAssociation_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_InitiateAssociation_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteLicense_InitiateAssociation_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteLicense_InitiateAssociation_Response)
    MergeFrom(*source);
  }
}

void CSiteLicense_InitiateAssociation_Response::MergeFrom(const CSiteLicense_InitiateAssociation_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteLicense_InitiateAssociation_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_connection_key()) {
    set_has_connection_key();
    connection_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_key_);
  }
}

void CSiteLicense_InitiateAssociation_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteLicense_InitiateAssociation_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_InitiateAssociation_Response::CopyFrom(const CSiteLicense_InitiateAssociation_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteLicense_InitiateAssociation_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_InitiateAssociation_Response::IsInitialized() const {
  return true;
}

void CSiteLicense_InitiateAssociation_Response::Swap(CSiteLicense_InitiateAssociation_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_InitiateAssociation_Response::InternalSwap(CSiteLicense_InitiateAssociation_Response* other) {
  connection_key_.Swap(&other->connection_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteLicense_InitiateAssociation_Response::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteLicense_InitiateAssociation_Response

// optional bytes connection_key = 1;
bool CSiteLicense_InitiateAssociation_Response::has_connection_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSiteLicense_InitiateAssociation_Response::set_has_connection_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CSiteLicense_InitiateAssociation_Response::clear_has_connection_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSiteLicense_InitiateAssociation_Response::clear_connection_key() {
  connection_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_connection_key();
}
const ::std::string& CSiteLicense_InitiateAssociation_Response::connection_key() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_InitiateAssociation_Response.connection_key)
  return connection_key_.GetNoArena();
}
void CSiteLicense_InitiateAssociation_Response::set_connection_key(const ::std::string& value) {
  set_has_connection_key();
  connection_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_InitiateAssociation_Response.connection_key)
}
#if LANG_CXX11
void CSiteLicense_InitiateAssociation_Response::set_connection_key(::std::string&& value) {
  set_has_connection_key();
  connection_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CSiteLicense_InitiateAssociation_Response.connection_key)
}
#endif
void CSiteLicense_InitiateAssociation_Response::set_connection_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_connection_key();
  connection_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CSiteLicense_InitiateAssociation_Response.connection_key)
}
void CSiteLicense_InitiateAssociation_Response::set_connection_key(const void* value, size_t size) {
  set_has_connection_key();
  connection_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CSiteLicense_InitiateAssociation_Response.connection_key)
}
::std::string* CSiteLicense_InitiateAssociation_Response::mutable_connection_key() {
  set_has_connection_key();
  // @@protoc_insertion_point(field_mutable:proto.steam.CSiteLicense_InitiateAssociation_Response.connection_key)
  return connection_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSiteLicense_InitiateAssociation_Response::release_connection_key() {
  // @@protoc_insertion_point(field_release:proto.steam.CSiteLicense_InitiateAssociation_Response.connection_key)
  clear_has_connection_key();
  return connection_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSiteLicense_InitiateAssociation_Response::set_allocated_connection_key(::std::string* connection_key) {
  if (connection_key != NULL) {
    set_has_connection_key();
  } else {
    clear_has_connection_key();
  }
  connection_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connection_key);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CSiteLicense_InitiateAssociation_Response.connection_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_ClientSiteAssociation_Request::kSiteIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_ClientSiteAssociation_Request::CSiteLicense_ClientSiteAssociation_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteLicense_ClientSiteAssociation_Request)
}
CSiteLicense_ClientSiteAssociation_Request::CSiteLicense_ClientSiteAssociation_Request(const CSiteLicense_ClientSiteAssociation_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  site_id_ = from.site_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteLicense_ClientSiteAssociation_Request)
}

void CSiteLicense_ClientSiteAssociation_Request::SharedCtor() {
  _cached_size_ = 0;
  site_id_ = GOOGLE_ULONGLONG(0);
}

CSiteLicense_ClientSiteAssociation_Request::~CSiteLicense_ClientSiteAssociation_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteLicense_ClientSiteAssociation_Request)
  SharedDtor();
}

void CSiteLicense_ClientSiteAssociation_Request::SharedDtor() {
}

void CSiteLicense_ClientSiteAssociation_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteLicense_ClientSiteAssociation_Request::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_ClientSiteAssociation_Request& CSiteLicense_ClientSiteAssociation_Request::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteLicense_ClientSiteAssociation_Request* CSiteLicense_ClientSiteAssociation_Request::New(::google::protobuf::Arena* arena) const {
  CSiteLicense_ClientSiteAssociation_Request* n = new CSiteLicense_ClientSiteAssociation_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteLicense_ClientSiteAssociation_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteLicense_ClientSiteAssociation_Request)
  site_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_ClientSiteAssociation_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteLicense_ClientSiteAssociation_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 site_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_site_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &site_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteLicense_ClientSiteAssociation_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteLicense_ClientSiteAssociation_Request)
  return false;
#undef DO_
}

void CSiteLicense_ClientSiteAssociation_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteLicense_ClientSiteAssociation_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 site_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->site_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteLicense_ClientSiteAssociation_Request)
}

::google::protobuf::uint8* CSiteLicense_ClientSiteAssociation_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteLicense_ClientSiteAssociation_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 site_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->site_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteLicense_ClientSiteAssociation_Request)
  return target;
}

size_t CSiteLicense_ClientSiteAssociation_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteLicense_ClientSiteAssociation_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint64 site_id = 1;
  if (has_site_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->site_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteLicense_ClientSiteAssociation_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteLicense_ClientSiteAssociation_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_ClientSiteAssociation_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_ClientSiteAssociation_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteLicense_ClientSiteAssociation_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteLicense_ClientSiteAssociation_Request)
    MergeFrom(*source);
  }
}

void CSiteLicense_ClientSiteAssociation_Request::MergeFrom(const CSiteLicense_ClientSiteAssociation_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteLicense_ClientSiteAssociation_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_site_id()) {
    set_site_id(from.site_id());
  }
}

void CSiteLicense_ClientSiteAssociation_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteLicense_ClientSiteAssociation_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_ClientSiteAssociation_Request::CopyFrom(const CSiteLicense_ClientSiteAssociation_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteLicense_ClientSiteAssociation_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_ClientSiteAssociation_Request::IsInitialized() const {
  return true;
}

void CSiteLicense_ClientSiteAssociation_Request::Swap(CSiteLicense_ClientSiteAssociation_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_ClientSiteAssociation_Request::InternalSwap(CSiteLicense_ClientSiteAssociation_Request* other) {
  std::swap(site_id_, other->site_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteLicense_ClientSiteAssociation_Request::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteLicense_ClientSiteAssociation_Request

// optional uint64 site_id = 1;
bool CSiteLicense_ClientSiteAssociation_Request::has_site_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSiteLicense_ClientSiteAssociation_Request::set_has_site_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CSiteLicense_ClientSiteAssociation_Request::clear_has_site_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSiteLicense_ClientSiteAssociation_Request::clear_site_id() {
  site_id_ = GOOGLE_ULONGLONG(0);
  clear_has_site_id();
}
::google::protobuf::uint64 CSiteLicense_ClientSiteAssociation_Request::site_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_ClientSiteAssociation_Request.site_id)
  return site_id_;
}
void CSiteLicense_ClientSiteAssociation_Request::set_site_id(::google::protobuf::uint64 value) {
  set_has_site_id();
  site_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_ClientSiteAssociation_Request.site_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_ClientSiteAssociation_Response::kSiteNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_ClientSiteAssociation_Response::CSiteLicense_ClientSiteAssociation_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteLicense_ClientSiteAssociation_Response)
}
CSiteLicense_ClientSiteAssociation_Response::CSiteLicense_ClientSiteAssociation_Response(const CSiteLicense_ClientSiteAssociation_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  site_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_site_name()) {
    site_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_name_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteLicense_ClientSiteAssociation_Response)
}

void CSiteLicense_ClientSiteAssociation_Response::SharedCtor() {
  _cached_size_ = 0;
  site_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CSiteLicense_ClientSiteAssociation_Response::~CSiteLicense_ClientSiteAssociation_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteLicense_ClientSiteAssociation_Response)
  SharedDtor();
}

void CSiteLicense_ClientSiteAssociation_Response::SharedDtor() {
  site_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSiteLicense_ClientSiteAssociation_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteLicense_ClientSiteAssociation_Response::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_ClientSiteAssociation_Response& CSiteLicense_ClientSiteAssociation_Response::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteLicense_ClientSiteAssociation_Response* CSiteLicense_ClientSiteAssociation_Response::New(::google::protobuf::Arena* arena) const {
  CSiteLicense_ClientSiteAssociation_Response* n = new CSiteLicense_ClientSiteAssociation_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteLicense_ClientSiteAssociation_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteLicense_ClientSiteAssociation_Response)
  if (has_site_name()) {
    GOOGLE_DCHECK(!site_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*site_name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_ClientSiteAssociation_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteLicense_ClientSiteAssociation_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string site_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_site_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->site_name().data(), this->site_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CSiteLicense_ClientSiteAssociation_Response.site_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteLicense_ClientSiteAssociation_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteLicense_ClientSiteAssociation_Response)
  return false;
#undef DO_
}

void CSiteLicense_ClientSiteAssociation_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteLicense_ClientSiteAssociation_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string site_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site_name().data(), this->site_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CSiteLicense_ClientSiteAssociation_Response.site_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->site_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteLicense_ClientSiteAssociation_Response)
}

::google::protobuf::uint8* CSiteLicense_ClientSiteAssociation_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteLicense_ClientSiteAssociation_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string site_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site_name().data(), this->site_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CSiteLicense_ClientSiteAssociation_Response.site_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->site_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteLicense_ClientSiteAssociation_Response)
  return target;
}

size_t CSiteLicense_ClientSiteAssociation_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteLicense_ClientSiteAssociation_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string site_name = 1;
  if (has_site_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->site_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteLicense_ClientSiteAssociation_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteLicense_ClientSiteAssociation_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_ClientSiteAssociation_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_ClientSiteAssociation_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteLicense_ClientSiteAssociation_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteLicense_ClientSiteAssociation_Response)
    MergeFrom(*source);
  }
}

void CSiteLicense_ClientSiteAssociation_Response::MergeFrom(const CSiteLicense_ClientSiteAssociation_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteLicense_ClientSiteAssociation_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_site_name()) {
    set_has_site_name();
    site_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_name_);
  }
}

void CSiteLicense_ClientSiteAssociation_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteLicense_ClientSiteAssociation_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_ClientSiteAssociation_Response::CopyFrom(const CSiteLicense_ClientSiteAssociation_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteLicense_ClientSiteAssociation_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_ClientSiteAssociation_Response::IsInitialized() const {
  return true;
}

void CSiteLicense_ClientSiteAssociation_Response::Swap(CSiteLicense_ClientSiteAssociation_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_ClientSiteAssociation_Response::InternalSwap(CSiteLicense_ClientSiteAssociation_Response* other) {
  site_name_.Swap(&other->site_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteLicense_ClientSiteAssociation_Response::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteLicense_ClientSiteAssociation_Response

// optional string site_name = 1;
bool CSiteLicense_ClientSiteAssociation_Response::has_site_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSiteLicense_ClientSiteAssociation_Response::set_has_site_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CSiteLicense_ClientSiteAssociation_Response::clear_has_site_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSiteLicense_ClientSiteAssociation_Response::clear_site_name() {
  site_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_site_name();
}
const ::std::string& CSiteLicense_ClientSiteAssociation_Response::site_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_ClientSiteAssociation_Response.site_name)
  return site_name_.GetNoArena();
}
void CSiteLicense_ClientSiteAssociation_Response::set_site_name(const ::std::string& value) {
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_ClientSiteAssociation_Response.site_name)
}
#if LANG_CXX11
void CSiteLicense_ClientSiteAssociation_Response::set_site_name(::std::string&& value) {
  set_has_site_name();
  site_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CSiteLicense_ClientSiteAssociation_Response.site_name)
}
#endif
void CSiteLicense_ClientSiteAssociation_Response::set_site_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CSiteLicense_ClientSiteAssociation_Response.site_name)
}
void CSiteLicense_ClientSiteAssociation_Response::set_site_name(const char* value, size_t size) {
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CSiteLicense_ClientSiteAssociation_Response.site_name)
}
::std::string* CSiteLicense_ClientSiteAssociation_Response::mutable_site_name() {
  set_has_site_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CSiteLicense_ClientSiteAssociation_Response.site_name)
  return site_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSiteLicense_ClientSiteAssociation_Response::release_site_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CSiteLicense_ClientSiteAssociation_Response.site_name)
  clear_has_site_name();
  return site_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSiteLicense_ClientSiteAssociation_Response::set_allocated_site_name(::std::string* site_name) {
  if (site_name != NULL) {
    set_has_site_name();
  } else {
    clear_has_site_name();
  }
  site_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), site_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CSiteLicense_ClientSiteAssociation_Response.site_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_ClientSiteLicenseSeatCheckout_Request::kPackageidFieldNumber;
const int CSiteLicense_ClientSiteLicenseSeatCheckout_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_ClientSiteLicenseSeatCheckout_Request::CSiteLicense_ClientSiteLicenseSeatCheckout_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Request)
}
CSiteLicense_ClientSiteLicenseSeatCheckout_Request::CSiteLicense_ClientSiteLicenseSeatCheckout_Request(const CSiteLicense_ClientSiteLicenseSeatCheckout_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&packageid_, &from.packageid_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&packageid_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Request)
}

void CSiteLicense_ClientSiteLicenseSeatCheckout_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&packageid_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&packageid_) + sizeof(appid_));
}

CSiteLicense_ClientSiteLicenseSeatCheckout_Request::~CSiteLicense_ClientSiteLicenseSeatCheckout_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Request)
  SharedDtor();
}

void CSiteLicense_ClientSiteLicenseSeatCheckout_Request::SharedDtor() {
}

void CSiteLicense_ClientSiteLicenseSeatCheckout_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteLicense_ClientSiteLicenseSeatCheckout_Request::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_ClientSiteLicenseSeatCheckout_Request& CSiteLicense_ClientSiteLicenseSeatCheckout_Request::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteLicense_ClientSiteLicenseSeatCheckout_Request* CSiteLicense_ClientSiteLicenseSeatCheckout_Request::New(::google::protobuf::Arena* arena) const {
  CSiteLicense_ClientSiteLicenseSeatCheckout_Request* n = new CSiteLicense_ClientSiteLicenseSeatCheckout_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteLicense_ClientSiteLicenseSeatCheckout_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Request)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&packageid_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&packageid_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_ClientSiteLicenseSeatCheckout_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 packageid = 1 [(.proto.steam.description) = "Package ID that client wants to check out"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_packageid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2 [(.proto.steam.description) = "App ID that client wants to play"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Request)
  return false;
#undef DO_
}

void CSiteLicense_ClientSiteLicenseSeatCheckout_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1 [(.proto.steam.description) = "Package ID that client wants to check out"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packageid(), output);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "App ID that client wants to play"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Request)
}

::google::protobuf::uint8* CSiteLicense_ClientSiteLicenseSeatCheckout_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1 [(.proto.steam.description) = "Package ID that client wants to check out"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->packageid(), target);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "App ID that client wants to play"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Request)
  return target;
}

size_t CSiteLicense_ClientSiteLicenseSeatCheckout_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 packageid = 1 [(.proto.steam.description) = "Package ID that client wants to check out"];
    if (has_packageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packageid());
    }

    // optional uint32 appid = 2 [(.proto.steam.description) = "App ID that client wants to play"];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteLicense_ClientSiteLicenseSeatCheckout_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_ClientSiteLicenseSeatCheckout_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_ClientSiteLicenseSeatCheckout_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Request)
    MergeFrom(*source);
  }
}

void CSiteLicense_ClientSiteLicenseSeatCheckout_Request::MergeFrom(const CSiteLicense_ClientSiteLicenseSeatCheckout_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSiteLicense_ClientSiteLicenseSeatCheckout_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_ClientSiteLicenseSeatCheckout_Request::CopyFrom(const CSiteLicense_ClientSiteLicenseSeatCheckout_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_ClientSiteLicenseSeatCheckout_Request::IsInitialized() const {
  return true;
}

void CSiteLicense_ClientSiteLicenseSeatCheckout_Request::Swap(CSiteLicense_ClientSiteLicenseSeatCheckout_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_ClientSiteLicenseSeatCheckout_Request::InternalSwap(CSiteLicense_ClientSiteLicenseSeatCheckout_Request* other) {
  std::swap(packageid_, other->packageid_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteLicense_ClientSiteLicenseSeatCheckout_Request::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteLicense_ClientSiteLicenseSeatCheckout_Request

// optional uint32 packageid = 1 [(.proto.steam.description) = "Package ID that client wants to check out"];
bool CSiteLicense_ClientSiteLicenseSeatCheckout_Request::has_packageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSiteLicense_ClientSiteLicenseSeatCheckout_Request::set_has_packageid() {
  _has_bits_[0] |= 0x00000001u;
}
void CSiteLicense_ClientSiteLicenseSeatCheckout_Request::clear_has_packageid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSiteLicense_ClientSiteLicenseSeatCheckout_Request::clear_packageid() {
  packageid_ = 0u;
  clear_has_packageid();
}
::google::protobuf::uint32 CSiteLicense_ClientSiteLicenseSeatCheckout_Request::packageid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Request.packageid)
  return packageid_;
}
void CSiteLicense_ClientSiteLicenseSeatCheckout_Request::set_packageid(::google::protobuf::uint32 value) {
  set_has_packageid();
  packageid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Request.packageid)
}

// optional uint32 appid = 2 [(.proto.steam.description) = "App ID that client wants to play"];
bool CSiteLicense_ClientSiteLicenseSeatCheckout_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSiteLicense_ClientSiteLicenseSeatCheckout_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CSiteLicense_ClientSiteLicenseSeatCheckout_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSiteLicense_ClientSiteLicenseSeatCheckout_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CSiteLicense_ClientSiteLicenseSeatCheckout_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Request.appid)
  return appid_;
}
void CSiteLicense_ClientSiteLicenseSeatCheckout_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Request.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_ClientSiteLicenseSeatCheckout_Response::CSiteLicense_ClientSiteLicenseSeatCheckout_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Response)
}
CSiteLicense_ClientSiteLicenseSeatCheckout_Response::CSiteLicense_ClientSiteLicenseSeatCheckout_Response(const CSiteLicense_ClientSiteLicenseSeatCheckout_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Response)
}

void CSiteLicense_ClientSiteLicenseSeatCheckout_Response::SharedCtor() {
  _cached_size_ = 0;
}

CSiteLicense_ClientSiteLicenseSeatCheckout_Response::~CSiteLicense_ClientSiteLicenseSeatCheckout_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Response)
  SharedDtor();
}

void CSiteLicense_ClientSiteLicenseSeatCheckout_Response::SharedDtor() {
}

void CSiteLicense_ClientSiteLicenseSeatCheckout_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteLicense_ClientSiteLicenseSeatCheckout_Response::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_ClientSiteLicenseSeatCheckout_Response& CSiteLicense_ClientSiteLicenseSeatCheckout_Response::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteLicense_ClientSiteLicenseSeatCheckout_Response* CSiteLicense_ClientSiteLicenseSeatCheckout_Response::New(::google::protobuf::Arena* arena) const {
  CSiteLicense_ClientSiteLicenseSeatCheckout_Response* n = new CSiteLicense_ClientSiteLicenseSeatCheckout_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteLicense_ClientSiteLicenseSeatCheckout_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_ClientSiteLicenseSeatCheckout_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Response)
  return false;
#undef DO_
}

void CSiteLicense_ClientSiteLicenseSeatCheckout_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Response)
}

::google::protobuf::uint8* CSiteLicense_ClientSiteLicenseSeatCheckout_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Response)
  return target;
}

size_t CSiteLicense_ClientSiteLicenseSeatCheckout_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteLicense_ClientSiteLicenseSeatCheckout_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_ClientSiteLicenseSeatCheckout_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_ClientSiteLicenseSeatCheckout_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Response)
    MergeFrom(*source);
  }
}

void CSiteLicense_ClientSiteLicenseSeatCheckout_Response::MergeFrom(const CSiteLicense_ClientSiteLicenseSeatCheckout_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSiteLicense_ClientSiteLicenseSeatCheckout_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_ClientSiteLicenseSeatCheckout_Response::CopyFrom(const CSiteLicense_ClientSiteLicenseSeatCheckout_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteLicense_ClientSiteLicenseSeatCheckout_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_ClientSiteLicenseSeatCheckout_Response::IsInitialized() const {
  return true;
}

void CSiteLicense_ClientSiteLicenseSeatCheckout_Response::Swap(CSiteLicense_ClientSiteLicenseSeatCheckout_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_ClientSiteLicenseSeatCheckout_Response::InternalSwap(CSiteLicense_ClientSiteLicenseSeatCheckout_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteLicense_ClientSiteLicenseSeatCheckout_Response::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteLicense_ClientSiteLicenseSeatCheckout_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_LCSAuthenticate_Request::CSiteLicense_LCSAuthenticate_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteLicense_LCSAuthenticate_Request)
}
CSiteLicense_LCSAuthenticate_Request::CSiteLicense_LCSAuthenticate_Request(const CSiteLicense_LCSAuthenticate_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteLicense_LCSAuthenticate_Request)
}

void CSiteLicense_LCSAuthenticate_Request::SharedCtor() {
  _cached_size_ = 0;
}

CSiteLicense_LCSAuthenticate_Request::~CSiteLicense_LCSAuthenticate_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  SharedDtor();
}

void CSiteLicense_LCSAuthenticate_Request::SharedDtor() {
}

void CSiteLicense_LCSAuthenticate_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteLicense_LCSAuthenticate_Request::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_LCSAuthenticate_Request& CSiteLicense_LCSAuthenticate_Request::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteLicense_LCSAuthenticate_Request* CSiteLicense_LCSAuthenticate_Request::New(::google::protobuf::Arena* arena) const {
  CSiteLicense_LCSAuthenticate_Request* n = new CSiteLicense_LCSAuthenticate_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteLicense_LCSAuthenticate_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_LCSAuthenticate_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  return false;
#undef DO_
}

void CSiteLicense_LCSAuthenticate_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteLicense_LCSAuthenticate_Request)
}

::google::protobuf::uint8* CSiteLicense_LCSAuthenticate_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  return target;
}

size_t CSiteLicense_LCSAuthenticate_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteLicense_LCSAuthenticate_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_LCSAuthenticate_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_LCSAuthenticate_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteLicense_LCSAuthenticate_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteLicense_LCSAuthenticate_Request)
    MergeFrom(*source);
  }
}

void CSiteLicense_LCSAuthenticate_Request::MergeFrom(const CSiteLicense_LCSAuthenticate_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSiteLicense_LCSAuthenticate_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_LCSAuthenticate_Request::CopyFrom(const CSiteLicense_LCSAuthenticate_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_LCSAuthenticate_Request::IsInitialized() const {
  return true;
}

void CSiteLicense_LCSAuthenticate_Request::Swap(CSiteLicense_LCSAuthenticate_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_LCSAuthenticate_Request::InternalSwap(CSiteLicense_LCSAuthenticate_Request* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteLicense_LCSAuthenticate_Request::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteLicense_LCSAuthenticate_Request

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_LCSAuthenticate_Response::kSiteNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_LCSAuthenticate_Response::CSiteLicense_LCSAuthenticate_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteLicense_LCSAuthenticate_Response)
}
CSiteLicense_LCSAuthenticate_Response::CSiteLicense_LCSAuthenticate_Response(const CSiteLicense_LCSAuthenticate_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  site_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_site_name()) {
    site_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_name_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteLicense_LCSAuthenticate_Response)
}

void CSiteLicense_LCSAuthenticate_Response::SharedCtor() {
  _cached_size_ = 0;
  site_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CSiteLicense_LCSAuthenticate_Response::~CSiteLicense_LCSAuthenticate_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  SharedDtor();
}

void CSiteLicense_LCSAuthenticate_Response::SharedDtor() {
  site_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSiteLicense_LCSAuthenticate_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteLicense_LCSAuthenticate_Response::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_LCSAuthenticate_Response& CSiteLicense_LCSAuthenticate_Response::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteLicense_LCSAuthenticate_Response* CSiteLicense_LCSAuthenticate_Response::New(::google::protobuf::Arena* arena) const {
  CSiteLicense_LCSAuthenticate_Response* n = new CSiteLicense_LCSAuthenticate_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteLicense_LCSAuthenticate_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  if (has_site_name()) {
    GOOGLE_DCHECK(!site_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*site_name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_LCSAuthenticate_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string site_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_site_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->site_name().data(), this->site_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CSiteLicense_LCSAuthenticate_Response.site_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  return false;
#undef DO_
}

void CSiteLicense_LCSAuthenticate_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string site_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site_name().data(), this->site_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CSiteLicense_LCSAuthenticate_Response.site_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->site_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteLicense_LCSAuthenticate_Response)
}

::google::protobuf::uint8* CSiteLicense_LCSAuthenticate_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string site_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site_name().data(), this->site_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CSiteLicense_LCSAuthenticate_Response.site_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->site_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  return target;
}

size_t CSiteLicense_LCSAuthenticate_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string site_name = 1;
  if (has_site_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->site_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteLicense_LCSAuthenticate_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_LCSAuthenticate_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_LCSAuthenticate_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteLicense_LCSAuthenticate_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteLicense_LCSAuthenticate_Response)
    MergeFrom(*source);
  }
}

void CSiteLicense_LCSAuthenticate_Response::MergeFrom(const CSiteLicense_LCSAuthenticate_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_site_name()) {
    set_has_site_name();
    site_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_name_);
  }
}

void CSiteLicense_LCSAuthenticate_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_LCSAuthenticate_Response::CopyFrom(const CSiteLicense_LCSAuthenticate_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_LCSAuthenticate_Response::IsInitialized() const {
  return true;
}

void CSiteLicense_LCSAuthenticate_Response::Swap(CSiteLicense_LCSAuthenticate_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_LCSAuthenticate_Response::InternalSwap(CSiteLicense_LCSAuthenticate_Response* other) {
  site_name_.Swap(&other->site_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteLicense_LCSAuthenticate_Response::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteLicense_LCSAuthenticate_Response

// optional string site_name = 1;
bool CSiteLicense_LCSAuthenticate_Response::has_site_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSiteLicense_LCSAuthenticate_Response::set_has_site_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CSiteLicense_LCSAuthenticate_Response::clear_has_site_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSiteLicense_LCSAuthenticate_Response::clear_site_name() {
  site_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_site_name();
}
const ::std::string& CSiteLicense_LCSAuthenticate_Response::site_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_LCSAuthenticate_Response.site_name)
  return site_name_.GetNoArena();
}
void CSiteLicense_LCSAuthenticate_Response::set_site_name(const ::std::string& value) {
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_LCSAuthenticate_Response.site_name)
}
#if LANG_CXX11
void CSiteLicense_LCSAuthenticate_Response::set_site_name(::std::string&& value) {
  set_has_site_name();
  site_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CSiteLicense_LCSAuthenticate_Response.site_name)
}
#endif
void CSiteLicense_LCSAuthenticate_Response::set_site_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CSiteLicense_LCSAuthenticate_Response.site_name)
}
void CSiteLicense_LCSAuthenticate_Response::set_site_name(const char* value, size_t size) {
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CSiteLicense_LCSAuthenticate_Response.site_name)
}
::std::string* CSiteLicense_LCSAuthenticate_Response::mutable_site_name() {
  set_has_site_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CSiteLicense_LCSAuthenticate_Response.site_name)
  return site_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSiteLicense_LCSAuthenticate_Response::release_site_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CSiteLicense_LCSAuthenticate_Response.site_name)
  clear_has_site_name();
  return site_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSiteLicense_LCSAuthenticate_Response::set_allocated_site_name(::std::string* site_name) {
  if (site_name != NULL) {
    set_has_site_name();
  } else {
    clear_has_site_name();
  }
  site_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), site_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CSiteLicense_LCSAuthenticate_Response.site_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_LCSAssociateUser_Request::kSteamidFieldNumber;
const int CSiteLicense_LCSAssociateUser_Request::kSessionidFieldNumber;
const int CSiteLicense_LCSAssociateUser_Request::kLocalIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_LCSAssociateUser_Request::CSiteLicense_LCSAssociateUser_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteLicense_LCSAssociateUser_Request)
}
CSiteLicense_LCSAssociateUser_Request::CSiteLicense_LCSAssociateUser_Request(const CSiteLicense_LCSAssociateUser_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&local_ip_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(local_ip_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteLicense_LCSAssociateUser_Request)
}

void CSiteLicense_LCSAssociateUser_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&local_ip_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(local_ip_));
}

CSiteLicense_LCSAssociateUser_Request::~CSiteLicense_LCSAssociateUser_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  SharedDtor();
}

void CSiteLicense_LCSAssociateUser_Request::SharedDtor() {
}

void CSiteLicense_LCSAssociateUser_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteLicense_LCSAssociateUser_Request::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_LCSAssociateUser_Request& CSiteLicense_LCSAssociateUser_Request::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteLicense_LCSAssociateUser_Request* CSiteLicense_LCSAssociateUser_Request::New(::google::protobuf::Arena* arena) const {
  CSiteLicense_LCSAssociateUser_Request* n = new CSiteLicense_LCSAssociateUser_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteLicense_LCSAssociateUser_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&local_ip_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(local_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_LCSAssociateUser_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sessionid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 local_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_local_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &local_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  return false;
#undef DO_
}

void CSiteLicense_LCSAssociateUser_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 sessionid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sessionid(), output);
  }

  // optional fixed32 local_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->local_ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteLicense_LCSAssociateUser_Request)
}

::google::protobuf::uint8* CSiteLicense_LCSAssociateUser_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 sessionid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sessionid(), target);
  }

  // optional fixed32 local_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->local_ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  return target;
}

size_t CSiteLicense_LCSAssociateUser_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionid());
    }

    // optional fixed32 local_ip = 3;
    if (has_local_ip()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteLicense_LCSAssociateUser_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_LCSAssociateUser_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_LCSAssociateUser_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteLicense_LCSAssociateUser_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteLicense_LCSAssociateUser_Request)
    MergeFrom(*source);
  }
}

void CSiteLicense_LCSAssociateUser_Request::MergeFrom(const CSiteLicense_LCSAssociateUser_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000004u) {
      local_ip_ = from.local_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSiteLicense_LCSAssociateUser_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_LCSAssociateUser_Request::CopyFrom(const CSiteLicense_LCSAssociateUser_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_LCSAssociateUser_Request::IsInitialized() const {
  return true;
}

void CSiteLicense_LCSAssociateUser_Request::Swap(CSiteLicense_LCSAssociateUser_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_LCSAssociateUser_Request::InternalSwap(CSiteLicense_LCSAssociateUser_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(local_ip_, other->local_ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteLicense_LCSAssociateUser_Request::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteLicense_LCSAssociateUser_Request

// optional fixed64 steamid = 1;
bool CSiteLicense_LCSAssociateUser_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSiteLicense_LCSAssociateUser_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CSiteLicense_LCSAssociateUser_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSiteLicense_LCSAssociateUser_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CSiteLicense_LCSAssociateUser_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_LCSAssociateUser_Request.steamid)
  return steamid_;
}
void CSiteLicense_LCSAssociateUser_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_LCSAssociateUser_Request.steamid)
}

// optional uint32 sessionid = 2;
bool CSiteLicense_LCSAssociateUser_Request::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSiteLicense_LCSAssociateUser_Request::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void CSiteLicense_LCSAssociateUser_Request::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSiteLicense_LCSAssociateUser_Request::clear_sessionid() {
  sessionid_ = 0u;
  clear_has_sessionid();
}
::google::protobuf::uint32 CSiteLicense_LCSAssociateUser_Request::sessionid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_LCSAssociateUser_Request.sessionid)
  return sessionid_;
}
void CSiteLicense_LCSAssociateUser_Request::set_sessionid(::google::protobuf::uint32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_LCSAssociateUser_Request.sessionid)
}

// optional fixed32 local_ip = 3;
bool CSiteLicense_LCSAssociateUser_Request::has_local_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSiteLicense_LCSAssociateUser_Request::set_has_local_ip() {
  _has_bits_[0] |= 0x00000004u;
}
void CSiteLicense_LCSAssociateUser_Request::clear_has_local_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSiteLicense_LCSAssociateUser_Request::clear_local_ip() {
  local_ip_ = 0u;
  clear_has_local_ip();
}
::google::protobuf::uint32 CSiteLicense_LCSAssociateUser_Request::local_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_LCSAssociateUser_Request.local_ip)
  return local_ip_;
}
void CSiteLicense_LCSAssociateUser_Request::set_local_ip(::google::protobuf::uint32 value) {
  set_has_local_ip();
  local_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_LCSAssociateUser_Request.local_ip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_LCSAssociateUser_Response::CSiteLicense_LCSAssociateUser_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteLicense_LCSAssociateUser_Response)
}
CSiteLicense_LCSAssociateUser_Response::CSiteLicense_LCSAssociateUser_Response(const CSiteLicense_LCSAssociateUser_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteLicense_LCSAssociateUser_Response)
}

void CSiteLicense_LCSAssociateUser_Response::SharedCtor() {
  _cached_size_ = 0;
}

CSiteLicense_LCSAssociateUser_Response::~CSiteLicense_LCSAssociateUser_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  SharedDtor();
}

void CSiteLicense_LCSAssociateUser_Response::SharedDtor() {
}

void CSiteLicense_LCSAssociateUser_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteLicense_LCSAssociateUser_Response::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_LCSAssociateUser_Response& CSiteLicense_LCSAssociateUser_Response::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteLicense_LCSAssociateUser_Response* CSiteLicense_LCSAssociateUser_Response::New(::google::protobuf::Arena* arena) const {
  CSiteLicense_LCSAssociateUser_Response* n = new CSiteLicense_LCSAssociateUser_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteLicense_LCSAssociateUser_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_LCSAssociateUser_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  return false;
#undef DO_
}

void CSiteLicense_LCSAssociateUser_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteLicense_LCSAssociateUser_Response)
}

::google::protobuf::uint8* CSiteLicense_LCSAssociateUser_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  return target;
}

size_t CSiteLicense_LCSAssociateUser_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteLicense_LCSAssociateUser_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_LCSAssociateUser_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_LCSAssociateUser_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteLicense_LCSAssociateUser_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteLicense_LCSAssociateUser_Response)
    MergeFrom(*source);
  }
}

void CSiteLicense_LCSAssociateUser_Response::MergeFrom(const CSiteLicense_LCSAssociateUser_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSiteLicense_LCSAssociateUser_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_LCSAssociateUser_Response::CopyFrom(const CSiteLicense_LCSAssociateUser_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_LCSAssociateUser_Response::IsInitialized() const {
  return true;
}

void CSiteLicense_LCSAssociateUser_Response::Swap(CSiteLicense_LCSAssociateUser_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_LCSAssociateUser_Response::InternalSwap(CSiteLicense_LCSAssociateUser_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteLicense_LCSAssociateUser_Response::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteLicense_LCSAssociateUser_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_ClientSeatCheckout_Request::kSteamidFieldNumber;
const int CSiteLicense_ClientSeatCheckout_Request::kSessionidFieldNumber;
const int CSiteLicense_ClientSeatCheckout_Request::kPackageidFieldNumber;
const int CSiteLicense_ClientSeatCheckout_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_ClientSeatCheckout_Request::CSiteLicense_ClientSeatCheckout_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
}
CSiteLicense_ClientSeatCheckout_Request::CSiteLicense_ClientSeatCheckout_Request(const CSiteLicense_ClientSeatCheckout_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
}

void CSiteLicense_ClientSeatCheckout_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
}

CSiteLicense_ClientSeatCheckout_Request::~CSiteLicense_ClientSeatCheckout_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  SharedDtor();
}

void CSiteLicense_ClientSeatCheckout_Request::SharedDtor() {
}

void CSiteLicense_ClientSeatCheckout_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteLicense_ClientSeatCheckout_Request::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_ClientSeatCheckout_Request& CSiteLicense_ClientSeatCheckout_Request::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteLicense_ClientSeatCheckout_Request* CSiteLicense_ClientSeatCheckout_Request::New(::google::protobuf::Arena* arena) const {
  CSiteLicense_ClientSeatCheckout_Request* n = new CSiteLicense_ClientSeatCheckout_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteLicense_ClientSeatCheckout_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_ClientSeatCheckout_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sessionid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 packageid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_packageid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  return false;
#undef DO_
}

void CSiteLicense_ClientSeatCheckout_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional int32 sessionid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // optional uint32 packageid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->packageid(), output);
  }

  // optional uint32 appid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
}

::google::protobuf::uint8* CSiteLicense_ClientSeatCheckout_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional int32 sessionid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sessionid(), target);
  }

  // optional uint32 packageid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->packageid(), target);
  }

  // optional uint32 appid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  return target;
}

size_t CSiteLicense_ClientSeatCheckout_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional int32 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }

    // optional uint32 packageid = 3;
    if (has_packageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packageid());
    }

    // optional uint32 appid = 4;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteLicense_ClientSeatCheckout_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_ClientSeatCheckout_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_ClientSeatCheckout_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
    MergeFrom(*source);
  }
}

void CSiteLicense_ClientSeatCheckout_Request::MergeFrom(const CSiteLicense_ClientSeatCheckout_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000004u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSiteLicense_ClientSeatCheckout_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_ClientSeatCheckout_Request::CopyFrom(const CSiteLicense_ClientSeatCheckout_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_ClientSeatCheckout_Request::IsInitialized() const {
  return true;
}

void CSiteLicense_ClientSeatCheckout_Request::Swap(CSiteLicense_ClientSeatCheckout_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_ClientSeatCheckout_Request::InternalSwap(CSiteLicense_ClientSeatCheckout_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(packageid_, other->packageid_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteLicense_ClientSeatCheckout_Request::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteLicense_ClientSeatCheckout_Request

// optional fixed64 steamid = 1;
bool CSiteLicense_ClientSeatCheckout_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSiteLicense_ClientSeatCheckout_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CSiteLicense_ClientSeatCheckout_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSiteLicense_ClientSeatCheckout_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CSiteLicense_ClientSeatCheckout_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_ClientSeatCheckout_Request.steamid)
  return steamid_;
}
void CSiteLicense_ClientSeatCheckout_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_ClientSeatCheckout_Request.steamid)
}

// optional int32 sessionid = 2;
bool CSiteLicense_ClientSeatCheckout_Request::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSiteLicense_ClientSeatCheckout_Request::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void CSiteLicense_ClientSeatCheckout_Request::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSiteLicense_ClientSeatCheckout_Request::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
::google::protobuf::int32 CSiteLicense_ClientSeatCheckout_Request::sessionid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_ClientSeatCheckout_Request.sessionid)
  return sessionid_;
}
void CSiteLicense_ClientSeatCheckout_Request::set_sessionid(::google::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_ClientSeatCheckout_Request.sessionid)
}

// optional uint32 packageid = 3;
bool CSiteLicense_ClientSeatCheckout_Request::has_packageid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSiteLicense_ClientSeatCheckout_Request::set_has_packageid() {
  _has_bits_[0] |= 0x00000004u;
}
void CSiteLicense_ClientSeatCheckout_Request::clear_has_packageid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSiteLicense_ClientSeatCheckout_Request::clear_packageid() {
  packageid_ = 0u;
  clear_has_packageid();
}
::google::protobuf::uint32 CSiteLicense_ClientSeatCheckout_Request::packageid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_ClientSeatCheckout_Request.packageid)
  return packageid_;
}
void CSiteLicense_ClientSeatCheckout_Request::set_packageid(::google::protobuf::uint32 value) {
  set_has_packageid();
  packageid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_ClientSeatCheckout_Request.packageid)
}

// optional uint32 appid = 4;
bool CSiteLicense_ClientSeatCheckout_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSiteLicense_ClientSeatCheckout_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
void CSiteLicense_ClientSeatCheckout_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSiteLicense_ClientSeatCheckout_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CSiteLicense_ClientSeatCheckout_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_ClientSeatCheckout_Request.appid)
  return appid_;
}
void CSiteLicense_ClientSeatCheckout_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_ClientSeatCheckout_Request.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_ClientSeatCheckout_Response::CSiteLicense_ClientSeatCheckout_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
}
CSiteLicense_ClientSeatCheckout_Response::CSiteLicense_ClientSeatCheckout_Response(const CSiteLicense_ClientSeatCheckout_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
}

void CSiteLicense_ClientSeatCheckout_Response::SharedCtor() {
  _cached_size_ = 0;
}

CSiteLicense_ClientSeatCheckout_Response::~CSiteLicense_ClientSeatCheckout_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  SharedDtor();
}

void CSiteLicense_ClientSeatCheckout_Response::SharedDtor() {
}

void CSiteLicense_ClientSeatCheckout_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteLicense_ClientSeatCheckout_Response::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_ClientSeatCheckout_Response& CSiteLicense_ClientSeatCheckout_Response::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteLicense_ClientSeatCheckout_Response* CSiteLicense_ClientSeatCheckout_Response::New(::google::protobuf::Arena* arena) const {
  CSiteLicense_ClientSeatCheckout_Response* n = new CSiteLicense_ClientSeatCheckout_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteLicense_ClientSeatCheckout_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_ClientSeatCheckout_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  return false;
#undef DO_
}

void CSiteLicense_ClientSeatCheckout_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
}

::google::protobuf::uint8* CSiteLicense_ClientSeatCheckout_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  return target;
}

size_t CSiteLicense_ClientSeatCheckout_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteLicense_ClientSeatCheckout_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_ClientSeatCheckout_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_ClientSeatCheckout_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
    MergeFrom(*source);
  }
}

void CSiteLicense_ClientSeatCheckout_Response::MergeFrom(const CSiteLicense_ClientSeatCheckout_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSiteLicense_ClientSeatCheckout_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_ClientSeatCheckout_Response::CopyFrom(const CSiteLicense_ClientSeatCheckout_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_ClientSeatCheckout_Response::IsInitialized() const {
  return true;
}

void CSiteLicense_ClientSeatCheckout_Response::Swap(CSiteLicense_ClientSeatCheckout_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_ClientSeatCheckout_Response::InternalSwap(CSiteLicense_ClientSeatCheckout_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteLicense_ClientSeatCheckout_Response::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteLicense_ClientSeatCheckout_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

SiteManagerClient::~SiteManagerClient() {}

const ::google::protobuf::ServiceDescriptor* SiteManagerClient::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* SiteManagerClient::GetDescriptor() {
  return descriptor();
}

void SiteManagerClient::ExpectIncomingClient(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CSiteManagerClient_IncomingClient_Request*,
                         ::proto::steam::CSiteManagerClient_IncomingClient_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ExpectIncomingClient() not implemented.");
  done->Run();
}

void SiteManagerClient::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      ExpectIncomingClient(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CSiteManagerClient_IncomingClient_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CSiteManagerClient_IncomingClient_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& SiteManagerClient::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CSiteManagerClient_IncomingClient_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& SiteManagerClient::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CSiteManagerClient_IncomingClient_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

SiteManagerClient_Stub::SiteManagerClient_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SiteManagerClient_Stub::SiteManagerClient_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
SiteManagerClient_Stub::~SiteManagerClient_Stub() {
  if (owns_channel_) delete channel_;
}

void SiteManagerClient_Stub::ExpectIncomingClient(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CSiteManagerClient_IncomingClient_Request* request,
                              ::proto::steam::CSiteManagerClient_IncomingClient_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

SiteLicense::~SiteLicense() {}

const ::google::protobuf::ServiceDescriptor* SiteLicense::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_service_descriptors[1];
}

const ::google::protobuf::ServiceDescriptor* SiteLicense::GetDescriptor() {
  return descriptor();
}

void SiteLicense::InitiateAssociation(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CSiteLicense_InitiateAssociation_Request*,
                         ::proto::steam::CSiteLicense_InitiateAssociation_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method InitiateAssociation() not implemented.");
  done->Run();
}

void SiteLicense::ClientSiteAssociation(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CSiteLicense_ClientSiteAssociation_Request*,
                         ::proto::steam::CSiteLicense_ClientSiteAssociation_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientSiteAssociation() not implemented.");
  done->Run();
}

void SiteLicense::ClientSiteLicenseSeatCheckout(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CSiteLicense_ClientSiteLicenseSeatCheckout_Request*,
                         ::proto::steam::CSiteLicense_ClientSiteLicenseSeatCheckout_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientSiteLicenseSeatCheckout() not implemented.");
  done->Run();
}

void SiteLicense::LCSAuthenticate(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CSiteLicense_LCSAuthenticate_Request*,
                         ::proto::steam::CSiteLicense_LCSAuthenticate_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LCSAuthenticate() not implemented.");
  done->Run();
}

void SiteLicense::LCSAssociateUser(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CSiteLicense_LCSAssociateUser_Request*,
                         ::proto::steam::CSiteLicense_LCSAssociateUser_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LCSAssociateUser() not implemented.");
  done->Run();
}

void SiteLicense::ClientSeatCheckout(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CSiteLicense_ClientSeatCheckout_Request*,
                         ::proto::steam::CSiteLicense_ClientSeatCheckout_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientSeatCheckout() not implemented.");
  done->Run();
}

void SiteLicense::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_service_descriptors[1]);
  switch(method->index()) {
    case 0:
      InitiateAssociation(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CSiteLicense_InitiateAssociation_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CSiteLicense_InitiateAssociation_Response*>(response),
             done);
      break;
    case 1:
      ClientSiteAssociation(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CSiteLicense_ClientSiteAssociation_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CSiteLicense_ClientSiteAssociation_Response*>(response),
             done);
      break;
    case 2:
      ClientSiteLicenseSeatCheckout(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CSiteLicense_ClientSiteLicenseSeatCheckout_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CSiteLicense_ClientSiteLicenseSeatCheckout_Response*>(response),
             done);
      break;
    case 3:
      LCSAuthenticate(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CSiteLicense_LCSAuthenticate_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CSiteLicense_LCSAuthenticate_Response*>(response),
             done);
      break;
    case 4:
      LCSAssociateUser(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CSiteLicense_LCSAssociateUser_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CSiteLicense_LCSAssociateUser_Response*>(response),
             done);
      break;
    case 5:
      ClientSeatCheckout(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CSiteLicense_ClientSeatCheckout_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CSiteLicense_ClientSeatCheckout_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& SiteLicense::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CSiteLicense_InitiateAssociation_Request::default_instance();
    case 1:
      return ::proto::steam::CSiteLicense_ClientSiteAssociation_Request::default_instance();
    case 2:
      return ::proto::steam::CSiteLicense_ClientSiteLicenseSeatCheckout_Request::default_instance();
    case 3:
      return ::proto::steam::CSiteLicense_LCSAuthenticate_Request::default_instance();
    case 4:
      return ::proto::steam::CSiteLicense_LCSAssociateUser_Request::default_instance();
    case 5:
      return ::proto::steam::CSiteLicense_ClientSeatCheckout_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& SiteLicense::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CSiteLicense_InitiateAssociation_Response::default_instance();
    case 1:
      return ::proto::steam::CSiteLicense_ClientSiteAssociation_Response::default_instance();
    case 2:
      return ::proto::steam::CSiteLicense_ClientSiteLicenseSeatCheckout_Response::default_instance();
    case 3:
      return ::proto::steam::CSiteLicense_LCSAuthenticate_Response::default_instance();
    case 4:
      return ::proto::steam::CSiteLicense_LCSAssociateUser_Response::default_instance();
    case 5:
      return ::proto::steam::CSiteLicense_ClientSeatCheckout_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

SiteLicense_Stub::SiteLicense_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SiteLicense_Stub::SiteLicense_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
SiteLicense_Stub::~SiteLicense_Stub() {
  if (owns_channel_) delete channel_;
}

void SiteLicense_Stub::InitiateAssociation(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CSiteLicense_InitiateAssociation_Request* request,
                              ::proto::steam::CSiteLicense_InitiateAssociation_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void SiteLicense_Stub::ClientSiteAssociation(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CSiteLicense_ClientSiteAssociation_Request* request,
                              ::proto::steam::CSiteLicense_ClientSiteAssociation_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void SiteLicense_Stub::ClientSiteLicenseSeatCheckout(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CSiteLicense_ClientSiteLicenseSeatCheckout_Request* request,
                              ::proto::steam::CSiteLicense_ClientSiteLicenseSeatCheckout_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void SiteLicense_Stub::LCSAuthenticate(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CSiteLicense_LCSAuthenticate_Request* request,
                              ::proto::steam::CSiteLicense_LCSAuthenticate_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void SiteLicense_Stub::LCSAssociateUser(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CSiteLicense_LCSAssociateUser_Request* request,
                              ::proto::steam::CSiteLicense_LCSAssociateUser_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void SiteLicense_Stub::ClientSeatCheckout(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CSiteLicense_ClientSeatCheckout_Request* request,
                              ::proto::steam::CSiteLicense_ClientSeatCheckout_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
