// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_site_license.steamclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_site_license.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CSiteManagerClient_IncomingClient_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteManagerClient_IncomingClient_Request> {
} _CSiteManagerClient_IncomingClient_Request_default_instance_;
class CSiteManagerClient_IncomingClient_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteManagerClient_IncomingClient_Response> {
} _CSiteManagerClient_IncomingClient_Response_default_instance_;
class CSiteLicense_InitiateAssociation_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_InitiateAssociation_Request> {
} _CSiteLicense_InitiateAssociation_Request_default_instance_;
class CSiteLicense_InitiateAssociation_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_InitiateAssociation_Response> {
} _CSiteLicense_InitiateAssociation_Response_default_instance_;
class CSiteLicense_LCSAuthenticate_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_LCSAuthenticate_Request> {
} _CSiteLicense_LCSAuthenticate_Request_default_instance_;
class CSiteLicense_LCSAuthenticate_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_LCSAuthenticate_Response> {
} _CSiteLicense_LCSAuthenticate_Response_default_instance_;
class CSiteLicense_LCSAssociateUser_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_LCSAssociateUser_Request> {
} _CSiteLicense_LCSAssociateUser_Request_default_instance_;
class CSiteLicense_LCSAssociateUser_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_LCSAssociateUser_Response> {
} _CSiteLicense_LCSAssociateUser_Response_default_instance_;
class CSiteLicense_ClientSeatCheckout_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_ClientSeatCheckout_Request> {
} _CSiteLicense_ClientSeatCheckout_Request_default_instance_;
class CSiteLicense_ClientSeatCheckout_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_ClientSeatCheckout_Response> {
} _CSiteLicense_ClientSeatCheckout_Response_default_instance_;
class CSiteLicense_ClientGetAvailableSeats_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_ClientGetAvailableSeats_Request> {
} _CSiteLicense_ClientGetAvailableSeats_Request_default_instance_;
class CSiteLicense_ClientGetAvailableSeats_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSiteLicense_ClientGetAvailableSeats_Response> {
} _CSiteLicense_ClientGetAvailableSeats_Response_default_instance_;

namespace protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteManagerClient_IncomingClient_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteManagerClient_IncomingClient_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteManagerClient_IncomingClient_Request, site_instanceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteManagerClient_IncomingClient_Request, client_steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteManagerClient_IncomingClient_Request, client_local_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteManagerClient_IncomingClient_Request, connection_key_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteManagerClient_IncomingClient_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteManagerClient_IncomingClient_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_InitiateAssociation_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_InitiateAssociation_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_InitiateAssociation_Request, site_steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_InitiateAssociation_Request, site_instanceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_InitiateAssociation_Request, client_local_ip_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_InitiateAssociation_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_InitiateAssociation_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_InitiateAssociation_Response, connection_key_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAuthenticate_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAuthenticate_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAuthenticate_Request, instanceid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAuthenticate_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAuthenticate_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAuthenticate_Response, site_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAuthenticate_Response, site_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAuthenticate_Response, new_session_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAssociateUser_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAssociateUser_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAssociateUser_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAssociateUser_Request, local_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAssociateUser_Request, instanceid_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAssociateUser_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_LCSAssociateUser_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSeatCheckout_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSeatCheckout_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSeatCheckout_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSeatCheckout_Request, instanceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSeatCheckout_Request, appid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSeatCheckout_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientSeatCheckout_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientGetAvailableSeats_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientGetAvailableSeats_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientGetAvailableSeats_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientGetAvailableSeats_Request, instanceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientGetAvailableSeats_Request, appid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientGetAvailableSeats_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientGetAvailableSeats_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSiteLicense_ClientGetAvailableSeats_Response, available_seats_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(CSiteManagerClient_IncomingClient_Request)},
  { 13, 18, sizeof(CSiteManagerClient_IncomingClient_Response)},
  { 18, 26, sizeof(CSiteLicense_InitiateAssociation_Request)},
  { 29, 35, sizeof(CSiteLicense_InitiateAssociation_Response)},
  { 36, 42, sizeof(CSiteLicense_LCSAuthenticate_Request)},
  { 43, 51, sizeof(CSiteLicense_LCSAuthenticate_Response)},
  { 54, 62, sizeof(CSiteLicense_LCSAssociateUser_Request)},
  { 65, 70, sizeof(CSiteLicense_LCSAssociateUser_Response)},
  { 70, 78, sizeof(CSiteLicense_ClientSeatCheckout_Request)},
  { 81, 86, sizeof(CSiteLicense_ClientSeatCheckout_Response)},
  { 86, 94, sizeof(CSiteLicense_ClientGetAvailableSeats_Request)},
  { 97, 103, sizeof(CSiteLicense_ClientGetAvailableSeats_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteManagerClient_IncomingClient_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteManagerClient_IncomingClient_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteLicense_InitiateAssociation_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteLicense_InitiateAssociation_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteLicense_LCSAuthenticate_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteLicense_LCSAuthenticate_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteLicense_LCSAssociateUser_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteLicense_LCSAssociateUser_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteLicense_ClientSeatCheckout_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteLicense_ClientSeatCheckout_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteLicense_ClientGetAvailableSeats_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSiteLicense_ClientGetAvailableSeats_Response_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_site_license.steamclient.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

}  // namespace

void TableStruct::Shutdown() {
  _CSiteManagerClient_IncomingClient_Request_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CSiteManagerClient_IncomingClient_Response_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CSiteLicense_InitiateAssociation_Request_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CSiteLicense_InitiateAssociation_Response_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CSiteLicense_LCSAuthenticate_Request_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CSiteLicense_LCSAuthenticate_Response_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CSiteLicense_LCSAssociateUser_Request_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CSiteLicense_LCSAssociateUser_Response_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CSiteLicense_ClientSeatCheckout_Request_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CSiteLicense_ClientSeatCheckout_Response_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CSiteLicense_ClientGetAvailableSeats_Request_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CSiteLicense_ClientGetAvailableSeats_Response_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::InitDefaults();
  _CSiteManagerClient_IncomingClient_Request_default_instance_.DefaultConstruct();
  _CSiteManagerClient_IncomingClient_Response_default_instance_.DefaultConstruct();
  _CSiteLicense_InitiateAssociation_Request_default_instance_.DefaultConstruct();
  _CSiteLicense_InitiateAssociation_Response_default_instance_.DefaultConstruct();
  _CSiteLicense_LCSAuthenticate_Request_default_instance_.DefaultConstruct();
  _CSiteLicense_LCSAuthenticate_Response_default_instance_.DefaultConstruct();
  _CSiteLicense_LCSAssociateUser_Request_default_instance_.DefaultConstruct();
  _CSiteLicense_LCSAssociateUser_Response_default_instance_.DefaultConstruct();
  _CSiteLicense_ClientSeatCheckout_Request_default_instance_.DefaultConstruct();
  _CSiteLicense_ClientSeatCheckout_Response_default_instance_.DefaultConstruct();
  _CSiteLicense_ClientGetAvailableSeats_Request_default_instance_.DefaultConstruct();
  _CSiteLicense_ClientGetAvailableSeats_Response_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n,steammessages_site_license.steamclient"
      ".proto\022\013proto.steam\032,steammessages_unifi"
      "ed_base.steamclient.proto\"\215\001\n)CSiteManag"
      "erClient_IncomingClient_Request\022\027\n\017site_"
      "instanceid\030\001 \001(\006\022\026\n\016client_steamid\030\002 \001(\006"
      "\022\027\n\017client_local_ip\030\003 \001(\007\022\026\n\016connection_"
      "key\030\004 \001(\014\",\n*CSiteManagerClient_Incoming"
      "Client_Response\"r\n(CSiteLicense_Initiate"
      "Association_Request\022\024\n\014site_steamid\030\001 \001("
      "\006\022\027\n\017site_instanceid\030\002 \001(\006\022\027\n\017client_loc"
      "al_ip\030\003 \001(\007\"C\n)CSiteLicense_InitiateAsso"
      "ciation_Response\022\026\n\016connection_key\030\001 \001(\014"
      "\":\n$CSiteLicense_LCSAuthenticate_Request"
      "\022\022\n\ninstanceid\030\001 \001(\006\"`\n%CSiteLicense_LCS"
      "Authenticate_Response\022\017\n\007site_id\030\001 \001(\004\022\021"
      "\n\tsite_name\030\002 \001(\t\022\023\n\013new_session\030\003 \001(\010\"^"
      "\n%CSiteLicense_LCSAssociateUser_Request\022"
      "\017\n\007steamid\030\001 \001(\006\022\020\n\010local_ip\030\002 \001(\007\022\022\n\nin"
      "stanceid\030\003 \001(\006\"(\n&CSiteLicense_LCSAssoci"
      "ateUser_Response\"]\n\'CSiteLicense_ClientS"
      "eatCheckout_Request\022\017\n\007steamid\030\001 \001(\006\022\022\n\n"
      "instanceid\030\002 \001(\006\022\r\n\005appid\030\003 \001(\r\"*\n(CSite"
      "License_ClientSeatCheckout_Response\"b\n,C"
      "SiteLicense_ClientGetAvailableSeats_Requ"
      "est\022\017\n\007steamid\030\001 \001(\006\022\022\n\ninstanceid\030\002 \001(\006"
      "\022\r\n\005appid\030\003 \001(\r\"H\n-CSiteLicense_ClientGe"
      "tAvailableSeats_Response\022\027\n\017available_se"
      "ats\030\001 \001(\r2\210\002\n\021SiteManagerClient\022\307\001\n\016Inco"
      "mingClient\0226.proto.steam.CSiteManagerCli"
      "ent_IncomingClient_Request\0327.proto.steam"
      ".CSiteManagerClient_IncomingClient_Respo"
      "nse\"D\202\265\030@Rack informing site manager of "
      "new inbound client PSK connection\032)\202\265\030!L"
      "ocal site manager client service\300\265\030\0022\315\007\n"
      "\013SiteLicense\022\274\001\n\023InitiateAssociation\0225.p"
      "roto.steam.CSiteLicense_InitiateAssociat"
      "ion_Request\0326.proto.steam.CSiteLicense_I"
      "nitiateAssociation_Response\"6\202\265\0302Client "
      "is requesting connetion info for local s"
      "ite\022\236\001\n\017LCSAuthenticate\0221.proto.steam.CS"
      "iteLicense_LCSAuthenticate_Request\0322.pro"
      "to.steam.CSiteLicense_LCSAuthenticate_Re"
      "sponse\"$\202\265\030 Local cafe server authentica"
      "tion\022\265\001\n\020LCSAssociateUser\0222.proto.steam."
      "CSiteLicense_LCSAssociateUser_Request\0323."
      "proto.steam.CSiteLicense_LCSAssociateUse"
      "r_Response\"8\202\265\0304Local cafe server wants "
      "to grant user access to site\022\266\001\n\022ClientS"
      "eatCheckout\0224.proto.steam.CSiteLicense_C"
      "lientSeatCheckout_Request\0325.proto.steam."
      "CSiteLicense_ClientSeatCheckout_Response"
      "\"3\202\265\030/Client is requesting use of a site"
      " license seat\022\322\001\n\027ClientGetAvailableSeat"
      "s\0229.proto.steam.CSiteLicense_ClientGetAv"
      "ailableSeats_Request\032:.proto.steam.CSite"
      "License_ClientGetAvailableSeats_Response"
      "\"@\202\265\030<Client is requesting the number of"
      " currently available seats\032\030\202\265\030\024Site Lic"
      "ense serviceB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2337);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_site_license.steamclient.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteManagerClient_IncomingClient_Request::kSiteInstanceidFieldNumber;
const int CSiteManagerClient_IncomingClient_Request::kClientSteamidFieldNumber;
const int CSiteManagerClient_IncomingClient_Request::kClientLocalIpFieldNumber;
const int CSiteManagerClient_IncomingClient_Request::kConnectionKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteManagerClient_IncomingClient_Request::CSiteManagerClient_IncomingClient_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteManagerClient_IncomingClient_Request)
}
CSiteManagerClient_IncomingClient_Request::CSiteManagerClient_IncomingClient_Request(const CSiteManagerClient_IncomingClient_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connection_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_connection_key()) {
    connection_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_key_);
  }
  ::memcpy(&site_instanceid_, &from.site_instanceid_,
    reinterpret_cast<char*>(&client_local_ip_) -
    reinterpret_cast<char*>(&site_instanceid_) + sizeof(client_local_ip_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteManagerClient_IncomingClient_Request)
}

void CSiteManagerClient_IncomingClient_Request::SharedCtor() {
  _cached_size_ = 0;
  connection_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&site_instanceid_, 0, reinterpret_cast<char*>(&client_local_ip_) -
    reinterpret_cast<char*>(&site_instanceid_) + sizeof(client_local_ip_));
}

CSiteManagerClient_IncomingClient_Request::~CSiteManagerClient_IncomingClient_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteManagerClient_IncomingClient_Request)
  SharedDtor();
}

void CSiteManagerClient_IncomingClient_Request::SharedDtor() {
  connection_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSiteManagerClient_IncomingClient_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteManagerClient_IncomingClient_Request::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteManagerClient_IncomingClient_Request& CSiteManagerClient_IncomingClient_Request::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteManagerClient_IncomingClient_Request* CSiteManagerClient_IncomingClient_Request::New(::google::protobuf::Arena* arena) const {
  CSiteManagerClient_IncomingClient_Request* n = new CSiteManagerClient_IncomingClient_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteManagerClient_IncomingClient_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteManagerClient_IncomingClient_Request)
  if (has_connection_key()) {
    GOOGLE_DCHECK(!connection_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*connection_key_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&site_instanceid_, 0, reinterpret_cast<char*>(&client_local_ip_) -
      reinterpret_cast<char*>(&site_instanceid_) + sizeof(client_local_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteManagerClient_IncomingClient_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteManagerClient_IncomingClient_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 site_instanceid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_site_instanceid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &site_instanceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 client_steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_client_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_local_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_client_local_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_local_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes connection_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_connection_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteManagerClient_IncomingClient_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteManagerClient_IncomingClient_Request)
  return false;
#undef DO_
}

void CSiteManagerClient_IncomingClient_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteManagerClient_IncomingClient_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 site_instanceid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->site_instanceid(), output);
  }

  // optional fixed64 client_steamid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->client_steamid(), output);
  }

  // optional fixed32 client_local_ip = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->client_local_ip(), output);
  }

  // optional bytes connection_key = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->connection_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteManagerClient_IncomingClient_Request)
}

::google::protobuf::uint8* CSiteManagerClient_IncomingClient_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteManagerClient_IncomingClient_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 site_instanceid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->site_instanceid(), target);
  }

  // optional fixed64 client_steamid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->client_steamid(), target);
  }

  // optional fixed32 client_local_ip = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->client_local_ip(), target);
  }

  // optional bytes connection_key = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->connection_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteManagerClient_IncomingClient_Request)
  return target;
}

size_t CSiteManagerClient_IncomingClient_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteManagerClient_IncomingClient_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes connection_key = 4;
    if (has_connection_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->connection_key());
    }

    // optional fixed64 site_instanceid = 1;
    if (has_site_instanceid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 client_steamid = 2;
    if (has_client_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed32 client_local_ip = 3;
    if (has_client_local_ip()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteManagerClient_IncomingClient_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteManagerClient_IncomingClient_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteManagerClient_IncomingClient_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteManagerClient_IncomingClient_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteManagerClient_IncomingClient_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteManagerClient_IncomingClient_Request)
    MergeFrom(*source);
  }
}

void CSiteManagerClient_IncomingClient_Request::MergeFrom(const CSiteManagerClient_IncomingClient_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteManagerClient_IncomingClient_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_connection_key();
      connection_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      site_instanceid_ = from.site_instanceid_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_steamid_ = from.client_steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_local_ip_ = from.client_local_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSiteManagerClient_IncomingClient_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteManagerClient_IncomingClient_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteManagerClient_IncomingClient_Request::CopyFrom(const CSiteManagerClient_IncomingClient_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteManagerClient_IncomingClient_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteManagerClient_IncomingClient_Request::IsInitialized() const {
  return true;
}

void CSiteManagerClient_IncomingClient_Request::Swap(CSiteManagerClient_IncomingClient_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteManagerClient_IncomingClient_Request::InternalSwap(CSiteManagerClient_IncomingClient_Request* other) {
  connection_key_.Swap(&other->connection_key_);
  std::swap(site_instanceid_, other->site_instanceid_);
  std::swap(client_steamid_, other->client_steamid_);
  std::swap(client_local_ip_, other->client_local_ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteManagerClient_IncomingClient_Request::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteManagerClient_IncomingClient_Request

// optional fixed64 site_instanceid = 1;
bool CSiteManagerClient_IncomingClient_Request::has_site_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSiteManagerClient_IncomingClient_Request::set_has_site_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
void CSiteManagerClient_IncomingClient_Request::clear_has_site_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSiteManagerClient_IncomingClient_Request::clear_site_instanceid() {
  site_instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_site_instanceid();
}
::google::protobuf::uint64 CSiteManagerClient_IncomingClient_Request::site_instanceid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteManagerClient_IncomingClient_Request.site_instanceid)
  return site_instanceid_;
}
void CSiteManagerClient_IncomingClient_Request::set_site_instanceid(::google::protobuf::uint64 value) {
  set_has_site_instanceid();
  site_instanceid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteManagerClient_IncomingClient_Request.site_instanceid)
}

// optional fixed64 client_steamid = 2;
bool CSiteManagerClient_IncomingClient_Request::has_client_steamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSiteManagerClient_IncomingClient_Request::set_has_client_steamid() {
  _has_bits_[0] |= 0x00000004u;
}
void CSiteManagerClient_IncomingClient_Request::clear_has_client_steamid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSiteManagerClient_IncomingClient_Request::clear_client_steamid() {
  client_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_client_steamid();
}
::google::protobuf::uint64 CSiteManagerClient_IncomingClient_Request::client_steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteManagerClient_IncomingClient_Request.client_steamid)
  return client_steamid_;
}
void CSiteManagerClient_IncomingClient_Request::set_client_steamid(::google::protobuf::uint64 value) {
  set_has_client_steamid();
  client_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteManagerClient_IncomingClient_Request.client_steamid)
}

// optional fixed32 client_local_ip = 3;
bool CSiteManagerClient_IncomingClient_Request::has_client_local_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSiteManagerClient_IncomingClient_Request::set_has_client_local_ip() {
  _has_bits_[0] |= 0x00000008u;
}
void CSiteManagerClient_IncomingClient_Request::clear_has_client_local_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSiteManagerClient_IncomingClient_Request::clear_client_local_ip() {
  client_local_ip_ = 0u;
  clear_has_client_local_ip();
}
::google::protobuf::uint32 CSiteManagerClient_IncomingClient_Request::client_local_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteManagerClient_IncomingClient_Request.client_local_ip)
  return client_local_ip_;
}
void CSiteManagerClient_IncomingClient_Request::set_client_local_ip(::google::protobuf::uint32 value) {
  set_has_client_local_ip();
  client_local_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteManagerClient_IncomingClient_Request.client_local_ip)
}

// optional bytes connection_key = 4;
bool CSiteManagerClient_IncomingClient_Request::has_connection_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSiteManagerClient_IncomingClient_Request::set_has_connection_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CSiteManagerClient_IncomingClient_Request::clear_has_connection_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSiteManagerClient_IncomingClient_Request::clear_connection_key() {
  connection_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_connection_key();
}
const ::std::string& CSiteManagerClient_IncomingClient_Request::connection_key() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteManagerClient_IncomingClient_Request.connection_key)
  return connection_key_.GetNoArena();
}
void CSiteManagerClient_IncomingClient_Request::set_connection_key(const ::std::string& value) {
  set_has_connection_key();
  connection_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CSiteManagerClient_IncomingClient_Request.connection_key)
}
#if LANG_CXX11
void CSiteManagerClient_IncomingClient_Request::set_connection_key(::std::string&& value) {
  set_has_connection_key();
  connection_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CSiteManagerClient_IncomingClient_Request.connection_key)
}
#endif
void CSiteManagerClient_IncomingClient_Request::set_connection_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_connection_key();
  connection_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CSiteManagerClient_IncomingClient_Request.connection_key)
}
void CSiteManagerClient_IncomingClient_Request::set_connection_key(const void* value, size_t size) {
  set_has_connection_key();
  connection_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CSiteManagerClient_IncomingClient_Request.connection_key)
}
::std::string* CSiteManagerClient_IncomingClient_Request::mutable_connection_key() {
  set_has_connection_key();
  // @@protoc_insertion_point(field_mutable:proto.steam.CSiteManagerClient_IncomingClient_Request.connection_key)
  return connection_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSiteManagerClient_IncomingClient_Request::release_connection_key() {
  // @@protoc_insertion_point(field_release:proto.steam.CSiteManagerClient_IncomingClient_Request.connection_key)
  clear_has_connection_key();
  return connection_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSiteManagerClient_IncomingClient_Request::set_allocated_connection_key(::std::string* connection_key) {
  if (connection_key != NULL) {
    set_has_connection_key();
  } else {
    clear_has_connection_key();
  }
  connection_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connection_key);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CSiteManagerClient_IncomingClient_Request.connection_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteManagerClient_IncomingClient_Response::CSiteManagerClient_IncomingClient_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteManagerClient_IncomingClient_Response)
}
CSiteManagerClient_IncomingClient_Response::CSiteManagerClient_IncomingClient_Response(const CSiteManagerClient_IncomingClient_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteManagerClient_IncomingClient_Response)
}

void CSiteManagerClient_IncomingClient_Response::SharedCtor() {
  _cached_size_ = 0;
}

CSiteManagerClient_IncomingClient_Response::~CSiteManagerClient_IncomingClient_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteManagerClient_IncomingClient_Response)
  SharedDtor();
}

void CSiteManagerClient_IncomingClient_Response::SharedDtor() {
}

void CSiteManagerClient_IncomingClient_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteManagerClient_IncomingClient_Response::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteManagerClient_IncomingClient_Response& CSiteManagerClient_IncomingClient_Response::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteManagerClient_IncomingClient_Response* CSiteManagerClient_IncomingClient_Response::New(::google::protobuf::Arena* arena) const {
  CSiteManagerClient_IncomingClient_Response* n = new CSiteManagerClient_IncomingClient_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteManagerClient_IncomingClient_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteManagerClient_IncomingClient_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteManagerClient_IncomingClient_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteManagerClient_IncomingClient_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteManagerClient_IncomingClient_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteManagerClient_IncomingClient_Response)
  return false;
#undef DO_
}

void CSiteManagerClient_IncomingClient_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteManagerClient_IncomingClient_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteManagerClient_IncomingClient_Response)
}

::google::protobuf::uint8* CSiteManagerClient_IncomingClient_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteManagerClient_IncomingClient_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteManagerClient_IncomingClient_Response)
  return target;
}

size_t CSiteManagerClient_IncomingClient_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteManagerClient_IncomingClient_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteManagerClient_IncomingClient_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteManagerClient_IncomingClient_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteManagerClient_IncomingClient_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteManagerClient_IncomingClient_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteManagerClient_IncomingClient_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteManagerClient_IncomingClient_Response)
    MergeFrom(*source);
  }
}

void CSiteManagerClient_IncomingClient_Response::MergeFrom(const CSiteManagerClient_IncomingClient_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteManagerClient_IncomingClient_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSiteManagerClient_IncomingClient_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteManagerClient_IncomingClient_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteManagerClient_IncomingClient_Response::CopyFrom(const CSiteManagerClient_IncomingClient_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteManagerClient_IncomingClient_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteManagerClient_IncomingClient_Response::IsInitialized() const {
  return true;
}

void CSiteManagerClient_IncomingClient_Response::Swap(CSiteManagerClient_IncomingClient_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteManagerClient_IncomingClient_Response::InternalSwap(CSiteManagerClient_IncomingClient_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteManagerClient_IncomingClient_Response::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteManagerClient_IncomingClient_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_InitiateAssociation_Request::kSiteSteamidFieldNumber;
const int CSiteLicense_InitiateAssociation_Request::kSiteInstanceidFieldNumber;
const int CSiteLicense_InitiateAssociation_Request::kClientLocalIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_InitiateAssociation_Request::CSiteLicense_InitiateAssociation_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteLicense_InitiateAssociation_Request)
}
CSiteLicense_InitiateAssociation_Request::CSiteLicense_InitiateAssociation_Request(const CSiteLicense_InitiateAssociation_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&site_steamid_, &from.site_steamid_,
    reinterpret_cast<char*>(&client_local_ip_) -
    reinterpret_cast<char*>(&site_steamid_) + sizeof(client_local_ip_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteLicense_InitiateAssociation_Request)
}

void CSiteLicense_InitiateAssociation_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&site_steamid_, 0, reinterpret_cast<char*>(&client_local_ip_) -
    reinterpret_cast<char*>(&site_steamid_) + sizeof(client_local_ip_));
}

CSiteLicense_InitiateAssociation_Request::~CSiteLicense_InitiateAssociation_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteLicense_InitiateAssociation_Request)
  SharedDtor();
}

void CSiteLicense_InitiateAssociation_Request::SharedDtor() {
}

void CSiteLicense_InitiateAssociation_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteLicense_InitiateAssociation_Request::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_InitiateAssociation_Request& CSiteLicense_InitiateAssociation_Request::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteLicense_InitiateAssociation_Request* CSiteLicense_InitiateAssociation_Request::New(::google::protobuf::Arena* arena) const {
  CSiteLicense_InitiateAssociation_Request* n = new CSiteLicense_InitiateAssociation_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteLicense_InitiateAssociation_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteLicense_InitiateAssociation_Request)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&site_steamid_, 0, reinterpret_cast<char*>(&client_local_ip_) -
      reinterpret_cast<char*>(&site_steamid_) + sizeof(client_local_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_InitiateAssociation_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteLicense_InitiateAssociation_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 site_steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_site_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &site_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 site_instanceid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_site_instanceid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &site_instanceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_local_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_client_local_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_local_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteLicense_InitiateAssociation_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteLicense_InitiateAssociation_Request)
  return false;
#undef DO_
}

void CSiteLicense_InitiateAssociation_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteLicense_InitiateAssociation_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 site_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->site_steamid(), output);
  }

  // optional fixed64 site_instanceid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->site_instanceid(), output);
  }

  // optional fixed32 client_local_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->client_local_ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteLicense_InitiateAssociation_Request)
}

::google::protobuf::uint8* CSiteLicense_InitiateAssociation_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteLicense_InitiateAssociation_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 site_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->site_steamid(), target);
  }

  // optional fixed64 site_instanceid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->site_instanceid(), target);
  }

  // optional fixed32 client_local_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->client_local_ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteLicense_InitiateAssociation_Request)
  return target;
}

size_t CSiteLicense_InitiateAssociation_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteLicense_InitiateAssociation_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 site_steamid = 1;
    if (has_site_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 site_instanceid = 2;
    if (has_site_instanceid()) {
      total_size += 1 + 8;
    }

    // optional fixed32 client_local_ip = 3;
    if (has_client_local_ip()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteLicense_InitiateAssociation_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteLicense_InitiateAssociation_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_InitiateAssociation_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_InitiateAssociation_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteLicense_InitiateAssociation_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteLicense_InitiateAssociation_Request)
    MergeFrom(*source);
  }
}

void CSiteLicense_InitiateAssociation_Request::MergeFrom(const CSiteLicense_InitiateAssociation_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteLicense_InitiateAssociation_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      site_steamid_ = from.site_steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      site_instanceid_ = from.site_instanceid_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_local_ip_ = from.client_local_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSiteLicense_InitiateAssociation_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteLicense_InitiateAssociation_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_InitiateAssociation_Request::CopyFrom(const CSiteLicense_InitiateAssociation_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteLicense_InitiateAssociation_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_InitiateAssociation_Request::IsInitialized() const {
  return true;
}

void CSiteLicense_InitiateAssociation_Request::Swap(CSiteLicense_InitiateAssociation_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_InitiateAssociation_Request::InternalSwap(CSiteLicense_InitiateAssociation_Request* other) {
  std::swap(site_steamid_, other->site_steamid_);
  std::swap(site_instanceid_, other->site_instanceid_);
  std::swap(client_local_ip_, other->client_local_ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteLicense_InitiateAssociation_Request::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteLicense_InitiateAssociation_Request

// optional fixed64 site_steamid = 1;
bool CSiteLicense_InitiateAssociation_Request::has_site_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSiteLicense_InitiateAssociation_Request::set_has_site_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CSiteLicense_InitiateAssociation_Request::clear_has_site_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSiteLicense_InitiateAssociation_Request::clear_site_steamid() {
  site_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_site_steamid();
}
::google::protobuf::uint64 CSiteLicense_InitiateAssociation_Request::site_steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_InitiateAssociation_Request.site_steamid)
  return site_steamid_;
}
void CSiteLicense_InitiateAssociation_Request::set_site_steamid(::google::protobuf::uint64 value) {
  set_has_site_steamid();
  site_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_InitiateAssociation_Request.site_steamid)
}

// optional fixed64 site_instanceid = 2;
bool CSiteLicense_InitiateAssociation_Request::has_site_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSiteLicense_InitiateAssociation_Request::set_has_site_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
void CSiteLicense_InitiateAssociation_Request::clear_has_site_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSiteLicense_InitiateAssociation_Request::clear_site_instanceid() {
  site_instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_site_instanceid();
}
::google::protobuf::uint64 CSiteLicense_InitiateAssociation_Request::site_instanceid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_InitiateAssociation_Request.site_instanceid)
  return site_instanceid_;
}
void CSiteLicense_InitiateAssociation_Request::set_site_instanceid(::google::protobuf::uint64 value) {
  set_has_site_instanceid();
  site_instanceid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_InitiateAssociation_Request.site_instanceid)
}

// optional fixed32 client_local_ip = 3;
bool CSiteLicense_InitiateAssociation_Request::has_client_local_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSiteLicense_InitiateAssociation_Request::set_has_client_local_ip() {
  _has_bits_[0] |= 0x00000004u;
}
void CSiteLicense_InitiateAssociation_Request::clear_has_client_local_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSiteLicense_InitiateAssociation_Request::clear_client_local_ip() {
  client_local_ip_ = 0u;
  clear_has_client_local_ip();
}
::google::protobuf::uint32 CSiteLicense_InitiateAssociation_Request::client_local_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_InitiateAssociation_Request.client_local_ip)
  return client_local_ip_;
}
void CSiteLicense_InitiateAssociation_Request::set_client_local_ip(::google::protobuf::uint32 value) {
  set_has_client_local_ip();
  client_local_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_InitiateAssociation_Request.client_local_ip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_InitiateAssociation_Response::kConnectionKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_InitiateAssociation_Response::CSiteLicense_InitiateAssociation_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteLicense_InitiateAssociation_Response)
}
CSiteLicense_InitiateAssociation_Response::CSiteLicense_InitiateAssociation_Response(const CSiteLicense_InitiateAssociation_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connection_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_connection_key()) {
    connection_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_key_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteLicense_InitiateAssociation_Response)
}

void CSiteLicense_InitiateAssociation_Response::SharedCtor() {
  _cached_size_ = 0;
  connection_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CSiteLicense_InitiateAssociation_Response::~CSiteLicense_InitiateAssociation_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteLicense_InitiateAssociation_Response)
  SharedDtor();
}

void CSiteLicense_InitiateAssociation_Response::SharedDtor() {
  connection_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSiteLicense_InitiateAssociation_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteLicense_InitiateAssociation_Response::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_InitiateAssociation_Response& CSiteLicense_InitiateAssociation_Response::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteLicense_InitiateAssociation_Response* CSiteLicense_InitiateAssociation_Response::New(::google::protobuf::Arena* arena) const {
  CSiteLicense_InitiateAssociation_Response* n = new CSiteLicense_InitiateAssociation_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteLicense_InitiateAssociation_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteLicense_InitiateAssociation_Response)
  if (has_connection_key()) {
    GOOGLE_DCHECK(!connection_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*connection_key_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_InitiateAssociation_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteLicense_InitiateAssociation_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes connection_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_connection_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteLicense_InitiateAssociation_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteLicense_InitiateAssociation_Response)
  return false;
#undef DO_
}

void CSiteLicense_InitiateAssociation_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteLicense_InitiateAssociation_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes connection_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->connection_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteLicense_InitiateAssociation_Response)
}

::google::protobuf::uint8* CSiteLicense_InitiateAssociation_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteLicense_InitiateAssociation_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes connection_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->connection_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteLicense_InitiateAssociation_Response)
  return target;
}

size_t CSiteLicense_InitiateAssociation_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteLicense_InitiateAssociation_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bytes connection_key = 1;
  if (has_connection_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->connection_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteLicense_InitiateAssociation_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteLicense_InitiateAssociation_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_InitiateAssociation_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_InitiateAssociation_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteLicense_InitiateAssociation_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteLicense_InitiateAssociation_Response)
    MergeFrom(*source);
  }
}

void CSiteLicense_InitiateAssociation_Response::MergeFrom(const CSiteLicense_InitiateAssociation_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteLicense_InitiateAssociation_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_connection_key()) {
    set_has_connection_key();
    connection_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_key_);
  }
}

void CSiteLicense_InitiateAssociation_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteLicense_InitiateAssociation_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_InitiateAssociation_Response::CopyFrom(const CSiteLicense_InitiateAssociation_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteLicense_InitiateAssociation_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_InitiateAssociation_Response::IsInitialized() const {
  return true;
}

void CSiteLicense_InitiateAssociation_Response::Swap(CSiteLicense_InitiateAssociation_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_InitiateAssociation_Response::InternalSwap(CSiteLicense_InitiateAssociation_Response* other) {
  connection_key_.Swap(&other->connection_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteLicense_InitiateAssociation_Response::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteLicense_InitiateAssociation_Response

// optional bytes connection_key = 1;
bool CSiteLicense_InitiateAssociation_Response::has_connection_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSiteLicense_InitiateAssociation_Response::set_has_connection_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CSiteLicense_InitiateAssociation_Response::clear_has_connection_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSiteLicense_InitiateAssociation_Response::clear_connection_key() {
  connection_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_connection_key();
}
const ::std::string& CSiteLicense_InitiateAssociation_Response::connection_key() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_InitiateAssociation_Response.connection_key)
  return connection_key_.GetNoArena();
}
void CSiteLicense_InitiateAssociation_Response::set_connection_key(const ::std::string& value) {
  set_has_connection_key();
  connection_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_InitiateAssociation_Response.connection_key)
}
#if LANG_CXX11
void CSiteLicense_InitiateAssociation_Response::set_connection_key(::std::string&& value) {
  set_has_connection_key();
  connection_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CSiteLicense_InitiateAssociation_Response.connection_key)
}
#endif
void CSiteLicense_InitiateAssociation_Response::set_connection_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_connection_key();
  connection_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CSiteLicense_InitiateAssociation_Response.connection_key)
}
void CSiteLicense_InitiateAssociation_Response::set_connection_key(const void* value, size_t size) {
  set_has_connection_key();
  connection_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CSiteLicense_InitiateAssociation_Response.connection_key)
}
::std::string* CSiteLicense_InitiateAssociation_Response::mutable_connection_key() {
  set_has_connection_key();
  // @@protoc_insertion_point(field_mutable:proto.steam.CSiteLicense_InitiateAssociation_Response.connection_key)
  return connection_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSiteLicense_InitiateAssociation_Response::release_connection_key() {
  // @@protoc_insertion_point(field_release:proto.steam.CSiteLicense_InitiateAssociation_Response.connection_key)
  clear_has_connection_key();
  return connection_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSiteLicense_InitiateAssociation_Response::set_allocated_connection_key(::std::string* connection_key) {
  if (connection_key != NULL) {
    set_has_connection_key();
  } else {
    clear_has_connection_key();
  }
  connection_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connection_key);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CSiteLicense_InitiateAssociation_Response.connection_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_LCSAuthenticate_Request::kInstanceidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_LCSAuthenticate_Request::CSiteLicense_LCSAuthenticate_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteLicense_LCSAuthenticate_Request)
}
CSiteLicense_LCSAuthenticate_Request::CSiteLicense_LCSAuthenticate_Request(const CSiteLicense_LCSAuthenticate_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instanceid_ = from.instanceid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteLicense_LCSAuthenticate_Request)
}

void CSiteLicense_LCSAuthenticate_Request::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = GOOGLE_ULONGLONG(0);
}

CSiteLicense_LCSAuthenticate_Request::~CSiteLicense_LCSAuthenticate_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  SharedDtor();
}

void CSiteLicense_LCSAuthenticate_Request::SharedDtor() {
}

void CSiteLicense_LCSAuthenticate_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteLicense_LCSAuthenticate_Request::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_LCSAuthenticate_Request& CSiteLicense_LCSAuthenticate_Request::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteLicense_LCSAuthenticate_Request* CSiteLicense_LCSAuthenticate_Request::New(::google::protobuf::Arena* arena) const {
  CSiteLicense_LCSAuthenticate_Request* n = new CSiteLicense_LCSAuthenticate_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteLicense_LCSAuthenticate_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  instanceid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_LCSAuthenticate_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 instanceid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_instanceid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &instanceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  return false;
#undef DO_
}

void CSiteLicense_LCSAuthenticate_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 instanceid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->instanceid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteLicense_LCSAuthenticate_Request)
}

::google::protobuf::uint8* CSiteLicense_LCSAuthenticate_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 instanceid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->instanceid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  return target;
}

size_t CSiteLicense_LCSAuthenticate_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 instanceid = 1;
  if (has_instanceid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteLicense_LCSAuthenticate_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_LCSAuthenticate_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_LCSAuthenticate_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteLicense_LCSAuthenticate_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteLicense_LCSAuthenticate_Request)
    MergeFrom(*source);
  }
}

void CSiteLicense_LCSAuthenticate_Request::MergeFrom(const CSiteLicense_LCSAuthenticate_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_instanceid()) {
    set_instanceid(from.instanceid());
  }
}

void CSiteLicense_LCSAuthenticate_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_LCSAuthenticate_Request::CopyFrom(const CSiteLicense_LCSAuthenticate_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteLicense_LCSAuthenticate_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_LCSAuthenticate_Request::IsInitialized() const {
  return true;
}

void CSiteLicense_LCSAuthenticate_Request::Swap(CSiteLicense_LCSAuthenticate_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_LCSAuthenticate_Request::InternalSwap(CSiteLicense_LCSAuthenticate_Request* other) {
  std::swap(instanceid_, other->instanceid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteLicense_LCSAuthenticate_Request::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteLicense_LCSAuthenticate_Request

// optional fixed64 instanceid = 1;
bool CSiteLicense_LCSAuthenticate_Request::has_instanceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSiteLicense_LCSAuthenticate_Request::set_has_instanceid() {
  _has_bits_[0] |= 0x00000001u;
}
void CSiteLicense_LCSAuthenticate_Request::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSiteLicense_LCSAuthenticate_Request::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
::google::protobuf::uint64 CSiteLicense_LCSAuthenticate_Request::instanceid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_LCSAuthenticate_Request.instanceid)
  return instanceid_;
}
void CSiteLicense_LCSAuthenticate_Request::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_LCSAuthenticate_Request.instanceid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_LCSAuthenticate_Response::kSiteIdFieldNumber;
const int CSiteLicense_LCSAuthenticate_Response::kSiteNameFieldNumber;
const int CSiteLicense_LCSAuthenticate_Response::kNewSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_LCSAuthenticate_Response::CSiteLicense_LCSAuthenticate_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteLicense_LCSAuthenticate_Response)
}
CSiteLicense_LCSAuthenticate_Response::CSiteLicense_LCSAuthenticate_Response(const CSiteLicense_LCSAuthenticate_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  site_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_site_name()) {
    site_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_name_);
  }
  ::memcpy(&site_id_, &from.site_id_,
    reinterpret_cast<char*>(&new_session_) -
    reinterpret_cast<char*>(&site_id_) + sizeof(new_session_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteLicense_LCSAuthenticate_Response)
}

void CSiteLicense_LCSAuthenticate_Response::SharedCtor() {
  _cached_size_ = 0;
  site_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&site_id_, 0, reinterpret_cast<char*>(&new_session_) -
    reinterpret_cast<char*>(&site_id_) + sizeof(new_session_));
}

CSiteLicense_LCSAuthenticate_Response::~CSiteLicense_LCSAuthenticate_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  SharedDtor();
}

void CSiteLicense_LCSAuthenticate_Response::SharedDtor() {
  site_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSiteLicense_LCSAuthenticate_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteLicense_LCSAuthenticate_Response::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_LCSAuthenticate_Response& CSiteLicense_LCSAuthenticate_Response::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteLicense_LCSAuthenticate_Response* CSiteLicense_LCSAuthenticate_Response::New(::google::protobuf::Arena* arena) const {
  CSiteLicense_LCSAuthenticate_Response* n = new CSiteLicense_LCSAuthenticate_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteLicense_LCSAuthenticate_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  if (has_site_name()) {
    GOOGLE_DCHECK(!site_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*site_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&site_id_, 0, reinterpret_cast<char*>(&new_session_) -
      reinterpret_cast<char*>(&site_id_) + sizeof(new_session_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_LCSAuthenticate_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 site_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_site_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &site_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string site_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_site_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->site_name().data(), this->site_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CSiteLicense_LCSAuthenticate_Response.site_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool new_session = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_new_session();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new_session_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  return false;
#undef DO_
}

void CSiteLicense_LCSAuthenticate_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 site_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->site_id(), output);
  }

  // optional string site_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site_name().data(), this->site_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CSiteLicense_LCSAuthenticate_Response.site_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->site_name(), output);
  }

  // optional bool new_session = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->new_session(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteLicense_LCSAuthenticate_Response)
}

::google::protobuf::uint8* CSiteLicense_LCSAuthenticate_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 site_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->site_id(), target);
  }

  // optional string site_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site_name().data(), this->site_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CSiteLicense_LCSAuthenticate_Response.site_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->site_name(), target);
  }

  // optional bool new_session = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->new_session(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  return target;
}

size_t CSiteLicense_LCSAuthenticate_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string site_name = 2;
    if (has_site_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->site_name());
    }

    // optional uint64 site_id = 1;
    if (has_site_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->site_id());
    }

    // optional bool new_session = 3;
    if (has_new_session()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteLicense_LCSAuthenticate_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_LCSAuthenticate_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_LCSAuthenticate_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteLicense_LCSAuthenticate_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteLicense_LCSAuthenticate_Response)
    MergeFrom(*source);
  }
}

void CSiteLicense_LCSAuthenticate_Response::MergeFrom(const CSiteLicense_LCSAuthenticate_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_site_name();
      site_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      site_id_ = from.site_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      new_session_ = from.new_session_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSiteLicense_LCSAuthenticate_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_LCSAuthenticate_Response::CopyFrom(const CSiteLicense_LCSAuthenticate_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteLicense_LCSAuthenticate_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_LCSAuthenticate_Response::IsInitialized() const {
  return true;
}

void CSiteLicense_LCSAuthenticate_Response::Swap(CSiteLicense_LCSAuthenticate_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_LCSAuthenticate_Response::InternalSwap(CSiteLicense_LCSAuthenticate_Response* other) {
  site_name_.Swap(&other->site_name_);
  std::swap(site_id_, other->site_id_);
  std::swap(new_session_, other->new_session_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteLicense_LCSAuthenticate_Response::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteLicense_LCSAuthenticate_Response

// optional uint64 site_id = 1;
bool CSiteLicense_LCSAuthenticate_Response::has_site_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSiteLicense_LCSAuthenticate_Response::set_has_site_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSiteLicense_LCSAuthenticate_Response::clear_has_site_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSiteLicense_LCSAuthenticate_Response::clear_site_id() {
  site_id_ = GOOGLE_ULONGLONG(0);
  clear_has_site_id();
}
::google::protobuf::uint64 CSiteLicense_LCSAuthenticate_Response::site_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_LCSAuthenticate_Response.site_id)
  return site_id_;
}
void CSiteLicense_LCSAuthenticate_Response::set_site_id(::google::protobuf::uint64 value) {
  set_has_site_id();
  site_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_LCSAuthenticate_Response.site_id)
}

// optional string site_name = 2;
bool CSiteLicense_LCSAuthenticate_Response::has_site_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSiteLicense_LCSAuthenticate_Response::set_has_site_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CSiteLicense_LCSAuthenticate_Response::clear_has_site_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSiteLicense_LCSAuthenticate_Response::clear_site_name() {
  site_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_site_name();
}
const ::std::string& CSiteLicense_LCSAuthenticate_Response::site_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_LCSAuthenticate_Response.site_name)
  return site_name_.GetNoArena();
}
void CSiteLicense_LCSAuthenticate_Response::set_site_name(const ::std::string& value) {
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_LCSAuthenticate_Response.site_name)
}
#if LANG_CXX11
void CSiteLicense_LCSAuthenticate_Response::set_site_name(::std::string&& value) {
  set_has_site_name();
  site_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CSiteLicense_LCSAuthenticate_Response.site_name)
}
#endif
void CSiteLicense_LCSAuthenticate_Response::set_site_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CSiteLicense_LCSAuthenticate_Response.site_name)
}
void CSiteLicense_LCSAuthenticate_Response::set_site_name(const char* value, size_t size) {
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CSiteLicense_LCSAuthenticate_Response.site_name)
}
::std::string* CSiteLicense_LCSAuthenticate_Response::mutable_site_name() {
  set_has_site_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CSiteLicense_LCSAuthenticate_Response.site_name)
  return site_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSiteLicense_LCSAuthenticate_Response::release_site_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CSiteLicense_LCSAuthenticate_Response.site_name)
  clear_has_site_name();
  return site_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSiteLicense_LCSAuthenticate_Response::set_allocated_site_name(::std::string* site_name) {
  if (site_name != NULL) {
    set_has_site_name();
  } else {
    clear_has_site_name();
  }
  site_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), site_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CSiteLicense_LCSAuthenticate_Response.site_name)
}

// optional bool new_session = 3;
bool CSiteLicense_LCSAuthenticate_Response::has_new_session() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSiteLicense_LCSAuthenticate_Response::set_has_new_session() {
  _has_bits_[0] |= 0x00000004u;
}
void CSiteLicense_LCSAuthenticate_Response::clear_has_new_session() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSiteLicense_LCSAuthenticate_Response::clear_new_session() {
  new_session_ = false;
  clear_has_new_session();
}
bool CSiteLicense_LCSAuthenticate_Response::new_session() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_LCSAuthenticate_Response.new_session)
  return new_session_;
}
void CSiteLicense_LCSAuthenticate_Response::set_new_session(bool value) {
  set_has_new_session();
  new_session_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_LCSAuthenticate_Response.new_session)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_LCSAssociateUser_Request::kSteamidFieldNumber;
const int CSiteLicense_LCSAssociateUser_Request::kLocalIpFieldNumber;
const int CSiteLicense_LCSAssociateUser_Request::kInstanceidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_LCSAssociateUser_Request::CSiteLicense_LCSAssociateUser_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteLicense_LCSAssociateUser_Request)
}
CSiteLicense_LCSAssociateUser_Request::CSiteLicense_LCSAssociateUser_Request(const CSiteLicense_LCSAssociateUser_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&local_ip_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(local_ip_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteLicense_LCSAssociateUser_Request)
}

void CSiteLicense_LCSAssociateUser_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&local_ip_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(local_ip_));
}

CSiteLicense_LCSAssociateUser_Request::~CSiteLicense_LCSAssociateUser_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  SharedDtor();
}

void CSiteLicense_LCSAssociateUser_Request::SharedDtor() {
}

void CSiteLicense_LCSAssociateUser_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteLicense_LCSAssociateUser_Request::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_LCSAssociateUser_Request& CSiteLicense_LCSAssociateUser_Request::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteLicense_LCSAssociateUser_Request* CSiteLicense_LCSAssociateUser_Request::New(::google::protobuf::Arena* arena) const {
  CSiteLicense_LCSAssociateUser_Request* n = new CSiteLicense_LCSAssociateUser_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteLicense_LCSAssociateUser_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&local_ip_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(local_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_LCSAssociateUser_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 local_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_local_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &local_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 instanceid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_instanceid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &instanceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  return false;
#undef DO_
}

void CSiteLicense_LCSAssociateUser_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed32 local_ip = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->local_ip(), output);
  }

  // optional fixed64 instanceid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->instanceid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteLicense_LCSAssociateUser_Request)
}

::google::protobuf::uint8* CSiteLicense_LCSAssociateUser_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed32 local_ip = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->local_ip(), target);
  }

  // optional fixed64 instanceid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->instanceid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  return target;
}

size_t CSiteLicense_LCSAssociateUser_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 instanceid = 3;
    if (has_instanceid()) {
      total_size += 1 + 8;
    }

    // optional fixed32 local_ip = 2;
    if (has_local_ip()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteLicense_LCSAssociateUser_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_LCSAssociateUser_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_LCSAssociateUser_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteLicense_LCSAssociateUser_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteLicense_LCSAssociateUser_Request)
    MergeFrom(*source);
  }
}

void CSiteLicense_LCSAssociateUser_Request::MergeFrom(const CSiteLicense_LCSAssociateUser_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      instanceid_ = from.instanceid_;
    }
    if (cached_has_bits & 0x00000004u) {
      local_ip_ = from.local_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSiteLicense_LCSAssociateUser_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_LCSAssociateUser_Request::CopyFrom(const CSiteLicense_LCSAssociateUser_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteLicense_LCSAssociateUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_LCSAssociateUser_Request::IsInitialized() const {
  return true;
}

void CSiteLicense_LCSAssociateUser_Request::Swap(CSiteLicense_LCSAssociateUser_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_LCSAssociateUser_Request::InternalSwap(CSiteLicense_LCSAssociateUser_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(instanceid_, other->instanceid_);
  std::swap(local_ip_, other->local_ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteLicense_LCSAssociateUser_Request::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteLicense_LCSAssociateUser_Request

// optional fixed64 steamid = 1;
bool CSiteLicense_LCSAssociateUser_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSiteLicense_LCSAssociateUser_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CSiteLicense_LCSAssociateUser_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSiteLicense_LCSAssociateUser_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CSiteLicense_LCSAssociateUser_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_LCSAssociateUser_Request.steamid)
  return steamid_;
}
void CSiteLicense_LCSAssociateUser_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_LCSAssociateUser_Request.steamid)
}

// optional fixed32 local_ip = 2;
bool CSiteLicense_LCSAssociateUser_Request::has_local_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSiteLicense_LCSAssociateUser_Request::set_has_local_ip() {
  _has_bits_[0] |= 0x00000004u;
}
void CSiteLicense_LCSAssociateUser_Request::clear_has_local_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSiteLicense_LCSAssociateUser_Request::clear_local_ip() {
  local_ip_ = 0u;
  clear_has_local_ip();
}
::google::protobuf::uint32 CSiteLicense_LCSAssociateUser_Request::local_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_LCSAssociateUser_Request.local_ip)
  return local_ip_;
}
void CSiteLicense_LCSAssociateUser_Request::set_local_ip(::google::protobuf::uint32 value) {
  set_has_local_ip();
  local_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_LCSAssociateUser_Request.local_ip)
}

// optional fixed64 instanceid = 3;
bool CSiteLicense_LCSAssociateUser_Request::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSiteLicense_LCSAssociateUser_Request::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
void CSiteLicense_LCSAssociateUser_Request::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSiteLicense_LCSAssociateUser_Request::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
::google::protobuf::uint64 CSiteLicense_LCSAssociateUser_Request::instanceid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_LCSAssociateUser_Request.instanceid)
  return instanceid_;
}
void CSiteLicense_LCSAssociateUser_Request::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_LCSAssociateUser_Request.instanceid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_LCSAssociateUser_Response::CSiteLicense_LCSAssociateUser_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteLicense_LCSAssociateUser_Response)
}
CSiteLicense_LCSAssociateUser_Response::CSiteLicense_LCSAssociateUser_Response(const CSiteLicense_LCSAssociateUser_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteLicense_LCSAssociateUser_Response)
}

void CSiteLicense_LCSAssociateUser_Response::SharedCtor() {
  _cached_size_ = 0;
}

CSiteLicense_LCSAssociateUser_Response::~CSiteLicense_LCSAssociateUser_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  SharedDtor();
}

void CSiteLicense_LCSAssociateUser_Response::SharedDtor() {
}

void CSiteLicense_LCSAssociateUser_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteLicense_LCSAssociateUser_Response::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_LCSAssociateUser_Response& CSiteLicense_LCSAssociateUser_Response::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteLicense_LCSAssociateUser_Response* CSiteLicense_LCSAssociateUser_Response::New(::google::protobuf::Arena* arena) const {
  CSiteLicense_LCSAssociateUser_Response* n = new CSiteLicense_LCSAssociateUser_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteLicense_LCSAssociateUser_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_LCSAssociateUser_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  return false;
#undef DO_
}

void CSiteLicense_LCSAssociateUser_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteLicense_LCSAssociateUser_Response)
}

::google::protobuf::uint8* CSiteLicense_LCSAssociateUser_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  return target;
}

size_t CSiteLicense_LCSAssociateUser_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteLicense_LCSAssociateUser_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_LCSAssociateUser_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_LCSAssociateUser_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteLicense_LCSAssociateUser_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteLicense_LCSAssociateUser_Response)
    MergeFrom(*source);
  }
}

void CSiteLicense_LCSAssociateUser_Response::MergeFrom(const CSiteLicense_LCSAssociateUser_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSiteLicense_LCSAssociateUser_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_LCSAssociateUser_Response::CopyFrom(const CSiteLicense_LCSAssociateUser_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteLicense_LCSAssociateUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_LCSAssociateUser_Response::IsInitialized() const {
  return true;
}

void CSiteLicense_LCSAssociateUser_Response::Swap(CSiteLicense_LCSAssociateUser_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_LCSAssociateUser_Response::InternalSwap(CSiteLicense_LCSAssociateUser_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteLicense_LCSAssociateUser_Response::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteLicense_LCSAssociateUser_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_ClientSeatCheckout_Request::kSteamidFieldNumber;
const int CSiteLicense_ClientSeatCheckout_Request::kInstanceidFieldNumber;
const int CSiteLicense_ClientSeatCheckout_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_ClientSeatCheckout_Request::CSiteLicense_ClientSeatCheckout_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
}
CSiteLicense_ClientSeatCheckout_Request::CSiteLicense_ClientSeatCheckout_Request(const CSiteLicense_ClientSeatCheckout_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
}

void CSiteLicense_ClientSeatCheckout_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
}

CSiteLicense_ClientSeatCheckout_Request::~CSiteLicense_ClientSeatCheckout_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  SharedDtor();
}

void CSiteLicense_ClientSeatCheckout_Request::SharedDtor() {
}

void CSiteLicense_ClientSeatCheckout_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteLicense_ClientSeatCheckout_Request::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_ClientSeatCheckout_Request& CSiteLicense_ClientSeatCheckout_Request::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteLicense_ClientSeatCheckout_Request* CSiteLicense_ClientSeatCheckout_Request::New(::google::protobuf::Arena* arena) const {
  CSiteLicense_ClientSeatCheckout_Request* n = new CSiteLicense_ClientSeatCheckout_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteLicense_ClientSeatCheckout_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_ClientSeatCheckout_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 instanceid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_instanceid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &instanceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  return false;
#undef DO_
}

void CSiteLicense_ClientSeatCheckout_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 instanceid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->instanceid(), output);
  }

  // optional uint32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
}

::google::protobuf::uint8* CSiteLicense_ClientSeatCheckout_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 instanceid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->instanceid(), target);
  }

  // optional uint32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  return target;
}

size_t CSiteLicense_ClientSeatCheckout_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 instanceid = 2;
    if (has_instanceid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteLicense_ClientSeatCheckout_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_ClientSeatCheckout_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_ClientSeatCheckout_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
    MergeFrom(*source);
  }
}

void CSiteLicense_ClientSeatCheckout_Request::MergeFrom(const CSiteLicense_ClientSeatCheckout_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      instanceid_ = from.instanceid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSiteLicense_ClientSeatCheckout_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_ClientSeatCheckout_Request::CopyFrom(const CSiteLicense_ClientSeatCheckout_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteLicense_ClientSeatCheckout_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_ClientSeatCheckout_Request::IsInitialized() const {
  return true;
}

void CSiteLicense_ClientSeatCheckout_Request::Swap(CSiteLicense_ClientSeatCheckout_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_ClientSeatCheckout_Request::InternalSwap(CSiteLicense_ClientSeatCheckout_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(instanceid_, other->instanceid_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteLicense_ClientSeatCheckout_Request::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteLicense_ClientSeatCheckout_Request

// optional fixed64 steamid = 1;
bool CSiteLicense_ClientSeatCheckout_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSiteLicense_ClientSeatCheckout_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CSiteLicense_ClientSeatCheckout_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSiteLicense_ClientSeatCheckout_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CSiteLicense_ClientSeatCheckout_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_ClientSeatCheckout_Request.steamid)
  return steamid_;
}
void CSiteLicense_ClientSeatCheckout_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_ClientSeatCheckout_Request.steamid)
}

// optional fixed64 instanceid = 2;
bool CSiteLicense_ClientSeatCheckout_Request::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSiteLicense_ClientSeatCheckout_Request::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
void CSiteLicense_ClientSeatCheckout_Request::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSiteLicense_ClientSeatCheckout_Request::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
::google::protobuf::uint64 CSiteLicense_ClientSeatCheckout_Request::instanceid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_ClientSeatCheckout_Request.instanceid)
  return instanceid_;
}
void CSiteLicense_ClientSeatCheckout_Request::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_ClientSeatCheckout_Request.instanceid)
}

// optional uint32 appid = 3;
bool CSiteLicense_ClientSeatCheckout_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSiteLicense_ClientSeatCheckout_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
void CSiteLicense_ClientSeatCheckout_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSiteLicense_ClientSeatCheckout_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CSiteLicense_ClientSeatCheckout_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_ClientSeatCheckout_Request.appid)
  return appid_;
}
void CSiteLicense_ClientSeatCheckout_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_ClientSeatCheckout_Request.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_ClientSeatCheckout_Response::CSiteLicense_ClientSeatCheckout_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
}
CSiteLicense_ClientSeatCheckout_Response::CSiteLicense_ClientSeatCheckout_Response(const CSiteLicense_ClientSeatCheckout_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
}

void CSiteLicense_ClientSeatCheckout_Response::SharedCtor() {
  _cached_size_ = 0;
}

CSiteLicense_ClientSeatCheckout_Response::~CSiteLicense_ClientSeatCheckout_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  SharedDtor();
}

void CSiteLicense_ClientSeatCheckout_Response::SharedDtor() {
}

void CSiteLicense_ClientSeatCheckout_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteLicense_ClientSeatCheckout_Response::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_ClientSeatCheckout_Response& CSiteLicense_ClientSeatCheckout_Response::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteLicense_ClientSeatCheckout_Response* CSiteLicense_ClientSeatCheckout_Response::New(::google::protobuf::Arena* arena) const {
  CSiteLicense_ClientSeatCheckout_Response* n = new CSiteLicense_ClientSeatCheckout_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteLicense_ClientSeatCheckout_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_ClientSeatCheckout_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  return false;
#undef DO_
}

void CSiteLicense_ClientSeatCheckout_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
}

::google::protobuf::uint8* CSiteLicense_ClientSeatCheckout_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  return target;
}

size_t CSiteLicense_ClientSeatCheckout_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteLicense_ClientSeatCheckout_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_ClientSeatCheckout_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_ClientSeatCheckout_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
    MergeFrom(*source);
  }
}

void CSiteLicense_ClientSeatCheckout_Response::MergeFrom(const CSiteLicense_ClientSeatCheckout_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSiteLicense_ClientSeatCheckout_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_ClientSeatCheckout_Response::CopyFrom(const CSiteLicense_ClientSeatCheckout_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteLicense_ClientSeatCheckout_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_ClientSeatCheckout_Response::IsInitialized() const {
  return true;
}

void CSiteLicense_ClientSeatCheckout_Response::Swap(CSiteLicense_ClientSeatCheckout_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_ClientSeatCheckout_Response::InternalSwap(CSiteLicense_ClientSeatCheckout_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteLicense_ClientSeatCheckout_Response::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteLicense_ClientSeatCheckout_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_ClientGetAvailableSeats_Request::kSteamidFieldNumber;
const int CSiteLicense_ClientGetAvailableSeats_Request::kInstanceidFieldNumber;
const int CSiteLicense_ClientGetAvailableSeats_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_ClientGetAvailableSeats_Request::CSiteLicense_ClientGetAvailableSeats_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request)
}
CSiteLicense_ClientGetAvailableSeats_Request::CSiteLicense_ClientGetAvailableSeats_Request(const CSiteLicense_ClientGetAvailableSeats_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request)
}

void CSiteLicense_ClientGetAvailableSeats_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
}

CSiteLicense_ClientGetAvailableSeats_Request::~CSiteLicense_ClientGetAvailableSeats_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request)
  SharedDtor();
}

void CSiteLicense_ClientGetAvailableSeats_Request::SharedDtor() {
}

void CSiteLicense_ClientGetAvailableSeats_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteLicense_ClientGetAvailableSeats_Request::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_ClientGetAvailableSeats_Request& CSiteLicense_ClientGetAvailableSeats_Request::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteLicense_ClientGetAvailableSeats_Request* CSiteLicense_ClientGetAvailableSeats_Request::New(::google::protobuf::Arena* arena) const {
  CSiteLicense_ClientGetAvailableSeats_Request* n = new CSiteLicense_ClientGetAvailableSeats_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteLicense_ClientGetAvailableSeats_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_ClientGetAvailableSeats_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 instanceid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_instanceid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &instanceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request)
  return false;
#undef DO_
}

void CSiteLicense_ClientGetAvailableSeats_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 instanceid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->instanceid(), output);
  }

  // optional uint32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request)
}

::google::protobuf::uint8* CSiteLicense_ClientGetAvailableSeats_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 instanceid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->instanceid(), target);
  }

  // optional uint32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request)
  return target;
}

size_t CSiteLicense_ClientGetAvailableSeats_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 instanceid = 2;
    if (has_instanceid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteLicense_ClientGetAvailableSeats_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_ClientGetAvailableSeats_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_ClientGetAvailableSeats_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request)
    MergeFrom(*source);
  }
}

void CSiteLicense_ClientGetAvailableSeats_Request::MergeFrom(const CSiteLicense_ClientGetAvailableSeats_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      instanceid_ = from.instanceid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSiteLicense_ClientGetAvailableSeats_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_ClientGetAvailableSeats_Request::CopyFrom(const CSiteLicense_ClientGetAvailableSeats_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_ClientGetAvailableSeats_Request::IsInitialized() const {
  return true;
}

void CSiteLicense_ClientGetAvailableSeats_Request::Swap(CSiteLicense_ClientGetAvailableSeats_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_ClientGetAvailableSeats_Request::InternalSwap(CSiteLicense_ClientGetAvailableSeats_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(instanceid_, other->instanceid_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteLicense_ClientGetAvailableSeats_Request::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteLicense_ClientGetAvailableSeats_Request

// optional fixed64 steamid = 1;
bool CSiteLicense_ClientGetAvailableSeats_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSiteLicense_ClientGetAvailableSeats_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CSiteLicense_ClientGetAvailableSeats_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSiteLicense_ClientGetAvailableSeats_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CSiteLicense_ClientGetAvailableSeats_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request.steamid)
  return steamid_;
}
void CSiteLicense_ClientGetAvailableSeats_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request.steamid)
}

// optional fixed64 instanceid = 2;
bool CSiteLicense_ClientGetAvailableSeats_Request::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSiteLicense_ClientGetAvailableSeats_Request::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
void CSiteLicense_ClientGetAvailableSeats_Request::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSiteLicense_ClientGetAvailableSeats_Request::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
::google::protobuf::uint64 CSiteLicense_ClientGetAvailableSeats_Request::instanceid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request.instanceid)
  return instanceid_;
}
void CSiteLicense_ClientGetAvailableSeats_Request::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request.instanceid)
}

// optional uint32 appid = 3;
bool CSiteLicense_ClientGetAvailableSeats_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSiteLicense_ClientGetAvailableSeats_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
void CSiteLicense_ClientGetAvailableSeats_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSiteLicense_ClientGetAvailableSeats_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CSiteLicense_ClientGetAvailableSeats_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request.appid)
  return appid_;
}
void CSiteLicense_ClientGetAvailableSeats_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_ClientGetAvailableSeats_Request.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSiteLicense_ClientGetAvailableSeats_Response::kAvailableSeatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSiteLicense_ClientGetAvailableSeats_Response::CSiteLicense_ClientGetAvailableSeats_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CSiteLicense_ClientGetAvailableSeats_Response)
}
CSiteLicense_ClientGetAvailableSeats_Response::CSiteLicense_ClientGetAvailableSeats_Response(const CSiteLicense_ClientGetAvailableSeats_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  available_seats_ = from.available_seats_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CSiteLicense_ClientGetAvailableSeats_Response)
}

void CSiteLicense_ClientGetAvailableSeats_Response::SharedCtor() {
  _cached_size_ = 0;
  available_seats_ = 0u;
}

CSiteLicense_ClientGetAvailableSeats_Response::~CSiteLicense_ClientGetAvailableSeats_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CSiteLicense_ClientGetAvailableSeats_Response)
  SharedDtor();
}

void CSiteLicense_ClientGetAvailableSeats_Response::SharedDtor() {
}

void CSiteLicense_ClientGetAvailableSeats_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSiteLicense_ClientGetAvailableSeats_Response::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSiteLicense_ClientGetAvailableSeats_Response& CSiteLicense_ClientGetAvailableSeats_Response::default_instance() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSiteLicense_ClientGetAvailableSeats_Response* CSiteLicense_ClientGetAvailableSeats_Response::New(::google::protobuf::Arena* arena) const {
  CSiteLicense_ClientGetAvailableSeats_Response* n = new CSiteLicense_ClientGetAvailableSeats_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSiteLicense_ClientGetAvailableSeats_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CSiteLicense_ClientGetAvailableSeats_Response)
  available_seats_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSiteLicense_ClientGetAvailableSeats_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CSiteLicense_ClientGetAvailableSeats_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 available_seats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_available_seats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &available_seats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CSiteLicense_ClientGetAvailableSeats_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CSiteLicense_ClientGetAvailableSeats_Response)
  return false;
#undef DO_
}

void CSiteLicense_ClientGetAvailableSeats_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CSiteLicense_ClientGetAvailableSeats_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 available_seats = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->available_seats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CSiteLicense_ClientGetAvailableSeats_Response)
}

::google::protobuf::uint8* CSiteLicense_ClientGetAvailableSeats_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CSiteLicense_ClientGetAvailableSeats_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 available_seats = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->available_seats(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CSiteLicense_ClientGetAvailableSeats_Response)
  return target;
}

size_t CSiteLicense_ClientGetAvailableSeats_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CSiteLicense_ClientGetAvailableSeats_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 available_seats = 1;
  if (has_available_seats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->available_seats());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSiteLicense_ClientGetAvailableSeats_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CSiteLicense_ClientGetAvailableSeats_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CSiteLicense_ClientGetAvailableSeats_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSiteLicense_ClientGetAvailableSeats_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CSiteLicense_ClientGetAvailableSeats_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CSiteLicense_ClientGetAvailableSeats_Response)
    MergeFrom(*source);
  }
}

void CSiteLicense_ClientGetAvailableSeats_Response::MergeFrom(const CSiteLicense_ClientGetAvailableSeats_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CSiteLicense_ClientGetAvailableSeats_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_available_seats()) {
    set_available_seats(from.available_seats());
  }
}

void CSiteLicense_ClientGetAvailableSeats_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CSiteLicense_ClientGetAvailableSeats_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSiteLicense_ClientGetAvailableSeats_Response::CopyFrom(const CSiteLicense_ClientGetAvailableSeats_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CSiteLicense_ClientGetAvailableSeats_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_ClientGetAvailableSeats_Response::IsInitialized() const {
  return true;
}

void CSiteLicense_ClientGetAvailableSeats_Response::Swap(CSiteLicense_ClientGetAvailableSeats_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSiteLicense_ClientGetAvailableSeats_Response::InternalSwap(CSiteLicense_ClientGetAvailableSeats_Response* other) {
  std::swap(available_seats_, other->available_seats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSiteLicense_ClientGetAvailableSeats_Response::GetMetadata() const {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSiteLicense_ClientGetAvailableSeats_Response

// optional uint32 available_seats = 1;
bool CSiteLicense_ClientGetAvailableSeats_Response::has_available_seats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSiteLicense_ClientGetAvailableSeats_Response::set_has_available_seats() {
  _has_bits_[0] |= 0x00000001u;
}
void CSiteLicense_ClientGetAvailableSeats_Response::clear_has_available_seats() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSiteLicense_ClientGetAvailableSeats_Response::clear_available_seats() {
  available_seats_ = 0u;
  clear_has_available_seats();
}
::google::protobuf::uint32 CSiteLicense_ClientGetAvailableSeats_Response::available_seats() const {
  // @@protoc_insertion_point(field_get:proto.steam.CSiteLicense_ClientGetAvailableSeats_Response.available_seats)
  return available_seats_;
}
void CSiteLicense_ClientGetAvailableSeats_Response::set_available_seats(::google::protobuf::uint32 value) {
  set_has_available_seats();
  available_seats_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CSiteLicense_ClientGetAvailableSeats_Response.available_seats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

SiteManagerClient::~SiteManagerClient() {}

const ::google::protobuf::ServiceDescriptor* SiteManagerClient::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* SiteManagerClient::GetDescriptor() {
  return descriptor();
}

void SiteManagerClient::IncomingClient(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CSiteManagerClient_IncomingClient_Request*,
                         ::proto::steam::CSiteManagerClient_IncomingClient_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method IncomingClient() not implemented.");
  done->Run();
}

void SiteManagerClient::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      IncomingClient(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CSiteManagerClient_IncomingClient_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CSiteManagerClient_IncomingClient_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& SiteManagerClient::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CSiteManagerClient_IncomingClient_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& SiteManagerClient::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CSiteManagerClient_IncomingClient_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

SiteManagerClient_Stub::SiteManagerClient_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SiteManagerClient_Stub::SiteManagerClient_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
SiteManagerClient_Stub::~SiteManagerClient_Stub() {
  if (owns_channel_) delete channel_;
}

void SiteManagerClient_Stub::IncomingClient(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CSiteManagerClient_IncomingClient_Request* request,
                              ::proto::steam::CSiteManagerClient_IncomingClient_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

SiteLicense::~SiteLicense() {}

const ::google::protobuf::ServiceDescriptor* SiteLicense::descriptor() {
  protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_service_descriptors[1];
}

const ::google::protobuf::ServiceDescriptor* SiteLicense::GetDescriptor() {
  return descriptor();
}

void SiteLicense::InitiateAssociation(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CSiteLicense_InitiateAssociation_Request*,
                         ::proto::steam::CSiteLicense_InitiateAssociation_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method InitiateAssociation() not implemented.");
  done->Run();
}

void SiteLicense::LCSAuthenticate(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CSiteLicense_LCSAuthenticate_Request*,
                         ::proto::steam::CSiteLicense_LCSAuthenticate_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LCSAuthenticate() not implemented.");
  done->Run();
}

void SiteLicense::LCSAssociateUser(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CSiteLicense_LCSAssociateUser_Request*,
                         ::proto::steam::CSiteLicense_LCSAssociateUser_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LCSAssociateUser() not implemented.");
  done->Run();
}

void SiteLicense::ClientSeatCheckout(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CSiteLicense_ClientSeatCheckout_Request*,
                         ::proto::steam::CSiteLicense_ClientSeatCheckout_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientSeatCheckout() not implemented.");
  done->Run();
}

void SiteLicense::ClientGetAvailableSeats(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CSiteLicense_ClientGetAvailableSeats_Request*,
                         ::proto::steam::CSiteLicense_ClientGetAvailableSeats_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientGetAvailableSeats() not implemented.");
  done->Run();
}

void SiteLicense::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fsite_5flicense_2esteamclient_2eproto::file_level_service_descriptors[1]);
  switch(method->index()) {
    case 0:
      InitiateAssociation(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CSiteLicense_InitiateAssociation_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CSiteLicense_InitiateAssociation_Response*>(response),
             done);
      break;
    case 1:
      LCSAuthenticate(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CSiteLicense_LCSAuthenticate_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CSiteLicense_LCSAuthenticate_Response*>(response),
             done);
      break;
    case 2:
      LCSAssociateUser(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CSiteLicense_LCSAssociateUser_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CSiteLicense_LCSAssociateUser_Response*>(response),
             done);
      break;
    case 3:
      ClientSeatCheckout(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CSiteLicense_ClientSeatCheckout_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CSiteLicense_ClientSeatCheckout_Response*>(response),
             done);
      break;
    case 4:
      ClientGetAvailableSeats(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CSiteLicense_ClientGetAvailableSeats_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CSiteLicense_ClientGetAvailableSeats_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& SiteLicense::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CSiteLicense_InitiateAssociation_Request::default_instance();
    case 1:
      return ::proto::steam::CSiteLicense_LCSAuthenticate_Request::default_instance();
    case 2:
      return ::proto::steam::CSiteLicense_LCSAssociateUser_Request::default_instance();
    case 3:
      return ::proto::steam::CSiteLicense_ClientSeatCheckout_Request::default_instance();
    case 4:
      return ::proto::steam::CSiteLicense_ClientGetAvailableSeats_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& SiteLicense::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CSiteLicense_InitiateAssociation_Response::default_instance();
    case 1:
      return ::proto::steam::CSiteLicense_LCSAuthenticate_Response::default_instance();
    case 2:
      return ::proto::steam::CSiteLicense_LCSAssociateUser_Response::default_instance();
    case 3:
      return ::proto::steam::CSiteLicense_ClientSeatCheckout_Response::default_instance();
    case 4:
      return ::proto::steam::CSiteLicense_ClientGetAvailableSeats_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

SiteLicense_Stub::SiteLicense_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SiteLicense_Stub::SiteLicense_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
SiteLicense_Stub::~SiteLicense_Stub() {
  if (owns_channel_) delete channel_;
}

void SiteLicense_Stub::InitiateAssociation(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CSiteLicense_InitiateAssociation_Request* request,
                              ::proto::steam::CSiteLicense_InitiateAssociation_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void SiteLicense_Stub::LCSAuthenticate(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CSiteLicense_LCSAuthenticate_Request* request,
                              ::proto::steam::CSiteLicense_LCSAuthenticate_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void SiteLicense_Stub::LCSAssociateUser(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CSiteLicense_LCSAssociateUser_Request* request,
                              ::proto::steam::CSiteLicense_LCSAssociateUser_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void SiteLicense_Stub::ClientSeatCheckout(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CSiteLicense_ClientSeatCheckout_Request* request,
                              ::proto::steam::CSiteLicense_ClientSeatCheckout_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void SiteLicense_Stub::ClientGetAvailableSeats(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CSiteLicense_ClientGetAvailableSeats_Request* request,
                              ::proto::steam::CSiteLicense_ClientGetAvailableSeats_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
