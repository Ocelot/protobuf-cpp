// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_offline.steamclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_offline.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class COffline_GetOfflineLogonTicket_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<COffline_GetOfflineLogonTicket_Request> {
} _COffline_GetOfflineLogonTicket_Request_default_instance_;
class COffline_GetOfflineLogonTicket_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<COffline_GetOfflineLogonTicket_Response> {
} _COffline_GetOfflineLogonTicket_Response_default_instance_;
class COffline_GetUnsignedOfflineLogonTicket_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<COffline_GetUnsignedOfflineLogonTicket_Request> {
} _COffline_GetUnsignedOfflineLogonTicket_Request_default_instance_;
class COffline_OfflineLogonTicketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<COffline_OfflineLogonTicket> {
} _COffline_OfflineLogonTicket_default_instance_;
class COffline_GetUnsignedOfflineLogonTicket_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<COffline_GetUnsignedOfflineLogonTicket_Response> {
} _COffline_GetUnsignedOfflineLogonTicket_Response_default_instance_;

namespace protobuf_steammessages_5foffline_2esteamclient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COffline_GetOfflineLogonTicket_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COffline_GetOfflineLogonTicket_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COffline_GetOfflineLogonTicket_Request, priority_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COffline_GetOfflineLogonTicket_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COffline_GetOfflineLogonTicket_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COffline_GetOfflineLogonTicket_Response, serialized_ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COffline_GetOfflineLogonTicket_Response, signature_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COffline_GetUnsignedOfflineLogonTicket_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COffline_GetUnsignedOfflineLogonTicket_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COffline_OfflineLogonTicket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COffline_OfflineLogonTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COffline_OfflineLogonTicket, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COffline_OfflineLogonTicket, rtime32_creation_time_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COffline_GetUnsignedOfflineLogonTicket_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COffline_GetUnsignedOfflineLogonTicket_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COffline_GetUnsignedOfflineLogonTicket_Response, ticket_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(COffline_GetOfflineLogonTicket_Request)},
  { 7, 14, sizeof(COffline_GetOfflineLogonTicket_Response)},
  { 16, 21, sizeof(COffline_GetUnsignedOfflineLogonTicket_Request)},
  { 21, 28, sizeof(COffline_OfflineLogonTicket)},
  { 30, 36, sizeof(COffline_GetUnsignedOfflineLogonTicket_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_COffline_GetOfflineLogonTicket_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_COffline_GetOfflineLogonTicket_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_COffline_GetUnsignedOfflineLogonTicket_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_COffline_OfflineLogonTicket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_COffline_GetUnsignedOfflineLogonTicket_Response_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_offline.steamclient.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _COffline_GetOfflineLogonTicket_Request_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _COffline_GetOfflineLogonTicket_Response_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _COffline_GetUnsignedOfflineLogonTicket_Request_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _COffline_OfflineLogonTicket_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _COffline_GetUnsignedOfflineLogonTicket_Response_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::InitDefaults();
  _COffline_GetOfflineLogonTicket_Request_default_instance_.DefaultConstruct();
  _COffline_GetOfflineLogonTicket_Response_default_instance_.DefaultConstruct();
  _COffline_GetUnsignedOfflineLogonTicket_Request_default_instance_.DefaultConstruct();
  _COffline_OfflineLogonTicket_default_instance_.DefaultConstruct();
  _COffline_GetUnsignedOfflineLogonTicket_Response_default_instance_.DefaultConstruct();
  _COffline_GetUnsignedOfflineLogonTicket_Response_default_instance_.get_mutable()->ticket_ = const_cast< ::proto::steam::COffline_OfflineLogonTicket*>(
      ::proto::steam::COffline_OfflineLogonTicket::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\'steammessages_offline.steamclient.prot"
      "o\022\013proto.steam\032,steammessages_unified_ba"
      "se.steamclient.proto\":\n&COffline_GetOffl"
      "ineLogonTicket_Request\022\020\n\010priority\030\001 \001(\r"
      "\"W\n\'COffline_GetOfflineLogonTicket_Respo"
      "nse\022\031\n\021serialized_ticket\030\001 \001(\014\022\021\n\tsignat"
      "ure\030\002 \001(\014\"0\n.COffline_GetUnsignedOffline"
      "LogonTicket_Request\"O\n\033COffline_OfflineL"
      "ogonTicket\022\021\n\taccountid\030\001 \001(\r\022\035\n\025rtime32"
      "_creation_time\030\002 \001(\007\"k\n/COffline_GetUnsi"
      "gnedOfflineLogonTicket_Response\0228\n\006ticke"
      "t\030\001 \001(\0132(.proto.steam.COffline_OfflineLo"
      "gonTicket2\323\003\n\007Offline\022\315\001\n\025GetOfflineLogo"
      "nTicket\0223.proto.steam.COffline_GetOfflin"
      "eLogonTicket_Request\0324.proto.steam.COffl"
      "ine_GetOfflineLogonTicket_Response\"I\202\265\030E"
      "Get a serialized and signed offline logo"
      "n ticket for the current user\022\331\001\n\035GetUns"
      "ignedOfflineLogonTicket\022;.proto.steam.CO"
      "ffline_GetUnsignedOfflineLogonTicket_Req"
      "uest\032<.proto.steam.COffline_GetUnsignedO"
      "fflineLogonTicket_Response\"=\202\265\0309Get an u"
      "nsigned offline logon ticket for the cur"
      "rent user\032\034\202\265\030\030Offline settings serviceB"
      "\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 964);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_offline.steamclient.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5foffline_2esteamclient_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int COffline_GetOfflineLogonTicket_Request::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

COffline_GetOfflineLogonTicket_Request::COffline_GetOfflineLogonTicket_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5foffline_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.COffline_GetOfflineLogonTicket_Request)
}
COffline_GetOfflineLogonTicket_Request::COffline_GetOfflineLogonTicket_Request(const COffline_GetOfflineLogonTicket_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.COffline_GetOfflineLogonTicket_Request)
}

void COffline_GetOfflineLogonTicket_Request::SharedCtor() {
  _cached_size_ = 0;
  priority_ = 0u;
}

COffline_GetOfflineLogonTicket_Request::~COffline_GetOfflineLogonTicket_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.COffline_GetOfflineLogonTicket_Request)
  SharedDtor();
}

void COffline_GetOfflineLogonTicket_Request::SharedDtor() {
}

void COffline_GetOfflineLogonTicket_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* COffline_GetOfflineLogonTicket_Request::descriptor() {
  protobuf_steammessages_5foffline_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5foffline_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const COffline_GetOfflineLogonTicket_Request& COffline_GetOfflineLogonTicket_Request::default_instance() {
  protobuf_steammessages_5foffline_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

COffline_GetOfflineLogonTicket_Request* COffline_GetOfflineLogonTicket_Request::New(::google::protobuf::Arena* arena) const {
  COffline_GetOfflineLogonTicket_Request* n = new COffline_GetOfflineLogonTicket_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void COffline_GetOfflineLogonTicket_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.COffline_GetOfflineLogonTicket_Request)
  priority_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool COffline_GetOfflineLogonTicket_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.COffline_GetOfflineLogonTicket_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 priority = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.COffline_GetOfflineLogonTicket_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.COffline_GetOfflineLogonTicket_Request)
  return false;
#undef DO_
}

void COffline_GetOfflineLogonTicket_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.COffline_GetOfflineLogonTicket_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 priority = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->priority(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.COffline_GetOfflineLogonTicket_Request)
}

::google::protobuf::uint8* COffline_GetOfflineLogonTicket_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.COffline_GetOfflineLogonTicket_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 priority = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->priority(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.COffline_GetOfflineLogonTicket_Request)
  return target;
}

size_t COffline_GetOfflineLogonTicket_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.COffline_GetOfflineLogonTicket_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 priority = 1;
  if (has_priority()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void COffline_GetOfflineLogonTicket_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.COffline_GetOfflineLogonTicket_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const COffline_GetOfflineLogonTicket_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const COffline_GetOfflineLogonTicket_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.COffline_GetOfflineLogonTicket_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.COffline_GetOfflineLogonTicket_Request)
    MergeFrom(*source);
  }
}

void COffline_GetOfflineLogonTicket_Request::MergeFrom(const COffline_GetOfflineLogonTicket_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.COffline_GetOfflineLogonTicket_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_priority()) {
    set_priority(from.priority());
  }
}

void COffline_GetOfflineLogonTicket_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.COffline_GetOfflineLogonTicket_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COffline_GetOfflineLogonTicket_Request::CopyFrom(const COffline_GetOfflineLogonTicket_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.COffline_GetOfflineLogonTicket_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COffline_GetOfflineLogonTicket_Request::IsInitialized() const {
  return true;
}

void COffline_GetOfflineLogonTicket_Request::Swap(COffline_GetOfflineLogonTicket_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void COffline_GetOfflineLogonTicket_Request::InternalSwap(COffline_GetOfflineLogonTicket_Request* other) {
  std::swap(priority_, other->priority_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata COffline_GetOfflineLogonTicket_Request::GetMetadata() const {
  protobuf_steammessages_5foffline_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5foffline_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// COffline_GetOfflineLogonTicket_Request

// optional uint32 priority = 1;
bool COffline_GetOfflineLogonTicket_Request::has_priority() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void COffline_GetOfflineLogonTicket_Request::set_has_priority() {
  _has_bits_[0] |= 0x00000001u;
}
void COffline_GetOfflineLogonTicket_Request::clear_has_priority() {
  _has_bits_[0] &= ~0x00000001u;
}
void COffline_GetOfflineLogonTicket_Request::clear_priority() {
  priority_ = 0u;
  clear_has_priority();
}
::google::protobuf::uint32 COffline_GetOfflineLogonTicket_Request::priority() const {
  // @@protoc_insertion_point(field_get:proto.steam.COffline_GetOfflineLogonTicket_Request.priority)
  return priority_;
}
void COffline_GetOfflineLogonTicket_Request::set_priority(::google::protobuf::uint32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.COffline_GetOfflineLogonTicket_Request.priority)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int COffline_GetOfflineLogonTicket_Response::kSerializedTicketFieldNumber;
const int COffline_GetOfflineLogonTicket_Response::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

COffline_GetOfflineLogonTicket_Response::COffline_GetOfflineLogonTicket_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5foffline_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.COffline_GetOfflineLogonTicket_Response)
}
COffline_GetOfflineLogonTicket_Response::COffline_GetOfflineLogonTicket_Response(const COffline_GetOfflineLogonTicket_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serialized_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serialized_ticket()) {
    serialized_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_ticket_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.COffline_GetOfflineLogonTicket_Response)
}

void COffline_GetOfflineLogonTicket_Response::SharedCtor() {
  _cached_size_ = 0;
  serialized_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

COffline_GetOfflineLogonTicket_Response::~COffline_GetOfflineLogonTicket_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.COffline_GetOfflineLogonTicket_Response)
  SharedDtor();
}

void COffline_GetOfflineLogonTicket_Response::SharedDtor() {
  serialized_ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void COffline_GetOfflineLogonTicket_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* COffline_GetOfflineLogonTicket_Response::descriptor() {
  protobuf_steammessages_5foffline_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5foffline_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const COffline_GetOfflineLogonTicket_Response& COffline_GetOfflineLogonTicket_Response::default_instance() {
  protobuf_steammessages_5foffline_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

COffline_GetOfflineLogonTicket_Response* COffline_GetOfflineLogonTicket_Response::New(::google::protobuf::Arena* arena) const {
  COffline_GetOfflineLogonTicket_Response* n = new COffline_GetOfflineLogonTicket_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void COffline_GetOfflineLogonTicket_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.COffline_GetOfflineLogonTicket_Response)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_serialized_ticket()) {
      GOOGLE_DCHECK(!serialized_ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serialized_ticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_signature()) {
      GOOGLE_DCHECK(!signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*signature_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool COffline_GetOfflineLogonTicket_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.COffline_GetOfflineLogonTicket_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes serialized_ticket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.COffline_GetOfflineLogonTicket_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.COffline_GetOfflineLogonTicket_Response)
  return false;
#undef DO_
}

void COffline_GetOfflineLogonTicket_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.COffline_GetOfflineLogonTicket_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes serialized_ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->serialized_ticket(), output);
  }

  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.COffline_GetOfflineLogonTicket_Response)
}

::google::protobuf::uint8* COffline_GetOfflineLogonTicket_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.COffline_GetOfflineLogonTicket_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes serialized_ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->serialized_ticket(), target);
  }

  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.COffline_GetOfflineLogonTicket_Response)
  return target;
}

size_t COffline_GetOfflineLogonTicket_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.COffline_GetOfflineLogonTicket_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes serialized_ticket = 1;
    if (has_serialized_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_ticket());
    }

    // optional bytes signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void COffline_GetOfflineLogonTicket_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.COffline_GetOfflineLogonTicket_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const COffline_GetOfflineLogonTicket_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const COffline_GetOfflineLogonTicket_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.COffline_GetOfflineLogonTicket_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.COffline_GetOfflineLogonTicket_Response)
    MergeFrom(*source);
  }
}

void COffline_GetOfflineLogonTicket_Response::MergeFrom(const COffline_GetOfflineLogonTicket_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.COffline_GetOfflineLogonTicket_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serialized_ticket();
      serialized_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
  }
}

void COffline_GetOfflineLogonTicket_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.COffline_GetOfflineLogonTicket_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COffline_GetOfflineLogonTicket_Response::CopyFrom(const COffline_GetOfflineLogonTicket_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.COffline_GetOfflineLogonTicket_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COffline_GetOfflineLogonTicket_Response::IsInitialized() const {
  return true;
}

void COffline_GetOfflineLogonTicket_Response::Swap(COffline_GetOfflineLogonTicket_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void COffline_GetOfflineLogonTicket_Response::InternalSwap(COffline_GetOfflineLogonTicket_Response* other) {
  serialized_ticket_.Swap(&other->serialized_ticket_);
  signature_.Swap(&other->signature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata COffline_GetOfflineLogonTicket_Response::GetMetadata() const {
  protobuf_steammessages_5foffline_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5foffline_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// COffline_GetOfflineLogonTicket_Response

// optional bytes serialized_ticket = 1;
bool COffline_GetOfflineLogonTicket_Response::has_serialized_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void COffline_GetOfflineLogonTicket_Response::set_has_serialized_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
void COffline_GetOfflineLogonTicket_Response::clear_has_serialized_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
void COffline_GetOfflineLogonTicket_Response::clear_serialized_ticket() {
  serialized_ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serialized_ticket();
}
const ::std::string& COffline_GetOfflineLogonTicket_Response::serialized_ticket() const {
  // @@protoc_insertion_point(field_get:proto.steam.COffline_GetOfflineLogonTicket_Response.serialized_ticket)
  return serialized_ticket_.GetNoArena();
}
void COffline_GetOfflineLogonTicket_Response::set_serialized_ticket(const ::std::string& value) {
  set_has_serialized_ticket();
  serialized_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.COffline_GetOfflineLogonTicket_Response.serialized_ticket)
}
#if LANG_CXX11
void COffline_GetOfflineLogonTicket_Response::set_serialized_ticket(::std::string&& value) {
  set_has_serialized_ticket();
  serialized_ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.COffline_GetOfflineLogonTicket_Response.serialized_ticket)
}
#endif
void COffline_GetOfflineLogonTicket_Response::set_serialized_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serialized_ticket();
  serialized_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.COffline_GetOfflineLogonTicket_Response.serialized_ticket)
}
void COffline_GetOfflineLogonTicket_Response::set_serialized_ticket(const void* value, size_t size) {
  set_has_serialized_ticket();
  serialized_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.COffline_GetOfflineLogonTicket_Response.serialized_ticket)
}
::std::string* COffline_GetOfflineLogonTicket_Response::mutable_serialized_ticket() {
  set_has_serialized_ticket();
  // @@protoc_insertion_point(field_mutable:proto.steam.COffline_GetOfflineLogonTicket_Response.serialized_ticket)
  return serialized_ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* COffline_GetOfflineLogonTicket_Response::release_serialized_ticket() {
  // @@protoc_insertion_point(field_release:proto.steam.COffline_GetOfflineLogonTicket_Response.serialized_ticket)
  clear_has_serialized_ticket();
  return serialized_ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void COffline_GetOfflineLogonTicket_Response::set_allocated_serialized_ticket(::std::string* serialized_ticket) {
  if (serialized_ticket != NULL) {
    set_has_serialized_ticket();
  } else {
    clear_has_serialized_ticket();
  }
  serialized_ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialized_ticket);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.COffline_GetOfflineLogonTicket_Response.serialized_ticket)
}

// optional bytes signature = 2;
bool COffline_GetOfflineLogonTicket_Response::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void COffline_GetOfflineLogonTicket_Response::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
void COffline_GetOfflineLogonTicket_Response::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
void COffline_GetOfflineLogonTicket_Response::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
const ::std::string& COffline_GetOfflineLogonTicket_Response::signature() const {
  // @@protoc_insertion_point(field_get:proto.steam.COffline_GetOfflineLogonTicket_Response.signature)
  return signature_.GetNoArena();
}
void COffline_GetOfflineLogonTicket_Response::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.COffline_GetOfflineLogonTicket_Response.signature)
}
#if LANG_CXX11
void COffline_GetOfflineLogonTicket_Response::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.COffline_GetOfflineLogonTicket_Response.signature)
}
#endif
void COffline_GetOfflineLogonTicket_Response::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.COffline_GetOfflineLogonTicket_Response.signature)
}
void COffline_GetOfflineLogonTicket_Response::set_signature(const void* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.COffline_GetOfflineLogonTicket_Response.signature)
}
::std::string* COffline_GetOfflineLogonTicket_Response::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:proto.steam.COffline_GetOfflineLogonTicket_Response.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* COffline_GetOfflineLogonTicket_Response::release_signature() {
  // @@protoc_insertion_point(field_release:proto.steam.COffline_GetOfflineLogonTicket_Response.signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void COffline_GetOfflineLogonTicket_Response::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.COffline_GetOfflineLogonTicket_Response.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

COffline_GetUnsignedOfflineLogonTicket_Request::COffline_GetUnsignedOfflineLogonTicket_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5foffline_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
}
COffline_GetUnsignedOfflineLogonTicket_Request::COffline_GetUnsignedOfflineLogonTicket_Request(const COffline_GetUnsignedOfflineLogonTicket_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
}

void COffline_GetUnsignedOfflineLogonTicket_Request::SharedCtor() {
  _cached_size_ = 0;
}

COffline_GetUnsignedOfflineLogonTicket_Request::~COffline_GetUnsignedOfflineLogonTicket_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  SharedDtor();
}

void COffline_GetUnsignedOfflineLogonTicket_Request::SharedDtor() {
}

void COffline_GetUnsignedOfflineLogonTicket_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* COffline_GetUnsignedOfflineLogonTicket_Request::descriptor() {
  protobuf_steammessages_5foffline_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5foffline_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const COffline_GetUnsignedOfflineLogonTicket_Request& COffline_GetUnsignedOfflineLogonTicket_Request::default_instance() {
  protobuf_steammessages_5foffline_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

COffline_GetUnsignedOfflineLogonTicket_Request* COffline_GetUnsignedOfflineLogonTicket_Request::New(::google::protobuf::Arena* arena) const {
  COffline_GetUnsignedOfflineLogonTicket_Request* n = new COffline_GetUnsignedOfflineLogonTicket_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void COffline_GetUnsignedOfflineLogonTicket_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool COffline_GetUnsignedOfflineLogonTicket_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  return false;
#undef DO_
}

void COffline_GetUnsignedOfflineLogonTicket_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
}

::google::protobuf::uint8* COffline_GetUnsignedOfflineLogonTicket_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  return target;
}

size_t COffline_GetUnsignedOfflineLogonTicket_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void COffline_GetUnsignedOfflineLogonTicket_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const COffline_GetUnsignedOfflineLogonTicket_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const COffline_GetUnsignedOfflineLogonTicket_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
    MergeFrom(*source);
  }
}

void COffline_GetUnsignedOfflineLogonTicket_Request::MergeFrom(const COffline_GetUnsignedOfflineLogonTicket_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void COffline_GetUnsignedOfflineLogonTicket_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COffline_GetUnsignedOfflineLogonTicket_Request::CopyFrom(const COffline_GetUnsignedOfflineLogonTicket_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COffline_GetUnsignedOfflineLogonTicket_Request::IsInitialized() const {
  return true;
}

void COffline_GetUnsignedOfflineLogonTicket_Request::Swap(COffline_GetUnsignedOfflineLogonTicket_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void COffline_GetUnsignedOfflineLogonTicket_Request::InternalSwap(COffline_GetUnsignedOfflineLogonTicket_Request* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata COffline_GetUnsignedOfflineLogonTicket_Request::GetMetadata() const {
  protobuf_steammessages_5foffline_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5foffline_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// COffline_GetUnsignedOfflineLogonTicket_Request

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int COffline_OfflineLogonTicket::kAccountidFieldNumber;
const int COffline_OfflineLogonTicket::kRtime32CreationTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

COffline_OfflineLogonTicket::COffline_OfflineLogonTicket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5foffline_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.COffline_OfflineLogonTicket)
}
COffline_OfflineLogonTicket::COffline_OfflineLogonTicket(const COffline_OfflineLogonTicket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    reinterpret_cast<char*>(&rtime32_creation_time_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(rtime32_creation_time_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.COffline_OfflineLogonTicket)
}

void COffline_OfflineLogonTicket::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&accountid_, 0, reinterpret_cast<char*>(&rtime32_creation_time_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(rtime32_creation_time_));
}

COffline_OfflineLogonTicket::~COffline_OfflineLogonTicket() {
  // @@protoc_insertion_point(destructor:proto.steam.COffline_OfflineLogonTicket)
  SharedDtor();
}

void COffline_OfflineLogonTicket::SharedDtor() {
}

void COffline_OfflineLogonTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* COffline_OfflineLogonTicket::descriptor() {
  protobuf_steammessages_5foffline_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5foffline_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const COffline_OfflineLogonTicket& COffline_OfflineLogonTicket::default_instance() {
  protobuf_steammessages_5foffline_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

COffline_OfflineLogonTicket* COffline_OfflineLogonTicket::New(::google::protobuf::Arena* arena) const {
  COffline_OfflineLogonTicket* n = new COffline_OfflineLogonTicket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void COffline_OfflineLogonTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.COffline_OfflineLogonTicket)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&accountid_, 0, reinterpret_cast<char*>(&rtime32_creation_time_) -
      reinterpret_cast<char*>(&accountid_) + sizeof(rtime32_creation_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool COffline_OfflineLogonTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.COffline_OfflineLogonTicket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 rtime32_creation_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_rtime32_creation_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_creation_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.COffline_OfflineLogonTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.COffline_OfflineLogonTicket)
  return false;
#undef DO_
}

void COffline_OfflineLogonTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.COffline_OfflineLogonTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional fixed32 rtime32_creation_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->rtime32_creation_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.COffline_OfflineLogonTicket)
}

::google::protobuf::uint8* COffline_OfflineLogonTicket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.COffline_OfflineLogonTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional fixed32 rtime32_creation_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->rtime32_creation_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.COffline_OfflineLogonTicket)
  return target;
}

size_t COffline_OfflineLogonTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.COffline_OfflineLogonTicket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional fixed32 rtime32_creation_time = 2;
    if (has_rtime32_creation_time()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void COffline_OfflineLogonTicket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.COffline_OfflineLogonTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const COffline_OfflineLogonTicket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const COffline_OfflineLogonTicket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.COffline_OfflineLogonTicket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.COffline_OfflineLogonTicket)
    MergeFrom(*source);
  }
}

void COffline_OfflineLogonTicket::MergeFrom(const COffline_OfflineLogonTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.COffline_OfflineLogonTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      rtime32_creation_time_ = from.rtime32_creation_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void COffline_OfflineLogonTicket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.COffline_OfflineLogonTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COffline_OfflineLogonTicket::CopyFrom(const COffline_OfflineLogonTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.COffline_OfflineLogonTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COffline_OfflineLogonTicket::IsInitialized() const {
  return true;
}

void COffline_OfflineLogonTicket::Swap(COffline_OfflineLogonTicket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void COffline_OfflineLogonTicket::InternalSwap(COffline_OfflineLogonTicket* other) {
  std::swap(accountid_, other->accountid_);
  std::swap(rtime32_creation_time_, other->rtime32_creation_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata COffline_OfflineLogonTicket::GetMetadata() const {
  protobuf_steammessages_5foffline_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5foffline_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// COffline_OfflineLogonTicket

// optional uint32 accountid = 1;
bool COffline_OfflineLogonTicket::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void COffline_OfflineLogonTicket::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
void COffline_OfflineLogonTicket::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
void COffline_OfflineLogonTicket::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
::google::protobuf::uint32 COffline_OfflineLogonTicket::accountid() const {
  // @@protoc_insertion_point(field_get:proto.steam.COffline_OfflineLogonTicket.accountid)
  return accountid_;
}
void COffline_OfflineLogonTicket::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.COffline_OfflineLogonTicket.accountid)
}

// optional fixed32 rtime32_creation_time = 2;
bool COffline_OfflineLogonTicket::has_rtime32_creation_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void COffline_OfflineLogonTicket::set_has_rtime32_creation_time() {
  _has_bits_[0] |= 0x00000002u;
}
void COffline_OfflineLogonTicket::clear_has_rtime32_creation_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void COffline_OfflineLogonTicket::clear_rtime32_creation_time() {
  rtime32_creation_time_ = 0u;
  clear_has_rtime32_creation_time();
}
::google::protobuf::uint32 COffline_OfflineLogonTicket::rtime32_creation_time() const {
  // @@protoc_insertion_point(field_get:proto.steam.COffline_OfflineLogonTicket.rtime32_creation_time)
  return rtime32_creation_time_;
}
void COffline_OfflineLogonTicket::set_rtime32_creation_time(::google::protobuf::uint32 value) {
  set_has_rtime32_creation_time();
  rtime32_creation_time_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.COffline_OfflineLogonTicket.rtime32_creation_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int COffline_GetUnsignedOfflineLogonTicket_Response::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

COffline_GetUnsignedOfflineLogonTicket_Response::COffline_GetUnsignedOfflineLogonTicket_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5foffline_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
}
COffline_GetUnsignedOfflineLogonTicket_Response::COffline_GetUnsignedOfflineLogonTicket_Response(const COffline_GetUnsignedOfflineLogonTicket_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ticket()) {
    ticket_ = new ::proto::steam::COffline_OfflineLogonTicket(*from.ticket_);
  } else {
    ticket_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
}

void COffline_GetUnsignedOfflineLogonTicket_Response::SharedCtor() {
  _cached_size_ = 0;
  ticket_ = NULL;
}

COffline_GetUnsignedOfflineLogonTicket_Response::~COffline_GetUnsignedOfflineLogonTicket_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  SharedDtor();
}

void COffline_GetUnsignedOfflineLogonTicket_Response::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ticket_;
  }
}

void COffline_GetUnsignedOfflineLogonTicket_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* COffline_GetUnsignedOfflineLogonTicket_Response::descriptor() {
  protobuf_steammessages_5foffline_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5foffline_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const COffline_GetUnsignedOfflineLogonTicket_Response& COffline_GetUnsignedOfflineLogonTicket_Response::default_instance() {
  protobuf_steammessages_5foffline_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

COffline_GetUnsignedOfflineLogonTicket_Response* COffline_GetUnsignedOfflineLogonTicket_Response::New(::google::protobuf::Arena* arena) const {
  COffline_GetUnsignedOfflineLogonTicket_Response* n = new COffline_GetUnsignedOfflineLogonTicket_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void COffline_GetUnsignedOfflineLogonTicket_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  if (has_ticket()) {
    GOOGLE_DCHECK(ticket_ != NULL);
    ticket_->::proto::steam::COffline_OfflineLogonTicket::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool COffline_GetUnsignedOfflineLogonTicket_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.COffline_OfflineLogonTicket ticket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  return false;
#undef DO_
}

void COffline_GetUnsignedOfflineLogonTicket_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.COffline_OfflineLogonTicket ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ticket_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
}

::google::protobuf::uint8* COffline_GetUnsignedOfflineLogonTicket_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.COffline_OfflineLogonTicket ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ticket_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  return target;
}

size_t COffline_GetUnsignedOfflineLogonTicket_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.steam.COffline_OfflineLogonTicket ticket = 1;
  if (has_ticket()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ticket_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void COffline_GetUnsignedOfflineLogonTicket_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const COffline_GetUnsignedOfflineLogonTicket_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const COffline_GetUnsignedOfflineLogonTicket_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
    MergeFrom(*source);
  }
}

void COffline_GetUnsignedOfflineLogonTicket_Response::MergeFrom(const COffline_GetUnsignedOfflineLogonTicket_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ticket()) {
    mutable_ticket()->::proto::steam::COffline_OfflineLogonTicket::MergeFrom(from.ticket());
  }
}

void COffline_GetUnsignedOfflineLogonTicket_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COffline_GetUnsignedOfflineLogonTicket_Response::CopyFrom(const COffline_GetUnsignedOfflineLogonTicket_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COffline_GetUnsignedOfflineLogonTicket_Response::IsInitialized() const {
  return true;
}

void COffline_GetUnsignedOfflineLogonTicket_Response::Swap(COffline_GetUnsignedOfflineLogonTicket_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void COffline_GetUnsignedOfflineLogonTicket_Response::InternalSwap(COffline_GetUnsignedOfflineLogonTicket_Response* other) {
  std::swap(ticket_, other->ticket_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata COffline_GetUnsignedOfflineLogonTicket_Response::GetMetadata() const {
  protobuf_steammessages_5foffline_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5foffline_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// COffline_GetUnsignedOfflineLogonTicket_Response

// optional .proto.steam.COffline_OfflineLogonTicket ticket = 1;
bool COffline_GetUnsignedOfflineLogonTicket_Response::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void COffline_GetUnsignedOfflineLogonTicket_Response::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
void COffline_GetUnsignedOfflineLogonTicket_Response::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
void COffline_GetUnsignedOfflineLogonTicket_Response::clear_ticket() {
  if (ticket_ != NULL) ticket_->::proto::steam::COffline_OfflineLogonTicket::Clear();
  clear_has_ticket();
}
const ::proto::steam::COffline_OfflineLogonTicket& COffline_GetUnsignedOfflineLogonTicket_Response::ticket() const {
  // @@protoc_insertion_point(field_get:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response.ticket)
  return ticket_ != NULL ? *ticket_
                         : *::proto::steam::COffline_OfflineLogonTicket::internal_default_instance();
}
::proto::steam::COffline_OfflineLogonTicket* COffline_GetUnsignedOfflineLogonTicket_Response::mutable_ticket() {
  set_has_ticket();
  if (ticket_ == NULL) {
    ticket_ = new ::proto::steam::COffline_OfflineLogonTicket;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response.ticket)
  return ticket_;
}
::proto::steam::COffline_OfflineLogonTicket* COffline_GetUnsignedOfflineLogonTicket_Response::release_ticket() {
  // @@protoc_insertion_point(field_release:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response.ticket)
  clear_has_ticket();
  ::proto::steam::COffline_OfflineLogonTicket* temp = ticket_;
  ticket_ = NULL;
  return temp;
}
void COffline_GetUnsignedOfflineLogonTicket_Response::set_allocated_ticket(::proto::steam::COffline_OfflineLogonTicket* ticket) {
  delete ticket_;
  ticket_ = ticket;
  if (ticket) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response.ticket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Offline::~Offline() {}

const ::google::protobuf::ServiceDescriptor* Offline::descriptor() {
  protobuf_steammessages_5foffline_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5foffline_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* Offline::GetDescriptor() {
  return descriptor();
}

void Offline::GetOfflineLogonTicket(::google::protobuf::RpcController* controller,
                         const ::proto::steam::COffline_GetOfflineLogonTicket_Request*,
                         ::proto::steam::COffline_GetOfflineLogonTicket_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetOfflineLogonTicket() not implemented.");
  done->Run();
}

void Offline::GetUnsignedOfflineLogonTicket(::google::protobuf::RpcController* controller,
                         const ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Request*,
                         ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUnsignedOfflineLogonTicket() not implemented.");
  done->Run();
}

void Offline::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5foffline_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      GetOfflineLogonTicket(controller,
             ::google::protobuf::down_cast<const ::proto::steam::COffline_GetOfflineLogonTicket_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::COffline_GetOfflineLogonTicket_Response*>(response),
             done);
      break;
    case 1:
      GetUnsignedOfflineLogonTicket(controller,
             ::google::protobuf::down_cast<const ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Offline::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::COffline_GetOfflineLogonTicket_Request::default_instance();
    case 1:
      return ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& Offline::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::COffline_GetOfflineLogonTicket_Response::default_instance();
    case 1:
      return ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Offline_Stub::Offline_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Offline_Stub::Offline_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Offline_Stub::~Offline_Stub() {
  if (owns_channel_) delete channel_;
}

void Offline_Stub::GetOfflineLogonTicket(::google::protobuf::RpcController* controller,
                              const ::proto::steam::COffline_GetOfflineLogonTicket_Request* request,
                              ::proto::steam::COffline_GetOfflineLogonTicket_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Offline_Stub::GetUnsignedOfflineLogonTicket(::google::protobuf::RpcController* controller,
                              const ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Request* request,
                              ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
