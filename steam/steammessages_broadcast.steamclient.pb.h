// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_broadcast.steamclient.proto

#ifndef PROTOBUF_steammessages_5fbroadcast_2esteamclient_2eproto__INCLUDED
#define PROTOBUF_steammessages_5fbroadcast_2esteamclient_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
namespace steam {
class CBroadcast_BeginBroadcastSession_Request;
class CBroadcast_BeginBroadcastSession_RequestDefaultTypeInternal;
extern CBroadcast_BeginBroadcastSession_RequestDefaultTypeInternal _CBroadcast_BeginBroadcastSession_Request_default_instance_;
class CBroadcast_BeginBroadcastSession_Response;
class CBroadcast_BeginBroadcastSession_ResponseDefaultTypeInternal;
extern CBroadcast_BeginBroadcastSession_ResponseDefaultTypeInternal _CBroadcast_BeginBroadcastSession_Response_default_instance_;
class CBroadcast_BroadcastStatus_Notification;
class CBroadcast_BroadcastStatus_NotificationDefaultTypeInternal;
extern CBroadcast_BroadcastStatus_NotificationDefaultTypeInternal _CBroadcast_BroadcastStatus_Notification_default_instance_;
class CBroadcast_BroadcastViewerState_Notification;
class CBroadcast_BroadcastViewerState_NotificationDefaultTypeInternal;
extern CBroadcast_BroadcastViewerState_NotificationDefaultTypeInternal _CBroadcast_BroadcastViewerState_Notification_default_instance_;
class CBroadcast_EndBroadcastSession_Request;
class CBroadcast_EndBroadcastSession_RequestDefaultTypeInternal;
extern CBroadcast_EndBroadcastSession_RequestDefaultTypeInternal _CBroadcast_EndBroadcastSession_Request_default_instance_;
class CBroadcast_EndBroadcastSession_Response;
class CBroadcast_EndBroadcastSession_ResponseDefaultTypeInternal;
extern CBroadcast_EndBroadcastSession_ResponseDefaultTypeInternal _CBroadcast_EndBroadcastSession_Response_default_instance_;
class CBroadcast_GetBroadcastChatInfo_Request;
class CBroadcast_GetBroadcastChatInfo_RequestDefaultTypeInternal;
extern CBroadcast_GetBroadcastChatInfo_RequestDefaultTypeInternal _CBroadcast_GetBroadcastChatInfo_Request_default_instance_;
class CBroadcast_GetBroadcastChatInfo_Response;
class CBroadcast_GetBroadcastChatInfo_ResponseDefaultTypeInternal;
extern CBroadcast_GetBroadcastChatInfo_ResponseDefaultTypeInternal _CBroadcast_GetBroadcastChatInfo_Response_default_instance_;
class CBroadcast_GetBroadcastChatUserNames_Request;
class CBroadcast_GetBroadcastChatUserNames_RequestDefaultTypeInternal;
extern CBroadcast_GetBroadcastChatUserNames_RequestDefaultTypeInternal _CBroadcast_GetBroadcastChatUserNames_Request_default_instance_;
class CBroadcast_GetBroadcastChatUserNames_Response;
class CBroadcast_GetBroadcastChatUserNames_ResponseDefaultTypeInternal;
extern CBroadcast_GetBroadcastChatUserNames_ResponseDefaultTypeInternal _CBroadcast_GetBroadcastChatUserNames_Response_default_instance_;
class CBroadcast_GetBroadcastChatUserNames_Response_PersonaName;
class CBroadcast_GetBroadcastChatUserNames_Response_PersonaNameDefaultTypeInternal;
extern CBroadcast_GetBroadcastChatUserNames_Response_PersonaNameDefaultTypeInternal _CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_default_instance_;
class CBroadcast_GetBroadcastStatus_Request;
class CBroadcast_GetBroadcastStatus_RequestDefaultTypeInternal;
extern CBroadcast_GetBroadcastStatus_RequestDefaultTypeInternal _CBroadcast_GetBroadcastStatus_Request_default_instance_;
class CBroadcast_GetBroadcastStatus_Response;
class CBroadcast_GetBroadcastStatus_ResponseDefaultTypeInternal;
extern CBroadcast_GetBroadcastStatus_ResponseDefaultTypeInternal _CBroadcast_GetBroadcastStatus_Response_default_instance_;
class CBroadcast_InviteToBroadcast_Request;
class CBroadcast_InviteToBroadcast_RequestDefaultTypeInternal;
extern CBroadcast_InviteToBroadcast_RequestDefaultTypeInternal _CBroadcast_InviteToBroadcast_Request_default_instance_;
class CBroadcast_InviteToBroadcast_Response;
class CBroadcast_InviteToBroadcast_ResponseDefaultTypeInternal;
extern CBroadcast_InviteToBroadcast_ResponseDefaultTypeInternal _CBroadcast_InviteToBroadcast_Response_default_instance_;
class CBroadcast_MuteBroadcastChatUser_Request;
class CBroadcast_MuteBroadcastChatUser_RequestDefaultTypeInternal;
extern CBroadcast_MuteBroadcastChatUser_RequestDefaultTypeInternal _CBroadcast_MuteBroadcastChatUser_Request_default_instance_;
class CBroadcast_MuteBroadcastChatUser_Response;
class CBroadcast_MuteBroadcastChatUser_ResponseDefaultTypeInternal;
extern CBroadcast_MuteBroadcastChatUser_ResponseDefaultTypeInternal _CBroadcast_MuteBroadcastChatUser_Response_default_instance_;
class CBroadcast_NotifyBroadcastSessionHeartbeat_Notification;
class CBroadcast_NotifyBroadcastSessionHeartbeat_NotificationDefaultTypeInternal;
extern CBroadcast_NotifyBroadcastSessionHeartbeat_NotificationDefaultTypeInternal _CBroadcast_NotifyBroadcastSessionHeartbeat_Notification_default_instance_;
class CBroadcast_NotifyBroadcastUploadStop_Notification;
class CBroadcast_NotifyBroadcastUploadStop_NotificationDefaultTypeInternal;
extern CBroadcast_NotifyBroadcastUploadStop_NotificationDefaultTypeInternal _CBroadcast_NotifyBroadcastUploadStop_Notification_default_instance_;
class CBroadcast_PostChatMessage_Request;
class CBroadcast_PostChatMessage_RequestDefaultTypeInternal;
extern CBroadcast_PostChatMessage_RequestDefaultTypeInternal _CBroadcast_PostChatMessage_Request_default_instance_;
class CBroadcast_PostChatMessage_Response;
class CBroadcast_PostChatMessage_ResponseDefaultTypeInternal;
extern CBroadcast_PostChatMessage_ResponseDefaultTypeInternal _CBroadcast_PostChatMessage_Response_default_instance_;
class CBroadcast_RemoveUserChatText_Request;
class CBroadcast_RemoveUserChatText_RequestDefaultTypeInternal;
extern CBroadcast_RemoveUserChatText_RequestDefaultTypeInternal _CBroadcast_RemoveUserChatText_Request_default_instance_;
class CBroadcast_RemoveUserChatText_Response;
class CBroadcast_RemoveUserChatText_ResponseDefaultTypeInternal;
extern CBroadcast_RemoveUserChatText_ResponseDefaultTypeInternal _CBroadcast_RemoveUserChatText_Response_default_instance_;
class CBroadcast_SendBroadcastStateToServer_Request;
class CBroadcast_SendBroadcastStateToServer_RequestDefaultTypeInternal;
extern CBroadcast_SendBroadcastStateToServer_RequestDefaultTypeInternal _CBroadcast_SendBroadcastStateToServer_Request_default_instance_;
class CBroadcast_SendBroadcastStateToServer_Response;
class CBroadcast_SendBroadcastStateToServer_ResponseDefaultTypeInternal;
extern CBroadcast_SendBroadcastStateToServer_ResponseDefaultTypeInternal _CBroadcast_SendBroadcastStateToServer_Response_default_instance_;
class CBroadcast_SendThumbnailToRelay_Notification;
class CBroadcast_SendThumbnailToRelay_NotificationDefaultTypeInternal;
extern CBroadcast_SendThumbnailToRelay_NotificationDefaultTypeInternal _CBroadcast_SendThumbnailToRelay_Notification_default_instance_;
class CBroadcast_SessionClosed_Notification;
class CBroadcast_SessionClosed_NotificationDefaultTypeInternal;
extern CBroadcast_SessionClosed_NotificationDefaultTypeInternal _CBroadcast_SessionClosed_Notification_default_instance_;
class CBroadcast_StartBroadcastUpload_Request;
class CBroadcast_StartBroadcastUpload_RequestDefaultTypeInternal;
extern CBroadcast_StartBroadcastUpload_RequestDefaultTypeInternal _CBroadcast_StartBroadcastUpload_Request_default_instance_;
class CBroadcast_StartBroadcastUpload_Response;
class CBroadcast_StartBroadcastUpload_ResponseDefaultTypeInternal;
extern CBroadcast_StartBroadcastUpload_ResponseDefaultTypeInternal _CBroadcast_StartBroadcastUpload_Response_default_instance_;
class CBroadcast_StopBroadcastUpload_Notification;
class CBroadcast_StopBroadcastUpload_NotificationDefaultTypeInternal;
extern CBroadcast_StopBroadcastUpload_NotificationDefaultTypeInternal _CBroadcast_StopBroadcastUpload_Notification_default_instance_;
class CBroadcast_ViewerBroadcastInvite_Notification;
class CBroadcast_ViewerBroadcastInvite_NotificationDefaultTypeInternal;
extern CBroadcast_ViewerBroadcastInvite_NotificationDefaultTypeInternal _CBroadcast_ViewerBroadcastInvite_Notification_default_instance_;
class CBroadcast_WaitingBroadcastViewer_Notification;
class CBroadcast_WaitingBroadcastViewer_NotificationDefaultTypeInternal;
extern CBroadcast_WaitingBroadcastViewer_NotificationDefaultTypeInternal _CBroadcast_WaitingBroadcastViewer_Notification_default_instance_;
class CBroadcast_WatchBroadcast_Request;
class CBroadcast_WatchBroadcast_RequestDefaultTypeInternal;
extern CBroadcast_WatchBroadcast_RequestDefaultTypeInternal _CBroadcast_WatchBroadcast_Request_default_instance_;
class CBroadcast_WatchBroadcast_Response;
class CBroadcast_WatchBroadcast_ResponseDefaultTypeInternal;
extern CBroadcast_WatchBroadcast_ResponseDefaultTypeInternal _CBroadcast_WatchBroadcast_Response_default_instance_;
class NoResponse;
class NoResponseDefaultTypeInternal;
extern NoResponseDefaultTypeInternal _NoResponse_default_instance_;
}  // namespace steam
}  // namespace proto

namespace proto {
namespace steam {

namespace protobuf_steammessages_5fbroadcast_2esteamclient_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_steammessages_5fbroadcast_2esteamclient_2eproto

enum CBroadcast_WatchBroadcast_Response_EWatchResponse {
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseReady = 1,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseNotAvailable = 2,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseWaitingForApproval = 3,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseWaitingForStart = 4,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseInvalidSession = 5,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseTooManyBroadcasts = 6,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseWaitingForReconnect = 7,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseSystemNotSupported = 8,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseUserRestricted = 9,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseClientOutOfDate = 10,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponsePoorUploadQuality = 11,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseMissingSubscription = 12
};
bool CBroadcast_WatchBroadcast_Response_EWatchResponse_IsValid(int value);
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response_EWatchResponse_EWatchResponse_MIN = CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseReady;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response_EWatchResponse_EWatchResponse_MAX = CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseMissingSubscription;
const int CBroadcast_WatchBroadcast_Response_EWatchResponse_EWatchResponse_ARRAYSIZE = CBroadcast_WatchBroadcast_Response_EWatchResponse_EWatchResponse_MAX + 1;

const ::google::protobuf::EnumDescriptor* CBroadcast_WatchBroadcast_Response_EWatchResponse_descriptor();
inline const ::std::string& CBroadcast_WatchBroadcast_Response_EWatchResponse_Name(CBroadcast_WatchBroadcast_Response_EWatchResponse value) {
  return ::google::protobuf::internal::NameOfEnum(
    CBroadcast_WatchBroadcast_Response_EWatchResponse_descriptor(), value);
}
inline bool CBroadcast_WatchBroadcast_Response_EWatchResponse_Parse(
    const ::std::string& name, CBroadcast_WatchBroadcast_Response_EWatchResponse* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CBroadcast_WatchBroadcast_Response_EWatchResponse>(
    CBroadcast_WatchBroadcast_Response_EWatchResponse_descriptor(), name, value);
}
enum CBroadcast_BroadcastViewerState_Notification_EViewerState {
  CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerNeedsApproval = 1,
  CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerWatching = 2,
  CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerLeft = 3
};
bool CBroadcast_BroadcastViewerState_Notification_EViewerState_IsValid(int value);
const CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification_EViewerState_EViewerState_MIN = CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerNeedsApproval;
const CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification_EViewerState_EViewerState_MAX = CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerLeft;
const int CBroadcast_BroadcastViewerState_Notification_EViewerState_EViewerState_ARRAYSIZE = CBroadcast_BroadcastViewerState_Notification_EViewerState_EViewerState_MAX + 1;

const ::google::protobuf::EnumDescriptor* CBroadcast_BroadcastViewerState_Notification_EViewerState_descriptor();
inline const ::std::string& CBroadcast_BroadcastViewerState_Notification_EViewerState_Name(CBroadcast_BroadcastViewerState_Notification_EViewerState value) {
  return ::google::protobuf::internal::NameOfEnum(
    CBroadcast_BroadcastViewerState_Notification_EViewerState_descriptor(), value);
}
inline bool CBroadcast_BroadcastViewerState_Notification_EViewerState_Parse(
    const ::std::string& name, CBroadcast_BroadcastViewerState_Notification_EViewerState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CBroadcast_BroadcastViewerState_Notification_EViewerState>(
    CBroadcast_BroadcastViewerState_Notification_EViewerState_descriptor(), name, value);
}
// ===================================================================

class CBroadcast_BeginBroadcastSession_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_BeginBroadcastSession_Request) */ {
 public:
  CBroadcast_BeginBroadcastSession_Request();
  virtual ~CBroadcast_BeginBroadcastSession_Request();

  CBroadcast_BeginBroadcastSession_Request(const CBroadcast_BeginBroadcastSession_Request& from);

  inline CBroadcast_BeginBroadcastSession_Request& operator=(const CBroadcast_BeginBroadcastSession_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_BeginBroadcastSession_Request& default_instance();

  static inline const CBroadcast_BeginBroadcastSession_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_BeginBroadcastSession_Request*>(
               &_CBroadcast_BeginBroadcastSession_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CBroadcast_BeginBroadcastSession_Request* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_BeginBroadcastSession_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_BeginBroadcastSession_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_BeginBroadcastSession_Request& from);
  void MergeFrom(const CBroadcast_BeginBroadcastSession_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_BeginBroadcastSession_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string title = 4;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 4;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional uint64 gameid = 2;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 2;
  ::google::protobuf::uint64 gameid() const;
  void set_gameid(::google::protobuf::uint64 value);

  // optional uint64 client_instance_id = 3;
  bool has_client_instance_id() const;
  void clear_client_instance_id();
  static const int kClientInstanceIdFieldNumber = 3;
  ::google::protobuf::uint64 client_instance_id() const;
  void set_client_instance_id(::google::protobuf::uint64 value);

  // optional int32 permission = 1;
  bool has_permission() const;
  void clear_permission();
  static const int kPermissionFieldNumber = 1;
  ::google::protobuf::int32 permission() const;
  void set_permission(::google::protobuf::int32 value);

  // optional uint32 cellid = 5;
  bool has_cellid() const;
  void clear_cellid();
  static const int kCellidFieldNumber = 5;
  ::google::protobuf::uint32 cellid() const;
  void set_cellid(::google::protobuf::uint32 value);

  // optional uint64 rtmp_token = 6;
  bool has_rtmp_token() const;
  void clear_rtmp_token();
  static const int kRtmpTokenFieldNumber = 6;
  ::google::protobuf::uint64 rtmp_token() const;
  void set_rtmp_token(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_BeginBroadcastSession_Request)
 private:
  void set_has_permission();
  void clear_has_permission();
  void set_has_gameid();
  void clear_has_gameid();
  void set_has_client_instance_id();
  void clear_has_client_instance_id();
  void set_has_title();
  void clear_has_title();
  void set_has_cellid();
  void clear_has_cellid();
  void set_has_rtmp_token();
  void clear_has_rtmp_token();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::uint64 gameid_;
  ::google::protobuf::uint64 client_instance_id_;
  ::google::protobuf::int32 permission_;
  ::google::protobuf::uint32 cellid_;
  ::google::protobuf::uint64 rtmp_token_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_BeginBroadcastSession_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_BeginBroadcastSession_Response) */ {
 public:
  CBroadcast_BeginBroadcastSession_Response();
  virtual ~CBroadcast_BeginBroadcastSession_Response();

  CBroadcast_BeginBroadcastSession_Response(const CBroadcast_BeginBroadcastSession_Response& from);

  inline CBroadcast_BeginBroadcastSession_Response& operator=(const CBroadcast_BeginBroadcastSession_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_BeginBroadcastSession_Response& default_instance();

  static inline const CBroadcast_BeginBroadcastSession_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_BeginBroadcastSession_Response*>(
               &_CBroadcast_BeginBroadcastSession_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CBroadcast_BeginBroadcastSession_Response* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_BeginBroadcastSession_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_BeginBroadcastSession_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_BeginBroadcastSession_Response& from);
  void MergeFrom(const CBroadcast_BeginBroadcastSession_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_BeginBroadcastSession_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string thumbnail_upload_address = 2 [(.proto.steam.description) = "Http address to upload the thumbnail data."];
  bool has_thumbnail_upload_address() const;
  void clear_thumbnail_upload_address();
  static const int kThumbnailUploadAddressFieldNumber = 2;
  const ::std::string& thumbnail_upload_address() const;
  void set_thumbnail_upload_address(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_upload_address(::std::string&& value);
  #endif
  void set_thumbnail_upload_address(const char* value);
  void set_thumbnail_upload_address(const char* value, size_t size);
  ::std::string* mutable_thumbnail_upload_address();
  ::std::string* release_thumbnail_upload_address();
  void set_allocated_thumbnail_upload_address(::std::string* thumbnail_upload_address);

  // optional string thumbnail_upload_token = 3 [(.proto.steam.description) = "token to authorize as broadcaster to upload content to the relay."];
  bool has_thumbnail_upload_token() const;
  void clear_thumbnail_upload_token();
  static const int kThumbnailUploadTokenFieldNumber = 3;
  const ::std::string& thumbnail_upload_token() const;
  void set_thumbnail_upload_token(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_upload_token(::std::string&& value);
  #endif
  void set_thumbnail_upload_token(const char* value);
  void set_thumbnail_upload_token(const char* value, size_t size);
  ::std::string* mutable_thumbnail_upload_token();
  ::std::string* release_thumbnail_upload_token();
  void set_allocated_thumbnail_upload_token(::std::string* thumbnail_upload_token);

  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 1;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // optional fixed64 thumbnail_broadcast_relay_id = 5 [(.proto.steam.description) = "unique identifier on the broadcast relay"];
  bool has_thumbnail_broadcast_relay_id() const;
  void clear_thumbnail_broadcast_relay_id();
  static const int kThumbnailBroadcastRelayIdFieldNumber = 5;
  ::google::protobuf::uint64 thumbnail_broadcast_relay_id() const;
  void set_thumbnail_broadcast_relay_id(::google::protobuf::uint64 value);

  // optional uint32 thumbnail_interval_seconds = 4 [(.proto.steam.description) = "how many seconds between thumbnails"];
  bool has_thumbnail_interval_seconds() const;
  void clear_thumbnail_interval_seconds();
  static const int kThumbnailIntervalSecondsFieldNumber = 4;
  ::google::protobuf::uint32 thumbnail_interval_seconds() const;
  void set_thumbnail_interval_seconds(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_BeginBroadcastSession_Response)
 private:
  void set_has_broadcast_id();
  void clear_has_broadcast_id();
  void set_has_thumbnail_upload_address();
  void clear_has_thumbnail_upload_address();
  void set_has_thumbnail_upload_token();
  void clear_has_thumbnail_upload_token();
  void set_has_thumbnail_interval_seconds();
  void clear_has_thumbnail_interval_seconds();
  void set_has_thumbnail_broadcast_relay_id();
  void clear_has_thumbnail_broadcast_relay_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_upload_address_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_upload_token_;
  ::google::protobuf::uint64 broadcast_id_;
  ::google::protobuf::uint64 thumbnail_broadcast_relay_id_;
  ::google::protobuf::uint32 thumbnail_interval_seconds_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_EndBroadcastSession_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_EndBroadcastSession_Request) */ {
 public:
  CBroadcast_EndBroadcastSession_Request();
  virtual ~CBroadcast_EndBroadcastSession_Request();

  CBroadcast_EndBroadcastSession_Request(const CBroadcast_EndBroadcastSession_Request& from);

  inline CBroadcast_EndBroadcastSession_Request& operator=(const CBroadcast_EndBroadcastSession_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_EndBroadcastSession_Request& default_instance();

  static inline const CBroadcast_EndBroadcastSession_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_EndBroadcastSession_Request*>(
               &_CBroadcast_EndBroadcastSession_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CBroadcast_EndBroadcastSession_Request* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_EndBroadcastSession_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_EndBroadcastSession_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_EndBroadcastSession_Request& from);
  void MergeFrom(const CBroadcast_EndBroadcastSession_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_EndBroadcastSession_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 1;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_EndBroadcastSession_Request)
 private:
  void set_has_broadcast_id();
  void clear_has_broadcast_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 broadcast_id_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_EndBroadcastSession_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_EndBroadcastSession_Response) */ {
 public:
  CBroadcast_EndBroadcastSession_Response();
  virtual ~CBroadcast_EndBroadcastSession_Response();

  CBroadcast_EndBroadcastSession_Response(const CBroadcast_EndBroadcastSession_Response& from);

  inline CBroadcast_EndBroadcastSession_Response& operator=(const CBroadcast_EndBroadcastSession_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_EndBroadcastSession_Response& default_instance();

  static inline const CBroadcast_EndBroadcastSession_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_EndBroadcastSession_Response*>(
               &_CBroadcast_EndBroadcastSession_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CBroadcast_EndBroadcastSession_Response* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_EndBroadcastSession_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_EndBroadcastSession_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_EndBroadcastSession_Response& from);
  void MergeFrom(const CBroadcast_EndBroadcastSession_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_EndBroadcastSession_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_EndBroadcastSession_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_StartBroadcastUpload_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_StartBroadcastUpload_Request) */ {
 public:
  CBroadcast_StartBroadcastUpload_Request();
  virtual ~CBroadcast_StartBroadcastUpload_Request();

  CBroadcast_StartBroadcastUpload_Request(const CBroadcast_StartBroadcastUpload_Request& from);

  inline CBroadcast_StartBroadcastUpload_Request& operator=(const CBroadcast_StartBroadcastUpload_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_StartBroadcastUpload_Request& default_instance();

  static inline const CBroadcast_StartBroadcastUpload_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_StartBroadcastUpload_Request*>(
               &_CBroadcast_StartBroadcastUpload_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CBroadcast_StartBroadcastUpload_Request* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_StartBroadcastUpload_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_StartBroadcastUpload_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_StartBroadcastUpload_Request& from);
  void MergeFrom(const CBroadcast_StartBroadcastUpload_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_StartBroadcastUpload_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 1;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // optional uint32 cellid = 2;
  bool has_cellid() const;
  void clear_cellid();
  static const int kCellidFieldNumber = 2;
  ::google::protobuf::uint32 cellid() const;
  void set_cellid(::google::protobuf::uint32 value);

  // optional bool as_rtmp = 3;
  bool has_as_rtmp() const;
  void clear_as_rtmp();
  static const int kAsRtmpFieldNumber = 3;
  bool as_rtmp() const;
  void set_as_rtmp(bool value);

  // optional uint32 delay_seconds = 4;
  bool has_delay_seconds() const;
  void clear_delay_seconds();
  static const int kDelaySecondsFieldNumber = 4;
  ::google::protobuf::uint32 delay_seconds() const;
  void set_delay_seconds(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_StartBroadcastUpload_Request)
 private:
  void set_has_broadcast_id();
  void clear_has_broadcast_id();
  void set_has_cellid();
  void clear_has_cellid();
  void set_has_as_rtmp();
  void clear_has_as_rtmp();
  void set_has_delay_seconds();
  void clear_has_delay_seconds();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 broadcast_id_;
  ::google::protobuf::uint32 cellid_;
  bool as_rtmp_;
  ::google::protobuf::uint32 delay_seconds_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_StartBroadcastUpload_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_StartBroadcastUpload_Response) */ {
 public:
  CBroadcast_StartBroadcastUpload_Response();
  virtual ~CBroadcast_StartBroadcastUpload_Response();

  CBroadcast_StartBroadcastUpload_Response(const CBroadcast_StartBroadcastUpload_Response& from);

  inline CBroadcast_StartBroadcastUpload_Response& operator=(const CBroadcast_StartBroadcastUpload_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_StartBroadcastUpload_Response& default_instance();

  static inline const CBroadcast_StartBroadcastUpload_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_StartBroadcastUpload_Response*>(
               &_CBroadcast_StartBroadcastUpload_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(CBroadcast_StartBroadcastUpload_Response* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_StartBroadcastUpload_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_StartBroadcastUpload_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_StartBroadcastUpload_Response& from);
  void MergeFrom(const CBroadcast_StartBroadcastUpload_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_StartBroadcastUpload_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string upload_token = 1;
  bool has_upload_token() const;
  void clear_upload_token();
  static const int kUploadTokenFieldNumber = 1;
  const ::std::string& upload_token() const;
  void set_upload_token(const ::std::string& value);
  #if LANG_CXX11
  void set_upload_token(::std::string&& value);
  #endif
  void set_upload_token(const char* value);
  void set_upload_token(const char* value, size_t size);
  ::std::string* mutable_upload_token();
  ::std::string* release_upload_token();
  void set_allocated_upload_token(::std::string* upload_token);

  // optional string upload_address = 2;
  bool has_upload_address() const;
  void clear_upload_address();
  static const int kUploadAddressFieldNumber = 2;
  const ::std::string& upload_address() const;
  void set_upload_address(const ::std::string& value);
  #if LANG_CXX11
  void set_upload_address(::std::string&& value);
  #endif
  void set_upload_address(const char* value);
  void set_upload_address(const char* value, size_t size);
  ::std::string* mutable_upload_address();
  ::std::string* release_upload_address();
  void set_allocated_upload_address(::std::string* upload_address);

  // optional fixed64 upload_relay_id = 3;
  bool has_upload_relay_id() const;
  void clear_upload_relay_id();
  static const int kUploadRelayIdFieldNumber = 3;
  ::google::protobuf::uint64 upload_relay_id() const;
  void set_upload_relay_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_StartBroadcastUpload_Response)
 private:
  void set_has_upload_token();
  void clear_has_upload_token();
  void set_has_upload_address();
  void clear_has_upload_address();
  void set_has_upload_relay_id();
  void clear_has_upload_relay_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr upload_token_;
  ::google::protobuf::internal::ArenaStringPtr upload_address_;
  ::google::protobuf::uint64 upload_relay_id_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_NotifyBroadcastUploadStop_Notification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification) */ {
 public:
  CBroadcast_NotifyBroadcastUploadStop_Notification();
  virtual ~CBroadcast_NotifyBroadcastUploadStop_Notification();

  CBroadcast_NotifyBroadcastUploadStop_Notification(const CBroadcast_NotifyBroadcastUploadStop_Notification& from);

  inline CBroadcast_NotifyBroadcastUploadStop_Notification& operator=(const CBroadcast_NotifyBroadcastUploadStop_Notification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_NotifyBroadcastUploadStop_Notification& default_instance();

  static inline const CBroadcast_NotifyBroadcastUploadStop_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_NotifyBroadcastUploadStop_Notification*>(
               &_CBroadcast_NotifyBroadcastUploadStop_Notification_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(CBroadcast_NotifyBroadcastUploadStop_Notification* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_NotifyBroadcastUploadStop_Notification* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_NotifyBroadcastUploadStop_Notification* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_NotifyBroadcastUploadStop_Notification& from);
  void MergeFrom(const CBroadcast_NotifyBroadcastUploadStop_Notification& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_NotifyBroadcastUploadStop_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 broadcast_relay_id = 1;
  bool has_broadcast_relay_id() const;
  void clear_broadcast_relay_id();
  static const int kBroadcastRelayIdFieldNumber = 1;
  ::google::protobuf::uint64 broadcast_relay_id() const;
  void set_broadcast_relay_id(::google::protobuf::uint64 value);

  // optional uint32 upload_result = 2;
  bool has_upload_result() const;
  void clear_upload_result();
  static const int kUploadResultFieldNumber = 2;
  ::google::protobuf::uint32 upload_result() const;
  void set_upload_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
 private:
  void set_has_broadcast_relay_id();
  void clear_has_broadcast_relay_id();
  void set_has_upload_result();
  void clear_has_upload_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 broadcast_relay_id_;
  ::google::protobuf::uint32 upload_result_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_WatchBroadcast_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WatchBroadcast_Request) */ {
 public:
  CBroadcast_WatchBroadcast_Request();
  virtual ~CBroadcast_WatchBroadcast_Request();

  CBroadcast_WatchBroadcast_Request(const CBroadcast_WatchBroadcast_Request& from);

  inline CBroadcast_WatchBroadcast_Request& operator=(const CBroadcast_WatchBroadcast_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_WatchBroadcast_Request& default_instance();

  static inline const CBroadcast_WatchBroadcast_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WatchBroadcast_Request*>(
               &_CBroadcast_WatchBroadcast_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(CBroadcast_WatchBroadcast_Request* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_WatchBroadcast_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_WatchBroadcast_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_WatchBroadcast_Request& from);
  void MergeFrom(const CBroadcast_WatchBroadcast_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_WatchBroadcast_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional fixed64 existing_broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID (optional, rejoin if specified)."];
  bool has_existing_broadcast_id() const;
  void clear_existing_broadcast_id();
  static const int kExistingBroadcastIdFieldNumber = 2;
  ::google::protobuf::uint64 existing_broadcast_id() const;
  void set_existing_broadcast_id(::google::protobuf::uint64 value);

  // optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
  bool has_viewer_token() const;
  void clear_viewer_token();
  static const int kViewerTokenFieldNumber = 3;
  ::google::protobuf::uint64 viewer_token() const;
  void set_viewer_token(::google::protobuf::uint64 value);

  // optional uint32 client_ip = 4;
  bool has_client_ip() const;
  void clear_client_ip();
  static const int kClientIpFieldNumber = 4;
  ::google::protobuf::uint32 client_ip() const;
  void set_client_ip(::google::protobuf::uint32 value);

  // optional uint32 client_cell = 5;
  bool has_client_cell() const;
  void clear_client_cell();
  static const int kClientCellFieldNumber = 5;
  ::google::protobuf::uint32 client_cell() const;
  void set_client_cell(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WatchBroadcast_Request)
 private:
  void set_has_steamid();
  void clear_has_steamid();
  void set_has_existing_broadcast_id();
  void clear_has_existing_broadcast_id();
  void set_has_viewer_token();
  void clear_has_viewer_token();
  void set_has_client_ip();
  void clear_has_client_ip();
  void set_has_client_cell();
  void clear_has_client_cell();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint64 existing_broadcast_id_;
  ::google::protobuf::uint64 viewer_token_;
  ::google::protobuf::uint32 client_ip_;
  ::google::protobuf::uint32 client_cell_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_WatchBroadcast_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WatchBroadcast_Response) */ {
 public:
  CBroadcast_WatchBroadcast_Response();
  virtual ~CBroadcast_WatchBroadcast_Response();

  CBroadcast_WatchBroadcast_Response(const CBroadcast_WatchBroadcast_Response& from);

  inline CBroadcast_WatchBroadcast_Response& operator=(const CBroadcast_WatchBroadcast_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_WatchBroadcast_Response& default_instance();

  static inline const CBroadcast_WatchBroadcast_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WatchBroadcast_Response*>(
               &_CBroadcast_WatchBroadcast_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(CBroadcast_WatchBroadcast_Response* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_WatchBroadcast_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_WatchBroadcast_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_WatchBroadcast_Response& from);
  void MergeFrom(const CBroadcast_WatchBroadcast_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_WatchBroadcast_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CBroadcast_WatchBroadcast_Response_EWatchResponse EWatchResponse;
  static const EWatchResponse k_EWatchResponseReady =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseReady;
  static const EWatchResponse k_EWatchResponseNotAvailable =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseNotAvailable;
  static const EWatchResponse k_EWatchResponseWaitingForApproval =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseWaitingForApproval;
  static const EWatchResponse k_EWatchResponseWaitingForStart =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseWaitingForStart;
  static const EWatchResponse k_EWatchResponseInvalidSession =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseInvalidSession;
  static const EWatchResponse k_EWatchResponseTooManyBroadcasts =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseTooManyBroadcasts;
  static const EWatchResponse k_EWatchResponseWaitingForReconnect =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseWaitingForReconnect;
  static const EWatchResponse k_EWatchResponseSystemNotSupported =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseSystemNotSupported;
  static const EWatchResponse k_EWatchResponseUserRestricted =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseUserRestricted;
  static const EWatchResponse k_EWatchResponseClientOutOfDate =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseClientOutOfDate;
  static const EWatchResponse k_EWatchResponsePoorUploadQuality =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponsePoorUploadQuality;
  static const EWatchResponse k_EWatchResponseMissingSubscription =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseMissingSubscription;
  static inline bool EWatchResponse_IsValid(int value) {
    return CBroadcast_WatchBroadcast_Response_EWatchResponse_IsValid(value);
  }
  static const EWatchResponse EWatchResponse_MIN =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_EWatchResponse_MIN;
  static const EWatchResponse EWatchResponse_MAX =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_EWatchResponse_MAX;
  static const int EWatchResponse_ARRAYSIZE =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_EWatchResponse_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EWatchResponse_descriptor() {
    return CBroadcast_WatchBroadcast_Response_EWatchResponse_descriptor();
  }
  static inline const ::std::string& EWatchResponse_Name(EWatchResponse value) {
    return CBroadcast_WatchBroadcast_Response_EWatchResponse_Name(value);
  }
  static inline bool EWatchResponse_Parse(const ::std::string& name,
      EWatchResponse* value) {
    return CBroadcast_WatchBroadcast_Response_EWatchResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string mpd_url = 2;
  bool has_mpd_url() const;
  void clear_mpd_url();
  static const int kMpdUrlFieldNumber = 2;
  const ::std::string& mpd_url() const;
  void set_mpd_url(const ::std::string& value);
  #if LANG_CXX11
  void set_mpd_url(::std::string&& value);
  #endif
  void set_mpd_url(const char* value);
  void set_mpd_url(const char* value, size_t size);
  ::std::string* mutable_mpd_url();
  ::std::string* release_mpd_url();
  void set_allocated_mpd_url(::std::string* mpd_url);

  // optional string title = 5;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 5;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string hls_m3u8_master_url = 11;
  bool has_hls_m3u8_master_url() const;
  void clear_hls_m3u8_master_url();
  static const int kHlsM3U8MasterUrlFieldNumber = 11;
  const ::std::string& hls_m3u8_master_url() const;
  void set_hls_m3u8_master_url(const ::std::string& value);
  #if LANG_CXX11
  void set_hls_m3u8_master_url(::std::string&& value);
  #endif
  void set_hls_m3u8_master_url(const char* value);
  void set_hls_m3u8_master_url(const char* value, size_t size);
  ::std::string* mutable_hls_m3u8_master_url();
  ::std::string* release_hls_m3u8_master_url();
  void set_allocated_hls_m3u8_master_url(::std::string* hls_m3u8_master_url);

  // optional fixed64 broadcast_id = 3;
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 3;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // optional uint64 gameid = 4;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 4;
  ::google::protobuf::uint64 gameid() const;
  void set_gameid(::google::protobuf::uint64 value);

  // optional uint32 num_viewers = 6;
  bool has_num_viewers() const;
  void clear_num_viewers();
  static const int kNumViewersFieldNumber = 6;
  ::google::protobuf::uint32 num_viewers() const;
  void set_num_viewers(::google::protobuf::uint32 value);

  // optional int32 permission = 7;
  bool has_permission() const;
  void clear_permission();
  static const int kPermissionFieldNumber = 7;
  ::google::protobuf::int32 permission() const;
  void set_permission(::google::protobuf::int32 value);

  // optional bool is_rtmp = 8;
  bool has_is_rtmp() const;
  void clear_is_rtmp();
  static const int kIsRtmpFieldNumber = 8;
  bool is_rtmp() const;
  void set_is_rtmp(bool value);

  // optional int32 seconds_delay = 9;
  bool has_seconds_delay() const;
  void clear_seconds_delay();
  static const int kSecondsDelayFieldNumber = 9;
  ::google::protobuf::int32 seconds_delay() const;
  void set_seconds_delay(::google::protobuf::int32 value);

  // optional fixed64 viewer_token = 10;
  bool has_viewer_token() const;
  void clear_viewer_token();
  static const int kViewerTokenFieldNumber = 10;
  ::google::protobuf::uint64 viewer_token() const;
  void set_viewer_token(::google::protobuf::uint64 value);

  // optional .proto.steam.CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1 [default = k_EWatchResponseReady];
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  ::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse response() const;
  void set_response(::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WatchBroadcast_Response)
 private:
  void set_has_response();
  void clear_has_response();
  void set_has_mpd_url();
  void clear_has_mpd_url();
  void set_has_broadcast_id();
  void clear_has_broadcast_id();
  void set_has_gameid();
  void clear_has_gameid();
  void set_has_title();
  void clear_has_title();
  void set_has_num_viewers();
  void clear_has_num_viewers();
  void set_has_permission();
  void clear_has_permission();
  void set_has_is_rtmp();
  void clear_has_is_rtmp();
  void set_has_seconds_delay();
  void clear_has_seconds_delay();
  void set_has_viewer_token();
  void clear_has_viewer_token();
  void set_has_hls_m3u8_master_url();
  void clear_has_hls_m3u8_master_url();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr mpd_url_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr hls_m3u8_master_url_;
  ::google::protobuf::uint64 broadcast_id_;
  ::google::protobuf::uint64 gameid_;
  ::google::protobuf::uint32 num_viewers_;
  ::google::protobuf::int32 permission_;
  bool is_rtmp_;
  ::google::protobuf::int32 seconds_delay_;
  ::google::protobuf::uint64 viewer_token_;
  int response_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastStatus_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_GetBroadcastStatus_Request) */ {
 public:
  CBroadcast_GetBroadcastStatus_Request();
  virtual ~CBroadcast_GetBroadcastStatus_Request();

  CBroadcast_GetBroadcastStatus_Request(const CBroadcast_GetBroadcastStatus_Request& from);

  inline CBroadcast_GetBroadcastStatus_Request& operator=(const CBroadcast_GetBroadcastStatus_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_GetBroadcastStatus_Request& default_instance();

  static inline const CBroadcast_GetBroadcastStatus_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastStatus_Request*>(
               &_CBroadcast_GetBroadcastStatus_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(CBroadcast_GetBroadcastStatus_Request* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_GetBroadcastStatus_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_GetBroadcastStatus_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_GetBroadcastStatus_Request& from);
  void MergeFrom(const CBroadcast_GetBroadcastStatus_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_GetBroadcastStatus_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional fixed64 broadcast_id = 2;
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 2;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_GetBroadcastStatus_Request)
 private:
  void set_has_steamid();
  void clear_has_steamid();
  void set_has_broadcast_id();
  void clear_has_broadcast_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint64 broadcast_id_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastStatus_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_GetBroadcastStatus_Response) */ {
 public:
  CBroadcast_GetBroadcastStatus_Response();
  virtual ~CBroadcast_GetBroadcastStatus_Response();

  CBroadcast_GetBroadcastStatus_Response(const CBroadcast_GetBroadcastStatus_Response& from);

  inline CBroadcast_GetBroadcastStatus_Response& operator=(const CBroadcast_GetBroadcastStatus_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_GetBroadcastStatus_Response& default_instance();

  static inline const CBroadcast_GetBroadcastStatus_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastStatus_Response*>(
               &_CBroadcast_GetBroadcastStatus_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(CBroadcast_GetBroadcastStatus_Response* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_GetBroadcastStatus_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_GetBroadcastStatus_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_GetBroadcastStatus_Response& from);
  void MergeFrom(const CBroadcast_GetBroadcastStatus_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_GetBroadcastStatus_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional uint64 gameid = 1;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 1;
  ::google::protobuf::uint64 gameid() const;
  void set_gameid(::google::protobuf::uint64 value);

  // optional uint32 num_viewers = 3;
  bool has_num_viewers() const;
  void clear_num_viewers();
  static const int kNumViewersFieldNumber = 3;
  ::google::protobuf::uint32 num_viewers() const;
  void set_num_viewers(::google::protobuf::uint32 value);

  // optional int32 permission = 4;
  bool has_permission() const;
  void clear_permission();
  static const int kPermissionFieldNumber = 4;
  ::google::protobuf::int32 permission() const;
  void set_permission(::google::protobuf::int32 value);

  // optional int32 seconds_delay = 6;
  bool has_seconds_delay() const;
  void clear_seconds_delay();
  static const int kSecondsDelayFieldNumber = 6;
  ::google::protobuf::int32 seconds_delay() const;
  void set_seconds_delay(::google::protobuf::int32 value);

  // optional bool is_rtmp = 5;
  bool has_is_rtmp() const;
  void clear_is_rtmp();
  static const int kIsRtmpFieldNumber = 5;
  bool is_rtmp() const;
  void set_is_rtmp(bool value);

  // optional bool is_publisher = 7;
  bool has_is_publisher() const;
  void clear_is_publisher();
  static const int kIsPublisherFieldNumber = 7;
  bool is_publisher() const;
  void set_is_publisher(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_GetBroadcastStatus_Response)
 private:
  void set_has_gameid();
  void clear_has_gameid();
  void set_has_title();
  void clear_has_title();
  void set_has_num_viewers();
  void clear_has_num_viewers();
  void set_has_permission();
  void clear_has_permission();
  void set_has_is_rtmp();
  void clear_has_is_rtmp();
  void set_has_seconds_delay();
  void clear_has_seconds_delay();
  void set_has_is_publisher();
  void clear_has_is_publisher();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::uint64 gameid_;
  ::google::protobuf::uint32 num_viewers_;
  ::google::protobuf::int32 permission_;
  ::google::protobuf::int32 seconds_delay_;
  bool is_rtmp_;
  bool is_publisher_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_InviteToBroadcast_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_InviteToBroadcast_Request) */ {
 public:
  CBroadcast_InviteToBroadcast_Request();
  virtual ~CBroadcast_InviteToBroadcast_Request();

  CBroadcast_InviteToBroadcast_Request(const CBroadcast_InviteToBroadcast_Request& from);

  inline CBroadcast_InviteToBroadcast_Request& operator=(const CBroadcast_InviteToBroadcast_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_InviteToBroadcast_Request& default_instance();

  static inline const CBroadcast_InviteToBroadcast_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_InviteToBroadcast_Request*>(
               &_CBroadcast_InviteToBroadcast_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(CBroadcast_InviteToBroadcast_Request* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_InviteToBroadcast_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_InviteToBroadcast_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_InviteToBroadcast_Request& from);
  void MergeFrom(const CBroadcast_InviteToBroadcast_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_InviteToBroadcast_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional bool approval_response = 2;
  bool has_approval_response() const;
  void clear_approval_response();
  static const int kApprovalResponseFieldNumber = 2;
  bool approval_response() const;
  void set_approval_response(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_InviteToBroadcast_Request)
 private:
  void set_has_steamid();
  void clear_has_steamid();
  void set_has_approval_response();
  void clear_has_approval_response();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 steamid_;
  bool approval_response_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_InviteToBroadcast_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_InviteToBroadcast_Response) */ {
 public:
  CBroadcast_InviteToBroadcast_Response();
  virtual ~CBroadcast_InviteToBroadcast_Response();

  CBroadcast_InviteToBroadcast_Response(const CBroadcast_InviteToBroadcast_Response& from);

  inline CBroadcast_InviteToBroadcast_Response& operator=(const CBroadcast_InviteToBroadcast_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_InviteToBroadcast_Response& default_instance();

  static inline const CBroadcast_InviteToBroadcast_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_InviteToBroadcast_Response*>(
               &_CBroadcast_InviteToBroadcast_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(CBroadcast_InviteToBroadcast_Response* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_InviteToBroadcast_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_InviteToBroadcast_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_InviteToBroadcast_Response& from);
  void MergeFrom(const CBroadcast_InviteToBroadcast_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_InviteToBroadcast_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_InviteToBroadcast_Response)
 private:
  void set_has_success();
  void clear_has_success();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool success_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_SendBroadcastStateToServer_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_SendBroadcastStateToServer_Request) */ {
 public:
  CBroadcast_SendBroadcastStateToServer_Request();
  virtual ~CBroadcast_SendBroadcastStateToServer_Request();

  CBroadcast_SendBroadcastStateToServer_Request(const CBroadcast_SendBroadcastStateToServer_Request& from);

  inline CBroadcast_SendBroadcastStateToServer_Request& operator=(const CBroadcast_SendBroadcastStateToServer_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_SendBroadcastStateToServer_Request& default_instance();

  static inline const CBroadcast_SendBroadcastStateToServer_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_SendBroadcastStateToServer_Request*>(
               &_CBroadcast_SendBroadcastStateToServer_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(CBroadcast_SendBroadcastStateToServer_Request* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_SendBroadcastStateToServer_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_SendBroadcastStateToServer_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_SendBroadcastStateToServer_Request& from);
  void MergeFrom(const CBroadcast_SendBroadcastStateToServer_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_SendBroadcastStateToServer_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string title = 3;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string game_data_config = 4;
  bool has_game_data_config() const;
  void clear_game_data_config();
  static const int kGameDataConfigFieldNumber = 4;
  const ::std::string& game_data_config() const;
  void set_game_data_config(const ::std::string& value);
  #if LANG_CXX11
  void set_game_data_config(::std::string&& value);
  #endif
  void set_game_data_config(const char* value);
  void set_game_data_config(const char* value, size_t size);
  ::std::string* mutable_game_data_config();
  ::std::string* release_game_data_config();
  void set_allocated_game_data_config(::std::string* game_data_config);

  // optional uint64 gameid = 2;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 2;
  ::google::protobuf::uint64 gameid() const;
  void set_gameid(::google::protobuf::uint64 value);

  // optional int32 permission = 1;
  bool has_permission() const;
  void clear_permission();
  static const int kPermissionFieldNumber = 1;
  ::google::protobuf::int32 permission() const;
  void set_permission(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
 private:
  void set_has_permission();
  void clear_has_permission();
  void set_has_gameid();
  void clear_has_gameid();
  void set_has_title();
  void clear_has_title();
  void set_has_game_data_config();
  void clear_has_game_data_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr game_data_config_;
  ::google::protobuf::uint64 gameid_;
  ::google::protobuf::int32 permission_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_SendBroadcastStateToServer_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_SendBroadcastStateToServer_Response) */ {
 public:
  CBroadcast_SendBroadcastStateToServer_Response();
  virtual ~CBroadcast_SendBroadcastStateToServer_Response();

  CBroadcast_SendBroadcastStateToServer_Response(const CBroadcast_SendBroadcastStateToServer_Response& from);

  inline CBroadcast_SendBroadcastStateToServer_Response& operator=(const CBroadcast_SendBroadcastStateToServer_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_SendBroadcastStateToServer_Response& default_instance();

  static inline const CBroadcast_SendBroadcastStateToServer_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_SendBroadcastStateToServer_Response*>(
               &_CBroadcast_SendBroadcastStateToServer_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(CBroadcast_SendBroadcastStateToServer_Response* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_SendBroadcastStateToServer_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_SendBroadcastStateToServer_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_SendBroadcastStateToServer_Response& from);
  void MergeFrom(const CBroadcast_SendBroadcastStateToServer_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_SendBroadcastStateToServer_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_NotifyBroadcastSessionHeartbeat_Notification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification) */ {
 public:
  CBroadcast_NotifyBroadcastSessionHeartbeat_Notification();
  virtual ~CBroadcast_NotifyBroadcastSessionHeartbeat_Notification();

  CBroadcast_NotifyBroadcastSessionHeartbeat_Notification(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from);

  inline CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& operator=(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& default_instance();

  static inline const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification*>(
               &_CBroadcast_NotifyBroadcastSessionHeartbeat_Notification_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from);
  void MergeFrom(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 1;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
 private:
  void set_has_broadcast_id();
  void clear_has_broadcast_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 broadcast_id_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastChatInfo_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_GetBroadcastChatInfo_Request) */ {
 public:
  CBroadcast_GetBroadcastChatInfo_Request();
  virtual ~CBroadcast_GetBroadcastChatInfo_Request();

  CBroadcast_GetBroadcastChatInfo_Request(const CBroadcast_GetBroadcastChatInfo_Request& from);

  inline CBroadcast_GetBroadcastChatInfo_Request& operator=(const CBroadcast_GetBroadcastChatInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_GetBroadcastChatInfo_Request& default_instance();

  static inline const CBroadcast_GetBroadcastChatInfo_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastChatInfo_Request*>(
               &_CBroadcast_GetBroadcastChatInfo_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(CBroadcast_GetBroadcastChatInfo_Request* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_GetBroadcastChatInfo_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_GetBroadcastChatInfo_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_GetBroadcastChatInfo_Request& from);
  void MergeFrom(const CBroadcast_GetBroadcastChatInfo_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_GetBroadcastChatInfo_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional fixed64 broadcast_id = 2;
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 2;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // optional uint32 client_ip = 3;
  bool has_client_ip() const;
  void clear_client_ip();
  static const int kClientIpFieldNumber = 3;
  ::google::protobuf::uint32 client_ip() const;
  void set_client_ip(::google::protobuf::uint32 value);

  // optional uint32 client_cell = 4;
  bool has_client_cell() const;
  void clear_client_cell();
  static const int kClientCellFieldNumber = 4;
  ::google::protobuf::uint32 client_cell() const;
  void set_client_cell(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
 private:
  void set_has_steamid();
  void clear_has_steamid();
  void set_has_broadcast_id();
  void clear_has_broadcast_id();
  void set_has_client_ip();
  void clear_has_client_ip();
  void set_has_client_cell();
  void clear_has_client_cell();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint64 broadcast_id_;
  ::google::protobuf::uint32 client_ip_;
  ::google::protobuf::uint32 client_cell_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastChatInfo_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_GetBroadcastChatInfo_Response) */ {
 public:
  CBroadcast_GetBroadcastChatInfo_Response();
  virtual ~CBroadcast_GetBroadcastChatInfo_Response();

  CBroadcast_GetBroadcastChatInfo_Response(const CBroadcast_GetBroadcastChatInfo_Response& from);

  inline CBroadcast_GetBroadcastChatInfo_Response& operator=(const CBroadcast_GetBroadcastChatInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_GetBroadcastChatInfo_Response& default_instance();

  static inline const CBroadcast_GetBroadcastChatInfo_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastChatInfo_Response*>(
               &_CBroadcast_GetBroadcastChatInfo_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(CBroadcast_GetBroadcastChatInfo_Response* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_GetBroadcastChatInfo_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_GetBroadcastChatInfo_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_GetBroadcastChatInfo_Response& from);
  void MergeFrom(const CBroadcast_GetBroadcastChatInfo_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_GetBroadcastChatInfo_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string view_url = 2;
  bool has_view_url() const;
  void clear_view_url();
  static const int kViewUrlFieldNumber = 2;
  const ::std::string& view_url() const;
  void set_view_url(const ::std::string& value);
  #if LANG_CXX11
  void set_view_url(::std::string&& value);
  #endif
  void set_view_url(const char* value);
  void set_view_url(const char* value, size_t size);
  ::std::string* mutable_view_url();
  ::std::string* release_view_url();
  void set_allocated_view_url(::std::string* view_url);

  // optional string view_url_template = 3;
  bool has_view_url_template() const;
  void clear_view_url_template();
  static const int kViewUrlTemplateFieldNumber = 3;
  const ::std::string& view_url_template() const;
  void set_view_url_template(const ::std::string& value);
  #if LANG_CXX11
  void set_view_url_template(::std::string&& value);
  #endif
  void set_view_url_template(const char* value);
  void set_view_url_template(const char* value, size_t size);
  ::std::string* mutable_view_url_template();
  ::std::string* release_view_url_template();
  void set_allocated_view_url_template(::std::string* view_url_template);

  // optional fixed64 chat_id = 1;
  bool has_chat_id() const;
  void clear_chat_id();
  static const int kChatIdFieldNumber = 1;
  ::google::protobuf::uint64 chat_id() const;
  void set_chat_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
 private:
  void set_has_chat_id();
  void clear_has_chat_id();
  void set_has_view_url();
  void clear_has_view_url();
  void set_has_view_url_template();
  void clear_has_view_url_template();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr view_url_;
  ::google::protobuf::internal::ArenaStringPtr view_url_template_;
  ::google::protobuf::uint64 chat_id_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_PostChatMessage_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_PostChatMessage_Request) */ {
 public:
  CBroadcast_PostChatMessage_Request();
  virtual ~CBroadcast_PostChatMessage_Request();

  CBroadcast_PostChatMessage_Request(const CBroadcast_PostChatMessage_Request& from);

  inline CBroadcast_PostChatMessage_Request& operator=(const CBroadcast_PostChatMessage_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_PostChatMessage_Request& default_instance();

  static inline const CBroadcast_PostChatMessage_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_PostChatMessage_Request*>(
               &_CBroadcast_PostChatMessage_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(CBroadcast_PostChatMessage_Request* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_PostChatMessage_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_PostChatMessage_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_PostChatMessage_Request& from);
  void MergeFrom(const CBroadcast_PostChatMessage_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_PostChatMessage_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional fixed64 chat_id = 1;
  bool has_chat_id() const;
  void clear_chat_id();
  static const int kChatIdFieldNumber = 1;
  ::google::protobuf::uint64 chat_id() const;
  void set_chat_id(::google::protobuf::uint64 value);

  // optional uint32 instance_id = 3;
  bool has_instance_id() const;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 3;
  ::google::protobuf::uint32 instance_id() const;
  void set_instance_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_PostChatMessage_Request)
 private:
  void set_has_chat_id();
  void clear_has_chat_id();
  void set_has_message();
  void clear_has_message();
  void set_has_instance_id();
  void clear_has_instance_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::uint64 chat_id_;
  ::google::protobuf::uint32 instance_id_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_PostChatMessage_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_PostChatMessage_Response) */ {
 public:
  CBroadcast_PostChatMessage_Response();
  virtual ~CBroadcast_PostChatMessage_Response();

  CBroadcast_PostChatMessage_Response(const CBroadcast_PostChatMessage_Response& from);

  inline CBroadcast_PostChatMessage_Response& operator=(const CBroadcast_PostChatMessage_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_PostChatMessage_Response& default_instance();

  static inline const CBroadcast_PostChatMessage_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_PostChatMessage_Response*>(
               &_CBroadcast_PostChatMessage_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(CBroadcast_PostChatMessage_Response* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_PostChatMessage_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_PostChatMessage_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_PostChatMessage_Response& from);
  void MergeFrom(const CBroadcast_PostChatMessage_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_PostChatMessage_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string persona_name = 1;
  bool has_persona_name() const;
  void clear_persona_name();
  static const int kPersonaNameFieldNumber = 1;
  const ::std::string& persona_name() const;
  void set_persona_name(const ::std::string& value);
  #if LANG_CXX11
  void set_persona_name(::std::string&& value);
  #endif
  void set_persona_name(const char* value);
  void set_persona_name(const char* value, size_t size);
  ::std::string* mutable_persona_name();
  ::std::string* release_persona_name();
  void set_allocated_persona_name(::std::string* persona_name);

  // optional bool in_game = 2;
  bool has_in_game() const;
  void clear_in_game();
  static const int kInGameFieldNumber = 2;
  bool in_game() const;
  void set_in_game(bool value);

  // optional int32 result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_PostChatMessage_Response)
 private:
  void set_has_persona_name();
  void clear_has_persona_name();
  void set_has_in_game();
  void clear_has_in_game();
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr persona_name_;
  bool in_game_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_MuteBroadcastChatUser_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_MuteBroadcastChatUser_Request) */ {
 public:
  CBroadcast_MuteBroadcastChatUser_Request();
  virtual ~CBroadcast_MuteBroadcastChatUser_Request();

  CBroadcast_MuteBroadcastChatUser_Request(const CBroadcast_MuteBroadcastChatUser_Request& from);

  inline CBroadcast_MuteBroadcastChatUser_Request& operator=(const CBroadcast_MuteBroadcastChatUser_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_MuteBroadcastChatUser_Request& default_instance();

  static inline const CBroadcast_MuteBroadcastChatUser_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_MuteBroadcastChatUser_Request*>(
               &_CBroadcast_MuteBroadcastChatUser_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(CBroadcast_MuteBroadcastChatUser_Request* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_MuteBroadcastChatUser_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_MuteBroadcastChatUser_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_MuteBroadcastChatUser_Request& from);
  void MergeFrom(const CBroadcast_MuteBroadcastChatUser_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_MuteBroadcastChatUser_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 chat_id = 1;
  bool has_chat_id() const;
  void clear_chat_id();
  static const int kChatIdFieldNumber = 1;
  ::google::protobuf::uint64 chat_id() const;
  void set_chat_id(::google::protobuf::uint64 value);

  // optional fixed64 user_steamid = 2;
  bool has_user_steamid() const;
  void clear_user_steamid();
  static const int kUserSteamidFieldNumber = 2;
  ::google::protobuf::uint64 user_steamid() const;
  void set_user_steamid(::google::protobuf::uint64 value);

  // optional bool muted = 3;
  bool has_muted() const;
  void clear_muted();
  static const int kMutedFieldNumber = 3;
  bool muted() const;
  void set_muted(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
 private:
  void set_has_chat_id();
  void clear_has_chat_id();
  void set_has_user_steamid();
  void clear_has_user_steamid();
  void set_has_muted();
  void clear_has_muted();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 chat_id_;
  ::google::protobuf::uint64 user_steamid_;
  bool muted_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_MuteBroadcastChatUser_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_MuteBroadcastChatUser_Response) */ {
 public:
  CBroadcast_MuteBroadcastChatUser_Response();
  virtual ~CBroadcast_MuteBroadcastChatUser_Response();

  CBroadcast_MuteBroadcastChatUser_Response(const CBroadcast_MuteBroadcastChatUser_Response& from);

  inline CBroadcast_MuteBroadcastChatUser_Response& operator=(const CBroadcast_MuteBroadcastChatUser_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_MuteBroadcastChatUser_Response& default_instance();

  static inline const CBroadcast_MuteBroadcastChatUser_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_MuteBroadcastChatUser_Response*>(
               &_CBroadcast_MuteBroadcastChatUser_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(CBroadcast_MuteBroadcastChatUser_Response* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_MuteBroadcastChatUser_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_MuteBroadcastChatUser_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_MuteBroadcastChatUser_Response& from);
  void MergeFrom(const CBroadcast_MuteBroadcastChatUser_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_MuteBroadcastChatUser_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_RemoveUserChatText_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_RemoveUserChatText_Request) */ {
 public:
  CBroadcast_RemoveUserChatText_Request();
  virtual ~CBroadcast_RemoveUserChatText_Request();

  CBroadcast_RemoveUserChatText_Request(const CBroadcast_RemoveUserChatText_Request& from);

  inline CBroadcast_RemoveUserChatText_Request& operator=(const CBroadcast_RemoveUserChatText_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_RemoveUserChatText_Request& default_instance();

  static inline const CBroadcast_RemoveUserChatText_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_RemoveUserChatText_Request*>(
               &_CBroadcast_RemoveUserChatText_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(CBroadcast_RemoveUserChatText_Request* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_RemoveUserChatText_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_RemoveUserChatText_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_RemoveUserChatText_Request& from);
  void MergeFrom(const CBroadcast_RemoveUserChatText_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_RemoveUserChatText_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 chat_id = 1;
  bool has_chat_id() const;
  void clear_chat_id();
  static const int kChatIdFieldNumber = 1;
  ::google::protobuf::uint64 chat_id() const;
  void set_chat_id(::google::protobuf::uint64 value);

  // optional fixed64 user_steamid = 2;
  bool has_user_steamid() const;
  void clear_user_steamid();
  static const int kUserSteamidFieldNumber = 2;
  ::google::protobuf::uint64 user_steamid() const;
  void set_user_steamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_RemoveUserChatText_Request)
 private:
  void set_has_chat_id();
  void clear_has_chat_id();
  void set_has_user_steamid();
  void clear_has_user_steamid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 chat_id_;
  ::google::protobuf::uint64 user_steamid_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_RemoveUserChatText_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_RemoveUserChatText_Response) */ {
 public:
  CBroadcast_RemoveUserChatText_Response();
  virtual ~CBroadcast_RemoveUserChatText_Response();

  CBroadcast_RemoveUserChatText_Response(const CBroadcast_RemoveUserChatText_Response& from);

  inline CBroadcast_RemoveUserChatText_Response& operator=(const CBroadcast_RemoveUserChatText_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_RemoveUserChatText_Response& default_instance();

  static inline const CBroadcast_RemoveUserChatText_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_RemoveUserChatText_Response*>(
               &_CBroadcast_RemoveUserChatText_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(CBroadcast_RemoveUserChatText_Response* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_RemoveUserChatText_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_RemoveUserChatText_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_RemoveUserChatText_Response& from);
  void MergeFrom(const CBroadcast_RemoveUserChatText_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_RemoveUserChatText_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_RemoveUserChatText_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastChatUserNames_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request) */ {
 public:
  CBroadcast_GetBroadcastChatUserNames_Request();
  virtual ~CBroadcast_GetBroadcastChatUserNames_Request();

  CBroadcast_GetBroadcastChatUserNames_Request(const CBroadcast_GetBroadcastChatUserNames_Request& from);

  inline CBroadcast_GetBroadcastChatUserNames_Request& operator=(const CBroadcast_GetBroadcastChatUserNames_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_GetBroadcastChatUserNames_Request& default_instance();

  static inline const CBroadcast_GetBroadcastChatUserNames_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastChatUserNames_Request*>(
               &_CBroadcast_GetBroadcastChatUserNames_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(CBroadcast_GetBroadcastChatUserNames_Request* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_GetBroadcastChatUserNames_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_GetBroadcastChatUserNames_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_GetBroadcastChatUserNames_Request& from);
  void MergeFrom(const CBroadcast_GetBroadcastChatUserNames_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_GetBroadcastChatUserNames_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated fixed64 user_steamid = 2;
  int user_steamid_size() const;
  void clear_user_steamid();
  static const int kUserSteamidFieldNumber = 2;
  ::google::protobuf::uint64 user_steamid(int index) const;
  void set_user_steamid(int index, ::google::protobuf::uint64 value);
  void add_user_steamid(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      user_steamid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_user_steamid();

  // optional fixed64 chat_id = 1;
  bool has_chat_id() const;
  void clear_chat_id();
  static const int kChatIdFieldNumber = 1;
  ::google::protobuf::uint64 chat_id() const;
  void set_chat_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
 private:
  void set_has_chat_id();
  void clear_has_chat_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > user_steamid_;
  ::google::protobuf::uint64 chat_id_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastChatUserNames_Response_PersonaName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName) */ {
 public:
  CBroadcast_GetBroadcastChatUserNames_Response_PersonaName();
  virtual ~CBroadcast_GetBroadcastChatUserNames_Response_PersonaName();

  CBroadcast_GetBroadcastChatUserNames_Response_PersonaName(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from);

  inline CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& operator=(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& default_instance();

  static inline const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName*>(
               &_CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from);
  void MergeFrom(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string persona = 2;
  bool has_persona() const;
  void clear_persona();
  static const int kPersonaFieldNumber = 2;
  const ::std::string& persona() const;
  void set_persona(const ::std::string& value);
  #if LANG_CXX11
  void set_persona(::std::string&& value);
  #endif
  void set_persona(const char* value);
  void set_persona(const char* value, size_t size);
  ::std::string* mutable_persona();
  ::std::string* release_persona();
  void set_allocated_persona(::std::string* persona);

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
 private:
  void set_has_steam_id();
  void clear_has_steam_id();
  void set_has_persona();
  void clear_has_persona();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr persona_;
  ::google::protobuf::uint64 steam_id_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastChatUserNames_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response) */ {
 public:
  CBroadcast_GetBroadcastChatUserNames_Response();
  virtual ~CBroadcast_GetBroadcastChatUserNames_Response();

  CBroadcast_GetBroadcastChatUserNames_Response(const CBroadcast_GetBroadcastChatUserNames_Response& from);

  inline CBroadcast_GetBroadcastChatUserNames_Response& operator=(const CBroadcast_GetBroadcastChatUserNames_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_GetBroadcastChatUserNames_Response& default_instance();

  static inline const CBroadcast_GetBroadcastChatUserNames_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastChatUserNames_Response*>(
               &_CBroadcast_GetBroadcastChatUserNames_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(CBroadcast_GetBroadcastChatUserNames_Response* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_GetBroadcastChatUserNames_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_GetBroadcastChatUserNames_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_GetBroadcastChatUserNames_Response& from);
  void MergeFrom(const CBroadcast_GetBroadcastChatUserNames_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_GetBroadcastChatUserNames_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CBroadcast_GetBroadcastChatUserNames_Response_PersonaName PersonaName;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName persona_names = 1;
  int persona_names_size() const;
  void clear_persona_names();
  static const int kPersonaNamesFieldNumber = 1;
  const ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& persona_names(int index) const;
  ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* mutable_persona_names(int index);
  ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* add_persona_names();
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName >*
      mutable_persona_names();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName >&
      persona_names() const;

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName > persona_names_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_BroadcastViewerState_Notification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_BroadcastViewerState_Notification) */ {
 public:
  CBroadcast_BroadcastViewerState_Notification();
  virtual ~CBroadcast_BroadcastViewerState_Notification();

  CBroadcast_BroadcastViewerState_Notification(const CBroadcast_BroadcastViewerState_Notification& from);

  inline CBroadcast_BroadcastViewerState_Notification& operator=(const CBroadcast_BroadcastViewerState_Notification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_BroadcastViewerState_Notification& default_instance();

  static inline const CBroadcast_BroadcastViewerState_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_BroadcastViewerState_Notification*>(
               &_CBroadcast_BroadcastViewerState_Notification_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(CBroadcast_BroadcastViewerState_Notification* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_BroadcastViewerState_Notification* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_BroadcastViewerState_Notification* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_BroadcastViewerState_Notification& from);
  void MergeFrom(const CBroadcast_BroadcastViewerState_Notification& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_BroadcastViewerState_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CBroadcast_BroadcastViewerState_Notification_EViewerState EViewerState;
  static const EViewerState k_EViewerNeedsApproval =
    CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerNeedsApproval;
  static const EViewerState k_EViewerWatching =
    CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerWatching;
  static const EViewerState k_EViewerLeft =
    CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerLeft;
  static inline bool EViewerState_IsValid(int value) {
    return CBroadcast_BroadcastViewerState_Notification_EViewerState_IsValid(value);
  }
  static const EViewerState EViewerState_MIN =
    CBroadcast_BroadcastViewerState_Notification_EViewerState_EViewerState_MIN;
  static const EViewerState EViewerState_MAX =
    CBroadcast_BroadcastViewerState_Notification_EViewerState_EViewerState_MAX;
  static const int EViewerState_ARRAYSIZE =
    CBroadcast_BroadcastViewerState_Notification_EViewerState_EViewerState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EViewerState_descriptor() {
    return CBroadcast_BroadcastViewerState_Notification_EViewerState_descriptor();
  }
  static inline const ::std::string& EViewerState_Name(EViewerState value) {
    return CBroadcast_BroadcastViewerState_Notification_EViewerState_Name(value);
  }
  static inline bool EViewerState_Parse(const ::std::string& name,
      EViewerState* value) {
    return CBroadcast_BroadcastViewerState_Notification_EViewerState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional .proto.steam.CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2 [default = k_EViewerNeedsApproval];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState state() const;
  void set_state(::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_BroadcastViewerState_Notification)
 private:
  void set_has_steamid();
  void clear_has_steamid();
  void set_has_state();
  void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 steamid_;
  int state_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_WaitingBroadcastViewer_Notification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification) */ {
 public:
  CBroadcast_WaitingBroadcastViewer_Notification();
  virtual ~CBroadcast_WaitingBroadcastViewer_Notification();

  CBroadcast_WaitingBroadcastViewer_Notification(const CBroadcast_WaitingBroadcastViewer_Notification& from);

  inline CBroadcast_WaitingBroadcastViewer_Notification& operator=(const CBroadcast_WaitingBroadcastViewer_Notification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_WaitingBroadcastViewer_Notification& default_instance();

  static inline const CBroadcast_WaitingBroadcastViewer_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WaitingBroadcastViewer_Notification*>(
               &_CBroadcast_WaitingBroadcastViewer_Notification_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(CBroadcast_WaitingBroadcastViewer_Notification* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_WaitingBroadcastViewer_Notification* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_WaitingBroadcastViewer_Notification* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_WaitingBroadcastViewer_Notification& from);
  void MergeFrom(const CBroadcast_WaitingBroadcastViewer_Notification& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_WaitingBroadcastViewer_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 1;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
 private:
  void set_has_broadcast_id();
  void clear_has_broadcast_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 broadcast_id_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_StopBroadcastUpload_Notification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_StopBroadcastUpload_Notification) */ {
 public:
  CBroadcast_StopBroadcastUpload_Notification();
  virtual ~CBroadcast_StopBroadcastUpload_Notification();

  CBroadcast_StopBroadcastUpload_Notification(const CBroadcast_StopBroadcastUpload_Notification& from);

  inline CBroadcast_StopBroadcastUpload_Notification& operator=(const CBroadcast_StopBroadcastUpload_Notification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_StopBroadcastUpload_Notification& default_instance();

  static inline const CBroadcast_StopBroadcastUpload_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_StopBroadcastUpload_Notification*>(
               &_CBroadcast_StopBroadcastUpload_Notification_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(CBroadcast_StopBroadcastUpload_Notification* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_StopBroadcastUpload_Notification* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_StopBroadcastUpload_Notification* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_StopBroadcastUpload_Notification& from);
  void MergeFrom(const CBroadcast_StopBroadcastUpload_Notification& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_StopBroadcastUpload_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 1;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // optional fixed64 broadcast_relay_id = 2;
  bool has_broadcast_relay_id() const;
  void clear_broadcast_relay_id();
  static const int kBroadcastRelayIdFieldNumber = 2;
  ::google::protobuf::uint64 broadcast_relay_id() const;
  void set_broadcast_relay_id(::google::protobuf::uint64 value);

  // optional uint32 upload_result = 3;
  bool has_upload_result() const;
  void clear_upload_result();
  static const int kUploadResultFieldNumber = 3;
  ::google::protobuf::uint32 upload_result() const;
  void set_upload_result(::google::protobuf::uint32 value);

  // optional bool too_many_poor_uploads = 4;
  bool has_too_many_poor_uploads() const;
  void clear_too_many_poor_uploads();
  static const int kTooManyPoorUploadsFieldNumber = 4;
  bool too_many_poor_uploads() const;
  void set_too_many_poor_uploads(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
 private:
  void set_has_broadcast_id();
  void clear_has_broadcast_id();
  void set_has_broadcast_relay_id();
  void clear_has_broadcast_relay_id();
  void set_has_upload_result();
  void clear_has_upload_result();
  void set_has_too_many_poor_uploads();
  void clear_has_too_many_poor_uploads();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 broadcast_id_;
  ::google::protobuf::uint64 broadcast_relay_id_;
  ::google::protobuf::uint32 upload_result_;
  bool too_many_poor_uploads_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_SessionClosed_Notification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_SessionClosed_Notification) */ {
 public:
  CBroadcast_SessionClosed_Notification();
  virtual ~CBroadcast_SessionClosed_Notification();

  CBroadcast_SessionClosed_Notification(const CBroadcast_SessionClosed_Notification& from);

  inline CBroadcast_SessionClosed_Notification& operator=(const CBroadcast_SessionClosed_Notification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_SessionClosed_Notification& default_instance();

  static inline const CBroadcast_SessionClosed_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_SessionClosed_Notification*>(
               &_CBroadcast_SessionClosed_Notification_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(CBroadcast_SessionClosed_Notification* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_SessionClosed_Notification* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_SessionClosed_Notification* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_SessionClosed_Notification& from);
  void MergeFrom(const CBroadcast_SessionClosed_Notification& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_SessionClosed_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 1;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_SessionClosed_Notification)
 private:
  void set_has_broadcast_id();
  void clear_has_broadcast_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 broadcast_id_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_ViewerBroadcastInvite_Notification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification) */ {
 public:
  CBroadcast_ViewerBroadcastInvite_Notification();
  virtual ~CBroadcast_ViewerBroadcastInvite_Notification();

  CBroadcast_ViewerBroadcastInvite_Notification(const CBroadcast_ViewerBroadcastInvite_Notification& from);

  inline CBroadcast_ViewerBroadcastInvite_Notification& operator=(const CBroadcast_ViewerBroadcastInvite_Notification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_ViewerBroadcastInvite_Notification& default_instance();

  static inline const CBroadcast_ViewerBroadcastInvite_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_ViewerBroadcastInvite_Notification*>(
               &_CBroadcast_ViewerBroadcastInvite_Notification_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(CBroadcast_ViewerBroadcastInvite_Notification* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_ViewerBroadcastInvite_Notification* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_ViewerBroadcastInvite_Notification* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_ViewerBroadcastInvite_Notification& from);
  void MergeFrom(const CBroadcast_ViewerBroadcastInvite_Notification& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_ViewerBroadcastInvite_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 broadcaster_steamid = 1;
  bool has_broadcaster_steamid() const;
  void clear_broadcaster_steamid();
  static const int kBroadcasterSteamidFieldNumber = 1;
  ::google::protobuf::uint64 broadcaster_steamid() const;
  void set_broadcaster_steamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
 private:
  void set_has_broadcaster_steamid();
  void clear_has_broadcaster_steamid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 broadcaster_steamid_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_BroadcastStatus_Notification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_BroadcastStatus_Notification) */ {
 public:
  CBroadcast_BroadcastStatus_Notification();
  virtual ~CBroadcast_BroadcastStatus_Notification();

  CBroadcast_BroadcastStatus_Notification(const CBroadcast_BroadcastStatus_Notification& from);

  inline CBroadcast_BroadcastStatus_Notification& operator=(const CBroadcast_BroadcastStatus_Notification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_BroadcastStatus_Notification& default_instance();

  static inline const CBroadcast_BroadcastStatus_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_BroadcastStatus_Notification*>(
               &_CBroadcast_BroadcastStatus_Notification_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(CBroadcast_BroadcastStatus_Notification* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_BroadcastStatus_Notification* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_BroadcastStatus_Notification* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_BroadcastStatus_Notification& from);
  void MergeFrom(const CBroadcast_BroadcastStatus_Notification& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_BroadcastStatus_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 1;
  ::google::protobuf::uint64 broadcast_id() const;
  void set_broadcast_id(::google::protobuf::uint64 value);

  // optional int32 num_viewers = 2;
  bool has_num_viewers() const;
  void clear_num_viewers();
  static const int kNumViewersFieldNumber = 2;
  ::google::protobuf::int32 num_viewers() const;
  void set_num_viewers(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_BroadcastStatus_Notification)
 private:
  void set_has_broadcast_id();
  void clear_has_broadcast_id();
  void set_has_num_viewers();
  void clear_has_num_viewers();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 broadcast_id_;
  ::google::protobuf::int32 num_viewers_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CBroadcast_SendThumbnailToRelay_Notification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CBroadcast_SendThumbnailToRelay_Notification) */ {
 public:
  CBroadcast_SendThumbnailToRelay_Notification();
  virtual ~CBroadcast_SendThumbnailToRelay_Notification();

  CBroadcast_SendThumbnailToRelay_Notification(const CBroadcast_SendThumbnailToRelay_Notification& from);

  inline CBroadcast_SendThumbnailToRelay_Notification& operator=(const CBroadcast_SendThumbnailToRelay_Notification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBroadcast_SendThumbnailToRelay_Notification& default_instance();

  static inline const CBroadcast_SendThumbnailToRelay_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_SendThumbnailToRelay_Notification*>(
               &_CBroadcast_SendThumbnailToRelay_Notification_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(CBroadcast_SendThumbnailToRelay_Notification* other);

  // implements Message ----------------------------------------------

  inline CBroadcast_SendThumbnailToRelay_Notification* New() const PROTOBUF_FINAL { return New(NULL); }

  CBroadcast_SendThumbnailToRelay_Notification* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CBroadcast_SendThumbnailToRelay_Notification& from);
  void MergeFrom(const CBroadcast_SendThumbnailToRelay_Notification& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CBroadcast_SendThumbnailToRelay_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string thumbnail_upload_token = 1;
  bool has_thumbnail_upload_token() const;
  void clear_thumbnail_upload_token();
  static const int kThumbnailUploadTokenFieldNumber = 1;
  const ::std::string& thumbnail_upload_token() const;
  void set_thumbnail_upload_token(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_upload_token(::std::string&& value);
  #endif
  void set_thumbnail_upload_token(const char* value);
  void set_thumbnail_upload_token(const char* value, size_t size);
  ::std::string* mutable_thumbnail_upload_token();
  ::std::string* release_thumbnail_upload_token();
  void set_allocated_thumbnail_upload_token(::std::string* thumbnail_upload_token);

  // optional bytes thumbnail_data = 3;
  bool has_thumbnail_data() const;
  void clear_thumbnail_data();
  static const int kThumbnailDataFieldNumber = 3;
  const ::std::string& thumbnail_data() const;
  void set_thumbnail_data(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_data(::std::string&& value);
  #endif
  void set_thumbnail_data(const char* value);
  void set_thumbnail_data(const void* value, size_t size);
  ::std::string* mutable_thumbnail_data();
  ::std::string* release_thumbnail_data();
  void set_allocated_thumbnail_data(::std::string* thumbnail_data);

  // optional fixed64 thumbnail_broadcast_relay_id = 2;
  bool has_thumbnail_broadcast_relay_id() const;
  void clear_thumbnail_broadcast_relay_id();
  static const int kThumbnailBroadcastRelayIdFieldNumber = 2;
  ::google::protobuf::uint64 thumbnail_broadcast_relay_id() const;
  void set_thumbnail_broadcast_relay_id(::google::protobuf::uint64 value);

  // optional uint32 thumbnail_width = 4;
  bool has_thumbnail_width() const;
  void clear_thumbnail_width();
  static const int kThumbnailWidthFieldNumber = 4;
  ::google::protobuf::uint32 thumbnail_width() const;
  void set_thumbnail_width(::google::protobuf::uint32 value);

  // optional uint32 thumbnail_height = 5;
  bool has_thumbnail_height() const;
  void clear_thumbnail_height();
  static const int kThumbnailHeightFieldNumber = 5;
  ::google::protobuf::uint32 thumbnail_height() const;
  void set_thumbnail_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CBroadcast_SendThumbnailToRelay_Notification)
 private:
  void set_has_thumbnail_upload_token();
  void clear_has_thumbnail_upload_token();
  void set_has_thumbnail_broadcast_relay_id();
  void clear_has_thumbnail_broadcast_relay_id();
  void set_has_thumbnail_data();
  void clear_has_thumbnail_data();
  void set_has_thumbnail_width();
  void clear_has_thumbnail_width();
  void set_has_thumbnail_height();
  void clear_has_thumbnail_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_upload_token_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_data_;
  ::google::protobuf::uint64 thumbnail_broadcast_relay_id_;
  ::google::protobuf::uint32 thumbnail_width_;
  ::google::protobuf::uint32 thumbnail_height_;
  friend struct protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::TableStruct;
};
// ===================================================================

class Broadcast_Stub;

class Broadcast : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Broadcast() {};
 public:
  virtual ~Broadcast();

  typedef Broadcast_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void BeginBroadcastSession(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_BeginBroadcastSession_Request* request,
                       ::proto::steam::CBroadcast_BeginBroadcastSession_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void EndBroadcastSession(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_EndBroadcastSession_Request* request,
                       ::proto::steam::CBroadcast_EndBroadcastSession_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void StartBroadcastUpload(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_StartBroadcastUpload_Request* request,
                       ::proto::steam::CBroadcast_StartBroadcastUpload_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyBroadcastUploadStop(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void WatchBroadcast(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WatchBroadcast_Request* request,
                       ::proto::steam::CBroadcast_WatchBroadcast_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetBroadcastStatus(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_GetBroadcastStatus_Request* request,
                       ::proto::steam::CBroadcast_GetBroadcastStatus_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void InviteToBroadcast(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_InviteToBroadcast_Request* request,
                       ::proto::steam::CBroadcast_InviteToBroadcast_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SendBroadcastStateToServer(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_SendBroadcastStateToServer_Request* request,
                       ::proto::steam::CBroadcast_SendBroadcastStateToServer_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyBroadcastSessionHeartbeat(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetBroadcastChatInfo(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_GetBroadcastChatInfo_Request* request,
                       ::proto::steam::CBroadcast_GetBroadcastChatInfo_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void PostChatMessage(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_PostChatMessage_Request* request,
                       ::proto::steam::CBroadcast_PostChatMessage_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void MuteBroadcastChatUser(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_MuteBroadcastChatUser_Request* request,
                       ::proto::steam::CBroadcast_MuteBroadcastChatUser_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void RemoveUserChatText(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_RemoveUserChatText_Request* request,
                       ::proto::steam::CBroadcast_RemoveUserChatText_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetBroadcastChatUserNames(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request* request,
                       ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Broadcast);
};

class Broadcast_Stub : public Broadcast {
 public:
  Broadcast_Stub(::google::protobuf::RpcChannel* channel);
  Broadcast_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~Broadcast_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements Broadcast ------------------------------------------

  void BeginBroadcastSession(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_BeginBroadcastSession_Request* request,
                       ::proto::steam::CBroadcast_BeginBroadcastSession_Response* response,
                       ::google::protobuf::Closure* done);
  void EndBroadcastSession(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_EndBroadcastSession_Request* request,
                       ::proto::steam::CBroadcast_EndBroadcastSession_Response* response,
                       ::google::protobuf::Closure* done);
  void StartBroadcastUpload(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_StartBroadcastUpload_Request* request,
                       ::proto::steam::CBroadcast_StartBroadcastUpload_Response* response,
                       ::google::protobuf::Closure* done);
  void NotifyBroadcastUploadStop(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void WatchBroadcast(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WatchBroadcast_Request* request,
                       ::proto::steam::CBroadcast_WatchBroadcast_Response* response,
                       ::google::protobuf::Closure* done);
  void GetBroadcastStatus(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_GetBroadcastStatus_Request* request,
                       ::proto::steam::CBroadcast_GetBroadcastStatus_Response* response,
                       ::google::protobuf::Closure* done);
  void InviteToBroadcast(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_InviteToBroadcast_Request* request,
                       ::proto::steam::CBroadcast_InviteToBroadcast_Response* response,
                       ::google::protobuf::Closure* done);
  void SendBroadcastStateToServer(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_SendBroadcastStateToServer_Request* request,
                       ::proto::steam::CBroadcast_SendBroadcastStateToServer_Response* response,
                       ::google::protobuf::Closure* done);
  void NotifyBroadcastSessionHeartbeat(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void GetBroadcastChatInfo(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_GetBroadcastChatInfo_Request* request,
                       ::proto::steam::CBroadcast_GetBroadcastChatInfo_Response* response,
                       ::google::protobuf::Closure* done);
  void PostChatMessage(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_PostChatMessage_Request* request,
                       ::proto::steam::CBroadcast_PostChatMessage_Response* response,
                       ::google::protobuf::Closure* done);
  void MuteBroadcastChatUser(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_MuteBroadcastChatUser_Request* request,
                       ::proto::steam::CBroadcast_MuteBroadcastChatUser_Response* response,
                       ::google::protobuf::Closure* done);
  void RemoveUserChatText(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_RemoveUserChatText_Request* request,
                       ::proto::steam::CBroadcast_RemoveUserChatText_Response* response,
                       ::google::protobuf::Closure* done);
  void GetBroadcastChatUserNames(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request* request,
                       ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Broadcast_Stub);
};


// -------------------------------------------------------------------

class BroadcastClient_Stub;

class BroadcastClient : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline BroadcastClient() {};
 public:
  virtual ~BroadcastClient();

  typedef BroadcastClient_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void NotifyBroadcastViewerState(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_BroadcastViewerState_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyWaitingBroadcastViewer(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WaitingBroadcastViewer_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyStopBroadcastUpload(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_StopBroadcastUpload_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifySessionClosed(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_SessionClosed_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyViewerBroadcastInvite(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_ViewerBroadcastInvite_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyBroadcastStatus(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_BroadcastStatus_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SendThumbnailToRelay(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_SendThumbnailToRelay_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(BroadcastClient);
};

class BroadcastClient_Stub : public BroadcastClient {
 public:
  BroadcastClient_Stub(::google::protobuf::RpcChannel* channel);
  BroadcastClient_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~BroadcastClient_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements BroadcastClient ------------------------------------------

  void NotifyBroadcastViewerState(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_BroadcastViewerState_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyWaitingBroadcastViewer(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_WaitingBroadcastViewer_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyStopBroadcastUpload(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_StopBroadcastUpload_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifySessionClosed(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_SessionClosed_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyViewerBroadcastInvite(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_ViewerBroadcastInvite_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyBroadcastStatus(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_BroadcastStatus_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void SendThumbnailToRelay(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CBroadcast_SendThumbnailToRelay_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(BroadcastClient_Stub);
};


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_BeginBroadcastSession_Request

// optional int32 permission = 1;
inline bool CBroadcast_BeginBroadcastSession_Request::has_permission() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_has_permission() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_has_permission() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_permission() {
  permission_ = 0;
  clear_has_permission();
}
inline ::google::protobuf::int32 CBroadcast_BeginBroadcastSession_Request::permission() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Request.permission)
  return permission_;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_permission(::google::protobuf::int32 value) {
  set_has_permission();
  permission_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Request.permission)
}

// optional uint64 gameid = 2;
inline bool CBroadcast_BeginBroadcastSession_Request::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_gameid() {
  gameid_ = GOOGLE_ULONGLONG(0);
  clear_has_gameid();
}
inline ::google::protobuf::uint64 CBroadcast_BeginBroadcastSession_Request::gameid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Request.gameid)
  return gameid_;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_gameid(::google::protobuf::uint64 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Request.gameid)
}

// optional uint64 client_instance_id = 3;
inline bool CBroadcast_BeginBroadcastSession_Request::has_client_instance_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_has_client_instance_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_has_client_instance_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_client_instance_id() {
  client_instance_id_ = GOOGLE_ULONGLONG(0);
  clear_has_client_instance_id();
}
inline ::google::protobuf::uint64 CBroadcast_BeginBroadcastSession_Request::client_instance_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Request.client_instance_id)
  return client_instance_id_;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_client_instance_id(::google::protobuf::uint64 value) {
  set_has_client_instance_id();
  client_instance_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Request.client_instance_id)
}

// optional string title = 4;
inline bool CBroadcast_BeginBroadcastSession_Request::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& CBroadcast_BeginBroadcastSession_Request::title() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
  return title_.GetNoArena();
}
inline void CBroadcast_BeginBroadcastSession_Request::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
}
#if LANG_CXX11
inline void CBroadcast_BeginBroadcastSession_Request::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
}
#endif
inline void CBroadcast_BeginBroadcastSession_Request::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
}
inline void CBroadcast_BeginBroadcastSession_Request::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
}
inline ::std::string* CBroadcast_BeginBroadcastSession_Request::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_BeginBroadcastSession_Request::release_title() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_BeginBroadcastSession_Request::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
}

// optional uint32 cellid = 5;
inline bool CBroadcast_BeginBroadcastSession_Request::has_cellid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_has_cellid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_cellid() {
  cellid_ = 0u;
  clear_has_cellid();
}
inline ::google::protobuf::uint32 CBroadcast_BeginBroadcastSession_Request::cellid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Request.cellid)
  return cellid_;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_cellid(::google::protobuf::uint32 value) {
  set_has_cellid();
  cellid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Request.cellid)
}

// optional uint64 rtmp_token = 6;
inline bool CBroadcast_BeginBroadcastSession_Request::has_rtmp_token() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_has_rtmp_token() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_has_rtmp_token() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_rtmp_token() {
  rtmp_token_ = GOOGLE_ULONGLONG(0);
  clear_has_rtmp_token();
}
inline ::google::protobuf::uint64 CBroadcast_BeginBroadcastSession_Request::rtmp_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Request.rtmp_token)
  return rtmp_token_;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_rtmp_token(::google::protobuf::uint64 value) {
  set_has_rtmp_token();
  rtmp_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Request.rtmp_token)
}

// -------------------------------------------------------------------

// CBroadcast_BeginBroadcastSession_Response

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_BeginBroadcastSession_Response::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_BeginBroadcastSession_Response::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CBroadcast_BeginBroadcastSession_Response::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CBroadcast_BeginBroadcastSession_Response::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
inline ::google::protobuf::uint64 CBroadcast_BeginBroadcastSession_Response::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Response.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_BeginBroadcastSession_Response::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Response.broadcast_id)
}

// optional string thumbnail_upload_address = 2 [(.proto.steam.description) = "Http address to upload the thumbnail data."];
inline bool CBroadcast_BeginBroadcastSession_Response::has_thumbnail_upload_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_BeginBroadcastSession_Response::set_has_thumbnail_upload_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_BeginBroadcastSession_Response::clear_has_thumbnail_upload_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_BeginBroadcastSession_Response::clear_thumbnail_upload_address() {
  thumbnail_upload_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_thumbnail_upload_address();
}
inline const ::std::string& CBroadcast_BeginBroadcastSession_Response::thumbnail_upload_address() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address)
  return thumbnail_upload_address_.GetNoArena();
}
inline void CBroadcast_BeginBroadcastSession_Response::set_thumbnail_upload_address(const ::std::string& value) {
  set_has_thumbnail_upload_address();
  thumbnail_upload_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address)
}
#if LANG_CXX11
inline void CBroadcast_BeginBroadcastSession_Response::set_thumbnail_upload_address(::std::string&& value) {
  set_has_thumbnail_upload_address();
  thumbnail_upload_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address)
}
#endif
inline void CBroadcast_BeginBroadcastSession_Response::set_thumbnail_upload_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_thumbnail_upload_address();
  thumbnail_upload_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address)
}
inline void CBroadcast_BeginBroadcastSession_Response::set_thumbnail_upload_address(const char* value, size_t size) {
  set_has_thumbnail_upload_address();
  thumbnail_upload_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address)
}
inline ::std::string* CBroadcast_BeginBroadcastSession_Response::mutable_thumbnail_upload_address() {
  set_has_thumbnail_upload_address();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address)
  return thumbnail_upload_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_BeginBroadcastSession_Response::release_thumbnail_upload_address() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address)
  clear_has_thumbnail_upload_address();
  return thumbnail_upload_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_BeginBroadcastSession_Response::set_allocated_thumbnail_upload_address(::std::string* thumbnail_upload_address) {
  if (thumbnail_upload_address != NULL) {
    set_has_thumbnail_upload_address();
  } else {
    clear_has_thumbnail_upload_address();
  }
  thumbnail_upload_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_upload_address);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address)
}

// optional string thumbnail_upload_token = 3 [(.proto.steam.description) = "token to authorize as broadcaster to upload content to the relay."];
inline bool CBroadcast_BeginBroadcastSession_Response::has_thumbnail_upload_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_BeginBroadcastSession_Response::set_has_thumbnail_upload_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CBroadcast_BeginBroadcastSession_Response::clear_has_thumbnail_upload_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CBroadcast_BeginBroadcastSession_Response::clear_thumbnail_upload_token() {
  thumbnail_upload_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_thumbnail_upload_token();
}
inline const ::std::string& CBroadcast_BeginBroadcastSession_Response::thumbnail_upload_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token)
  return thumbnail_upload_token_.GetNoArena();
}
inline void CBroadcast_BeginBroadcastSession_Response::set_thumbnail_upload_token(const ::std::string& value) {
  set_has_thumbnail_upload_token();
  thumbnail_upload_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token)
}
#if LANG_CXX11
inline void CBroadcast_BeginBroadcastSession_Response::set_thumbnail_upload_token(::std::string&& value) {
  set_has_thumbnail_upload_token();
  thumbnail_upload_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token)
}
#endif
inline void CBroadcast_BeginBroadcastSession_Response::set_thumbnail_upload_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_thumbnail_upload_token();
  thumbnail_upload_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token)
}
inline void CBroadcast_BeginBroadcastSession_Response::set_thumbnail_upload_token(const char* value, size_t size) {
  set_has_thumbnail_upload_token();
  thumbnail_upload_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token)
}
inline ::std::string* CBroadcast_BeginBroadcastSession_Response::mutable_thumbnail_upload_token() {
  set_has_thumbnail_upload_token();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token)
  return thumbnail_upload_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_BeginBroadcastSession_Response::release_thumbnail_upload_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token)
  clear_has_thumbnail_upload_token();
  return thumbnail_upload_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_BeginBroadcastSession_Response::set_allocated_thumbnail_upload_token(::std::string* thumbnail_upload_token) {
  if (thumbnail_upload_token != NULL) {
    set_has_thumbnail_upload_token();
  } else {
    clear_has_thumbnail_upload_token();
  }
  thumbnail_upload_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_upload_token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token)
}

// optional uint32 thumbnail_interval_seconds = 4 [(.proto.steam.description) = "how many seconds between thumbnails"];
inline bool CBroadcast_BeginBroadcastSession_Response::has_thumbnail_interval_seconds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CBroadcast_BeginBroadcastSession_Response::set_has_thumbnail_interval_seconds() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CBroadcast_BeginBroadcastSession_Response::clear_has_thumbnail_interval_seconds() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CBroadcast_BeginBroadcastSession_Response::clear_thumbnail_interval_seconds() {
  thumbnail_interval_seconds_ = 0u;
  clear_has_thumbnail_interval_seconds();
}
inline ::google::protobuf::uint32 CBroadcast_BeginBroadcastSession_Response::thumbnail_interval_seconds() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_interval_seconds)
  return thumbnail_interval_seconds_;
}
inline void CBroadcast_BeginBroadcastSession_Response::set_thumbnail_interval_seconds(::google::protobuf::uint32 value) {
  set_has_thumbnail_interval_seconds();
  thumbnail_interval_seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_interval_seconds)
}

// optional fixed64 thumbnail_broadcast_relay_id = 5 [(.proto.steam.description) = "unique identifier on the broadcast relay"];
inline bool CBroadcast_BeginBroadcastSession_Response::has_thumbnail_broadcast_relay_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_BeginBroadcastSession_Response::set_has_thumbnail_broadcast_relay_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CBroadcast_BeginBroadcastSession_Response::clear_has_thumbnail_broadcast_relay_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CBroadcast_BeginBroadcastSession_Response::clear_thumbnail_broadcast_relay_id() {
  thumbnail_broadcast_relay_id_ = GOOGLE_ULONGLONG(0);
  clear_has_thumbnail_broadcast_relay_id();
}
inline ::google::protobuf::uint64 CBroadcast_BeginBroadcastSession_Response::thumbnail_broadcast_relay_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_broadcast_relay_id)
  return thumbnail_broadcast_relay_id_;
}
inline void CBroadcast_BeginBroadcastSession_Response::set_thumbnail_broadcast_relay_id(::google::protobuf::uint64 value) {
  set_has_thumbnail_broadcast_relay_id();
  thumbnail_broadcast_relay_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Response.thumbnail_broadcast_relay_id)
}

// -------------------------------------------------------------------

// CBroadcast_EndBroadcastSession_Request

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_EndBroadcastSession_Request::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_EndBroadcastSession_Request::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_EndBroadcastSession_Request::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_EndBroadcastSession_Request::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
inline ::google::protobuf::uint64 CBroadcast_EndBroadcastSession_Request::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_EndBroadcastSession_Request.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_EndBroadcastSession_Request::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_EndBroadcastSession_Request.broadcast_id)
}

// -------------------------------------------------------------------

// CBroadcast_EndBroadcastSession_Response

// -------------------------------------------------------------------

// CBroadcast_StartBroadcastUpload_Request

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_StartBroadcastUpload_Request::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_StartBroadcastUpload_Request::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_StartBroadcastUpload_Request::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_StartBroadcastUpload_Request::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
inline ::google::protobuf::uint64 CBroadcast_StartBroadcastUpload_Request::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Request.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_StartBroadcastUpload_Request::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Request.broadcast_id)
}

// optional uint32 cellid = 2;
inline bool CBroadcast_StartBroadcastUpload_Request::has_cellid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_StartBroadcastUpload_Request::set_has_cellid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CBroadcast_StartBroadcastUpload_Request::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CBroadcast_StartBroadcastUpload_Request::clear_cellid() {
  cellid_ = 0u;
  clear_has_cellid();
}
inline ::google::protobuf::uint32 CBroadcast_StartBroadcastUpload_Request::cellid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Request.cellid)
  return cellid_;
}
inline void CBroadcast_StartBroadcastUpload_Request::set_cellid(::google::protobuf::uint32 value) {
  set_has_cellid();
  cellid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Request.cellid)
}

// optional bool as_rtmp = 3;
inline bool CBroadcast_StartBroadcastUpload_Request::has_as_rtmp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_StartBroadcastUpload_Request::set_has_as_rtmp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CBroadcast_StartBroadcastUpload_Request::clear_has_as_rtmp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CBroadcast_StartBroadcastUpload_Request::clear_as_rtmp() {
  as_rtmp_ = false;
  clear_has_as_rtmp();
}
inline bool CBroadcast_StartBroadcastUpload_Request::as_rtmp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Request.as_rtmp)
  return as_rtmp_;
}
inline void CBroadcast_StartBroadcastUpload_Request::set_as_rtmp(bool value) {
  set_has_as_rtmp();
  as_rtmp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Request.as_rtmp)
}

// optional uint32 delay_seconds = 4;
inline bool CBroadcast_StartBroadcastUpload_Request::has_delay_seconds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_StartBroadcastUpload_Request::set_has_delay_seconds() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CBroadcast_StartBroadcastUpload_Request::clear_has_delay_seconds() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CBroadcast_StartBroadcastUpload_Request::clear_delay_seconds() {
  delay_seconds_ = 0u;
  clear_has_delay_seconds();
}
inline ::google::protobuf::uint32 CBroadcast_StartBroadcastUpload_Request::delay_seconds() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Request.delay_seconds)
  return delay_seconds_;
}
inline void CBroadcast_StartBroadcastUpload_Request::set_delay_seconds(::google::protobuf::uint32 value) {
  set_has_delay_seconds();
  delay_seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Request.delay_seconds)
}

// -------------------------------------------------------------------

// CBroadcast_StartBroadcastUpload_Response

// optional string upload_token = 1;
inline bool CBroadcast_StartBroadcastUpload_Response::has_upload_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_StartBroadcastUpload_Response::set_has_upload_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_StartBroadcastUpload_Response::clear_has_upload_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_StartBroadcastUpload_Response::clear_upload_token() {
  upload_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_upload_token();
}
inline const ::std::string& CBroadcast_StartBroadcastUpload_Response::upload_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
  return upload_token_.GetNoArena();
}
inline void CBroadcast_StartBroadcastUpload_Response::set_upload_token(const ::std::string& value) {
  set_has_upload_token();
  upload_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
}
#if LANG_CXX11
inline void CBroadcast_StartBroadcastUpload_Response::set_upload_token(::std::string&& value) {
  set_has_upload_token();
  upload_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
}
#endif
inline void CBroadcast_StartBroadcastUpload_Response::set_upload_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_upload_token();
  upload_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
}
inline void CBroadcast_StartBroadcastUpload_Response::set_upload_token(const char* value, size_t size) {
  set_has_upload_token();
  upload_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
}
inline ::std::string* CBroadcast_StartBroadcastUpload_Response::mutable_upload_token() {
  set_has_upload_token();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
  return upload_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_StartBroadcastUpload_Response::release_upload_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
  clear_has_upload_token();
  return upload_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_StartBroadcastUpload_Response::set_allocated_upload_token(::std::string* upload_token) {
  if (upload_token != NULL) {
    set_has_upload_token();
  } else {
    clear_has_upload_token();
  }
  upload_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upload_token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
}

// optional string upload_address = 2;
inline bool CBroadcast_StartBroadcastUpload_Response::has_upload_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_StartBroadcastUpload_Response::set_has_upload_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CBroadcast_StartBroadcastUpload_Response::clear_has_upload_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CBroadcast_StartBroadcastUpload_Response::clear_upload_address() {
  upload_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_upload_address();
}
inline const ::std::string& CBroadcast_StartBroadcastUpload_Response::upload_address() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
  return upload_address_.GetNoArena();
}
inline void CBroadcast_StartBroadcastUpload_Response::set_upload_address(const ::std::string& value) {
  set_has_upload_address();
  upload_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
}
#if LANG_CXX11
inline void CBroadcast_StartBroadcastUpload_Response::set_upload_address(::std::string&& value) {
  set_has_upload_address();
  upload_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
}
#endif
inline void CBroadcast_StartBroadcastUpload_Response::set_upload_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_upload_address();
  upload_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
}
inline void CBroadcast_StartBroadcastUpload_Response::set_upload_address(const char* value, size_t size) {
  set_has_upload_address();
  upload_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
}
inline ::std::string* CBroadcast_StartBroadcastUpload_Response::mutable_upload_address() {
  set_has_upload_address();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
  return upload_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_StartBroadcastUpload_Response::release_upload_address() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
  clear_has_upload_address();
  return upload_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_StartBroadcastUpload_Response::set_allocated_upload_address(::std::string* upload_address) {
  if (upload_address != NULL) {
    set_has_upload_address();
  } else {
    clear_has_upload_address();
  }
  upload_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upload_address);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
}

// optional fixed64 upload_relay_id = 3;
inline bool CBroadcast_StartBroadcastUpload_Response::has_upload_relay_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_StartBroadcastUpload_Response::set_has_upload_relay_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CBroadcast_StartBroadcastUpload_Response::clear_has_upload_relay_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CBroadcast_StartBroadcastUpload_Response::clear_upload_relay_id() {
  upload_relay_id_ = GOOGLE_ULONGLONG(0);
  clear_has_upload_relay_id();
}
inline ::google::protobuf::uint64 CBroadcast_StartBroadcastUpload_Response::upload_relay_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_relay_id)
  return upload_relay_id_;
}
inline void CBroadcast_StartBroadcastUpload_Response::set_upload_relay_id(::google::protobuf::uint64 value) {
  set_has_upload_relay_id();
  upload_relay_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_relay_id)
}

// -------------------------------------------------------------------

// CBroadcast_NotifyBroadcastUploadStop_Notification

// optional fixed64 broadcast_relay_id = 1;
inline bool CBroadcast_NotifyBroadcastUploadStop_Notification::has_broadcast_relay_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_NotifyBroadcastUploadStop_Notification::set_has_broadcast_relay_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_NotifyBroadcastUploadStop_Notification::clear_has_broadcast_relay_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_NotifyBroadcastUploadStop_Notification::clear_broadcast_relay_id() {
  broadcast_relay_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_relay_id();
}
inline ::google::protobuf::uint64 CBroadcast_NotifyBroadcastUploadStop_Notification::broadcast_relay_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification.broadcast_relay_id)
  return broadcast_relay_id_;
}
inline void CBroadcast_NotifyBroadcastUploadStop_Notification::set_broadcast_relay_id(::google::protobuf::uint64 value) {
  set_has_broadcast_relay_id();
  broadcast_relay_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification.broadcast_relay_id)
}

// optional uint32 upload_result = 2;
inline bool CBroadcast_NotifyBroadcastUploadStop_Notification::has_upload_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_NotifyBroadcastUploadStop_Notification::set_has_upload_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CBroadcast_NotifyBroadcastUploadStop_Notification::clear_has_upload_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CBroadcast_NotifyBroadcastUploadStop_Notification::clear_upload_result() {
  upload_result_ = 0u;
  clear_has_upload_result();
}
inline ::google::protobuf::uint32 CBroadcast_NotifyBroadcastUploadStop_Notification::upload_result() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification.upload_result)
  return upload_result_;
}
inline void CBroadcast_NotifyBroadcastUploadStop_Notification::set_upload_result(::google::protobuf::uint32 value) {
  set_has_upload_result();
  upload_result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification.upload_result)
}

// -------------------------------------------------------------------

// CBroadcast_WatchBroadcast_Request

// optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
inline bool CBroadcast_WatchBroadcast_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_WatchBroadcast_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_WatchBroadcast_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_WatchBroadcast_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CBroadcast_WatchBroadcast_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Request.steamid)
  return steamid_;
}
inline void CBroadcast_WatchBroadcast_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Request.steamid)
}

// optional fixed64 existing_broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID (optional, rejoin if specified)."];
inline bool CBroadcast_WatchBroadcast_Request::has_existing_broadcast_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_WatchBroadcast_Request::set_has_existing_broadcast_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CBroadcast_WatchBroadcast_Request::clear_has_existing_broadcast_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CBroadcast_WatchBroadcast_Request::clear_existing_broadcast_id() {
  existing_broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_existing_broadcast_id();
}
inline ::google::protobuf::uint64 CBroadcast_WatchBroadcast_Request::existing_broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Request.existing_broadcast_id)
  return existing_broadcast_id_;
}
inline void CBroadcast_WatchBroadcast_Request::set_existing_broadcast_id(::google::protobuf::uint64 value) {
  set_has_existing_broadcast_id();
  existing_broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Request.existing_broadcast_id)
}

// optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
inline bool CBroadcast_WatchBroadcast_Request::has_viewer_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_WatchBroadcast_Request::set_has_viewer_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CBroadcast_WatchBroadcast_Request::clear_has_viewer_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CBroadcast_WatchBroadcast_Request::clear_viewer_token() {
  viewer_token_ = GOOGLE_ULONGLONG(0);
  clear_has_viewer_token();
}
inline ::google::protobuf::uint64 CBroadcast_WatchBroadcast_Request::viewer_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Request.viewer_token)
  return viewer_token_;
}
inline void CBroadcast_WatchBroadcast_Request::set_viewer_token(::google::protobuf::uint64 value) {
  set_has_viewer_token();
  viewer_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Request.viewer_token)
}

// optional uint32 client_ip = 4;
inline bool CBroadcast_WatchBroadcast_Request::has_client_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_WatchBroadcast_Request::set_has_client_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CBroadcast_WatchBroadcast_Request::clear_has_client_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CBroadcast_WatchBroadcast_Request::clear_client_ip() {
  client_ip_ = 0u;
  clear_has_client_ip();
}
inline ::google::protobuf::uint32 CBroadcast_WatchBroadcast_Request::client_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Request.client_ip)
  return client_ip_;
}
inline void CBroadcast_WatchBroadcast_Request::set_client_ip(::google::protobuf::uint32 value) {
  set_has_client_ip();
  client_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Request.client_ip)
}

// optional uint32 client_cell = 5;
inline bool CBroadcast_WatchBroadcast_Request::has_client_cell() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CBroadcast_WatchBroadcast_Request::set_has_client_cell() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CBroadcast_WatchBroadcast_Request::clear_has_client_cell() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CBroadcast_WatchBroadcast_Request::clear_client_cell() {
  client_cell_ = 0u;
  clear_has_client_cell();
}
inline ::google::protobuf::uint32 CBroadcast_WatchBroadcast_Request::client_cell() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Request.client_cell)
  return client_cell_;
}
inline void CBroadcast_WatchBroadcast_Request::set_client_cell(::google::protobuf::uint32 value) {
  set_has_client_cell();
  client_cell_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Request.client_cell)
}

// -------------------------------------------------------------------

// CBroadcast_WatchBroadcast_Response

// optional .proto.steam.CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1 [default = k_EWatchResponseReady];
inline bool CBroadcast_WatchBroadcast_Response::has_response() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::set_has_response() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CBroadcast_WatchBroadcast_Response::clear_has_response() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CBroadcast_WatchBroadcast_Response::clear_response() {
  response_ = 1;
  clear_has_response();
}
inline ::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::response() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.response)
  return static_cast< ::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse >(response_);
}
inline void CBroadcast_WatchBroadcast_Response::set_response(::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse value) {
  assert(::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse_IsValid(value));
  set_has_response();
  response_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.response)
}

// optional string mpd_url = 2;
inline bool CBroadcast_WatchBroadcast_Response::has_mpd_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::set_has_mpd_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_WatchBroadcast_Response::clear_has_mpd_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_WatchBroadcast_Response::clear_mpd_url() {
  mpd_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mpd_url();
}
inline const ::std::string& CBroadcast_WatchBroadcast_Response::mpd_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
  return mpd_url_.GetNoArena();
}
inline void CBroadcast_WatchBroadcast_Response::set_mpd_url(const ::std::string& value) {
  set_has_mpd_url();
  mpd_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
}
#if LANG_CXX11
inline void CBroadcast_WatchBroadcast_Response::set_mpd_url(::std::string&& value) {
  set_has_mpd_url();
  mpd_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
}
#endif
inline void CBroadcast_WatchBroadcast_Response::set_mpd_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mpd_url();
  mpd_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
}
inline void CBroadcast_WatchBroadcast_Response::set_mpd_url(const char* value, size_t size) {
  set_has_mpd_url();
  mpd_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
}
inline ::std::string* CBroadcast_WatchBroadcast_Response::mutable_mpd_url() {
  set_has_mpd_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
  return mpd_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_WatchBroadcast_Response::release_mpd_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
  clear_has_mpd_url();
  return mpd_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_WatchBroadcast_Response::set_allocated_mpd_url(::std::string* mpd_url) {
  if (mpd_url != NULL) {
    set_has_mpd_url();
  } else {
    clear_has_mpd_url();
  }
  mpd_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mpd_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
}

// optional fixed64 broadcast_id = 3;
inline bool CBroadcast_WatchBroadcast_Response::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CBroadcast_WatchBroadcast_Response::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CBroadcast_WatchBroadcast_Response::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
inline ::google::protobuf::uint64 CBroadcast_WatchBroadcast_Response::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_WatchBroadcast_Response::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.broadcast_id)
}

// optional uint64 gameid = 4;
inline bool CBroadcast_WatchBroadcast_Response::has_gameid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::set_has_gameid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CBroadcast_WatchBroadcast_Response::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CBroadcast_WatchBroadcast_Response::clear_gameid() {
  gameid_ = GOOGLE_ULONGLONG(0);
  clear_has_gameid();
}
inline ::google::protobuf::uint64 CBroadcast_WatchBroadcast_Response::gameid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.gameid)
  return gameid_;
}
inline void CBroadcast_WatchBroadcast_Response::set_gameid(::google::protobuf::uint64 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.gameid)
}

// optional string title = 5;
inline bool CBroadcast_WatchBroadcast_Response::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CBroadcast_WatchBroadcast_Response::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CBroadcast_WatchBroadcast_Response::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& CBroadcast_WatchBroadcast_Response::title() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.title)
  return title_.GetNoArena();
}
inline void CBroadcast_WatchBroadcast_Response::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.title)
}
#if LANG_CXX11
inline void CBroadcast_WatchBroadcast_Response::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_WatchBroadcast_Response.title)
}
#endif
inline void CBroadcast_WatchBroadcast_Response::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_WatchBroadcast_Response.title)
}
inline void CBroadcast_WatchBroadcast_Response::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_WatchBroadcast_Response.title)
}
inline ::std::string* CBroadcast_WatchBroadcast_Response::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_WatchBroadcast_Response.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_WatchBroadcast_Response::release_title() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_WatchBroadcast_Response.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_WatchBroadcast_Response::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_WatchBroadcast_Response.title)
}

// optional uint32 num_viewers = 6;
inline bool CBroadcast_WatchBroadcast_Response::has_num_viewers() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::set_has_num_viewers() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CBroadcast_WatchBroadcast_Response::clear_has_num_viewers() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CBroadcast_WatchBroadcast_Response::clear_num_viewers() {
  num_viewers_ = 0u;
  clear_has_num_viewers();
}
inline ::google::protobuf::uint32 CBroadcast_WatchBroadcast_Response::num_viewers() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.num_viewers)
  return num_viewers_;
}
inline void CBroadcast_WatchBroadcast_Response::set_num_viewers(::google::protobuf::uint32 value) {
  set_has_num_viewers();
  num_viewers_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.num_viewers)
}

// optional int32 permission = 7;
inline bool CBroadcast_WatchBroadcast_Response::has_permission() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::set_has_permission() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CBroadcast_WatchBroadcast_Response::clear_has_permission() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CBroadcast_WatchBroadcast_Response::clear_permission() {
  permission_ = 0;
  clear_has_permission();
}
inline ::google::protobuf::int32 CBroadcast_WatchBroadcast_Response::permission() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.permission)
  return permission_;
}
inline void CBroadcast_WatchBroadcast_Response::set_permission(::google::protobuf::int32 value) {
  set_has_permission();
  permission_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.permission)
}

// optional bool is_rtmp = 8;
inline bool CBroadcast_WatchBroadcast_Response::has_is_rtmp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::set_has_is_rtmp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CBroadcast_WatchBroadcast_Response::clear_has_is_rtmp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CBroadcast_WatchBroadcast_Response::clear_is_rtmp() {
  is_rtmp_ = false;
  clear_has_is_rtmp();
}
inline bool CBroadcast_WatchBroadcast_Response::is_rtmp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.is_rtmp)
  return is_rtmp_;
}
inline void CBroadcast_WatchBroadcast_Response::set_is_rtmp(bool value) {
  set_has_is_rtmp();
  is_rtmp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.is_rtmp)
}

// optional int32 seconds_delay = 9;
inline bool CBroadcast_WatchBroadcast_Response::has_seconds_delay() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::set_has_seconds_delay() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CBroadcast_WatchBroadcast_Response::clear_has_seconds_delay() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CBroadcast_WatchBroadcast_Response::clear_seconds_delay() {
  seconds_delay_ = 0;
  clear_has_seconds_delay();
}
inline ::google::protobuf::int32 CBroadcast_WatchBroadcast_Response::seconds_delay() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.seconds_delay)
  return seconds_delay_;
}
inline void CBroadcast_WatchBroadcast_Response::set_seconds_delay(::google::protobuf::int32 value) {
  set_has_seconds_delay();
  seconds_delay_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.seconds_delay)
}

// optional fixed64 viewer_token = 10;
inline bool CBroadcast_WatchBroadcast_Response::has_viewer_token() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::set_has_viewer_token() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CBroadcast_WatchBroadcast_Response::clear_has_viewer_token() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CBroadcast_WatchBroadcast_Response::clear_viewer_token() {
  viewer_token_ = GOOGLE_ULONGLONG(0);
  clear_has_viewer_token();
}
inline ::google::protobuf::uint64 CBroadcast_WatchBroadcast_Response::viewer_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.viewer_token)
  return viewer_token_;
}
inline void CBroadcast_WatchBroadcast_Response::set_viewer_token(::google::protobuf::uint64 value) {
  set_has_viewer_token();
  viewer_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.viewer_token)
}

// optional string hls_m3u8_master_url = 11;
inline bool CBroadcast_WatchBroadcast_Response::has_hls_m3u8_master_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_WatchBroadcast_Response::set_has_hls_m3u8_master_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CBroadcast_WatchBroadcast_Response::clear_has_hls_m3u8_master_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CBroadcast_WatchBroadcast_Response::clear_hls_m3u8_master_url() {
  hls_m3u8_master_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hls_m3u8_master_url();
}
inline const ::std::string& CBroadcast_WatchBroadcast_Response::hls_m3u8_master_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
  return hls_m3u8_master_url_.GetNoArena();
}
inline void CBroadcast_WatchBroadcast_Response::set_hls_m3u8_master_url(const ::std::string& value) {
  set_has_hls_m3u8_master_url();
  hls_m3u8_master_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
}
#if LANG_CXX11
inline void CBroadcast_WatchBroadcast_Response::set_hls_m3u8_master_url(::std::string&& value) {
  set_has_hls_m3u8_master_url();
  hls_m3u8_master_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
}
#endif
inline void CBroadcast_WatchBroadcast_Response::set_hls_m3u8_master_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hls_m3u8_master_url();
  hls_m3u8_master_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
}
inline void CBroadcast_WatchBroadcast_Response::set_hls_m3u8_master_url(const char* value, size_t size) {
  set_has_hls_m3u8_master_url();
  hls_m3u8_master_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
}
inline ::std::string* CBroadcast_WatchBroadcast_Response::mutable_hls_m3u8_master_url() {
  set_has_hls_m3u8_master_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
  return hls_m3u8_master_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_WatchBroadcast_Response::release_hls_m3u8_master_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
  clear_has_hls_m3u8_master_url();
  return hls_m3u8_master_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_WatchBroadcast_Response::set_allocated_hls_m3u8_master_url(::std::string* hls_m3u8_master_url) {
  if (hls_m3u8_master_url != NULL) {
    set_has_hls_m3u8_master_url();
  } else {
    clear_has_hls_m3u8_master_url();
  }
  hls_m3u8_master_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hls_m3u8_master_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastStatus_Request

// optional fixed64 steamid = 1;
inline bool CBroadcast_GetBroadcastStatus_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_GetBroadcastStatus_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_GetBroadcastStatus_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_GetBroadcastStatus_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CBroadcast_GetBroadcastStatus_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Request.steamid)
  return steamid_;
}
inline void CBroadcast_GetBroadcastStatus_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Request.steamid)
}

// optional fixed64 broadcast_id = 2;
inline bool CBroadcast_GetBroadcastStatus_Request::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_GetBroadcastStatus_Request::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CBroadcast_GetBroadcastStatus_Request::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CBroadcast_GetBroadcastStatus_Request::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
inline ::google::protobuf::uint64 CBroadcast_GetBroadcastStatus_Request::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Request.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_GetBroadcastStatus_Request::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Request.broadcast_id)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastStatus_Response

// optional uint64 gameid = 1;
inline bool CBroadcast_GetBroadcastStatus_Response::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_gameid() {
  gameid_ = GOOGLE_ULONGLONG(0);
  clear_has_gameid();
}
inline ::google::protobuf::uint64 CBroadcast_GetBroadcastStatus_Response::gameid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.gameid)
  return gameid_;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_gameid(::google::protobuf::uint64 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.gameid)
}

// optional string title = 2;
inline bool CBroadcast_GetBroadcastStatus_Response::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& CBroadcast_GetBroadcastStatus_Response::title() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
  return title_.GetNoArena();
}
inline void CBroadcast_GetBroadcastStatus_Response::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
}
#if LANG_CXX11
inline void CBroadcast_GetBroadcastStatus_Response::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
}
#endif
inline void CBroadcast_GetBroadcastStatus_Response::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
}
inline void CBroadcast_GetBroadcastStatus_Response::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
}
inline ::std::string* CBroadcast_GetBroadcastStatus_Response::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_GetBroadcastStatus_Response::release_title() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_GetBroadcastStatus_Response::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
}

// optional uint32 num_viewers = 3;
inline bool CBroadcast_GetBroadcastStatus_Response::has_num_viewers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_has_num_viewers() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_has_num_viewers() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_num_viewers() {
  num_viewers_ = 0u;
  clear_has_num_viewers();
}
inline ::google::protobuf::uint32 CBroadcast_GetBroadcastStatus_Response::num_viewers() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.num_viewers)
  return num_viewers_;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_num_viewers(::google::protobuf::uint32 value) {
  set_has_num_viewers();
  num_viewers_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.num_viewers)
}

// optional int32 permission = 4;
inline bool CBroadcast_GetBroadcastStatus_Response::has_permission() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_has_permission() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_has_permission() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_permission() {
  permission_ = 0;
  clear_has_permission();
}
inline ::google::protobuf::int32 CBroadcast_GetBroadcastStatus_Response::permission() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.permission)
  return permission_;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_permission(::google::protobuf::int32 value) {
  set_has_permission();
  permission_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.permission)
}

// optional bool is_rtmp = 5;
inline bool CBroadcast_GetBroadcastStatus_Response::has_is_rtmp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_has_is_rtmp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_has_is_rtmp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_is_rtmp() {
  is_rtmp_ = false;
  clear_has_is_rtmp();
}
inline bool CBroadcast_GetBroadcastStatus_Response::is_rtmp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.is_rtmp)
  return is_rtmp_;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_is_rtmp(bool value) {
  set_has_is_rtmp();
  is_rtmp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.is_rtmp)
}

// optional int32 seconds_delay = 6;
inline bool CBroadcast_GetBroadcastStatus_Response::has_seconds_delay() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_has_seconds_delay() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_has_seconds_delay() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_seconds_delay() {
  seconds_delay_ = 0;
  clear_has_seconds_delay();
}
inline ::google::protobuf::int32 CBroadcast_GetBroadcastStatus_Response::seconds_delay() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.seconds_delay)
  return seconds_delay_;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_seconds_delay(::google::protobuf::int32 value) {
  set_has_seconds_delay();
  seconds_delay_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.seconds_delay)
}

// optional bool is_publisher = 7;
inline bool CBroadcast_GetBroadcastStatus_Response::has_is_publisher() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_has_is_publisher() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_has_is_publisher() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_is_publisher() {
  is_publisher_ = false;
  clear_has_is_publisher();
}
inline bool CBroadcast_GetBroadcastStatus_Response::is_publisher() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.is_publisher)
  return is_publisher_;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_is_publisher(bool value) {
  set_has_is_publisher();
  is_publisher_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.is_publisher)
}

// -------------------------------------------------------------------

// CBroadcast_InviteToBroadcast_Request

// optional fixed64 steamid = 1;
inline bool CBroadcast_InviteToBroadcast_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_InviteToBroadcast_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_InviteToBroadcast_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_InviteToBroadcast_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CBroadcast_InviteToBroadcast_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_InviteToBroadcast_Request.steamid)
  return steamid_;
}
inline void CBroadcast_InviteToBroadcast_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_InviteToBroadcast_Request.steamid)
}

// optional bool approval_response = 2;
inline bool CBroadcast_InviteToBroadcast_Request::has_approval_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_InviteToBroadcast_Request::set_has_approval_response() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CBroadcast_InviteToBroadcast_Request::clear_has_approval_response() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CBroadcast_InviteToBroadcast_Request::clear_approval_response() {
  approval_response_ = false;
  clear_has_approval_response();
}
inline bool CBroadcast_InviteToBroadcast_Request::approval_response() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_InviteToBroadcast_Request.approval_response)
  return approval_response_;
}
inline void CBroadcast_InviteToBroadcast_Request::set_approval_response(bool value) {
  set_has_approval_response();
  approval_response_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_InviteToBroadcast_Request.approval_response)
}

// -------------------------------------------------------------------

// CBroadcast_InviteToBroadcast_Response

// optional bool success = 1;
inline bool CBroadcast_InviteToBroadcast_Response::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_InviteToBroadcast_Response::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_InviteToBroadcast_Response::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_InviteToBroadcast_Response::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool CBroadcast_InviteToBroadcast_Response::success() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_InviteToBroadcast_Response.success)
  return success_;
}
inline void CBroadcast_InviteToBroadcast_Response::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_InviteToBroadcast_Response.success)
}

// -------------------------------------------------------------------

// CBroadcast_SendBroadcastStateToServer_Request

// optional int32 permission = 1;
inline bool CBroadcast_SendBroadcastStateToServer_Request::has_permission() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_has_permission() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::clear_has_permission() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::clear_permission() {
  permission_ = 0;
  clear_has_permission();
}
inline ::google::protobuf::int32 CBroadcast_SendBroadcastStateToServer_Request::permission() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.permission)
  return permission_;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_permission(::google::protobuf::int32 value) {
  set_has_permission();
  permission_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.permission)
}

// optional uint64 gameid = 2;
inline bool CBroadcast_SendBroadcastStateToServer_Request::has_gameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_has_gameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::clear_gameid() {
  gameid_ = GOOGLE_ULONGLONG(0);
  clear_has_gameid();
}
inline ::google::protobuf::uint64 CBroadcast_SendBroadcastStateToServer_Request::gameid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.gameid)
  return gameid_;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_gameid(::google::protobuf::uint64 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.gameid)
}

// optional string title = 3;
inline bool CBroadcast_SendBroadcastStateToServer_Request::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& CBroadcast_SendBroadcastStateToServer_Request::title() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
  return title_.GetNoArena();
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
}
#if LANG_CXX11
inline void CBroadcast_SendBroadcastStateToServer_Request::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
}
#endif
inline void CBroadcast_SendBroadcastStateToServer_Request::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
}
inline ::std::string* CBroadcast_SendBroadcastStateToServer_Request::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_SendBroadcastStateToServer_Request::release_title() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
}

// optional string game_data_config = 4;
inline bool CBroadcast_SendBroadcastStateToServer_Request::has_game_data_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_has_game_data_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::clear_has_game_data_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::clear_game_data_config() {
  game_data_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_data_config();
}
inline const ::std::string& CBroadcast_SendBroadcastStateToServer_Request::game_data_config() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
  return game_data_config_.GetNoArena();
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_game_data_config(const ::std::string& value) {
  set_has_game_data_config();
  game_data_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
}
#if LANG_CXX11
inline void CBroadcast_SendBroadcastStateToServer_Request::set_game_data_config(::std::string&& value) {
  set_has_game_data_config();
  game_data_config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
}
#endif
inline void CBroadcast_SendBroadcastStateToServer_Request::set_game_data_config(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_data_config();
  game_data_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_game_data_config(const char* value, size_t size) {
  set_has_game_data_config();
  game_data_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
}
inline ::std::string* CBroadcast_SendBroadcastStateToServer_Request::mutable_game_data_config() {
  set_has_game_data_config();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
  return game_data_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_SendBroadcastStateToServer_Request::release_game_data_config() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
  clear_has_game_data_config();
  return game_data_config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_allocated_game_data_config(::std::string* game_data_config) {
  if (game_data_config != NULL) {
    set_has_game_data_config();
  } else {
    clear_has_game_data_config();
  }
  game_data_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_data_config);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
}

// -------------------------------------------------------------------

// CBroadcast_SendBroadcastStateToServer_Response

// -------------------------------------------------------------------

// CBroadcast_NotifyBroadcastSessionHeartbeat_Notification

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
inline ::google::protobuf::uint64 CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification.broadcast_id)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastChatInfo_Request

// optional fixed64 steamid = 1;
inline bool CBroadcast_GetBroadcastChatInfo_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CBroadcast_GetBroadcastChatInfo_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.steamid)
  return steamid_;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.steamid)
}

// optional fixed64 broadcast_id = 2;
inline bool CBroadcast_GetBroadcastChatInfo_Request::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
inline ::google::protobuf::uint64 CBroadcast_GetBroadcastChatInfo_Request::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.broadcast_id)
}

// optional uint32 client_ip = 3;
inline bool CBroadcast_GetBroadcastChatInfo_Request::has_client_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::set_has_client_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::clear_has_client_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::clear_client_ip() {
  client_ip_ = 0u;
  clear_has_client_ip();
}
inline ::google::protobuf::uint32 CBroadcast_GetBroadcastChatInfo_Request::client_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.client_ip)
  return client_ip_;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::set_client_ip(::google::protobuf::uint32 value) {
  set_has_client_ip();
  client_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.client_ip)
}

// optional uint32 client_cell = 4;
inline bool CBroadcast_GetBroadcastChatInfo_Request::has_client_cell() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::set_has_client_cell() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::clear_has_client_cell() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::clear_client_cell() {
  client_cell_ = 0u;
  clear_has_client_cell();
}
inline ::google::protobuf::uint32 CBroadcast_GetBroadcastChatInfo_Request::client_cell() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.client_cell)
  return client_cell_;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::set_client_cell(::google::protobuf::uint32 value) {
  set_has_client_cell();
  client_cell_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.client_cell)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastChatInfo_Response

// optional fixed64 chat_id = 1;
inline bool CBroadcast_GetBroadcastChatInfo_Response::has_chat_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_GetBroadcastChatInfo_Response::set_has_chat_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CBroadcast_GetBroadcastChatInfo_Response::clear_has_chat_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CBroadcast_GetBroadcastChatInfo_Response::clear_chat_id() {
  chat_id_ = GOOGLE_ULONGLONG(0);
  clear_has_chat_id();
}
inline ::google::protobuf::uint64 CBroadcast_GetBroadcastChatInfo_Response::chat_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.chat_id)
  return chat_id_;
}
inline void CBroadcast_GetBroadcastChatInfo_Response::set_chat_id(::google::protobuf::uint64 value) {
  set_has_chat_id();
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.chat_id)
}

// optional string view_url = 2;
inline bool CBroadcast_GetBroadcastChatInfo_Response::has_view_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_GetBroadcastChatInfo_Response::set_has_view_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_GetBroadcastChatInfo_Response::clear_has_view_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_GetBroadcastChatInfo_Response::clear_view_url() {
  view_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_view_url();
}
inline const ::std::string& CBroadcast_GetBroadcastChatInfo_Response::view_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
  return view_url_.GetNoArena();
}
inline void CBroadcast_GetBroadcastChatInfo_Response::set_view_url(const ::std::string& value) {
  set_has_view_url();
  view_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
}
#if LANG_CXX11
inline void CBroadcast_GetBroadcastChatInfo_Response::set_view_url(::std::string&& value) {
  set_has_view_url();
  view_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
}
#endif
inline void CBroadcast_GetBroadcastChatInfo_Response::set_view_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_view_url();
  view_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
}
inline void CBroadcast_GetBroadcastChatInfo_Response::set_view_url(const char* value, size_t size) {
  set_has_view_url();
  view_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
}
inline ::std::string* CBroadcast_GetBroadcastChatInfo_Response::mutable_view_url() {
  set_has_view_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
  return view_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_GetBroadcastChatInfo_Response::release_view_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
  clear_has_view_url();
  return view_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_GetBroadcastChatInfo_Response::set_allocated_view_url(::std::string* view_url) {
  if (view_url != NULL) {
    set_has_view_url();
  } else {
    clear_has_view_url();
  }
  view_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), view_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
}

// optional string view_url_template = 3;
inline bool CBroadcast_GetBroadcastChatInfo_Response::has_view_url_template() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_GetBroadcastChatInfo_Response::set_has_view_url_template() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CBroadcast_GetBroadcastChatInfo_Response::clear_has_view_url_template() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CBroadcast_GetBroadcastChatInfo_Response::clear_view_url_template() {
  view_url_template_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_view_url_template();
}
inline const ::std::string& CBroadcast_GetBroadcastChatInfo_Response::view_url_template() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
  return view_url_template_.GetNoArena();
}
inline void CBroadcast_GetBroadcastChatInfo_Response::set_view_url_template(const ::std::string& value) {
  set_has_view_url_template();
  view_url_template_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
}
#if LANG_CXX11
inline void CBroadcast_GetBroadcastChatInfo_Response::set_view_url_template(::std::string&& value) {
  set_has_view_url_template();
  view_url_template_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
}
#endif
inline void CBroadcast_GetBroadcastChatInfo_Response::set_view_url_template(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_view_url_template();
  view_url_template_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
}
inline void CBroadcast_GetBroadcastChatInfo_Response::set_view_url_template(const char* value, size_t size) {
  set_has_view_url_template();
  view_url_template_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
}
inline ::std::string* CBroadcast_GetBroadcastChatInfo_Response::mutable_view_url_template() {
  set_has_view_url_template();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
  return view_url_template_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_GetBroadcastChatInfo_Response::release_view_url_template() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
  clear_has_view_url_template();
  return view_url_template_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_GetBroadcastChatInfo_Response::set_allocated_view_url_template(::std::string* view_url_template) {
  if (view_url_template != NULL) {
    set_has_view_url_template();
  } else {
    clear_has_view_url_template();
  }
  view_url_template_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), view_url_template);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
}

// -------------------------------------------------------------------

// CBroadcast_PostChatMessage_Request

// optional fixed64 chat_id = 1;
inline bool CBroadcast_PostChatMessage_Request::has_chat_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_PostChatMessage_Request::set_has_chat_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CBroadcast_PostChatMessage_Request::clear_has_chat_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CBroadcast_PostChatMessage_Request::clear_chat_id() {
  chat_id_ = GOOGLE_ULONGLONG(0);
  clear_has_chat_id();
}
inline ::google::protobuf::uint64 CBroadcast_PostChatMessage_Request::chat_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_PostChatMessage_Request.chat_id)
  return chat_id_;
}
inline void CBroadcast_PostChatMessage_Request::set_chat_id(::google::protobuf::uint64 value) {
  set_has_chat_id();
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_PostChatMessage_Request.chat_id)
}

// optional string message = 2;
inline bool CBroadcast_PostChatMessage_Request::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_PostChatMessage_Request::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_PostChatMessage_Request::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_PostChatMessage_Request::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& CBroadcast_PostChatMessage_Request::message() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_PostChatMessage_Request.message)
  return message_.GetNoArena();
}
inline void CBroadcast_PostChatMessage_Request::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_PostChatMessage_Request.message)
}
#if LANG_CXX11
inline void CBroadcast_PostChatMessage_Request::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_PostChatMessage_Request.message)
}
#endif
inline void CBroadcast_PostChatMessage_Request::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_PostChatMessage_Request.message)
}
inline void CBroadcast_PostChatMessage_Request::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_PostChatMessage_Request.message)
}
inline ::std::string* CBroadcast_PostChatMessage_Request::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_PostChatMessage_Request.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_PostChatMessage_Request::release_message() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_PostChatMessage_Request.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_PostChatMessage_Request::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_PostChatMessage_Request.message)
}

// optional uint32 instance_id = 3;
inline bool CBroadcast_PostChatMessage_Request::has_instance_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_PostChatMessage_Request::set_has_instance_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CBroadcast_PostChatMessage_Request::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CBroadcast_PostChatMessage_Request::clear_instance_id() {
  instance_id_ = 0u;
  clear_has_instance_id();
}
inline ::google::protobuf::uint32 CBroadcast_PostChatMessage_Request::instance_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_PostChatMessage_Request.instance_id)
  return instance_id_;
}
inline void CBroadcast_PostChatMessage_Request::set_instance_id(::google::protobuf::uint32 value) {
  set_has_instance_id();
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_PostChatMessage_Request.instance_id)
}

// -------------------------------------------------------------------

// CBroadcast_PostChatMessage_Response

// optional string persona_name = 1;
inline bool CBroadcast_PostChatMessage_Response::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_PostChatMessage_Response::set_has_persona_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_PostChatMessage_Response::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_PostChatMessage_Response::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona_name();
}
inline const ::std::string& CBroadcast_PostChatMessage_Response::persona_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
  return persona_name_.GetNoArena();
}
inline void CBroadcast_PostChatMessage_Response::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
}
#if LANG_CXX11
inline void CBroadcast_PostChatMessage_Response::set_persona_name(::std::string&& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
}
#endif
inline void CBroadcast_PostChatMessage_Response::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
}
inline void CBroadcast_PostChatMessage_Response::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
}
inline ::std::string* CBroadcast_PostChatMessage_Response::mutable_persona_name() {
  set_has_persona_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_PostChatMessage_Response::release_persona_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
  clear_has_persona_name();
  return persona_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_PostChatMessage_Response::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != NULL) {
    set_has_persona_name();
  } else {
    clear_has_persona_name();
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
}

// optional bool in_game = 2;
inline bool CBroadcast_PostChatMessage_Response::has_in_game() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_PostChatMessage_Response::set_has_in_game() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CBroadcast_PostChatMessage_Response::clear_has_in_game() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CBroadcast_PostChatMessage_Response::clear_in_game() {
  in_game_ = false;
  clear_has_in_game();
}
inline bool CBroadcast_PostChatMessage_Response::in_game() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_PostChatMessage_Response.in_game)
  return in_game_;
}
inline void CBroadcast_PostChatMessage_Response::set_in_game(bool value) {
  set_has_in_game();
  in_game_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_PostChatMessage_Response.in_game)
}

// optional int32 result = 3;
inline bool CBroadcast_PostChatMessage_Response::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_PostChatMessage_Response::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CBroadcast_PostChatMessage_Response::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CBroadcast_PostChatMessage_Response::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 CBroadcast_PostChatMessage_Response::result() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_PostChatMessage_Response.result)
  return result_;
}
inline void CBroadcast_PostChatMessage_Response::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_PostChatMessage_Response.result)
}

// -------------------------------------------------------------------

// CBroadcast_MuteBroadcastChatUser_Request

// optional fixed64 chat_id = 1;
inline bool CBroadcast_MuteBroadcastChatUser_Request::has_chat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_MuteBroadcastChatUser_Request::set_has_chat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_MuteBroadcastChatUser_Request::clear_has_chat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_MuteBroadcastChatUser_Request::clear_chat_id() {
  chat_id_ = GOOGLE_ULONGLONG(0);
  clear_has_chat_id();
}
inline ::google::protobuf::uint64 CBroadcast_MuteBroadcastChatUser_Request::chat_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_MuteBroadcastChatUser_Request.chat_id)
  return chat_id_;
}
inline void CBroadcast_MuteBroadcastChatUser_Request::set_chat_id(::google::protobuf::uint64 value) {
  set_has_chat_id();
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_MuteBroadcastChatUser_Request.chat_id)
}

// optional fixed64 user_steamid = 2;
inline bool CBroadcast_MuteBroadcastChatUser_Request::has_user_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_MuteBroadcastChatUser_Request::set_has_user_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CBroadcast_MuteBroadcastChatUser_Request::clear_has_user_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CBroadcast_MuteBroadcastChatUser_Request::clear_user_steamid() {
  user_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_steamid();
}
inline ::google::protobuf::uint64 CBroadcast_MuteBroadcastChatUser_Request::user_steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_MuteBroadcastChatUser_Request.user_steamid)
  return user_steamid_;
}
inline void CBroadcast_MuteBroadcastChatUser_Request::set_user_steamid(::google::protobuf::uint64 value) {
  set_has_user_steamid();
  user_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_MuteBroadcastChatUser_Request.user_steamid)
}

// optional bool muted = 3;
inline bool CBroadcast_MuteBroadcastChatUser_Request::has_muted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_MuteBroadcastChatUser_Request::set_has_muted() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CBroadcast_MuteBroadcastChatUser_Request::clear_has_muted() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CBroadcast_MuteBroadcastChatUser_Request::clear_muted() {
  muted_ = false;
  clear_has_muted();
}
inline bool CBroadcast_MuteBroadcastChatUser_Request::muted() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_MuteBroadcastChatUser_Request.muted)
  return muted_;
}
inline void CBroadcast_MuteBroadcastChatUser_Request::set_muted(bool value) {
  set_has_muted();
  muted_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_MuteBroadcastChatUser_Request.muted)
}

// -------------------------------------------------------------------

// CBroadcast_MuteBroadcastChatUser_Response

// -------------------------------------------------------------------

// CBroadcast_RemoveUserChatText_Request

// optional fixed64 chat_id = 1;
inline bool CBroadcast_RemoveUserChatText_Request::has_chat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_RemoveUserChatText_Request::set_has_chat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_RemoveUserChatText_Request::clear_has_chat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_RemoveUserChatText_Request::clear_chat_id() {
  chat_id_ = GOOGLE_ULONGLONG(0);
  clear_has_chat_id();
}
inline ::google::protobuf::uint64 CBroadcast_RemoveUserChatText_Request::chat_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_RemoveUserChatText_Request.chat_id)
  return chat_id_;
}
inline void CBroadcast_RemoveUserChatText_Request::set_chat_id(::google::protobuf::uint64 value) {
  set_has_chat_id();
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_RemoveUserChatText_Request.chat_id)
}

// optional fixed64 user_steamid = 2;
inline bool CBroadcast_RemoveUserChatText_Request::has_user_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_RemoveUserChatText_Request::set_has_user_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CBroadcast_RemoveUserChatText_Request::clear_has_user_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CBroadcast_RemoveUserChatText_Request::clear_user_steamid() {
  user_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_steamid();
}
inline ::google::protobuf::uint64 CBroadcast_RemoveUserChatText_Request::user_steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_RemoveUserChatText_Request.user_steamid)
  return user_steamid_;
}
inline void CBroadcast_RemoveUserChatText_Request::set_user_steamid(::google::protobuf::uint64 value) {
  set_has_user_steamid();
  user_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_RemoveUserChatText_Request.user_steamid)
}

// -------------------------------------------------------------------

// CBroadcast_RemoveUserChatText_Response

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastChatUserNames_Request

// optional fixed64 chat_id = 1;
inline bool CBroadcast_GetBroadcastChatUserNames_Request::has_chat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_GetBroadcastChatUserNames_Request::set_has_chat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_GetBroadcastChatUserNames_Request::clear_has_chat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_GetBroadcastChatUserNames_Request::clear_chat_id() {
  chat_id_ = GOOGLE_ULONGLONG(0);
  clear_has_chat_id();
}
inline ::google::protobuf::uint64 CBroadcast_GetBroadcastChatUserNames_Request::chat_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request.chat_id)
  return chat_id_;
}
inline void CBroadcast_GetBroadcastChatUserNames_Request::set_chat_id(::google::protobuf::uint64 value) {
  set_has_chat_id();
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request.chat_id)
}

// repeated fixed64 user_steamid = 2;
inline int CBroadcast_GetBroadcastChatUserNames_Request::user_steamid_size() const {
  return user_steamid_.size();
}
inline void CBroadcast_GetBroadcastChatUserNames_Request::clear_user_steamid() {
  user_steamid_.Clear();
}
inline ::google::protobuf::uint64 CBroadcast_GetBroadcastChatUserNames_Request::user_steamid(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request.user_steamid)
  return user_steamid_.Get(index);
}
inline void CBroadcast_GetBroadcastChatUserNames_Request::set_user_steamid(int index, ::google::protobuf::uint64 value) {
  user_steamid_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request.user_steamid)
}
inline void CBroadcast_GetBroadcastChatUserNames_Request::add_user_steamid(::google::protobuf::uint64 value) {
  user_steamid_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request.user_steamid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CBroadcast_GetBroadcastChatUserNames_Request::user_steamid() const {
  // @@protoc_insertion_point(field_list:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request.user_steamid)
  return user_steamid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CBroadcast_GetBroadcastChatUserNames_Request::mutable_user_steamid() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request.user_steamid)
  return &user_steamid_;
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastChatUserNames_Response_PersonaName

// optional fixed64 steam_id = 1;
inline bool CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.steam_id)
  return steam_id_;
}
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.steam_id)
}

// optional string persona = 2;
inline bool CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::has_persona() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_has_persona() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::clear_has_persona() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::clear_persona() {
  persona_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona();
}
inline const ::std::string& CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::persona() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
  return persona_.GetNoArena();
}
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_persona(const ::std::string& value) {
  set_has_persona();
  persona_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
}
#if LANG_CXX11
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_persona(::std::string&& value) {
  set_has_persona();
  persona_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
}
#endif
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_persona(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona();
  persona_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
}
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_persona(const char* value, size_t size) {
  set_has_persona();
  persona_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
}
inline ::std::string* CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::mutable_persona() {
  set_has_persona();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
  return persona_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::release_persona() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
  clear_has_persona();
  return persona_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_allocated_persona(::std::string* persona) {
  if (persona != NULL) {
    set_has_persona();
  } else {
    clear_has_persona();
  }
  persona_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastChatUserNames_Response

// repeated .proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName persona_names = 1;
inline int CBroadcast_GetBroadcastChatUserNames_Response::persona_names_size() const {
  return persona_names_.size();
}
inline void CBroadcast_GetBroadcastChatUserNames_Response::clear_persona_names() {
  persona_names_.Clear();
}
inline const ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& CBroadcast_GetBroadcastChatUserNames_Response::persona_names(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.persona_names)
  return persona_names_.Get(index);
}
inline ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* CBroadcast_GetBroadcastChatUserNames_Response::mutable_persona_names(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.persona_names)
  return persona_names_.Mutable(index);
}
inline ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* CBroadcast_GetBroadcastChatUserNames_Response::add_persona_names() {
  // @@protoc_insertion_point(field_add:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.persona_names)
  return persona_names_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName >*
CBroadcast_GetBroadcastChatUserNames_Response::mutable_persona_names() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.persona_names)
  return &persona_names_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName >&
CBroadcast_GetBroadcastChatUserNames_Response::persona_names() const {
  // @@protoc_insertion_point(field_list:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.persona_names)
  return persona_names_;
}

// -------------------------------------------------------------------

// CBroadcast_BroadcastViewerState_Notification

// optional fixed64 steamid = 1;
inline bool CBroadcast_BroadcastViewerState_Notification::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_BroadcastViewerState_Notification::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_BroadcastViewerState_Notification::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_BroadcastViewerState_Notification::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CBroadcast_BroadcastViewerState_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BroadcastViewerState_Notification.steamid)
  return steamid_;
}
inline void CBroadcast_BroadcastViewerState_Notification::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BroadcastViewerState_Notification.steamid)
}

// optional .proto.steam.CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2 [default = k_EViewerNeedsApproval];
inline bool CBroadcast_BroadcastViewerState_Notification::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_BroadcastViewerState_Notification::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CBroadcast_BroadcastViewerState_Notification::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CBroadcast_BroadcastViewerState_Notification::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::state() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BroadcastViewerState_Notification.state)
  return static_cast< ::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState >(state_);
}
inline void CBroadcast_BroadcastViewerState_Notification::set_state(::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState value) {
  assert(::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BroadcastViewerState_Notification.state)
}

// -------------------------------------------------------------------

// CBroadcast_WaitingBroadcastViewer_Notification

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_WaitingBroadcastViewer_Notification::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_WaitingBroadcastViewer_Notification::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_WaitingBroadcastViewer_Notification::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_WaitingBroadcastViewer_Notification::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
inline ::google::protobuf::uint64 CBroadcast_WaitingBroadcastViewer_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_WaitingBroadcastViewer_Notification::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification.broadcast_id)
}

// -------------------------------------------------------------------

// CBroadcast_StopBroadcastUpload_Notification

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_StopBroadcastUpload_Notification::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_StopBroadcastUpload_Notification::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_StopBroadcastUpload_Notification::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_StopBroadcastUpload_Notification::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
inline ::google::protobuf::uint64 CBroadcast_StopBroadcastUpload_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StopBroadcastUpload_Notification.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_StopBroadcastUpload_Notification::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StopBroadcastUpload_Notification.broadcast_id)
}

// optional fixed64 broadcast_relay_id = 2;
inline bool CBroadcast_StopBroadcastUpload_Notification::has_broadcast_relay_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_StopBroadcastUpload_Notification::set_has_broadcast_relay_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CBroadcast_StopBroadcastUpload_Notification::clear_has_broadcast_relay_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CBroadcast_StopBroadcastUpload_Notification::clear_broadcast_relay_id() {
  broadcast_relay_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_relay_id();
}
inline ::google::protobuf::uint64 CBroadcast_StopBroadcastUpload_Notification::broadcast_relay_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StopBroadcastUpload_Notification.broadcast_relay_id)
  return broadcast_relay_id_;
}
inline void CBroadcast_StopBroadcastUpload_Notification::set_broadcast_relay_id(::google::protobuf::uint64 value) {
  set_has_broadcast_relay_id();
  broadcast_relay_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StopBroadcastUpload_Notification.broadcast_relay_id)
}

// optional uint32 upload_result = 3;
inline bool CBroadcast_StopBroadcastUpload_Notification::has_upload_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_StopBroadcastUpload_Notification::set_has_upload_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CBroadcast_StopBroadcastUpload_Notification::clear_has_upload_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CBroadcast_StopBroadcastUpload_Notification::clear_upload_result() {
  upload_result_ = 0u;
  clear_has_upload_result();
}
inline ::google::protobuf::uint32 CBroadcast_StopBroadcastUpload_Notification::upload_result() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StopBroadcastUpload_Notification.upload_result)
  return upload_result_;
}
inline void CBroadcast_StopBroadcastUpload_Notification::set_upload_result(::google::protobuf::uint32 value) {
  set_has_upload_result();
  upload_result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StopBroadcastUpload_Notification.upload_result)
}

// optional bool too_many_poor_uploads = 4;
inline bool CBroadcast_StopBroadcastUpload_Notification::has_too_many_poor_uploads() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_StopBroadcastUpload_Notification::set_has_too_many_poor_uploads() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CBroadcast_StopBroadcastUpload_Notification::clear_has_too_many_poor_uploads() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CBroadcast_StopBroadcastUpload_Notification::clear_too_many_poor_uploads() {
  too_many_poor_uploads_ = false;
  clear_has_too_many_poor_uploads();
}
inline bool CBroadcast_StopBroadcastUpload_Notification::too_many_poor_uploads() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StopBroadcastUpload_Notification.too_many_poor_uploads)
  return too_many_poor_uploads_;
}
inline void CBroadcast_StopBroadcastUpload_Notification::set_too_many_poor_uploads(bool value) {
  set_has_too_many_poor_uploads();
  too_many_poor_uploads_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StopBroadcastUpload_Notification.too_many_poor_uploads)
}

// -------------------------------------------------------------------

// CBroadcast_SessionClosed_Notification

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_SessionClosed_Notification::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_SessionClosed_Notification::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_SessionClosed_Notification::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_SessionClosed_Notification::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
inline ::google::protobuf::uint64 CBroadcast_SessionClosed_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SessionClosed_Notification.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_SessionClosed_Notification::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SessionClosed_Notification.broadcast_id)
}

// -------------------------------------------------------------------

// CBroadcast_ViewerBroadcastInvite_Notification

// optional fixed64 broadcaster_steamid = 1;
inline bool CBroadcast_ViewerBroadcastInvite_Notification::has_broadcaster_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_ViewerBroadcastInvite_Notification::set_has_broadcaster_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_ViewerBroadcastInvite_Notification::clear_has_broadcaster_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_ViewerBroadcastInvite_Notification::clear_broadcaster_steamid() {
  broadcaster_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcaster_steamid();
}
inline ::google::protobuf::uint64 CBroadcast_ViewerBroadcastInvite_Notification::broadcaster_steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification.broadcaster_steamid)
  return broadcaster_steamid_;
}
inline void CBroadcast_ViewerBroadcastInvite_Notification::set_broadcaster_steamid(::google::protobuf::uint64 value) {
  set_has_broadcaster_steamid();
  broadcaster_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification.broadcaster_steamid)
}

// -------------------------------------------------------------------

// CBroadcast_BroadcastStatus_Notification

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_BroadcastStatus_Notification::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_BroadcastStatus_Notification::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_BroadcastStatus_Notification::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_BroadcastStatus_Notification::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
inline ::google::protobuf::uint64 CBroadcast_BroadcastStatus_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BroadcastStatus_Notification.broadcast_id)
  return broadcast_id_;
}
inline void CBroadcast_BroadcastStatus_Notification::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BroadcastStatus_Notification.broadcast_id)
}

// optional int32 num_viewers = 2;
inline bool CBroadcast_BroadcastStatus_Notification::has_num_viewers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_BroadcastStatus_Notification::set_has_num_viewers() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CBroadcast_BroadcastStatus_Notification::clear_has_num_viewers() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CBroadcast_BroadcastStatus_Notification::clear_num_viewers() {
  num_viewers_ = 0;
  clear_has_num_viewers();
}
inline ::google::protobuf::int32 CBroadcast_BroadcastStatus_Notification::num_viewers() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BroadcastStatus_Notification.num_viewers)
  return num_viewers_;
}
inline void CBroadcast_BroadcastStatus_Notification::set_num_viewers(::google::protobuf::int32 value) {
  set_has_num_viewers();
  num_viewers_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BroadcastStatus_Notification.num_viewers)
}

// -------------------------------------------------------------------

// CBroadcast_SendThumbnailToRelay_Notification

// optional string thumbnail_upload_token = 1;
inline bool CBroadcast_SendThumbnailToRelay_Notification::has_thumbnail_upload_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_has_thumbnail_upload_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::clear_has_thumbnail_upload_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::clear_thumbnail_upload_token() {
  thumbnail_upload_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_thumbnail_upload_token();
}
inline const ::std::string& CBroadcast_SendThumbnailToRelay_Notification::thumbnail_upload_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token)
  return thumbnail_upload_token_.GetNoArena();
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_upload_token(const ::std::string& value) {
  set_has_thumbnail_upload_token();
  thumbnail_upload_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token)
}
#if LANG_CXX11
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_upload_token(::std::string&& value) {
  set_has_thumbnail_upload_token();
  thumbnail_upload_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token)
}
#endif
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_upload_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_thumbnail_upload_token();
  thumbnail_upload_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token)
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_upload_token(const char* value, size_t size) {
  set_has_thumbnail_upload_token();
  thumbnail_upload_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token)
}
inline ::std::string* CBroadcast_SendThumbnailToRelay_Notification::mutable_thumbnail_upload_token() {
  set_has_thumbnail_upload_token();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token)
  return thumbnail_upload_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_SendThumbnailToRelay_Notification::release_thumbnail_upload_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token)
  clear_has_thumbnail_upload_token();
  return thumbnail_upload_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_allocated_thumbnail_upload_token(::std::string* thumbnail_upload_token) {
  if (thumbnail_upload_token != NULL) {
    set_has_thumbnail_upload_token();
  } else {
    clear_has_thumbnail_upload_token();
  }
  thumbnail_upload_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_upload_token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token)
}

// optional fixed64 thumbnail_broadcast_relay_id = 2;
inline bool CBroadcast_SendThumbnailToRelay_Notification::has_thumbnail_broadcast_relay_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_has_thumbnail_broadcast_relay_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::clear_has_thumbnail_broadcast_relay_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::clear_thumbnail_broadcast_relay_id() {
  thumbnail_broadcast_relay_id_ = GOOGLE_ULONGLONG(0);
  clear_has_thumbnail_broadcast_relay_id();
}
inline ::google::protobuf::uint64 CBroadcast_SendThumbnailToRelay_Notification::thumbnail_broadcast_relay_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_broadcast_relay_id)
  return thumbnail_broadcast_relay_id_;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_broadcast_relay_id(::google::protobuf::uint64 value) {
  set_has_thumbnail_broadcast_relay_id();
  thumbnail_broadcast_relay_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_broadcast_relay_id)
}

// optional bytes thumbnail_data = 3;
inline bool CBroadcast_SendThumbnailToRelay_Notification::has_thumbnail_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_has_thumbnail_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::clear_has_thumbnail_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::clear_thumbnail_data() {
  thumbnail_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_thumbnail_data();
}
inline const ::std::string& CBroadcast_SendThumbnailToRelay_Notification::thumbnail_data() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_data)
  return thumbnail_data_.GetNoArena();
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_data(const ::std::string& value) {
  set_has_thumbnail_data();
  thumbnail_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_data)
}
#if LANG_CXX11
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_data(::std::string&& value) {
  set_has_thumbnail_data();
  thumbnail_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_data)
}
#endif
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_thumbnail_data();
  thumbnail_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_data)
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_data(const void* value, size_t size) {
  set_has_thumbnail_data();
  thumbnail_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_data)
}
inline ::std::string* CBroadcast_SendThumbnailToRelay_Notification::mutable_thumbnail_data() {
  set_has_thumbnail_data();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_data)
  return thumbnail_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CBroadcast_SendThumbnailToRelay_Notification::release_thumbnail_data() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_data)
  clear_has_thumbnail_data();
  return thumbnail_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_allocated_thumbnail_data(::std::string* thumbnail_data) {
  if (thumbnail_data != NULL) {
    set_has_thumbnail_data();
  } else {
    clear_has_thumbnail_data();
  }
  thumbnail_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_data);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_data)
}

// optional uint32 thumbnail_width = 4;
inline bool CBroadcast_SendThumbnailToRelay_Notification::has_thumbnail_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_has_thumbnail_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::clear_has_thumbnail_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::clear_thumbnail_width() {
  thumbnail_width_ = 0u;
  clear_has_thumbnail_width();
}
inline ::google::protobuf::uint32 CBroadcast_SendThumbnailToRelay_Notification::thumbnail_width() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_width)
  return thumbnail_width_;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_width(::google::protobuf::uint32 value) {
  set_has_thumbnail_width();
  thumbnail_width_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_width)
}

// optional uint32 thumbnail_height = 5;
inline bool CBroadcast_SendThumbnailToRelay_Notification::has_thumbnail_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_has_thumbnail_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::clear_has_thumbnail_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::clear_thumbnail_height() {
  thumbnail_height_ = 0u;
  clear_has_thumbnail_height();
}
inline ::google::protobuf::uint32 CBroadcast_SendThumbnailToRelay_Notification::thumbnail_height() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_height)
  return thumbnail_height_;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_height(::google::protobuf::uint32 value) {
  set_has_thumbnail_height();
  thumbnail_height_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SendThumbnailToRelay_Notification.thumbnail_height)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace steam
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse>() {
  return ::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse_descriptor();
}
template <> struct is_proto_enum< ::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState>() {
  return ::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_steammessages_5fbroadcast_2esteamclient_2eproto__INCLUDED
