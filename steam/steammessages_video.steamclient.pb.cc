// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_video.steamclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_video.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CVideo_ClientGetVideoURL_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CVideo_ClientGetVideoURL_Request> {
} _CVideo_ClientGetVideoURL_Request_default_instance_;
class CVideo_ClientGetVideoURL_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CVideo_ClientGetVideoURL_Response> {
} _CVideo_ClientGetVideoURL_Response_default_instance_;
class CVideo_UnlockedH264_NotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CVideo_UnlockedH264_Notification> {
} _CVideo_UnlockedH264_Notification_default_instance_;
class CFovasVideo_ClientGetOPFSettings_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CFovasVideo_ClientGetOPFSettings_Request> {
} _CFovasVideo_ClientGetOPFSettings_Request_default_instance_;
class CFovasVideo_ClientGetOPFSettings_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CFovasVideo_ClientGetOPFSettings_Response> {
} _CFovasVideo_ClientGetOPFSettings_Response_default_instance_;

namespace protobuf_steammessages_5fvideo_2esteamclient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVideo_ClientGetVideoURL_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVideo_ClientGetVideoURL_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVideo_ClientGetVideoURL_Request, video_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVideo_ClientGetVideoURL_Request, client_cellid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVideo_ClientGetVideoURL_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVideo_ClientGetVideoURL_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVideo_ClientGetVideoURL_Response, video_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVideo_ClientGetVideoURL_Response, video_url_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVideo_UnlockedH264_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVideo_UnlockedH264_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVideo_UnlockedH264_Notification, encryption_key_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFovasVideo_ClientGetOPFSettings_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFovasVideo_ClientGetOPFSettings_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFovasVideo_ClientGetOPFSettings_Request, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFovasVideo_ClientGetOPFSettings_Request, client_cellid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFovasVideo_ClientGetOPFSettings_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFovasVideo_ClientGetOPFSettings_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFovasVideo_ClientGetOPFSettings_Response, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFovasVideo_ClientGetOPFSettings_Response, opf_settings_),
  1,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(CVideo_ClientGetVideoURL_Request)},
  { 9, 16, sizeof(CVideo_ClientGetVideoURL_Response)},
  { 18, 24, sizeof(CVideo_UnlockedH264_Notification)},
  { 25, 32, sizeof(CFovasVideo_ClientGetOPFSettings_Request)},
  { 34, 41, sizeof(CFovasVideo_ClientGetOPFSettings_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CVideo_ClientGetVideoURL_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CVideo_ClientGetVideoURL_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CVideo_UnlockedH264_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CFovasVideo_ClientGetOPFSettings_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CFovasVideo_ClientGetOPFSettings_Response_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_video.steamclient.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _CVideo_ClientGetVideoURL_Request_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CVideo_ClientGetVideoURL_Response_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CVideo_UnlockedH264_Notification_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CFovasVideo_ClientGetOPFSettings_Request_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CFovasVideo_ClientGetOPFSettings_Response_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::InitDefaults();
  _CVideo_ClientGetVideoURL_Request_default_instance_.DefaultConstruct();
  _CVideo_ClientGetVideoURL_Response_default_instance_.DefaultConstruct();
  _CVideo_UnlockedH264_Notification_default_instance_.DefaultConstruct();
  _CFovasVideo_ClientGetOPFSettings_Request_default_instance_.DefaultConstruct();
  _CFovasVideo_ClientGetOPFSettings_Response_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n%steammessages_video.steamclient.proto\022"
      "\013proto.steam\032,steammessages_unified_base"
      ".steamclient.proto\"\201\001\n CVideo_ClientGetV"
      "ideoURL_Request\022\036\n\010video_id\030\001 \001(\004B\014\202\265\030\010V"
      "ideo ID\022=\n\rclient_cellid\030\002 \001(\rB&\202\265\030\"Cell"
      " ID of client, zero if unknown\"r\n!CVideo"
      "_ClientGetVideoURL_Response\022\036\n\010video_id\030"
      "\001 \001(\004B\014\202\265\030\010Video ID\022-\n\tvideo_url\030\002 \001(\tB\032"
      "\202\265\030\026URL for video manifest\":\n CVideo_Unl"
      "ockedH264_Notification\022\026\n\016encryption_key"
      "\030\001 \001(\014\"\205\001\n(CFovasVideo_ClientGetOPFSetti"
      "ngs_Request\022\032\n\006app_id\030\001 \001(\rB\n\202\265\030\006App ID\022"
      "=\n\rclient_cellid\030\002 \001(\rB&\202\265\030\"Cell ID of c"
      "lient, zero if unknown\"|\n)CFovasVideo_Cl"
      "ientGetOPFSettings_Response\022\032\n\006app_id\030\001 "
      "\001(\rB\n\202\265\030\006App ID\0223\n\014opf_settings\030\002 \001(\tB\035\202"
      "\265\030\031JSON blob of OPF Settings2\303\001\n\005Video\022\246"
      "\001\n\021ClientGetVideoURL\022-.proto.steam.CVide"
      "o_ClientGetVideoURL_Request\032..proto.stea"
      "m.CVideo_ClientGetVideoURL_Response\"2\202\265\030"
      ".Get the initial URL to begin streaming "
      "a video\032\021\202\265\030\rVideo methods2\266\001\n\013VideoClie"
      "nt\022\240\001\n\022NotifyUnlockedH264\022-.proto.steam."
      "CVideo_UnlockedH264_Notification\032\027.proto"
      ".steam.NoResponse\"B\202\265\030>Notification from"
      " server to client that h264 has been unl"
      "ocked\032\004\300\265\030\0022\213\002\n\nFovasVideo\022\333\001\n\024ClientGet"
      "OPFSettings\0225.proto.steam.CFovasVideo_Cl"
      "ientGetOPFSettings_Request\0326.proto.steam"
      ".CFovasVideo_ClientGetOPFSettings_Respon"
      "se\"T\202\265\030PRetrieve the OPF settings JSON b"
      "lob. Available via the Client for 360 Pl"
      "ayer App\032\037\202\265\030\033Fovas Video Service Method"
      "sB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1326);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_video.steamclient.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fvideo_2esteamclient_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CVideo_ClientGetVideoURL_Request::kVideoIdFieldNumber;
const int CVideo_ClientGetVideoURL_Request::kClientCellidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CVideo_ClientGetVideoURL_Request::CVideo_ClientGetVideoURL_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fvideo_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CVideo_ClientGetVideoURL_Request)
}
CVideo_ClientGetVideoURL_Request::CVideo_ClientGetVideoURL_Request(const CVideo_ClientGetVideoURL_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&video_id_, &from.video_id_,
    reinterpret_cast<char*>(&client_cellid_) -
    reinterpret_cast<char*>(&video_id_) + sizeof(client_cellid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CVideo_ClientGetVideoURL_Request)
}

void CVideo_ClientGetVideoURL_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&video_id_, 0, reinterpret_cast<char*>(&client_cellid_) -
    reinterpret_cast<char*>(&video_id_) + sizeof(client_cellid_));
}

CVideo_ClientGetVideoURL_Request::~CVideo_ClientGetVideoURL_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CVideo_ClientGetVideoURL_Request)
  SharedDtor();
}

void CVideo_ClientGetVideoURL_Request::SharedDtor() {
}

void CVideo_ClientGetVideoURL_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CVideo_ClientGetVideoURL_Request::descriptor() {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CVideo_ClientGetVideoURL_Request& CVideo_ClientGetVideoURL_Request::default_instance() {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CVideo_ClientGetVideoURL_Request* CVideo_ClientGetVideoURL_Request::New(::google::protobuf::Arena* arena) const {
  CVideo_ClientGetVideoURL_Request* n = new CVideo_ClientGetVideoURL_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CVideo_ClientGetVideoURL_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CVideo_ClientGetVideoURL_Request)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&video_id_, 0, reinterpret_cast<char*>(&client_cellid_) -
      reinterpret_cast<char*>(&video_id_) + sizeof(client_cellid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CVideo_ClientGetVideoURL_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CVideo_ClientGetVideoURL_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 video_id = 1 [(.proto.steam.description) = "Video ID"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_video_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &video_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_cellid = 2 [(.proto.steam.description) = "Cell ID of client, zero if unknown"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_client_cellid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_cellid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CVideo_ClientGetVideoURL_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CVideo_ClientGetVideoURL_Request)
  return false;
#undef DO_
}

void CVideo_ClientGetVideoURL_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CVideo_ClientGetVideoURL_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 video_id = 1 [(.proto.steam.description) = "Video ID"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->video_id(), output);
  }

  // optional uint32 client_cellid = 2 [(.proto.steam.description) = "Cell ID of client, zero if unknown"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_cellid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CVideo_ClientGetVideoURL_Request)
}

::google::protobuf::uint8* CVideo_ClientGetVideoURL_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CVideo_ClientGetVideoURL_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 video_id = 1 [(.proto.steam.description) = "Video ID"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->video_id(), target);
  }

  // optional uint32 client_cellid = 2 [(.proto.steam.description) = "Cell ID of client, zero if unknown"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_cellid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CVideo_ClientGetVideoURL_Request)
  return target;
}

size_t CVideo_ClientGetVideoURL_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CVideo_ClientGetVideoURL_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 video_id = 1 [(.proto.steam.description) = "Video ID"];
    if (has_video_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->video_id());
    }

    // optional uint32 client_cellid = 2 [(.proto.steam.description) = "Cell ID of client, zero if unknown"];
    if (has_client_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_cellid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CVideo_ClientGetVideoURL_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CVideo_ClientGetVideoURL_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_ClientGetVideoURL_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CVideo_ClientGetVideoURL_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CVideo_ClientGetVideoURL_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CVideo_ClientGetVideoURL_Request)
    MergeFrom(*source);
  }
}

void CVideo_ClientGetVideoURL_Request::MergeFrom(const CVideo_ClientGetVideoURL_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CVideo_ClientGetVideoURL_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      video_id_ = from.video_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_cellid_ = from.client_cellid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CVideo_ClientGetVideoURL_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CVideo_ClientGetVideoURL_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_ClientGetVideoURL_Request::CopyFrom(const CVideo_ClientGetVideoURL_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CVideo_ClientGetVideoURL_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_ClientGetVideoURL_Request::IsInitialized() const {
  return true;
}

void CVideo_ClientGetVideoURL_Request::Swap(CVideo_ClientGetVideoURL_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CVideo_ClientGetVideoURL_Request::InternalSwap(CVideo_ClientGetVideoURL_Request* other) {
  std::swap(video_id_, other->video_id_);
  std::swap(client_cellid_, other->client_cellid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CVideo_ClientGetVideoURL_Request::GetMetadata() const {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CVideo_ClientGetVideoURL_Request

// optional uint64 video_id = 1 [(.proto.steam.description) = "Video ID"];
bool CVideo_ClientGetVideoURL_Request::has_video_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CVideo_ClientGetVideoURL_Request::set_has_video_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CVideo_ClientGetVideoURL_Request::clear_has_video_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CVideo_ClientGetVideoURL_Request::clear_video_id() {
  video_id_ = GOOGLE_ULONGLONG(0);
  clear_has_video_id();
}
::google::protobuf::uint64 CVideo_ClientGetVideoURL_Request::video_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVideo_ClientGetVideoURL_Request.video_id)
  return video_id_;
}
void CVideo_ClientGetVideoURL_Request::set_video_id(::google::protobuf::uint64 value) {
  set_has_video_id();
  video_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CVideo_ClientGetVideoURL_Request.video_id)
}

// optional uint32 client_cellid = 2 [(.proto.steam.description) = "Cell ID of client, zero if unknown"];
bool CVideo_ClientGetVideoURL_Request::has_client_cellid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CVideo_ClientGetVideoURL_Request::set_has_client_cellid() {
  _has_bits_[0] |= 0x00000002u;
}
void CVideo_ClientGetVideoURL_Request::clear_has_client_cellid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CVideo_ClientGetVideoURL_Request::clear_client_cellid() {
  client_cellid_ = 0u;
  clear_has_client_cellid();
}
::google::protobuf::uint32 CVideo_ClientGetVideoURL_Request::client_cellid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVideo_ClientGetVideoURL_Request.client_cellid)
  return client_cellid_;
}
void CVideo_ClientGetVideoURL_Request::set_client_cellid(::google::protobuf::uint32 value) {
  set_has_client_cellid();
  client_cellid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CVideo_ClientGetVideoURL_Request.client_cellid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CVideo_ClientGetVideoURL_Response::kVideoIdFieldNumber;
const int CVideo_ClientGetVideoURL_Response::kVideoUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CVideo_ClientGetVideoURL_Response::CVideo_ClientGetVideoURL_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fvideo_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CVideo_ClientGetVideoURL_Response)
}
CVideo_ClientGetVideoURL_Response::CVideo_ClientGetVideoURL_Response(const CVideo_ClientGetVideoURL_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  video_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_video_url()) {
    video_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_url_);
  }
  video_id_ = from.video_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CVideo_ClientGetVideoURL_Response)
}

void CVideo_ClientGetVideoURL_Response::SharedCtor() {
  _cached_size_ = 0;
  video_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_id_ = GOOGLE_ULONGLONG(0);
}

CVideo_ClientGetVideoURL_Response::~CVideo_ClientGetVideoURL_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CVideo_ClientGetVideoURL_Response)
  SharedDtor();
}

void CVideo_ClientGetVideoURL_Response::SharedDtor() {
  video_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CVideo_ClientGetVideoURL_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CVideo_ClientGetVideoURL_Response::descriptor() {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CVideo_ClientGetVideoURL_Response& CVideo_ClientGetVideoURL_Response::default_instance() {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CVideo_ClientGetVideoURL_Response* CVideo_ClientGetVideoURL_Response::New(::google::protobuf::Arena* arena) const {
  CVideo_ClientGetVideoURL_Response* n = new CVideo_ClientGetVideoURL_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CVideo_ClientGetVideoURL_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CVideo_ClientGetVideoURL_Response)
  if (has_video_url()) {
    GOOGLE_DCHECK(!video_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*video_url_.UnsafeRawStringPointer())->clear();
  }
  video_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CVideo_ClientGetVideoURL_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CVideo_ClientGetVideoURL_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 video_id = 1 [(.proto.steam.description) = "Video ID"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_video_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &video_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string video_url = 2 [(.proto.steam.description) = "URL for video manifest"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video_url().data(), this->video_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CVideo_ClientGetVideoURL_Response.video_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CVideo_ClientGetVideoURL_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CVideo_ClientGetVideoURL_Response)
  return false;
#undef DO_
}

void CVideo_ClientGetVideoURL_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CVideo_ClientGetVideoURL_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 video_id = 1 [(.proto.steam.description) = "Video ID"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->video_id(), output);
  }

  // optional string video_url = 2 [(.proto.steam.description) = "URL for video manifest"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_url().data(), this->video_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CVideo_ClientGetVideoURL_Response.video_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->video_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CVideo_ClientGetVideoURL_Response)
}

::google::protobuf::uint8* CVideo_ClientGetVideoURL_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CVideo_ClientGetVideoURL_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 video_id = 1 [(.proto.steam.description) = "Video ID"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->video_id(), target);
  }

  // optional string video_url = 2 [(.proto.steam.description) = "URL for video manifest"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_url().data(), this->video_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CVideo_ClientGetVideoURL_Response.video_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->video_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CVideo_ClientGetVideoURL_Response)
  return target;
}

size_t CVideo_ClientGetVideoURL_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CVideo_ClientGetVideoURL_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string video_url = 2 [(.proto.steam.description) = "URL for video manifest"];
    if (has_video_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_url());
    }

    // optional uint64 video_id = 1 [(.proto.steam.description) = "Video ID"];
    if (has_video_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->video_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CVideo_ClientGetVideoURL_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CVideo_ClientGetVideoURL_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_ClientGetVideoURL_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CVideo_ClientGetVideoURL_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CVideo_ClientGetVideoURL_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CVideo_ClientGetVideoURL_Response)
    MergeFrom(*source);
  }
}

void CVideo_ClientGetVideoURL_Response::MergeFrom(const CVideo_ClientGetVideoURL_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CVideo_ClientGetVideoURL_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_video_url();
      video_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      video_id_ = from.video_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CVideo_ClientGetVideoURL_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CVideo_ClientGetVideoURL_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_ClientGetVideoURL_Response::CopyFrom(const CVideo_ClientGetVideoURL_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CVideo_ClientGetVideoURL_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_ClientGetVideoURL_Response::IsInitialized() const {
  return true;
}

void CVideo_ClientGetVideoURL_Response::Swap(CVideo_ClientGetVideoURL_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CVideo_ClientGetVideoURL_Response::InternalSwap(CVideo_ClientGetVideoURL_Response* other) {
  video_url_.Swap(&other->video_url_);
  std::swap(video_id_, other->video_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CVideo_ClientGetVideoURL_Response::GetMetadata() const {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CVideo_ClientGetVideoURL_Response

// optional uint64 video_id = 1 [(.proto.steam.description) = "Video ID"];
bool CVideo_ClientGetVideoURL_Response::has_video_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CVideo_ClientGetVideoURL_Response::set_has_video_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CVideo_ClientGetVideoURL_Response::clear_has_video_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CVideo_ClientGetVideoURL_Response::clear_video_id() {
  video_id_ = GOOGLE_ULONGLONG(0);
  clear_has_video_id();
}
::google::protobuf::uint64 CVideo_ClientGetVideoURL_Response::video_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVideo_ClientGetVideoURL_Response.video_id)
  return video_id_;
}
void CVideo_ClientGetVideoURL_Response::set_video_id(::google::protobuf::uint64 value) {
  set_has_video_id();
  video_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CVideo_ClientGetVideoURL_Response.video_id)
}

// optional string video_url = 2 [(.proto.steam.description) = "URL for video manifest"];
bool CVideo_ClientGetVideoURL_Response::has_video_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CVideo_ClientGetVideoURL_Response::set_has_video_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CVideo_ClientGetVideoURL_Response::clear_has_video_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CVideo_ClientGetVideoURL_Response::clear_video_url() {
  video_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_url();
}
const ::std::string& CVideo_ClientGetVideoURL_Response::video_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVideo_ClientGetVideoURL_Response.video_url)
  return video_url_.GetNoArena();
}
void CVideo_ClientGetVideoURL_Response::set_video_url(const ::std::string& value) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CVideo_ClientGetVideoURL_Response.video_url)
}
#if LANG_CXX11
void CVideo_ClientGetVideoURL_Response::set_video_url(::std::string&& value) {
  set_has_video_url();
  video_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CVideo_ClientGetVideoURL_Response.video_url)
}
#endif
void CVideo_ClientGetVideoURL_Response::set_video_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CVideo_ClientGetVideoURL_Response.video_url)
}
void CVideo_ClientGetVideoURL_Response::set_video_url(const char* value, size_t size) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CVideo_ClientGetVideoURL_Response.video_url)
}
::std::string* CVideo_ClientGetVideoURL_Response::mutable_video_url() {
  set_has_video_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CVideo_ClientGetVideoURL_Response.video_url)
  return video_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CVideo_ClientGetVideoURL_Response::release_video_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CVideo_ClientGetVideoURL_Response.video_url)
  clear_has_video_url();
  return video_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CVideo_ClientGetVideoURL_Response::set_allocated_video_url(::std::string* video_url) {
  if (video_url != NULL) {
    set_has_video_url();
  } else {
    clear_has_video_url();
  }
  video_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CVideo_ClientGetVideoURL_Response.video_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CVideo_UnlockedH264_Notification::kEncryptionKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CVideo_UnlockedH264_Notification::CVideo_UnlockedH264_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fvideo_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CVideo_UnlockedH264_Notification)
}
CVideo_UnlockedH264_Notification::CVideo_UnlockedH264_Notification(const CVideo_UnlockedH264_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encryption_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_encryption_key()) {
    encryption_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encryption_key_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CVideo_UnlockedH264_Notification)
}

void CVideo_UnlockedH264_Notification::SharedCtor() {
  _cached_size_ = 0;
  encryption_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CVideo_UnlockedH264_Notification::~CVideo_UnlockedH264_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CVideo_UnlockedH264_Notification)
  SharedDtor();
}

void CVideo_UnlockedH264_Notification::SharedDtor() {
  encryption_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CVideo_UnlockedH264_Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CVideo_UnlockedH264_Notification::descriptor() {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CVideo_UnlockedH264_Notification& CVideo_UnlockedH264_Notification::default_instance() {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CVideo_UnlockedH264_Notification* CVideo_UnlockedH264_Notification::New(::google::protobuf::Arena* arena) const {
  CVideo_UnlockedH264_Notification* n = new CVideo_UnlockedH264_Notification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CVideo_UnlockedH264_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CVideo_UnlockedH264_Notification)
  if (has_encryption_key()) {
    GOOGLE_DCHECK(!encryption_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*encryption_key_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CVideo_UnlockedH264_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CVideo_UnlockedH264_Notification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes encryption_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encryption_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CVideo_UnlockedH264_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CVideo_UnlockedH264_Notification)
  return false;
#undef DO_
}

void CVideo_UnlockedH264_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CVideo_UnlockedH264_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes encryption_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->encryption_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CVideo_UnlockedH264_Notification)
}

::google::protobuf::uint8* CVideo_UnlockedH264_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CVideo_UnlockedH264_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes encryption_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->encryption_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CVideo_UnlockedH264_Notification)
  return target;
}

size_t CVideo_UnlockedH264_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CVideo_UnlockedH264_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bytes encryption_key = 1;
  if (has_encryption_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->encryption_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CVideo_UnlockedH264_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CVideo_UnlockedH264_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_UnlockedH264_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CVideo_UnlockedH264_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CVideo_UnlockedH264_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CVideo_UnlockedH264_Notification)
    MergeFrom(*source);
  }
}

void CVideo_UnlockedH264_Notification::MergeFrom(const CVideo_UnlockedH264_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CVideo_UnlockedH264_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_encryption_key()) {
    set_has_encryption_key();
    encryption_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encryption_key_);
  }
}

void CVideo_UnlockedH264_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CVideo_UnlockedH264_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_UnlockedH264_Notification::CopyFrom(const CVideo_UnlockedH264_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CVideo_UnlockedH264_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_UnlockedH264_Notification::IsInitialized() const {
  return true;
}

void CVideo_UnlockedH264_Notification::Swap(CVideo_UnlockedH264_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CVideo_UnlockedH264_Notification::InternalSwap(CVideo_UnlockedH264_Notification* other) {
  encryption_key_.Swap(&other->encryption_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CVideo_UnlockedH264_Notification::GetMetadata() const {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CVideo_UnlockedH264_Notification

// optional bytes encryption_key = 1;
bool CVideo_UnlockedH264_Notification::has_encryption_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CVideo_UnlockedH264_Notification::set_has_encryption_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CVideo_UnlockedH264_Notification::clear_has_encryption_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CVideo_UnlockedH264_Notification::clear_encryption_key() {
  encryption_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encryption_key();
}
const ::std::string& CVideo_UnlockedH264_Notification::encryption_key() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVideo_UnlockedH264_Notification.encryption_key)
  return encryption_key_.GetNoArena();
}
void CVideo_UnlockedH264_Notification::set_encryption_key(const ::std::string& value) {
  set_has_encryption_key();
  encryption_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CVideo_UnlockedH264_Notification.encryption_key)
}
#if LANG_CXX11
void CVideo_UnlockedH264_Notification::set_encryption_key(::std::string&& value) {
  set_has_encryption_key();
  encryption_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CVideo_UnlockedH264_Notification.encryption_key)
}
#endif
void CVideo_UnlockedH264_Notification::set_encryption_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_encryption_key();
  encryption_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CVideo_UnlockedH264_Notification.encryption_key)
}
void CVideo_UnlockedH264_Notification::set_encryption_key(const void* value, size_t size) {
  set_has_encryption_key();
  encryption_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CVideo_UnlockedH264_Notification.encryption_key)
}
::std::string* CVideo_UnlockedH264_Notification::mutable_encryption_key() {
  set_has_encryption_key();
  // @@protoc_insertion_point(field_mutable:proto.steam.CVideo_UnlockedH264_Notification.encryption_key)
  return encryption_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CVideo_UnlockedH264_Notification::release_encryption_key() {
  // @@protoc_insertion_point(field_release:proto.steam.CVideo_UnlockedH264_Notification.encryption_key)
  clear_has_encryption_key();
  return encryption_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CVideo_UnlockedH264_Notification::set_allocated_encryption_key(::std::string* encryption_key) {
  if (encryption_key != NULL) {
    set_has_encryption_key();
  } else {
    clear_has_encryption_key();
  }
  encryption_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encryption_key);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CVideo_UnlockedH264_Notification.encryption_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CFovasVideo_ClientGetOPFSettings_Request::kAppIdFieldNumber;
const int CFovasVideo_ClientGetOPFSettings_Request::kClientCellidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CFovasVideo_ClientGetOPFSettings_Request::CFovasVideo_ClientGetOPFSettings_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fvideo_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CFovasVideo_ClientGetOPFSettings_Request)
}
CFovasVideo_ClientGetOPFSettings_Request::CFovasVideo_ClientGetOPFSettings_Request(const CFovasVideo_ClientGetOPFSettings_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&client_cellid_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(client_cellid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CFovasVideo_ClientGetOPFSettings_Request)
}

void CFovasVideo_ClientGetOPFSettings_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&client_cellid_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(client_cellid_));
}

CFovasVideo_ClientGetOPFSettings_Request::~CFovasVideo_ClientGetOPFSettings_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CFovasVideo_ClientGetOPFSettings_Request)
  SharedDtor();
}

void CFovasVideo_ClientGetOPFSettings_Request::SharedDtor() {
}

void CFovasVideo_ClientGetOPFSettings_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CFovasVideo_ClientGetOPFSettings_Request::descriptor() {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CFovasVideo_ClientGetOPFSettings_Request& CFovasVideo_ClientGetOPFSettings_Request::default_instance() {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CFovasVideo_ClientGetOPFSettings_Request* CFovasVideo_ClientGetOPFSettings_Request::New(::google::protobuf::Arena* arena) const {
  CFovasVideo_ClientGetOPFSettings_Request* n = new CFovasVideo_ClientGetOPFSettings_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CFovasVideo_ClientGetOPFSettings_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CFovasVideo_ClientGetOPFSettings_Request)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&client_cellid_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(client_cellid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CFovasVideo_ClientGetOPFSettings_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CFovasVideo_ClientGetOPFSettings_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1 [(.proto.steam.description) = "App ID"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_cellid = 2 [(.proto.steam.description) = "Cell ID of client, zero if unknown"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_client_cellid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_cellid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CFovasVideo_ClientGetOPFSettings_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CFovasVideo_ClientGetOPFSettings_Request)
  return false;
#undef DO_
}

void CFovasVideo_ClientGetOPFSettings_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CFovasVideo_ClientGetOPFSettings_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1 [(.proto.steam.description) = "App ID"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 client_cellid = 2 [(.proto.steam.description) = "Cell ID of client, zero if unknown"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_cellid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CFovasVideo_ClientGetOPFSettings_Request)
}

::google::protobuf::uint8* CFovasVideo_ClientGetOPFSettings_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CFovasVideo_ClientGetOPFSettings_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1 [(.proto.steam.description) = "App ID"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional uint32 client_cellid = 2 [(.proto.steam.description) = "Cell ID of client, zero if unknown"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_cellid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CFovasVideo_ClientGetOPFSettings_Request)
  return target;
}

size_t CFovasVideo_ClientGetOPFSettings_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CFovasVideo_ClientGetOPFSettings_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 app_id = 1 [(.proto.steam.description) = "App ID"];
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 client_cellid = 2 [(.proto.steam.description) = "Cell ID of client, zero if unknown"];
    if (has_client_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_cellid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CFovasVideo_ClientGetOPFSettings_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CFovasVideo_ClientGetOPFSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CFovasVideo_ClientGetOPFSettings_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CFovasVideo_ClientGetOPFSettings_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CFovasVideo_ClientGetOPFSettings_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CFovasVideo_ClientGetOPFSettings_Request)
    MergeFrom(*source);
  }
}

void CFovasVideo_ClientGetOPFSettings_Request::MergeFrom(const CFovasVideo_ClientGetOPFSettings_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CFovasVideo_ClientGetOPFSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_cellid_ = from.client_cellid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CFovasVideo_ClientGetOPFSettings_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CFovasVideo_ClientGetOPFSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFovasVideo_ClientGetOPFSettings_Request::CopyFrom(const CFovasVideo_ClientGetOPFSettings_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CFovasVideo_ClientGetOPFSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFovasVideo_ClientGetOPFSettings_Request::IsInitialized() const {
  return true;
}

void CFovasVideo_ClientGetOPFSettings_Request::Swap(CFovasVideo_ClientGetOPFSettings_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CFovasVideo_ClientGetOPFSettings_Request::InternalSwap(CFovasVideo_ClientGetOPFSettings_Request* other) {
  std::swap(app_id_, other->app_id_);
  std::swap(client_cellid_, other->client_cellid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CFovasVideo_ClientGetOPFSettings_Request::GetMetadata() const {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CFovasVideo_ClientGetOPFSettings_Request

// optional uint32 app_id = 1 [(.proto.steam.description) = "App ID"];
bool CFovasVideo_ClientGetOPFSettings_Request::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CFovasVideo_ClientGetOPFSettings_Request::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CFovasVideo_ClientGetOPFSettings_Request::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CFovasVideo_ClientGetOPFSettings_Request::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CFovasVideo_ClientGetOPFSettings_Request::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFovasVideo_ClientGetOPFSettings_Request.app_id)
  return app_id_;
}
void CFovasVideo_ClientGetOPFSettings_Request::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFovasVideo_ClientGetOPFSettings_Request.app_id)
}

// optional uint32 client_cellid = 2 [(.proto.steam.description) = "Cell ID of client, zero if unknown"];
bool CFovasVideo_ClientGetOPFSettings_Request::has_client_cellid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CFovasVideo_ClientGetOPFSettings_Request::set_has_client_cellid() {
  _has_bits_[0] |= 0x00000002u;
}
void CFovasVideo_ClientGetOPFSettings_Request::clear_has_client_cellid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CFovasVideo_ClientGetOPFSettings_Request::clear_client_cellid() {
  client_cellid_ = 0u;
  clear_has_client_cellid();
}
::google::protobuf::uint32 CFovasVideo_ClientGetOPFSettings_Request::client_cellid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFovasVideo_ClientGetOPFSettings_Request.client_cellid)
  return client_cellid_;
}
void CFovasVideo_ClientGetOPFSettings_Request::set_client_cellid(::google::protobuf::uint32 value) {
  set_has_client_cellid();
  client_cellid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFovasVideo_ClientGetOPFSettings_Request.client_cellid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CFovasVideo_ClientGetOPFSettings_Response::kAppIdFieldNumber;
const int CFovasVideo_ClientGetOPFSettings_Response::kOpfSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CFovasVideo_ClientGetOPFSettings_Response::CFovasVideo_ClientGetOPFSettings_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fvideo_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CFovasVideo_ClientGetOPFSettings_Response)
}
CFovasVideo_ClientGetOPFSettings_Response::CFovasVideo_ClientGetOPFSettings_Response(const CFovasVideo_ClientGetOPFSettings_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  opf_settings_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_opf_settings()) {
    opf_settings_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opf_settings_);
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CFovasVideo_ClientGetOPFSettings_Response)
}

void CFovasVideo_ClientGetOPFSettings_Response::SharedCtor() {
  _cached_size_ = 0;
  opf_settings_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0u;
}

CFovasVideo_ClientGetOPFSettings_Response::~CFovasVideo_ClientGetOPFSettings_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CFovasVideo_ClientGetOPFSettings_Response)
  SharedDtor();
}

void CFovasVideo_ClientGetOPFSettings_Response::SharedDtor() {
  opf_settings_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CFovasVideo_ClientGetOPFSettings_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CFovasVideo_ClientGetOPFSettings_Response::descriptor() {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CFovasVideo_ClientGetOPFSettings_Response& CFovasVideo_ClientGetOPFSettings_Response::default_instance() {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CFovasVideo_ClientGetOPFSettings_Response* CFovasVideo_ClientGetOPFSettings_Response::New(::google::protobuf::Arena* arena) const {
  CFovasVideo_ClientGetOPFSettings_Response* n = new CFovasVideo_ClientGetOPFSettings_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CFovasVideo_ClientGetOPFSettings_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CFovasVideo_ClientGetOPFSettings_Response)
  if (has_opf_settings()) {
    GOOGLE_DCHECK(!opf_settings_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*opf_settings_.UnsafeRawStringPointer())->clear();
  }
  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CFovasVideo_ClientGetOPFSettings_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CFovasVideo_ClientGetOPFSettings_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1 [(.proto.steam.description) = "App ID"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string opf_settings = 2 [(.proto.steam.description) = "JSON blob of OPF Settings"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opf_settings()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->opf_settings().data(), this->opf_settings().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CFovasVideo_ClientGetOPFSettings_Response.opf_settings");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CFovasVideo_ClientGetOPFSettings_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CFovasVideo_ClientGetOPFSettings_Response)
  return false;
#undef DO_
}

void CFovasVideo_ClientGetOPFSettings_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CFovasVideo_ClientGetOPFSettings_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1 [(.proto.steam.description) = "App ID"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string opf_settings = 2 [(.proto.steam.description) = "JSON blob of OPF Settings"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opf_settings().data(), this->opf_settings().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CFovasVideo_ClientGetOPFSettings_Response.opf_settings");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->opf_settings(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CFovasVideo_ClientGetOPFSettings_Response)
}

::google::protobuf::uint8* CFovasVideo_ClientGetOPFSettings_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CFovasVideo_ClientGetOPFSettings_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1 [(.proto.steam.description) = "App ID"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional string opf_settings = 2 [(.proto.steam.description) = "JSON blob of OPF Settings"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opf_settings().data(), this->opf_settings().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CFovasVideo_ClientGetOPFSettings_Response.opf_settings");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->opf_settings(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CFovasVideo_ClientGetOPFSettings_Response)
  return target;
}

size_t CFovasVideo_ClientGetOPFSettings_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CFovasVideo_ClientGetOPFSettings_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string opf_settings = 2 [(.proto.steam.description) = "JSON blob of OPF Settings"];
    if (has_opf_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opf_settings());
    }

    // optional uint32 app_id = 1 [(.proto.steam.description) = "App ID"];
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CFovasVideo_ClientGetOPFSettings_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CFovasVideo_ClientGetOPFSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CFovasVideo_ClientGetOPFSettings_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CFovasVideo_ClientGetOPFSettings_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CFovasVideo_ClientGetOPFSettings_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CFovasVideo_ClientGetOPFSettings_Response)
    MergeFrom(*source);
  }
}

void CFovasVideo_ClientGetOPFSettings_Response::MergeFrom(const CFovasVideo_ClientGetOPFSettings_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CFovasVideo_ClientGetOPFSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_opf_settings();
      opf_settings_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opf_settings_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CFovasVideo_ClientGetOPFSettings_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CFovasVideo_ClientGetOPFSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFovasVideo_ClientGetOPFSettings_Response::CopyFrom(const CFovasVideo_ClientGetOPFSettings_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CFovasVideo_ClientGetOPFSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFovasVideo_ClientGetOPFSettings_Response::IsInitialized() const {
  return true;
}

void CFovasVideo_ClientGetOPFSettings_Response::Swap(CFovasVideo_ClientGetOPFSettings_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CFovasVideo_ClientGetOPFSettings_Response::InternalSwap(CFovasVideo_ClientGetOPFSettings_Response* other) {
  opf_settings_.Swap(&other->opf_settings_);
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CFovasVideo_ClientGetOPFSettings_Response::GetMetadata() const {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CFovasVideo_ClientGetOPFSettings_Response

// optional uint32 app_id = 1 [(.proto.steam.description) = "App ID"];
bool CFovasVideo_ClientGetOPFSettings_Response::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CFovasVideo_ClientGetOPFSettings_Response::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CFovasVideo_ClientGetOPFSettings_Response::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CFovasVideo_ClientGetOPFSettings_Response::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CFovasVideo_ClientGetOPFSettings_Response::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFovasVideo_ClientGetOPFSettings_Response.app_id)
  return app_id_;
}
void CFovasVideo_ClientGetOPFSettings_Response::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CFovasVideo_ClientGetOPFSettings_Response.app_id)
}

// optional string opf_settings = 2 [(.proto.steam.description) = "JSON blob of OPF Settings"];
bool CFovasVideo_ClientGetOPFSettings_Response::has_opf_settings() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CFovasVideo_ClientGetOPFSettings_Response::set_has_opf_settings() {
  _has_bits_[0] |= 0x00000001u;
}
void CFovasVideo_ClientGetOPFSettings_Response::clear_has_opf_settings() {
  _has_bits_[0] &= ~0x00000001u;
}
void CFovasVideo_ClientGetOPFSettings_Response::clear_opf_settings() {
  opf_settings_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_opf_settings();
}
const ::std::string& CFovasVideo_ClientGetOPFSettings_Response::opf_settings() const {
  // @@protoc_insertion_point(field_get:proto.steam.CFovasVideo_ClientGetOPFSettings_Response.opf_settings)
  return opf_settings_.GetNoArena();
}
void CFovasVideo_ClientGetOPFSettings_Response::set_opf_settings(const ::std::string& value) {
  set_has_opf_settings();
  opf_settings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CFovasVideo_ClientGetOPFSettings_Response.opf_settings)
}
#if LANG_CXX11
void CFovasVideo_ClientGetOPFSettings_Response::set_opf_settings(::std::string&& value) {
  set_has_opf_settings();
  opf_settings_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CFovasVideo_ClientGetOPFSettings_Response.opf_settings)
}
#endif
void CFovasVideo_ClientGetOPFSettings_Response::set_opf_settings(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_opf_settings();
  opf_settings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CFovasVideo_ClientGetOPFSettings_Response.opf_settings)
}
void CFovasVideo_ClientGetOPFSettings_Response::set_opf_settings(const char* value, size_t size) {
  set_has_opf_settings();
  opf_settings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CFovasVideo_ClientGetOPFSettings_Response.opf_settings)
}
::std::string* CFovasVideo_ClientGetOPFSettings_Response::mutable_opf_settings() {
  set_has_opf_settings();
  // @@protoc_insertion_point(field_mutable:proto.steam.CFovasVideo_ClientGetOPFSettings_Response.opf_settings)
  return opf_settings_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CFovasVideo_ClientGetOPFSettings_Response::release_opf_settings() {
  // @@protoc_insertion_point(field_release:proto.steam.CFovasVideo_ClientGetOPFSettings_Response.opf_settings)
  clear_has_opf_settings();
  return opf_settings_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CFovasVideo_ClientGetOPFSettings_Response::set_allocated_opf_settings(::std::string* opf_settings) {
  if (opf_settings != NULL) {
    set_has_opf_settings();
  } else {
    clear_has_opf_settings();
  }
  opf_settings_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opf_settings);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CFovasVideo_ClientGetOPFSettings_Response.opf_settings)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Video::~Video() {}

const ::google::protobuf::ServiceDescriptor* Video::descriptor() {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* Video::GetDescriptor() {
  return descriptor();
}

void Video::ClientGetVideoURL(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CVideo_ClientGetVideoURL_Request*,
                         ::proto::steam::CVideo_ClientGetVideoURL_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientGetVideoURL() not implemented.");
  done->Run();
}

void Video::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      ClientGetVideoURL(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CVideo_ClientGetVideoURL_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CVideo_ClientGetVideoURL_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Video::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CVideo_ClientGetVideoURL_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& Video::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CVideo_ClientGetVideoURL_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Video_Stub::Video_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Video_Stub::Video_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Video_Stub::~Video_Stub() {
  if (owns_channel_) delete channel_;
}

void Video_Stub::ClientGetVideoURL(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CVideo_ClientGetVideoURL_Request* request,
                              ::proto::steam::CVideo_ClientGetVideoURL_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

VideoClient::~VideoClient() {}

const ::google::protobuf::ServiceDescriptor* VideoClient::descriptor() {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_service_descriptors[1];
}

const ::google::protobuf::ServiceDescriptor* VideoClient::GetDescriptor() {
  return descriptor();
}

void VideoClient::NotifyUnlockedH264(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CVideo_UnlockedH264_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyUnlockedH264() not implemented.");
  done->Run();
}

void VideoClient::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_service_descriptors[1]);
  switch(method->index()) {
    case 0:
      NotifyUnlockedH264(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CVideo_UnlockedH264_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& VideoClient::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CVideo_UnlockedH264_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& VideoClient::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

VideoClient_Stub::VideoClient_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
VideoClient_Stub::VideoClient_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
VideoClient_Stub::~VideoClient_Stub() {
  if (owns_channel_) delete channel_;
}

void VideoClient_Stub::NotifyUnlockedH264(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CVideo_UnlockedH264_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

FovasVideo::~FovasVideo() {}

const ::google::protobuf::ServiceDescriptor* FovasVideo::descriptor() {
  protobuf_steammessages_5fvideo_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_service_descriptors[2];
}

const ::google::protobuf::ServiceDescriptor* FovasVideo::GetDescriptor() {
  return descriptor();
}

void FovasVideo::ClientGetOPFSettings(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CFovasVideo_ClientGetOPFSettings_Request*,
                         ::proto::steam::CFovasVideo_ClientGetOPFSettings_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientGetOPFSettings() not implemented.");
  done->Run();
}

void FovasVideo::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fvideo_2esteamclient_2eproto::file_level_service_descriptors[2]);
  switch(method->index()) {
    case 0:
      ClientGetOPFSettings(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CFovasVideo_ClientGetOPFSettings_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CFovasVideo_ClientGetOPFSettings_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& FovasVideo::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CFovasVideo_ClientGetOPFSettings_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& FovasVideo::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CFovasVideo_ClientGetOPFSettings_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

FovasVideo_Stub::FovasVideo_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FovasVideo_Stub::FovasVideo_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
FovasVideo_Stub::~FovasVideo_Stub() {
  if (owns_channel_) delete channel_;
}

void FovasVideo_Stub::ClientGetOPFSettings(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CFovasVideo_ClientGetOPFSettings_Request* request,
                              ::proto::steam::CFovasVideo_ClientGetOPFSettings_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
