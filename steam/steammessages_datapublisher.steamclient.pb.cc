// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_datapublisher.steamclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_datapublisher.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CDataPublisher_ClientContentCorruptionReport_NotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDataPublisher_ClientContentCorruptionReport_Notification> {
} _CDataPublisher_ClientContentCorruptionReport_Notification_default_instance_;

namespace protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataPublisher_ClientContentCorruptionReport_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataPublisher_ClientContentCorruptionReport_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataPublisher_ClientContentCorruptionReport_Notification, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataPublisher_ClientContentCorruptionReport_Notification, depotid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataPublisher_ClientContentCorruptionReport_Notification, download_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataPublisher_ClientContentCorruptionReport_Notification, objectid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataPublisher_ClientContentCorruptionReport_Notification, cellid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataPublisher_ClientContentCorruptionReport_Notification, is_manifest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataPublisher_ClientContentCorruptionReport_Notification, object_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataPublisher_ClientContentCorruptionReport_Notification, corruption_type_),
  2,
  3,
  0,
  1,
  4,
  5,
  6,
  7,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 13, sizeof(CDataPublisher_ClientContentCorruptionReport_Notification)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDataPublisher_ClientContentCorruptionReport_Notification_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_datapublisher.steamclient.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _CDataPublisher_ClientContentCorruptionReport_Notification_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::InitDefaults();
  _CDataPublisher_ClientContentCorruptionReport_Notification_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n-steammessages_datapublisher.steamclien"
      "t.proto\022\013proto.steam\032,steammessages_unif"
      "ied_base.steamclient.proto\"\222\003\n9CDataPubl"
      "isher_ClientContentCorruptionReport_Noti"
      "fication\022\r\n\005appid\030\001 \001(\r\022\017\n\007depotid\030\002 \001(\r"
      "\0229\n\017download_source\030\003 \001(\tB \202\265\030\034host name"
      " of download source\022.\n\010objectid\030\004 \001(\tB\034\202"
      "\265\030\030Chunk SHA or Manifest ID\022\"\n\006cellid\030\005 "
      "\001(\rB\022\202\265\030\016Client Cell ID\022>\n\013is_manifest\030\006"
      " \001(\010B)\202\265\030%The object is a manifest, not "
      "a chunk\022-\n\013object_size\030\007 \001(\004B\030\202\265\030\024object"
      " size in bytes\0227\n\017corruption_type\030\010 \001(\rB"
      "\036\202\265\030\032See EContentCorruptionType2\273\001\n\rData"
      "Publisher\022\200\001\n\035ClientContentCorruptionRep"
      "ort\022F.proto.steam.CDataPublisher_ClientC"
      "ontentCorruptionReport_Notification\032\027.pr"
      "oto.steam.NoResponse\032\'\202\265\030#Data Publisher"
      " (DP) server servicesB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 706);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_datapublisher.steamclient.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDataPublisher_ClientContentCorruptionReport_Notification::kAppidFieldNumber;
const int CDataPublisher_ClientContentCorruptionReport_Notification::kDepotidFieldNumber;
const int CDataPublisher_ClientContentCorruptionReport_Notification::kDownloadSourceFieldNumber;
const int CDataPublisher_ClientContentCorruptionReport_Notification::kObjectidFieldNumber;
const int CDataPublisher_ClientContentCorruptionReport_Notification::kCellidFieldNumber;
const int CDataPublisher_ClientContentCorruptionReport_Notification::kIsManifestFieldNumber;
const int CDataPublisher_ClientContentCorruptionReport_Notification::kObjectSizeFieldNumber;
const int CDataPublisher_ClientContentCorruptionReport_Notification::kCorruptionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDataPublisher_ClientContentCorruptionReport_Notification::CDataPublisher_ClientContentCorruptionReport_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification)
}
CDataPublisher_ClientContentCorruptionReport_Notification::CDataPublisher_ClientContentCorruptionReport_Notification(const CDataPublisher_ClientContentCorruptionReport_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  download_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_download_source()) {
    download_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.download_source_);
  }
  objectid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_objectid()) {
    objectid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objectid_);
  }
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&corruption_type_) -
    reinterpret_cast<char*>(&appid_) + sizeof(corruption_type_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification)
}

void CDataPublisher_ClientContentCorruptionReport_Notification::SharedCtor() {
  _cached_size_ = 0;
  download_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objectid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, reinterpret_cast<char*>(&corruption_type_) -
    reinterpret_cast<char*>(&appid_) + sizeof(corruption_type_));
}

CDataPublisher_ClientContentCorruptionReport_Notification::~CDataPublisher_ClientContentCorruptionReport_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification)
  SharedDtor();
}

void CDataPublisher_ClientContentCorruptionReport_Notification::SharedDtor() {
  download_source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objectid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDataPublisher_ClientContentCorruptionReport_Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDataPublisher_ClientContentCorruptionReport_Notification::descriptor() {
  protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDataPublisher_ClientContentCorruptionReport_Notification& CDataPublisher_ClientContentCorruptionReport_Notification::default_instance() {
  protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDataPublisher_ClientContentCorruptionReport_Notification* CDataPublisher_ClientContentCorruptionReport_Notification::New(::google::protobuf::Arena* arena) const {
  CDataPublisher_ClientContentCorruptionReport_Notification* n = new CDataPublisher_ClientContentCorruptionReport_Notification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDataPublisher_ClientContentCorruptionReport_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_download_source()) {
      GOOGLE_DCHECK(!download_source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*download_source_.UnsafeRawStringPointer())->clear();
    }
    if (has_objectid()) {
      GOOGLE_DCHECK(!objectid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*objectid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&corruption_type_) -
      reinterpret_cast<char*>(&appid_) + sizeof(corruption_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDataPublisher_ClientContentCorruptionReport_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 depotid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_depotid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depotid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string download_source = 3 [(.proto.steam.description) = "host name of download source"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_download_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->download_source().data(), this->download_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.download_source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string objectid = 4 [(.proto.steam.description) = "Chunk SHA or Manifest ID"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objectid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->objectid().data(), this->objectid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.objectid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cellid = 5 [(.proto.steam.description) = "Client Cell ID"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_cellid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_manifest = 6 [(.proto.steam.description) = "The object is a manifest, not a chunk"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_is_manifest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_manifest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 object_size = 7 [(.proto.steam.description) = "object size in bytes"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_object_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 corruption_type = 8 [(.proto.steam.description) = "See EContentCorruptionType"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_corruption_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corruption_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification)
  return false;
#undef DO_
}

void CDataPublisher_ClientContentCorruptionReport_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 depotid = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->depotid(), output);
  }

  // optional string download_source = 3 [(.proto.steam.description) = "host name of download source"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->download_source().data(), this->download_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.download_source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->download_source(), output);
  }

  // optional string objectid = 4 [(.proto.steam.description) = "Chunk SHA or Manifest ID"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->objectid().data(), this->objectid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.objectid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->objectid(), output);
  }

  // optional uint32 cellid = 5 [(.proto.steam.description) = "Client Cell ID"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cellid(), output);
  }

  // optional bool is_manifest = 6 [(.proto.steam.description) = "The object is a manifest, not a chunk"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_manifest(), output);
  }

  // optional uint64 object_size = 7 [(.proto.steam.description) = "object size in bytes"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->object_size(), output);
  }

  // optional uint32 corruption_type = 8 [(.proto.steam.description) = "See EContentCorruptionType"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->corruption_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification)
}

::google::protobuf::uint8* CDataPublisher_ClientContentCorruptionReport_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 depotid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->depotid(), target);
  }

  // optional string download_source = 3 [(.proto.steam.description) = "host name of download source"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->download_source().data(), this->download_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.download_source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->download_source(), target);
  }

  // optional string objectid = 4 [(.proto.steam.description) = "Chunk SHA or Manifest ID"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->objectid().data(), this->objectid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.objectid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->objectid(), target);
  }

  // optional uint32 cellid = 5 [(.proto.steam.description) = "Client Cell ID"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cellid(), target);
  }

  // optional bool is_manifest = 6 [(.proto.steam.description) = "The object is a manifest, not a chunk"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_manifest(), target);
  }

  // optional uint64 object_size = 7 [(.proto.steam.description) = "object size in bytes"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->object_size(), target);
  }

  // optional uint32 corruption_type = 8 [(.proto.steam.description) = "See EContentCorruptionType"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->corruption_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification)
  return target;
}

size_t CDataPublisher_ClientContentCorruptionReport_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string download_source = 3 [(.proto.steam.description) = "host name of download source"];
    if (has_download_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->download_source());
    }

    // optional string objectid = 4 [(.proto.steam.description) = "Chunk SHA or Manifest ID"];
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objectid());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 depotid = 2;
    if (has_depotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depotid());
    }

    // optional uint32 cellid = 5 [(.proto.steam.description) = "Client Cell ID"];
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // optional bool is_manifest = 6 [(.proto.steam.description) = "The object is a manifest, not a chunk"];
    if (has_is_manifest()) {
      total_size += 1 + 1;
    }

    // optional uint64 object_size = 7 [(.proto.steam.description) = "object size in bytes"];
    if (has_object_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_size());
    }

    // optional uint32 corruption_type = 8 [(.proto.steam.description) = "See EContentCorruptionType"];
    if (has_corruption_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corruption_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDataPublisher_ClientContentCorruptionReport_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CDataPublisher_ClientContentCorruptionReport_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDataPublisher_ClientContentCorruptionReport_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification)
    MergeFrom(*source);
  }
}

void CDataPublisher_ClientContentCorruptionReport_Notification::MergeFrom(const CDataPublisher_ClientContentCorruptionReport_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_download_source();
      download_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.download_source_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_objectid();
      objectid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objectid_);
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      depotid_ = from.depotid_;
    }
    if (cached_has_bits & 0x00000010u) {
      cellid_ = from.cellid_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_manifest_ = from.is_manifest_;
    }
    if (cached_has_bits & 0x00000040u) {
      object_size_ = from.object_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      corruption_type_ = from.corruption_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDataPublisher_ClientContentCorruptionReport_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataPublisher_ClientContentCorruptionReport_Notification::CopyFrom(const CDataPublisher_ClientContentCorruptionReport_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataPublisher_ClientContentCorruptionReport_Notification::IsInitialized() const {
  return true;
}

void CDataPublisher_ClientContentCorruptionReport_Notification::Swap(CDataPublisher_ClientContentCorruptionReport_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDataPublisher_ClientContentCorruptionReport_Notification::InternalSwap(CDataPublisher_ClientContentCorruptionReport_Notification* other) {
  download_source_.Swap(&other->download_source_);
  objectid_.Swap(&other->objectid_);
  std::swap(appid_, other->appid_);
  std::swap(depotid_, other->depotid_);
  std::swap(cellid_, other->cellid_);
  std::swap(is_manifest_, other->is_manifest_);
  std::swap(object_size_, other->object_size_);
  std::swap(corruption_type_, other->corruption_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDataPublisher_ClientContentCorruptionReport_Notification::GetMetadata() const {
  protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDataPublisher_ClientContentCorruptionReport_Notification

// optional uint32 appid = 1;
bool CDataPublisher_ClientContentCorruptionReport_Notification::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CDataPublisher_ClientContentCorruptionReport_Notification::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.appid)
  return appid_;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.appid)
}

// optional uint32 depotid = 2;
bool CDataPublisher_ClientContentCorruptionReport_Notification::has_depotid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::set_has_depotid() {
  _has_bits_[0] |= 0x00000008u;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::clear_has_depotid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::clear_depotid() {
  depotid_ = 0u;
  clear_has_depotid();
}
::google::protobuf::uint32 CDataPublisher_ClientContentCorruptionReport_Notification::depotid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.depotid)
  return depotid_;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::set_depotid(::google::protobuf::uint32 value) {
  set_has_depotid();
  depotid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.depotid)
}

// optional string download_source = 3 [(.proto.steam.description) = "host name of download source"];
bool CDataPublisher_ClientContentCorruptionReport_Notification::has_download_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::set_has_download_source() {
  _has_bits_[0] |= 0x00000001u;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::clear_has_download_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::clear_download_source() {
  download_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_download_source();
}
const ::std::string& CDataPublisher_ClientContentCorruptionReport_Notification::download_source() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.download_source)
  return download_source_.GetNoArena();
}
void CDataPublisher_ClientContentCorruptionReport_Notification::set_download_source(const ::std::string& value) {
  set_has_download_source();
  download_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.download_source)
}
#if LANG_CXX11
void CDataPublisher_ClientContentCorruptionReport_Notification::set_download_source(::std::string&& value) {
  set_has_download_source();
  download_source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.download_source)
}
#endif
void CDataPublisher_ClientContentCorruptionReport_Notification::set_download_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_download_source();
  download_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.download_source)
}
void CDataPublisher_ClientContentCorruptionReport_Notification::set_download_source(const char* value, size_t size) {
  set_has_download_source();
  download_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.download_source)
}
::std::string* CDataPublisher_ClientContentCorruptionReport_Notification::mutable_download_source() {
  set_has_download_source();
  // @@protoc_insertion_point(field_mutable:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.download_source)
  return download_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDataPublisher_ClientContentCorruptionReport_Notification::release_download_source() {
  // @@protoc_insertion_point(field_release:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.download_source)
  clear_has_download_source();
  return download_source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDataPublisher_ClientContentCorruptionReport_Notification::set_allocated_download_source(::std::string* download_source) {
  if (download_source != NULL) {
    set_has_download_source();
  } else {
    clear_has_download_source();
  }
  download_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), download_source);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.download_source)
}

// optional string objectid = 4 [(.proto.steam.description) = "Chunk SHA or Manifest ID"];
bool CDataPublisher_ClientContentCorruptionReport_Notification::has_objectid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::set_has_objectid() {
  _has_bits_[0] |= 0x00000002u;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::clear_objectid() {
  objectid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_objectid();
}
const ::std::string& CDataPublisher_ClientContentCorruptionReport_Notification::objectid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.objectid)
  return objectid_.GetNoArena();
}
void CDataPublisher_ClientContentCorruptionReport_Notification::set_objectid(const ::std::string& value) {
  set_has_objectid();
  objectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.objectid)
}
#if LANG_CXX11
void CDataPublisher_ClientContentCorruptionReport_Notification::set_objectid(::std::string&& value) {
  set_has_objectid();
  objectid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.objectid)
}
#endif
void CDataPublisher_ClientContentCorruptionReport_Notification::set_objectid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_objectid();
  objectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.objectid)
}
void CDataPublisher_ClientContentCorruptionReport_Notification::set_objectid(const char* value, size_t size) {
  set_has_objectid();
  objectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.objectid)
}
::std::string* CDataPublisher_ClientContentCorruptionReport_Notification::mutable_objectid() {
  set_has_objectid();
  // @@protoc_insertion_point(field_mutable:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.objectid)
  return objectid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDataPublisher_ClientContentCorruptionReport_Notification::release_objectid() {
  // @@protoc_insertion_point(field_release:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.objectid)
  clear_has_objectid();
  return objectid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDataPublisher_ClientContentCorruptionReport_Notification::set_allocated_objectid(::std::string* objectid) {
  if (objectid != NULL) {
    set_has_objectid();
  } else {
    clear_has_objectid();
  }
  objectid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), objectid);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.objectid)
}

// optional uint32 cellid = 5 [(.proto.steam.description) = "Client Cell ID"];
bool CDataPublisher_ClientContentCorruptionReport_Notification::has_cellid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::set_has_cellid() {
  _has_bits_[0] |= 0x00000010u;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::clear_cellid() {
  cellid_ = 0u;
  clear_has_cellid();
}
::google::protobuf::uint32 CDataPublisher_ClientContentCorruptionReport_Notification::cellid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.cellid)
  return cellid_;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::set_cellid(::google::protobuf::uint32 value) {
  set_has_cellid();
  cellid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.cellid)
}

// optional bool is_manifest = 6 [(.proto.steam.description) = "The object is a manifest, not a chunk"];
bool CDataPublisher_ClientContentCorruptionReport_Notification::has_is_manifest() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::set_has_is_manifest() {
  _has_bits_[0] |= 0x00000020u;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::clear_has_is_manifest() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::clear_is_manifest() {
  is_manifest_ = false;
  clear_has_is_manifest();
}
bool CDataPublisher_ClientContentCorruptionReport_Notification::is_manifest() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.is_manifest)
  return is_manifest_;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::set_is_manifest(bool value) {
  set_has_is_manifest();
  is_manifest_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.is_manifest)
}

// optional uint64 object_size = 7 [(.proto.steam.description) = "object size in bytes"];
bool CDataPublisher_ClientContentCorruptionReport_Notification::has_object_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::set_has_object_size() {
  _has_bits_[0] |= 0x00000040u;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::clear_has_object_size() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::clear_object_size() {
  object_size_ = GOOGLE_ULONGLONG(0);
  clear_has_object_size();
}
::google::protobuf::uint64 CDataPublisher_ClientContentCorruptionReport_Notification::object_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.object_size)
  return object_size_;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::set_object_size(::google::protobuf::uint64 value) {
  set_has_object_size();
  object_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.object_size)
}

// optional uint32 corruption_type = 8 [(.proto.steam.description) = "See EContentCorruptionType"];
bool CDataPublisher_ClientContentCorruptionReport_Notification::has_corruption_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::set_has_corruption_type() {
  _has_bits_[0] |= 0x00000080u;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::clear_has_corruption_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::clear_corruption_type() {
  corruption_type_ = 0u;
  clear_has_corruption_type();
}
::google::protobuf::uint32 CDataPublisher_ClientContentCorruptionReport_Notification::corruption_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.corruption_type)
  return corruption_type_;
}
void CDataPublisher_ClientContentCorruptionReport_Notification::set_corruption_type(::google::protobuf::uint32 value) {
  set_has_corruption_type();
  corruption_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.corruption_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

DataPublisher::~DataPublisher() {}

const ::google::protobuf::ServiceDescriptor* DataPublisher::descriptor() {
  protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* DataPublisher::GetDescriptor() {
  return descriptor();
}

void DataPublisher::ClientContentCorruptionReport(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CDataPublisher_ClientContentCorruptionReport_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientContentCorruptionReport() not implemented.");
  done->Run();
}

void DataPublisher::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fdatapublisher_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      ClientContentCorruptionReport(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CDataPublisher_ClientContentCorruptionReport_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& DataPublisher::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CDataPublisher_ClientContentCorruptionReport_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& DataPublisher::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

DataPublisher_Stub::DataPublisher_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DataPublisher_Stub::DataPublisher_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
DataPublisher_Stub::~DataPublisher_Stub() {
  if (owns_channel_) delete channel_;
}

void DataPublisher_Stub::ClientContentCorruptionReport(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CDataPublisher_ClientContentCorruptionReport_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
