// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_sitelicenseclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_sitelicenseclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CMsgClientSiteInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSiteInfo> {
} _CMsgClientSiteInfo_default_instance_;
class CMsgClientSiteLicenseCheckoutDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSiteLicenseCheckout> {
} _CMsgClientSiteLicenseCheckout_default_instance_;
class CMsgClientSiteLicenseCheckoutResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSiteLicenseCheckoutResponse> {
} _CMsgClientSiteLicenseCheckoutResponse_default_instance_;
class CMsgClientSiteLicenseGetAvailableSeatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSiteLicenseGetAvailableSeats> {
} _CMsgClientSiteLicenseGetAvailableSeats_default_instance_;
class CMsgClientSiteLicenseGetAvailableSeatsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSiteLicenseGetAvailableSeatsResponse> {
} _CMsgClientSiteLicenseGetAvailableSeatsResponse_default_instance_;
class CMsgClientSiteLicenseGetContentCacheInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSiteLicenseGetContentCacheInfo> {
} _CMsgClientSiteLicenseGetContentCacheInfo_default_instance_;
class CMsgClientSiteLicenseGetContentCacheInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSiteLicenseGetContentCacheInfoResponse> {
} _CMsgClientSiteLicenseGetContentCacheInfoResponse_default_instance_;

namespace protobuf_steammessages_5fsitelicenseclient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteInfo, site_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteInfo, site_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteLicenseCheckout, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteLicenseCheckout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteLicenseCheckout, appid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteLicenseCheckoutResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteLicenseCheckoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteLicenseCheckoutResponse, eresult_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteLicenseGetAvailableSeats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteLicenseGetAvailableSeats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteLicenseGetAvailableSeats, appid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteLicenseGetAvailableSeatsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteLicenseGetAvailableSeatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteLicenseGetAvailableSeatsResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteLicenseGetAvailableSeatsResponse, seats_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteLicenseGetContentCacheInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteLicenseGetContentCacheInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteLicenseGetContentCacheInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteLicenseGetContentCacheInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteLicenseGetContentCacheInfoResponse, use_cache_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteLicenseGetContentCacheInfoResponse, ipv4_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteLicenseGetContentCacheInfoResponse, port_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSiteLicenseGetContentCacheInfoResponse, p2p_group_),
  0,
  1,
  2,
  3,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(CMsgClientSiteInfo)},
  { 9, 15, sizeof(CMsgClientSiteLicenseCheckout)},
  { 16, 22, sizeof(CMsgClientSiteLicenseCheckoutResponse)},
  { 23, 29, sizeof(CMsgClientSiteLicenseGetAvailableSeats)},
  { 30, 37, sizeof(CMsgClientSiteLicenseGetAvailableSeatsResponse)},
  { 39, 44, sizeof(CMsgClientSiteLicenseGetContentCacheInfo)},
  { 44, 53, sizeof(CMsgClientSiteLicenseGetContentCacheInfoResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientSiteInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientSiteLicenseCheckout_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientSiteLicenseCheckoutResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientSiteLicenseGetAvailableSeats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientSiteLicenseGetAvailableSeatsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientSiteLicenseGetContentCacheInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientSiteLicenseGetContentCacheInfoResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_sitelicenseclient.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgClientSiteInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgClientSiteLicenseCheckout_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgClientSiteLicenseCheckoutResponse_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgClientSiteLicenseGetAvailableSeats_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMsgClientSiteLicenseGetAvailableSeatsResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgClientSiteLicenseGetContentCacheInfo_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CMsgClientSiteLicenseGetContentCacheInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5fbase_2eproto::InitDefaults();
  _CMsgClientSiteInfo_default_instance_.DefaultConstruct();
  _CMsgClientSiteLicenseCheckout_default_instance_.DefaultConstruct();
  _CMsgClientSiteLicenseCheckoutResponse_default_instance_.DefaultConstruct();
  _CMsgClientSiteLicenseGetAvailableSeats_default_instance_.DefaultConstruct();
  _CMsgClientSiteLicenseGetAvailableSeatsResponse_default_instance_.DefaultConstruct();
  _CMsgClientSiteLicenseGetContentCacheInfo_default_instance_.DefaultConstruct();
  _CMsgClientSiteLicenseGetContentCacheInfoResponse_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n%steammessages_sitelicenseclient.proto\022"
      "\013proto.steam\032\030steammessages_base.proto\"8"
      "\n\022CMsgClientSiteInfo\022\017\n\007site_id\030\001 \001(\004\022\021\n"
      "\tsite_name\030\002 \001(\t\".\n\035CMsgClientSiteLicens"
      "eCheckout\022\r\n\005appid\030\001 \001(\r\";\n%CMsgClientSi"
      "teLicenseCheckoutResponse\022\022\n\007eresult\030\001 \001"
      "(\005:\0012\"7\n&CMsgClientSiteLicenseGetAvailab"
      "leSeats\022\r\n\005appid\030\001 \001(\r\"S\n.CMsgClientSite"
      "LicenseGetAvailableSeatsResponse\022\022\n\007eres"
      "ult\030\001 \001(\005:\0012\022\r\n\005seats\030\002 \001(\r\"*\n(CMsgClien"
      "tSiteLicenseGetContentCacheInfo\"\203\001\n0CMsg"
      "ClientSiteLicenseGetContentCacheInfoResp"
      "onse\022\021\n\tuse_cache\030\001 \001(\010\022\024\n\014ipv4_address\030"
      "\002 \001(\r\022\023\n\013port_number\030\003 \001(\r\022\021\n\tp2p_group\030"
      "\004 \001(\rB\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 572);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_sitelicenseclient.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5fbase_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fsitelicenseclient_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSiteInfo::kSiteIdFieldNumber;
const int CMsgClientSiteInfo::kSiteNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSiteInfo::CMsgClientSiteInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsitelicenseclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSiteInfo)
}
CMsgClientSiteInfo::CMsgClientSiteInfo(const CMsgClientSiteInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  site_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_site_name()) {
    site_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_name_);
  }
  site_id_ = from.site_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSiteInfo)
}

void CMsgClientSiteInfo::SharedCtor() {
  _cached_size_ = 0;
  site_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_id_ = GOOGLE_ULONGLONG(0);
}

CMsgClientSiteInfo::~CMsgClientSiteInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSiteInfo)
  SharedDtor();
}

void CMsgClientSiteInfo::SharedDtor() {
  site_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientSiteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientSiteInfo::descriptor() {
  protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientSiteInfo& CMsgClientSiteInfo::default_instance() {
  protobuf_steammessages_5fsitelicenseclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientSiteInfo* CMsgClientSiteInfo::New(::google::protobuf::Arena* arena) const {
  CMsgClientSiteInfo* n = new CMsgClientSiteInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientSiteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSiteInfo)
  if (has_site_name()) {
    GOOGLE_DCHECK(!site_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*site_name_.UnsafeRawStringPointer())->clear();
  }
  site_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientSiteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSiteInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 site_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_site_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &site_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string site_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_site_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->site_name().data(), this->site_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientSiteInfo.site_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSiteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSiteInfo)
  return false;
#undef DO_
}

void CMsgClientSiteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSiteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 site_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->site_id(), output);
  }

  // optional string site_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site_name().data(), this->site_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientSiteInfo.site_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->site_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSiteInfo)
}

::google::protobuf::uint8* CMsgClientSiteInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSiteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 site_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->site_id(), target);
  }

  // optional string site_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site_name().data(), this->site_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientSiteInfo.site_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->site_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSiteInfo)
  return target;
}

size_t CMsgClientSiteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSiteInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string site_name = 2;
    if (has_site_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->site_name());
    }

    // optional uint64 site_id = 1;
    if (has_site_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->site_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSiteInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSiteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSiteInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientSiteInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSiteInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSiteInfo)
    MergeFrom(*source);
  }
}

void CMsgClientSiteInfo::MergeFrom(const CMsgClientSiteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSiteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_site_name();
      site_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      site_id_ = from.site_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientSiteInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSiteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSiteInfo::CopyFrom(const CMsgClientSiteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSiteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteInfo::IsInitialized() const {
  return true;
}

void CMsgClientSiteInfo::Swap(CMsgClientSiteInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSiteInfo::InternalSwap(CMsgClientSiteInfo* other) {
  site_name_.Swap(&other->site_name_);
  std::swap(site_id_, other->site_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientSiteInfo::GetMetadata() const {
  protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientSiteInfo

// optional uint64 site_id = 1;
bool CMsgClientSiteInfo::has_site_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientSiteInfo::set_has_site_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientSiteInfo::clear_has_site_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientSiteInfo::clear_site_id() {
  site_id_ = GOOGLE_ULONGLONG(0);
  clear_has_site_id();
}
::google::protobuf::uint64 CMsgClientSiteInfo::site_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientSiteInfo.site_id)
  return site_id_;
}
void CMsgClientSiteInfo::set_site_id(::google::protobuf::uint64 value) {
  set_has_site_id();
  site_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientSiteInfo.site_id)
}

// optional string site_name = 2;
bool CMsgClientSiteInfo::has_site_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientSiteInfo::set_has_site_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientSiteInfo::clear_has_site_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientSiteInfo::clear_site_name() {
  site_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_site_name();
}
const ::std::string& CMsgClientSiteInfo::site_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientSiteInfo.site_name)
  return site_name_.GetNoArena();
}
void CMsgClientSiteInfo::set_site_name(const ::std::string& value) {
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientSiteInfo.site_name)
}
#if LANG_CXX11
void CMsgClientSiteInfo::set_site_name(::std::string&& value) {
  set_has_site_name();
  site_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientSiteInfo.site_name)
}
#endif
void CMsgClientSiteInfo::set_site_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientSiteInfo.site_name)
}
void CMsgClientSiteInfo::set_site_name(const char* value, size_t size) {
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientSiteInfo.site_name)
}
::std::string* CMsgClientSiteInfo::mutable_site_name() {
  set_has_site_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientSiteInfo.site_name)
  return site_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientSiteInfo::release_site_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientSiteInfo.site_name)
  clear_has_site_name();
  return site_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientSiteInfo::set_allocated_site_name(::std::string* site_name) {
  if (site_name != NULL) {
    set_has_site_name();
  } else {
    clear_has_site_name();
  }
  site_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), site_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientSiteInfo.site_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSiteLicenseCheckout::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSiteLicenseCheckout::CMsgClientSiteLicenseCheckout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsitelicenseclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSiteLicenseCheckout)
}
CMsgClientSiteLicenseCheckout::CMsgClientSiteLicenseCheckout(const CMsgClientSiteLicenseCheckout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSiteLicenseCheckout)
}

void CMsgClientSiteLicenseCheckout::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
}

CMsgClientSiteLicenseCheckout::~CMsgClientSiteLicenseCheckout() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSiteLicenseCheckout)
  SharedDtor();
}

void CMsgClientSiteLicenseCheckout::SharedDtor() {
}

void CMsgClientSiteLicenseCheckout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientSiteLicenseCheckout::descriptor() {
  protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientSiteLicenseCheckout& CMsgClientSiteLicenseCheckout::default_instance() {
  protobuf_steammessages_5fsitelicenseclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientSiteLicenseCheckout* CMsgClientSiteLicenseCheckout::New(::google::protobuf::Arena* arena) const {
  CMsgClientSiteLicenseCheckout* n = new CMsgClientSiteLicenseCheckout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientSiteLicenseCheckout::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSiteLicenseCheckout)
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientSiteLicenseCheckout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSiteLicenseCheckout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSiteLicenseCheckout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSiteLicenseCheckout)
  return false;
#undef DO_
}

void CMsgClientSiteLicenseCheckout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSiteLicenseCheckout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSiteLicenseCheckout)
}

::google::protobuf::uint8* CMsgClientSiteLicenseCheckout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSiteLicenseCheckout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSiteLicenseCheckout)
  return target;
}

size_t CMsgClientSiteLicenseCheckout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSiteLicenseCheckout)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 appid = 1;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSiteLicenseCheckout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSiteLicenseCheckout)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSiteLicenseCheckout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientSiteLicenseCheckout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSiteLicenseCheckout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSiteLicenseCheckout)
    MergeFrom(*source);
  }
}

void CMsgClientSiteLicenseCheckout::MergeFrom(const CMsgClientSiteLicenseCheckout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSiteLicenseCheckout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CMsgClientSiteLicenseCheckout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSiteLicenseCheckout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSiteLicenseCheckout::CopyFrom(const CMsgClientSiteLicenseCheckout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSiteLicenseCheckout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteLicenseCheckout::IsInitialized() const {
  return true;
}

void CMsgClientSiteLicenseCheckout::Swap(CMsgClientSiteLicenseCheckout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSiteLicenseCheckout::InternalSwap(CMsgClientSiteLicenseCheckout* other) {
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientSiteLicenseCheckout::GetMetadata() const {
  protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientSiteLicenseCheckout

// optional uint32 appid = 1;
bool CMsgClientSiteLicenseCheckout::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientSiteLicenseCheckout::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientSiteLicenseCheckout::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientSiteLicenseCheckout::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CMsgClientSiteLicenseCheckout::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientSiteLicenseCheckout.appid)
  return appid_;
}
void CMsgClientSiteLicenseCheckout::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientSiteLicenseCheckout.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSiteLicenseCheckoutResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSiteLicenseCheckoutResponse::CMsgClientSiteLicenseCheckoutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsitelicenseclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
}
CMsgClientSiteLicenseCheckoutResponse::CMsgClientSiteLicenseCheckoutResponse(const CMsgClientSiteLicenseCheckoutResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
}

void CMsgClientSiteLicenseCheckoutResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
}

CMsgClientSiteLicenseCheckoutResponse::~CMsgClientSiteLicenseCheckoutResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  SharedDtor();
}

void CMsgClientSiteLicenseCheckoutResponse::SharedDtor() {
}

void CMsgClientSiteLicenseCheckoutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientSiteLicenseCheckoutResponse::descriptor() {
  protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientSiteLicenseCheckoutResponse& CMsgClientSiteLicenseCheckoutResponse::default_instance() {
  protobuf_steammessages_5fsitelicenseclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientSiteLicenseCheckoutResponse* CMsgClientSiteLicenseCheckoutResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientSiteLicenseCheckoutResponse* n = new CMsgClientSiteLicenseCheckoutResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientSiteLicenseCheckoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientSiteLicenseCheckoutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  return false;
#undef DO_
}

void CMsgClientSiteLicenseCheckoutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
}

::google::protobuf::uint8* CMsgClientSiteLicenseCheckoutResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  return target;
}

size_t CMsgClientSiteLicenseCheckoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSiteLicenseCheckoutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSiteLicenseCheckoutResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientSiteLicenseCheckoutResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
    MergeFrom(*source);
  }
}

void CMsgClientSiteLicenseCheckoutResponse::MergeFrom(const CMsgClientSiteLicenseCheckoutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgClientSiteLicenseCheckoutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSiteLicenseCheckoutResponse::CopyFrom(const CMsgClientSiteLicenseCheckoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSiteLicenseCheckoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteLicenseCheckoutResponse::IsInitialized() const {
  return true;
}

void CMsgClientSiteLicenseCheckoutResponse::Swap(CMsgClientSiteLicenseCheckoutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSiteLicenseCheckoutResponse::InternalSwap(CMsgClientSiteLicenseCheckoutResponse* other) {
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientSiteLicenseCheckoutResponse::GetMetadata() const {
  protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientSiteLicenseCheckoutResponse

// optional int32 eresult = 1 [default = 2];
bool CMsgClientSiteLicenseCheckoutResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientSiteLicenseCheckoutResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientSiteLicenseCheckoutResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientSiteLicenseCheckoutResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientSiteLicenseCheckoutResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientSiteLicenseCheckoutResponse.eresult)
  return eresult_;
}
void CMsgClientSiteLicenseCheckoutResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientSiteLicenseCheckoutResponse.eresult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSiteLicenseGetAvailableSeats::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSiteLicenseGetAvailableSeats::CMsgClientSiteLicenseGetAvailableSeats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsitelicenseclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
}
CMsgClientSiteLicenseGetAvailableSeats::CMsgClientSiteLicenseGetAvailableSeats(const CMsgClientSiteLicenseGetAvailableSeats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
}

void CMsgClientSiteLicenseGetAvailableSeats::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
}

CMsgClientSiteLicenseGetAvailableSeats::~CMsgClientSiteLicenseGetAvailableSeats() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  SharedDtor();
}

void CMsgClientSiteLicenseGetAvailableSeats::SharedDtor() {
}

void CMsgClientSiteLicenseGetAvailableSeats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientSiteLicenseGetAvailableSeats::descriptor() {
  protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientSiteLicenseGetAvailableSeats& CMsgClientSiteLicenseGetAvailableSeats::default_instance() {
  protobuf_steammessages_5fsitelicenseclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientSiteLicenseGetAvailableSeats* CMsgClientSiteLicenseGetAvailableSeats::New(::google::protobuf::Arena* arena) const {
  CMsgClientSiteLicenseGetAvailableSeats* n = new CMsgClientSiteLicenseGetAvailableSeats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientSiteLicenseGetAvailableSeats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientSiteLicenseGetAvailableSeats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  return false;
#undef DO_
}

void CMsgClientSiteLicenseGetAvailableSeats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
}

::google::protobuf::uint8* CMsgClientSiteLicenseGetAvailableSeats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  return target;
}

size_t CMsgClientSiteLicenseGetAvailableSeats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 appid = 1;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSiteLicenseGetAvailableSeats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSiteLicenseGetAvailableSeats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientSiteLicenseGetAvailableSeats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
    MergeFrom(*source);
  }
}

void CMsgClientSiteLicenseGetAvailableSeats::MergeFrom(const CMsgClientSiteLicenseGetAvailableSeats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CMsgClientSiteLicenseGetAvailableSeats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSiteLicenseGetAvailableSeats::CopyFrom(const CMsgClientSiteLicenseGetAvailableSeats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteLicenseGetAvailableSeats::IsInitialized() const {
  return true;
}

void CMsgClientSiteLicenseGetAvailableSeats::Swap(CMsgClientSiteLicenseGetAvailableSeats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSiteLicenseGetAvailableSeats::InternalSwap(CMsgClientSiteLicenseGetAvailableSeats* other) {
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientSiteLicenseGetAvailableSeats::GetMetadata() const {
  protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientSiteLicenseGetAvailableSeats

// optional uint32 appid = 1;
bool CMsgClientSiteLicenseGetAvailableSeats::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientSiteLicenseGetAvailableSeats::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientSiteLicenseGetAvailableSeats::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientSiteLicenseGetAvailableSeats::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CMsgClientSiteLicenseGetAvailableSeats::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientSiteLicenseGetAvailableSeats.appid)
  return appid_;
}
void CMsgClientSiteLicenseGetAvailableSeats::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientSiteLicenseGetAvailableSeats.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSiteLicenseGetAvailableSeatsResponse::kEresultFieldNumber;
const int CMsgClientSiteLicenseGetAvailableSeatsResponse::kSeatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSiteLicenseGetAvailableSeatsResponse::CMsgClientSiteLicenseGetAvailableSeatsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsitelicenseclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
}
CMsgClientSiteLicenseGetAvailableSeatsResponse::CMsgClientSiteLicenseGetAvailableSeatsResponse(const CMsgClientSiteLicenseGetAvailableSeatsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seats_, &from.seats_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&seats_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::SharedCtor() {
  _cached_size_ = 0;
  seats_ = 0u;
  eresult_ = 2;
}

CMsgClientSiteLicenseGetAvailableSeatsResponse::~CMsgClientSiteLicenseGetAvailableSeatsResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  SharedDtor();
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::SharedDtor() {
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientSiteLicenseGetAvailableSeatsResponse::descriptor() {
  protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientSiteLicenseGetAvailableSeatsResponse& CMsgClientSiteLicenseGetAvailableSeatsResponse::default_instance() {
  protobuf_steammessages_5fsitelicenseclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientSiteLicenseGetAvailableSeatsResponse* CMsgClientSiteLicenseGetAvailableSeatsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientSiteLicenseGetAvailableSeatsResponse* n = new CMsgClientSiteLicenseGetAvailableSeatsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  if (_has_bits_[0 / 32] & 3u) {
    seats_ = 0u;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientSiteLicenseGetAvailableSeatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_seats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  return false;
#undef DO_
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional uint32 seats = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
}

::google::protobuf::uint8* CMsgClientSiteLicenseGetAvailableSeatsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional uint32 seats = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seats(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  return target;
}

size_t CMsgClientSiteLicenseGetAvailableSeatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 seats = 2;
    if (has_seats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seats());
    }

    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSiteLicenseGetAvailableSeatsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientSiteLicenseGetAvailableSeatsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
    MergeFrom(*source);
  }
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::MergeFrom(const CMsgClientSiteLicenseGetAvailableSeatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      seats_ = from.seats_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::CopyFrom(const CMsgClientSiteLicenseGetAvailableSeatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteLicenseGetAvailableSeatsResponse::IsInitialized() const {
  return true;
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::Swap(CMsgClientSiteLicenseGetAvailableSeatsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSiteLicenseGetAvailableSeatsResponse::InternalSwap(CMsgClientSiteLicenseGetAvailableSeatsResponse* other) {
  std::swap(seats_, other->seats_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientSiteLicenseGetAvailableSeatsResponse::GetMetadata() const {
  protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientSiteLicenseGetAvailableSeatsResponse

// optional int32 eresult = 1 [default = 2];
bool CMsgClientSiteLicenseGetAvailableSeatsResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientSiteLicenseGetAvailableSeatsResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientSiteLicenseGetAvailableSeatsResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientSiteLicenseGetAvailableSeatsResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientSiteLicenseGetAvailableSeatsResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse.eresult)
  return eresult_;
}
void CMsgClientSiteLicenseGetAvailableSeatsResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse.eresult)
}

// optional uint32 seats = 2;
bool CMsgClientSiteLicenseGetAvailableSeatsResponse::has_seats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientSiteLicenseGetAvailableSeatsResponse::set_has_seats() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientSiteLicenseGetAvailableSeatsResponse::clear_has_seats() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientSiteLicenseGetAvailableSeatsResponse::clear_seats() {
  seats_ = 0u;
  clear_has_seats();
}
::google::protobuf::uint32 CMsgClientSiteLicenseGetAvailableSeatsResponse::seats() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse.seats)
  return seats_;
}
void CMsgClientSiteLicenseGetAvailableSeatsResponse::set_seats(::google::protobuf::uint32 value) {
  set_has_seats();
  seats_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientSiteLicenseGetAvailableSeatsResponse.seats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSiteLicenseGetContentCacheInfo::CMsgClientSiteLicenseGetContentCacheInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsitelicenseclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
}
CMsgClientSiteLicenseGetContentCacheInfo::CMsgClientSiteLicenseGetContentCacheInfo(const CMsgClientSiteLicenseGetContentCacheInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
}

void CMsgClientSiteLicenseGetContentCacheInfo::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClientSiteLicenseGetContentCacheInfo::~CMsgClientSiteLicenseGetContentCacheInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  SharedDtor();
}

void CMsgClientSiteLicenseGetContentCacheInfo::SharedDtor() {
}

void CMsgClientSiteLicenseGetContentCacheInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientSiteLicenseGetContentCacheInfo::descriptor() {
  protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientSiteLicenseGetContentCacheInfo& CMsgClientSiteLicenseGetContentCacheInfo::default_instance() {
  protobuf_steammessages_5fsitelicenseclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientSiteLicenseGetContentCacheInfo* CMsgClientSiteLicenseGetContentCacheInfo::New(::google::protobuf::Arena* arena) const {
  CMsgClientSiteLicenseGetContentCacheInfo* n = new CMsgClientSiteLicenseGetContentCacheInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientSiteLicenseGetContentCacheInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientSiteLicenseGetContentCacheInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  return false;
#undef DO_
}

void CMsgClientSiteLicenseGetContentCacheInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
}

::google::protobuf::uint8* CMsgClientSiteLicenseGetContentCacheInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  return target;
}

size_t CMsgClientSiteLicenseGetContentCacheInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSiteLicenseGetContentCacheInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSiteLicenseGetContentCacheInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientSiteLicenseGetContentCacheInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
    MergeFrom(*source);
  }
}

void CMsgClientSiteLicenseGetContentCacheInfo::MergeFrom(const CMsgClientSiteLicenseGetContentCacheInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClientSiteLicenseGetContentCacheInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSiteLicenseGetContentCacheInfo::CopyFrom(const CMsgClientSiteLicenseGetContentCacheInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteLicenseGetContentCacheInfo::IsInitialized() const {
  return true;
}

void CMsgClientSiteLicenseGetContentCacheInfo::Swap(CMsgClientSiteLicenseGetContentCacheInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSiteLicenseGetContentCacheInfo::InternalSwap(CMsgClientSiteLicenseGetContentCacheInfo* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientSiteLicenseGetContentCacheInfo::GetMetadata() const {
  protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientSiteLicenseGetContentCacheInfo

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSiteLicenseGetContentCacheInfoResponse::kUseCacheFieldNumber;
const int CMsgClientSiteLicenseGetContentCacheInfoResponse::kIpv4AddressFieldNumber;
const int CMsgClientSiteLicenseGetContentCacheInfoResponse::kPortNumberFieldNumber;
const int CMsgClientSiteLicenseGetContentCacheInfoResponse::kP2PGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSiteLicenseGetContentCacheInfoResponse::CMsgClientSiteLicenseGetContentCacheInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsitelicenseclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
}
CMsgClientSiteLicenseGetContentCacheInfoResponse::CMsgClientSiteLicenseGetContentCacheInfoResponse(const CMsgClientSiteLicenseGetContentCacheInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&use_cache_, &from.use_cache_,
    reinterpret_cast<char*>(&p2p_group_) -
    reinterpret_cast<char*>(&use_cache_) + sizeof(p2p_group_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&use_cache_, 0, reinterpret_cast<char*>(&p2p_group_) -
    reinterpret_cast<char*>(&use_cache_) + sizeof(p2p_group_));
}

CMsgClientSiteLicenseGetContentCacheInfoResponse::~CMsgClientSiteLicenseGetContentCacheInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  SharedDtor();
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::SharedDtor() {
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientSiteLicenseGetContentCacheInfoResponse::descriptor() {
  protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientSiteLicenseGetContentCacheInfoResponse& CMsgClientSiteLicenseGetContentCacheInfoResponse::default_instance() {
  protobuf_steammessages_5fsitelicenseclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientSiteLicenseGetContentCacheInfoResponse* CMsgClientSiteLicenseGetContentCacheInfoResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientSiteLicenseGetContentCacheInfoResponse* n = new CMsgClientSiteLicenseGetContentCacheInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&use_cache_, 0, reinterpret_cast<char*>(&p2p_group_) -
      reinterpret_cast<char*>(&use_cache_) + sizeof(p2p_group_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientSiteLicenseGetContentCacheInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_cache = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_use_cache();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_cache_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ipv4_address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ipv4_address();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipv4_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_port_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 p2p_group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_p2p_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &p2p_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  return false;
#undef DO_
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_cache = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_cache(), output);
  }

  // optional uint32 ipv4_address = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ipv4_address(), output);
  }

  // optional uint32 port_number = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port_number(), output);
  }

  // optional uint32 p2p_group = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->p2p_group(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
}

::google::protobuf::uint8* CMsgClientSiteLicenseGetContentCacheInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_cache = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_cache(), target);
  }

  // optional uint32 ipv4_address = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ipv4_address(), target);
  }

  // optional uint32 port_number = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port_number(), target);
  }

  // optional uint32 p2p_group = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->p2p_group(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  return target;
}

size_t CMsgClientSiteLicenseGetContentCacheInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bool use_cache = 1;
    if (has_use_cache()) {
      total_size += 1 + 1;
    }

    // optional uint32 ipv4_address = 2;
    if (has_ipv4_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ipv4_address());
    }

    // optional uint32 port_number = 3;
    if (has_port_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port_number());
    }

    // optional uint32 p2p_group = 4;
    if (has_p2p_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->p2p_group());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSiteLicenseGetContentCacheInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientSiteLicenseGetContentCacheInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::MergeFrom(const CMsgClientSiteLicenseGetContentCacheInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      use_cache_ = from.use_cache_;
    }
    if (cached_has_bits & 0x00000002u) {
      ipv4_address_ = from.ipv4_address_;
    }
    if (cached_has_bits & 0x00000004u) {
      port_number_ = from.port_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      p2p_group_ = from.p2p_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::CopyFrom(const CMsgClientSiteLicenseGetContentCacheInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteLicenseGetContentCacheInfoResponse::IsInitialized() const {
  return true;
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::Swap(CMsgClientSiteLicenseGetContentCacheInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSiteLicenseGetContentCacheInfoResponse::InternalSwap(CMsgClientSiteLicenseGetContentCacheInfoResponse* other) {
  std::swap(use_cache_, other->use_cache_);
  std::swap(ipv4_address_, other->ipv4_address_);
  std::swap(port_number_, other->port_number_);
  std::swap(p2p_group_, other->p2p_group_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientSiteLicenseGetContentCacheInfoResponse::GetMetadata() const {
  protobuf_steammessages_5fsitelicenseclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsitelicenseclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientSiteLicenseGetContentCacheInfoResponse

// optional bool use_cache = 1;
bool CMsgClientSiteLicenseGetContentCacheInfoResponse::has_use_cache() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_has_use_cache() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientSiteLicenseGetContentCacheInfoResponse::clear_has_use_cache() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientSiteLicenseGetContentCacheInfoResponse::clear_use_cache() {
  use_cache_ = false;
  clear_has_use_cache();
}
bool CMsgClientSiteLicenseGetContentCacheInfoResponse::use_cache() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse.use_cache)
  return use_cache_;
}
void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_use_cache(bool value) {
  set_has_use_cache();
  use_cache_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse.use_cache)
}

// optional uint32 ipv4_address = 2;
bool CMsgClientSiteLicenseGetContentCacheInfoResponse::has_ipv4_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_has_ipv4_address() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientSiteLicenseGetContentCacheInfoResponse::clear_has_ipv4_address() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientSiteLicenseGetContentCacheInfoResponse::clear_ipv4_address() {
  ipv4_address_ = 0u;
  clear_has_ipv4_address();
}
::google::protobuf::uint32 CMsgClientSiteLicenseGetContentCacheInfoResponse::ipv4_address() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse.ipv4_address)
  return ipv4_address_;
}
void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_ipv4_address(::google::protobuf::uint32 value) {
  set_has_ipv4_address();
  ipv4_address_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse.ipv4_address)
}

// optional uint32 port_number = 3;
bool CMsgClientSiteLicenseGetContentCacheInfoResponse::has_port_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_has_port_number() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientSiteLicenseGetContentCacheInfoResponse::clear_has_port_number() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientSiteLicenseGetContentCacheInfoResponse::clear_port_number() {
  port_number_ = 0u;
  clear_has_port_number();
}
::google::protobuf::uint32 CMsgClientSiteLicenseGetContentCacheInfoResponse::port_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse.port_number)
  return port_number_;
}
void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_port_number(::google::protobuf::uint32 value) {
  set_has_port_number();
  port_number_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse.port_number)
}

// optional uint32 p2p_group = 4;
bool CMsgClientSiteLicenseGetContentCacheInfoResponse::has_p2p_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_has_p2p_group() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientSiteLicenseGetContentCacheInfoResponse::clear_has_p2p_group() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientSiteLicenseGetContentCacheInfoResponse::clear_p2p_group() {
  p2p_group_ = 0u;
  clear_has_p2p_group();
}
::google::protobuf::uint32 CMsgClientSiteLicenseGetContentCacheInfoResponse::p2p_group() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse.p2p_group)
  return p2p_group_;
}
void CMsgClientSiteLicenseGetContentCacheInfoResponse::set_p2p_group(::google::protobuf::uint32 value) {
  set_has_p2p_group();
  p2p_group_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientSiteLicenseGetContentCacheInfoResponse.p2p_group)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
