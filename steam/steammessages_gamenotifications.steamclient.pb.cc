// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_gamenotifications.steamclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_gamenotifications.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CGameNotifications_VariableDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_Variable> {
} _CGameNotifications_Variable_default_instance_;
class CGameNotifications_LocalizedTextDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_LocalizedText> {
} _CGameNotifications_LocalizedText_default_instance_;
class CGameNotifications_UserStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_UserStatus> {
} _CGameNotifications_UserStatus_default_instance_;
class CGameNotifications_CreateSession_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_CreateSession_Request> {
} _CGameNotifications_CreateSession_Request_default_instance_;
class CGameNotifications_CreateSession_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_CreateSession_Response> {
} _CGameNotifications_CreateSession_Response_default_instance_;
class CGameNotifications_DeleteSession_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_DeleteSession_Request> {
} _CGameNotifications_DeleteSession_Request_default_instance_;
class CGameNotifications_DeleteSession_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_DeleteSession_Response> {
} _CGameNotifications_DeleteSession_Response_default_instance_;
class CGameNotifications_UpdateSession_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_UpdateSession_Request> {
} _CGameNotifications_UpdateSession_Request_default_instance_;
class CGameNotifications_UpdateSession_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_UpdateSession_Response> {
} _CGameNotifications_UpdateSession_Response_default_instance_;
class CGameNotifications_EnumerateSessions_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_EnumerateSessions_Request> {
} _CGameNotifications_EnumerateSessions_Request_default_instance_;
class CGameNotifications_SessionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_Session> {
} _CGameNotifications_Session_default_instance_;
class CGameNotifications_EnumerateSessions_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_EnumerateSessions_Response> {
} _CGameNotifications_EnumerateSessions_Response_default_instance_;
class CGameNotifications_GetSessionDetails_Request_RequestedSessionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_GetSessionDetails_Request_RequestedSession> {
} _CGameNotifications_GetSessionDetails_Request_RequestedSession_default_instance_;
class CGameNotifications_GetSessionDetails_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_GetSessionDetails_Request> {
} _CGameNotifications_GetSessionDetails_Request_default_instance_;
class CGameNotifications_GetSessionDetails_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_GetSessionDetails_Response> {
} _CGameNotifications_GetSessionDetails_Response_default_instance_;
class GameNotificationSettingsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameNotificationSettings> {
} _GameNotificationSettings_default_instance_;
class CGameNotifications_UpdateNotificationSettings_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_UpdateNotificationSettings_Request> {
} _CGameNotifications_UpdateNotificationSettings_Request_default_instance_;
class CGameNotifications_UpdateNotificationSettings_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_UpdateNotificationSettings_Response> {
} _CGameNotifications_UpdateNotificationSettings_Response_default_instance_;
class CGameNotifications_OnNotificationsRequested_NotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_OnNotificationsRequested_Notification> {
} _CGameNotifications_OnNotificationsRequested_Notification_default_instance_;
class CGameNotifications_OnUserStatusChanged_NotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameNotifications_OnUserStatusChanged_Notification> {
} _CGameNotifications_OnUserStatusChanged_Notification_default_instance_;

namespace protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[20];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_Variable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_Variable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_Variable, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_Variable, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_LocalizedText, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_LocalizedText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_LocalizedText, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_LocalizedText, variables_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_LocalizedText, rendered_text_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_UserStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_UserStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_UserStatus, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_UserStatus, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_UserStatus, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_UserStatus, message_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_CreateSession_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_CreateSession_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_CreateSession_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_CreateSession_Request, context_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_CreateSession_Request, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_CreateSession_Request, users_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_CreateSession_Request, steamid_),
  3,
  1,
  0,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_CreateSession_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_CreateSession_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_CreateSession_Response, sessionid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_DeleteSession_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_DeleteSession_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_DeleteSession_Request, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_DeleteSession_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_DeleteSession_Request, steamid_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_DeleteSession_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_DeleteSession_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_UpdateSession_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_UpdateSession_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_UpdateSession_Request, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_UpdateSession_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_UpdateSession_Request, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_UpdateSession_Request, users_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_UpdateSession_Request, steamid_),
  1,
  3,
  0,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_UpdateSession_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_UpdateSession_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_EnumerateSessions_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_EnumerateSessions_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_EnumerateSessions_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_EnumerateSessions_Request, include_all_user_messages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_EnumerateSessions_Request, include_auth_user_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_EnumerateSessions_Request, language_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_Session, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_Session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_Session, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_Session, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_Session, context_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_Session, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_Session, time_created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_Session, time_updated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_Session, user_status_),
  1,
  2,
  3,
  0,
  4,
  5,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_EnumerateSessions_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_EnumerateSessions_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_EnumerateSessions_Response, sessions_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_GetSessionDetails_Request_RequestedSession, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_GetSessionDetails_Request_RequestedSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_GetSessionDetails_Request_RequestedSession, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_GetSessionDetails_Request_RequestedSession, include_auth_user_message_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_GetSessionDetails_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_GetSessionDetails_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_GetSessionDetails_Request, sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_GetSessionDetails_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_GetSessionDetails_Request, language_),
  ~0u,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_GetSessionDetails_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_GetSessionDetails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_GetSessionDetails_Response, sessions_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNotificationSettings, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNotificationSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNotificationSettings, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNotificationSettings, allow_notifications_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_UpdateNotificationSettings_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_UpdateNotificationSettings_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_UpdateNotificationSettings_Request, game_notification_settings_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_UpdateNotificationSettings_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_UpdateNotificationSettings_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_OnNotificationsRequested_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_OnNotificationsRequested_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_OnNotificationsRequested_Notification, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_OnNotificationsRequested_Notification, appid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_OnUserStatusChanged_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_OnUserStatusChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_OnUserStatusChanged_Notification, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_OnUserStatusChanged_Notification, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_OnUserStatusChanged_Notification, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_OnUserStatusChanged_Notification, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameNotifications_OnUserStatusChanged_Notification, removed_),
  1,
  2,
  3,
  0,
  4,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(CGameNotifications_Variable)},
  { 9, 17, sizeof(CGameNotifications_LocalizedText)},
  { 20, 29, sizeof(CGameNotifications_UserStatus)},
  { 33, 43, sizeof(CGameNotifications_CreateSession_Request)},
  { 48, 54, sizeof(CGameNotifications_CreateSession_Response)},
  { 55, 63, sizeof(CGameNotifications_DeleteSession_Request)},
  { 66, 71, sizeof(CGameNotifications_DeleteSession_Response)},
  { 71, 81, sizeof(CGameNotifications_UpdateSession_Request)},
  { 86, 91, sizeof(CGameNotifications_UpdateSession_Response)},
  { 91, 100, sizeof(CGameNotifications_EnumerateSessions_Request)},
  { 104, 116, sizeof(CGameNotifications_Session)},
  { 123, 129, sizeof(CGameNotifications_EnumerateSessions_Response)},
  { 130, 137, sizeof(CGameNotifications_GetSessionDetails_Request_RequestedSession)},
  { 139, 147, sizeof(CGameNotifications_GetSessionDetails_Request)},
  { 150, 156, sizeof(CGameNotifications_GetSessionDetails_Response)},
  { 157, 164, sizeof(GameNotificationSettings)},
  { 166, 172, sizeof(CGameNotifications_UpdateNotificationSettings_Request)},
  { 173, 178, sizeof(CGameNotifications_UpdateNotificationSettings_Response)},
  { 178, 185, sizeof(CGameNotifications_OnNotificationsRequested_Notification)},
  { 187, 197, sizeof(CGameNotifications_OnUserStatusChanged_Notification)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameNotifications_Variable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameNotifications_LocalizedText_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameNotifications_UserStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameNotifications_CreateSession_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameNotifications_CreateSession_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameNotifications_DeleteSession_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameNotifications_DeleteSession_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameNotifications_UpdateSession_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameNotifications_UpdateSession_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameNotifications_EnumerateSessions_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameNotifications_Session_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameNotifications_EnumerateSessions_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameNotifications_GetSessionDetails_Request_RequestedSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameNotifications_GetSessionDetails_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameNotifications_GetSessionDetails_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameNotificationSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameNotifications_UpdateNotificationSettings_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameNotifications_UpdateNotificationSettings_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameNotifications_OnNotificationsRequested_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameNotifications_OnUserStatusChanged_Notification_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_gamenotifications.steamclient.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 20);
}

}  // namespace

void TableStruct::Shutdown() {
  _CGameNotifications_Variable_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CGameNotifications_LocalizedText_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CGameNotifications_UserStatus_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CGameNotifications_CreateSession_Request_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CGameNotifications_CreateSession_Response_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CGameNotifications_DeleteSession_Request_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CGameNotifications_DeleteSession_Response_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CGameNotifications_UpdateSession_Request_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CGameNotifications_UpdateSession_Response_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CGameNotifications_EnumerateSessions_Request_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CGameNotifications_Session_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CGameNotifications_EnumerateSessions_Response_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CGameNotifications_GetSessionDetails_Request_RequestedSession_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CGameNotifications_GetSessionDetails_Request_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CGameNotifications_GetSessionDetails_Response_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _GameNotificationSettings_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CGameNotifications_UpdateNotificationSettings_Request_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CGameNotifications_UpdateNotificationSettings_Response_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CGameNotifications_OnNotificationsRequested_Notification_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CGameNotifications_OnUserStatusChanged_Notification_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::InitDefaults();
  _CGameNotifications_Variable_default_instance_.DefaultConstruct();
  _CGameNotifications_LocalizedText_default_instance_.DefaultConstruct();
  _CGameNotifications_UserStatus_default_instance_.DefaultConstruct();
  _CGameNotifications_CreateSession_Request_default_instance_.DefaultConstruct();
  _CGameNotifications_CreateSession_Response_default_instance_.DefaultConstruct();
  _CGameNotifications_DeleteSession_Request_default_instance_.DefaultConstruct();
  _CGameNotifications_DeleteSession_Response_default_instance_.DefaultConstruct();
  _CGameNotifications_UpdateSession_Request_default_instance_.DefaultConstruct();
  _CGameNotifications_UpdateSession_Response_default_instance_.DefaultConstruct();
  _CGameNotifications_EnumerateSessions_Request_default_instance_.DefaultConstruct();
  _CGameNotifications_Session_default_instance_.DefaultConstruct();
  _CGameNotifications_EnumerateSessions_Response_default_instance_.DefaultConstruct();
  _CGameNotifications_GetSessionDetails_Request_RequestedSession_default_instance_.DefaultConstruct();
  _CGameNotifications_GetSessionDetails_Request_default_instance_.DefaultConstruct();
  _CGameNotifications_GetSessionDetails_Response_default_instance_.DefaultConstruct();
  _GameNotificationSettings_default_instance_.DefaultConstruct();
  _CGameNotifications_UpdateNotificationSettings_Request_default_instance_.DefaultConstruct();
  _CGameNotifications_UpdateNotificationSettings_Response_default_instance_.DefaultConstruct();
  _CGameNotifications_OnNotificationsRequested_Notification_default_instance_.DefaultConstruct();
  _CGameNotifications_OnUserStatusChanged_Notification_default_instance_.DefaultConstruct();
  _CGameNotifications_UserStatus_default_instance_.get_mutable()->title_ = const_cast< ::proto::steam::CGameNotifications_LocalizedText*>(
      ::proto::steam::CGameNotifications_LocalizedText::internal_default_instance());
  _CGameNotifications_UserStatus_default_instance_.get_mutable()->message_ = const_cast< ::proto::steam::CGameNotifications_LocalizedText*>(
      ::proto::steam::CGameNotifications_LocalizedText::internal_default_instance());
  _CGameNotifications_CreateSession_Request_default_instance_.get_mutable()->title_ = const_cast< ::proto::steam::CGameNotifications_LocalizedText*>(
      ::proto::steam::CGameNotifications_LocalizedText::internal_default_instance());
  _CGameNotifications_UpdateSession_Request_default_instance_.get_mutable()->title_ = const_cast< ::proto::steam::CGameNotifications_LocalizedText*>(
      ::proto::steam::CGameNotifications_LocalizedText::internal_default_instance());
  _CGameNotifications_Session_default_instance_.get_mutable()->title_ = const_cast< ::proto::steam::CGameNotifications_LocalizedText*>(
      ::proto::steam::CGameNotifications_LocalizedText::internal_default_instance());
  _CGameNotifications_OnUserStatusChanged_Notification_default_instance_.get_mutable()->status_ = const_cast< ::proto::steam::CGameNotifications_UserStatus*>(
      ::proto::steam::CGameNotifications_UserStatus::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n1steammessages_gamenotifications.steamc"
      "lient.proto\022\013proto.steam\032,steammessages_"
      "unified_base.steamclient.proto\"\340\002\n\033CGame"
      "Notifications_Variable\022\246\001\n\003key\030\001 \001(\tB\230\001\202"
      "\265\030\223\001The name of the variable in the loca"
      "lized text -- anywhere that %variablenam"
      "e% is found within the text it will be s"
      "ubstituded with the given value\022\227\001\n\005valu"
      "e\030\002 \001(\tB\207\001\202\265\030\202\001The value of the variable"
      " to substitute in the localized text in "
      "place of the given variable.  Can itself"
      " be a localization token.\"\221\003\n CGameNotif"
      "ications_LocalizedText\022H\n\005token\030\001 \001(\tB9\202"
      "\265\0305A localization token that maps to the"
      " desired string.\022\231\001\n\tvariables\030\002 \003(\0132(.p"
      "roto.steam.CGameNotifications_VariableB\\"
      "\202\265\030XA list of variables values to substi"
      "tute in any variables found in the local"
      "ized string.\022\206\001\n\rrendered_text\030\003 \001(\tBo\202\265"
      "\030kText rendered in the requested languag"
      "e, complete with variable substitutions,"
      " if a language was specified.\"\255\004\n\035CGameN"
      "otifications_UserStatus\0221\n\007steamid\030\001 \001(\006"
      "B \202\265\030\034The specific user\'s steamid.\022\244\001\n\005s"
      "tate\030\002 \001(\tB\224\001\202\265\030\217\001The user\'s state.  rea"
      "dy -- the user is ready to play.  waitin"
      "g -- The game is waiting on an action fr"
      "om the user. completed, the game is over"
      ".\022\220\001\n\005title\030\003 \001(\0132-.proto.steam.CGameNot"
      "ifications_LocalizedTextBR\202\265\030NTitle of t"
      "he session to display to this user in th"
      "eir list of active sessions.\022\236\001\n\007message"
      "\030\004 \001(\0132-.proto.steam.CGameNotifications_"
      "LocalizedTextB^\202\265\030ZSubtitle of the sessi"
      "on to display to this user user within t"
      "heir list of active sessions.\"\253\005\n(CGameN"
      "otifications_CreateSession_Request\0227\n\005ap"
      "pid\030\001 \001(\rB(\202\265\030$The appid to create the s"
      "ession for.\022\177\n\007context\030\002 \001(\004Bn\202\265\030jGame-s"
      "pecified context value the game can used"
      " to associate the session with some obje"
      "ct on their backend.\022\217\001\n\005title\030\003 \001(\0132-.p"
      "roto.steam.CGameNotifications_LocalizedT"
      "extBQ\202\265\030MThe title of the session to be "
      "displayed within each user\'s list of ses"
      "sions.\022m\n\005users\030\004 \003(\0132*.proto.steam.CGam"
      "eNotifications_UserStatusB2\202\265\030.The initi"
      "al state of all users in the session.\022\303\001"
      "\n\007steamid\030\005 \001(\006B\261\001\202\265\030\254\001(Optional) steami"
      "d to make the request on behalf of -- if"
      " specified, the user must be in the sess"
      "ion and all users being added to the ses"
      "sion must be friends with the user.\"i\n)C"
      "GameNotifications_CreateSession_Response"
      "\022<\n\tsessionid\030\001 \001(\004B)\202\265\030%The sessionid o"
      "f the created session.\"\217\002\n(CGameNotifica"
      "tions_DeleteSession_Request\022/\n\tsessionid"
      "\030\001 \001(\004B\034\202\265\030\030The sessionid to delete.\0226\n\005"
      "appid\030\002 \001(\rB\'\202\265\030#The appid of the sessio"
      "n to delete.\022z\n\007steamid\030\003 \001(\006Bi\202\265\030e(Opti"
      "onal) steamid to make the request on beh"
      "alf of -- if specified, the user must be"
      " in the session.\"+\n)CGameNotifications_D"
      "eleteSession_Response\"\325\005\n(CGameNotificat"
      "ions_UpdateSession_Request\022/\n\tsessionid\030"
      "\001 \001(\004B\034\202\265\030\030The sessionid to update.\0226\n\005a"
      "ppid\030\002 \001(\rB\'\202\265\030#The appid of the session"
      " to update.\022\234\001\n\005title\030\003 \001(\0132-.proto.stea"
      "m.CGameNotifications_LocalizedTextB^\202\265\030Z"
      "(Optional) The new title of the session."
      "  If not specified, the title will not b"
      "e changed.\022\332\001\n\005users\030\004 \003(\0132*.proto.steam"
      ".CGameNotifications_UserStatusB\236\001\202\265\030\231\001(O"
      "ptional) A list of users whose state wil"
      "l be updated to reflect the given state."
      " If the users are not already in the ses"
      "sion, they will be added to it.\022\303\001\n\007stea"
      "mid\030\006 \001(\006B\261\001\202\265\030\254\001(Optional) steamid to m"
      "ake the request on behalf of -- if speci"
      "fied, the user must be in the session an"
      "d all users being added to the session m"
      "ust be friends with the user.\"+\n)CGameNo"
      "tifications_UpdateSession_Response\"\241\004\n,C"
      "GameNotifications_EnumerateSessions_Requ"
      "est\022~\n\005appid\030\001 \001(\rBo\202\265\030kThe sessionid to"
      " request details for. Optional. If not s"
      "pecified, all the user\'s sessions will b"
      "e returned.\022\216\001\n\031include_all_user_message"
      "s\030\003 \001(\010Bk\202\265\030g(Optional) Boolean determin"
      "ing whether the message for all users sh"
      "ould be included. Defaults to false.\022\233\001\n"
      "\031include_auth_user_message\030\004 \001(\010Bx\202\265\030t(O"
      "ptional) Boolean determining whether the"
      " message for the authenticated user shou"
      "ld be included. Defaults to false.\022B\n\010la"
      "nguage\030\005 \001(\tB0\202\265\030,(Optional) Language to"
      " localize the text in.\"\333\004\n\032CGameNotifica"
      "tions_Session\0226\n\tsessionid\030\001 \001(\004B#\202\265\030\037Th"
      "e sessionid for this session.\022-\n\005appid\030\002"
      " \001(\004B\036\202\265\030\032The appid for the session.\022\177\n\007"
      "context\030\003 \001(\004Bn\202\265\030jGame-specified contex"
      "t value the game can used to associate t"
      "he session with some object on their bac"
      "kend.\022d\n\005title\030\004 \001(\0132-.proto.steam.CGame"
      "Notifications_LocalizedTextB&\202\265\030\"The cur"
      "rent title for the session.\022;\n\014time_crea"
      "ted\030\005 \001(\rB%\202\265\030!The time the session was "
      "created.\022@\n\014time_updated\030\006 \001(\rB*\202\265\030&The "
      "last time the session was updated.\022p\n\013us"
      "er_status\030\007 \003(\0132*.proto.steam.CGameNotif"
      "ications_UserStatusB/\202\265\030+The status of a"
      "ll the users in the session.\"\216\001\n-CGameNo"
      "tifications_EnumerateSessions_Response\022]"
      "\n\010sessions\030\001 \003(\0132\'.proto.steam.CGameNoti"
      "fications_SessionB\"\202\265\030\036A list of the use"
      "r\'s sessions.\"\342\003\n,CGameNotifications_Get"
      "SessionDetails_Request\022\\\n\010sessions\030\001 \003(\013"
      "2J.proto.steam.CGameNotifications_GetSes"
      "sionDetails_Request.RequestedSession\022.\n\005"
      "appid\030\002 \001(\rB\037\202\265\030\033The appid for the sessi"
      "ons.\0227\n\010language\030\003 \001(\tB%\202\265\030!Language to "
      "localize the text in.\032\352\001\n\020RequestedSessi"
      "on\0228\n\tsessionid\030\001 \001(\004B%\202\265\030!The sessionid"
      " to get details for.\022\233\001\n\031include_auth_us"
      "er_message\030\003 \001(\010Bx\202\265\030t(Optional) Boolean"
      " determining whether the message for the"
      " authenticated user should be included. "
      "Defaults to false.\"\213\001\n-CGameNotification"
      "s_GetSessionDetails_Response\022Z\n\010sessions"
      "\030\001 \003(\0132\'.proto.steam.CGameNotifications_"
      "SessionB\037\202\265\030\033The details of the session."
      "\"\250\001\n\030GameNotificationSettings\0227\n\005appid\030\001"
      " \001(\rB(\202\265\030$The appid to create the sessio"
      "n for.\022S\n\023allow_notifications\030\002 \001(\010B6\202\265\030"
      "2Whether the user allows notification fo"
      "r this app.\"\202\001\n5CGameNotifications_Updat"
      "eNotificationSettings_Request\022I\n\032game_no"
      "tification_settings\030\001 \003(\0132%.proto.steam."
      "GameNotificationSettings\"8\n6CGameNotific"
      "ations_UpdateNotificationSettings_Respon"
      "se\"\306\001\n8CGameNotifications_OnNotification"
      "sRequested_Notification\022N\n\007steamid\030\001 \001(\006"
      "B=\202\265\0309steamid of the user who notificati"
      "ons were requested for.\022:\n\005appid\030\002 \001(\rB+"
      "\202\265\030\'The appid that requested notificatio"
      "ns.\"\312\003\n3CGameNotifications_OnUserStatusC"
      "hanged_Notification\022>\n\007steamid\030\001 \001(\006B-\202\265"
      "\030)steamid of the user whose status chang"
      "ed.\022X\n\tsessionid\030\002 \001(\004BE\202\265\030AThe sessioni"
      "d of the session where the user\'s status"
      " was changed.\022L\n\005appid\030\003 \001(\rB=\202\265\0309The ap"
      "pid of the session where the user\'s stat"
      "us changed.\022b\n\006status\030\004 \001(\0132*.proto.stea"
      "m.CGameNotifications_UserStatusB&\202\265\030\"(Op"
      "tional) New status of the user.\022G\n\007remov"
      "ed\030\005 \001(\010B6\202\265\0302(Optional) User has been r"
      "emoved from the session.2\266\t\n\021GameNotific"
      "ations\022\245\001\n\021UserCreateSession\0225.proto.ste"
      "am.CGameNotifications_CreateSession_Requ"
      "est\0326.proto.steam.CGameNotifications_Cre"
      "ateSession_Response\"!\202\265\030\035Creates an asyn"
      "c game session\022\245\001\n\021UserDeleteSession\0225.p"
      "roto.steam.CGameNotifications_DeleteSess"
      "ion_Request\0326.proto.steam.CGameNotificat"
      "ions_DeleteSession_Response\"!\202\265\030\035Deletes"
      " an async game session\022\245\001\n\021UserUpdateSes"
      "sion\0225.proto.steam.CGameNotifications_Up"
      "dateSession_Request\0326.proto.steam.CGameN"
      "otifications_UpdateSession_Response\"!\202\265\030"
      "\035Updates an async game session\022\254\001\n\021Enume"
      "rateSessions\0229.proto.steam.CGameNotifica"
      "tions_EnumerateSessions_Request\032:.proto."
      "steam.CGameNotifications_EnumerateSessio"
      "ns_Response\" \202\265\030\034Enumerates a user\'s ses"
      "sions\022\266\001\n\021GetSessionDetails\0229.proto.stea"
      "m.CGameNotifications_GetSessionDetails_R"
      "equest\032:.proto.steam.CGameNotifications_"
      "GetSessionDetails_Response\"*\202\265\030&Get the "
      "details for a specific session\022\356\001\n\032Updat"
      "eNotificationSettings\022B.proto.steam.CGam"
      "eNotifications_UpdateNotificationSetting"
      "s_Request\032C.proto.steam.CGameNotificatio"
      "ns_UpdateNotificationSettings_Response\"G"
      "\202\265\030CUpdates whether a user allows game n"
      "otifications for a specific app\032P\202\265\030LA s"
      "ervice for functions related to the asyn"
      "cronous game notification server.2\217\003\n\027Ga"
      "meNotificationsClient\022\255\001\n\030OnNotification"
      "sRequested\022E.proto.steam.CGameNotificati"
      "ons_OnNotificationsRequested_Notificatio"
      "n\032\027.proto.steam.NoResponse\"1\202\265\030-Requests"
      " that the user opt into notifications\022\245\001"
      "\n\023OnUserStatusChanged\022@.proto.steam.CGam"
      "eNotifications_OnUserStatusChanged_Notif"
      "ication\032\027.proto.steam.NoResponse\"3\202\265\030/No"
      "tification that the user\'s status has ch"
      "anged\032\034\202\265\030\024Client notifications\300\265\030\002B\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 7880);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_gamenotifications.steamclient.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_Variable::kKeyFieldNumber;
const int CGameNotifications_Variable::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_Variable::CGameNotifications_Variable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameNotifications_Variable)
}
CGameNotifications_Variable::CGameNotifications_Variable(const CGameNotifications_Variable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameNotifications_Variable)
}

void CGameNotifications_Variable::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CGameNotifications_Variable::~CGameNotifications_Variable() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameNotifications_Variable)
  SharedDtor();
}

void CGameNotifications_Variable::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGameNotifications_Variable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameNotifications_Variable::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_Variable& CGameNotifications_Variable::default_instance() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameNotifications_Variable* CGameNotifications_Variable::New(::google::protobuf::Arena* arena) const {
  CGameNotifications_Variable* n = new CGameNotifications_Variable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameNotifications_Variable::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameNotifications_Variable)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_Variable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameNotifications_Variable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1 [(.proto.steam.description) = "The name of the variable in the localized text -- anywhere that %variablename% is found within the text it will be substituded with the given value"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameNotifications_Variable.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2 [(.proto.steam.description) = "The value of the variable to substitute in the localized text in place of the given variable.  Can itself be a localization token."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameNotifications_Variable.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameNotifications_Variable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameNotifications_Variable)
  return false;
#undef DO_
}

void CGameNotifications_Variable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameNotifications_Variable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1 [(.proto.steam.description) = "The name of the variable in the localized text -- anywhere that %variablename% is found within the text it will be substituded with the given value"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameNotifications_Variable.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2 [(.proto.steam.description) = "The value of the variable to substitute in the localized text in place of the given variable.  Can itself be a localization token."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameNotifications_Variable.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameNotifications_Variable)
}

::google::protobuf::uint8* CGameNotifications_Variable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameNotifications_Variable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1 [(.proto.steam.description) = "The name of the variable in the localized text -- anywhere that %variablename% is found within the text it will be substituded with the given value"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameNotifications_Variable.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2 [(.proto.steam.description) = "The value of the variable to substitute in the localized text in place of the given variable.  Can itself be a localization token."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameNotifications_Variable.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameNotifications_Variable)
  return target;
}

size_t CGameNotifications_Variable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameNotifications_Variable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string key = 1 [(.proto.steam.description) = "The name of the variable in the localized text -- anywhere that %variablename% is found within the text it will be substituded with the given value"];
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2 [(.proto.steam.description) = "The value of the variable to substitute in the localized text in place of the given variable.  Can itself be a localization token."];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameNotifications_Variable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameNotifications_Variable)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_Variable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_Variable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameNotifications_Variable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameNotifications_Variable)
    MergeFrom(*source);
  }
}

void CGameNotifications_Variable::MergeFrom(const CGameNotifications_Variable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameNotifications_Variable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CGameNotifications_Variable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameNotifications_Variable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_Variable::CopyFrom(const CGameNotifications_Variable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameNotifications_Variable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_Variable::IsInitialized() const {
  return true;
}

void CGameNotifications_Variable::Swap(CGameNotifications_Variable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_Variable::InternalSwap(CGameNotifications_Variable* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameNotifications_Variable::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameNotifications_Variable

// optional string key = 1 [(.proto.steam.description) = "The name of the variable in the localized text -- anywhere that %variablename% is found within the text it will be substituded with the given value"];
bool CGameNotifications_Variable::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameNotifications_Variable::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameNotifications_Variable::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameNotifications_Variable::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& CGameNotifications_Variable::key() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_Variable.key)
  return key_.GetNoArena();
}
void CGameNotifications_Variable::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_Variable.key)
}
#if LANG_CXX11
void CGameNotifications_Variable::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameNotifications_Variable.key)
}
#endif
void CGameNotifications_Variable::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameNotifications_Variable.key)
}
void CGameNotifications_Variable::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameNotifications_Variable.key)
}
::std::string* CGameNotifications_Variable::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameNotifications_Variable.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGameNotifications_Variable::release_key() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameNotifications_Variable.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGameNotifications_Variable::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameNotifications_Variable.key)
}

// optional string value = 2 [(.proto.steam.description) = "The value of the variable to substitute in the localized text in place of the given variable.  Can itself be a localization token."];
bool CGameNotifications_Variable::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGameNotifications_Variable::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CGameNotifications_Variable::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGameNotifications_Variable::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CGameNotifications_Variable::value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_Variable.value)
  return value_.GetNoArena();
}
void CGameNotifications_Variable::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_Variable.value)
}
#if LANG_CXX11
void CGameNotifications_Variable::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameNotifications_Variable.value)
}
#endif
void CGameNotifications_Variable::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameNotifications_Variable.value)
}
void CGameNotifications_Variable::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameNotifications_Variable.value)
}
::std::string* CGameNotifications_Variable::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameNotifications_Variable.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGameNotifications_Variable::release_value() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameNotifications_Variable.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGameNotifications_Variable::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameNotifications_Variable.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_LocalizedText::kTokenFieldNumber;
const int CGameNotifications_LocalizedText::kVariablesFieldNumber;
const int CGameNotifications_LocalizedText::kRenderedTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_LocalizedText::CGameNotifications_LocalizedText()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameNotifications_LocalizedText)
}
CGameNotifications_LocalizedText::CGameNotifications_LocalizedText(const CGameNotifications_LocalizedText& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      variables_(from.variables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  rendered_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rendered_text()) {
    rendered_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rendered_text_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameNotifications_LocalizedText)
}

void CGameNotifications_LocalizedText::SharedCtor() {
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rendered_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CGameNotifications_LocalizedText::~CGameNotifications_LocalizedText() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameNotifications_LocalizedText)
  SharedDtor();
}

void CGameNotifications_LocalizedText::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rendered_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGameNotifications_LocalizedText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameNotifications_LocalizedText::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_LocalizedText& CGameNotifications_LocalizedText::default_instance() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameNotifications_LocalizedText* CGameNotifications_LocalizedText::New(::google::protobuf::Arena* arena) const {
  CGameNotifications_LocalizedText* n = new CGameNotifications_LocalizedText;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameNotifications_LocalizedText::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameNotifications_LocalizedText)
  variables_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_token()) {
      GOOGLE_DCHECK(!token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*token_.UnsafeRawStringPointer())->clear();
    }
    if (has_rendered_text()) {
      GOOGLE_DCHECK(!rendered_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rendered_text_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_LocalizedText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameNotifications_LocalizedText)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1 [(.proto.steam.description) = "A localization token that maps to the desired string."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameNotifications_LocalizedText.token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CGameNotifications_Variable variables = 2 [(.proto.steam.description) = "A list of variables values to substitute in any variables found in the localized string."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_variables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rendered_text = 3 [(.proto.steam.description) = "Text rendered in the requested language, complete with variable substitutions, if a language was specified."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rendered_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rendered_text().data(), this->rendered_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameNotifications_LocalizedText.rendered_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameNotifications_LocalizedText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameNotifications_LocalizedText)
  return false;
#undef DO_
}

void CGameNotifications_LocalizedText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameNotifications_LocalizedText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string token = 1 [(.proto.steam.description) = "A localization token that maps to the desired string."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameNotifications_LocalizedText.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // repeated .proto.steam.CGameNotifications_Variable variables = 2 [(.proto.steam.description) = "A list of variables values to substitute in any variables found in the localized string."];
  for (unsigned int i = 0, n = this->variables_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->variables(i), output);
  }

  // optional string rendered_text = 3 [(.proto.steam.description) = "Text rendered in the requested language, complete with variable substitutions, if a language was specified."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rendered_text().data(), this->rendered_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameNotifications_LocalizedText.rendered_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rendered_text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameNotifications_LocalizedText)
}

::google::protobuf::uint8* CGameNotifications_LocalizedText::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameNotifications_LocalizedText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string token = 1 [(.proto.steam.description) = "A localization token that maps to the desired string."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameNotifications_LocalizedText.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // repeated .proto.steam.CGameNotifications_Variable variables = 2 [(.proto.steam.description) = "A list of variables values to substitute in any variables found in the localized string."];
  for (unsigned int i = 0, n = this->variables_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->variables(i), deterministic, target);
  }

  // optional string rendered_text = 3 [(.proto.steam.description) = "Text rendered in the requested language, complete with variable substitutions, if a language was specified."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rendered_text().data(), this->rendered_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameNotifications_LocalizedText.rendered_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rendered_text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameNotifications_LocalizedText)
  return target;
}

size_t CGameNotifications_LocalizedText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameNotifications_LocalizedText)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CGameNotifications_Variable variables = 2 [(.proto.steam.description) = "A list of variables values to substitute in any variables found in the localized string."];
  {
    unsigned int count = this->variables_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->variables(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string token = 1 [(.proto.steam.description) = "A localization token that maps to the desired string."];
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string rendered_text = 3 [(.proto.steam.description) = "Text rendered in the requested language, complete with variable substitutions, if a language was specified."];
    if (has_rendered_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rendered_text());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameNotifications_LocalizedText::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameNotifications_LocalizedText)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_LocalizedText* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_LocalizedText>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameNotifications_LocalizedText)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameNotifications_LocalizedText)
    MergeFrom(*source);
  }
}

void CGameNotifications_LocalizedText::MergeFrom(const CGameNotifications_LocalizedText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameNotifications_LocalizedText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variables_.MergeFrom(from.variables_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_rendered_text();
      rendered_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rendered_text_);
    }
  }
}

void CGameNotifications_LocalizedText::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameNotifications_LocalizedText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_LocalizedText::CopyFrom(const CGameNotifications_LocalizedText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameNotifications_LocalizedText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_LocalizedText::IsInitialized() const {
  return true;
}

void CGameNotifications_LocalizedText::Swap(CGameNotifications_LocalizedText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_LocalizedText::InternalSwap(CGameNotifications_LocalizedText* other) {
  variables_.InternalSwap(&other->variables_);
  token_.Swap(&other->token_);
  rendered_text_.Swap(&other->rendered_text_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameNotifications_LocalizedText::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameNotifications_LocalizedText

// optional string token = 1 [(.proto.steam.description) = "A localization token that maps to the desired string."];
bool CGameNotifications_LocalizedText::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameNotifications_LocalizedText::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameNotifications_LocalizedText::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameNotifications_LocalizedText::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& CGameNotifications_LocalizedText::token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_LocalizedText.token)
  return token_.GetNoArena();
}
void CGameNotifications_LocalizedText::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_LocalizedText.token)
}
#if LANG_CXX11
void CGameNotifications_LocalizedText::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameNotifications_LocalizedText.token)
}
#endif
void CGameNotifications_LocalizedText::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameNotifications_LocalizedText.token)
}
void CGameNotifications_LocalizedText::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameNotifications_LocalizedText.token)
}
::std::string* CGameNotifications_LocalizedText::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameNotifications_LocalizedText.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGameNotifications_LocalizedText::release_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameNotifications_LocalizedText.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGameNotifications_LocalizedText::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameNotifications_LocalizedText.token)
}

// repeated .proto.steam.CGameNotifications_Variable variables = 2 [(.proto.steam.description) = "A list of variables values to substitute in any variables found in the localized string."];
int CGameNotifications_LocalizedText::variables_size() const {
  return variables_.size();
}
void CGameNotifications_LocalizedText::clear_variables() {
  variables_.Clear();
}
const ::proto::steam::CGameNotifications_Variable& CGameNotifications_LocalizedText::variables(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_LocalizedText.variables)
  return variables_.Get(index);
}
::proto::steam::CGameNotifications_Variable* CGameNotifications_LocalizedText::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameNotifications_LocalizedText.variables)
  return variables_.Mutable(index);
}
::proto::steam::CGameNotifications_Variable* CGameNotifications_LocalizedText::add_variables() {
  // @@protoc_insertion_point(field_add:proto.steam.CGameNotifications_LocalizedText.variables)
  return variables_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CGameNotifications_Variable >*
CGameNotifications_LocalizedText::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CGameNotifications_LocalizedText.variables)
  return &variables_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CGameNotifications_Variable >&
CGameNotifications_LocalizedText::variables() const {
  // @@protoc_insertion_point(field_list:proto.steam.CGameNotifications_LocalizedText.variables)
  return variables_;
}

// optional string rendered_text = 3 [(.proto.steam.description) = "Text rendered in the requested language, complete with variable substitutions, if a language was specified."];
bool CGameNotifications_LocalizedText::has_rendered_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGameNotifications_LocalizedText::set_has_rendered_text() {
  _has_bits_[0] |= 0x00000002u;
}
void CGameNotifications_LocalizedText::clear_has_rendered_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGameNotifications_LocalizedText::clear_rendered_text() {
  rendered_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rendered_text();
}
const ::std::string& CGameNotifications_LocalizedText::rendered_text() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_LocalizedText.rendered_text)
  return rendered_text_.GetNoArena();
}
void CGameNotifications_LocalizedText::set_rendered_text(const ::std::string& value) {
  set_has_rendered_text();
  rendered_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_LocalizedText.rendered_text)
}
#if LANG_CXX11
void CGameNotifications_LocalizedText::set_rendered_text(::std::string&& value) {
  set_has_rendered_text();
  rendered_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameNotifications_LocalizedText.rendered_text)
}
#endif
void CGameNotifications_LocalizedText::set_rendered_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rendered_text();
  rendered_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameNotifications_LocalizedText.rendered_text)
}
void CGameNotifications_LocalizedText::set_rendered_text(const char* value, size_t size) {
  set_has_rendered_text();
  rendered_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameNotifications_LocalizedText.rendered_text)
}
::std::string* CGameNotifications_LocalizedText::mutable_rendered_text() {
  set_has_rendered_text();
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameNotifications_LocalizedText.rendered_text)
  return rendered_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGameNotifications_LocalizedText::release_rendered_text() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameNotifications_LocalizedText.rendered_text)
  clear_has_rendered_text();
  return rendered_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGameNotifications_LocalizedText::set_allocated_rendered_text(::std::string* rendered_text) {
  if (rendered_text != NULL) {
    set_has_rendered_text();
  } else {
    clear_has_rendered_text();
  }
  rendered_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rendered_text);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameNotifications_LocalizedText.rendered_text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_UserStatus::kSteamidFieldNumber;
const int CGameNotifications_UserStatus::kStateFieldNumber;
const int CGameNotifications_UserStatus::kTitleFieldNumber;
const int CGameNotifications_UserStatus::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_UserStatus::CGameNotifications_UserStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameNotifications_UserStatus)
}
CGameNotifications_UserStatus::CGameNotifications_UserStatus(const CGameNotifications_UserStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_state()) {
    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.has_title()) {
    title_ = new ::proto::steam::CGameNotifications_LocalizedText(*from.title_);
  } else {
    title_ = NULL;
  }
  if (from.has_message()) {
    message_ = new ::proto::steam::CGameNotifications_LocalizedText(*from.message_);
  } else {
    message_ = NULL;
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameNotifications_UserStatus)
}

void CGameNotifications_UserStatus::SharedCtor() {
  _cached_size_ = 0;
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&title_, 0, reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&title_) + sizeof(steamid_));
}

CGameNotifications_UserStatus::~CGameNotifications_UserStatus() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameNotifications_UserStatus)
  SharedDtor();
}

void CGameNotifications_UserStatus::SharedDtor() {
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete title_;
  }
  if (this != internal_default_instance()) {
    delete message_;
  }
}

void CGameNotifications_UserStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameNotifications_UserStatus::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_UserStatus& CGameNotifications_UserStatus::default_instance() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameNotifications_UserStatus* CGameNotifications_UserStatus::New(::google::protobuf::Arena* arena) const {
  CGameNotifications_UserStatus* n = new CGameNotifications_UserStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameNotifications_UserStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameNotifications_UserStatus)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_state()) {
      GOOGLE_DCHECK(!state_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*state_.UnsafeRawStringPointer())->clear();
    }
    if (has_title()) {
      GOOGLE_DCHECK(title_ != NULL);
      title_->::proto::steam::CGameNotifications_LocalizedText::Clear();
    }
    if (has_message()) {
      GOOGLE_DCHECK(message_ != NULL);
      message_->::proto::steam::CGameNotifications_LocalizedText::Clear();
    }
  }
  steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_UserStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameNotifications_UserStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "The specific user\'s steamid."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string state = 2 [(.proto.steam.description) = "The user\'s state.  ready -- the user is ready to play.  waiting -- The game is waiting on an action from the user. completed, the game is over."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameNotifications_UserStatus.state");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CGameNotifications_LocalizedText title = 3 [(.proto.steam.description) = "Title of the session to display to this user in their list of active sessions."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CGameNotifications_LocalizedText message = 4 [(.proto.steam.description) = "Subtitle of the session to display to this user user within their list of active sessions."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameNotifications_UserStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameNotifications_UserStatus)
  return false;
#undef DO_
}

void CGameNotifications_UserStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameNotifications_UserStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "The specific user\'s steamid."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string state = 2 [(.proto.steam.description) = "The user\'s state.  ready -- the user is ready to play.  waiting -- The game is waiting on an action from the user. completed, the game is over."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameNotifications_UserStatus.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->state(), output);
  }

  // optional .proto.steam.CGameNotifications_LocalizedText title = 3 [(.proto.steam.description) = "Title of the session to display to this user in their list of active sessions."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->title_, output);
  }

  // optional .proto.steam.CGameNotifications_LocalizedText message = 4 [(.proto.steam.description) = "Subtitle of the session to display to this user user within their list of active sessions."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->message_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameNotifications_UserStatus)
}

::google::protobuf::uint8* CGameNotifications_UserStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameNotifications_UserStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "The specific user\'s steamid."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional string state = 2 [(.proto.steam.description) = "The user\'s state.  ready -- the user is ready to play.  waiting -- The game is waiting on an action from the user. completed, the game is over."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameNotifications_UserStatus.state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->state(), target);
  }

  // optional .proto.steam.CGameNotifications_LocalizedText title = 3 [(.proto.steam.description) = "Title of the session to display to this user in their list of active sessions."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->title_, deterministic, target);
  }

  // optional .proto.steam.CGameNotifications_LocalizedText message = 4 [(.proto.steam.description) = "Subtitle of the session to display to this user user within their list of active sessions."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->message_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameNotifications_UserStatus)
  return target;
}

size_t CGameNotifications_UserStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameNotifications_UserStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string state = 2 [(.proto.steam.description) = "The user\'s state.  ready -- the user is ready to play.  waiting -- The game is waiting on an action from the user. completed, the game is over."];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

    // optional .proto.steam.CGameNotifications_LocalizedText title = 3 [(.proto.steam.description) = "Title of the session to display to this user in their list of active sessions."];
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->title_);
    }

    // optional .proto.steam.CGameNotifications_LocalizedText message = 4 [(.proto.steam.description) = "Subtitle of the session to display to this user user within their list of active sessions."];
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->message_);
    }

    // optional fixed64 steamid = 1 [(.proto.steam.description) = "The specific user\'s steamid."];
    if (has_steamid()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameNotifications_UserStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameNotifications_UserStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_UserStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_UserStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameNotifications_UserStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameNotifications_UserStatus)
    MergeFrom(*source);
  }
}

void CGameNotifications_UserStatus::MergeFrom(const CGameNotifications_UserStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameNotifications_UserStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_state();
      state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_title()->::proto::steam::CGameNotifications_LocalizedText::MergeFrom(from.title());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_message()->::proto::steam::CGameNotifications_LocalizedText::MergeFrom(from.message());
    }
    if (cached_has_bits & 0x00000008u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameNotifications_UserStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameNotifications_UserStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_UserStatus::CopyFrom(const CGameNotifications_UserStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameNotifications_UserStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_UserStatus::IsInitialized() const {
  return true;
}

void CGameNotifications_UserStatus::Swap(CGameNotifications_UserStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_UserStatus::InternalSwap(CGameNotifications_UserStatus* other) {
  state_.Swap(&other->state_);
  std::swap(title_, other->title_);
  std::swap(message_, other->message_);
  std::swap(steamid_, other->steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameNotifications_UserStatus::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameNotifications_UserStatus

// optional fixed64 steamid = 1 [(.proto.steam.description) = "The specific user\'s steamid."];
bool CGameNotifications_UserStatus::has_steamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CGameNotifications_UserStatus::set_has_steamid() {
  _has_bits_[0] |= 0x00000008u;
}
void CGameNotifications_UserStatus::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CGameNotifications_UserStatus::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CGameNotifications_UserStatus::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_UserStatus.steamid)
  return steamid_;
}
void CGameNotifications_UserStatus::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_UserStatus.steamid)
}

// optional string state = 2 [(.proto.steam.description) = "The user\'s state.  ready -- the user is ready to play.  waiting -- The game is waiting on an action from the user. completed, the game is over."];
bool CGameNotifications_UserStatus::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameNotifications_UserStatus::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameNotifications_UserStatus::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameNotifications_UserStatus::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_state();
}
const ::std::string& CGameNotifications_UserStatus::state() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_UserStatus.state)
  return state_.GetNoArena();
}
void CGameNotifications_UserStatus::set_state(const ::std::string& value) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_UserStatus.state)
}
#if LANG_CXX11
void CGameNotifications_UserStatus::set_state(::std::string&& value) {
  set_has_state();
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameNotifications_UserStatus.state)
}
#endif
void CGameNotifications_UserStatus::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameNotifications_UserStatus.state)
}
void CGameNotifications_UserStatus::set_state(const char* value, size_t size) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameNotifications_UserStatus.state)
}
::std::string* CGameNotifications_UserStatus::mutable_state() {
  set_has_state();
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameNotifications_UserStatus.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGameNotifications_UserStatus::release_state() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameNotifications_UserStatus.state)
  clear_has_state();
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGameNotifications_UserStatus::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    set_has_state();
  } else {
    clear_has_state();
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameNotifications_UserStatus.state)
}

// optional .proto.steam.CGameNotifications_LocalizedText title = 3 [(.proto.steam.description) = "Title of the session to display to this user in their list of active sessions."];
bool CGameNotifications_UserStatus::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGameNotifications_UserStatus::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
void CGameNotifications_UserStatus::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGameNotifications_UserStatus::clear_title() {
  if (title_ != NULL) title_->::proto::steam::CGameNotifications_LocalizedText::Clear();
  clear_has_title();
}
const ::proto::steam::CGameNotifications_LocalizedText& CGameNotifications_UserStatus::title() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_UserStatus.title)
  return title_ != NULL ? *title_
                         : *::proto::steam::CGameNotifications_LocalizedText::internal_default_instance();
}
::proto::steam::CGameNotifications_LocalizedText* CGameNotifications_UserStatus::mutable_title() {
  set_has_title();
  if (title_ == NULL) {
    title_ = new ::proto::steam::CGameNotifications_LocalizedText;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameNotifications_UserStatus.title)
  return title_;
}
::proto::steam::CGameNotifications_LocalizedText* CGameNotifications_UserStatus::release_title() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameNotifications_UserStatus.title)
  clear_has_title();
  ::proto::steam::CGameNotifications_LocalizedText* temp = title_;
  title_ = NULL;
  return temp;
}
void CGameNotifications_UserStatus::set_allocated_title(::proto::steam::CGameNotifications_LocalizedText* title) {
  delete title_;
  title_ = title;
  if (title) {
    set_has_title();
  } else {
    clear_has_title();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameNotifications_UserStatus.title)
}

// optional .proto.steam.CGameNotifications_LocalizedText message = 4 [(.proto.steam.description) = "Subtitle of the session to display to this user user within their list of active sessions."];
bool CGameNotifications_UserStatus::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGameNotifications_UserStatus::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
void CGameNotifications_UserStatus::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGameNotifications_UserStatus::clear_message() {
  if (message_ != NULL) message_->::proto::steam::CGameNotifications_LocalizedText::Clear();
  clear_has_message();
}
const ::proto::steam::CGameNotifications_LocalizedText& CGameNotifications_UserStatus::message() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_UserStatus.message)
  return message_ != NULL ? *message_
                         : *::proto::steam::CGameNotifications_LocalizedText::internal_default_instance();
}
::proto::steam::CGameNotifications_LocalizedText* CGameNotifications_UserStatus::mutable_message() {
  set_has_message();
  if (message_ == NULL) {
    message_ = new ::proto::steam::CGameNotifications_LocalizedText;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameNotifications_UserStatus.message)
  return message_;
}
::proto::steam::CGameNotifications_LocalizedText* CGameNotifications_UserStatus::release_message() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameNotifications_UserStatus.message)
  clear_has_message();
  ::proto::steam::CGameNotifications_LocalizedText* temp = message_;
  message_ = NULL;
  return temp;
}
void CGameNotifications_UserStatus::set_allocated_message(::proto::steam::CGameNotifications_LocalizedText* message) {
  delete message_;
  message_ = message;
  if (message) {
    set_has_message();
  } else {
    clear_has_message();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameNotifications_UserStatus.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_CreateSession_Request::kAppidFieldNumber;
const int CGameNotifications_CreateSession_Request::kContextFieldNumber;
const int CGameNotifications_CreateSession_Request::kTitleFieldNumber;
const int CGameNotifications_CreateSession_Request::kUsersFieldNumber;
const int CGameNotifications_CreateSession_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_CreateSession_Request::CGameNotifications_CreateSession_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameNotifications_CreateSession_Request)
}
CGameNotifications_CreateSession_Request::CGameNotifications_CreateSession_Request(const CGameNotifications_CreateSession_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_title()) {
    title_ = new ::proto::steam::CGameNotifications_LocalizedText(*from.title_);
  } else {
    title_ = NULL;
  }
  ::memcpy(&context_, &from.context_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&context_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameNotifications_CreateSession_Request)
}

void CGameNotifications_CreateSession_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&title_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&title_) + sizeof(appid_));
}

CGameNotifications_CreateSession_Request::~CGameNotifications_CreateSession_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameNotifications_CreateSession_Request)
  SharedDtor();
}

void CGameNotifications_CreateSession_Request::SharedDtor() {
  if (this != internal_default_instance()) {
    delete title_;
  }
}

void CGameNotifications_CreateSession_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameNotifications_CreateSession_Request::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_CreateSession_Request& CGameNotifications_CreateSession_Request::default_instance() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameNotifications_CreateSession_Request* CGameNotifications_CreateSession_Request::New(::google::protobuf::Arena* arena) const {
  CGameNotifications_CreateSession_Request* n = new CGameNotifications_CreateSession_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameNotifications_CreateSession_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameNotifications_CreateSession_Request)
  users_.Clear();
  if (has_title()) {
    GOOGLE_DCHECK(title_ != NULL);
    title_->::proto::steam::CGameNotifications_LocalizedText::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&context_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&context_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_CreateSession_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameNotifications_CreateSession_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "The appid to create the session for."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 context = 2 [(.proto.steam.description) = "Game-specified context value the game can used to associate the session with some object on their backend."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_context();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &context_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CGameNotifications_LocalizedText title = 3 [(.proto.steam.description) = "The title of the session to be displayed within each user\'s list of sessions."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CGameNotifications_UserStatus users = 4 [(.proto.steam.description) = "The initial state of all users in the session."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 5 [(.proto.steam.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameNotifications_CreateSession_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameNotifications_CreateSession_Request)
  return false;
#undef DO_
}

void CGameNotifications_CreateSession_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameNotifications_CreateSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "The appid to create the session for."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 context = 2 [(.proto.steam.description) = "Game-specified context value the game can used to associate the session with some object on their backend."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->context(), output);
  }

  // optional .proto.steam.CGameNotifications_LocalizedText title = 3 [(.proto.steam.description) = "The title of the session to be displayed within each user\'s list of sessions."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->title_, output);
  }

  // repeated .proto.steam.CGameNotifications_UserStatus users = 4 [(.proto.steam.description) = "The initial state of all users in the session."];
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->users(i), output);
  }

  // optional fixed64 steamid = 5 [(.proto.steam.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameNotifications_CreateSession_Request)
}

::google::protobuf::uint8* CGameNotifications_CreateSession_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameNotifications_CreateSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "The appid to create the session for."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 context = 2 [(.proto.steam.description) = "Game-specified context value the game can used to associate the session with some object on their backend."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->context(), target);
  }

  // optional .proto.steam.CGameNotifications_LocalizedText title = 3 [(.proto.steam.description) = "The title of the session to be displayed within each user\'s list of sessions."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->title_, deterministic, target);
  }

  // repeated .proto.steam.CGameNotifications_UserStatus users = 4 [(.proto.steam.description) = "The initial state of all users in the session."];
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->users(i), deterministic, target);
  }

  // optional fixed64 steamid = 5 [(.proto.steam.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameNotifications_CreateSession_Request)
  return target;
}

size_t CGameNotifications_CreateSession_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameNotifications_CreateSession_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CGameNotifications_UserStatus users = 4 [(.proto.steam.description) = "The initial state of all users in the session."];
  {
    unsigned int count = this->users_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->users(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.steam.CGameNotifications_LocalizedText title = 3 [(.proto.steam.description) = "The title of the session to be displayed within each user\'s list of sessions."];
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->title_);
    }

    // optional uint64 context = 2 [(.proto.steam.description) = "Game-specified context value the game can used to associate the session with some object on their backend."];
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->context());
    }

    // optional fixed64 steamid = 5 [(.proto.steam.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."];
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 1 [(.proto.steam.description) = "The appid to create the session for."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameNotifications_CreateSession_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameNotifications_CreateSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_CreateSession_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_CreateSession_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameNotifications_CreateSession_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameNotifications_CreateSession_Request)
    MergeFrom(*source);
  }
}

void CGameNotifications_CreateSession_Request::MergeFrom(const CGameNotifications_CreateSession_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameNotifications_CreateSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_title()->::proto::steam::CGameNotifications_LocalizedText::MergeFrom(from.title());
    }
    if (cached_has_bits & 0x00000002u) {
      context_ = from.context_;
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameNotifications_CreateSession_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameNotifications_CreateSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_CreateSession_Request::CopyFrom(const CGameNotifications_CreateSession_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameNotifications_CreateSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_CreateSession_Request::IsInitialized() const {
  return true;
}

void CGameNotifications_CreateSession_Request::Swap(CGameNotifications_CreateSession_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_CreateSession_Request::InternalSwap(CGameNotifications_CreateSession_Request* other) {
  users_.InternalSwap(&other->users_);
  std::swap(title_, other->title_);
  std::swap(context_, other->context_);
  std::swap(steamid_, other->steamid_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameNotifications_CreateSession_Request::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameNotifications_CreateSession_Request

// optional uint32 appid = 1 [(.proto.steam.description) = "The appid to create the session for."];
bool CGameNotifications_CreateSession_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CGameNotifications_CreateSession_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
void CGameNotifications_CreateSession_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CGameNotifications_CreateSession_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CGameNotifications_CreateSession_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_CreateSession_Request.appid)
  return appid_;
}
void CGameNotifications_CreateSession_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_CreateSession_Request.appid)
}

// optional uint64 context = 2 [(.proto.steam.description) = "Game-specified context value the game can used to associate the session with some object on their backend."];
bool CGameNotifications_CreateSession_Request::has_context() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGameNotifications_CreateSession_Request::set_has_context() {
  _has_bits_[0] |= 0x00000002u;
}
void CGameNotifications_CreateSession_Request::clear_has_context() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGameNotifications_CreateSession_Request::clear_context() {
  context_ = GOOGLE_ULONGLONG(0);
  clear_has_context();
}
::google::protobuf::uint64 CGameNotifications_CreateSession_Request::context() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_CreateSession_Request.context)
  return context_;
}
void CGameNotifications_CreateSession_Request::set_context(::google::protobuf::uint64 value) {
  set_has_context();
  context_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_CreateSession_Request.context)
}

// optional .proto.steam.CGameNotifications_LocalizedText title = 3 [(.proto.steam.description) = "The title of the session to be displayed within each user\'s list of sessions."];
bool CGameNotifications_CreateSession_Request::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameNotifications_CreateSession_Request::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameNotifications_CreateSession_Request::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameNotifications_CreateSession_Request::clear_title() {
  if (title_ != NULL) title_->::proto::steam::CGameNotifications_LocalizedText::Clear();
  clear_has_title();
}
const ::proto::steam::CGameNotifications_LocalizedText& CGameNotifications_CreateSession_Request::title() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_CreateSession_Request.title)
  return title_ != NULL ? *title_
                         : *::proto::steam::CGameNotifications_LocalizedText::internal_default_instance();
}
::proto::steam::CGameNotifications_LocalizedText* CGameNotifications_CreateSession_Request::mutable_title() {
  set_has_title();
  if (title_ == NULL) {
    title_ = new ::proto::steam::CGameNotifications_LocalizedText;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameNotifications_CreateSession_Request.title)
  return title_;
}
::proto::steam::CGameNotifications_LocalizedText* CGameNotifications_CreateSession_Request::release_title() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameNotifications_CreateSession_Request.title)
  clear_has_title();
  ::proto::steam::CGameNotifications_LocalizedText* temp = title_;
  title_ = NULL;
  return temp;
}
void CGameNotifications_CreateSession_Request::set_allocated_title(::proto::steam::CGameNotifications_LocalizedText* title) {
  delete title_;
  title_ = title;
  if (title) {
    set_has_title();
  } else {
    clear_has_title();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameNotifications_CreateSession_Request.title)
}

// repeated .proto.steam.CGameNotifications_UserStatus users = 4 [(.proto.steam.description) = "The initial state of all users in the session."];
int CGameNotifications_CreateSession_Request::users_size() const {
  return users_.size();
}
void CGameNotifications_CreateSession_Request::clear_users() {
  users_.Clear();
}
const ::proto::steam::CGameNotifications_UserStatus& CGameNotifications_CreateSession_Request::users(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_CreateSession_Request.users)
  return users_.Get(index);
}
::proto::steam::CGameNotifications_UserStatus* CGameNotifications_CreateSession_Request::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameNotifications_CreateSession_Request.users)
  return users_.Mutable(index);
}
::proto::steam::CGameNotifications_UserStatus* CGameNotifications_CreateSession_Request::add_users() {
  // @@protoc_insertion_point(field_add:proto.steam.CGameNotifications_CreateSession_Request.users)
  return users_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CGameNotifications_UserStatus >*
CGameNotifications_CreateSession_Request::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CGameNotifications_CreateSession_Request.users)
  return &users_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CGameNotifications_UserStatus >&
CGameNotifications_CreateSession_Request::users() const {
  // @@protoc_insertion_point(field_list:proto.steam.CGameNotifications_CreateSession_Request.users)
  return users_;
}

// optional fixed64 steamid = 5 [(.proto.steam.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."];
bool CGameNotifications_CreateSession_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGameNotifications_CreateSession_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000004u;
}
void CGameNotifications_CreateSession_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGameNotifications_CreateSession_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CGameNotifications_CreateSession_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_CreateSession_Request.steamid)
  return steamid_;
}
void CGameNotifications_CreateSession_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_CreateSession_Request.steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_CreateSession_Response::kSessionidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_CreateSession_Response::CGameNotifications_CreateSession_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameNotifications_CreateSession_Response)
}
CGameNotifications_CreateSession_Response::CGameNotifications_CreateSession_Response(const CGameNotifications_CreateSession_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_ = from.sessionid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameNotifications_CreateSession_Response)
}

void CGameNotifications_CreateSession_Response::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = GOOGLE_ULONGLONG(0);
}

CGameNotifications_CreateSession_Response::~CGameNotifications_CreateSession_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameNotifications_CreateSession_Response)
  SharedDtor();
}

void CGameNotifications_CreateSession_Response::SharedDtor() {
}

void CGameNotifications_CreateSession_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameNotifications_CreateSession_Response::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_CreateSession_Response& CGameNotifications_CreateSession_Response::default_instance() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameNotifications_CreateSession_Response* CGameNotifications_CreateSession_Response::New(::google::protobuf::Arena* arena) const {
  CGameNotifications_CreateSession_Response* n = new CGameNotifications_CreateSession_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameNotifications_CreateSession_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameNotifications_CreateSession_Response)
  sessionid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_CreateSession_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameNotifications_CreateSession_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid of the created session."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameNotifications_CreateSession_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameNotifications_CreateSession_Response)
  return false;
#undef DO_
}

void CGameNotifications_CreateSession_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameNotifications_CreateSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid of the created session."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameNotifications_CreateSession_Response)
}

::google::protobuf::uint8* CGameNotifications_CreateSession_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameNotifications_CreateSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid of the created session."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sessionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameNotifications_CreateSession_Response)
  return target;
}

size_t CGameNotifications_CreateSession_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameNotifications_CreateSession_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid of the created session."];
  if (has_sessionid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sessionid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameNotifications_CreateSession_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameNotifications_CreateSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_CreateSession_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_CreateSession_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameNotifications_CreateSession_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameNotifications_CreateSession_Response)
    MergeFrom(*source);
  }
}

void CGameNotifications_CreateSession_Response::MergeFrom(const CGameNotifications_CreateSession_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameNotifications_CreateSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sessionid()) {
    set_sessionid(from.sessionid());
  }
}

void CGameNotifications_CreateSession_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameNotifications_CreateSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_CreateSession_Response::CopyFrom(const CGameNotifications_CreateSession_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameNotifications_CreateSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_CreateSession_Response::IsInitialized() const {
  return true;
}

void CGameNotifications_CreateSession_Response::Swap(CGameNotifications_CreateSession_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_CreateSession_Response::InternalSwap(CGameNotifications_CreateSession_Response* other) {
  std::swap(sessionid_, other->sessionid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameNotifications_CreateSession_Response::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameNotifications_CreateSession_Response

// optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid of the created session."];
bool CGameNotifications_CreateSession_Response::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameNotifications_CreateSession_Response::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameNotifications_CreateSession_Response::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameNotifications_CreateSession_Response::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
::google::protobuf::uint64 CGameNotifications_CreateSession_Response::sessionid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_CreateSession_Response.sessionid)
  return sessionid_;
}
void CGameNotifications_CreateSession_Response::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_CreateSession_Response.sessionid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_DeleteSession_Request::kSessionidFieldNumber;
const int CGameNotifications_DeleteSession_Request::kAppidFieldNumber;
const int CGameNotifications_DeleteSession_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_DeleteSession_Request::CGameNotifications_DeleteSession_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameNotifications_DeleteSession_Request)
}
CGameNotifications_DeleteSession_Request::CGameNotifications_DeleteSession_Request(const CGameNotifications_DeleteSession_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sessionid_, &from.sessionid_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&sessionid_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameNotifications_DeleteSession_Request)
}

void CGameNotifications_DeleteSession_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sessionid_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&sessionid_) + sizeof(appid_));
}

CGameNotifications_DeleteSession_Request::~CGameNotifications_DeleteSession_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameNotifications_DeleteSession_Request)
  SharedDtor();
}

void CGameNotifications_DeleteSession_Request::SharedDtor() {
}

void CGameNotifications_DeleteSession_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameNotifications_DeleteSession_Request::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_DeleteSession_Request& CGameNotifications_DeleteSession_Request::default_instance() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameNotifications_DeleteSession_Request* CGameNotifications_DeleteSession_Request::New(::google::protobuf::Arena* arena) const {
  CGameNotifications_DeleteSession_Request* n = new CGameNotifications_DeleteSession_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameNotifications_DeleteSession_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameNotifications_DeleteSession_Request)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&sessionid_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&sessionid_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_DeleteSession_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameNotifications_DeleteSession_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid to delete."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2 [(.proto.steam.description) = "The appid of the session to delete."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 3 [(.proto.steam.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameNotifications_DeleteSession_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameNotifications_DeleteSession_Request)
  return false;
#undef DO_
}

void CGameNotifications_DeleteSession_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameNotifications_DeleteSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid to delete."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "The appid of the session to delete."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional fixed64 steamid = 3 [(.proto.steam.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameNotifications_DeleteSession_Request)
}

::google::protobuf::uint8* CGameNotifications_DeleteSession_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameNotifications_DeleteSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid to delete."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sessionid(), target);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "The appid of the session to delete."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional fixed64 steamid = 3 [(.proto.steam.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameNotifications_DeleteSession_Request)
  return target;
}

size_t CGameNotifications_DeleteSession_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameNotifications_DeleteSession_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid to delete."];
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

    // optional fixed64 steamid = 3 [(.proto.steam.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session."];
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2 [(.proto.steam.description) = "The appid of the session to delete."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameNotifications_DeleteSession_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameNotifications_DeleteSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_DeleteSession_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_DeleteSession_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameNotifications_DeleteSession_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameNotifications_DeleteSession_Request)
    MergeFrom(*source);
  }
}

void CGameNotifications_DeleteSession_Request::MergeFrom(const CGameNotifications_DeleteSession_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameNotifications_DeleteSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameNotifications_DeleteSession_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameNotifications_DeleteSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_DeleteSession_Request::CopyFrom(const CGameNotifications_DeleteSession_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameNotifications_DeleteSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_DeleteSession_Request::IsInitialized() const {
  return true;
}

void CGameNotifications_DeleteSession_Request::Swap(CGameNotifications_DeleteSession_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_DeleteSession_Request::InternalSwap(CGameNotifications_DeleteSession_Request* other) {
  std::swap(sessionid_, other->sessionid_);
  std::swap(steamid_, other->steamid_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameNotifications_DeleteSession_Request::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameNotifications_DeleteSession_Request

// optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid to delete."];
bool CGameNotifications_DeleteSession_Request::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameNotifications_DeleteSession_Request::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameNotifications_DeleteSession_Request::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameNotifications_DeleteSession_Request::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
::google::protobuf::uint64 CGameNotifications_DeleteSession_Request::sessionid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_DeleteSession_Request.sessionid)
  return sessionid_;
}
void CGameNotifications_DeleteSession_Request::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_DeleteSession_Request.sessionid)
}

// optional uint32 appid = 2 [(.proto.steam.description) = "The appid of the session to delete."];
bool CGameNotifications_DeleteSession_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGameNotifications_DeleteSession_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
void CGameNotifications_DeleteSession_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGameNotifications_DeleteSession_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CGameNotifications_DeleteSession_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_DeleteSession_Request.appid)
  return appid_;
}
void CGameNotifications_DeleteSession_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_DeleteSession_Request.appid)
}

// optional fixed64 steamid = 3 [(.proto.steam.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session."];
bool CGameNotifications_DeleteSession_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGameNotifications_DeleteSession_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
void CGameNotifications_DeleteSession_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGameNotifications_DeleteSession_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CGameNotifications_DeleteSession_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_DeleteSession_Request.steamid)
  return steamid_;
}
void CGameNotifications_DeleteSession_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_DeleteSession_Request.steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_DeleteSession_Response::CGameNotifications_DeleteSession_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameNotifications_DeleteSession_Response)
}
CGameNotifications_DeleteSession_Response::CGameNotifications_DeleteSession_Response(const CGameNotifications_DeleteSession_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameNotifications_DeleteSession_Response)
}

void CGameNotifications_DeleteSession_Response::SharedCtor() {
  _cached_size_ = 0;
}

CGameNotifications_DeleteSession_Response::~CGameNotifications_DeleteSession_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameNotifications_DeleteSession_Response)
  SharedDtor();
}

void CGameNotifications_DeleteSession_Response::SharedDtor() {
}

void CGameNotifications_DeleteSession_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameNotifications_DeleteSession_Response::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_DeleteSession_Response& CGameNotifications_DeleteSession_Response::default_instance() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameNotifications_DeleteSession_Response* CGameNotifications_DeleteSession_Response::New(::google::protobuf::Arena* arena) const {
  CGameNotifications_DeleteSession_Response* n = new CGameNotifications_DeleteSession_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameNotifications_DeleteSession_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameNotifications_DeleteSession_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_DeleteSession_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameNotifications_DeleteSession_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameNotifications_DeleteSession_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameNotifications_DeleteSession_Response)
  return false;
#undef DO_
}

void CGameNotifications_DeleteSession_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameNotifications_DeleteSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameNotifications_DeleteSession_Response)
}

::google::protobuf::uint8* CGameNotifications_DeleteSession_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameNotifications_DeleteSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameNotifications_DeleteSession_Response)
  return target;
}

size_t CGameNotifications_DeleteSession_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameNotifications_DeleteSession_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameNotifications_DeleteSession_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameNotifications_DeleteSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_DeleteSession_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_DeleteSession_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameNotifications_DeleteSession_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameNotifications_DeleteSession_Response)
    MergeFrom(*source);
  }
}

void CGameNotifications_DeleteSession_Response::MergeFrom(const CGameNotifications_DeleteSession_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameNotifications_DeleteSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameNotifications_DeleteSession_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameNotifications_DeleteSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_DeleteSession_Response::CopyFrom(const CGameNotifications_DeleteSession_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameNotifications_DeleteSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_DeleteSession_Response::IsInitialized() const {
  return true;
}

void CGameNotifications_DeleteSession_Response::Swap(CGameNotifications_DeleteSession_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_DeleteSession_Response::InternalSwap(CGameNotifications_DeleteSession_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameNotifications_DeleteSession_Response::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameNotifications_DeleteSession_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_UpdateSession_Request::kSessionidFieldNumber;
const int CGameNotifications_UpdateSession_Request::kAppidFieldNumber;
const int CGameNotifications_UpdateSession_Request::kTitleFieldNumber;
const int CGameNotifications_UpdateSession_Request::kUsersFieldNumber;
const int CGameNotifications_UpdateSession_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_UpdateSession_Request::CGameNotifications_UpdateSession_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameNotifications_UpdateSession_Request)
}
CGameNotifications_UpdateSession_Request::CGameNotifications_UpdateSession_Request(const CGameNotifications_UpdateSession_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_title()) {
    title_ = new ::proto::steam::CGameNotifications_LocalizedText(*from.title_);
  } else {
    title_ = NULL;
  }
  ::memcpy(&sessionid_, &from.sessionid_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&sessionid_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameNotifications_UpdateSession_Request)
}

void CGameNotifications_UpdateSession_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&title_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&title_) + sizeof(appid_));
}

CGameNotifications_UpdateSession_Request::~CGameNotifications_UpdateSession_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameNotifications_UpdateSession_Request)
  SharedDtor();
}

void CGameNotifications_UpdateSession_Request::SharedDtor() {
  if (this != internal_default_instance()) {
    delete title_;
  }
}

void CGameNotifications_UpdateSession_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameNotifications_UpdateSession_Request::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_UpdateSession_Request& CGameNotifications_UpdateSession_Request::default_instance() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameNotifications_UpdateSession_Request* CGameNotifications_UpdateSession_Request::New(::google::protobuf::Arena* arena) const {
  CGameNotifications_UpdateSession_Request* n = new CGameNotifications_UpdateSession_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameNotifications_UpdateSession_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameNotifications_UpdateSession_Request)
  users_.Clear();
  if (has_title()) {
    GOOGLE_DCHECK(title_ != NULL);
    title_->::proto::steam::CGameNotifications_LocalizedText::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&sessionid_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&sessionid_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_UpdateSession_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameNotifications_UpdateSession_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid to update."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2 [(.proto.steam.description) = "The appid of the session to update."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CGameNotifications_LocalizedText title = 3 [(.proto.steam.description) = "(Optional) The new title of the session.  If not specified, the title will not be changed."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CGameNotifications_UserStatus users = 4 [(.proto.steam.description) = "(Optional) A list of users whose state will be updated to reflect the given state. If the users are not already in the session, they will be added to it."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 6 [(.proto.steam.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameNotifications_UpdateSession_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameNotifications_UpdateSession_Request)
  return false;
#undef DO_
}

void CGameNotifications_UpdateSession_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameNotifications_UpdateSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid to update."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "The appid of the session to update."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional .proto.steam.CGameNotifications_LocalizedText title = 3 [(.proto.steam.description) = "(Optional) The new title of the session.  If not specified, the title will not be changed."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->title_, output);
  }

  // repeated .proto.steam.CGameNotifications_UserStatus users = 4 [(.proto.steam.description) = "(Optional) A list of users whose state will be updated to reflect the given state. If the users are not already in the session, they will be added to it."];
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->users(i), output);
  }

  // optional fixed64 steamid = 6 [(.proto.steam.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameNotifications_UpdateSession_Request)
}

::google::protobuf::uint8* CGameNotifications_UpdateSession_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameNotifications_UpdateSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid to update."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sessionid(), target);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "The appid of the session to update."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional .proto.steam.CGameNotifications_LocalizedText title = 3 [(.proto.steam.description) = "(Optional) The new title of the session.  If not specified, the title will not be changed."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->title_, deterministic, target);
  }

  // repeated .proto.steam.CGameNotifications_UserStatus users = 4 [(.proto.steam.description) = "(Optional) A list of users whose state will be updated to reflect the given state. If the users are not already in the session, they will be added to it."];
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->users(i), deterministic, target);
  }

  // optional fixed64 steamid = 6 [(.proto.steam.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameNotifications_UpdateSession_Request)
  return target;
}

size_t CGameNotifications_UpdateSession_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameNotifications_UpdateSession_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CGameNotifications_UserStatus users = 4 [(.proto.steam.description) = "(Optional) A list of users whose state will be updated to reflect the given state. If the users are not already in the session, they will be added to it."];
  {
    unsigned int count = this->users_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->users(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.steam.CGameNotifications_LocalizedText title = 3 [(.proto.steam.description) = "(Optional) The new title of the session.  If not specified, the title will not be changed."];
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->title_);
    }

    // optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid to update."];
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

    // optional fixed64 steamid = 6 [(.proto.steam.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."];
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2 [(.proto.steam.description) = "The appid of the session to update."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameNotifications_UpdateSession_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameNotifications_UpdateSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_UpdateSession_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_UpdateSession_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameNotifications_UpdateSession_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameNotifications_UpdateSession_Request)
    MergeFrom(*source);
  }
}

void CGameNotifications_UpdateSession_Request::MergeFrom(const CGameNotifications_UpdateSession_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameNotifications_UpdateSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_title()->::proto::steam::CGameNotifications_LocalizedText::MergeFrom(from.title());
    }
    if (cached_has_bits & 0x00000002u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameNotifications_UpdateSession_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameNotifications_UpdateSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_UpdateSession_Request::CopyFrom(const CGameNotifications_UpdateSession_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameNotifications_UpdateSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_UpdateSession_Request::IsInitialized() const {
  return true;
}

void CGameNotifications_UpdateSession_Request::Swap(CGameNotifications_UpdateSession_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_UpdateSession_Request::InternalSwap(CGameNotifications_UpdateSession_Request* other) {
  users_.InternalSwap(&other->users_);
  std::swap(title_, other->title_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(steamid_, other->steamid_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameNotifications_UpdateSession_Request::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameNotifications_UpdateSession_Request

// optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid to update."];
bool CGameNotifications_UpdateSession_Request::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGameNotifications_UpdateSession_Request::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void CGameNotifications_UpdateSession_Request::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGameNotifications_UpdateSession_Request::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
::google::protobuf::uint64 CGameNotifications_UpdateSession_Request::sessionid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_UpdateSession_Request.sessionid)
  return sessionid_;
}
void CGameNotifications_UpdateSession_Request::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_UpdateSession_Request.sessionid)
}

// optional uint32 appid = 2 [(.proto.steam.description) = "The appid of the session to update."];
bool CGameNotifications_UpdateSession_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CGameNotifications_UpdateSession_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
void CGameNotifications_UpdateSession_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CGameNotifications_UpdateSession_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CGameNotifications_UpdateSession_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_UpdateSession_Request.appid)
  return appid_;
}
void CGameNotifications_UpdateSession_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_UpdateSession_Request.appid)
}

// optional .proto.steam.CGameNotifications_LocalizedText title = 3 [(.proto.steam.description) = "(Optional) The new title of the session.  If not specified, the title will not be changed."];
bool CGameNotifications_UpdateSession_Request::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameNotifications_UpdateSession_Request::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameNotifications_UpdateSession_Request::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameNotifications_UpdateSession_Request::clear_title() {
  if (title_ != NULL) title_->::proto::steam::CGameNotifications_LocalizedText::Clear();
  clear_has_title();
}
const ::proto::steam::CGameNotifications_LocalizedText& CGameNotifications_UpdateSession_Request::title() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_UpdateSession_Request.title)
  return title_ != NULL ? *title_
                         : *::proto::steam::CGameNotifications_LocalizedText::internal_default_instance();
}
::proto::steam::CGameNotifications_LocalizedText* CGameNotifications_UpdateSession_Request::mutable_title() {
  set_has_title();
  if (title_ == NULL) {
    title_ = new ::proto::steam::CGameNotifications_LocalizedText;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameNotifications_UpdateSession_Request.title)
  return title_;
}
::proto::steam::CGameNotifications_LocalizedText* CGameNotifications_UpdateSession_Request::release_title() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameNotifications_UpdateSession_Request.title)
  clear_has_title();
  ::proto::steam::CGameNotifications_LocalizedText* temp = title_;
  title_ = NULL;
  return temp;
}
void CGameNotifications_UpdateSession_Request::set_allocated_title(::proto::steam::CGameNotifications_LocalizedText* title) {
  delete title_;
  title_ = title;
  if (title) {
    set_has_title();
  } else {
    clear_has_title();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameNotifications_UpdateSession_Request.title)
}

// repeated .proto.steam.CGameNotifications_UserStatus users = 4 [(.proto.steam.description) = "(Optional) A list of users whose state will be updated to reflect the given state. If the users are not already in the session, they will be added to it."];
int CGameNotifications_UpdateSession_Request::users_size() const {
  return users_.size();
}
void CGameNotifications_UpdateSession_Request::clear_users() {
  users_.Clear();
}
const ::proto::steam::CGameNotifications_UserStatus& CGameNotifications_UpdateSession_Request::users(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_UpdateSession_Request.users)
  return users_.Get(index);
}
::proto::steam::CGameNotifications_UserStatus* CGameNotifications_UpdateSession_Request::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameNotifications_UpdateSession_Request.users)
  return users_.Mutable(index);
}
::proto::steam::CGameNotifications_UserStatus* CGameNotifications_UpdateSession_Request::add_users() {
  // @@protoc_insertion_point(field_add:proto.steam.CGameNotifications_UpdateSession_Request.users)
  return users_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CGameNotifications_UserStatus >*
CGameNotifications_UpdateSession_Request::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CGameNotifications_UpdateSession_Request.users)
  return &users_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CGameNotifications_UserStatus >&
CGameNotifications_UpdateSession_Request::users() const {
  // @@protoc_insertion_point(field_list:proto.steam.CGameNotifications_UpdateSession_Request.users)
  return users_;
}

// optional fixed64 steamid = 6 [(.proto.steam.description) = "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."];
bool CGameNotifications_UpdateSession_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGameNotifications_UpdateSession_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000004u;
}
void CGameNotifications_UpdateSession_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGameNotifications_UpdateSession_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CGameNotifications_UpdateSession_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_UpdateSession_Request.steamid)
  return steamid_;
}
void CGameNotifications_UpdateSession_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_UpdateSession_Request.steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_UpdateSession_Response::CGameNotifications_UpdateSession_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameNotifications_UpdateSession_Response)
}
CGameNotifications_UpdateSession_Response::CGameNotifications_UpdateSession_Response(const CGameNotifications_UpdateSession_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameNotifications_UpdateSession_Response)
}

void CGameNotifications_UpdateSession_Response::SharedCtor() {
  _cached_size_ = 0;
}

CGameNotifications_UpdateSession_Response::~CGameNotifications_UpdateSession_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameNotifications_UpdateSession_Response)
  SharedDtor();
}

void CGameNotifications_UpdateSession_Response::SharedDtor() {
}

void CGameNotifications_UpdateSession_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameNotifications_UpdateSession_Response::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_UpdateSession_Response& CGameNotifications_UpdateSession_Response::default_instance() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameNotifications_UpdateSession_Response* CGameNotifications_UpdateSession_Response::New(::google::protobuf::Arena* arena) const {
  CGameNotifications_UpdateSession_Response* n = new CGameNotifications_UpdateSession_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameNotifications_UpdateSession_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameNotifications_UpdateSession_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_UpdateSession_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameNotifications_UpdateSession_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameNotifications_UpdateSession_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameNotifications_UpdateSession_Response)
  return false;
#undef DO_
}

void CGameNotifications_UpdateSession_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameNotifications_UpdateSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameNotifications_UpdateSession_Response)
}

::google::protobuf::uint8* CGameNotifications_UpdateSession_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameNotifications_UpdateSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameNotifications_UpdateSession_Response)
  return target;
}

size_t CGameNotifications_UpdateSession_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameNotifications_UpdateSession_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameNotifications_UpdateSession_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameNotifications_UpdateSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_UpdateSession_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_UpdateSession_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameNotifications_UpdateSession_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameNotifications_UpdateSession_Response)
    MergeFrom(*source);
  }
}

void CGameNotifications_UpdateSession_Response::MergeFrom(const CGameNotifications_UpdateSession_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameNotifications_UpdateSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameNotifications_UpdateSession_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameNotifications_UpdateSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_UpdateSession_Response::CopyFrom(const CGameNotifications_UpdateSession_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameNotifications_UpdateSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_UpdateSession_Response::IsInitialized() const {
  return true;
}

void CGameNotifications_UpdateSession_Response::Swap(CGameNotifications_UpdateSession_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_UpdateSession_Response::InternalSwap(CGameNotifications_UpdateSession_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameNotifications_UpdateSession_Response::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameNotifications_UpdateSession_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_EnumerateSessions_Request::kAppidFieldNumber;
const int CGameNotifications_EnumerateSessions_Request::kIncludeAllUserMessagesFieldNumber;
const int CGameNotifications_EnumerateSessions_Request::kIncludeAuthUserMessageFieldNumber;
const int CGameNotifications_EnumerateSessions_Request::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_EnumerateSessions_Request::CGameNotifications_EnumerateSessions_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameNotifications_EnumerateSessions_Request)
}
CGameNotifications_EnumerateSessions_Request::CGameNotifications_EnumerateSessions_Request(const CGameNotifications_EnumerateSessions_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&include_auth_user_message_) -
    reinterpret_cast<char*>(&appid_) + sizeof(include_auth_user_message_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameNotifications_EnumerateSessions_Request)
}

void CGameNotifications_EnumerateSessions_Request::SharedCtor() {
  _cached_size_ = 0;
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, reinterpret_cast<char*>(&include_auth_user_message_) -
    reinterpret_cast<char*>(&appid_) + sizeof(include_auth_user_message_));
}

CGameNotifications_EnumerateSessions_Request::~CGameNotifications_EnumerateSessions_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameNotifications_EnumerateSessions_Request)
  SharedDtor();
}

void CGameNotifications_EnumerateSessions_Request::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGameNotifications_EnumerateSessions_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameNotifications_EnumerateSessions_Request::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_EnumerateSessions_Request& CGameNotifications_EnumerateSessions_Request::default_instance() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameNotifications_EnumerateSessions_Request* CGameNotifications_EnumerateSessions_Request::New(::google::protobuf::Arena* arena) const {
  CGameNotifications_EnumerateSessions_Request* n = new CGameNotifications_EnumerateSessions_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameNotifications_EnumerateSessions_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameNotifications_EnumerateSessions_Request)
  if (has_language()) {
    GOOGLE_DCHECK(!language_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*language_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&include_auth_user_message_) -
      reinterpret_cast<char*>(&appid_) + sizeof(include_auth_user_message_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_EnumerateSessions_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameNotifications_EnumerateSessions_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "The sessionid to request details for. Optional. If not specified, all the user\'s sessions will be returned."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_all_user_messages = 3 [(.proto.steam.description) = "(Optional) Boolean determining whether the message for all users should be included. Defaults to false."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_include_all_user_messages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_all_user_messages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_auth_user_message = 4 [(.proto.steam.description) = "(Optional) Boolean determining whether the message for the authenticated user should be included. Defaults to false."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_include_auth_user_message();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_auth_user_message_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string language = 5 [(.proto.steam.description) = "(Optional) Language to localize the text in."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameNotifications_EnumerateSessions_Request.language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameNotifications_EnumerateSessions_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameNotifications_EnumerateSessions_Request)
  return false;
#undef DO_
}

void CGameNotifications_EnumerateSessions_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameNotifications_EnumerateSessions_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "The sessionid to request details for. Optional. If not specified, all the user\'s sessions will be returned."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional bool include_all_user_messages = 3 [(.proto.steam.description) = "(Optional) Boolean determining whether the message for all users should be included. Defaults to false."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->include_all_user_messages(), output);
  }

  // optional bool include_auth_user_message = 4 [(.proto.steam.description) = "(Optional) Boolean determining whether the message for the authenticated user should be included. Defaults to false."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->include_auth_user_message(), output);
  }

  // optional string language = 5 [(.proto.steam.description) = "(Optional) Language to localize the text in."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameNotifications_EnumerateSessions_Request.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->language(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameNotifications_EnumerateSessions_Request)
}

::google::protobuf::uint8* CGameNotifications_EnumerateSessions_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameNotifications_EnumerateSessions_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "The sessionid to request details for. Optional. If not specified, all the user\'s sessions will be returned."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional bool include_all_user_messages = 3 [(.proto.steam.description) = "(Optional) Boolean determining whether the message for all users should be included. Defaults to false."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->include_all_user_messages(), target);
  }

  // optional bool include_auth_user_message = 4 [(.proto.steam.description) = "(Optional) Boolean determining whether the message for the authenticated user should be included. Defaults to false."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->include_auth_user_message(), target);
  }

  // optional string language = 5 [(.proto.steam.description) = "(Optional) Language to localize the text in."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameNotifications_EnumerateSessions_Request.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->language(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameNotifications_EnumerateSessions_Request)
  return target;
}

size_t CGameNotifications_EnumerateSessions_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameNotifications_EnumerateSessions_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string language = 5 [(.proto.steam.description) = "(Optional) Language to localize the text in."];
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional uint32 appid = 1 [(.proto.steam.description) = "The sessionid to request details for. Optional. If not specified, all the user\'s sessions will be returned."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool include_all_user_messages = 3 [(.proto.steam.description) = "(Optional) Boolean determining whether the message for all users should be included. Defaults to false."];
    if (has_include_all_user_messages()) {
      total_size += 1 + 1;
    }

    // optional bool include_auth_user_message = 4 [(.proto.steam.description) = "(Optional) Boolean determining whether the message for the authenticated user should be included. Defaults to false."];
    if (has_include_auth_user_message()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameNotifications_EnumerateSessions_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameNotifications_EnumerateSessions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_EnumerateSessions_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_EnumerateSessions_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameNotifications_EnumerateSessions_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameNotifications_EnumerateSessions_Request)
    MergeFrom(*source);
  }
}

void CGameNotifications_EnumerateSessions_Request::MergeFrom(const CGameNotifications_EnumerateSessions_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameNotifications_EnumerateSessions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_language();
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      include_all_user_messages_ = from.include_all_user_messages_;
    }
    if (cached_has_bits & 0x00000008u) {
      include_auth_user_message_ = from.include_auth_user_message_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameNotifications_EnumerateSessions_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameNotifications_EnumerateSessions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_EnumerateSessions_Request::CopyFrom(const CGameNotifications_EnumerateSessions_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameNotifications_EnumerateSessions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_EnumerateSessions_Request::IsInitialized() const {
  return true;
}

void CGameNotifications_EnumerateSessions_Request::Swap(CGameNotifications_EnumerateSessions_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_EnumerateSessions_Request::InternalSwap(CGameNotifications_EnumerateSessions_Request* other) {
  language_.Swap(&other->language_);
  std::swap(appid_, other->appid_);
  std::swap(include_all_user_messages_, other->include_all_user_messages_);
  std::swap(include_auth_user_message_, other->include_auth_user_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameNotifications_EnumerateSessions_Request::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameNotifications_EnumerateSessions_Request

// optional uint32 appid = 1 [(.proto.steam.description) = "The sessionid to request details for. Optional. If not specified, all the user\'s sessions will be returned."];
bool CGameNotifications_EnumerateSessions_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGameNotifications_EnumerateSessions_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CGameNotifications_EnumerateSessions_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGameNotifications_EnumerateSessions_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CGameNotifications_EnumerateSessions_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_EnumerateSessions_Request.appid)
  return appid_;
}
void CGameNotifications_EnumerateSessions_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_EnumerateSessions_Request.appid)
}

// optional bool include_all_user_messages = 3 [(.proto.steam.description) = "(Optional) Boolean determining whether the message for all users should be included. Defaults to false."];
bool CGameNotifications_EnumerateSessions_Request::has_include_all_user_messages() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGameNotifications_EnumerateSessions_Request::set_has_include_all_user_messages() {
  _has_bits_[0] |= 0x00000004u;
}
void CGameNotifications_EnumerateSessions_Request::clear_has_include_all_user_messages() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGameNotifications_EnumerateSessions_Request::clear_include_all_user_messages() {
  include_all_user_messages_ = false;
  clear_has_include_all_user_messages();
}
bool CGameNotifications_EnumerateSessions_Request::include_all_user_messages() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_EnumerateSessions_Request.include_all_user_messages)
  return include_all_user_messages_;
}
void CGameNotifications_EnumerateSessions_Request::set_include_all_user_messages(bool value) {
  set_has_include_all_user_messages();
  include_all_user_messages_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_EnumerateSessions_Request.include_all_user_messages)
}

// optional bool include_auth_user_message = 4 [(.proto.steam.description) = "(Optional) Boolean determining whether the message for the authenticated user should be included. Defaults to false."];
bool CGameNotifications_EnumerateSessions_Request::has_include_auth_user_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CGameNotifications_EnumerateSessions_Request::set_has_include_auth_user_message() {
  _has_bits_[0] |= 0x00000008u;
}
void CGameNotifications_EnumerateSessions_Request::clear_has_include_auth_user_message() {
  _has_bits_[0] &= ~0x00000008u;
}
void CGameNotifications_EnumerateSessions_Request::clear_include_auth_user_message() {
  include_auth_user_message_ = false;
  clear_has_include_auth_user_message();
}
bool CGameNotifications_EnumerateSessions_Request::include_auth_user_message() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_EnumerateSessions_Request.include_auth_user_message)
  return include_auth_user_message_;
}
void CGameNotifications_EnumerateSessions_Request::set_include_auth_user_message(bool value) {
  set_has_include_auth_user_message();
  include_auth_user_message_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_EnumerateSessions_Request.include_auth_user_message)
}

// optional string language = 5 [(.proto.steam.description) = "(Optional) Language to localize the text in."];
bool CGameNotifications_EnumerateSessions_Request::has_language() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameNotifications_EnumerateSessions_Request::set_has_language() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameNotifications_EnumerateSessions_Request::clear_has_language() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameNotifications_EnumerateSessions_Request::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
const ::std::string& CGameNotifications_EnumerateSessions_Request::language() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_EnumerateSessions_Request.language)
  return language_.GetNoArena();
}
void CGameNotifications_EnumerateSessions_Request::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_EnumerateSessions_Request.language)
}
#if LANG_CXX11
void CGameNotifications_EnumerateSessions_Request::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameNotifications_EnumerateSessions_Request.language)
}
#endif
void CGameNotifications_EnumerateSessions_Request::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameNotifications_EnumerateSessions_Request.language)
}
void CGameNotifications_EnumerateSessions_Request::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameNotifications_EnumerateSessions_Request.language)
}
::std::string* CGameNotifications_EnumerateSessions_Request::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameNotifications_EnumerateSessions_Request.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGameNotifications_EnumerateSessions_Request::release_language() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameNotifications_EnumerateSessions_Request.language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGameNotifications_EnumerateSessions_Request::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameNotifications_EnumerateSessions_Request.language)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_Session::kSessionidFieldNumber;
const int CGameNotifications_Session::kAppidFieldNumber;
const int CGameNotifications_Session::kContextFieldNumber;
const int CGameNotifications_Session::kTitleFieldNumber;
const int CGameNotifications_Session::kTimeCreatedFieldNumber;
const int CGameNotifications_Session::kTimeUpdatedFieldNumber;
const int CGameNotifications_Session::kUserStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_Session::CGameNotifications_Session()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameNotifications_Session)
}
CGameNotifications_Session::CGameNotifications_Session(const CGameNotifications_Session& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      user_status_(from.user_status_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_title()) {
    title_ = new ::proto::steam::CGameNotifications_LocalizedText(*from.title_);
  } else {
    title_ = NULL;
  }
  ::memcpy(&sessionid_, &from.sessionid_,
    reinterpret_cast<char*>(&time_updated_) -
    reinterpret_cast<char*>(&sessionid_) + sizeof(time_updated_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameNotifications_Session)
}

void CGameNotifications_Session::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&title_, 0, reinterpret_cast<char*>(&time_updated_) -
    reinterpret_cast<char*>(&title_) + sizeof(time_updated_));
}

CGameNotifications_Session::~CGameNotifications_Session() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameNotifications_Session)
  SharedDtor();
}

void CGameNotifications_Session::SharedDtor() {
  if (this != internal_default_instance()) {
    delete title_;
  }
}

void CGameNotifications_Session::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameNotifications_Session::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_Session& CGameNotifications_Session::default_instance() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameNotifications_Session* CGameNotifications_Session::New(::google::protobuf::Arena* arena) const {
  CGameNotifications_Session* n = new CGameNotifications_Session;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameNotifications_Session::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameNotifications_Session)
  user_status_.Clear();
  if (has_title()) {
    GOOGLE_DCHECK(title_ != NULL);
    title_->::proto::steam::CGameNotifications_LocalizedText::Clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&sessionid_, 0, reinterpret_cast<char*>(&time_updated_) -
      reinterpret_cast<char*>(&sessionid_) + sizeof(time_updated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameNotifications_Session)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid for this session."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 appid = 2 [(.proto.steam.description) = "The appid for the session."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 context = 3 [(.proto.steam.description) = "Game-specified context value the game can used to associate the session with some object on their backend."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_context();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &context_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CGameNotifications_LocalizedText title = 4 [(.proto.steam.description) = "The current title for the session."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_created = 5 [(.proto.steam.description) = "The time the session was created."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_time_created();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_updated = 6 [(.proto.steam.description) = "The last time the session was updated."];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_time_updated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_updated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CGameNotifications_UserStatus user_status = 7 [(.proto.steam.description) = "The status of all the users in the session."];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameNotifications_Session)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameNotifications_Session)
  return false;
#undef DO_
}

void CGameNotifications_Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameNotifications_Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid for this session."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  // optional uint64 appid = 2 [(.proto.steam.description) = "The appid for the session."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->appid(), output);
  }

  // optional uint64 context = 3 [(.proto.steam.description) = "Game-specified context value the game can used to associate the session with some object on their backend."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->context(), output);
  }

  // optional .proto.steam.CGameNotifications_LocalizedText title = 4 [(.proto.steam.description) = "The current title for the session."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->title_, output);
  }

  // optional uint32 time_created = 5 [(.proto.steam.description) = "The time the session was created."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time_created(), output);
  }

  // optional uint32 time_updated = 6 [(.proto.steam.description) = "The last time the session was updated."];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time_updated(), output);
  }

  // repeated .proto.steam.CGameNotifications_UserStatus user_status = 7 [(.proto.steam.description) = "The status of all the users in the session."];
  for (unsigned int i = 0, n = this->user_status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->user_status(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameNotifications_Session)
}

::google::protobuf::uint8* CGameNotifications_Session::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameNotifications_Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid for this session."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sessionid(), target);
  }

  // optional uint64 appid = 2 [(.proto.steam.description) = "The appid for the session."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->appid(), target);
  }

  // optional uint64 context = 3 [(.proto.steam.description) = "Game-specified context value the game can used to associate the session with some object on their backend."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->context(), target);
  }

  // optional .proto.steam.CGameNotifications_LocalizedText title = 4 [(.proto.steam.description) = "The current title for the session."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->title_, deterministic, target);
  }

  // optional uint32 time_created = 5 [(.proto.steam.description) = "The time the session was created."];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time_created(), target);
  }

  // optional uint32 time_updated = 6 [(.proto.steam.description) = "The last time the session was updated."];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time_updated(), target);
  }

  // repeated .proto.steam.CGameNotifications_UserStatus user_status = 7 [(.proto.steam.description) = "The status of all the users in the session."];
  for (unsigned int i = 0, n = this->user_status_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->user_status(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameNotifications_Session)
  return target;
}

size_t CGameNotifications_Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameNotifications_Session)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CGameNotifications_UserStatus user_status = 7 [(.proto.steam.description) = "The status of all the users in the session."];
  {
    unsigned int count = this->user_status_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_status(i));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional .proto.steam.CGameNotifications_LocalizedText title = 4 [(.proto.steam.description) = "The current title for the session."];
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->title_);
    }

    // optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid for this session."];
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

    // optional uint64 appid = 2 [(.proto.steam.description) = "The appid for the session."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->appid());
    }

    // optional uint64 context = 3 [(.proto.steam.description) = "Game-specified context value the game can used to associate the session with some object on their backend."];
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->context());
    }

    // optional uint32 time_created = 5 [(.proto.steam.description) = "The time the session was created."];
    if (has_time_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional uint32 time_updated = 6 [(.proto.steam.description) = "The last time the session was updated."];
    if (has_time_updated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_updated());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameNotifications_Session::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameNotifications_Session)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_Session* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_Session>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameNotifications_Session)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameNotifications_Session)
    MergeFrom(*source);
  }
}

void CGameNotifications_Session::MergeFrom(const CGameNotifications_Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameNotifications_Session)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_status_.MergeFrom(from.user_status_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_title()->::proto::steam::CGameNotifications_LocalizedText::MergeFrom(from.title());
    }
    if (cached_has_bits & 0x00000002u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      context_ = from.context_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_updated_ = from.time_updated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameNotifications_Session::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameNotifications_Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_Session::CopyFrom(const CGameNotifications_Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameNotifications_Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_Session::IsInitialized() const {
  return true;
}

void CGameNotifications_Session::Swap(CGameNotifications_Session* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_Session::InternalSwap(CGameNotifications_Session* other) {
  user_status_.InternalSwap(&other->user_status_);
  std::swap(title_, other->title_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(appid_, other->appid_);
  std::swap(context_, other->context_);
  std::swap(time_created_, other->time_created_);
  std::swap(time_updated_, other->time_updated_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameNotifications_Session::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameNotifications_Session

// optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid for this session."];
bool CGameNotifications_Session::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGameNotifications_Session::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void CGameNotifications_Session::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGameNotifications_Session::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
::google::protobuf::uint64 CGameNotifications_Session::sessionid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_Session.sessionid)
  return sessionid_;
}
void CGameNotifications_Session::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_Session.sessionid)
}

// optional uint64 appid = 2 [(.proto.steam.description) = "The appid for the session."];
bool CGameNotifications_Session::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGameNotifications_Session::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
void CGameNotifications_Session::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGameNotifications_Session::clear_appid() {
  appid_ = GOOGLE_ULONGLONG(0);
  clear_has_appid();
}
::google::protobuf::uint64 CGameNotifications_Session::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_Session.appid)
  return appid_;
}
void CGameNotifications_Session::set_appid(::google::protobuf::uint64 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_Session.appid)
}

// optional uint64 context = 3 [(.proto.steam.description) = "Game-specified context value the game can used to associate the session with some object on their backend."];
bool CGameNotifications_Session::has_context() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CGameNotifications_Session::set_has_context() {
  _has_bits_[0] |= 0x00000008u;
}
void CGameNotifications_Session::clear_has_context() {
  _has_bits_[0] &= ~0x00000008u;
}
void CGameNotifications_Session::clear_context() {
  context_ = GOOGLE_ULONGLONG(0);
  clear_has_context();
}
::google::protobuf::uint64 CGameNotifications_Session::context() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_Session.context)
  return context_;
}
void CGameNotifications_Session::set_context(::google::protobuf::uint64 value) {
  set_has_context();
  context_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_Session.context)
}

// optional .proto.steam.CGameNotifications_LocalizedText title = 4 [(.proto.steam.description) = "The current title for the session."];
bool CGameNotifications_Session::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameNotifications_Session::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameNotifications_Session::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameNotifications_Session::clear_title() {
  if (title_ != NULL) title_->::proto::steam::CGameNotifications_LocalizedText::Clear();
  clear_has_title();
}
const ::proto::steam::CGameNotifications_LocalizedText& CGameNotifications_Session::title() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_Session.title)
  return title_ != NULL ? *title_
                         : *::proto::steam::CGameNotifications_LocalizedText::internal_default_instance();
}
::proto::steam::CGameNotifications_LocalizedText* CGameNotifications_Session::mutable_title() {
  set_has_title();
  if (title_ == NULL) {
    title_ = new ::proto::steam::CGameNotifications_LocalizedText;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameNotifications_Session.title)
  return title_;
}
::proto::steam::CGameNotifications_LocalizedText* CGameNotifications_Session::release_title() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameNotifications_Session.title)
  clear_has_title();
  ::proto::steam::CGameNotifications_LocalizedText* temp = title_;
  title_ = NULL;
  return temp;
}
void CGameNotifications_Session::set_allocated_title(::proto::steam::CGameNotifications_LocalizedText* title) {
  delete title_;
  title_ = title;
  if (title) {
    set_has_title();
  } else {
    clear_has_title();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameNotifications_Session.title)
}

// optional uint32 time_created = 5 [(.proto.steam.description) = "The time the session was created."];
bool CGameNotifications_Session::has_time_created() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CGameNotifications_Session::set_has_time_created() {
  _has_bits_[0] |= 0x00000010u;
}
void CGameNotifications_Session::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000010u;
}
void CGameNotifications_Session::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
::google::protobuf::uint32 CGameNotifications_Session::time_created() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_Session.time_created)
  return time_created_;
}
void CGameNotifications_Session::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_Session.time_created)
}

// optional uint32 time_updated = 6 [(.proto.steam.description) = "The last time the session was updated."];
bool CGameNotifications_Session::has_time_updated() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CGameNotifications_Session::set_has_time_updated() {
  _has_bits_[0] |= 0x00000020u;
}
void CGameNotifications_Session::clear_has_time_updated() {
  _has_bits_[0] &= ~0x00000020u;
}
void CGameNotifications_Session::clear_time_updated() {
  time_updated_ = 0u;
  clear_has_time_updated();
}
::google::protobuf::uint32 CGameNotifications_Session::time_updated() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_Session.time_updated)
  return time_updated_;
}
void CGameNotifications_Session::set_time_updated(::google::protobuf::uint32 value) {
  set_has_time_updated();
  time_updated_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_Session.time_updated)
}

// repeated .proto.steam.CGameNotifications_UserStatus user_status = 7 [(.proto.steam.description) = "The status of all the users in the session."];
int CGameNotifications_Session::user_status_size() const {
  return user_status_.size();
}
void CGameNotifications_Session::clear_user_status() {
  user_status_.Clear();
}
const ::proto::steam::CGameNotifications_UserStatus& CGameNotifications_Session::user_status(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_Session.user_status)
  return user_status_.Get(index);
}
::proto::steam::CGameNotifications_UserStatus* CGameNotifications_Session::mutable_user_status(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameNotifications_Session.user_status)
  return user_status_.Mutable(index);
}
::proto::steam::CGameNotifications_UserStatus* CGameNotifications_Session::add_user_status() {
  // @@protoc_insertion_point(field_add:proto.steam.CGameNotifications_Session.user_status)
  return user_status_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CGameNotifications_UserStatus >*
CGameNotifications_Session::mutable_user_status() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CGameNotifications_Session.user_status)
  return &user_status_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CGameNotifications_UserStatus >&
CGameNotifications_Session::user_status() const {
  // @@protoc_insertion_point(field_list:proto.steam.CGameNotifications_Session.user_status)
  return user_status_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_EnumerateSessions_Response::kSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_EnumerateSessions_Response::CGameNotifications_EnumerateSessions_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameNotifications_EnumerateSessions_Response)
}
CGameNotifications_EnumerateSessions_Response::CGameNotifications_EnumerateSessions_Response(const CGameNotifications_EnumerateSessions_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sessions_(from.sessions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameNotifications_EnumerateSessions_Response)
}

void CGameNotifications_EnumerateSessions_Response::SharedCtor() {
  _cached_size_ = 0;
}

CGameNotifications_EnumerateSessions_Response::~CGameNotifications_EnumerateSessions_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameNotifications_EnumerateSessions_Response)
  SharedDtor();
}

void CGameNotifications_EnumerateSessions_Response::SharedDtor() {
}

void CGameNotifications_EnumerateSessions_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameNotifications_EnumerateSessions_Response::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_EnumerateSessions_Response& CGameNotifications_EnumerateSessions_Response::default_instance() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameNotifications_EnumerateSessions_Response* CGameNotifications_EnumerateSessions_Response::New(::google::protobuf::Arena* arena) const {
  CGameNotifications_EnumerateSessions_Response* n = new CGameNotifications_EnumerateSessions_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameNotifications_EnumerateSessions_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameNotifications_EnumerateSessions_Response)
  sessions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_EnumerateSessions_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameNotifications_EnumerateSessions_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CGameNotifications_Session sessions = 1 [(.proto.steam.description) = "A list of the user\'s sessions."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sessions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameNotifications_EnumerateSessions_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameNotifications_EnumerateSessions_Response)
  return false;
#undef DO_
}

void CGameNotifications_EnumerateSessions_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameNotifications_EnumerateSessions_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CGameNotifications_Session sessions = 1 [(.proto.steam.description) = "A list of the user\'s sessions."];
  for (unsigned int i = 0, n = this->sessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sessions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameNotifications_EnumerateSessions_Response)
}

::google::protobuf::uint8* CGameNotifications_EnumerateSessions_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameNotifications_EnumerateSessions_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CGameNotifications_Session sessions = 1 [(.proto.steam.description) = "A list of the user\'s sessions."];
  for (unsigned int i = 0, n = this->sessions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sessions(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameNotifications_EnumerateSessions_Response)
  return target;
}

size_t CGameNotifications_EnumerateSessions_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameNotifications_EnumerateSessions_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CGameNotifications_Session sessions = 1 [(.proto.steam.description) = "A list of the user\'s sessions."];
  {
    unsigned int count = this->sessions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessions(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameNotifications_EnumerateSessions_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameNotifications_EnumerateSessions_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_EnumerateSessions_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_EnumerateSessions_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameNotifications_EnumerateSessions_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameNotifications_EnumerateSessions_Response)
    MergeFrom(*source);
  }
}

void CGameNotifications_EnumerateSessions_Response::MergeFrom(const CGameNotifications_EnumerateSessions_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameNotifications_EnumerateSessions_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sessions_.MergeFrom(from.sessions_);
}

void CGameNotifications_EnumerateSessions_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameNotifications_EnumerateSessions_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_EnumerateSessions_Response::CopyFrom(const CGameNotifications_EnumerateSessions_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameNotifications_EnumerateSessions_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_EnumerateSessions_Response::IsInitialized() const {
  return true;
}

void CGameNotifications_EnumerateSessions_Response::Swap(CGameNotifications_EnumerateSessions_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_EnumerateSessions_Response::InternalSwap(CGameNotifications_EnumerateSessions_Response* other) {
  sessions_.InternalSwap(&other->sessions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameNotifications_EnumerateSessions_Response::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameNotifications_EnumerateSessions_Response

// repeated .proto.steam.CGameNotifications_Session sessions = 1 [(.proto.steam.description) = "A list of the user\'s sessions."];
int CGameNotifications_EnumerateSessions_Response::sessions_size() const {
  return sessions_.size();
}
void CGameNotifications_EnumerateSessions_Response::clear_sessions() {
  sessions_.Clear();
}
const ::proto::steam::CGameNotifications_Session& CGameNotifications_EnumerateSessions_Response::sessions(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_EnumerateSessions_Response.sessions)
  return sessions_.Get(index);
}
::proto::steam::CGameNotifications_Session* CGameNotifications_EnumerateSessions_Response::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameNotifications_EnumerateSessions_Response.sessions)
  return sessions_.Mutable(index);
}
::proto::steam::CGameNotifications_Session* CGameNotifications_EnumerateSessions_Response::add_sessions() {
  // @@protoc_insertion_point(field_add:proto.steam.CGameNotifications_EnumerateSessions_Response.sessions)
  return sessions_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CGameNotifications_Session >*
CGameNotifications_EnumerateSessions_Response::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CGameNotifications_EnumerateSessions_Response.sessions)
  return &sessions_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CGameNotifications_Session >&
CGameNotifications_EnumerateSessions_Response::sessions() const {
  // @@protoc_insertion_point(field_list:proto.steam.CGameNotifications_EnumerateSessions_Response.sessions)
  return sessions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_GetSessionDetails_Request_RequestedSession::kSessionidFieldNumber;
const int CGameNotifications_GetSessionDetails_Request_RequestedSession::kIncludeAuthUserMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_GetSessionDetails_Request_RequestedSession::CGameNotifications_GetSessionDetails_Request_RequestedSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession)
}
CGameNotifications_GetSessionDetails_Request_RequestedSession::CGameNotifications_GetSessionDetails_Request_RequestedSession(const CGameNotifications_GetSessionDetails_Request_RequestedSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sessionid_, &from.sessionid_,
    reinterpret_cast<char*>(&include_auth_user_message_) -
    reinterpret_cast<char*>(&sessionid_) + sizeof(include_auth_user_message_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession)
}

void CGameNotifications_GetSessionDetails_Request_RequestedSession::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sessionid_, 0, reinterpret_cast<char*>(&include_auth_user_message_) -
    reinterpret_cast<char*>(&sessionid_) + sizeof(include_auth_user_message_));
}

CGameNotifications_GetSessionDetails_Request_RequestedSession::~CGameNotifications_GetSessionDetails_Request_RequestedSession() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession)
  SharedDtor();
}

void CGameNotifications_GetSessionDetails_Request_RequestedSession::SharedDtor() {
}

void CGameNotifications_GetSessionDetails_Request_RequestedSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameNotifications_GetSessionDetails_Request_RequestedSession::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_GetSessionDetails_Request_RequestedSession& CGameNotifications_GetSessionDetails_Request_RequestedSession::default_instance() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameNotifications_GetSessionDetails_Request_RequestedSession* CGameNotifications_GetSessionDetails_Request_RequestedSession::New(::google::protobuf::Arena* arena) const {
  CGameNotifications_GetSessionDetails_Request_RequestedSession* n = new CGameNotifications_GetSessionDetails_Request_RequestedSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameNotifications_GetSessionDetails_Request_RequestedSession::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&sessionid_, 0, reinterpret_cast<char*>(&include_auth_user_message_) -
      reinterpret_cast<char*>(&sessionid_) + sizeof(include_auth_user_message_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_GetSessionDetails_Request_RequestedSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid to get details for."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_auth_user_message = 3 [(.proto.steam.description) = "(Optional) Boolean determining whether the message for the authenticated user should be included. Defaults to false."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_include_auth_user_message();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_auth_user_message_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession)
  return false;
#undef DO_
}

void CGameNotifications_GetSessionDetails_Request_RequestedSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid to get details for."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  // optional bool include_auth_user_message = 3 [(.proto.steam.description) = "(Optional) Boolean determining whether the message for the authenticated user should be included. Defaults to false."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->include_auth_user_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession)
}

::google::protobuf::uint8* CGameNotifications_GetSessionDetails_Request_RequestedSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid to get details for."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sessionid(), target);
  }

  // optional bool include_auth_user_message = 3 [(.proto.steam.description) = "(Optional) Boolean determining whether the message for the authenticated user should be included. Defaults to false."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->include_auth_user_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession)
  return target;
}

size_t CGameNotifications_GetSessionDetails_Request_RequestedSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid to get details for."];
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

    // optional bool include_auth_user_message = 3 [(.proto.steam.description) = "(Optional) Boolean determining whether the message for the authenticated user should be included. Defaults to false."];
    if (has_include_auth_user_message()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameNotifications_GetSessionDetails_Request_RequestedSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_GetSessionDetails_Request_RequestedSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_GetSessionDetails_Request_RequestedSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession)
    MergeFrom(*source);
  }
}

void CGameNotifications_GetSessionDetails_Request_RequestedSession::MergeFrom(const CGameNotifications_GetSessionDetails_Request_RequestedSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      include_auth_user_message_ = from.include_auth_user_message_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameNotifications_GetSessionDetails_Request_RequestedSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_GetSessionDetails_Request_RequestedSession::CopyFrom(const CGameNotifications_GetSessionDetails_Request_RequestedSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_GetSessionDetails_Request_RequestedSession::IsInitialized() const {
  return true;
}

void CGameNotifications_GetSessionDetails_Request_RequestedSession::Swap(CGameNotifications_GetSessionDetails_Request_RequestedSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_GetSessionDetails_Request_RequestedSession::InternalSwap(CGameNotifications_GetSessionDetails_Request_RequestedSession* other) {
  std::swap(sessionid_, other->sessionid_);
  std::swap(include_auth_user_message_, other->include_auth_user_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameNotifications_GetSessionDetails_Request_RequestedSession::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameNotifications_GetSessionDetails_Request_RequestedSession

// optional uint64 sessionid = 1 [(.proto.steam.description) = "The sessionid to get details for."];
bool CGameNotifications_GetSessionDetails_Request_RequestedSession::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameNotifications_GetSessionDetails_Request_RequestedSession::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameNotifications_GetSessionDetails_Request_RequestedSession::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameNotifications_GetSessionDetails_Request_RequestedSession::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
::google::protobuf::uint64 CGameNotifications_GetSessionDetails_Request_RequestedSession::sessionid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession.sessionid)
  return sessionid_;
}
void CGameNotifications_GetSessionDetails_Request_RequestedSession::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession.sessionid)
}

// optional bool include_auth_user_message = 3 [(.proto.steam.description) = "(Optional) Boolean determining whether the message for the authenticated user should be included. Defaults to false."];
bool CGameNotifications_GetSessionDetails_Request_RequestedSession::has_include_auth_user_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGameNotifications_GetSessionDetails_Request_RequestedSession::set_has_include_auth_user_message() {
  _has_bits_[0] |= 0x00000002u;
}
void CGameNotifications_GetSessionDetails_Request_RequestedSession::clear_has_include_auth_user_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGameNotifications_GetSessionDetails_Request_RequestedSession::clear_include_auth_user_message() {
  include_auth_user_message_ = false;
  clear_has_include_auth_user_message();
}
bool CGameNotifications_GetSessionDetails_Request_RequestedSession::include_auth_user_message() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession.include_auth_user_message)
  return include_auth_user_message_;
}
void CGameNotifications_GetSessionDetails_Request_RequestedSession::set_include_auth_user_message(bool value) {
  set_has_include_auth_user_message();
  include_auth_user_message_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession.include_auth_user_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_GetSessionDetails_Request::kSessionsFieldNumber;
const int CGameNotifications_GetSessionDetails_Request::kAppidFieldNumber;
const int CGameNotifications_GetSessionDetails_Request::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_GetSessionDetails_Request::CGameNotifications_GetSessionDetails_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameNotifications_GetSessionDetails_Request)
}
CGameNotifications_GetSessionDetails_Request::CGameNotifications_GetSessionDetails_Request(const CGameNotifications_GetSessionDetails_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sessions_(from.sessions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameNotifications_GetSessionDetails_Request)
}

void CGameNotifications_GetSessionDetails_Request::SharedCtor() {
  _cached_size_ = 0;
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_ = 0u;
}

CGameNotifications_GetSessionDetails_Request::~CGameNotifications_GetSessionDetails_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameNotifications_GetSessionDetails_Request)
  SharedDtor();
}

void CGameNotifications_GetSessionDetails_Request::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGameNotifications_GetSessionDetails_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameNotifications_GetSessionDetails_Request::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_GetSessionDetails_Request& CGameNotifications_GetSessionDetails_Request::default_instance() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameNotifications_GetSessionDetails_Request* CGameNotifications_GetSessionDetails_Request::New(::google::protobuf::Arena* arena) const {
  CGameNotifications_GetSessionDetails_Request* n = new CGameNotifications_GetSessionDetails_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameNotifications_GetSessionDetails_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameNotifications_GetSessionDetails_Request)
  sessions_.Clear();
  if (has_language()) {
    GOOGLE_DCHECK(!language_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*language_.UnsafeRawStringPointer())->clear();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_GetSessionDetails_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameNotifications_GetSessionDetails_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession sessions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sessions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2 [(.proto.steam.description) = "The appid for the sessions."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string language = 3 [(.proto.steam.description) = "Language to localize the text in."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameNotifications_GetSessionDetails_Request.language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameNotifications_GetSessionDetails_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameNotifications_GetSessionDetails_Request)
  return false;
#undef DO_
}

void CGameNotifications_GetSessionDetails_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameNotifications_GetSessionDetails_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession sessions = 1;
  for (unsigned int i = 0, n = this->sessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sessions(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 2 [(.proto.steam.description) = "The appid for the sessions."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional string language = 3 [(.proto.steam.description) = "Language to localize the text in."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameNotifications_GetSessionDetails_Request.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->language(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameNotifications_GetSessionDetails_Request)
}

::google::protobuf::uint8* CGameNotifications_GetSessionDetails_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameNotifications_GetSessionDetails_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession sessions = 1;
  for (unsigned int i = 0, n = this->sessions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sessions(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 2 [(.proto.steam.description) = "The appid for the sessions."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional string language = 3 [(.proto.steam.description) = "Language to localize the text in."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameNotifications_GetSessionDetails_Request.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->language(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameNotifications_GetSessionDetails_Request)
  return target;
}

size_t CGameNotifications_GetSessionDetails_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameNotifications_GetSessionDetails_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession sessions = 1;
  {
    unsigned int count = this->sessions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessions(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string language = 3 [(.proto.steam.description) = "Language to localize the text in."];
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional uint32 appid = 2 [(.proto.steam.description) = "The appid for the sessions."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameNotifications_GetSessionDetails_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameNotifications_GetSessionDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_GetSessionDetails_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_GetSessionDetails_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameNotifications_GetSessionDetails_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameNotifications_GetSessionDetails_Request)
    MergeFrom(*source);
  }
}

void CGameNotifications_GetSessionDetails_Request::MergeFrom(const CGameNotifications_GetSessionDetails_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameNotifications_GetSessionDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sessions_.MergeFrom(from.sessions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_language();
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameNotifications_GetSessionDetails_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameNotifications_GetSessionDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_GetSessionDetails_Request::CopyFrom(const CGameNotifications_GetSessionDetails_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameNotifications_GetSessionDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_GetSessionDetails_Request::IsInitialized() const {
  return true;
}

void CGameNotifications_GetSessionDetails_Request::Swap(CGameNotifications_GetSessionDetails_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_GetSessionDetails_Request::InternalSwap(CGameNotifications_GetSessionDetails_Request* other) {
  sessions_.InternalSwap(&other->sessions_);
  language_.Swap(&other->language_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameNotifications_GetSessionDetails_Request::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameNotifications_GetSessionDetails_Request

// repeated .proto.steam.CGameNotifications_GetSessionDetails_Request.RequestedSession sessions = 1;
int CGameNotifications_GetSessionDetails_Request::sessions_size() const {
  return sessions_.size();
}
void CGameNotifications_GetSessionDetails_Request::clear_sessions() {
  sessions_.Clear();
}
const ::proto::steam::CGameNotifications_GetSessionDetails_Request_RequestedSession& CGameNotifications_GetSessionDetails_Request::sessions(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_GetSessionDetails_Request.sessions)
  return sessions_.Get(index);
}
::proto::steam::CGameNotifications_GetSessionDetails_Request_RequestedSession* CGameNotifications_GetSessionDetails_Request::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameNotifications_GetSessionDetails_Request.sessions)
  return sessions_.Mutable(index);
}
::proto::steam::CGameNotifications_GetSessionDetails_Request_RequestedSession* CGameNotifications_GetSessionDetails_Request::add_sessions() {
  // @@protoc_insertion_point(field_add:proto.steam.CGameNotifications_GetSessionDetails_Request.sessions)
  return sessions_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CGameNotifications_GetSessionDetails_Request_RequestedSession >*
CGameNotifications_GetSessionDetails_Request::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CGameNotifications_GetSessionDetails_Request.sessions)
  return &sessions_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CGameNotifications_GetSessionDetails_Request_RequestedSession >&
CGameNotifications_GetSessionDetails_Request::sessions() const {
  // @@protoc_insertion_point(field_list:proto.steam.CGameNotifications_GetSessionDetails_Request.sessions)
  return sessions_;
}

// optional uint32 appid = 2 [(.proto.steam.description) = "The appid for the sessions."];
bool CGameNotifications_GetSessionDetails_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGameNotifications_GetSessionDetails_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CGameNotifications_GetSessionDetails_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGameNotifications_GetSessionDetails_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CGameNotifications_GetSessionDetails_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_GetSessionDetails_Request.appid)
  return appid_;
}
void CGameNotifications_GetSessionDetails_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_GetSessionDetails_Request.appid)
}

// optional string language = 3 [(.proto.steam.description) = "Language to localize the text in."];
bool CGameNotifications_GetSessionDetails_Request::has_language() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameNotifications_GetSessionDetails_Request::set_has_language() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameNotifications_GetSessionDetails_Request::clear_has_language() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameNotifications_GetSessionDetails_Request::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
const ::std::string& CGameNotifications_GetSessionDetails_Request::language() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_GetSessionDetails_Request.language)
  return language_.GetNoArena();
}
void CGameNotifications_GetSessionDetails_Request::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_GetSessionDetails_Request.language)
}
#if LANG_CXX11
void CGameNotifications_GetSessionDetails_Request::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameNotifications_GetSessionDetails_Request.language)
}
#endif
void CGameNotifications_GetSessionDetails_Request::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameNotifications_GetSessionDetails_Request.language)
}
void CGameNotifications_GetSessionDetails_Request::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameNotifications_GetSessionDetails_Request.language)
}
::std::string* CGameNotifications_GetSessionDetails_Request::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameNotifications_GetSessionDetails_Request.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGameNotifications_GetSessionDetails_Request::release_language() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameNotifications_GetSessionDetails_Request.language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGameNotifications_GetSessionDetails_Request::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameNotifications_GetSessionDetails_Request.language)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_GetSessionDetails_Response::kSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_GetSessionDetails_Response::CGameNotifications_GetSessionDetails_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameNotifications_GetSessionDetails_Response)
}
CGameNotifications_GetSessionDetails_Response::CGameNotifications_GetSessionDetails_Response(const CGameNotifications_GetSessionDetails_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sessions_(from.sessions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameNotifications_GetSessionDetails_Response)
}

void CGameNotifications_GetSessionDetails_Response::SharedCtor() {
  _cached_size_ = 0;
}

CGameNotifications_GetSessionDetails_Response::~CGameNotifications_GetSessionDetails_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameNotifications_GetSessionDetails_Response)
  SharedDtor();
}

void CGameNotifications_GetSessionDetails_Response::SharedDtor() {
}

void CGameNotifications_GetSessionDetails_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameNotifications_GetSessionDetails_Response::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_GetSessionDetails_Response& CGameNotifications_GetSessionDetails_Response::default_instance() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameNotifications_GetSessionDetails_Response* CGameNotifications_GetSessionDetails_Response::New(::google::protobuf::Arena* arena) const {
  CGameNotifications_GetSessionDetails_Response* n = new CGameNotifications_GetSessionDetails_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameNotifications_GetSessionDetails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameNotifications_GetSessionDetails_Response)
  sessions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_GetSessionDetails_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameNotifications_GetSessionDetails_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CGameNotifications_Session sessions = 1 [(.proto.steam.description) = "The details of the session."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sessions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameNotifications_GetSessionDetails_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameNotifications_GetSessionDetails_Response)
  return false;
#undef DO_
}

void CGameNotifications_GetSessionDetails_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameNotifications_GetSessionDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CGameNotifications_Session sessions = 1 [(.proto.steam.description) = "The details of the session."];
  for (unsigned int i = 0, n = this->sessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sessions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameNotifications_GetSessionDetails_Response)
}

::google::protobuf::uint8* CGameNotifications_GetSessionDetails_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameNotifications_GetSessionDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CGameNotifications_Session sessions = 1 [(.proto.steam.description) = "The details of the session."];
  for (unsigned int i = 0, n = this->sessions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sessions(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameNotifications_GetSessionDetails_Response)
  return target;
}

size_t CGameNotifications_GetSessionDetails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameNotifications_GetSessionDetails_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CGameNotifications_Session sessions = 1 [(.proto.steam.description) = "The details of the session."];
  {
    unsigned int count = this->sessions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessions(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameNotifications_GetSessionDetails_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameNotifications_GetSessionDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_GetSessionDetails_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_GetSessionDetails_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameNotifications_GetSessionDetails_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameNotifications_GetSessionDetails_Response)
    MergeFrom(*source);
  }
}

void CGameNotifications_GetSessionDetails_Response::MergeFrom(const CGameNotifications_GetSessionDetails_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameNotifications_GetSessionDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sessions_.MergeFrom(from.sessions_);
}

void CGameNotifications_GetSessionDetails_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameNotifications_GetSessionDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_GetSessionDetails_Response::CopyFrom(const CGameNotifications_GetSessionDetails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameNotifications_GetSessionDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_GetSessionDetails_Response::IsInitialized() const {
  return true;
}

void CGameNotifications_GetSessionDetails_Response::Swap(CGameNotifications_GetSessionDetails_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_GetSessionDetails_Response::InternalSwap(CGameNotifications_GetSessionDetails_Response* other) {
  sessions_.InternalSwap(&other->sessions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameNotifications_GetSessionDetails_Response::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameNotifications_GetSessionDetails_Response

// repeated .proto.steam.CGameNotifications_Session sessions = 1 [(.proto.steam.description) = "The details of the session."];
int CGameNotifications_GetSessionDetails_Response::sessions_size() const {
  return sessions_.size();
}
void CGameNotifications_GetSessionDetails_Response::clear_sessions() {
  sessions_.Clear();
}
const ::proto::steam::CGameNotifications_Session& CGameNotifications_GetSessionDetails_Response::sessions(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_GetSessionDetails_Response.sessions)
  return sessions_.Get(index);
}
::proto::steam::CGameNotifications_Session* CGameNotifications_GetSessionDetails_Response::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameNotifications_GetSessionDetails_Response.sessions)
  return sessions_.Mutable(index);
}
::proto::steam::CGameNotifications_Session* CGameNotifications_GetSessionDetails_Response::add_sessions() {
  // @@protoc_insertion_point(field_add:proto.steam.CGameNotifications_GetSessionDetails_Response.sessions)
  return sessions_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CGameNotifications_Session >*
CGameNotifications_GetSessionDetails_Response::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CGameNotifications_GetSessionDetails_Response.sessions)
  return &sessions_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CGameNotifications_Session >&
CGameNotifications_GetSessionDetails_Response::sessions() const {
  // @@protoc_insertion_point(field_list:proto.steam.CGameNotifications_GetSessionDetails_Response.sessions)
  return sessions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameNotificationSettings::kAppidFieldNumber;
const int GameNotificationSettings::kAllowNotificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameNotificationSettings::GameNotificationSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.GameNotificationSettings)
}
GameNotificationSettings::GameNotificationSettings(const GameNotificationSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&allow_notifications_) -
    reinterpret_cast<char*>(&appid_) + sizeof(allow_notifications_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.GameNotificationSettings)
}

void GameNotificationSettings::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&appid_, 0, reinterpret_cast<char*>(&allow_notifications_) -
    reinterpret_cast<char*>(&appid_) + sizeof(allow_notifications_));
}

GameNotificationSettings::~GameNotificationSettings() {
  // @@protoc_insertion_point(destructor:proto.steam.GameNotificationSettings)
  SharedDtor();
}

void GameNotificationSettings::SharedDtor() {
}

void GameNotificationSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameNotificationSettings::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameNotificationSettings& GameNotificationSettings::default_instance() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameNotificationSettings* GameNotificationSettings::New(::google::protobuf::Arena* arena) const {
  GameNotificationSettings* n = new GameNotificationSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameNotificationSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.GameNotificationSettings)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&allow_notifications_) -
      reinterpret_cast<char*>(&appid_) + sizeof(allow_notifications_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameNotificationSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.GameNotificationSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "The appid to create the session for."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_notifications = 2 [(.proto.steam.description) = "Whether the user allows notification for this app."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_allow_notifications();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_notifications_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.GameNotificationSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.GameNotificationSettings)
  return false;
#undef DO_
}

void GameNotificationSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.GameNotificationSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "The appid to create the session for."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional bool allow_notifications = 2 [(.proto.steam.description) = "Whether the user allows notification for this app."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->allow_notifications(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.GameNotificationSettings)
}

::google::protobuf::uint8* GameNotificationSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.GameNotificationSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "The appid to create the session for."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional bool allow_notifications = 2 [(.proto.steam.description) = "Whether the user allows notification for this app."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->allow_notifications(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.GameNotificationSettings)
  return target;
}

size_t GameNotificationSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.GameNotificationSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 appid = 1 [(.proto.steam.description) = "The appid to create the session for."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool allow_notifications = 2 [(.proto.steam.description) = "Whether the user allows notification for this app."];
    if (has_allow_notifications()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameNotificationSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.GameNotificationSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const GameNotificationSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameNotificationSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.GameNotificationSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.GameNotificationSettings)
    MergeFrom(*source);
  }
}

void GameNotificationSettings::MergeFrom(const GameNotificationSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.GameNotificationSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      allow_notifications_ = from.allow_notifications_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameNotificationSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.GameNotificationSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameNotificationSettings::CopyFrom(const GameNotificationSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.GameNotificationSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameNotificationSettings::IsInitialized() const {
  return true;
}

void GameNotificationSettings::Swap(GameNotificationSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameNotificationSettings::InternalSwap(GameNotificationSettings* other) {
  std::swap(appid_, other->appid_);
  std::swap(allow_notifications_, other->allow_notifications_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameNotificationSettings::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameNotificationSettings

// optional uint32 appid = 1 [(.proto.steam.description) = "The appid to create the session for."];
bool GameNotificationSettings::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameNotificationSettings::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameNotificationSettings::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameNotificationSettings::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 GameNotificationSettings::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.GameNotificationSettings.appid)
  return appid_;
}
void GameNotificationSettings::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.GameNotificationSettings.appid)
}

// optional bool allow_notifications = 2 [(.proto.steam.description) = "Whether the user allows notification for this app."];
bool GameNotificationSettings::has_allow_notifications() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameNotificationSettings::set_has_allow_notifications() {
  _has_bits_[0] |= 0x00000002u;
}
void GameNotificationSettings::clear_has_allow_notifications() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameNotificationSettings::clear_allow_notifications() {
  allow_notifications_ = false;
  clear_has_allow_notifications();
}
bool GameNotificationSettings::allow_notifications() const {
  // @@protoc_insertion_point(field_get:proto.steam.GameNotificationSettings.allow_notifications)
  return allow_notifications_;
}
void GameNotificationSettings::set_allow_notifications(bool value) {
  set_has_allow_notifications();
  allow_notifications_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.GameNotificationSettings.allow_notifications)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_UpdateNotificationSettings_Request::kGameNotificationSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_UpdateNotificationSettings_Request::CGameNotifications_UpdateNotificationSettings_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameNotifications_UpdateNotificationSettings_Request)
}
CGameNotifications_UpdateNotificationSettings_Request::CGameNotifications_UpdateNotificationSettings_Request(const CGameNotifications_UpdateNotificationSettings_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      game_notification_settings_(from.game_notification_settings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameNotifications_UpdateNotificationSettings_Request)
}

void CGameNotifications_UpdateNotificationSettings_Request::SharedCtor() {
  _cached_size_ = 0;
}

CGameNotifications_UpdateNotificationSettings_Request::~CGameNotifications_UpdateNotificationSettings_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameNotifications_UpdateNotificationSettings_Request)
  SharedDtor();
}

void CGameNotifications_UpdateNotificationSettings_Request::SharedDtor() {
}

void CGameNotifications_UpdateNotificationSettings_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameNotifications_UpdateNotificationSettings_Request::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_UpdateNotificationSettings_Request& CGameNotifications_UpdateNotificationSettings_Request::default_instance() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameNotifications_UpdateNotificationSettings_Request* CGameNotifications_UpdateNotificationSettings_Request::New(::google::protobuf::Arena* arena) const {
  CGameNotifications_UpdateNotificationSettings_Request* n = new CGameNotifications_UpdateNotificationSettings_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameNotifications_UpdateNotificationSettings_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameNotifications_UpdateNotificationSettings_Request)
  game_notification_settings_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_UpdateNotificationSettings_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameNotifications_UpdateNotificationSettings_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.GameNotificationSettings game_notification_settings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_game_notification_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameNotifications_UpdateNotificationSettings_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameNotifications_UpdateNotificationSettings_Request)
  return false;
#undef DO_
}

void CGameNotifications_UpdateNotificationSettings_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameNotifications_UpdateNotificationSettings_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.GameNotificationSettings game_notification_settings = 1;
  for (unsigned int i = 0, n = this->game_notification_settings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game_notification_settings(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameNotifications_UpdateNotificationSettings_Request)
}

::google::protobuf::uint8* CGameNotifications_UpdateNotificationSettings_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameNotifications_UpdateNotificationSettings_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.GameNotificationSettings game_notification_settings = 1;
  for (unsigned int i = 0, n = this->game_notification_settings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->game_notification_settings(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameNotifications_UpdateNotificationSettings_Request)
  return target;
}

size_t CGameNotifications_UpdateNotificationSettings_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameNotifications_UpdateNotificationSettings_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.GameNotificationSettings game_notification_settings = 1;
  {
    unsigned int count = this->game_notification_settings_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_notification_settings(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameNotifications_UpdateNotificationSettings_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameNotifications_UpdateNotificationSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_UpdateNotificationSettings_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_UpdateNotificationSettings_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameNotifications_UpdateNotificationSettings_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameNotifications_UpdateNotificationSettings_Request)
    MergeFrom(*source);
  }
}

void CGameNotifications_UpdateNotificationSettings_Request::MergeFrom(const CGameNotifications_UpdateNotificationSettings_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameNotifications_UpdateNotificationSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_notification_settings_.MergeFrom(from.game_notification_settings_);
}

void CGameNotifications_UpdateNotificationSettings_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameNotifications_UpdateNotificationSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_UpdateNotificationSettings_Request::CopyFrom(const CGameNotifications_UpdateNotificationSettings_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameNotifications_UpdateNotificationSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_UpdateNotificationSettings_Request::IsInitialized() const {
  return true;
}

void CGameNotifications_UpdateNotificationSettings_Request::Swap(CGameNotifications_UpdateNotificationSettings_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_UpdateNotificationSettings_Request::InternalSwap(CGameNotifications_UpdateNotificationSettings_Request* other) {
  game_notification_settings_.InternalSwap(&other->game_notification_settings_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameNotifications_UpdateNotificationSettings_Request::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameNotifications_UpdateNotificationSettings_Request

// repeated .proto.steam.GameNotificationSettings game_notification_settings = 1;
int CGameNotifications_UpdateNotificationSettings_Request::game_notification_settings_size() const {
  return game_notification_settings_.size();
}
void CGameNotifications_UpdateNotificationSettings_Request::clear_game_notification_settings() {
  game_notification_settings_.Clear();
}
const ::proto::steam::GameNotificationSettings& CGameNotifications_UpdateNotificationSettings_Request::game_notification_settings(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_UpdateNotificationSettings_Request.game_notification_settings)
  return game_notification_settings_.Get(index);
}
::proto::steam::GameNotificationSettings* CGameNotifications_UpdateNotificationSettings_Request::mutable_game_notification_settings(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameNotifications_UpdateNotificationSettings_Request.game_notification_settings)
  return game_notification_settings_.Mutable(index);
}
::proto::steam::GameNotificationSettings* CGameNotifications_UpdateNotificationSettings_Request::add_game_notification_settings() {
  // @@protoc_insertion_point(field_add:proto.steam.CGameNotifications_UpdateNotificationSettings_Request.game_notification_settings)
  return game_notification_settings_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::GameNotificationSettings >*
CGameNotifications_UpdateNotificationSettings_Request::mutable_game_notification_settings() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CGameNotifications_UpdateNotificationSettings_Request.game_notification_settings)
  return &game_notification_settings_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::GameNotificationSettings >&
CGameNotifications_UpdateNotificationSettings_Request::game_notification_settings() const {
  // @@protoc_insertion_point(field_list:proto.steam.CGameNotifications_UpdateNotificationSettings_Request.game_notification_settings)
  return game_notification_settings_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_UpdateNotificationSettings_Response::CGameNotifications_UpdateNotificationSettings_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameNotifications_UpdateNotificationSettings_Response)
}
CGameNotifications_UpdateNotificationSettings_Response::CGameNotifications_UpdateNotificationSettings_Response(const CGameNotifications_UpdateNotificationSettings_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameNotifications_UpdateNotificationSettings_Response)
}

void CGameNotifications_UpdateNotificationSettings_Response::SharedCtor() {
  _cached_size_ = 0;
}

CGameNotifications_UpdateNotificationSettings_Response::~CGameNotifications_UpdateNotificationSettings_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameNotifications_UpdateNotificationSettings_Response)
  SharedDtor();
}

void CGameNotifications_UpdateNotificationSettings_Response::SharedDtor() {
}

void CGameNotifications_UpdateNotificationSettings_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameNotifications_UpdateNotificationSettings_Response::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_UpdateNotificationSettings_Response& CGameNotifications_UpdateNotificationSettings_Response::default_instance() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameNotifications_UpdateNotificationSettings_Response* CGameNotifications_UpdateNotificationSettings_Response::New(::google::protobuf::Arena* arena) const {
  CGameNotifications_UpdateNotificationSettings_Response* n = new CGameNotifications_UpdateNotificationSettings_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameNotifications_UpdateNotificationSettings_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameNotifications_UpdateNotificationSettings_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_UpdateNotificationSettings_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameNotifications_UpdateNotificationSettings_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameNotifications_UpdateNotificationSettings_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameNotifications_UpdateNotificationSettings_Response)
  return false;
#undef DO_
}

void CGameNotifications_UpdateNotificationSettings_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameNotifications_UpdateNotificationSettings_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameNotifications_UpdateNotificationSettings_Response)
}

::google::protobuf::uint8* CGameNotifications_UpdateNotificationSettings_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameNotifications_UpdateNotificationSettings_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameNotifications_UpdateNotificationSettings_Response)
  return target;
}

size_t CGameNotifications_UpdateNotificationSettings_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameNotifications_UpdateNotificationSettings_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameNotifications_UpdateNotificationSettings_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameNotifications_UpdateNotificationSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_UpdateNotificationSettings_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_UpdateNotificationSettings_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameNotifications_UpdateNotificationSettings_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameNotifications_UpdateNotificationSettings_Response)
    MergeFrom(*source);
  }
}

void CGameNotifications_UpdateNotificationSettings_Response::MergeFrom(const CGameNotifications_UpdateNotificationSettings_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameNotifications_UpdateNotificationSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameNotifications_UpdateNotificationSettings_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameNotifications_UpdateNotificationSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_UpdateNotificationSettings_Response::CopyFrom(const CGameNotifications_UpdateNotificationSettings_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameNotifications_UpdateNotificationSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_UpdateNotificationSettings_Response::IsInitialized() const {
  return true;
}

void CGameNotifications_UpdateNotificationSettings_Response::Swap(CGameNotifications_UpdateNotificationSettings_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_UpdateNotificationSettings_Response::InternalSwap(CGameNotifications_UpdateNotificationSettings_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameNotifications_UpdateNotificationSettings_Response::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameNotifications_UpdateNotificationSettings_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_OnNotificationsRequested_Notification::kSteamidFieldNumber;
const int CGameNotifications_OnNotificationsRequested_Notification::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_OnNotificationsRequested_Notification::CGameNotifications_OnNotificationsRequested_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameNotifications_OnNotificationsRequested_Notification)
}
CGameNotifications_OnNotificationsRequested_Notification::CGameNotifications_OnNotificationsRequested_Notification(const CGameNotifications_OnNotificationsRequested_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameNotifications_OnNotificationsRequested_Notification)
}

void CGameNotifications_OnNotificationsRequested_Notification::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
}

CGameNotifications_OnNotificationsRequested_Notification::~CGameNotifications_OnNotificationsRequested_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameNotifications_OnNotificationsRequested_Notification)
  SharedDtor();
}

void CGameNotifications_OnNotificationsRequested_Notification::SharedDtor() {
}

void CGameNotifications_OnNotificationsRequested_Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameNotifications_OnNotificationsRequested_Notification::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_OnNotificationsRequested_Notification& CGameNotifications_OnNotificationsRequested_Notification::default_instance() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameNotifications_OnNotificationsRequested_Notification* CGameNotifications_OnNotificationsRequested_Notification::New(::google::protobuf::Arena* arena) const {
  CGameNotifications_OnNotificationsRequested_Notification* n = new CGameNotifications_OnNotificationsRequested_Notification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameNotifications_OnNotificationsRequested_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameNotifications_OnNotificationsRequested_Notification)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_OnNotificationsRequested_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameNotifications_OnNotificationsRequested_Notification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid of the user who notifications were requested for."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2 [(.proto.steam.description) = "The appid that requested notifications."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameNotifications_OnNotificationsRequested_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameNotifications_OnNotificationsRequested_Notification)
  return false;
#undef DO_
}

void CGameNotifications_OnNotificationsRequested_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameNotifications_OnNotificationsRequested_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid of the user who notifications were requested for."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "The appid that requested notifications."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameNotifications_OnNotificationsRequested_Notification)
}

::google::protobuf::uint8* CGameNotifications_OnNotificationsRequested_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameNotifications_OnNotificationsRequested_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid of the user who notifications were requested for."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "The appid that requested notifications."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameNotifications_OnNotificationsRequested_Notification)
  return target;
}

size_t CGameNotifications_OnNotificationsRequested_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameNotifications_OnNotificationsRequested_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid of the user who notifications were requested for."];
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2 [(.proto.steam.description) = "The appid that requested notifications."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameNotifications_OnNotificationsRequested_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameNotifications_OnNotificationsRequested_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_OnNotificationsRequested_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_OnNotificationsRequested_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameNotifications_OnNotificationsRequested_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameNotifications_OnNotificationsRequested_Notification)
    MergeFrom(*source);
  }
}

void CGameNotifications_OnNotificationsRequested_Notification::MergeFrom(const CGameNotifications_OnNotificationsRequested_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameNotifications_OnNotificationsRequested_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameNotifications_OnNotificationsRequested_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameNotifications_OnNotificationsRequested_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_OnNotificationsRequested_Notification::CopyFrom(const CGameNotifications_OnNotificationsRequested_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameNotifications_OnNotificationsRequested_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_OnNotificationsRequested_Notification::IsInitialized() const {
  return true;
}

void CGameNotifications_OnNotificationsRequested_Notification::Swap(CGameNotifications_OnNotificationsRequested_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_OnNotificationsRequested_Notification::InternalSwap(CGameNotifications_OnNotificationsRequested_Notification* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameNotifications_OnNotificationsRequested_Notification::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameNotifications_OnNotificationsRequested_Notification

// optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid of the user who notifications were requested for."];
bool CGameNotifications_OnNotificationsRequested_Notification::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameNotifications_OnNotificationsRequested_Notification::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameNotifications_OnNotificationsRequested_Notification::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameNotifications_OnNotificationsRequested_Notification::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CGameNotifications_OnNotificationsRequested_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_OnNotificationsRequested_Notification.steamid)
  return steamid_;
}
void CGameNotifications_OnNotificationsRequested_Notification::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_OnNotificationsRequested_Notification.steamid)
}

// optional uint32 appid = 2 [(.proto.steam.description) = "The appid that requested notifications."];
bool CGameNotifications_OnNotificationsRequested_Notification::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGameNotifications_OnNotificationsRequested_Notification::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CGameNotifications_OnNotificationsRequested_Notification::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGameNotifications_OnNotificationsRequested_Notification::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CGameNotifications_OnNotificationsRequested_Notification::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_OnNotificationsRequested_Notification.appid)
  return appid_;
}
void CGameNotifications_OnNotificationsRequested_Notification::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_OnNotificationsRequested_Notification.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameNotifications_OnUserStatusChanged_Notification::kSteamidFieldNumber;
const int CGameNotifications_OnUserStatusChanged_Notification::kSessionidFieldNumber;
const int CGameNotifications_OnUserStatusChanged_Notification::kAppidFieldNumber;
const int CGameNotifications_OnUserStatusChanged_Notification::kStatusFieldNumber;
const int CGameNotifications_OnUserStatusChanged_Notification::kRemovedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameNotifications_OnUserStatusChanged_Notification::CGameNotifications_OnUserStatusChanged_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameNotifications_OnUserStatusChanged_Notification)
}
CGameNotifications_OnUserStatusChanged_Notification::CGameNotifications_OnUserStatusChanged_Notification(const CGameNotifications_OnUserStatusChanged_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::proto::steam::CGameNotifications_UserStatus(*from.status_);
  } else {
    status_ = NULL;
  }
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&removed_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(removed_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameNotifications_OnUserStatusChanged_Notification)
}

void CGameNotifications_OnUserStatusChanged_Notification::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&status_, 0, reinterpret_cast<char*>(&removed_) -
    reinterpret_cast<char*>(&status_) + sizeof(removed_));
}

CGameNotifications_OnUserStatusChanged_Notification::~CGameNotifications_OnUserStatusChanged_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameNotifications_OnUserStatusChanged_Notification)
  SharedDtor();
}

void CGameNotifications_OnUserStatusChanged_Notification::SharedDtor() {
  if (this != internal_default_instance()) {
    delete status_;
  }
}

void CGameNotifications_OnUserStatusChanged_Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameNotifications_OnUserStatusChanged_Notification::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameNotifications_OnUserStatusChanged_Notification& CGameNotifications_OnUserStatusChanged_Notification::default_instance() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameNotifications_OnUserStatusChanged_Notification* CGameNotifications_OnUserStatusChanged_Notification::New(::google::protobuf::Arena* arena) const {
  CGameNotifications_OnUserStatusChanged_Notification* n = new CGameNotifications_OnUserStatusChanged_Notification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameNotifications_OnUserStatusChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameNotifications_OnUserStatusChanged_Notification)
  if (has_status()) {
    GOOGLE_DCHECK(status_ != NULL);
    status_->::proto::steam::CGameNotifications_UserStatus::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&removed_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(removed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameNotifications_OnUserStatusChanged_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameNotifications_OnUserStatusChanged_Notification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid of the user whose status changed."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sessionid = 2 [(.proto.steam.description) = "The sessionid of the session where the user\'s status was changed."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 3 [(.proto.steam.description) = "The appid of the session where the user\'s status changed."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CGameNotifications_UserStatus status = 4 [(.proto.steam.description) = "(Optional) New status of the user."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool removed = 5 [(.proto.steam.description) = "(Optional) User has been removed from the session."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_removed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameNotifications_OnUserStatusChanged_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameNotifications_OnUserStatusChanged_Notification)
  return false;
#undef DO_
}

void CGameNotifications_OnUserStatusChanged_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameNotifications_OnUserStatusChanged_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid of the user whose status changed."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint64 sessionid = 2 [(.proto.steam.description) = "The sessionid of the session where the user\'s status was changed."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sessionid(), output);
  }

  // optional uint32 appid = 3 [(.proto.steam.description) = "The appid of the session where the user\'s status changed."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->appid(), output);
  }

  // optional .proto.steam.CGameNotifications_UserStatus status = 4 [(.proto.steam.description) = "(Optional) New status of the user."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->status_, output);
  }

  // optional bool removed = 5 [(.proto.steam.description) = "(Optional) User has been removed from the session."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->removed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameNotifications_OnUserStatusChanged_Notification)
}

::google::protobuf::uint8* CGameNotifications_OnUserStatusChanged_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameNotifications_OnUserStatusChanged_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid of the user whose status changed."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint64 sessionid = 2 [(.proto.steam.description) = "The sessionid of the session where the user\'s status was changed."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sessionid(), target);
  }

  // optional uint32 appid = 3 [(.proto.steam.description) = "The appid of the session where the user\'s status changed."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->appid(), target);
  }

  // optional .proto.steam.CGameNotifications_UserStatus status = 4 [(.proto.steam.description) = "(Optional) New status of the user."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->status_, deterministic, target);
  }

  // optional bool removed = 5 [(.proto.steam.description) = "(Optional) User has been removed from the session."];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->removed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameNotifications_OnUserStatusChanged_Notification)
  return target;
}

size_t CGameNotifications_OnUserStatusChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameNotifications_OnUserStatusChanged_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .proto.steam.CGameNotifications_UserStatus status = 4 [(.proto.steam.description) = "(Optional) New status of the user."];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->status_);
    }

    // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid of the user whose status changed."];
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint64 sessionid = 2 [(.proto.steam.description) = "The sessionid of the session where the user\'s status was changed."];
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

    // optional uint32 appid = 3 [(.proto.steam.description) = "The appid of the session where the user\'s status changed."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool removed = 5 [(.proto.steam.description) = "(Optional) User has been removed from the session."];
    if (has_removed()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameNotifications_OnUserStatusChanged_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameNotifications_OnUserStatusChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNotifications_OnUserStatusChanged_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameNotifications_OnUserStatusChanged_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameNotifications_OnUserStatusChanged_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameNotifications_OnUserStatusChanged_Notification)
    MergeFrom(*source);
  }
}

void CGameNotifications_OnUserStatusChanged_Notification::MergeFrom(const CGameNotifications_OnUserStatusChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameNotifications_OnUserStatusChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_status()->::proto::steam::CGameNotifications_UserStatus::MergeFrom(from.status());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000010u) {
      removed_ = from.removed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameNotifications_OnUserStatusChanged_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameNotifications_OnUserStatusChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNotifications_OnUserStatusChanged_Notification::CopyFrom(const CGameNotifications_OnUserStatusChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameNotifications_OnUserStatusChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNotifications_OnUserStatusChanged_Notification::IsInitialized() const {
  return true;
}

void CGameNotifications_OnUserStatusChanged_Notification::Swap(CGameNotifications_OnUserStatusChanged_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameNotifications_OnUserStatusChanged_Notification::InternalSwap(CGameNotifications_OnUserStatusChanged_Notification* other) {
  std::swap(status_, other->status_);
  std::swap(steamid_, other->steamid_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(appid_, other->appid_);
  std::swap(removed_, other->removed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameNotifications_OnUserStatusChanged_Notification::GetMetadata() const {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameNotifications_OnUserStatusChanged_Notification

// optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid of the user whose status changed."];
bool CGameNotifications_OnUserStatusChanged_Notification::has_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGameNotifications_OnUserStatusChanged_Notification::set_has_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
void CGameNotifications_OnUserStatusChanged_Notification::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGameNotifications_OnUserStatusChanged_Notification::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CGameNotifications_OnUserStatusChanged_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_OnUserStatusChanged_Notification.steamid)
  return steamid_;
}
void CGameNotifications_OnUserStatusChanged_Notification::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_OnUserStatusChanged_Notification.steamid)
}

// optional uint64 sessionid = 2 [(.proto.steam.description) = "The sessionid of the session where the user\'s status was changed."];
bool CGameNotifications_OnUserStatusChanged_Notification::has_sessionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGameNotifications_OnUserStatusChanged_Notification::set_has_sessionid() {
  _has_bits_[0] |= 0x00000004u;
}
void CGameNotifications_OnUserStatusChanged_Notification::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGameNotifications_OnUserStatusChanged_Notification::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
::google::protobuf::uint64 CGameNotifications_OnUserStatusChanged_Notification::sessionid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_OnUserStatusChanged_Notification.sessionid)
  return sessionid_;
}
void CGameNotifications_OnUserStatusChanged_Notification::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_OnUserStatusChanged_Notification.sessionid)
}

// optional uint32 appid = 3 [(.proto.steam.description) = "The appid of the session where the user\'s status changed."];
bool CGameNotifications_OnUserStatusChanged_Notification::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CGameNotifications_OnUserStatusChanged_Notification::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
void CGameNotifications_OnUserStatusChanged_Notification::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CGameNotifications_OnUserStatusChanged_Notification::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CGameNotifications_OnUserStatusChanged_Notification::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_OnUserStatusChanged_Notification.appid)
  return appid_;
}
void CGameNotifications_OnUserStatusChanged_Notification::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_OnUserStatusChanged_Notification.appid)
}

// optional .proto.steam.CGameNotifications_UserStatus status = 4 [(.proto.steam.description) = "(Optional) New status of the user."];
bool CGameNotifications_OnUserStatusChanged_Notification::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameNotifications_OnUserStatusChanged_Notification::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameNotifications_OnUserStatusChanged_Notification::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameNotifications_OnUserStatusChanged_Notification::clear_status() {
  if (status_ != NULL) status_->::proto::steam::CGameNotifications_UserStatus::Clear();
  clear_has_status();
}
const ::proto::steam::CGameNotifications_UserStatus& CGameNotifications_OnUserStatusChanged_Notification::status() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_OnUserStatusChanged_Notification.status)
  return status_ != NULL ? *status_
                         : *::proto::steam::CGameNotifications_UserStatus::internal_default_instance();
}
::proto::steam::CGameNotifications_UserStatus* CGameNotifications_OnUserStatusChanged_Notification::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::proto::steam::CGameNotifications_UserStatus;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameNotifications_OnUserStatusChanged_Notification.status)
  return status_;
}
::proto::steam::CGameNotifications_UserStatus* CGameNotifications_OnUserStatusChanged_Notification::release_status() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameNotifications_OnUserStatusChanged_Notification.status)
  clear_has_status();
  ::proto::steam::CGameNotifications_UserStatus* temp = status_;
  status_ = NULL;
  return temp;
}
void CGameNotifications_OnUserStatusChanged_Notification::set_allocated_status(::proto::steam::CGameNotifications_UserStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameNotifications_OnUserStatusChanged_Notification.status)
}

// optional bool removed = 5 [(.proto.steam.description) = "(Optional) User has been removed from the session."];
bool CGameNotifications_OnUserStatusChanged_Notification::has_removed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CGameNotifications_OnUserStatusChanged_Notification::set_has_removed() {
  _has_bits_[0] |= 0x00000010u;
}
void CGameNotifications_OnUserStatusChanged_Notification::clear_has_removed() {
  _has_bits_[0] &= ~0x00000010u;
}
void CGameNotifications_OnUserStatusChanged_Notification::clear_removed() {
  removed_ = false;
  clear_has_removed();
}
bool CGameNotifications_OnUserStatusChanged_Notification::removed() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameNotifications_OnUserStatusChanged_Notification.removed)
  return removed_;
}
void CGameNotifications_OnUserStatusChanged_Notification::set_removed(bool value) {
  set_has_removed();
  removed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameNotifications_OnUserStatusChanged_Notification.removed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GameNotifications::~GameNotifications() {}

const ::google::protobuf::ServiceDescriptor* GameNotifications::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* GameNotifications::GetDescriptor() {
  return descriptor();
}

void GameNotifications::UserCreateSession(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CGameNotifications_CreateSession_Request*,
                         ::proto::steam::CGameNotifications_CreateSession_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UserCreateSession() not implemented.");
  done->Run();
}

void GameNotifications::UserDeleteSession(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CGameNotifications_DeleteSession_Request*,
                         ::proto::steam::CGameNotifications_DeleteSession_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UserDeleteSession() not implemented.");
  done->Run();
}

void GameNotifications::UserUpdateSession(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CGameNotifications_UpdateSession_Request*,
                         ::proto::steam::CGameNotifications_UpdateSession_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UserUpdateSession() not implemented.");
  done->Run();
}

void GameNotifications::EnumerateSessions(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CGameNotifications_EnumerateSessions_Request*,
                         ::proto::steam::CGameNotifications_EnumerateSessions_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method EnumerateSessions() not implemented.");
  done->Run();
}

void GameNotifications::GetSessionDetails(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CGameNotifications_GetSessionDetails_Request*,
                         ::proto::steam::CGameNotifications_GetSessionDetails_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetSessionDetails() not implemented.");
  done->Run();
}

void GameNotifications::UpdateNotificationSettings(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CGameNotifications_UpdateNotificationSettings_Request*,
                         ::proto::steam::CGameNotifications_UpdateNotificationSettings_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateNotificationSettings() not implemented.");
  done->Run();
}

void GameNotifications::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      UserCreateSession(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CGameNotifications_CreateSession_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CGameNotifications_CreateSession_Response*>(response),
             done);
      break;
    case 1:
      UserDeleteSession(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CGameNotifications_DeleteSession_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CGameNotifications_DeleteSession_Response*>(response),
             done);
      break;
    case 2:
      UserUpdateSession(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CGameNotifications_UpdateSession_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CGameNotifications_UpdateSession_Response*>(response),
             done);
      break;
    case 3:
      EnumerateSessions(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CGameNotifications_EnumerateSessions_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CGameNotifications_EnumerateSessions_Response*>(response),
             done);
      break;
    case 4:
      GetSessionDetails(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CGameNotifications_GetSessionDetails_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CGameNotifications_GetSessionDetails_Response*>(response),
             done);
      break;
    case 5:
      UpdateNotificationSettings(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CGameNotifications_UpdateNotificationSettings_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CGameNotifications_UpdateNotificationSettings_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& GameNotifications::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CGameNotifications_CreateSession_Request::default_instance();
    case 1:
      return ::proto::steam::CGameNotifications_DeleteSession_Request::default_instance();
    case 2:
      return ::proto::steam::CGameNotifications_UpdateSession_Request::default_instance();
    case 3:
      return ::proto::steam::CGameNotifications_EnumerateSessions_Request::default_instance();
    case 4:
      return ::proto::steam::CGameNotifications_GetSessionDetails_Request::default_instance();
    case 5:
      return ::proto::steam::CGameNotifications_UpdateNotificationSettings_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& GameNotifications::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CGameNotifications_CreateSession_Response::default_instance();
    case 1:
      return ::proto::steam::CGameNotifications_DeleteSession_Response::default_instance();
    case 2:
      return ::proto::steam::CGameNotifications_UpdateSession_Response::default_instance();
    case 3:
      return ::proto::steam::CGameNotifications_EnumerateSessions_Response::default_instance();
    case 4:
      return ::proto::steam::CGameNotifications_GetSessionDetails_Response::default_instance();
    case 5:
      return ::proto::steam::CGameNotifications_UpdateNotificationSettings_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GameNotifications_Stub::GameNotifications_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GameNotifications_Stub::GameNotifications_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
GameNotifications_Stub::~GameNotifications_Stub() {
  if (owns_channel_) delete channel_;
}

void GameNotifications_Stub::UserCreateSession(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CGameNotifications_CreateSession_Request* request,
                              ::proto::steam::CGameNotifications_CreateSession_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void GameNotifications_Stub::UserDeleteSession(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CGameNotifications_DeleteSession_Request* request,
                              ::proto::steam::CGameNotifications_DeleteSession_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void GameNotifications_Stub::UserUpdateSession(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CGameNotifications_UpdateSession_Request* request,
                              ::proto::steam::CGameNotifications_UpdateSession_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void GameNotifications_Stub::EnumerateSessions(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CGameNotifications_EnumerateSessions_Request* request,
                              ::proto::steam::CGameNotifications_EnumerateSessions_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void GameNotifications_Stub::GetSessionDetails(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CGameNotifications_GetSessionDetails_Request* request,
                              ::proto::steam::CGameNotifications_GetSessionDetails_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void GameNotifications_Stub::UpdateNotificationSettings(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CGameNotifications_UpdateNotificationSettings_Request* request,
                              ::proto::steam::CGameNotifications_UpdateNotificationSettings_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
// ===================================================================

GameNotificationsClient::~GameNotificationsClient() {}

const ::google::protobuf::ServiceDescriptor* GameNotificationsClient::descriptor() {
  protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_service_descriptors[1];
}

const ::google::protobuf::ServiceDescriptor* GameNotificationsClient::GetDescriptor() {
  return descriptor();
}

void GameNotificationsClient::OnNotificationsRequested(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CGameNotifications_OnNotificationsRequested_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnNotificationsRequested() not implemented.");
  done->Run();
}

void GameNotificationsClient::OnUserStatusChanged(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CGameNotifications_OnUserStatusChanged_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnUserStatusChanged() not implemented.");
  done->Run();
}

void GameNotificationsClient::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fgamenotifications_2esteamclient_2eproto::file_level_service_descriptors[1]);
  switch(method->index()) {
    case 0:
      OnNotificationsRequested(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CGameNotifications_OnNotificationsRequested_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 1:
      OnUserStatusChanged(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CGameNotifications_OnUserStatusChanged_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& GameNotificationsClient::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CGameNotifications_OnNotificationsRequested_Notification::default_instance();
    case 1:
      return ::proto::steam::CGameNotifications_OnUserStatusChanged_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& GameNotificationsClient::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::NoResponse::default_instance();
    case 1:
      return ::proto::steam::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GameNotificationsClient_Stub::GameNotificationsClient_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GameNotificationsClient_Stub::GameNotificationsClient_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
GameNotificationsClient_Stub::~GameNotificationsClient_Stub() {
  if (owns_channel_) delete channel_;
}

void GameNotificationsClient_Stub::OnNotificationsRequested(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CGameNotifications_OnNotificationsRequested_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void GameNotificationsClient_Stub::OnUserStatusChanged(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CGameNotifications_OnUserStatusChanged_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
