// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientlanp2p.proto

#ifndef PROTOBUF_steammessages_5fclientlanp2p_2eproto__INCLUDED
#define PROTOBUF_steammessages_5fclientlanp2p_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
namespace steam {
class CCDDBAppDetailCommon;
class CCDDBAppDetailCommonDefaultTypeInternal;
extern CCDDBAppDetailCommonDefaultTypeInternal _CCDDBAppDetailCommon_default_instance_;
class CMsgAppRights;
class CMsgAppRightsDefaultTypeInternal;
extern CMsgAppRightsDefaultTypeInternal _CMsgAppRights_default_instance_;
class CMsgAuthTicket;
class CMsgAuthTicketDefaultTypeInternal;
extern CMsgAuthTicketDefaultTypeInternal _CMsgAuthTicket_default_instance_;
class CMsgClientLANP2PRequestChunks;
class CMsgClientLANP2PRequestChunksDefaultTypeInternal;
extern CMsgClientLANP2PRequestChunksDefaultTypeInternal _CMsgClientLANP2PRequestChunks_default_instance_;
class CMsgClientLANP2PRequestChunksResponse;
class CMsgClientLANP2PRequestChunksResponseDefaultTypeInternal;
extern CMsgClientLANP2PRequestChunksResponseDefaultTypeInternal _CMsgClientLANP2PRequestChunksResponse_default_instance_;
class CMsgClientLANP2PRequestChunksResponse_ChunkData;
class CMsgClientLANP2PRequestChunksResponse_ChunkDataDefaultTypeInternal;
extern CMsgClientLANP2PRequestChunksResponse_ChunkDataDefaultTypeInternal _CMsgClientLANP2PRequestChunksResponse_ChunkData_default_instance_;
class CMsgClientLANP2PRequestChunks_ChunkKey;
class CMsgClientLANP2PRequestChunks_ChunkKeyDefaultTypeInternal;
extern CMsgClientLANP2PRequestChunks_ChunkKeyDefaultTypeInternal _CMsgClientLANP2PRequestChunks_ChunkKey_default_instance_;
class CMsgMulti;
class CMsgMultiDefaultTypeInternal;
extern CMsgMultiDefaultTypeInternal _CMsgMulti_default_instance_;
class CMsgProtoBufHeader;
class CMsgProtoBufHeaderDefaultTypeInternal;
extern CMsgProtoBufHeaderDefaultTypeInternal _CMsgProtoBufHeader_default_instance_;
class CMsgProtobufWrapped;
class CMsgProtobufWrappedDefaultTypeInternal;
extern CMsgProtobufWrappedDefaultTypeInternal _CMsgProtobufWrapped_default_instance_;
}  // namespace steam
}  // namespace proto

namespace proto {
namespace steam {

namespace protobuf_steammessages_5fclientlanp2p_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_steammessages_5fclientlanp2p_2eproto

// ===================================================================

class CMsgClientLANP2PRequestChunks_ChunkKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey) */ {
 public:
  CMsgClientLANP2PRequestChunks_ChunkKey();
  virtual ~CMsgClientLANP2PRequestChunks_ChunkKey();

  CMsgClientLANP2PRequestChunks_ChunkKey(const CMsgClientLANP2PRequestChunks_ChunkKey& from);

  inline CMsgClientLANP2PRequestChunks_ChunkKey& operator=(const CMsgClientLANP2PRequestChunks_ChunkKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientLANP2PRequestChunks_ChunkKey& default_instance();

  static inline const CMsgClientLANP2PRequestChunks_ChunkKey* internal_default_instance() {
    return reinterpret_cast<const CMsgClientLANP2PRequestChunks_ChunkKey*>(
               &_CMsgClientLANP2PRequestChunks_ChunkKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CMsgClientLANP2PRequestChunks_ChunkKey* other);

  // implements Message ----------------------------------------------

  inline CMsgClientLANP2PRequestChunks_ChunkKey* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgClientLANP2PRequestChunks_ChunkKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgClientLANP2PRequestChunks_ChunkKey& from);
  void MergeFrom(const CMsgClientLANP2PRequestChunks_ChunkKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgClientLANP2PRequestChunks_ChunkKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes sha = 2;
  bool has_sha() const;
  void clear_sha();
  static const int kShaFieldNumber = 2;
  const ::std::string& sha() const;
  void set_sha(const ::std::string& value);
  #if LANG_CXX11
  void set_sha(::std::string&& value);
  #endif
  void set_sha(const char* value);
  void set_sha(const void* value, size_t size);
  ::std::string* mutable_sha();
  ::std::string* release_sha();
  void set_allocated_sha(::std::string* sha);

  // optional uint32 depot_id = 1;
  bool has_depot_id() const;
  void clear_depot_id();
  static const int kDepotIdFieldNumber = 1;
  ::google::protobuf::uint32 depot_id() const;
  void set_depot_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
 private:
  void set_has_depot_id();
  void clear_has_depot_id();
  void set_has_sha();
  void clear_has_sha();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sha_;
  ::google::protobuf::uint32 depot_id_;
  friend struct protobuf_steammessages_5fclientlanp2p_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientLANP2PRequestChunks : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgClientLANP2PRequestChunks) */ {
 public:
  CMsgClientLANP2PRequestChunks();
  virtual ~CMsgClientLANP2PRequestChunks();

  CMsgClientLANP2PRequestChunks(const CMsgClientLANP2PRequestChunks& from);

  inline CMsgClientLANP2PRequestChunks& operator=(const CMsgClientLANP2PRequestChunks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientLANP2PRequestChunks& default_instance();

  static inline const CMsgClientLANP2PRequestChunks* internal_default_instance() {
    return reinterpret_cast<const CMsgClientLANP2PRequestChunks*>(
               &_CMsgClientLANP2PRequestChunks_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CMsgClientLANP2PRequestChunks* other);

  // implements Message ----------------------------------------------

  inline CMsgClientLANP2PRequestChunks* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgClientLANP2PRequestChunks* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgClientLANP2PRequestChunks& from);
  void MergeFrom(const CMsgClientLANP2PRequestChunks& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgClientLANP2PRequestChunks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgClientLANP2PRequestChunks_ChunkKey ChunkKey;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey chunk_keys = 1;
  int chunk_keys_size() const;
  void clear_chunk_keys();
  static const int kChunkKeysFieldNumber = 1;
  const ::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey& chunk_keys(int index) const;
  ::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey* mutable_chunk_keys(int index);
  ::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey* add_chunk_keys();
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey >*
      mutable_chunk_keys();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey >&
      chunk_keys() const;

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgClientLANP2PRequestChunks)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey > chunk_keys_;
  friend struct protobuf_steammessages_5fclientlanp2p_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientLANP2PRequestChunksResponse_ChunkData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData) */ {
 public:
  CMsgClientLANP2PRequestChunksResponse_ChunkData();
  virtual ~CMsgClientLANP2PRequestChunksResponse_ChunkData();

  CMsgClientLANP2PRequestChunksResponse_ChunkData(const CMsgClientLANP2PRequestChunksResponse_ChunkData& from);

  inline CMsgClientLANP2PRequestChunksResponse_ChunkData& operator=(const CMsgClientLANP2PRequestChunksResponse_ChunkData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientLANP2PRequestChunksResponse_ChunkData& default_instance();

  static inline const CMsgClientLANP2PRequestChunksResponse_ChunkData* internal_default_instance() {
    return reinterpret_cast<const CMsgClientLANP2PRequestChunksResponse_ChunkData*>(
               &_CMsgClientLANP2PRequestChunksResponse_ChunkData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CMsgClientLANP2PRequestChunksResponse_ChunkData* other);

  // implements Message ----------------------------------------------

  inline CMsgClientLANP2PRequestChunksResponse_ChunkData* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgClientLANP2PRequestChunksResponse_ChunkData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgClientLANP2PRequestChunksResponse_ChunkData& from);
  void MergeFrom(const CMsgClientLANP2PRequestChunksResponse_ChunkData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgClientLANP2PRequestChunksResponse_ChunkData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes sha = 3;
  bool has_sha() const;
  void clear_sha();
  static const int kShaFieldNumber = 3;
  const ::std::string& sha() const;
  void set_sha(const ::std::string& value);
  #if LANG_CXX11
  void set_sha(::std::string&& value);
  #endif
  void set_sha(const char* value);
  void set_sha(const void* value, size_t size);
  ::std::string* mutable_sha();
  ::std::string* release_sha();
  void set_allocated_sha(::std::string* sha);

  // optional bytes chunk_data = 4;
  bool has_chunk_data() const;
  void clear_chunk_data();
  static const int kChunkDataFieldNumber = 4;
  const ::std::string& chunk_data() const;
  void set_chunk_data(const ::std::string& value);
  #if LANG_CXX11
  void set_chunk_data(::std::string&& value);
  #endif
  void set_chunk_data(const char* value);
  void set_chunk_data(const void* value, size_t size);
  ::std::string* mutable_chunk_data();
  ::std::string* release_chunk_data();
  void set_allocated_chunk_data(::std::string* chunk_data);

  // optional uint32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // optional uint32 depot_id = 2;
  bool has_depot_id() const;
  void clear_depot_id();
  static const int kDepotIdFieldNumber = 2;
  ::google::protobuf::uint32 depot_id() const;
  void set_depot_id(::google::protobuf::uint32 value);

  // optional bool encrypted = 5;
  bool has_encrypted() const;
  void clear_encrypted();
  static const int kEncryptedFieldNumber = 5;
  bool encrypted() const;
  void set_encrypted(bool value);

  // optional bool compressed = 6;
  bool has_compressed() const;
  void clear_compressed();
  static const int kCompressedFieldNumber = 6;
  bool compressed() const;
  void set_compressed(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_depot_id();
  void clear_has_depot_id();
  void set_has_sha();
  void clear_has_sha();
  void set_has_chunk_data();
  void clear_has_chunk_data();
  void set_has_encrypted();
  void clear_has_encrypted();
  void set_has_compressed();
  void clear_has_compressed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sha_;
  ::google::protobuf::internal::ArenaStringPtr chunk_data_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 depot_id_;
  bool encrypted_;
  bool compressed_;
  friend struct protobuf_steammessages_5fclientlanp2p_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientLANP2PRequestChunksResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgClientLANP2PRequestChunksResponse) */ {
 public:
  CMsgClientLANP2PRequestChunksResponse();
  virtual ~CMsgClientLANP2PRequestChunksResponse();

  CMsgClientLANP2PRequestChunksResponse(const CMsgClientLANP2PRequestChunksResponse& from);

  inline CMsgClientLANP2PRequestChunksResponse& operator=(const CMsgClientLANP2PRequestChunksResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientLANP2PRequestChunksResponse& default_instance();

  static inline const CMsgClientLANP2PRequestChunksResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientLANP2PRequestChunksResponse*>(
               &_CMsgClientLANP2PRequestChunksResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CMsgClientLANP2PRequestChunksResponse* other);

  // implements Message ----------------------------------------------

  inline CMsgClientLANP2PRequestChunksResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgClientLANP2PRequestChunksResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgClientLANP2PRequestChunksResponse& from);
  void MergeFrom(const CMsgClientLANP2PRequestChunksResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgClientLANP2PRequestChunksResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgClientLANP2PRequestChunksResponse_ChunkData ChunkData;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData chunk_responses = 1;
  int chunk_responses_size() const;
  void clear_chunk_responses();
  static const int kChunkResponsesFieldNumber = 1;
  const ::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData& chunk_responses(int index) const;
  ::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData* mutable_chunk_responses(int index);
  ::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData* add_chunk_responses();
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData >*
      mutable_chunk_responses();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData >&
      chunk_responses() const;

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgClientLANP2PRequestChunksResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData > chunk_responses_;
  friend struct protobuf_steammessages_5fclientlanp2p_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientLANP2PRequestChunks_ChunkKey

// optional uint32 depot_id = 1;
inline bool CMsgClientLANP2PRequestChunks_ChunkKey::has_depot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientLANP2PRequestChunks_ChunkKey::set_has_depot_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientLANP2PRequestChunks_ChunkKey::clear_has_depot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientLANP2PRequestChunks_ChunkKey::clear_depot_id() {
  depot_id_ = 0u;
  clear_has_depot_id();
}
inline ::google::protobuf::uint32 CMsgClientLANP2PRequestChunks_ChunkKey::depot_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey.depot_id)
  return depot_id_;
}
inline void CMsgClientLANP2PRequestChunks_ChunkKey::set_depot_id(::google::protobuf::uint32 value) {
  set_has_depot_id();
  depot_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey.depot_id)
}

// optional bytes sha = 2;
inline bool CMsgClientLANP2PRequestChunks_ChunkKey::has_sha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientLANP2PRequestChunks_ChunkKey::set_has_sha() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientLANP2PRequestChunks_ChunkKey::clear_has_sha() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientLANP2PRequestChunks_ChunkKey::clear_sha() {
  sha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha();
}
inline const ::std::string& CMsgClientLANP2PRequestChunks_ChunkKey::sha() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey.sha)
  return sha_.GetNoArena();
}
inline void CMsgClientLANP2PRequestChunks_ChunkKey::set_sha(const ::std::string& value) {
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey.sha)
}
#if LANG_CXX11
inline void CMsgClientLANP2PRequestChunks_ChunkKey::set_sha(::std::string&& value) {
  set_has_sha();
  sha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey.sha)
}
#endif
inline void CMsgClientLANP2PRequestChunks_ChunkKey::set_sha(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey.sha)
}
inline void CMsgClientLANP2PRequestChunks_ChunkKey::set_sha(const void* value, size_t size) {
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey.sha)
}
inline ::std::string* CMsgClientLANP2PRequestChunks_ChunkKey::mutable_sha() {
  set_has_sha();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey.sha)
  return sha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLANP2PRequestChunks_ChunkKey::release_sha() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey.sha)
  clear_has_sha();
  return sha_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLANP2PRequestChunks_ChunkKey::set_allocated_sha(::std::string* sha) {
  if (sha != NULL) {
    set_has_sha();
  } else {
    clear_has_sha();
  }
  sha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey.sha)
}

// -------------------------------------------------------------------

// CMsgClientLANP2PRequestChunks

// repeated .proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey chunk_keys = 1;
inline int CMsgClientLANP2PRequestChunks::chunk_keys_size() const {
  return chunk_keys_.size();
}
inline void CMsgClientLANP2PRequestChunks::clear_chunk_keys() {
  chunk_keys_.Clear();
}
inline const ::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey& CMsgClientLANP2PRequestChunks::chunk_keys(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLANP2PRequestChunks.chunk_keys)
  return chunk_keys_.Get(index);
}
inline ::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey* CMsgClientLANP2PRequestChunks::mutable_chunk_keys(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLANP2PRequestChunks.chunk_keys)
  return chunk_keys_.Mutable(index);
}
inline ::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey* CMsgClientLANP2PRequestChunks::add_chunk_keys() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientLANP2PRequestChunks.chunk_keys)
  return chunk_keys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey >*
CMsgClientLANP2PRequestChunks::mutable_chunk_keys() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientLANP2PRequestChunks.chunk_keys)
  return &chunk_keys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey >&
CMsgClientLANP2PRequestChunks::chunk_keys() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientLANP2PRequestChunks.chunk_keys)
  return chunk_keys_;
}

// -------------------------------------------------------------------

// CMsgClientLANP2PRequestChunksResponse_ChunkData

// optional uint32 result = 1;
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 CMsgClientLANP2PRequestChunksResponse_ChunkData::result() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.result)
  return result_;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.result)
}

// optional uint32 depot_id = 2;
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::has_depot_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_has_depot_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_has_depot_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_depot_id() {
  depot_id_ = 0u;
  clear_has_depot_id();
}
inline ::google::protobuf::uint32 CMsgClientLANP2PRequestChunksResponse_ChunkData::depot_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.depot_id)
  return depot_id_;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_depot_id(::google::protobuf::uint32 value) {
  set_has_depot_id();
  depot_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.depot_id)
}

// optional bytes sha = 3;
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::has_sha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_has_sha() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_has_sha() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_sha() {
  sha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha();
}
inline const ::std::string& CMsgClientLANP2PRequestChunksResponse_ChunkData::sha() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.sha)
  return sha_.GetNoArena();
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_sha(const ::std::string& value) {
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.sha)
}
#if LANG_CXX11
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_sha(::std::string&& value) {
  set_has_sha();
  sha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.sha)
}
#endif
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_sha(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.sha)
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_sha(const void* value, size_t size) {
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.sha)
}
inline ::std::string* CMsgClientLANP2PRequestChunksResponse_ChunkData::mutable_sha() {
  set_has_sha();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.sha)
  return sha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLANP2PRequestChunksResponse_ChunkData::release_sha() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.sha)
  clear_has_sha();
  return sha_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_allocated_sha(::std::string* sha) {
  if (sha != NULL) {
    set_has_sha();
  } else {
    clear_has_sha();
  }
  sha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.sha)
}

// optional bytes chunk_data = 4;
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::has_chunk_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_has_chunk_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_has_chunk_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_chunk_data() {
  chunk_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chunk_data();
}
inline const ::std::string& CMsgClientLANP2PRequestChunksResponse_ChunkData::chunk_data() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.chunk_data)
  return chunk_data_.GetNoArena();
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_chunk_data(const ::std::string& value) {
  set_has_chunk_data();
  chunk_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.chunk_data)
}
#if LANG_CXX11
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_chunk_data(::std::string&& value) {
  set_has_chunk_data();
  chunk_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.chunk_data)
}
#endif
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_chunk_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chunk_data();
  chunk_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.chunk_data)
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_chunk_data(const void* value, size_t size) {
  set_has_chunk_data();
  chunk_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.chunk_data)
}
inline ::std::string* CMsgClientLANP2PRequestChunksResponse_ChunkData::mutable_chunk_data() {
  set_has_chunk_data();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.chunk_data)
  return chunk_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientLANP2PRequestChunksResponse_ChunkData::release_chunk_data() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.chunk_data)
  clear_has_chunk_data();
  return chunk_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_allocated_chunk_data(::std::string* chunk_data) {
  if (chunk_data != NULL) {
    set_has_chunk_data();
  } else {
    clear_has_chunk_data();
  }
  chunk_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chunk_data);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.chunk_data)
}

// optional bool encrypted = 5;
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::has_encrypted() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_has_encrypted() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_has_encrypted() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_encrypted() {
  encrypted_ = false;
  clear_has_encrypted();
}
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::encrypted() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.encrypted)
  return encrypted_;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_encrypted(bool value) {
  set_has_encrypted();
  encrypted_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.encrypted)
}

// optional bool compressed = 6;
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::has_compressed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_has_compressed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_has_compressed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_compressed() {
  compressed_ = false;
  clear_has_compressed();
}
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::compressed() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.compressed)
  return compressed_;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_compressed(bool value) {
  set_has_compressed();
  compressed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.compressed)
}

// -------------------------------------------------------------------

// CMsgClientLANP2PRequestChunksResponse

// repeated .proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData chunk_responses = 1;
inline int CMsgClientLANP2PRequestChunksResponse::chunk_responses_size() const {
  return chunk_responses_.size();
}
inline void CMsgClientLANP2PRequestChunksResponse::clear_chunk_responses() {
  chunk_responses_.Clear();
}
inline const ::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData& CMsgClientLANP2PRequestChunksResponse::chunk_responses(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLANP2PRequestChunksResponse.chunk_responses)
  return chunk_responses_.Get(index);
}
inline ::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData* CMsgClientLANP2PRequestChunksResponse::mutable_chunk_responses(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLANP2PRequestChunksResponse.chunk_responses)
  return chunk_responses_.Mutable(index);
}
inline ::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData* CMsgClientLANP2PRequestChunksResponse::add_chunk_responses() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientLANP2PRequestChunksResponse.chunk_responses)
  return chunk_responses_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData >*
CMsgClientLANP2PRequestChunksResponse::mutable_chunk_responses() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientLANP2PRequestChunksResponse.chunk_responses)
  return &chunk_responses_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData >&
CMsgClientLANP2PRequestChunksResponse::chunk_responses() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientLANP2PRequestChunksResponse.chunk_responses)
  return chunk_responses_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_steammessages_5fclientlanp2p_2eproto__INCLUDED
