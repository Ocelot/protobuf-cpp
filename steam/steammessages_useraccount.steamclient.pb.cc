// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_useraccount.steamclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_useraccount.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CUserAccount_GetAccountLinkStatus_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserAccount_GetAccountLinkStatus_Request> {
} _CUserAccount_GetAccountLinkStatus_Request_default_instance_;
class CUserAccount_GetAccountLinkStatus_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserAccount_GetAccountLinkStatus_Response> {
} _CUserAccount_GetAccountLinkStatus_Response_default_instance_;

namespace protobuf_steammessages_5fuseraccount_2esteamclient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserAccount_GetAccountLinkStatus_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserAccount_GetAccountLinkStatus_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserAccount_GetAccountLinkStatus_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserAccount_GetAccountLinkStatus_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserAccount_GetAccountLinkStatus_Response, pwid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserAccount_GetAccountLinkStatus_Response, identity_verification_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 5, sizeof(CUserAccount_GetAccountLinkStatus_Request)},
  { 5, 12, sizeof(CUserAccount_GetAccountLinkStatus_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserAccount_GetAccountLinkStatus_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserAccount_GetAccountLinkStatus_Response_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_useraccount.steamclient.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _CUserAccount_GetAccountLinkStatus_Request_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CUserAccount_GetAccountLinkStatus_Response_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::InitDefaults();
  _CUserAccount_GetAccountLinkStatus_Request_default_instance_.DefaultConstruct();
  _CUserAccount_GetAccountLinkStatus_Response_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n+steammessages_useraccount.steamclient."
      "proto\022\013proto.steam\032,steammessages_unifie"
      "d_base.steamclient.proto\"+\n)CUserAccount"
      "_GetAccountLinkStatus_Request\"Y\n*CUserAc"
      "count_GetAccountLinkStatus_Response\022\014\n\004p"
      "wid\030\001 \001(\r\022\035\n\025identity_verification\030\002 \001(\r"
      "2\347\001\n\013UserAccount\022\250\001\n\024GetAccountLinkStatu"
      "s\0226.proto.steam.CUserAccount_GetAccountL"
      "inkStatus_Request\0327.proto.steam.CUserAcc"
      "ount_GetAccountLinkStatus_Response\"\037\202\265\030\033"
      "Fetches account link status\032-\202\265\030)A servi"
      "ce to get user account informationB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 479);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_useraccount.steamclient.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fuseraccount_2esteamclient_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserAccount_GetAccountLinkStatus_Request::CUserAccount_GetAccountLinkStatus_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fuseraccount_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
}
CUserAccount_GetAccountLinkStatus_Request::CUserAccount_GetAccountLinkStatus_Request(const CUserAccount_GetAccountLinkStatus_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
}

void CUserAccount_GetAccountLinkStatus_Request::SharedCtor() {
  _cached_size_ = 0;
}

CUserAccount_GetAccountLinkStatus_Request::~CUserAccount_GetAccountLinkStatus_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  SharedDtor();
}

void CUserAccount_GetAccountLinkStatus_Request::SharedDtor() {
}

void CUserAccount_GetAccountLinkStatus_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserAccount_GetAccountLinkStatus_Request::descriptor() {
  protobuf_steammessages_5fuseraccount_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fuseraccount_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserAccount_GetAccountLinkStatus_Request& CUserAccount_GetAccountLinkStatus_Request::default_instance() {
  protobuf_steammessages_5fuseraccount_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserAccount_GetAccountLinkStatus_Request* CUserAccount_GetAccountLinkStatus_Request::New(::google::protobuf::Arena* arena) const {
  CUserAccount_GetAccountLinkStatus_Request* n = new CUserAccount_GetAccountLinkStatus_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserAccount_GetAccountLinkStatus_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserAccount_GetAccountLinkStatus_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  return false;
#undef DO_
}

void CUserAccount_GetAccountLinkStatus_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
}

::google::protobuf::uint8* CUserAccount_GetAccountLinkStatus_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  return target;
}

size_t CUserAccount_GetAccountLinkStatus_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserAccount_GetAccountLinkStatus_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_GetAccountLinkStatus_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserAccount_GetAccountLinkStatus_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
    MergeFrom(*source);
  }
}

void CUserAccount_GetAccountLinkStatus_Request::MergeFrom(const CUserAccount_GetAccountLinkStatus_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CUserAccount_GetAccountLinkStatus_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_GetAccountLinkStatus_Request::CopyFrom(const CUserAccount_GetAccountLinkStatus_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_GetAccountLinkStatus_Request::IsInitialized() const {
  return true;
}

void CUserAccount_GetAccountLinkStatus_Request::Swap(CUserAccount_GetAccountLinkStatus_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserAccount_GetAccountLinkStatus_Request::InternalSwap(CUserAccount_GetAccountLinkStatus_Request* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserAccount_GetAccountLinkStatus_Request::GetMetadata() const {
  protobuf_steammessages_5fuseraccount_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fuseraccount_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserAccount_GetAccountLinkStatus_Request

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserAccount_GetAccountLinkStatus_Response::kPwidFieldNumber;
const int CUserAccount_GetAccountLinkStatus_Response::kIdentityVerificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserAccount_GetAccountLinkStatus_Response::CUserAccount_GetAccountLinkStatus_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fuseraccount_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
}
CUserAccount_GetAccountLinkStatus_Response::CUserAccount_GetAccountLinkStatus_Response(const CUserAccount_GetAccountLinkStatus_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pwid_, &from.pwid_,
    reinterpret_cast<char*>(&identity_verification_) -
    reinterpret_cast<char*>(&pwid_) + sizeof(identity_verification_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
}

void CUserAccount_GetAccountLinkStatus_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pwid_, 0, reinterpret_cast<char*>(&identity_verification_) -
    reinterpret_cast<char*>(&pwid_) + sizeof(identity_verification_));
}

CUserAccount_GetAccountLinkStatus_Response::~CUserAccount_GetAccountLinkStatus_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  SharedDtor();
}

void CUserAccount_GetAccountLinkStatus_Response::SharedDtor() {
}

void CUserAccount_GetAccountLinkStatus_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserAccount_GetAccountLinkStatus_Response::descriptor() {
  protobuf_steammessages_5fuseraccount_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fuseraccount_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserAccount_GetAccountLinkStatus_Response& CUserAccount_GetAccountLinkStatus_Response::default_instance() {
  protobuf_steammessages_5fuseraccount_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserAccount_GetAccountLinkStatus_Response* CUserAccount_GetAccountLinkStatus_Response::New(::google::protobuf::Arena* arena) const {
  CUserAccount_GetAccountLinkStatus_Response* n = new CUserAccount_GetAccountLinkStatus_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserAccount_GetAccountLinkStatus_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&pwid_, 0, reinterpret_cast<char*>(&identity_verification_) -
      reinterpret_cast<char*>(&pwid_) + sizeof(identity_verification_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserAccount_GetAccountLinkStatus_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pwid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_pwid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pwid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 identity_verification = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_identity_verification();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identity_verification_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  return false;
#undef DO_
}

void CUserAccount_GetAccountLinkStatus_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pwid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pwid(), output);
  }

  // optional uint32 identity_verification = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->identity_verification(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
}

::google::protobuf::uint8* CUserAccount_GetAccountLinkStatus_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pwid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pwid(), target);
  }

  // optional uint32 identity_verification = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->identity_verification(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  return target;
}

size_t CUserAccount_GetAccountLinkStatus_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 pwid = 1;
    if (has_pwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pwid());
    }

    // optional uint32 identity_verification = 2;
    if (has_identity_verification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->identity_verification());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserAccount_GetAccountLinkStatus_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserAccount_GetAccountLinkStatus_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserAccount_GetAccountLinkStatus_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
    MergeFrom(*source);
  }
}

void CUserAccount_GetAccountLinkStatus_Response::MergeFrom(const CUserAccount_GetAccountLinkStatus_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      pwid_ = from.pwid_;
    }
    if (cached_has_bits & 0x00000002u) {
      identity_verification_ = from.identity_verification_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserAccount_GetAccountLinkStatus_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserAccount_GetAccountLinkStatus_Response::CopyFrom(const CUserAccount_GetAccountLinkStatus_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserAccount_GetAccountLinkStatus_Response::IsInitialized() const {
  return true;
}

void CUserAccount_GetAccountLinkStatus_Response::Swap(CUserAccount_GetAccountLinkStatus_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserAccount_GetAccountLinkStatus_Response::InternalSwap(CUserAccount_GetAccountLinkStatus_Response* other) {
  std::swap(pwid_, other->pwid_);
  std::swap(identity_verification_, other->identity_verification_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserAccount_GetAccountLinkStatus_Response::GetMetadata() const {
  protobuf_steammessages_5fuseraccount_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fuseraccount_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserAccount_GetAccountLinkStatus_Response

// optional uint32 pwid = 1;
bool CUserAccount_GetAccountLinkStatus_Response::has_pwid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserAccount_GetAccountLinkStatus_Response::set_has_pwid() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserAccount_GetAccountLinkStatus_Response::clear_has_pwid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserAccount_GetAccountLinkStatus_Response::clear_pwid() {
  pwid_ = 0u;
  clear_has_pwid();
}
::google::protobuf::uint32 CUserAccount_GetAccountLinkStatus_Response::pwid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CUserAccount_GetAccountLinkStatus_Response.pwid)
  return pwid_;
}
void CUserAccount_GetAccountLinkStatus_Response::set_pwid(::google::protobuf::uint32 value) {
  set_has_pwid();
  pwid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CUserAccount_GetAccountLinkStatus_Response.pwid)
}

// optional uint32 identity_verification = 2;
bool CUserAccount_GetAccountLinkStatus_Response::has_identity_verification() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserAccount_GetAccountLinkStatus_Response::set_has_identity_verification() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserAccount_GetAccountLinkStatus_Response::clear_has_identity_verification() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserAccount_GetAccountLinkStatus_Response::clear_identity_verification() {
  identity_verification_ = 0u;
  clear_has_identity_verification();
}
::google::protobuf::uint32 CUserAccount_GetAccountLinkStatus_Response::identity_verification() const {
  // @@protoc_insertion_point(field_get:proto.steam.CUserAccount_GetAccountLinkStatus_Response.identity_verification)
  return identity_verification_;
}
void CUserAccount_GetAccountLinkStatus_Response::set_identity_verification(::google::protobuf::uint32 value) {
  set_has_identity_verification();
  identity_verification_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CUserAccount_GetAccountLinkStatus_Response.identity_verification)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

UserAccount::~UserAccount() {}

const ::google::protobuf::ServiceDescriptor* UserAccount::descriptor() {
  protobuf_steammessages_5fuseraccount_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fuseraccount_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* UserAccount::GetDescriptor() {
  return descriptor();
}

void UserAccount::GetAccountLinkStatus(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CUserAccount_GetAccountLinkStatus_Request*,
                         ::proto::steam::CUserAccount_GetAccountLinkStatus_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAccountLinkStatus() not implemented.");
  done->Run();
}

void UserAccount::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fuseraccount_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      GetAccountLinkStatus(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CUserAccount_GetAccountLinkStatus_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CUserAccount_GetAccountLinkStatus_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& UserAccount::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CUserAccount_GetAccountLinkStatus_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& UserAccount::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CUserAccount_GetAccountLinkStatus_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

UserAccount_Stub::UserAccount_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
UserAccount_Stub::UserAccount_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
UserAccount_Stub::~UserAccount_Stub() {
  if (owns_channel_) delete channel_;
}

void UserAccount_Stub::GetAccountLinkStatus(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CUserAccount_GetAccountLinkStatus_Request* request,
                              ::proto::steam::CUserAccount_GetAccountLinkStatus_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
