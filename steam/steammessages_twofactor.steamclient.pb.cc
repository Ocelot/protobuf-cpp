// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_twofactor.steamclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_twofactor.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CTwoFactor_Status_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_Status_Request> {
} _CTwoFactor_Status_Request_default_instance_;
class CTwoFactor_Status_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_Status_Response> {
} _CTwoFactor_Status_Response_default_instance_;
class CTwoFactor_AddAuthenticator_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_AddAuthenticator_Request> {
} _CTwoFactor_AddAuthenticator_Request_default_instance_;
class CTwoFactor_AddAuthenticator_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_AddAuthenticator_Response> {
} _CTwoFactor_AddAuthenticator_Response_default_instance_;
class CTwoFactor_SendEmail_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_SendEmail_Request> {
} _CTwoFactor_SendEmail_Request_default_instance_;
class CTwoFactor_SendEmail_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_SendEmail_Response> {
} _CTwoFactor_SendEmail_Response_default_instance_;
class CTwoFactor_FinalizeAddAuthenticator_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_FinalizeAddAuthenticator_Request> {
} _CTwoFactor_FinalizeAddAuthenticator_Request_default_instance_;
class CTwoFactor_FinalizeAddAuthenticator_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_FinalizeAddAuthenticator_Response> {
} _CTwoFactor_FinalizeAddAuthenticator_Response_default_instance_;
class CTwoFactor_RemoveAuthenticator_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_RemoveAuthenticator_Request> {
} _CTwoFactor_RemoveAuthenticator_Request_default_instance_;
class CTwoFactor_RemoveAuthenticator_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_RemoveAuthenticator_Response> {
} _CTwoFactor_RemoveAuthenticator_Response_default_instance_;
class CTwoFactor_CreateEmergencyCodes_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_CreateEmergencyCodes_Request> {
} _CTwoFactor_CreateEmergencyCodes_Request_default_instance_;
class CTwoFactor_CreateEmergencyCodes_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_CreateEmergencyCodes_Response> {
} _CTwoFactor_CreateEmergencyCodes_Response_default_instance_;
class CTwoFactor_DestroyEmergencyCodes_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_DestroyEmergencyCodes_Request> {
} _CTwoFactor_DestroyEmergencyCodes_Request_default_instance_;
class CTwoFactor_DestroyEmergencyCodes_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_DestroyEmergencyCodes_Response> {
} _CTwoFactor_DestroyEmergencyCodes_Response_default_instance_;
class CTwoFactor_ValidateToken_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_ValidateToken_Request> {
} _CTwoFactor_ValidateToken_Request_default_instance_;
class CTwoFactor_ValidateToken_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_ValidateToken_Response> {
} _CTwoFactor_ValidateToken_Response_default_instance_;

namespace protobuf_steammessages_5ftwofactor_2esteamclient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[16];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_Status_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_Status_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_Status_Request, steamid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_Status_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_Status_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_Status_Response, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_Status_Response, inactivation_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_Status_Response, authenticator_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_Status_Response, authenticator_allowed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_Status_Response, steamguard_scheme_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_Status_Response, token_gid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_Status_Response, email_validated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_Status_Response, device_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_Status_Response, time_created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_Status_Response, revocation_attempts_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_Status_Response, classified_agent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_Status_Response, allow_external_authenticator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_Status_Response, external_authenticator_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_Status_Response, time_transferred_),
  3,
  4,
  5,
  7,
  6,
  0,
  8,
  1,
  10,
  11,
  2,
  9,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Request, authenticator_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Request, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Request, authenticator_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Request, device_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Request, sms_phone_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Request, http_headers_),
  2,
  3,
  4,
  5,
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Response, shared_secret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Response, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Response, revocation_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Response, uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Response, server_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Response, account_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Response, token_gid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Response, identity_secret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Response, secret_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Response, status_),
  0,
  7,
  1,
  2,
  8,
  3,
  4,
  5,
  6,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_SendEmail_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_SendEmail_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_SendEmail_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_SendEmail_Request, email_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_SendEmail_Request, include_activation_code_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_SendEmail_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_SendEmail_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_FinalizeAddAuthenticator_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_FinalizeAddAuthenticator_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_FinalizeAddAuthenticator_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_FinalizeAddAuthenticator_Request, authenticator_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_FinalizeAddAuthenticator_Request, authenticator_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_FinalizeAddAuthenticator_Request, activation_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_FinalizeAddAuthenticator_Request, http_headers_),
  2,
  0,
  3,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_FinalizeAddAuthenticator_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_FinalizeAddAuthenticator_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_FinalizeAddAuthenticator_Response, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_FinalizeAddAuthenticator_Response, want_more_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_FinalizeAddAuthenticator_Response, server_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_FinalizeAddAuthenticator_Response, status_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_RemoveAuthenticator_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_RemoveAuthenticator_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_RemoveAuthenticator_Request, revocation_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_RemoveAuthenticator_Request, revocation_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_RemoveAuthenticator_Request, steamguard_scheme_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_RemoveAuthenticator_Request, remove_all_steamguard_cookies_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_RemoveAuthenticator_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_RemoveAuthenticator_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_RemoveAuthenticator_Response, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_RemoveAuthenticator_Response, server_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_RemoveAuthenticator_Response, revocation_attempts_remaining_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_CreateEmergencyCodes_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_CreateEmergencyCodes_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_CreateEmergencyCodes_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_CreateEmergencyCodes_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_CreateEmergencyCodes_Response, codes_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_DestroyEmergencyCodes_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_DestroyEmergencyCodes_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_DestroyEmergencyCodes_Request, steamid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_DestroyEmergencyCodes_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_DestroyEmergencyCodes_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_ValidateToken_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_ValidateToken_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_ValidateToken_Request, code_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_ValidateToken_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_ValidateToken_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTwoFactor_ValidateToken_Response, valid_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(CTwoFactor_Status_Request)},
  { 7, 26, sizeof(CTwoFactor_Status_Response)},
  { 40, 52, sizeof(CTwoFactor_AddAuthenticator_Request)},
  { 59, 74, sizeof(CTwoFactor_AddAuthenticator_Response)},
  { 84, 92, sizeof(CTwoFactor_SendEmail_Request)},
  { 95, 100, sizeof(CTwoFactor_SendEmail_Response)},
  { 100, 110, sizeof(CTwoFactor_FinalizeAddAuthenticator_Request)},
  { 115, 124, sizeof(CTwoFactor_FinalizeAddAuthenticator_Response)},
  { 128, 137, sizeof(CTwoFactor_RemoveAuthenticator_Request)},
  { 141, 149, sizeof(CTwoFactor_RemoveAuthenticator_Response)},
  { 152, 157, sizeof(CTwoFactor_CreateEmergencyCodes_Request)},
  { 157, 163, sizeof(CTwoFactor_CreateEmergencyCodes_Response)},
  { 164, 170, sizeof(CTwoFactor_DestroyEmergencyCodes_Request)},
  { 171, 176, sizeof(CTwoFactor_DestroyEmergencyCodes_Response)},
  { 176, 182, sizeof(CTwoFactor_ValidateToken_Request)},
  { 183, 189, sizeof(CTwoFactor_ValidateToken_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CTwoFactor_Status_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CTwoFactor_Status_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CTwoFactor_AddAuthenticator_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CTwoFactor_AddAuthenticator_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CTwoFactor_SendEmail_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CTwoFactor_SendEmail_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CTwoFactor_FinalizeAddAuthenticator_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CTwoFactor_FinalizeAddAuthenticator_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CTwoFactor_RemoveAuthenticator_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CTwoFactor_RemoveAuthenticator_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CTwoFactor_CreateEmergencyCodes_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CTwoFactor_CreateEmergencyCodes_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CTwoFactor_DestroyEmergencyCodes_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CTwoFactor_DestroyEmergencyCodes_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CTwoFactor_ValidateToken_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CTwoFactor_ValidateToken_Response_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_twofactor.steamclient.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 16);
}

}  // namespace

void TableStruct::Shutdown() {
  _CTwoFactor_Status_Request_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CTwoFactor_Status_Response_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CTwoFactor_AddAuthenticator_Request_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CTwoFactor_AddAuthenticator_Response_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CTwoFactor_SendEmail_Request_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CTwoFactor_SendEmail_Response_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CTwoFactor_FinalizeAddAuthenticator_Request_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CTwoFactor_FinalizeAddAuthenticator_Response_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CTwoFactor_RemoveAuthenticator_Request_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CTwoFactor_RemoveAuthenticator_Response_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CTwoFactor_CreateEmergencyCodes_Request_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CTwoFactor_CreateEmergencyCodes_Response_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CTwoFactor_DestroyEmergencyCodes_Request_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CTwoFactor_DestroyEmergencyCodes_Response_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CTwoFactor_ValidateToken_Request_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CTwoFactor_ValidateToken_Response_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::InitDefaults();
  _CTwoFactor_Status_Request_default_instance_.DefaultConstruct();
  _CTwoFactor_Status_Response_default_instance_.DefaultConstruct();
  _CTwoFactor_AddAuthenticator_Request_default_instance_.DefaultConstruct();
  _CTwoFactor_AddAuthenticator_Response_default_instance_.DefaultConstruct();
  _CTwoFactor_SendEmail_Request_default_instance_.DefaultConstruct();
  _CTwoFactor_SendEmail_Response_default_instance_.DefaultConstruct();
  _CTwoFactor_FinalizeAddAuthenticator_Request_default_instance_.DefaultConstruct();
  _CTwoFactor_FinalizeAddAuthenticator_Response_default_instance_.DefaultConstruct();
  _CTwoFactor_RemoveAuthenticator_Request_default_instance_.DefaultConstruct();
  _CTwoFactor_RemoveAuthenticator_Response_default_instance_.DefaultConstruct();
  _CTwoFactor_CreateEmergencyCodes_Request_default_instance_.DefaultConstruct();
  _CTwoFactor_CreateEmergencyCodes_Response_default_instance_.DefaultConstruct();
  _CTwoFactor_DestroyEmergencyCodes_Request_default_instance_.DefaultConstruct();
  _CTwoFactor_DestroyEmergencyCodes_Response_default_instance_.DefaultConstruct();
  _CTwoFactor_ValidateToken_Request_default_instance_.DefaultConstruct();
  _CTwoFactor_ValidateToken_Response_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n)steammessages_twofactor.steamclient.pr"
      "oto\022\013proto.steam\032,steammessages_unified_"
      "base.steamclient.proto\"@\n\031CTwoFactor_Sta"
      "tus_Request\022#\n\007steamid\030\001 \001(\006B\022\202\265\030\016steami"
      "d to use\"\222\010\n\032CTwoFactor_Status_Response\022"
      "&\n\005state\030\001 \001(\rB\027\202\265\030\023Authenticator state\022"
      "=\n\023inactivation_reason\030\002 \001(\rB \202\265\030\034Inacti"
      "vation reason (if any)\0225\n\022authenticator_"
      "type\030\003 \001(\rB\031\202\265\030\025Type of authenticator\022L\n"
      "\025authenticator_allowed\030\004 \001(\010B-\202\265\030)Accoun"
      "t allowed to have an authenticator\?\022;\n\021s"
      "teamguard_scheme\030\005 \001(\rB \202\265\030\034Steam Guard "
      "scheme in effect\022A\n\ttoken_gid\030\006 \001(\tB.\202\265\030"
      "*String rep of token GID assigned by ser"
      "ver\022B\n\017email_validated\030\007 \001(\010B)\202\265\030%Accoun"
      "t has verified email capability\022\?\n\021devic"
      "e_identifier\030\010 \001(\tB$\202\265\030 Authenticator (p"
      "hone) identifier\0224\n\014time_created\030\t \001(\rB\036"
      "\202\265\030\032When the token was created\022W\n\035revoca"
      "tion_attempts_remaining\030\n \001(\rB0\202\265\030,Numbe"
      "r of revocation code attempts remaining\022"
      "^\n\020classified_agent\030\013 \001(\tBD\202\265\030@Agent tha"
      "t added the authenticator (e.g., ios / a"
      "ndroid / other)\022g\n\034allow_external_authen"
      "ticator\030\014 \001(\010BA\202\265\030=Allow a third-party a"
      "uthenticator (in addition to two-factor)"
      "\022J\n\033external_authenticator_type\030\r \001(\rB%\202"
      "\265\030!Type of third-party authenticator\022_\n\020"
      "time_transferred\030\016 \001(\rBE\202\265\030AWhen the tok"
      "en was transferred from another device, "
      "if applicable\"\262\003\n#CTwoFactor_AddAuthenti"
      "cator_Request\022#\n\007steamid\030\001 \001(\006B\022\202\265\030\016stea"
      "mid to use\022:\n\022authenticator_time\030\002 \001(\004B\036"
      "\202\265\030\032Current authenticator time\022\?\n\rserial"
      "_number\030\003 \001(\006B(\202\265\030$locally computed seri"
      "al (deprecated)\0222\n\022authenticator_type\030\004 "
      "\001(\rB\026\202\265\030\022Authenticator type\0227\n\021device_id"
      "entifier\030\005 \001(\tB\034\202\265\030\030Authenticator identi"
      "fier\022A\n\014sms_phone_id\030\006 \001(\tB+\202\265\030\'ID of ph"
      "one to use for SMS verification\0229\n\014http_"
      "headers\030\007 \003(\tB#\202\265\030\037HTTP headers alternat"
      "ing by K/V\"\363\004\n$CTwoFactor_AddAuthenticat"
      "or_Response\022I\n\rshared_secret\030\001 \001(\014B2\202\265\030."
      "Shared secret between server and authent"
      "icator\022I\n\rserial_number\030\002 \001(\006B2\202\265\030.Authe"
      "nticator serial number (unique per token"
      ")\022>\n\017revocation_code\030\003 \001(\tB%\202\265\030!code use"
      "d to revoke authenticator\022+\n\003uri\030\004 \001(\tB\036"
      "\202\265\030\032URI for QR code generation\022,\n\013server"
      "_time\030\005 \001(\004B\027\202\265\030\023Current server time\022A\n\014"
      "account_name\030\006 \001(\tB+\202\265\030\'Account name to "
      "display on token client\0223\n\ttoken_gid\030\007 \001"
      "(\tB \202\265\030\034Token GID assigned by server\022V\n\017"
      "identity_secret\030\010 \001(\014B=\202\265\0309Secret used f"
      "or identity attestation (e.g., for event"
      "ing)\022)\n\010secret_1\030\t \001(\014B\027\202\265\030\023Spare shared"
      " secret\022\037\n\006status\030\n \001(\005B\017\202\265\030\013Result code"
      "\"\335\001\n\034CTwoFactor_SendEmail_Request\022#\n\007ste"
      "amid\030\001 \001(\006B\022\202\265\030\016Steamid to use\022F\n\nemail_"
      "type\030\002 \001(\rB2\202\265\030.Type of email to send (E"
      "TwoFactorEmailType::*)\022P\n\027include_activa"
      "tion_code\030\003 \001(\010B/\202\265\030+Include activation "
      "code in email parameters\"\037\n\035CTwoFactor_S"
      "endEmail_Response\"\303\002\n+CTwoFactor_Finaliz"
      "eAddAuthenticator_Request\022#\n\007steamid\030\001 \001"
      "(\006B\022\202\265\030\016steamid to use\0221\n\022authenticator_"
      "code\030\002 \001(\tB\025\202\265\030\021Current auth code\022:\n\022aut"
      "henticator_time\030\003 \001(\004B\036\202\265\030\032Current authe"
      "nticator time\022E\n\017activation_code\030\004 \001(\tB,"
      "\202\265\030(Activation code from out-of-band mes"
      "sage\0229\n\014http_headers\030\005 \003(\tB#\202\265\030\037HTTP hea"
      "ders alternating by K/V\"\351\001\n,CTwoFactor_F"
      "inalizeAddAuthenticator_Response\022:\n\007succ"
      "ess\030\001 \001(\010B)\202\265\030%True if succeeded, or wan"
      "t more tries\022.\n\twant_more\030\002 \001(\010B\033\202\265\030\027Tru"
      "e if want more tries\022,\n\013server_time\030\003 \001("
      "\004B\027\202\265\030\023Current server time\022\037\n\006status\030\004 \001"
      "(\005B\017\202\265\030\013Result code\"\313\002\n&CTwoFactor_Remov"
      "eAuthenticator_Request\022<\n\017revocation_cod"
      "e\030\002 \001(\tB#\202\265\030\037Password needed to remove t"
      "oken\022H\n\021revocation_reason\030\005 \001(\rB-\202\265\030)Rea"
      "son the authenticator is being removed\022O"
      "\n\021steamguard_scheme\030\006 \001(\rB4\202\265\0300Type of S"
      "team Guard to use once token is removed\022"
      "H\n\035remove_all_steamguard_cookies\030\007 \001(\010B!"
      "\202\265\030\035Remove all steamguard cookies\"\376\001\n\'CT"
      "woFactor_RemoveAuthenticator_Response\022L\n"
      "\007success\030\001 \001(\010B;\202\265\0307True if request succ"
      "eeeded. The mobile app checks this.\022,\n\013s"
      "erver_time\030\003 \001(\004B\027\202\265\030\023Current server tim"
      "e\022W\n\035revocation_attempts_remaining\030\005 \001(\r"
      "B0\202\265\030,Number of revocation code attempts"
      " remaining\")\n\'CTwoFactor_CreateEmergency"
      "Codes_Request\"N\n(CTwoFactor_CreateEmerge"
      "ncyCodes_Response\022\"\n\005codes\030\001 \003(\tB\023\202\265\030\017Em"
      "ergency codes\"O\n(CTwoFactor_DestroyEmerg"
      "encyCodes_Request\022#\n\007steamid\030\001 \001(\006B\022\202\265\030\016"
      "steamid to use\"+\n)CTwoFactor_DestroyEmer"
      "gencyCodes_Response\"F\n CTwoFactor_Valida"
      "teToken_Request\022\"\n\004code\030\001 \001(\tB\024\202\265\030\020code "
      "to validate\"L\n!CTwoFactor_ValidateToken_"
      "Response\022\'\n\005valid\030\001 \001(\010B\030\202\265\030\024result of v"
      "alidation2\306\013\n\tTwoFactor\022\244\001\n\013QueryStatus\022"
      "&.proto.steam.CTwoFactor_Status_Request\032"
      "\'.proto.steam.CTwoFactor_Status_Response"
      "\"D\202\265\030@Get two-factor authentication sett"
      "ings for the logged-in account\022\262\001\n\020AddAu"
      "thenticator\0220.proto.steam.CTwoFactor_Add"
      "Authenticator_Request\0321.proto.steam.CTwo"
      "Factor_AddAuthenticator_Response\"9\202\265\0305Ad"
      "d two-factor authenticator to the logged"
      "-in account\022\201\001\n\tSendEmail\022).proto.steam."
      "CTwoFactor_SendEmail_Request\032*.proto.ste"
      "am.CTwoFactor_SendEmail_Response\"\035\202\265\030\031Se"
      "nd email to the account\022\331\001\n\030FinalizeAddA"
      "uthenticator\0228.proto.steam.CTwoFactor_Fi"
      "nalizeAddAuthenticator_Request\0329.proto.s"
      "team.CTwoFactor_FinalizeAddAuthenticator"
      "_Response\"H\202\265\030DFinalize two-factor authe"
      "ntication addition to the logged-in acco"
      "unt\022\312\001\n\023RemoveAuthenticator\0223.proto.stea"
      "m.CTwoFactor_RemoveAuthenticator_Request"
      "\0324.proto.steam.CTwoFactor_RemoveAuthenti"
      "cator_Response\"H\202\265\030DRemove two-factor au"
      "thentication addition from the logged-in"
      " account\022\257\001\n\024CreateEmergencyCodes\0224.prot"
      "o.steam.CTwoFactor_CreateEmergencyCodes_"
      "Request\0325.proto.steam.CTwoFactor_CreateE"
      "mergencyCodes_Response\"*\202\265\030&Generate eme"
      "rgency authenticator codes\022\301\001\n\025DestroyEm"
      "ergencyCodes\0225.proto.steam.CTwoFactor_De"
      "stroyEmergencyCodes_Request\0326.proto.stea"
      "m.CTwoFactor_DestroyEmergencyCodes_Respo"
      "nse\"9\202\265\0305Destroy emergency authenticator"
      " codes for the account\022\222\001\n\rValidateToken"
      "\022-.proto.steam.CTwoFactor_ValidateToken_"
      "Request\032..proto.steam.CTwoFactor_Validat"
      "eToken_Response\"\"\202\265\030\036Validate (and consu"
      "me) a token\032%\202\265\030!Two Factor Authenticati"
      "on ServiceB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5575);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_twofactor.steamclient.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5ftwofactor_2esteamclient_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_Status_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_Status_Request::CTwoFactor_Status_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_Status_Request)
}
CTwoFactor_Status_Request::CTwoFactor_Status_Request(const CTwoFactor_Status_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_Status_Request)
}

void CTwoFactor_Status_Request::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
}

CTwoFactor_Status_Request::~CTwoFactor_Status_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_Status_Request)
  SharedDtor();
}

void CTwoFactor_Status_Request::SharedDtor() {
}

void CTwoFactor_Status_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTwoFactor_Status_Request::descriptor() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CTwoFactor_Status_Request& CTwoFactor_Status_Request::default_instance() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CTwoFactor_Status_Request* CTwoFactor_Status_Request::New(::google::protobuf::Arena* arena) const {
  CTwoFactor_Status_Request* n = new CTwoFactor_Status_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CTwoFactor_Status_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_Status_Request)
  steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CTwoFactor_Status_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_Status_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_Status_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_Status_Request)
  return false;
#undef DO_
}

void CTwoFactor_Status_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_Status_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_Status_Request)
}

::google::protobuf::uint8* CTwoFactor_Status_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_Status_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_Status_Request)
  return target;
}

size_t CTwoFactor_Status_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_Status_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
  if (has_steamid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTwoFactor_Status_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_Status_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_Status_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CTwoFactor_Status_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_Status_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_Status_Request)
    MergeFrom(*source);
  }
}

void CTwoFactor_Status_Request::MergeFrom(const CTwoFactor_Status_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_Status_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CTwoFactor_Status_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_Status_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_Status_Request::CopyFrom(const CTwoFactor_Status_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_Status_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_Status_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_Status_Request::Swap(CTwoFactor_Status_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_Status_Request::InternalSwap(CTwoFactor_Status_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CTwoFactor_Status_Request::GetMetadata() const {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CTwoFactor_Status_Request

// optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
bool CTwoFactor_Status_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CTwoFactor_Status_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CTwoFactor_Status_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CTwoFactor_Status_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CTwoFactor_Status_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_Status_Request.steamid)
  return steamid_;
}
void CTwoFactor_Status_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_Status_Request.steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_Status_Response::kStateFieldNumber;
const int CTwoFactor_Status_Response::kInactivationReasonFieldNumber;
const int CTwoFactor_Status_Response::kAuthenticatorTypeFieldNumber;
const int CTwoFactor_Status_Response::kAuthenticatorAllowedFieldNumber;
const int CTwoFactor_Status_Response::kSteamguardSchemeFieldNumber;
const int CTwoFactor_Status_Response::kTokenGidFieldNumber;
const int CTwoFactor_Status_Response::kEmailValidatedFieldNumber;
const int CTwoFactor_Status_Response::kDeviceIdentifierFieldNumber;
const int CTwoFactor_Status_Response::kTimeCreatedFieldNumber;
const int CTwoFactor_Status_Response::kRevocationAttemptsRemainingFieldNumber;
const int CTwoFactor_Status_Response::kClassifiedAgentFieldNumber;
const int CTwoFactor_Status_Response::kAllowExternalAuthenticatorFieldNumber;
const int CTwoFactor_Status_Response::kExternalAuthenticatorTypeFieldNumber;
const int CTwoFactor_Status_Response::kTimeTransferredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_Status_Response::CTwoFactor_Status_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_Status_Response)
}
CTwoFactor_Status_Response::CTwoFactor_Status_Response(const CTwoFactor_Status_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token_gid()) {
    token_gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_gid_);
  }
  device_identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_identifier()) {
    device_identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_identifier_);
  }
  classified_agent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_classified_agent()) {
    classified_agent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.classified_agent_);
  }
  ::memcpy(&state_, &from.state_,
    reinterpret_cast<char*>(&time_transferred_) -
    reinterpret_cast<char*>(&state_) + sizeof(time_transferred_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_Status_Response)
}

void CTwoFactor_Status_Response::SharedCtor() {
  _cached_size_ = 0;
  token_gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  classified_agent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, reinterpret_cast<char*>(&time_transferred_) -
    reinterpret_cast<char*>(&state_) + sizeof(time_transferred_));
}

CTwoFactor_Status_Response::~CTwoFactor_Status_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_Status_Response)
  SharedDtor();
}

void CTwoFactor_Status_Response::SharedDtor() {
  token_gid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_identifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  classified_agent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTwoFactor_Status_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTwoFactor_Status_Response::descriptor() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CTwoFactor_Status_Response& CTwoFactor_Status_Response::default_instance() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CTwoFactor_Status_Response* CTwoFactor_Status_Response::New(::google::protobuf::Arena* arena) const {
  CTwoFactor_Status_Response* n = new CTwoFactor_Status_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CTwoFactor_Status_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_Status_Response)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_token_gid()) {
      GOOGLE_DCHECK(!token_gid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*token_gid_.UnsafeRawStringPointer())->clear();
    }
    if (has_device_identifier()) {
      GOOGLE_DCHECK(!device_identifier_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_identifier_.UnsafeRawStringPointer())->clear();
    }
    if (has_classified_agent()) {
      GOOGLE_DCHECK(!classified_agent_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*classified_agent_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&state_, 0, reinterpret_cast<char*>(&authenticator_allowed_) -
      reinterpret_cast<char*>(&state_) + sizeof(authenticator_allowed_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&email_validated_, 0, reinterpret_cast<char*>(&time_transferred_) -
      reinterpret_cast<char*>(&email_validated_) + sizeof(time_transferred_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CTwoFactor_Status_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_Status_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 state = 1 [(.proto.steam.description) = "Authenticator state"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 inactivation_reason = 2 [(.proto.steam.description) = "Inactivation reason (if any)"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_inactivation_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inactivation_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 authenticator_type = 3 [(.proto.steam.description) = "Type of authenticator"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_authenticator_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &authenticator_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool authenticator_allowed = 4 [(.proto.steam.description) = "Account allowed to have an authenticator?"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_authenticator_allowed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &authenticator_allowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 steamguard_scheme = 5 [(.proto.steam.description) = "Steam Guard scheme in effect"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_steamguard_scheme();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steamguard_scheme_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string token_gid = 6 [(.proto.steam.description) = "String rep of token GID assigned by server"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token_gid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token_gid().data(), this->token_gid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_Status_Response.token_gid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool email_validated = 7 [(.proto.steam.description) = "Account has verified email capability"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_email_validated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &email_validated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_identifier = 8 [(.proto.steam.description) = "Authenticator (phone) identifier"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_identifier().data(), this->device_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_Status_Response.device_identifier");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_created = 9 [(.proto.steam.description) = "When the token was created"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_time_created();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 revocation_attempts_remaining = 10 [(.proto.steam.description) = "Number of revocation code attempts remaining"];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_revocation_attempts_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revocation_attempts_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string classified_agent = 11 [(.proto.steam.description) = "Agent that added the authenticator (e.g., ios / android / other)"];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classified_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->classified_agent().data(), this->classified_agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_Status_Response.classified_agent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_external_authenticator = 12 [(.proto.steam.description) = "Allow a third-party authenticator (in addition to two-factor)"];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_allow_external_authenticator();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_external_authenticator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 external_authenticator_type = 13 [(.proto.steam.description) = "Type of third-party authenticator"];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_external_authenticator_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &external_authenticator_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_transferred = 14 [(.proto.steam.description) = "When the token was transferred from another device, if applicable"];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_time_transferred();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_transferred_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_Status_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_Status_Response)
  return false;
#undef DO_
}

void CTwoFactor_Status_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_Status_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 state = 1 [(.proto.steam.description) = "Authenticator state"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->state(), output);
  }

  // optional uint32 inactivation_reason = 2 [(.proto.steam.description) = "Inactivation reason (if any)"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->inactivation_reason(), output);
  }

  // optional uint32 authenticator_type = 3 [(.proto.steam.description) = "Type of authenticator"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->authenticator_type(), output);
  }

  // optional bool authenticator_allowed = 4 [(.proto.steam.description) = "Account allowed to have an authenticator?"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->authenticator_allowed(), output);
  }

  // optional uint32 steamguard_scheme = 5 [(.proto.steam.description) = "Steam Guard scheme in effect"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->steamguard_scheme(), output);
  }

  // optional string token_gid = 6 [(.proto.steam.description) = "String rep of token GID assigned by server"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token_gid().data(), this->token_gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_Status_Response.token_gid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->token_gid(), output);
  }

  // optional bool email_validated = 7 [(.proto.steam.description) = "Account has verified email capability"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->email_validated(), output);
  }

  // optional string device_identifier = 8 [(.proto.steam.description) = "Authenticator (phone) identifier"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_identifier().data(), this->device_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_Status_Response.device_identifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->device_identifier(), output);
  }

  // optional uint32 time_created = 9 [(.proto.steam.description) = "When the token was created"];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time_created(), output);
  }

  // optional uint32 revocation_attempts_remaining = 10 [(.proto.steam.description) = "Number of revocation code attempts remaining"];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->revocation_attempts_remaining(), output);
  }

  // optional string classified_agent = 11 [(.proto.steam.description) = "Agent that added the authenticator (e.g., ios / android / other)"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->classified_agent().data(), this->classified_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_Status_Response.classified_agent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->classified_agent(), output);
  }

  // optional bool allow_external_authenticator = 12 [(.proto.steam.description) = "Allow a third-party authenticator (in addition to two-factor)"];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->allow_external_authenticator(), output);
  }

  // optional uint32 external_authenticator_type = 13 [(.proto.steam.description) = "Type of third-party authenticator"];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->external_authenticator_type(), output);
  }

  // optional uint32 time_transferred = 14 [(.proto.steam.description) = "When the token was transferred from another device, if applicable"];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->time_transferred(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_Status_Response)
}

::google::protobuf::uint8* CTwoFactor_Status_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_Status_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 state = 1 [(.proto.steam.description) = "Authenticator state"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->state(), target);
  }

  // optional uint32 inactivation_reason = 2 [(.proto.steam.description) = "Inactivation reason (if any)"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->inactivation_reason(), target);
  }

  // optional uint32 authenticator_type = 3 [(.proto.steam.description) = "Type of authenticator"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->authenticator_type(), target);
  }

  // optional bool authenticator_allowed = 4 [(.proto.steam.description) = "Account allowed to have an authenticator?"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->authenticator_allowed(), target);
  }

  // optional uint32 steamguard_scheme = 5 [(.proto.steam.description) = "Steam Guard scheme in effect"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->steamguard_scheme(), target);
  }

  // optional string token_gid = 6 [(.proto.steam.description) = "String rep of token GID assigned by server"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token_gid().data(), this->token_gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_Status_Response.token_gid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->token_gid(), target);
  }

  // optional bool email_validated = 7 [(.proto.steam.description) = "Account has verified email capability"];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->email_validated(), target);
  }

  // optional string device_identifier = 8 [(.proto.steam.description) = "Authenticator (phone) identifier"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_identifier().data(), this->device_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_Status_Response.device_identifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->device_identifier(), target);
  }

  // optional uint32 time_created = 9 [(.proto.steam.description) = "When the token was created"];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time_created(), target);
  }

  // optional uint32 revocation_attempts_remaining = 10 [(.proto.steam.description) = "Number of revocation code attempts remaining"];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->revocation_attempts_remaining(), target);
  }

  // optional string classified_agent = 11 [(.proto.steam.description) = "Agent that added the authenticator (e.g., ios / android / other)"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->classified_agent().data(), this->classified_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_Status_Response.classified_agent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->classified_agent(), target);
  }

  // optional bool allow_external_authenticator = 12 [(.proto.steam.description) = "Allow a third-party authenticator (in addition to two-factor)"];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->allow_external_authenticator(), target);
  }

  // optional uint32 external_authenticator_type = 13 [(.proto.steam.description) = "Type of third-party authenticator"];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->external_authenticator_type(), target);
  }

  // optional uint32 time_transferred = 14 [(.proto.steam.description) = "When the token was transferred from another device, if applicable"];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->time_transferred(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_Status_Response)
  return target;
}

size_t CTwoFactor_Status_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_Status_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string token_gid = 6 [(.proto.steam.description) = "String rep of token GID assigned by server"];
    if (has_token_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token_gid());
    }

    // optional string device_identifier = 8 [(.proto.steam.description) = "Authenticator (phone) identifier"];
    if (has_device_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_identifier());
    }

    // optional string classified_agent = 11 [(.proto.steam.description) = "Agent that added the authenticator (e.g., ios / android / other)"];
    if (has_classified_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classified_agent());
    }

    // optional uint32 state = 1 [(.proto.steam.description) = "Authenticator state"];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 inactivation_reason = 2 [(.proto.steam.description) = "Inactivation reason (if any)"];
    if (has_inactivation_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inactivation_reason());
    }

    // optional uint32 authenticator_type = 3 [(.proto.steam.description) = "Type of authenticator"];
    if (has_authenticator_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->authenticator_type());
    }

    // optional uint32 steamguard_scheme = 5 [(.proto.steam.description) = "Steam Guard scheme in effect"];
    if (has_steamguard_scheme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steamguard_scheme());
    }

    // optional bool authenticator_allowed = 4 [(.proto.steam.description) = "Account allowed to have an authenticator?"];
    if (has_authenticator_allowed()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional bool email_validated = 7 [(.proto.steam.description) = "Account has verified email capability"];
    if (has_email_validated()) {
      total_size += 1 + 1;
    }

    // optional bool allow_external_authenticator = 12 [(.proto.steam.description) = "Allow a third-party authenticator (in addition to two-factor)"];
    if (has_allow_external_authenticator()) {
      total_size += 1 + 1;
    }

    // optional uint32 time_created = 9 [(.proto.steam.description) = "When the token was created"];
    if (has_time_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional uint32 revocation_attempts_remaining = 10 [(.proto.steam.description) = "Number of revocation code attempts remaining"];
    if (has_revocation_attempts_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revocation_attempts_remaining());
    }

    // optional uint32 external_authenticator_type = 13 [(.proto.steam.description) = "Type of third-party authenticator"];
    if (has_external_authenticator_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->external_authenticator_type());
    }

    // optional uint32 time_transferred = 14 [(.proto.steam.description) = "When the token was transferred from another device, if applicable"];
    if (has_time_transferred()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_transferred());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTwoFactor_Status_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_Status_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_Status_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CTwoFactor_Status_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_Status_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_Status_Response)
    MergeFrom(*source);
  }
}

void CTwoFactor_Status_Response::MergeFrom(const CTwoFactor_Status_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_Status_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_token_gid();
      token_gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_gid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_device_identifier();
      device_identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_identifier_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_classified_agent();
      classified_agent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.classified_agent_);
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000010u) {
      inactivation_reason_ = from.inactivation_reason_;
    }
    if (cached_has_bits & 0x00000020u) {
      authenticator_type_ = from.authenticator_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      steamguard_scheme_ = from.steamguard_scheme_;
    }
    if (cached_has_bits & 0x00000080u) {
      authenticator_allowed_ = from.authenticator_allowed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      email_validated_ = from.email_validated_;
    }
    if (cached_has_bits & 0x00000200u) {
      allow_external_authenticator_ = from.allow_external_authenticator_;
    }
    if (cached_has_bits & 0x00000400u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000800u) {
      revocation_attempts_remaining_ = from.revocation_attempts_remaining_;
    }
    if (cached_has_bits & 0x00001000u) {
      external_authenticator_type_ = from.external_authenticator_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      time_transferred_ = from.time_transferred_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTwoFactor_Status_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_Status_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_Status_Response::CopyFrom(const CTwoFactor_Status_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_Status_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_Status_Response::IsInitialized() const {
  return true;
}

void CTwoFactor_Status_Response::Swap(CTwoFactor_Status_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_Status_Response::InternalSwap(CTwoFactor_Status_Response* other) {
  token_gid_.Swap(&other->token_gid_);
  device_identifier_.Swap(&other->device_identifier_);
  classified_agent_.Swap(&other->classified_agent_);
  std::swap(state_, other->state_);
  std::swap(inactivation_reason_, other->inactivation_reason_);
  std::swap(authenticator_type_, other->authenticator_type_);
  std::swap(steamguard_scheme_, other->steamguard_scheme_);
  std::swap(authenticator_allowed_, other->authenticator_allowed_);
  std::swap(email_validated_, other->email_validated_);
  std::swap(allow_external_authenticator_, other->allow_external_authenticator_);
  std::swap(time_created_, other->time_created_);
  std::swap(revocation_attempts_remaining_, other->revocation_attempts_remaining_);
  std::swap(external_authenticator_type_, other->external_authenticator_type_);
  std::swap(time_transferred_, other->time_transferred_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CTwoFactor_Status_Response::GetMetadata() const {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CTwoFactor_Status_Response

// optional uint32 state = 1 [(.proto.steam.description) = "Authenticator state"];
bool CTwoFactor_Status_Response::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CTwoFactor_Status_Response::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
void CTwoFactor_Status_Response::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
void CTwoFactor_Status_Response::clear_state() {
  state_ = 0u;
  clear_has_state();
}
::google::protobuf::uint32 CTwoFactor_Status_Response::state() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_Status_Response.state)
  return state_;
}
void CTwoFactor_Status_Response::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_Status_Response.state)
}

// optional uint32 inactivation_reason = 2 [(.proto.steam.description) = "Inactivation reason (if any)"];
bool CTwoFactor_Status_Response::has_inactivation_reason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CTwoFactor_Status_Response::set_has_inactivation_reason() {
  _has_bits_[0] |= 0x00000010u;
}
void CTwoFactor_Status_Response::clear_has_inactivation_reason() {
  _has_bits_[0] &= ~0x00000010u;
}
void CTwoFactor_Status_Response::clear_inactivation_reason() {
  inactivation_reason_ = 0u;
  clear_has_inactivation_reason();
}
::google::protobuf::uint32 CTwoFactor_Status_Response::inactivation_reason() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_Status_Response.inactivation_reason)
  return inactivation_reason_;
}
void CTwoFactor_Status_Response::set_inactivation_reason(::google::protobuf::uint32 value) {
  set_has_inactivation_reason();
  inactivation_reason_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_Status_Response.inactivation_reason)
}

// optional uint32 authenticator_type = 3 [(.proto.steam.description) = "Type of authenticator"];
bool CTwoFactor_Status_Response::has_authenticator_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CTwoFactor_Status_Response::set_has_authenticator_type() {
  _has_bits_[0] |= 0x00000020u;
}
void CTwoFactor_Status_Response::clear_has_authenticator_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void CTwoFactor_Status_Response::clear_authenticator_type() {
  authenticator_type_ = 0u;
  clear_has_authenticator_type();
}
::google::protobuf::uint32 CTwoFactor_Status_Response::authenticator_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_Status_Response.authenticator_type)
  return authenticator_type_;
}
void CTwoFactor_Status_Response::set_authenticator_type(::google::protobuf::uint32 value) {
  set_has_authenticator_type();
  authenticator_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_Status_Response.authenticator_type)
}

// optional bool authenticator_allowed = 4 [(.proto.steam.description) = "Account allowed to have an authenticator?"];
bool CTwoFactor_Status_Response::has_authenticator_allowed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CTwoFactor_Status_Response::set_has_authenticator_allowed() {
  _has_bits_[0] |= 0x00000080u;
}
void CTwoFactor_Status_Response::clear_has_authenticator_allowed() {
  _has_bits_[0] &= ~0x00000080u;
}
void CTwoFactor_Status_Response::clear_authenticator_allowed() {
  authenticator_allowed_ = false;
  clear_has_authenticator_allowed();
}
bool CTwoFactor_Status_Response::authenticator_allowed() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_Status_Response.authenticator_allowed)
  return authenticator_allowed_;
}
void CTwoFactor_Status_Response::set_authenticator_allowed(bool value) {
  set_has_authenticator_allowed();
  authenticator_allowed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_Status_Response.authenticator_allowed)
}

// optional uint32 steamguard_scheme = 5 [(.proto.steam.description) = "Steam Guard scheme in effect"];
bool CTwoFactor_Status_Response::has_steamguard_scheme() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CTwoFactor_Status_Response::set_has_steamguard_scheme() {
  _has_bits_[0] |= 0x00000040u;
}
void CTwoFactor_Status_Response::clear_has_steamguard_scheme() {
  _has_bits_[0] &= ~0x00000040u;
}
void CTwoFactor_Status_Response::clear_steamguard_scheme() {
  steamguard_scheme_ = 0u;
  clear_has_steamguard_scheme();
}
::google::protobuf::uint32 CTwoFactor_Status_Response::steamguard_scheme() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_Status_Response.steamguard_scheme)
  return steamguard_scheme_;
}
void CTwoFactor_Status_Response::set_steamguard_scheme(::google::protobuf::uint32 value) {
  set_has_steamguard_scheme();
  steamguard_scheme_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_Status_Response.steamguard_scheme)
}

// optional string token_gid = 6 [(.proto.steam.description) = "String rep of token GID assigned by server"];
bool CTwoFactor_Status_Response::has_token_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CTwoFactor_Status_Response::set_has_token_gid() {
  _has_bits_[0] |= 0x00000001u;
}
void CTwoFactor_Status_Response::clear_has_token_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CTwoFactor_Status_Response::clear_token_gid() {
  token_gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token_gid();
}
const ::std::string& CTwoFactor_Status_Response::token_gid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_Status_Response.token_gid)
  return token_gid_.GetNoArena();
}
void CTwoFactor_Status_Response::set_token_gid(const ::std::string& value) {
  set_has_token_gid();
  token_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_Status_Response.token_gid)
}
#if LANG_CXX11
void CTwoFactor_Status_Response::set_token_gid(::std::string&& value) {
  set_has_token_gid();
  token_gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CTwoFactor_Status_Response.token_gid)
}
#endif
void CTwoFactor_Status_Response::set_token_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token_gid();
  token_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CTwoFactor_Status_Response.token_gid)
}
void CTwoFactor_Status_Response::set_token_gid(const char* value, size_t size) {
  set_has_token_gid();
  token_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CTwoFactor_Status_Response.token_gid)
}
::std::string* CTwoFactor_Status_Response::mutable_token_gid() {
  set_has_token_gid();
  // @@protoc_insertion_point(field_mutable:proto.steam.CTwoFactor_Status_Response.token_gid)
  return token_gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTwoFactor_Status_Response::release_token_gid() {
  // @@protoc_insertion_point(field_release:proto.steam.CTwoFactor_Status_Response.token_gid)
  clear_has_token_gid();
  return token_gid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTwoFactor_Status_Response::set_allocated_token_gid(::std::string* token_gid) {
  if (token_gid != NULL) {
    set_has_token_gid();
  } else {
    clear_has_token_gid();
  }
  token_gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token_gid);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CTwoFactor_Status_Response.token_gid)
}

// optional bool email_validated = 7 [(.proto.steam.description) = "Account has verified email capability"];
bool CTwoFactor_Status_Response::has_email_validated() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CTwoFactor_Status_Response::set_has_email_validated() {
  _has_bits_[0] |= 0x00000100u;
}
void CTwoFactor_Status_Response::clear_has_email_validated() {
  _has_bits_[0] &= ~0x00000100u;
}
void CTwoFactor_Status_Response::clear_email_validated() {
  email_validated_ = false;
  clear_has_email_validated();
}
bool CTwoFactor_Status_Response::email_validated() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_Status_Response.email_validated)
  return email_validated_;
}
void CTwoFactor_Status_Response::set_email_validated(bool value) {
  set_has_email_validated();
  email_validated_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_Status_Response.email_validated)
}

// optional string device_identifier = 8 [(.proto.steam.description) = "Authenticator (phone) identifier"];
bool CTwoFactor_Status_Response::has_device_identifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CTwoFactor_Status_Response::set_has_device_identifier() {
  _has_bits_[0] |= 0x00000002u;
}
void CTwoFactor_Status_Response::clear_has_device_identifier() {
  _has_bits_[0] &= ~0x00000002u;
}
void CTwoFactor_Status_Response::clear_device_identifier() {
  device_identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_identifier();
}
const ::std::string& CTwoFactor_Status_Response::device_identifier() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_Status_Response.device_identifier)
  return device_identifier_.GetNoArena();
}
void CTwoFactor_Status_Response::set_device_identifier(const ::std::string& value) {
  set_has_device_identifier();
  device_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_Status_Response.device_identifier)
}
#if LANG_CXX11
void CTwoFactor_Status_Response::set_device_identifier(::std::string&& value) {
  set_has_device_identifier();
  device_identifier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CTwoFactor_Status_Response.device_identifier)
}
#endif
void CTwoFactor_Status_Response::set_device_identifier(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_identifier();
  device_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CTwoFactor_Status_Response.device_identifier)
}
void CTwoFactor_Status_Response::set_device_identifier(const char* value, size_t size) {
  set_has_device_identifier();
  device_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CTwoFactor_Status_Response.device_identifier)
}
::std::string* CTwoFactor_Status_Response::mutable_device_identifier() {
  set_has_device_identifier();
  // @@protoc_insertion_point(field_mutable:proto.steam.CTwoFactor_Status_Response.device_identifier)
  return device_identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTwoFactor_Status_Response::release_device_identifier() {
  // @@protoc_insertion_point(field_release:proto.steam.CTwoFactor_Status_Response.device_identifier)
  clear_has_device_identifier();
  return device_identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTwoFactor_Status_Response::set_allocated_device_identifier(::std::string* device_identifier) {
  if (device_identifier != NULL) {
    set_has_device_identifier();
  } else {
    clear_has_device_identifier();
  }
  device_identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_identifier);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CTwoFactor_Status_Response.device_identifier)
}

// optional uint32 time_created = 9 [(.proto.steam.description) = "When the token was created"];
bool CTwoFactor_Status_Response::has_time_created() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CTwoFactor_Status_Response::set_has_time_created() {
  _has_bits_[0] |= 0x00000400u;
}
void CTwoFactor_Status_Response::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000400u;
}
void CTwoFactor_Status_Response::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
::google::protobuf::uint32 CTwoFactor_Status_Response::time_created() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_Status_Response.time_created)
  return time_created_;
}
void CTwoFactor_Status_Response::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_Status_Response.time_created)
}

// optional uint32 revocation_attempts_remaining = 10 [(.proto.steam.description) = "Number of revocation code attempts remaining"];
bool CTwoFactor_Status_Response::has_revocation_attempts_remaining() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CTwoFactor_Status_Response::set_has_revocation_attempts_remaining() {
  _has_bits_[0] |= 0x00000800u;
}
void CTwoFactor_Status_Response::clear_has_revocation_attempts_remaining() {
  _has_bits_[0] &= ~0x00000800u;
}
void CTwoFactor_Status_Response::clear_revocation_attempts_remaining() {
  revocation_attempts_remaining_ = 0u;
  clear_has_revocation_attempts_remaining();
}
::google::protobuf::uint32 CTwoFactor_Status_Response::revocation_attempts_remaining() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_Status_Response.revocation_attempts_remaining)
  return revocation_attempts_remaining_;
}
void CTwoFactor_Status_Response::set_revocation_attempts_remaining(::google::protobuf::uint32 value) {
  set_has_revocation_attempts_remaining();
  revocation_attempts_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_Status_Response.revocation_attempts_remaining)
}

// optional string classified_agent = 11 [(.proto.steam.description) = "Agent that added the authenticator (e.g., ios / android / other)"];
bool CTwoFactor_Status_Response::has_classified_agent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CTwoFactor_Status_Response::set_has_classified_agent() {
  _has_bits_[0] |= 0x00000004u;
}
void CTwoFactor_Status_Response::clear_has_classified_agent() {
  _has_bits_[0] &= ~0x00000004u;
}
void CTwoFactor_Status_Response::clear_classified_agent() {
  classified_agent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_classified_agent();
}
const ::std::string& CTwoFactor_Status_Response::classified_agent() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_Status_Response.classified_agent)
  return classified_agent_.GetNoArena();
}
void CTwoFactor_Status_Response::set_classified_agent(const ::std::string& value) {
  set_has_classified_agent();
  classified_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_Status_Response.classified_agent)
}
#if LANG_CXX11
void CTwoFactor_Status_Response::set_classified_agent(::std::string&& value) {
  set_has_classified_agent();
  classified_agent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CTwoFactor_Status_Response.classified_agent)
}
#endif
void CTwoFactor_Status_Response::set_classified_agent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_classified_agent();
  classified_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CTwoFactor_Status_Response.classified_agent)
}
void CTwoFactor_Status_Response::set_classified_agent(const char* value, size_t size) {
  set_has_classified_agent();
  classified_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CTwoFactor_Status_Response.classified_agent)
}
::std::string* CTwoFactor_Status_Response::mutable_classified_agent() {
  set_has_classified_agent();
  // @@protoc_insertion_point(field_mutable:proto.steam.CTwoFactor_Status_Response.classified_agent)
  return classified_agent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTwoFactor_Status_Response::release_classified_agent() {
  // @@protoc_insertion_point(field_release:proto.steam.CTwoFactor_Status_Response.classified_agent)
  clear_has_classified_agent();
  return classified_agent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTwoFactor_Status_Response::set_allocated_classified_agent(::std::string* classified_agent) {
  if (classified_agent != NULL) {
    set_has_classified_agent();
  } else {
    clear_has_classified_agent();
  }
  classified_agent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), classified_agent);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CTwoFactor_Status_Response.classified_agent)
}

// optional bool allow_external_authenticator = 12 [(.proto.steam.description) = "Allow a third-party authenticator (in addition to two-factor)"];
bool CTwoFactor_Status_Response::has_allow_external_authenticator() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CTwoFactor_Status_Response::set_has_allow_external_authenticator() {
  _has_bits_[0] |= 0x00000200u;
}
void CTwoFactor_Status_Response::clear_has_allow_external_authenticator() {
  _has_bits_[0] &= ~0x00000200u;
}
void CTwoFactor_Status_Response::clear_allow_external_authenticator() {
  allow_external_authenticator_ = false;
  clear_has_allow_external_authenticator();
}
bool CTwoFactor_Status_Response::allow_external_authenticator() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_Status_Response.allow_external_authenticator)
  return allow_external_authenticator_;
}
void CTwoFactor_Status_Response::set_allow_external_authenticator(bool value) {
  set_has_allow_external_authenticator();
  allow_external_authenticator_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_Status_Response.allow_external_authenticator)
}

// optional uint32 external_authenticator_type = 13 [(.proto.steam.description) = "Type of third-party authenticator"];
bool CTwoFactor_Status_Response::has_external_authenticator_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CTwoFactor_Status_Response::set_has_external_authenticator_type() {
  _has_bits_[0] |= 0x00001000u;
}
void CTwoFactor_Status_Response::clear_has_external_authenticator_type() {
  _has_bits_[0] &= ~0x00001000u;
}
void CTwoFactor_Status_Response::clear_external_authenticator_type() {
  external_authenticator_type_ = 0u;
  clear_has_external_authenticator_type();
}
::google::protobuf::uint32 CTwoFactor_Status_Response::external_authenticator_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_Status_Response.external_authenticator_type)
  return external_authenticator_type_;
}
void CTwoFactor_Status_Response::set_external_authenticator_type(::google::protobuf::uint32 value) {
  set_has_external_authenticator_type();
  external_authenticator_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_Status_Response.external_authenticator_type)
}

// optional uint32 time_transferred = 14 [(.proto.steam.description) = "When the token was transferred from another device, if applicable"];
bool CTwoFactor_Status_Response::has_time_transferred() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CTwoFactor_Status_Response::set_has_time_transferred() {
  _has_bits_[0] |= 0x00002000u;
}
void CTwoFactor_Status_Response::clear_has_time_transferred() {
  _has_bits_[0] &= ~0x00002000u;
}
void CTwoFactor_Status_Response::clear_time_transferred() {
  time_transferred_ = 0u;
  clear_has_time_transferred();
}
::google::protobuf::uint32 CTwoFactor_Status_Response::time_transferred() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_Status_Response.time_transferred)
  return time_transferred_;
}
void CTwoFactor_Status_Response::set_time_transferred(::google::protobuf::uint32 value) {
  set_has_time_transferred();
  time_transferred_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_Status_Response.time_transferred)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_AddAuthenticator_Request::kSteamidFieldNumber;
const int CTwoFactor_AddAuthenticator_Request::kAuthenticatorTimeFieldNumber;
const int CTwoFactor_AddAuthenticator_Request::kSerialNumberFieldNumber;
const int CTwoFactor_AddAuthenticator_Request::kAuthenticatorTypeFieldNumber;
const int CTwoFactor_AddAuthenticator_Request::kDeviceIdentifierFieldNumber;
const int CTwoFactor_AddAuthenticator_Request::kSmsPhoneIdFieldNumber;
const int CTwoFactor_AddAuthenticator_Request::kHttpHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_AddAuthenticator_Request::CTwoFactor_AddAuthenticator_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_AddAuthenticator_Request)
}
CTwoFactor_AddAuthenticator_Request::CTwoFactor_AddAuthenticator_Request(const CTwoFactor_AddAuthenticator_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      http_headers_(from.http_headers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_identifier()) {
    device_identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_identifier_);
  }
  sms_phone_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sms_phone_id()) {
    sms_phone_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sms_phone_id_);
  }
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&authenticator_type_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(authenticator_type_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_AddAuthenticator_Request)
}

void CTwoFactor_AddAuthenticator_Request::SharedCtor() {
  _cached_size_ = 0;
  device_identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sms_phone_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&authenticator_type_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(authenticator_type_));
}

CTwoFactor_AddAuthenticator_Request::~CTwoFactor_AddAuthenticator_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_AddAuthenticator_Request)
  SharedDtor();
}

void CTwoFactor_AddAuthenticator_Request::SharedDtor() {
  device_identifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sms_phone_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTwoFactor_AddAuthenticator_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTwoFactor_AddAuthenticator_Request::descriptor() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CTwoFactor_AddAuthenticator_Request& CTwoFactor_AddAuthenticator_Request::default_instance() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CTwoFactor_AddAuthenticator_Request* CTwoFactor_AddAuthenticator_Request::New(::google::protobuf::Arena* arena) const {
  CTwoFactor_AddAuthenticator_Request* n = new CTwoFactor_AddAuthenticator_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CTwoFactor_AddAuthenticator_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_AddAuthenticator_Request)
  http_headers_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_device_identifier()) {
      GOOGLE_DCHECK(!device_identifier_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_identifier_.UnsafeRawStringPointer())->clear();
    }
    if (has_sms_phone_id()) {
      GOOGLE_DCHECK(!sms_phone_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sms_phone_id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&authenticator_type_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(authenticator_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CTwoFactor_AddAuthenticator_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_AddAuthenticator_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 authenticator_time = 2 [(.proto.steam.description) = "Current authenticator time"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_authenticator_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &authenticator_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 serial_number = 3 [(.proto.steam.description) = "locally computed serial (deprecated)"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_serial_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &serial_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 authenticator_type = 4 [(.proto.steam.description) = "Authenticator type"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_authenticator_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &authenticator_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_identifier = 5 [(.proto.steam.description) = "Authenticator identifier"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_identifier().data(), this->device_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_AddAuthenticator_Request.device_identifier");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sms_phone_id = 6 [(.proto.steam.description) = "ID of phone to use for SMS verification"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sms_phone_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sms_phone_id().data(), this->sms_phone_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_AddAuthenticator_Request.sms_phone_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string http_headers = 7 [(.proto.steam.description) = "HTTP headers alternating by K/V"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_http_headers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->http_headers(this->http_headers_size() - 1).data(),
            this->http_headers(this->http_headers_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_AddAuthenticator_Request.http_headers");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_AddAuthenticator_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_AddAuthenticator_Request)
  return false;
#undef DO_
}

void CTwoFactor_AddAuthenticator_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_AddAuthenticator_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint64 authenticator_time = 2 [(.proto.steam.description) = "Current authenticator time"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->authenticator_time(), output);
  }

  // optional fixed64 serial_number = 3 [(.proto.steam.description) = "locally computed serial (deprecated)"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->serial_number(), output);
  }

  // optional uint32 authenticator_type = 4 [(.proto.steam.description) = "Authenticator type"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->authenticator_type(), output);
  }

  // optional string device_identifier = 5 [(.proto.steam.description) = "Authenticator identifier"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_identifier().data(), this->device_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Request.device_identifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->device_identifier(), output);
  }

  // optional string sms_phone_id = 6 [(.proto.steam.description) = "ID of phone to use for SMS verification"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sms_phone_id().data(), this->sms_phone_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Request.sms_phone_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sms_phone_id(), output);
  }

  // repeated string http_headers = 7 [(.proto.steam.description) = "HTTP headers alternating by K/V"];
  for (int i = 0, n = this->http_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_headers(i).data(), this->http_headers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Request.http_headers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->http_headers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_AddAuthenticator_Request)
}

::google::protobuf::uint8* CTwoFactor_AddAuthenticator_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_AddAuthenticator_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint64 authenticator_time = 2 [(.proto.steam.description) = "Current authenticator time"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->authenticator_time(), target);
  }

  // optional fixed64 serial_number = 3 [(.proto.steam.description) = "locally computed serial (deprecated)"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->serial_number(), target);
  }

  // optional uint32 authenticator_type = 4 [(.proto.steam.description) = "Authenticator type"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->authenticator_type(), target);
  }

  // optional string device_identifier = 5 [(.proto.steam.description) = "Authenticator identifier"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_identifier().data(), this->device_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Request.device_identifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->device_identifier(), target);
  }

  // optional string sms_phone_id = 6 [(.proto.steam.description) = "ID of phone to use for SMS verification"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sms_phone_id().data(), this->sms_phone_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Request.sms_phone_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sms_phone_id(), target);
  }

  // repeated string http_headers = 7 [(.proto.steam.description) = "HTTP headers alternating by K/V"];
  for (int i = 0, n = this->http_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_headers(i).data(), this->http_headers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Request.http_headers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->http_headers(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_AddAuthenticator_Request)
  return target;
}

size_t CTwoFactor_AddAuthenticator_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_AddAuthenticator_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string http_headers = 7 [(.proto.steam.description) = "HTTP headers alternating by K/V"];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->http_headers_size());
  for (int i = 0, n = this->http_headers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->http_headers(i));
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string device_identifier = 5 [(.proto.steam.description) = "Authenticator identifier"];
    if (has_device_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_identifier());
    }

    // optional string sms_phone_id = 6 [(.proto.steam.description) = "ID of phone to use for SMS verification"];
    if (has_sms_phone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sms_phone_id());
    }

    // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint64 authenticator_time = 2 [(.proto.steam.description) = "Current authenticator time"];
    if (has_authenticator_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->authenticator_time());
    }

    // optional fixed64 serial_number = 3 [(.proto.steam.description) = "locally computed serial (deprecated)"];
    if (has_serial_number()) {
      total_size += 1 + 8;
    }

    // optional uint32 authenticator_type = 4 [(.proto.steam.description) = "Authenticator type"];
    if (has_authenticator_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->authenticator_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTwoFactor_AddAuthenticator_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_AddAuthenticator_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_AddAuthenticator_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CTwoFactor_AddAuthenticator_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_AddAuthenticator_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_AddAuthenticator_Request)
    MergeFrom(*source);
  }
}

void CTwoFactor_AddAuthenticator_Request::MergeFrom(const CTwoFactor_AddAuthenticator_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_AddAuthenticator_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  http_headers_.MergeFrom(from.http_headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_device_identifier();
      device_identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_identifier_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sms_phone_id();
      sms_phone_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sms_phone_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      authenticator_time_ = from.authenticator_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      serial_number_ = from.serial_number_;
    }
    if (cached_has_bits & 0x00000020u) {
      authenticator_type_ = from.authenticator_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTwoFactor_AddAuthenticator_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_AddAuthenticator_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_AddAuthenticator_Request::CopyFrom(const CTwoFactor_AddAuthenticator_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_AddAuthenticator_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_AddAuthenticator_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_AddAuthenticator_Request::Swap(CTwoFactor_AddAuthenticator_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_AddAuthenticator_Request::InternalSwap(CTwoFactor_AddAuthenticator_Request* other) {
  http_headers_.InternalSwap(&other->http_headers_);
  device_identifier_.Swap(&other->device_identifier_);
  sms_phone_id_.Swap(&other->sms_phone_id_);
  std::swap(steamid_, other->steamid_);
  std::swap(authenticator_time_, other->authenticator_time_);
  std::swap(serial_number_, other->serial_number_);
  std::swap(authenticator_type_, other->authenticator_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CTwoFactor_AddAuthenticator_Request::GetMetadata() const {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CTwoFactor_AddAuthenticator_Request

// optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
bool CTwoFactor_AddAuthenticator_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CTwoFactor_AddAuthenticator_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000004u;
}
void CTwoFactor_AddAuthenticator_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CTwoFactor_AddAuthenticator_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CTwoFactor_AddAuthenticator_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_AddAuthenticator_Request.steamid)
  return steamid_;
}
void CTwoFactor_AddAuthenticator_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_AddAuthenticator_Request.steamid)
}

// optional uint64 authenticator_time = 2 [(.proto.steam.description) = "Current authenticator time"];
bool CTwoFactor_AddAuthenticator_Request::has_authenticator_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CTwoFactor_AddAuthenticator_Request::set_has_authenticator_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CTwoFactor_AddAuthenticator_Request::clear_has_authenticator_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CTwoFactor_AddAuthenticator_Request::clear_authenticator_time() {
  authenticator_time_ = GOOGLE_ULONGLONG(0);
  clear_has_authenticator_time();
}
::google::protobuf::uint64 CTwoFactor_AddAuthenticator_Request::authenticator_time() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_AddAuthenticator_Request.authenticator_time)
  return authenticator_time_;
}
void CTwoFactor_AddAuthenticator_Request::set_authenticator_time(::google::protobuf::uint64 value) {
  set_has_authenticator_time();
  authenticator_time_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_AddAuthenticator_Request.authenticator_time)
}

// optional fixed64 serial_number = 3 [(.proto.steam.description) = "locally computed serial (deprecated)"];
bool CTwoFactor_AddAuthenticator_Request::has_serial_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CTwoFactor_AddAuthenticator_Request::set_has_serial_number() {
  _has_bits_[0] |= 0x00000010u;
}
void CTwoFactor_AddAuthenticator_Request::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000010u;
}
void CTwoFactor_AddAuthenticator_Request::clear_serial_number() {
  serial_number_ = GOOGLE_ULONGLONG(0);
  clear_has_serial_number();
}
::google::protobuf::uint64 CTwoFactor_AddAuthenticator_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_AddAuthenticator_Request.serial_number)
  return serial_number_;
}
void CTwoFactor_AddAuthenticator_Request::set_serial_number(::google::protobuf::uint64 value) {
  set_has_serial_number();
  serial_number_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_AddAuthenticator_Request.serial_number)
}

// optional uint32 authenticator_type = 4 [(.proto.steam.description) = "Authenticator type"];
bool CTwoFactor_AddAuthenticator_Request::has_authenticator_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CTwoFactor_AddAuthenticator_Request::set_has_authenticator_type() {
  _has_bits_[0] |= 0x00000020u;
}
void CTwoFactor_AddAuthenticator_Request::clear_has_authenticator_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void CTwoFactor_AddAuthenticator_Request::clear_authenticator_type() {
  authenticator_type_ = 0u;
  clear_has_authenticator_type();
}
::google::protobuf::uint32 CTwoFactor_AddAuthenticator_Request::authenticator_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_AddAuthenticator_Request.authenticator_type)
  return authenticator_type_;
}
void CTwoFactor_AddAuthenticator_Request::set_authenticator_type(::google::protobuf::uint32 value) {
  set_has_authenticator_type();
  authenticator_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_AddAuthenticator_Request.authenticator_type)
}

// optional string device_identifier = 5 [(.proto.steam.description) = "Authenticator identifier"];
bool CTwoFactor_AddAuthenticator_Request::has_device_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CTwoFactor_AddAuthenticator_Request::set_has_device_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
void CTwoFactor_AddAuthenticator_Request::clear_has_device_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
void CTwoFactor_AddAuthenticator_Request::clear_device_identifier() {
  device_identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_identifier();
}
const ::std::string& CTwoFactor_AddAuthenticator_Request::device_identifier() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_AddAuthenticator_Request.device_identifier)
  return device_identifier_.GetNoArena();
}
void CTwoFactor_AddAuthenticator_Request::set_device_identifier(const ::std::string& value) {
  set_has_device_identifier();
  device_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_AddAuthenticator_Request.device_identifier)
}
#if LANG_CXX11
void CTwoFactor_AddAuthenticator_Request::set_device_identifier(::std::string&& value) {
  set_has_device_identifier();
  device_identifier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CTwoFactor_AddAuthenticator_Request.device_identifier)
}
#endif
void CTwoFactor_AddAuthenticator_Request::set_device_identifier(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_identifier();
  device_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CTwoFactor_AddAuthenticator_Request.device_identifier)
}
void CTwoFactor_AddAuthenticator_Request::set_device_identifier(const char* value, size_t size) {
  set_has_device_identifier();
  device_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CTwoFactor_AddAuthenticator_Request.device_identifier)
}
::std::string* CTwoFactor_AddAuthenticator_Request::mutable_device_identifier() {
  set_has_device_identifier();
  // @@protoc_insertion_point(field_mutable:proto.steam.CTwoFactor_AddAuthenticator_Request.device_identifier)
  return device_identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTwoFactor_AddAuthenticator_Request::release_device_identifier() {
  // @@protoc_insertion_point(field_release:proto.steam.CTwoFactor_AddAuthenticator_Request.device_identifier)
  clear_has_device_identifier();
  return device_identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTwoFactor_AddAuthenticator_Request::set_allocated_device_identifier(::std::string* device_identifier) {
  if (device_identifier != NULL) {
    set_has_device_identifier();
  } else {
    clear_has_device_identifier();
  }
  device_identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_identifier);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CTwoFactor_AddAuthenticator_Request.device_identifier)
}

// optional string sms_phone_id = 6 [(.proto.steam.description) = "ID of phone to use for SMS verification"];
bool CTwoFactor_AddAuthenticator_Request::has_sms_phone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CTwoFactor_AddAuthenticator_Request::set_has_sms_phone_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CTwoFactor_AddAuthenticator_Request::clear_has_sms_phone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CTwoFactor_AddAuthenticator_Request::clear_sms_phone_id() {
  sms_phone_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sms_phone_id();
}
const ::std::string& CTwoFactor_AddAuthenticator_Request::sms_phone_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_AddAuthenticator_Request.sms_phone_id)
  return sms_phone_id_.GetNoArena();
}
void CTwoFactor_AddAuthenticator_Request::set_sms_phone_id(const ::std::string& value) {
  set_has_sms_phone_id();
  sms_phone_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_AddAuthenticator_Request.sms_phone_id)
}
#if LANG_CXX11
void CTwoFactor_AddAuthenticator_Request::set_sms_phone_id(::std::string&& value) {
  set_has_sms_phone_id();
  sms_phone_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CTwoFactor_AddAuthenticator_Request.sms_phone_id)
}
#endif
void CTwoFactor_AddAuthenticator_Request::set_sms_phone_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sms_phone_id();
  sms_phone_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CTwoFactor_AddAuthenticator_Request.sms_phone_id)
}
void CTwoFactor_AddAuthenticator_Request::set_sms_phone_id(const char* value, size_t size) {
  set_has_sms_phone_id();
  sms_phone_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CTwoFactor_AddAuthenticator_Request.sms_phone_id)
}
::std::string* CTwoFactor_AddAuthenticator_Request::mutable_sms_phone_id() {
  set_has_sms_phone_id();
  // @@protoc_insertion_point(field_mutable:proto.steam.CTwoFactor_AddAuthenticator_Request.sms_phone_id)
  return sms_phone_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTwoFactor_AddAuthenticator_Request::release_sms_phone_id() {
  // @@protoc_insertion_point(field_release:proto.steam.CTwoFactor_AddAuthenticator_Request.sms_phone_id)
  clear_has_sms_phone_id();
  return sms_phone_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTwoFactor_AddAuthenticator_Request::set_allocated_sms_phone_id(::std::string* sms_phone_id) {
  if (sms_phone_id != NULL) {
    set_has_sms_phone_id();
  } else {
    clear_has_sms_phone_id();
  }
  sms_phone_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sms_phone_id);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CTwoFactor_AddAuthenticator_Request.sms_phone_id)
}

// repeated string http_headers = 7 [(.proto.steam.description) = "HTTP headers alternating by K/V"];
int CTwoFactor_AddAuthenticator_Request::http_headers_size() const {
  return http_headers_.size();
}
void CTwoFactor_AddAuthenticator_Request::clear_http_headers() {
  http_headers_.Clear();
}
const ::std::string& CTwoFactor_AddAuthenticator_Request::http_headers(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_AddAuthenticator_Request.http_headers)
  return http_headers_.Get(index);
}
::std::string* CTwoFactor_AddAuthenticator_Request::mutable_http_headers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CTwoFactor_AddAuthenticator_Request.http_headers)
  return http_headers_.Mutable(index);
}
void CTwoFactor_AddAuthenticator_Request::set_http_headers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_AddAuthenticator_Request.http_headers)
  http_headers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CTwoFactor_AddAuthenticator_Request::set_http_headers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_AddAuthenticator_Request.http_headers)
  http_headers_.Mutable(index)->assign(std::move(value));
}
#endif
void CTwoFactor_AddAuthenticator_Request::set_http_headers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  http_headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CTwoFactor_AddAuthenticator_Request.http_headers)
}
void CTwoFactor_AddAuthenticator_Request::set_http_headers(int index, const char* value, size_t size) {
  http_headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CTwoFactor_AddAuthenticator_Request.http_headers)
}
::std::string* CTwoFactor_AddAuthenticator_Request::add_http_headers() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CTwoFactor_AddAuthenticator_Request.http_headers)
  return http_headers_.Add();
}
void CTwoFactor_AddAuthenticator_Request::add_http_headers(const ::std::string& value) {
  http_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CTwoFactor_AddAuthenticator_Request.http_headers)
}
#if LANG_CXX11
void CTwoFactor_AddAuthenticator_Request::add_http_headers(::std::string&& value) {
  http_headers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CTwoFactor_AddAuthenticator_Request.http_headers)
}
#endif
void CTwoFactor_AddAuthenticator_Request::add_http_headers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  http_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CTwoFactor_AddAuthenticator_Request.http_headers)
}
void CTwoFactor_AddAuthenticator_Request::add_http_headers(const char* value, size_t size) {
  http_headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CTwoFactor_AddAuthenticator_Request.http_headers)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CTwoFactor_AddAuthenticator_Request::http_headers() const {
  // @@protoc_insertion_point(field_list:proto.steam.CTwoFactor_AddAuthenticator_Request.http_headers)
  return http_headers_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CTwoFactor_AddAuthenticator_Request::mutable_http_headers() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CTwoFactor_AddAuthenticator_Request.http_headers)
  return &http_headers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_AddAuthenticator_Response::kSharedSecretFieldNumber;
const int CTwoFactor_AddAuthenticator_Response::kSerialNumberFieldNumber;
const int CTwoFactor_AddAuthenticator_Response::kRevocationCodeFieldNumber;
const int CTwoFactor_AddAuthenticator_Response::kUriFieldNumber;
const int CTwoFactor_AddAuthenticator_Response::kServerTimeFieldNumber;
const int CTwoFactor_AddAuthenticator_Response::kAccountNameFieldNumber;
const int CTwoFactor_AddAuthenticator_Response::kTokenGidFieldNumber;
const int CTwoFactor_AddAuthenticator_Response::kIdentitySecretFieldNumber;
const int CTwoFactor_AddAuthenticator_Response::kSecret1FieldNumber;
const int CTwoFactor_AddAuthenticator_Response::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_AddAuthenticator_Response::CTwoFactor_AddAuthenticator_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_AddAuthenticator_Response)
}
CTwoFactor_AddAuthenticator_Response::CTwoFactor_AddAuthenticator_Response(const CTwoFactor_AddAuthenticator_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shared_secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_shared_secret()) {
    shared_secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shared_secret_);
  }
  revocation_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_revocation_code()) {
    revocation_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.revocation_code_);
  }
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uri()) {
    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_name()) {
    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  token_gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token_gid()) {
    token_gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_gid_);
  }
  identity_secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_identity_secret()) {
    identity_secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identity_secret_);
  }
  secret_1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secret_1()) {
    secret_1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_1_);
  }
  ::memcpy(&serial_number_, &from.serial_number_,
    reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&serial_number_) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_AddAuthenticator_Response)
}

void CTwoFactor_AddAuthenticator_Response::SharedCtor() {
  _cached_size_ = 0;
  shared_secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revocation_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identity_secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serial_number_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&serial_number_) + sizeof(status_));
}

CTwoFactor_AddAuthenticator_Response::~CTwoFactor_AddAuthenticator_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_AddAuthenticator_Response)
  SharedDtor();
}

void CTwoFactor_AddAuthenticator_Response::SharedDtor() {
  shared_secret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revocation_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_gid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identity_secret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTwoFactor_AddAuthenticator_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTwoFactor_AddAuthenticator_Response::descriptor() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CTwoFactor_AddAuthenticator_Response& CTwoFactor_AddAuthenticator_Response::default_instance() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CTwoFactor_AddAuthenticator_Response* CTwoFactor_AddAuthenticator_Response::New(::google::protobuf::Arena* arena) const {
  CTwoFactor_AddAuthenticator_Response* n = new CTwoFactor_AddAuthenticator_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CTwoFactor_AddAuthenticator_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_AddAuthenticator_Response)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_shared_secret()) {
      GOOGLE_DCHECK(!shared_secret_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*shared_secret_.UnsafeRawStringPointer())->clear();
    }
    if (has_revocation_code()) {
      GOOGLE_DCHECK(!revocation_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*revocation_code_.UnsafeRawStringPointer())->clear();
    }
    if (has_uri()) {
      GOOGLE_DCHECK(!uri_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uri_.UnsafeRawStringPointer())->clear();
    }
    if (has_account_name()) {
      GOOGLE_DCHECK(!account_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*account_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_token_gid()) {
      GOOGLE_DCHECK(!token_gid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*token_gid_.UnsafeRawStringPointer())->clear();
    }
    if (has_identity_secret()) {
      GOOGLE_DCHECK(!identity_secret_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*identity_secret_.UnsafeRawStringPointer())->clear();
    }
    if (has_secret_1()) {
      GOOGLE_DCHECK(!secret_1_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*secret_1_.UnsafeRawStringPointer())->clear();
    }
  }
  serial_number_ = GOOGLE_ULONGLONG(0);
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&server_time_, 0, reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&server_time_) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CTwoFactor_AddAuthenticator_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_AddAuthenticator_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes shared_secret = 1 [(.proto.steam.description) = "Shared secret between server and authenticator"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_shared_secret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 serial_number = 2 [(.proto.steam.description) = "Authenticator serial number (unique per token)"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_serial_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &serial_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string revocation_code = 3 [(.proto.steam.description) = "code used to revoke authenticator"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_revocation_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->revocation_code().data(), this->revocation_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_AddAuthenticator_Response.revocation_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string uri = 4 [(.proto.steam.description) = "URI for QR code generation"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_AddAuthenticator_Response.uri");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 server_time = 5 [(.proto.steam.description) = "Current server time"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_server_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_name = 6 [(.proto.steam.description) = "Account name to display on token client"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), this->account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_AddAuthenticator_Response.account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string token_gid = 7 [(.proto.steam.description) = "Token GID assigned by server"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token_gid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token_gid().data(), this->token_gid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_AddAuthenticator_Response.token_gid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes identity_secret = 8 [(.proto.steam.description) = "Secret used for identity attestation (e.g., for eventing)"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identity_secret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes secret_1 = 9 [(.proto.steam.description) = "Spare shared secret"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secret_1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 10 [(.proto.steam.description) = "Result code"];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_AddAuthenticator_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_AddAuthenticator_Response)
  return false;
#undef DO_
}

void CTwoFactor_AddAuthenticator_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_AddAuthenticator_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes shared_secret = 1 [(.proto.steam.description) = "Shared secret between server and authenticator"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->shared_secret(), output);
  }

  // optional fixed64 serial_number = 2 [(.proto.steam.description) = "Authenticator serial number (unique per token)"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->serial_number(), output);
  }

  // optional string revocation_code = 3 [(.proto.steam.description) = "code used to revoke authenticator"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->revocation_code().data(), this->revocation_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Response.revocation_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->revocation_code(), output);
  }

  // optional string uri = 4 [(.proto.steam.description) = "URI for QR code generation"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Response.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uri(), output);
  }

  // optional uint64 server_time = 5 [(.proto.steam.description) = "Current server time"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->server_time(), output);
  }

  // optional string account_name = 6 [(.proto.steam.description) = "Account name to display on token client"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Response.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account_name(), output);
  }

  // optional string token_gid = 7 [(.proto.steam.description) = "Token GID assigned by server"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token_gid().data(), this->token_gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Response.token_gid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->token_gid(), output);
  }

  // optional bytes identity_secret = 8 [(.proto.steam.description) = "Secret used for identity attestation (e.g., for eventing)"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->identity_secret(), output);
  }

  // optional bytes secret_1 = 9 [(.proto.steam.description) = "Spare shared secret"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->secret_1(), output);
  }

  // optional int32 status = 10 [(.proto.steam.description) = "Result code"];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_AddAuthenticator_Response)
}

::google::protobuf::uint8* CTwoFactor_AddAuthenticator_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_AddAuthenticator_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes shared_secret = 1 [(.proto.steam.description) = "Shared secret between server and authenticator"];
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->shared_secret(), target);
  }

  // optional fixed64 serial_number = 2 [(.proto.steam.description) = "Authenticator serial number (unique per token)"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->serial_number(), target);
  }

  // optional string revocation_code = 3 [(.proto.steam.description) = "code used to revoke authenticator"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->revocation_code().data(), this->revocation_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Response.revocation_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->revocation_code(), target);
  }

  // optional string uri = 4 [(.proto.steam.description) = "URI for QR code generation"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Response.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uri(), target);
  }

  // optional uint64 server_time = 5 [(.proto.steam.description) = "Current server time"];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->server_time(), target);
  }

  // optional string account_name = 6 [(.proto.steam.description) = "Account name to display on token client"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Response.account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account_name(), target);
  }

  // optional string token_gid = 7 [(.proto.steam.description) = "Token GID assigned by server"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token_gid().data(), this->token_gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Response.token_gid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->token_gid(), target);
  }

  // optional bytes identity_secret = 8 [(.proto.steam.description) = "Secret used for identity attestation (e.g., for eventing)"];
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->identity_secret(), target);
  }

  // optional bytes secret_1 = 9 [(.proto.steam.description) = "Spare shared secret"];
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->secret_1(), target);
  }

  // optional int32 status = 10 [(.proto.steam.description) = "Result code"];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_AddAuthenticator_Response)
  return target;
}

size_t CTwoFactor_AddAuthenticator_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_AddAuthenticator_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes shared_secret = 1 [(.proto.steam.description) = "Shared secret between server and authenticator"];
    if (has_shared_secret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->shared_secret());
    }

    // optional string revocation_code = 3 [(.proto.steam.description) = "code used to revoke authenticator"];
    if (has_revocation_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->revocation_code());
    }

    // optional string uri = 4 [(.proto.steam.description) = "URI for QR code generation"];
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string account_name = 6 [(.proto.steam.description) = "Account name to display on token client"];
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional string token_gid = 7 [(.proto.steam.description) = "Token GID assigned by server"];
    if (has_token_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token_gid());
    }

    // optional bytes identity_secret = 8 [(.proto.steam.description) = "Secret used for identity attestation (e.g., for eventing)"];
    if (has_identity_secret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identity_secret());
    }

    // optional bytes secret_1 = 9 [(.proto.steam.description) = "Spare shared secret"];
    if (has_secret_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secret_1());
    }

    // optional fixed64 serial_number = 2 [(.proto.steam.description) = "Authenticator serial number (unique per token)"];
    if (has_serial_number()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint64 server_time = 5 [(.proto.steam.description) = "Current server time"];
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_time());
    }

    // optional int32 status = 10 [(.proto.steam.description) = "Result code"];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTwoFactor_AddAuthenticator_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_AddAuthenticator_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_AddAuthenticator_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CTwoFactor_AddAuthenticator_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_AddAuthenticator_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_AddAuthenticator_Response)
    MergeFrom(*source);
  }
}

void CTwoFactor_AddAuthenticator_Response::MergeFrom(const CTwoFactor_AddAuthenticator_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_AddAuthenticator_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_shared_secret();
      shared_secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shared_secret_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_revocation_code();
      revocation_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.revocation_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_account_name();
      account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_token_gid();
      token_gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_gid_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_identity_secret();
      identity_secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identity_secret_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_secret_1();
      secret_1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_1_);
    }
    if (cached_has_bits & 0x00000080u) {
      serial_number_ = from.serial_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      server_time_ = from.server_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTwoFactor_AddAuthenticator_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_AddAuthenticator_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_AddAuthenticator_Response::CopyFrom(const CTwoFactor_AddAuthenticator_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_AddAuthenticator_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_AddAuthenticator_Response::IsInitialized() const {
  return true;
}

void CTwoFactor_AddAuthenticator_Response::Swap(CTwoFactor_AddAuthenticator_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_AddAuthenticator_Response::InternalSwap(CTwoFactor_AddAuthenticator_Response* other) {
  shared_secret_.Swap(&other->shared_secret_);
  revocation_code_.Swap(&other->revocation_code_);
  uri_.Swap(&other->uri_);
  account_name_.Swap(&other->account_name_);
  token_gid_.Swap(&other->token_gid_);
  identity_secret_.Swap(&other->identity_secret_);
  secret_1_.Swap(&other->secret_1_);
  std::swap(serial_number_, other->serial_number_);
  std::swap(server_time_, other->server_time_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CTwoFactor_AddAuthenticator_Response::GetMetadata() const {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CTwoFactor_AddAuthenticator_Response

// optional bytes shared_secret = 1 [(.proto.steam.description) = "Shared secret between server and authenticator"];
bool CTwoFactor_AddAuthenticator_Response::has_shared_secret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CTwoFactor_AddAuthenticator_Response::set_has_shared_secret() {
  _has_bits_[0] |= 0x00000001u;
}
void CTwoFactor_AddAuthenticator_Response::clear_has_shared_secret() {
  _has_bits_[0] &= ~0x00000001u;
}
void CTwoFactor_AddAuthenticator_Response::clear_shared_secret() {
  shared_secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_shared_secret();
}
const ::std::string& CTwoFactor_AddAuthenticator_Response::shared_secret() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_AddAuthenticator_Response.shared_secret)
  return shared_secret_.GetNoArena();
}
void CTwoFactor_AddAuthenticator_Response::set_shared_secret(const ::std::string& value) {
  set_has_shared_secret();
  shared_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_AddAuthenticator_Response.shared_secret)
}
#if LANG_CXX11
void CTwoFactor_AddAuthenticator_Response::set_shared_secret(::std::string&& value) {
  set_has_shared_secret();
  shared_secret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CTwoFactor_AddAuthenticator_Response.shared_secret)
}
#endif
void CTwoFactor_AddAuthenticator_Response::set_shared_secret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_shared_secret();
  shared_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CTwoFactor_AddAuthenticator_Response.shared_secret)
}
void CTwoFactor_AddAuthenticator_Response::set_shared_secret(const void* value, size_t size) {
  set_has_shared_secret();
  shared_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CTwoFactor_AddAuthenticator_Response.shared_secret)
}
::std::string* CTwoFactor_AddAuthenticator_Response::mutable_shared_secret() {
  set_has_shared_secret();
  // @@protoc_insertion_point(field_mutable:proto.steam.CTwoFactor_AddAuthenticator_Response.shared_secret)
  return shared_secret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTwoFactor_AddAuthenticator_Response::release_shared_secret() {
  // @@protoc_insertion_point(field_release:proto.steam.CTwoFactor_AddAuthenticator_Response.shared_secret)
  clear_has_shared_secret();
  return shared_secret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTwoFactor_AddAuthenticator_Response::set_allocated_shared_secret(::std::string* shared_secret) {
  if (shared_secret != NULL) {
    set_has_shared_secret();
  } else {
    clear_has_shared_secret();
  }
  shared_secret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shared_secret);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CTwoFactor_AddAuthenticator_Response.shared_secret)
}

// optional fixed64 serial_number = 2 [(.proto.steam.description) = "Authenticator serial number (unique per token)"];
bool CTwoFactor_AddAuthenticator_Response::has_serial_number() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CTwoFactor_AddAuthenticator_Response::set_has_serial_number() {
  _has_bits_[0] |= 0x00000080u;
}
void CTwoFactor_AddAuthenticator_Response::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000080u;
}
void CTwoFactor_AddAuthenticator_Response::clear_serial_number() {
  serial_number_ = GOOGLE_ULONGLONG(0);
  clear_has_serial_number();
}
::google::protobuf::uint64 CTwoFactor_AddAuthenticator_Response::serial_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_AddAuthenticator_Response.serial_number)
  return serial_number_;
}
void CTwoFactor_AddAuthenticator_Response::set_serial_number(::google::protobuf::uint64 value) {
  set_has_serial_number();
  serial_number_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_AddAuthenticator_Response.serial_number)
}

// optional string revocation_code = 3 [(.proto.steam.description) = "code used to revoke authenticator"];
bool CTwoFactor_AddAuthenticator_Response::has_revocation_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CTwoFactor_AddAuthenticator_Response::set_has_revocation_code() {
  _has_bits_[0] |= 0x00000002u;
}
void CTwoFactor_AddAuthenticator_Response::clear_has_revocation_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void CTwoFactor_AddAuthenticator_Response::clear_revocation_code() {
  revocation_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_revocation_code();
}
const ::std::string& CTwoFactor_AddAuthenticator_Response::revocation_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_AddAuthenticator_Response.revocation_code)
  return revocation_code_.GetNoArena();
}
void CTwoFactor_AddAuthenticator_Response::set_revocation_code(const ::std::string& value) {
  set_has_revocation_code();
  revocation_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_AddAuthenticator_Response.revocation_code)
}
#if LANG_CXX11
void CTwoFactor_AddAuthenticator_Response::set_revocation_code(::std::string&& value) {
  set_has_revocation_code();
  revocation_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CTwoFactor_AddAuthenticator_Response.revocation_code)
}
#endif
void CTwoFactor_AddAuthenticator_Response::set_revocation_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_revocation_code();
  revocation_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CTwoFactor_AddAuthenticator_Response.revocation_code)
}
void CTwoFactor_AddAuthenticator_Response::set_revocation_code(const char* value, size_t size) {
  set_has_revocation_code();
  revocation_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CTwoFactor_AddAuthenticator_Response.revocation_code)
}
::std::string* CTwoFactor_AddAuthenticator_Response::mutable_revocation_code() {
  set_has_revocation_code();
  // @@protoc_insertion_point(field_mutable:proto.steam.CTwoFactor_AddAuthenticator_Response.revocation_code)
  return revocation_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTwoFactor_AddAuthenticator_Response::release_revocation_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CTwoFactor_AddAuthenticator_Response.revocation_code)
  clear_has_revocation_code();
  return revocation_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTwoFactor_AddAuthenticator_Response::set_allocated_revocation_code(::std::string* revocation_code) {
  if (revocation_code != NULL) {
    set_has_revocation_code();
  } else {
    clear_has_revocation_code();
  }
  revocation_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), revocation_code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CTwoFactor_AddAuthenticator_Response.revocation_code)
}

// optional string uri = 4 [(.proto.steam.description) = "URI for QR code generation"];
bool CTwoFactor_AddAuthenticator_Response::has_uri() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CTwoFactor_AddAuthenticator_Response::set_has_uri() {
  _has_bits_[0] |= 0x00000004u;
}
void CTwoFactor_AddAuthenticator_Response::clear_has_uri() {
  _has_bits_[0] &= ~0x00000004u;
}
void CTwoFactor_AddAuthenticator_Response::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
const ::std::string& CTwoFactor_AddAuthenticator_Response::uri() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_AddAuthenticator_Response.uri)
  return uri_.GetNoArena();
}
void CTwoFactor_AddAuthenticator_Response::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_AddAuthenticator_Response.uri)
}
#if LANG_CXX11
void CTwoFactor_AddAuthenticator_Response::set_uri(::std::string&& value) {
  set_has_uri();
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CTwoFactor_AddAuthenticator_Response.uri)
}
#endif
void CTwoFactor_AddAuthenticator_Response::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CTwoFactor_AddAuthenticator_Response.uri)
}
void CTwoFactor_AddAuthenticator_Response::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CTwoFactor_AddAuthenticator_Response.uri)
}
::std::string* CTwoFactor_AddAuthenticator_Response::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:proto.steam.CTwoFactor_AddAuthenticator_Response.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTwoFactor_AddAuthenticator_Response::release_uri() {
  // @@protoc_insertion_point(field_release:proto.steam.CTwoFactor_AddAuthenticator_Response.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTwoFactor_AddAuthenticator_Response::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CTwoFactor_AddAuthenticator_Response.uri)
}

// optional uint64 server_time = 5 [(.proto.steam.description) = "Current server time"];
bool CTwoFactor_AddAuthenticator_Response::has_server_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CTwoFactor_AddAuthenticator_Response::set_has_server_time() {
  _has_bits_[0] |= 0x00000100u;
}
void CTwoFactor_AddAuthenticator_Response::clear_has_server_time() {
  _has_bits_[0] &= ~0x00000100u;
}
void CTwoFactor_AddAuthenticator_Response::clear_server_time() {
  server_time_ = GOOGLE_ULONGLONG(0);
  clear_has_server_time();
}
::google::protobuf::uint64 CTwoFactor_AddAuthenticator_Response::server_time() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_AddAuthenticator_Response.server_time)
  return server_time_;
}
void CTwoFactor_AddAuthenticator_Response::set_server_time(::google::protobuf::uint64 value) {
  set_has_server_time();
  server_time_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_AddAuthenticator_Response.server_time)
}

// optional string account_name = 6 [(.proto.steam.description) = "Account name to display on token client"];
bool CTwoFactor_AddAuthenticator_Response::has_account_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CTwoFactor_AddAuthenticator_Response::set_has_account_name() {
  _has_bits_[0] |= 0x00000008u;
}
void CTwoFactor_AddAuthenticator_Response::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void CTwoFactor_AddAuthenticator_Response::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_name();
}
const ::std::string& CTwoFactor_AddAuthenticator_Response::account_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_AddAuthenticator_Response.account_name)
  return account_name_.GetNoArena();
}
void CTwoFactor_AddAuthenticator_Response::set_account_name(const ::std::string& value) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_AddAuthenticator_Response.account_name)
}
#if LANG_CXX11
void CTwoFactor_AddAuthenticator_Response::set_account_name(::std::string&& value) {
  set_has_account_name();
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CTwoFactor_AddAuthenticator_Response.account_name)
}
#endif
void CTwoFactor_AddAuthenticator_Response::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CTwoFactor_AddAuthenticator_Response.account_name)
}
void CTwoFactor_AddAuthenticator_Response::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CTwoFactor_AddAuthenticator_Response.account_name)
}
::std::string* CTwoFactor_AddAuthenticator_Response::mutable_account_name() {
  set_has_account_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CTwoFactor_AddAuthenticator_Response.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTwoFactor_AddAuthenticator_Response::release_account_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CTwoFactor_AddAuthenticator_Response.account_name)
  clear_has_account_name();
  return account_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTwoFactor_AddAuthenticator_Response::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    set_has_account_name();
  } else {
    clear_has_account_name();
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CTwoFactor_AddAuthenticator_Response.account_name)
}

// optional string token_gid = 7 [(.proto.steam.description) = "Token GID assigned by server"];
bool CTwoFactor_AddAuthenticator_Response::has_token_gid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CTwoFactor_AddAuthenticator_Response::set_has_token_gid() {
  _has_bits_[0] |= 0x00000010u;
}
void CTwoFactor_AddAuthenticator_Response::clear_has_token_gid() {
  _has_bits_[0] &= ~0x00000010u;
}
void CTwoFactor_AddAuthenticator_Response::clear_token_gid() {
  token_gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token_gid();
}
const ::std::string& CTwoFactor_AddAuthenticator_Response::token_gid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_AddAuthenticator_Response.token_gid)
  return token_gid_.GetNoArena();
}
void CTwoFactor_AddAuthenticator_Response::set_token_gid(const ::std::string& value) {
  set_has_token_gid();
  token_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_AddAuthenticator_Response.token_gid)
}
#if LANG_CXX11
void CTwoFactor_AddAuthenticator_Response::set_token_gid(::std::string&& value) {
  set_has_token_gid();
  token_gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CTwoFactor_AddAuthenticator_Response.token_gid)
}
#endif
void CTwoFactor_AddAuthenticator_Response::set_token_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token_gid();
  token_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CTwoFactor_AddAuthenticator_Response.token_gid)
}
void CTwoFactor_AddAuthenticator_Response::set_token_gid(const char* value, size_t size) {
  set_has_token_gid();
  token_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CTwoFactor_AddAuthenticator_Response.token_gid)
}
::std::string* CTwoFactor_AddAuthenticator_Response::mutable_token_gid() {
  set_has_token_gid();
  // @@protoc_insertion_point(field_mutable:proto.steam.CTwoFactor_AddAuthenticator_Response.token_gid)
  return token_gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTwoFactor_AddAuthenticator_Response::release_token_gid() {
  // @@protoc_insertion_point(field_release:proto.steam.CTwoFactor_AddAuthenticator_Response.token_gid)
  clear_has_token_gid();
  return token_gid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTwoFactor_AddAuthenticator_Response::set_allocated_token_gid(::std::string* token_gid) {
  if (token_gid != NULL) {
    set_has_token_gid();
  } else {
    clear_has_token_gid();
  }
  token_gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token_gid);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CTwoFactor_AddAuthenticator_Response.token_gid)
}

// optional bytes identity_secret = 8 [(.proto.steam.description) = "Secret used for identity attestation (e.g., for eventing)"];
bool CTwoFactor_AddAuthenticator_Response::has_identity_secret() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CTwoFactor_AddAuthenticator_Response::set_has_identity_secret() {
  _has_bits_[0] |= 0x00000020u;
}
void CTwoFactor_AddAuthenticator_Response::clear_has_identity_secret() {
  _has_bits_[0] &= ~0x00000020u;
}
void CTwoFactor_AddAuthenticator_Response::clear_identity_secret() {
  identity_secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_identity_secret();
}
const ::std::string& CTwoFactor_AddAuthenticator_Response::identity_secret() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_AddAuthenticator_Response.identity_secret)
  return identity_secret_.GetNoArena();
}
void CTwoFactor_AddAuthenticator_Response::set_identity_secret(const ::std::string& value) {
  set_has_identity_secret();
  identity_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_AddAuthenticator_Response.identity_secret)
}
#if LANG_CXX11
void CTwoFactor_AddAuthenticator_Response::set_identity_secret(::std::string&& value) {
  set_has_identity_secret();
  identity_secret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CTwoFactor_AddAuthenticator_Response.identity_secret)
}
#endif
void CTwoFactor_AddAuthenticator_Response::set_identity_secret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_identity_secret();
  identity_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CTwoFactor_AddAuthenticator_Response.identity_secret)
}
void CTwoFactor_AddAuthenticator_Response::set_identity_secret(const void* value, size_t size) {
  set_has_identity_secret();
  identity_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CTwoFactor_AddAuthenticator_Response.identity_secret)
}
::std::string* CTwoFactor_AddAuthenticator_Response::mutable_identity_secret() {
  set_has_identity_secret();
  // @@protoc_insertion_point(field_mutable:proto.steam.CTwoFactor_AddAuthenticator_Response.identity_secret)
  return identity_secret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTwoFactor_AddAuthenticator_Response::release_identity_secret() {
  // @@protoc_insertion_point(field_release:proto.steam.CTwoFactor_AddAuthenticator_Response.identity_secret)
  clear_has_identity_secret();
  return identity_secret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTwoFactor_AddAuthenticator_Response::set_allocated_identity_secret(::std::string* identity_secret) {
  if (identity_secret != NULL) {
    set_has_identity_secret();
  } else {
    clear_has_identity_secret();
  }
  identity_secret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identity_secret);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CTwoFactor_AddAuthenticator_Response.identity_secret)
}

// optional bytes secret_1 = 9 [(.proto.steam.description) = "Spare shared secret"];
bool CTwoFactor_AddAuthenticator_Response::has_secret_1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CTwoFactor_AddAuthenticator_Response::set_has_secret_1() {
  _has_bits_[0] |= 0x00000040u;
}
void CTwoFactor_AddAuthenticator_Response::clear_has_secret_1() {
  _has_bits_[0] &= ~0x00000040u;
}
void CTwoFactor_AddAuthenticator_Response::clear_secret_1() {
  secret_1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_secret_1();
}
const ::std::string& CTwoFactor_AddAuthenticator_Response::secret_1() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_AddAuthenticator_Response.secret_1)
  return secret_1_.GetNoArena();
}
void CTwoFactor_AddAuthenticator_Response::set_secret_1(const ::std::string& value) {
  set_has_secret_1();
  secret_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_AddAuthenticator_Response.secret_1)
}
#if LANG_CXX11
void CTwoFactor_AddAuthenticator_Response::set_secret_1(::std::string&& value) {
  set_has_secret_1();
  secret_1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CTwoFactor_AddAuthenticator_Response.secret_1)
}
#endif
void CTwoFactor_AddAuthenticator_Response::set_secret_1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_secret_1();
  secret_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CTwoFactor_AddAuthenticator_Response.secret_1)
}
void CTwoFactor_AddAuthenticator_Response::set_secret_1(const void* value, size_t size) {
  set_has_secret_1();
  secret_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CTwoFactor_AddAuthenticator_Response.secret_1)
}
::std::string* CTwoFactor_AddAuthenticator_Response::mutable_secret_1() {
  set_has_secret_1();
  // @@protoc_insertion_point(field_mutable:proto.steam.CTwoFactor_AddAuthenticator_Response.secret_1)
  return secret_1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTwoFactor_AddAuthenticator_Response::release_secret_1() {
  // @@protoc_insertion_point(field_release:proto.steam.CTwoFactor_AddAuthenticator_Response.secret_1)
  clear_has_secret_1();
  return secret_1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTwoFactor_AddAuthenticator_Response::set_allocated_secret_1(::std::string* secret_1) {
  if (secret_1 != NULL) {
    set_has_secret_1();
  } else {
    clear_has_secret_1();
  }
  secret_1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret_1);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CTwoFactor_AddAuthenticator_Response.secret_1)
}

// optional int32 status = 10 [(.proto.steam.description) = "Result code"];
bool CTwoFactor_AddAuthenticator_Response::has_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CTwoFactor_AddAuthenticator_Response::set_has_status() {
  _has_bits_[0] |= 0x00000200u;
}
void CTwoFactor_AddAuthenticator_Response::clear_has_status() {
  _has_bits_[0] &= ~0x00000200u;
}
void CTwoFactor_AddAuthenticator_Response::clear_status() {
  status_ = 0;
  clear_has_status();
}
::google::protobuf::int32 CTwoFactor_AddAuthenticator_Response::status() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_AddAuthenticator_Response.status)
  return status_;
}
void CTwoFactor_AddAuthenticator_Response::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_AddAuthenticator_Response.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_SendEmail_Request::kSteamidFieldNumber;
const int CTwoFactor_SendEmail_Request::kEmailTypeFieldNumber;
const int CTwoFactor_SendEmail_Request::kIncludeActivationCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_SendEmail_Request::CTwoFactor_SendEmail_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_SendEmail_Request)
}
CTwoFactor_SendEmail_Request::CTwoFactor_SendEmail_Request(const CTwoFactor_SendEmail_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&include_activation_code_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(include_activation_code_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_SendEmail_Request)
}

void CTwoFactor_SendEmail_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&include_activation_code_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(include_activation_code_));
}

CTwoFactor_SendEmail_Request::~CTwoFactor_SendEmail_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_SendEmail_Request)
  SharedDtor();
}

void CTwoFactor_SendEmail_Request::SharedDtor() {
}

void CTwoFactor_SendEmail_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTwoFactor_SendEmail_Request::descriptor() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CTwoFactor_SendEmail_Request& CTwoFactor_SendEmail_Request::default_instance() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CTwoFactor_SendEmail_Request* CTwoFactor_SendEmail_Request::New(::google::protobuf::Arena* arena) const {
  CTwoFactor_SendEmail_Request* n = new CTwoFactor_SendEmail_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CTwoFactor_SendEmail_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_SendEmail_Request)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&include_activation_code_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(include_activation_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CTwoFactor_SendEmail_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_SendEmail_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steamid to use"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 email_type = 2 [(.proto.steam.description) = "Type of email to send (ETwoFactorEmailType::*)"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_email_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &email_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_activation_code = 3 [(.proto.steam.description) = "Include activation code in email parameters"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_include_activation_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_activation_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_SendEmail_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_SendEmail_Request)
  return false;
#undef DO_
}

void CTwoFactor_SendEmail_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_SendEmail_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steamid to use"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 email_type = 2 [(.proto.steam.description) = "Type of email to send (ETwoFactorEmailType::*)"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->email_type(), output);
  }

  // optional bool include_activation_code = 3 [(.proto.steam.description) = "Include activation code in email parameters"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->include_activation_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_SendEmail_Request)
}

::google::protobuf::uint8* CTwoFactor_SendEmail_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_SendEmail_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steamid to use"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 email_type = 2 [(.proto.steam.description) = "Type of email to send (ETwoFactorEmailType::*)"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->email_type(), target);
  }

  // optional bool include_activation_code = 3 [(.proto.steam.description) = "Include activation code in email parameters"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->include_activation_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_SendEmail_Request)
  return target;
}

size_t CTwoFactor_SendEmail_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_SendEmail_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steamid to use"];
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 email_type = 2 [(.proto.steam.description) = "Type of email to send (ETwoFactorEmailType::*)"];
    if (has_email_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->email_type());
    }

    // optional bool include_activation_code = 3 [(.proto.steam.description) = "Include activation code in email parameters"];
    if (has_include_activation_code()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTwoFactor_SendEmail_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_SendEmail_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_SendEmail_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CTwoFactor_SendEmail_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_SendEmail_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_SendEmail_Request)
    MergeFrom(*source);
  }
}

void CTwoFactor_SendEmail_Request::MergeFrom(const CTwoFactor_SendEmail_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_SendEmail_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      email_type_ = from.email_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      include_activation_code_ = from.include_activation_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTwoFactor_SendEmail_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_SendEmail_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_SendEmail_Request::CopyFrom(const CTwoFactor_SendEmail_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_SendEmail_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_SendEmail_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_SendEmail_Request::Swap(CTwoFactor_SendEmail_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_SendEmail_Request::InternalSwap(CTwoFactor_SendEmail_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(email_type_, other->email_type_);
  std::swap(include_activation_code_, other->include_activation_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CTwoFactor_SendEmail_Request::GetMetadata() const {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CTwoFactor_SendEmail_Request

// optional fixed64 steamid = 1 [(.proto.steam.description) = "Steamid to use"];
bool CTwoFactor_SendEmail_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CTwoFactor_SendEmail_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CTwoFactor_SendEmail_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CTwoFactor_SendEmail_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CTwoFactor_SendEmail_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_SendEmail_Request.steamid)
  return steamid_;
}
void CTwoFactor_SendEmail_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_SendEmail_Request.steamid)
}

// optional uint32 email_type = 2 [(.proto.steam.description) = "Type of email to send (ETwoFactorEmailType::*)"];
bool CTwoFactor_SendEmail_Request::has_email_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CTwoFactor_SendEmail_Request::set_has_email_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CTwoFactor_SendEmail_Request::clear_has_email_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CTwoFactor_SendEmail_Request::clear_email_type() {
  email_type_ = 0u;
  clear_has_email_type();
}
::google::protobuf::uint32 CTwoFactor_SendEmail_Request::email_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_SendEmail_Request.email_type)
  return email_type_;
}
void CTwoFactor_SendEmail_Request::set_email_type(::google::protobuf::uint32 value) {
  set_has_email_type();
  email_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_SendEmail_Request.email_type)
}

// optional bool include_activation_code = 3 [(.proto.steam.description) = "Include activation code in email parameters"];
bool CTwoFactor_SendEmail_Request::has_include_activation_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CTwoFactor_SendEmail_Request::set_has_include_activation_code() {
  _has_bits_[0] |= 0x00000004u;
}
void CTwoFactor_SendEmail_Request::clear_has_include_activation_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void CTwoFactor_SendEmail_Request::clear_include_activation_code() {
  include_activation_code_ = false;
  clear_has_include_activation_code();
}
bool CTwoFactor_SendEmail_Request::include_activation_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_SendEmail_Request.include_activation_code)
  return include_activation_code_;
}
void CTwoFactor_SendEmail_Request::set_include_activation_code(bool value) {
  set_has_include_activation_code();
  include_activation_code_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_SendEmail_Request.include_activation_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_SendEmail_Response::CTwoFactor_SendEmail_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_SendEmail_Response)
}
CTwoFactor_SendEmail_Response::CTwoFactor_SendEmail_Response(const CTwoFactor_SendEmail_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_SendEmail_Response)
}

void CTwoFactor_SendEmail_Response::SharedCtor() {
  _cached_size_ = 0;
}

CTwoFactor_SendEmail_Response::~CTwoFactor_SendEmail_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_SendEmail_Response)
  SharedDtor();
}

void CTwoFactor_SendEmail_Response::SharedDtor() {
}

void CTwoFactor_SendEmail_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTwoFactor_SendEmail_Response::descriptor() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CTwoFactor_SendEmail_Response& CTwoFactor_SendEmail_Response::default_instance() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CTwoFactor_SendEmail_Response* CTwoFactor_SendEmail_Response::New(::google::protobuf::Arena* arena) const {
  CTwoFactor_SendEmail_Response* n = new CTwoFactor_SendEmail_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CTwoFactor_SendEmail_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_SendEmail_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CTwoFactor_SendEmail_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_SendEmail_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_SendEmail_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_SendEmail_Response)
  return false;
#undef DO_
}

void CTwoFactor_SendEmail_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_SendEmail_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_SendEmail_Response)
}

::google::protobuf::uint8* CTwoFactor_SendEmail_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_SendEmail_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_SendEmail_Response)
  return target;
}

size_t CTwoFactor_SendEmail_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_SendEmail_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTwoFactor_SendEmail_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_SendEmail_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_SendEmail_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CTwoFactor_SendEmail_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_SendEmail_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_SendEmail_Response)
    MergeFrom(*source);
  }
}

void CTwoFactor_SendEmail_Response::MergeFrom(const CTwoFactor_SendEmail_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_SendEmail_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CTwoFactor_SendEmail_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_SendEmail_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_SendEmail_Response::CopyFrom(const CTwoFactor_SendEmail_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_SendEmail_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_SendEmail_Response::IsInitialized() const {
  return true;
}

void CTwoFactor_SendEmail_Response::Swap(CTwoFactor_SendEmail_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_SendEmail_Response::InternalSwap(CTwoFactor_SendEmail_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CTwoFactor_SendEmail_Response::GetMetadata() const {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CTwoFactor_SendEmail_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_FinalizeAddAuthenticator_Request::kSteamidFieldNumber;
const int CTwoFactor_FinalizeAddAuthenticator_Request::kAuthenticatorCodeFieldNumber;
const int CTwoFactor_FinalizeAddAuthenticator_Request::kAuthenticatorTimeFieldNumber;
const int CTwoFactor_FinalizeAddAuthenticator_Request::kActivationCodeFieldNumber;
const int CTwoFactor_FinalizeAddAuthenticator_Request::kHttpHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_FinalizeAddAuthenticator_Request::CTwoFactor_FinalizeAddAuthenticator_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
}
CTwoFactor_FinalizeAddAuthenticator_Request::CTwoFactor_FinalizeAddAuthenticator_Request(const CTwoFactor_FinalizeAddAuthenticator_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      http_headers_(from.http_headers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  authenticator_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_authenticator_code()) {
    authenticator_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authenticator_code_);
  }
  activation_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_activation_code()) {
    activation_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activation_code_);
  }
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&authenticator_time_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(authenticator_time_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
}

void CTwoFactor_FinalizeAddAuthenticator_Request::SharedCtor() {
  _cached_size_ = 0;
  authenticator_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activation_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&authenticator_time_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(authenticator_time_));
}

CTwoFactor_FinalizeAddAuthenticator_Request::~CTwoFactor_FinalizeAddAuthenticator_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  SharedDtor();
}

void CTwoFactor_FinalizeAddAuthenticator_Request::SharedDtor() {
  authenticator_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activation_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTwoFactor_FinalizeAddAuthenticator_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTwoFactor_FinalizeAddAuthenticator_Request::descriptor() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CTwoFactor_FinalizeAddAuthenticator_Request& CTwoFactor_FinalizeAddAuthenticator_Request::default_instance() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CTwoFactor_FinalizeAddAuthenticator_Request* CTwoFactor_FinalizeAddAuthenticator_Request::New(::google::protobuf::Arena* arena) const {
  CTwoFactor_FinalizeAddAuthenticator_Request* n = new CTwoFactor_FinalizeAddAuthenticator_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CTwoFactor_FinalizeAddAuthenticator_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  http_headers_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_authenticator_code()) {
      GOOGLE_DCHECK(!authenticator_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*authenticator_code_.UnsafeRawStringPointer())->clear();
    }
    if (has_activation_code()) {
      GOOGLE_DCHECK(!activation_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*activation_code_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&authenticator_time_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(authenticator_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CTwoFactor_FinalizeAddAuthenticator_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string authenticator_code = 2 [(.proto.steam.description) = "Current auth code"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authenticator_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authenticator_code().data(), this->authenticator_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 authenticator_time = 3 [(.proto.steam.description) = "Current authenticator time"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_authenticator_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &authenticator_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string activation_code = 4 [(.proto.steam.description) = "Activation code from out-of-band message"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activation_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->activation_code().data(), this->activation_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.activation_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string http_headers = 5 [(.proto.steam.description) = "HTTP headers alternating by K/V"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_http_headers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->http_headers(this->http_headers_size() - 1).data(),
            this->http_headers(this->http_headers_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.http_headers");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  return false;
#undef DO_
}

void CTwoFactor_FinalizeAddAuthenticator_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string authenticator_code = 2 [(.proto.steam.description) = "Current auth code"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authenticator_code().data(), this->authenticator_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->authenticator_code(), output);
  }

  // optional uint64 authenticator_time = 3 [(.proto.steam.description) = "Current authenticator time"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->authenticator_time(), output);
  }

  // optional string activation_code = 4 [(.proto.steam.description) = "Activation code from out-of-band message"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->activation_code().data(), this->activation_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.activation_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->activation_code(), output);
  }

  // repeated string http_headers = 5 [(.proto.steam.description) = "HTTP headers alternating by K/V"];
  for (int i = 0, n = this->http_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_headers(i).data(), this->http_headers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.http_headers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->http_headers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
}

::google::protobuf::uint8* CTwoFactor_FinalizeAddAuthenticator_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional string authenticator_code = 2 [(.proto.steam.description) = "Current auth code"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authenticator_code().data(), this->authenticator_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->authenticator_code(), target);
  }

  // optional uint64 authenticator_time = 3 [(.proto.steam.description) = "Current authenticator time"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->authenticator_time(), target);
  }

  // optional string activation_code = 4 [(.proto.steam.description) = "Activation code from out-of-band message"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->activation_code().data(), this->activation_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.activation_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->activation_code(), target);
  }

  // repeated string http_headers = 5 [(.proto.steam.description) = "HTTP headers alternating by K/V"];
  for (int i = 0, n = this->http_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_headers(i).data(), this->http_headers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.http_headers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->http_headers(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  return target;
}

size_t CTwoFactor_FinalizeAddAuthenticator_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string http_headers = 5 [(.proto.steam.description) = "HTTP headers alternating by K/V"];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->http_headers_size());
  for (int i = 0, n = this->http_headers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->http_headers(i));
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string authenticator_code = 2 [(.proto.steam.description) = "Current auth code"];
    if (has_authenticator_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authenticator_code());
    }

    // optional string activation_code = 4 [(.proto.steam.description) = "Activation code from out-of-band message"];
    if (has_activation_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activation_code());
    }

    // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint64 authenticator_time = 3 [(.proto.steam.description) = "Current authenticator time"];
    if (has_authenticator_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->authenticator_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTwoFactor_FinalizeAddAuthenticator_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_FinalizeAddAuthenticator_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CTwoFactor_FinalizeAddAuthenticator_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
    MergeFrom(*source);
  }
}

void CTwoFactor_FinalizeAddAuthenticator_Request::MergeFrom(const CTwoFactor_FinalizeAddAuthenticator_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  http_headers_.MergeFrom(from.http_headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_authenticator_code();
      authenticator_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authenticator_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_activation_code();
      activation_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activation_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      authenticator_time_ = from.authenticator_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTwoFactor_FinalizeAddAuthenticator_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_FinalizeAddAuthenticator_Request::CopyFrom(const CTwoFactor_FinalizeAddAuthenticator_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_FinalizeAddAuthenticator_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_FinalizeAddAuthenticator_Request::Swap(CTwoFactor_FinalizeAddAuthenticator_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_FinalizeAddAuthenticator_Request::InternalSwap(CTwoFactor_FinalizeAddAuthenticator_Request* other) {
  http_headers_.InternalSwap(&other->http_headers_);
  authenticator_code_.Swap(&other->authenticator_code_);
  activation_code_.Swap(&other->activation_code_);
  std::swap(steamid_, other->steamid_);
  std::swap(authenticator_time_, other->authenticator_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CTwoFactor_FinalizeAddAuthenticator_Request::GetMetadata() const {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CTwoFactor_FinalizeAddAuthenticator_Request

// optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
bool CTwoFactor_FinalizeAddAuthenticator_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CTwoFactor_FinalizeAddAuthenticator_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000004u;
}
void CTwoFactor_FinalizeAddAuthenticator_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CTwoFactor_FinalizeAddAuthenticator_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CTwoFactor_FinalizeAddAuthenticator_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.steamid)
  return steamid_;
}
void CTwoFactor_FinalizeAddAuthenticator_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.steamid)
}

// optional string authenticator_code = 2 [(.proto.steam.description) = "Current auth code"];
bool CTwoFactor_FinalizeAddAuthenticator_Request::has_authenticator_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CTwoFactor_FinalizeAddAuthenticator_Request::set_has_authenticator_code() {
  _has_bits_[0] |= 0x00000001u;
}
void CTwoFactor_FinalizeAddAuthenticator_Request::clear_has_authenticator_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void CTwoFactor_FinalizeAddAuthenticator_Request::clear_authenticator_code() {
  authenticator_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authenticator_code();
}
const ::std::string& CTwoFactor_FinalizeAddAuthenticator_Request::authenticator_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_code)
  return authenticator_code_.GetNoArena();
}
void CTwoFactor_FinalizeAddAuthenticator_Request::set_authenticator_code(const ::std::string& value) {
  set_has_authenticator_code();
  authenticator_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_code)
}
#if LANG_CXX11
void CTwoFactor_FinalizeAddAuthenticator_Request::set_authenticator_code(::std::string&& value) {
  set_has_authenticator_code();
  authenticator_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_code)
}
#endif
void CTwoFactor_FinalizeAddAuthenticator_Request::set_authenticator_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_authenticator_code();
  authenticator_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_code)
}
void CTwoFactor_FinalizeAddAuthenticator_Request::set_authenticator_code(const char* value, size_t size) {
  set_has_authenticator_code();
  authenticator_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_code)
}
::std::string* CTwoFactor_FinalizeAddAuthenticator_Request::mutable_authenticator_code() {
  set_has_authenticator_code();
  // @@protoc_insertion_point(field_mutable:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_code)
  return authenticator_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTwoFactor_FinalizeAddAuthenticator_Request::release_authenticator_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_code)
  clear_has_authenticator_code();
  return authenticator_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTwoFactor_FinalizeAddAuthenticator_Request::set_allocated_authenticator_code(::std::string* authenticator_code) {
  if (authenticator_code != NULL) {
    set_has_authenticator_code();
  } else {
    clear_has_authenticator_code();
  }
  authenticator_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authenticator_code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_code)
}

// optional uint64 authenticator_time = 3 [(.proto.steam.description) = "Current authenticator time"];
bool CTwoFactor_FinalizeAddAuthenticator_Request::has_authenticator_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CTwoFactor_FinalizeAddAuthenticator_Request::set_has_authenticator_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CTwoFactor_FinalizeAddAuthenticator_Request::clear_has_authenticator_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CTwoFactor_FinalizeAddAuthenticator_Request::clear_authenticator_time() {
  authenticator_time_ = GOOGLE_ULONGLONG(0);
  clear_has_authenticator_time();
}
::google::protobuf::uint64 CTwoFactor_FinalizeAddAuthenticator_Request::authenticator_time() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_time)
  return authenticator_time_;
}
void CTwoFactor_FinalizeAddAuthenticator_Request::set_authenticator_time(::google::protobuf::uint64 value) {
  set_has_authenticator_time();
  authenticator_time_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_time)
}

// optional string activation_code = 4 [(.proto.steam.description) = "Activation code from out-of-band message"];
bool CTwoFactor_FinalizeAddAuthenticator_Request::has_activation_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CTwoFactor_FinalizeAddAuthenticator_Request::set_has_activation_code() {
  _has_bits_[0] |= 0x00000002u;
}
void CTwoFactor_FinalizeAddAuthenticator_Request::clear_has_activation_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void CTwoFactor_FinalizeAddAuthenticator_Request::clear_activation_code() {
  activation_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_activation_code();
}
const ::std::string& CTwoFactor_FinalizeAddAuthenticator_Request::activation_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.activation_code)
  return activation_code_.GetNoArena();
}
void CTwoFactor_FinalizeAddAuthenticator_Request::set_activation_code(const ::std::string& value) {
  set_has_activation_code();
  activation_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.activation_code)
}
#if LANG_CXX11
void CTwoFactor_FinalizeAddAuthenticator_Request::set_activation_code(::std::string&& value) {
  set_has_activation_code();
  activation_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.activation_code)
}
#endif
void CTwoFactor_FinalizeAddAuthenticator_Request::set_activation_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_activation_code();
  activation_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.activation_code)
}
void CTwoFactor_FinalizeAddAuthenticator_Request::set_activation_code(const char* value, size_t size) {
  set_has_activation_code();
  activation_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.activation_code)
}
::std::string* CTwoFactor_FinalizeAddAuthenticator_Request::mutable_activation_code() {
  set_has_activation_code();
  // @@protoc_insertion_point(field_mutable:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.activation_code)
  return activation_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTwoFactor_FinalizeAddAuthenticator_Request::release_activation_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.activation_code)
  clear_has_activation_code();
  return activation_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTwoFactor_FinalizeAddAuthenticator_Request::set_allocated_activation_code(::std::string* activation_code) {
  if (activation_code != NULL) {
    set_has_activation_code();
  } else {
    clear_has_activation_code();
  }
  activation_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activation_code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.activation_code)
}

// repeated string http_headers = 5 [(.proto.steam.description) = "HTTP headers alternating by K/V"];
int CTwoFactor_FinalizeAddAuthenticator_Request::http_headers_size() const {
  return http_headers_.size();
}
void CTwoFactor_FinalizeAddAuthenticator_Request::clear_http_headers() {
  http_headers_.Clear();
}
const ::std::string& CTwoFactor_FinalizeAddAuthenticator_Request::http_headers(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
  return http_headers_.Get(index);
}
::std::string* CTwoFactor_FinalizeAddAuthenticator_Request::mutable_http_headers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
  return http_headers_.Mutable(index);
}
void CTwoFactor_FinalizeAddAuthenticator_Request::set_http_headers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
  http_headers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CTwoFactor_FinalizeAddAuthenticator_Request::set_http_headers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
  http_headers_.Mutable(index)->assign(std::move(value));
}
#endif
void CTwoFactor_FinalizeAddAuthenticator_Request::set_http_headers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  http_headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
}
void CTwoFactor_FinalizeAddAuthenticator_Request::set_http_headers(int index, const char* value, size_t size) {
  http_headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
}
::std::string* CTwoFactor_FinalizeAddAuthenticator_Request::add_http_headers() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
  return http_headers_.Add();
}
void CTwoFactor_FinalizeAddAuthenticator_Request::add_http_headers(const ::std::string& value) {
  http_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
}
#if LANG_CXX11
void CTwoFactor_FinalizeAddAuthenticator_Request::add_http_headers(::std::string&& value) {
  http_headers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
}
#endif
void CTwoFactor_FinalizeAddAuthenticator_Request::add_http_headers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  http_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
}
void CTwoFactor_FinalizeAddAuthenticator_Request::add_http_headers(const char* value, size_t size) {
  http_headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CTwoFactor_FinalizeAddAuthenticator_Request::http_headers() const {
  // @@protoc_insertion_point(field_list:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
  return http_headers_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CTwoFactor_FinalizeAddAuthenticator_Request::mutable_http_headers() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
  return &http_headers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_FinalizeAddAuthenticator_Response::kSuccessFieldNumber;
const int CTwoFactor_FinalizeAddAuthenticator_Response::kWantMoreFieldNumber;
const int CTwoFactor_FinalizeAddAuthenticator_Response::kServerTimeFieldNumber;
const int CTwoFactor_FinalizeAddAuthenticator_Response::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_FinalizeAddAuthenticator_Response::CTwoFactor_FinalizeAddAuthenticator_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
}
CTwoFactor_FinalizeAddAuthenticator_Response::CTwoFactor_FinalizeAddAuthenticator_Response(const CTwoFactor_FinalizeAddAuthenticator_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&success_, &from.success_,
    reinterpret_cast<char*>(&server_time_) -
    reinterpret_cast<char*>(&success_) + sizeof(server_time_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
}

void CTwoFactor_FinalizeAddAuthenticator_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&success_, 0, reinterpret_cast<char*>(&server_time_) -
    reinterpret_cast<char*>(&success_) + sizeof(server_time_));
}

CTwoFactor_FinalizeAddAuthenticator_Response::~CTwoFactor_FinalizeAddAuthenticator_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  SharedDtor();
}

void CTwoFactor_FinalizeAddAuthenticator_Response::SharedDtor() {
}

void CTwoFactor_FinalizeAddAuthenticator_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTwoFactor_FinalizeAddAuthenticator_Response::descriptor() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CTwoFactor_FinalizeAddAuthenticator_Response& CTwoFactor_FinalizeAddAuthenticator_Response::default_instance() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CTwoFactor_FinalizeAddAuthenticator_Response* CTwoFactor_FinalizeAddAuthenticator_Response::New(::google::protobuf::Arena* arena) const {
  CTwoFactor_FinalizeAddAuthenticator_Response* n = new CTwoFactor_FinalizeAddAuthenticator_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CTwoFactor_FinalizeAddAuthenticator_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&success_, 0, reinterpret_cast<char*>(&server_time_) -
      reinterpret_cast<char*>(&success_) + sizeof(server_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CTwoFactor_FinalizeAddAuthenticator_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1 [(.proto.steam.description) = "True if succeeded, or want more tries"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool want_more = 2 [(.proto.steam.description) = "True if want more tries"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_want_more();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &want_more_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 server_time = 3 [(.proto.steam.description) = "Current server time"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_server_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 4 [(.proto.steam.description) = "Result code"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  return false;
#undef DO_
}

void CTwoFactor_FinalizeAddAuthenticator_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1 [(.proto.steam.description) = "True if succeeded, or want more tries"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional bool want_more = 2 [(.proto.steam.description) = "True if want more tries"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->want_more(), output);
  }

  // optional uint64 server_time = 3 [(.proto.steam.description) = "Current server time"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->server_time(), output);
  }

  // optional int32 status = 4 [(.proto.steam.description) = "Result code"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
}

::google::protobuf::uint8* CTwoFactor_FinalizeAddAuthenticator_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1 [(.proto.steam.description) = "True if succeeded, or want more tries"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional bool want_more = 2 [(.proto.steam.description) = "True if want more tries"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->want_more(), target);
  }

  // optional uint64 server_time = 3 [(.proto.steam.description) = "Current server time"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->server_time(), target);
  }

  // optional int32 status = 4 [(.proto.steam.description) = "Result code"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  return target;
}

size_t CTwoFactor_FinalizeAddAuthenticator_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bool success = 1 [(.proto.steam.description) = "True if succeeded, or want more tries"];
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional bool want_more = 2 [(.proto.steam.description) = "True if want more tries"];
    if (has_want_more()) {
      total_size += 1 + 1;
    }

    // optional int32 status = 4 [(.proto.steam.description) = "Result code"];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional uint64 server_time = 3 [(.proto.steam.description) = "Current server time"];
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTwoFactor_FinalizeAddAuthenticator_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_FinalizeAddAuthenticator_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CTwoFactor_FinalizeAddAuthenticator_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
    MergeFrom(*source);
  }
}

void CTwoFactor_FinalizeAddAuthenticator_Response::MergeFrom(const CTwoFactor_FinalizeAddAuthenticator_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000002u) {
      want_more_ = from.want_more_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_time_ = from.server_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTwoFactor_FinalizeAddAuthenticator_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_FinalizeAddAuthenticator_Response::CopyFrom(const CTwoFactor_FinalizeAddAuthenticator_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_FinalizeAddAuthenticator_Response::IsInitialized() const {
  return true;
}

void CTwoFactor_FinalizeAddAuthenticator_Response::Swap(CTwoFactor_FinalizeAddAuthenticator_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_FinalizeAddAuthenticator_Response::InternalSwap(CTwoFactor_FinalizeAddAuthenticator_Response* other) {
  std::swap(success_, other->success_);
  std::swap(want_more_, other->want_more_);
  std::swap(status_, other->status_);
  std::swap(server_time_, other->server_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CTwoFactor_FinalizeAddAuthenticator_Response::GetMetadata() const {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CTwoFactor_FinalizeAddAuthenticator_Response

// optional bool success = 1 [(.proto.steam.description) = "True if succeeded, or want more tries"];
bool CTwoFactor_FinalizeAddAuthenticator_Response::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CTwoFactor_FinalizeAddAuthenticator_Response::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void CTwoFactor_FinalizeAddAuthenticator_Response::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void CTwoFactor_FinalizeAddAuthenticator_Response::clear_success() {
  success_ = false;
  clear_has_success();
}
bool CTwoFactor_FinalizeAddAuthenticator_Response::success() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response.success)
  return success_;
}
void CTwoFactor_FinalizeAddAuthenticator_Response::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response.success)
}

// optional bool want_more = 2 [(.proto.steam.description) = "True if want more tries"];
bool CTwoFactor_FinalizeAddAuthenticator_Response::has_want_more() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CTwoFactor_FinalizeAddAuthenticator_Response::set_has_want_more() {
  _has_bits_[0] |= 0x00000002u;
}
void CTwoFactor_FinalizeAddAuthenticator_Response::clear_has_want_more() {
  _has_bits_[0] &= ~0x00000002u;
}
void CTwoFactor_FinalizeAddAuthenticator_Response::clear_want_more() {
  want_more_ = false;
  clear_has_want_more();
}
bool CTwoFactor_FinalizeAddAuthenticator_Response::want_more() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response.want_more)
  return want_more_;
}
void CTwoFactor_FinalizeAddAuthenticator_Response::set_want_more(bool value) {
  set_has_want_more();
  want_more_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response.want_more)
}

// optional uint64 server_time = 3 [(.proto.steam.description) = "Current server time"];
bool CTwoFactor_FinalizeAddAuthenticator_Response::has_server_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CTwoFactor_FinalizeAddAuthenticator_Response::set_has_server_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CTwoFactor_FinalizeAddAuthenticator_Response::clear_has_server_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CTwoFactor_FinalizeAddAuthenticator_Response::clear_server_time() {
  server_time_ = GOOGLE_ULONGLONG(0);
  clear_has_server_time();
}
::google::protobuf::uint64 CTwoFactor_FinalizeAddAuthenticator_Response::server_time() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response.server_time)
  return server_time_;
}
void CTwoFactor_FinalizeAddAuthenticator_Response::set_server_time(::google::protobuf::uint64 value) {
  set_has_server_time();
  server_time_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response.server_time)
}

// optional int32 status = 4 [(.proto.steam.description) = "Result code"];
bool CTwoFactor_FinalizeAddAuthenticator_Response::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CTwoFactor_FinalizeAddAuthenticator_Response::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void CTwoFactor_FinalizeAddAuthenticator_Response::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void CTwoFactor_FinalizeAddAuthenticator_Response::clear_status() {
  status_ = 0;
  clear_has_status();
}
::google::protobuf::int32 CTwoFactor_FinalizeAddAuthenticator_Response::status() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response.status)
  return status_;
}
void CTwoFactor_FinalizeAddAuthenticator_Response::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_RemoveAuthenticator_Request::kRevocationCodeFieldNumber;
const int CTwoFactor_RemoveAuthenticator_Request::kRevocationReasonFieldNumber;
const int CTwoFactor_RemoveAuthenticator_Request::kSteamguardSchemeFieldNumber;
const int CTwoFactor_RemoveAuthenticator_Request::kRemoveAllSteamguardCookiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_RemoveAuthenticator_Request::CTwoFactor_RemoveAuthenticator_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
}
CTwoFactor_RemoveAuthenticator_Request::CTwoFactor_RemoveAuthenticator_Request(const CTwoFactor_RemoveAuthenticator_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  revocation_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_revocation_code()) {
    revocation_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.revocation_code_);
  }
  ::memcpy(&remove_all_steamguard_cookies_, &from.remove_all_steamguard_cookies_,
    reinterpret_cast<char*>(&steamguard_scheme_) -
    reinterpret_cast<char*>(&remove_all_steamguard_cookies_) + sizeof(steamguard_scheme_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
}

void CTwoFactor_RemoveAuthenticator_Request::SharedCtor() {
  _cached_size_ = 0;
  revocation_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&remove_all_steamguard_cookies_, 0, reinterpret_cast<char*>(&steamguard_scheme_) -
    reinterpret_cast<char*>(&remove_all_steamguard_cookies_) + sizeof(steamguard_scheme_));
}

CTwoFactor_RemoveAuthenticator_Request::~CTwoFactor_RemoveAuthenticator_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  SharedDtor();
}

void CTwoFactor_RemoveAuthenticator_Request::SharedDtor() {
  revocation_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTwoFactor_RemoveAuthenticator_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTwoFactor_RemoveAuthenticator_Request::descriptor() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CTwoFactor_RemoveAuthenticator_Request& CTwoFactor_RemoveAuthenticator_Request::default_instance() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CTwoFactor_RemoveAuthenticator_Request* CTwoFactor_RemoveAuthenticator_Request::New(::google::protobuf::Arena* arena) const {
  CTwoFactor_RemoveAuthenticator_Request* n = new CTwoFactor_RemoveAuthenticator_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CTwoFactor_RemoveAuthenticator_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  if (has_revocation_code()) {
    GOOGLE_DCHECK(!revocation_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*revocation_code_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&remove_all_steamguard_cookies_, 0, reinterpret_cast<char*>(&steamguard_scheme_) -
      reinterpret_cast<char*>(&remove_all_steamguard_cookies_) + sizeof(steamguard_scheme_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CTwoFactor_RemoveAuthenticator_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string revocation_code = 2 [(.proto.steam.description) = "Password needed to remove token"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_revocation_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->revocation_code().data(), this->revocation_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_RemoveAuthenticator_Request.revocation_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 revocation_reason = 5 [(.proto.steam.description) = "Reason the authenticator is being removed"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_revocation_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revocation_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 steamguard_scheme = 6 [(.proto.steam.description) = "Type of Steam Guard to use once token is removed"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_steamguard_scheme();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steamguard_scheme_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool remove_all_steamguard_cookies = 7 [(.proto.steam.description) = "Remove all steamguard cookies"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_remove_all_steamguard_cookies();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_all_steamguard_cookies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  return false;
#undef DO_
}

void CTwoFactor_RemoveAuthenticator_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string revocation_code = 2 [(.proto.steam.description) = "Password needed to remove token"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->revocation_code().data(), this->revocation_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_RemoveAuthenticator_Request.revocation_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->revocation_code(), output);
  }

  // optional uint32 revocation_reason = 5 [(.proto.steam.description) = "Reason the authenticator is being removed"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->revocation_reason(), output);
  }

  // optional uint32 steamguard_scheme = 6 [(.proto.steam.description) = "Type of Steam Guard to use once token is removed"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->steamguard_scheme(), output);
  }

  // optional bool remove_all_steamguard_cookies = 7 [(.proto.steam.description) = "Remove all steamguard cookies"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->remove_all_steamguard_cookies(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
}

::google::protobuf::uint8* CTwoFactor_RemoveAuthenticator_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string revocation_code = 2 [(.proto.steam.description) = "Password needed to remove token"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->revocation_code().data(), this->revocation_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_RemoveAuthenticator_Request.revocation_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->revocation_code(), target);
  }

  // optional uint32 revocation_reason = 5 [(.proto.steam.description) = "Reason the authenticator is being removed"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->revocation_reason(), target);
  }

  // optional uint32 steamguard_scheme = 6 [(.proto.steam.description) = "Type of Steam Guard to use once token is removed"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->steamguard_scheme(), target);
  }

  // optional bool remove_all_steamguard_cookies = 7 [(.proto.steam.description) = "Remove all steamguard cookies"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->remove_all_steamguard_cookies(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  return target;
}

size_t CTwoFactor_RemoveAuthenticator_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string revocation_code = 2 [(.proto.steam.description) = "Password needed to remove token"];
    if (has_revocation_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->revocation_code());
    }

    // optional bool remove_all_steamguard_cookies = 7 [(.proto.steam.description) = "Remove all steamguard cookies"];
    if (has_remove_all_steamguard_cookies()) {
      total_size += 1 + 1;
    }

    // optional uint32 revocation_reason = 5 [(.proto.steam.description) = "Reason the authenticator is being removed"];
    if (has_revocation_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revocation_reason());
    }

    // optional uint32 steamguard_scheme = 6 [(.proto.steam.description) = "Type of Steam Guard to use once token is removed"];
    if (has_steamguard_scheme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steamguard_scheme());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTwoFactor_RemoveAuthenticator_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_RemoveAuthenticator_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CTwoFactor_RemoveAuthenticator_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
    MergeFrom(*source);
  }
}

void CTwoFactor_RemoveAuthenticator_Request::MergeFrom(const CTwoFactor_RemoveAuthenticator_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_revocation_code();
      revocation_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.revocation_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      remove_all_steamguard_cookies_ = from.remove_all_steamguard_cookies_;
    }
    if (cached_has_bits & 0x00000004u) {
      revocation_reason_ = from.revocation_reason_;
    }
    if (cached_has_bits & 0x00000008u) {
      steamguard_scheme_ = from.steamguard_scheme_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTwoFactor_RemoveAuthenticator_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_RemoveAuthenticator_Request::CopyFrom(const CTwoFactor_RemoveAuthenticator_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_RemoveAuthenticator_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_RemoveAuthenticator_Request::Swap(CTwoFactor_RemoveAuthenticator_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_RemoveAuthenticator_Request::InternalSwap(CTwoFactor_RemoveAuthenticator_Request* other) {
  revocation_code_.Swap(&other->revocation_code_);
  std::swap(remove_all_steamguard_cookies_, other->remove_all_steamguard_cookies_);
  std::swap(revocation_reason_, other->revocation_reason_);
  std::swap(steamguard_scheme_, other->steamguard_scheme_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CTwoFactor_RemoveAuthenticator_Request::GetMetadata() const {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CTwoFactor_RemoveAuthenticator_Request

// optional string revocation_code = 2 [(.proto.steam.description) = "Password needed to remove token"];
bool CTwoFactor_RemoveAuthenticator_Request::has_revocation_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CTwoFactor_RemoveAuthenticator_Request::set_has_revocation_code() {
  _has_bits_[0] |= 0x00000001u;
}
void CTwoFactor_RemoveAuthenticator_Request::clear_has_revocation_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void CTwoFactor_RemoveAuthenticator_Request::clear_revocation_code() {
  revocation_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_revocation_code();
}
const ::std::string& CTwoFactor_RemoveAuthenticator_Request::revocation_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_RemoveAuthenticator_Request.revocation_code)
  return revocation_code_.GetNoArena();
}
void CTwoFactor_RemoveAuthenticator_Request::set_revocation_code(const ::std::string& value) {
  set_has_revocation_code();
  revocation_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_RemoveAuthenticator_Request.revocation_code)
}
#if LANG_CXX11
void CTwoFactor_RemoveAuthenticator_Request::set_revocation_code(::std::string&& value) {
  set_has_revocation_code();
  revocation_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CTwoFactor_RemoveAuthenticator_Request.revocation_code)
}
#endif
void CTwoFactor_RemoveAuthenticator_Request::set_revocation_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_revocation_code();
  revocation_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CTwoFactor_RemoveAuthenticator_Request.revocation_code)
}
void CTwoFactor_RemoveAuthenticator_Request::set_revocation_code(const char* value, size_t size) {
  set_has_revocation_code();
  revocation_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CTwoFactor_RemoveAuthenticator_Request.revocation_code)
}
::std::string* CTwoFactor_RemoveAuthenticator_Request::mutable_revocation_code() {
  set_has_revocation_code();
  // @@protoc_insertion_point(field_mutable:proto.steam.CTwoFactor_RemoveAuthenticator_Request.revocation_code)
  return revocation_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTwoFactor_RemoveAuthenticator_Request::release_revocation_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CTwoFactor_RemoveAuthenticator_Request.revocation_code)
  clear_has_revocation_code();
  return revocation_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTwoFactor_RemoveAuthenticator_Request::set_allocated_revocation_code(::std::string* revocation_code) {
  if (revocation_code != NULL) {
    set_has_revocation_code();
  } else {
    clear_has_revocation_code();
  }
  revocation_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), revocation_code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CTwoFactor_RemoveAuthenticator_Request.revocation_code)
}

// optional uint32 revocation_reason = 5 [(.proto.steam.description) = "Reason the authenticator is being removed"];
bool CTwoFactor_RemoveAuthenticator_Request::has_revocation_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CTwoFactor_RemoveAuthenticator_Request::set_has_revocation_reason() {
  _has_bits_[0] |= 0x00000004u;
}
void CTwoFactor_RemoveAuthenticator_Request::clear_has_revocation_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
void CTwoFactor_RemoveAuthenticator_Request::clear_revocation_reason() {
  revocation_reason_ = 0u;
  clear_has_revocation_reason();
}
::google::protobuf::uint32 CTwoFactor_RemoveAuthenticator_Request::revocation_reason() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_RemoveAuthenticator_Request.revocation_reason)
  return revocation_reason_;
}
void CTwoFactor_RemoveAuthenticator_Request::set_revocation_reason(::google::protobuf::uint32 value) {
  set_has_revocation_reason();
  revocation_reason_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_RemoveAuthenticator_Request.revocation_reason)
}

// optional uint32 steamguard_scheme = 6 [(.proto.steam.description) = "Type of Steam Guard to use once token is removed"];
bool CTwoFactor_RemoveAuthenticator_Request::has_steamguard_scheme() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CTwoFactor_RemoveAuthenticator_Request::set_has_steamguard_scheme() {
  _has_bits_[0] |= 0x00000008u;
}
void CTwoFactor_RemoveAuthenticator_Request::clear_has_steamguard_scheme() {
  _has_bits_[0] &= ~0x00000008u;
}
void CTwoFactor_RemoveAuthenticator_Request::clear_steamguard_scheme() {
  steamguard_scheme_ = 0u;
  clear_has_steamguard_scheme();
}
::google::protobuf::uint32 CTwoFactor_RemoveAuthenticator_Request::steamguard_scheme() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_RemoveAuthenticator_Request.steamguard_scheme)
  return steamguard_scheme_;
}
void CTwoFactor_RemoveAuthenticator_Request::set_steamguard_scheme(::google::protobuf::uint32 value) {
  set_has_steamguard_scheme();
  steamguard_scheme_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_RemoveAuthenticator_Request.steamguard_scheme)
}

// optional bool remove_all_steamguard_cookies = 7 [(.proto.steam.description) = "Remove all steamguard cookies"];
bool CTwoFactor_RemoveAuthenticator_Request::has_remove_all_steamguard_cookies() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CTwoFactor_RemoveAuthenticator_Request::set_has_remove_all_steamguard_cookies() {
  _has_bits_[0] |= 0x00000002u;
}
void CTwoFactor_RemoveAuthenticator_Request::clear_has_remove_all_steamguard_cookies() {
  _has_bits_[0] &= ~0x00000002u;
}
void CTwoFactor_RemoveAuthenticator_Request::clear_remove_all_steamguard_cookies() {
  remove_all_steamguard_cookies_ = false;
  clear_has_remove_all_steamguard_cookies();
}
bool CTwoFactor_RemoveAuthenticator_Request::remove_all_steamguard_cookies() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_RemoveAuthenticator_Request.remove_all_steamguard_cookies)
  return remove_all_steamguard_cookies_;
}
void CTwoFactor_RemoveAuthenticator_Request::set_remove_all_steamguard_cookies(bool value) {
  set_has_remove_all_steamguard_cookies();
  remove_all_steamguard_cookies_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_RemoveAuthenticator_Request.remove_all_steamguard_cookies)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_RemoveAuthenticator_Response::kSuccessFieldNumber;
const int CTwoFactor_RemoveAuthenticator_Response::kServerTimeFieldNumber;
const int CTwoFactor_RemoveAuthenticator_Response::kRevocationAttemptsRemainingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_RemoveAuthenticator_Response::CTwoFactor_RemoveAuthenticator_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
}
CTwoFactor_RemoveAuthenticator_Response::CTwoFactor_RemoveAuthenticator_Response(const CTwoFactor_RemoveAuthenticator_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_time_, &from.server_time_,
    reinterpret_cast<char*>(&revocation_attempts_remaining_) -
    reinterpret_cast<char*>(&server_time_) + sizeof(revocation_attempts_remaining_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
}

void CTwoFactor_RemoveAuthenticator_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&server_time_, 0, reinterpret_cast<char*>(&revocation_attempts_remaining_) -
    reinterpret_cast<char*>(&server_time_) + sizeof(revocation_attempts_remaining_));
}

CTwoFactor_RemoveAuthenticator_Response::~CTwoFactor_RemoveAuthenticator_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  SharedDtor();
}

void CTwoFactor_RemoveAuthenticator_Response::SharedDtor() {
}

void CTwoFactor_RemoveAuthenticator_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTwoFactor_RemoveAuthenticator_Response::descriptor() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CTwoFactor_RemoveAuthenticator_Response& CTwoFactor_RemoveAuthenticator_Response::default_instance() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CTwoFactor_RemoveAuthenticator_Response* CTwoFactor_RemoveAuthenticator_Response::New(::google::protobuf::Arena* arena) const {
  CTwoFactor_RemoveAuthenticator_Response* n = new CTwoFactor_RemoveAuthenticator_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CTwoFactor_RemoveAuthenticator_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&server_time_, 0, reinterpret_cast<char*>(&revocation_attempts_remaining_) -
      reinterpret_cast<char*>(&server_time_) + sizeof(revocation_attempts_remaining_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CTwoFactor_RemoveAuthenticator_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1 [(.proto.steam.description) = "True if request succeeeded. The mobile app checks this."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 server_time = 3 [(.proto.steam.description) = "Current server time"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_server_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 revocation_attempts_remaining = 5 [(.proto.steam.description) = "Number of revocation code attempts remaining"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_revocation_attempts_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revocation_attempts_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  return false;
#undef DO_
}

void CTwoFactor_RemoveAuthenticator_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1 [(.proto.steam.description) = "True if request succeeeded. The mobile app checks this."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional uint64 server_time = 3 [(.proto.steam.description) = "Current server time"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->server_time(), output);
  }

  // optional uint32 revocation_attempts_remaining = 5 [(.proto.steam.description) = "Number of revocation code attempts remaining"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->revocation_attempts_remaining(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
}

::google::protobuf::uint8* CTwoFactor_RemoveAuthenticator_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1 [(.proto.steam.description) = "True if request succeeeded. The mobile app checks this."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional uint64 server_time = 3 [(.proto.steam.description) = "Current server time"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->server_time(), target);
  }

  // optional uint32 revocation_attempts_remaining = 5 [(.proto.steam.description) = "Number of revocation code attempts remaining"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->revocation_attempts_remaining(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  return target;
}

size_t CTwoFactor_RemoveAuthenticator_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 server_time = 3 [(.proto.steam.description) = "Current server time"];
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_time());
    }

    // optional bool success = 1 [(.proto.steam.description) = "True if request succeeeded. The mobile app checks this."];
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional uint32 revocation_attempts_remaining = 5 [(.proto.steam.description) = "Number of revocation code attempts remaining"];
    if (has_revocation_attempts_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revocation_attempts_remaining());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTwoFactor_RemoveAuthenticator_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_RemoveAuthenticator_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CTwoFactor_RemoveAuthenticator_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
    MergeFrom(*source);
  }
}

void CTwoFactor_RemoveAuthenticator_Response::MergeFrom(const CTwoFactor_RemoveAuthenticator_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      server_time_ = from.server_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000004u) {
      revocation_attempts_remaining_ = from.revocation_attempts_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTwoFactor_RemoveAuthenticator_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_RemoveAuthenticator_Response::CopyFrom(const CTwoFactor_RemoveAuthenticator_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_RemoveAuthenticator_Response::IsInitialized() const {
  return true;
}

void CTwoFactor_RemoveAuthenticator_Response::Swap(CTwoFactor_RemoveAuthenticator_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_RemoveAuthenticator_Response::InternalSwap(CTwoFactor_RemoveAuthenticator_Response* other) {
  std::swap(server_time_, other->server_time_);
  std::swap(success_, other->success_);
  std::swap(revocation_attempts_remaining_, other->revocation_attempts_remaining_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CTwoFactor_RemoveAuthenticator_Response::GetMetadata() const {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CTwoFactor_RemoveAuthenticator_Response

// optional bool success = 1 [(.proto.steam.description) = "True if request succeeeded. The mobile app checks this."];
bool CTwoFactor_RemoveAuthenticator_Response::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CTwoFactor_RemoveAuthenticator_Response::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
void CTwoFactor_RemoveAuthenticator_Response::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
void CTwoFactor_RemoveAuthenticator_Response::clear_success() {
  success_ = false;
  clear_has_success();
}
bool CTwoFactor_RemoveAuthenticator_Response::success() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_RemoveAuthenticator_Response.success)
  return success_;
}
void CTwoFactor_RemoveAuthenticator_Response::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_RemoveAuthenticator_Response.success)
}

// optional uint64 server_time = 3 [(.proto.steam.description) = "Current server time"];
bool CTwoFactor_RemoveAuthenticator_Response::has_server_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CTwoFactor_RemoveAuthenticator_Response::set_has_server_time() {
  _has_bits_[0] |= 0x00000001u;
}
void CTwoFactor_RemoveAuthenticator_Response::clear_has_server_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void CTwoFactor_RemoveAuthenticator_Response::clear_server_time() {
  server_time_ = GOOGLE_ULONGLONG(0);
  clear_has_server_time();
}
::google::protobuf::uint64 CTwoFactor_RemoveAuthenticator_Response::server_time() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_RemoveAuthenticator_Response.server_time)
  return server_time_;
}
void CTwoFactor_RemoveAuthenticator_Response::set_server_time(::google::protobuf::uint64 value) {
  set_has_server_time();
  server_time_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_RemoveAuthenticator_Response.server_time)
}

// optional uint32 revocation_attempts_remaining = 5 [(.proto.steam.description) = "Number of revocation code attempts remaining"];
bool CTwoFactor_RemoveAuthenticator_Response::has_revocation_attempts_remaining() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CTwoFactor_RemoveAuthenticator_Response::set_has_revocation_attempts_remaining() {
  _has_bits_[0] |= 0x00000004u;
}
void CTwoFactor_RemoveAuthenticator_Response::clear_has_revocation_attempts_remaining() {
  _has_bits_[0] &= ~0x00000004u;
}
void CTwoFactor_RemoveAuthenticator_Response::clear_revocation_attempts_remaining() {
  revocation_attempts_remaining_ = 0u;
  clear_has_revocation_attempts_remaining();
}
::google::protobuf::uint32 CTwoFactor_RemoveAuthenticator_Response::revocation_attempts_remaining() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_RemoveAuthenticator_Response.revocation_attempts_remaining)
  return revocation_attempts_remaining_;
}
void CTwoFactor_RemoveAuthenticator_Response::set_revocation_attempts_remaining(::google::protobuf::uint32 value) {
  set_has_revocation_attempts_remaining();
  revocation_attempts_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_RemoveAuthenticator_Response.revocation_attempts_remaining)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_CreateEmergencyCodes_Request::CTwoFactor_CreateEmergencyCodes_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
}
CTwoFactor_CreateEmergencyCodes_Request::CTwoFactor_CreateEmergencyCodes_Request(const CTwoFactor_CreateEmergencyCodes_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
}

void CTwoFactor_CreateEmergencyCodes_Request::SharedCtor() {
  _cached_size_ = 0;
}

CTwoFactor_CreateEmergencyCodes_Request::~CTwoFactor_CreateEmergencyCodes_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  SharedDtor();
}

void CTwoFactor_CreateEmergencyCodes_Request::SharedDtor() {
}

void CTwoFactor_CreateEmergencyCodes_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTwoFactor_CreateEmergencyCodes_Request::descriptor() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CTwoFactor_CreateEmergencyCodes_Request& CTwoFactor_CreateEmergencyCodes_Request::default_instance() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CTwoFactor_CreateEmergencyCodes_Request* CTwoFactor_CreateEmergencyCodes_Request::New(::google::protobuf::Arena* arena) const {
  CTwoFactor_CreateEmergencyCodes_Request* n = new CTwoFactor_CreateEmergencyCodes_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CTwoFactor_CreateEmergencyCodes_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CTwoFactor_CreateEmergencyCodes_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  return false;
#undef DO_
}

void CTwoFactor_CreateEmergencyCodes_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
}

::google::protobuf::uint8* CTwoFactor_CreateEmergencyCodes_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  return target;
}

size_t CTwoFactor_CreateEmergencyCodes_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTwoFactor_CreateEmergencyCodes_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_CreateEmergencyCodes_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CTwoFactor_CreateEmergencyCodes_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
    MergeFrom(*source);
  }
}

void CTwoFactor_CreateEmergencyCodes_Request::MergeFrom(const CTwoFactor_CreateEmergencyCodes_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CTwoFactor_CreateEmergencyCodes_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_CreateEmergencyCodes_Request::CopyFrom(const CTwoFactor_CreateEmergencyCodes_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_CreateEmergencyCodes_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_CreateEmergencyCodes_Request::Swap(CTwoFactor_CreateEmergencyCodes_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_CreateEmergencyCodes_Request::InternalSwap(CTwoFactor_CreateEmergencyCodes_Request* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CTwoFactor_CreateEmergencyCodes_Request::GetMetadata() const {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CTwoFactor_CreateEmergencyCodes_Request

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_CreateEmergencyCodes_Response::kCodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_CreateEmergencyCodes_Response::CTwoFactor_CreateEmergencyCodes_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
}
CTwoFactor_CreateEmergencyCodes_Response::CTwoFactor_CreateEmergencyCodes_Response(const CTwoFactor_CreateEmergencyCodes_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      codes_(from.codes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
}

void CTwoFactor_CreateEmergencyCodes_Response::SharedCtor() {
  _cached_size_ = 0;
}

CTwoFactor_CreateEmergencyCodes_Response::~CTwoFactor_CreateEmergencyCodes_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  SharedDtor();
}

void CTwoFactor_CreateEmergencyCodes_Response::SharedDtor() {
}

void CTwoFactor_CreateEmergencyCodes_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTwoFactor_CreateEmergencyCodes_Response::descriptor() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CTwoFactor_CreateEmergencyCodes_Response& CTwoFactor_CreateEmergencyCodes_Response::default_instance() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CTwoFactor_CreateEmergencyCodes_Response* CTwoFactor_CreateEmergencyCodes_Response::New(::google::protobuf::Arena* arena) const {
  CTwoFactor_CreateEmergencyCodes_Response* n = new CTwoFactor_CreateEmergencyCodes_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CTwoFactor_CreateEmergencyCodes_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  codes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CTwoFactor_CreateEmergencyCodes_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string codes = 1 [(.proto.steam.description) = "Emergency codes"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_codes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->codes(this->codes_size() - 1).data(),
            this->codes(this->codes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_CreateEmergencyCodes_Response.codes");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  return false;
#undef DO_
}

void CTwoFactor_CreateEmergencyCodes_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string codes = 1 [(.proto.steam.description) = "Emergency codes"];
  for (int i = 0, n = this->codes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codes(i).data(), this->codes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_CreateEmergencyCodes_Response.codes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->codes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
}

::google::protobuf::uint8* CTwoFactor_CreateEmergencyCodes_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string codes = 1 [(.proto.steam.description) = "Emergency codes"];
  for (int i = 0, n = this->codes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codes(i).data(), this->codes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_CreateEmergencyCodes_Response.codes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->codes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  return target;
}

size_t CTwoFactor_CreateEmergencyCodes_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string codes = 1 [(.proto.steam.description) = "Emergency codes"];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->codes_size());
  for (int i = 0, n = this->codes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->codes(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTwoFactor_CreateEmergencyCodes_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_CreateEmergencyCodes_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CTwoFactor_CreateEmergencyCodes_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
    MergeFrom(*source);
  }
}

void CTwoFactor_CreateEmergencyCodes_Response::MergeFrom(const CTwoFactor_CreateEmergencyCodes_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  codes_.MergeFrom(from.codes_);
}

void CTwoFactor_CreateEmergencyCodes_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_CreateEmergencyCodes_Response::CopyFrom(const CTwoFactor_CreateEmergencyCodes_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_CreateEmergencyCodes_Response::IsInitialized() const {
  return true;
}

void CTwoFactor_CreateEmergencyCodes_Response::Swap(CTwoFactor_CreateEmergencyCodes_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_CreateEmergencyCodes_Response::InternalSwap(CTwoFactor_CreateEmergencyCodes_Response* other) {
  codes_.InternalSwap(&other->codes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CTwoFactor_CreateEmergencyCodes_Response::GetMetadata() const {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CTwoFactor_CreateEmergencyCodes_Response

// repeated string codes = 1 [(.proto.steam.description) = "Emergency codes"];
int CTwoFactor_CreateEmergencyCodes_Response::codes_size() const {
  return codes_.size();
}
void CTwoFactor_CreateEmergencyCodes_Response::clear_codes() {
  codes_.Clear();
}
const ::std::string& CTwoFactor_CreateEmergencyCodes_Response::codes(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_CreateEmergencyCodes_Response.codes)
  return codes_.Get(index);
}
::std::string* CTwoFactor_CreateEmergencyCodes_Response::mutable_codes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CTwoFactor_CreateEmergencyCodes_Response.codes)
  return codes_.Mutable(index);
}
void CTwoFactor_CreateEmergencyCodes_Response::set_codes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_CreateEmergencyCodes_Response.codes)
  codes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CTwoFactor_CreateEmergencyCodes_Response::set_codes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_CreateEmergencyCodes_Response.codes)
  codes_.Mutable(index)->assign(std::move(value));
}
#endif
void CTwoFactor_CreateEmergencyCodes_Response::set_codes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CTwoFactor_CreateEmergencyCodes_Response.codes)
}
void CTwoFactor_CreateEmergencyCodes_Response::set_codes(int index, const char* value, size_t size) {
  codes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CTwoFactor_CreateEmergencyCodes_Response.codes)
}
::std::string* CTwoFactor_CreateEmergencyCodes_Response::add_codes() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CTwoFactor_CreateEmergencyCodes_Response.codes)
  return codes_.Add();
}
void CTwoFactor_CreateEmergencyCodes_Response::add_codes(const ::std::string& value) {
  codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CTwoFactor_CreateEmergencyCodes_Response.codes)
}
#if LANG_CXX11
void CTwoFactor_CreateEmergencyCodes_Response::add_codes(::std::string&& value) {
  codes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CTwoFactor_CreateEmergencyCodes_Response.codes)
}
#endif
void CTwoFactor_CreateEmergencyCodes_Response::add_codes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CTwoFactor_CreateEmergencyCodes_Response.codes)
}
void CTwoFactor_CreateEmergencyCodes_Response::add_codes(const char* value, size_t size) {
  codes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CTwoFactor_CreateEmergencyCodes_Response.codes)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CTwoFactor_CreateEmergencyCodes_Response::codes() const {
  // @@protoc_insertion_point(field_list:proto.steam.CTwoFactor_CreateEmergencyCodes_Response.codes)
  return codes_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CTwoFactor_CreateEmergencyCodes_Response::mutable_codes() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CTwoFactor_CreateEmergencyCodes_Response.codes)
  return &codes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_DestroyEmergencyCodes_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_DestroyEmergencyCodes_Request::CTwoFactor_DestroyEmergencyCodes_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
}
CTwoFactor_DestroyEmergencyCodes_Request::CTwoFactor_DestroyEmergencyCodes_Request(const CTwoFactor_DestroyEmergencyCodes_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
}

void CTwoFactor_DestroyEmergencyCodes_Request::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
}

CTwoFactor_DestroyEmergencyCodes_Request::~CTwoFactor_DestroyEmergencyCodes_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  SharedDtor();
}

void CTwoFactor_DestroyEmergencyCodes_Request::SharedDtor() {
}

void CTwoFactor_DestroyEmergencyCodes_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTwoFactor_DestroyEmergencyCodes_Request::descriptor() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CTwoFactor_DestroyEmergencyCodes_Request& CTwoFactor_DestroyEmergencyCodes_Request::default_instance() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CTwoFactor_DestroyEmergencyCodes_Request* CTwoFactor_DestroyEmergencyCodes_Request::New(::google::protobuf::Arena* arena) const {
  CTwoFactor_DestroyEmergencyCodes_Request* n = new CTwoFactor_DestroyEmergencyCodes_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CTwoFactor_DestroyEmergencyCodes_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CTwoFactor_DestroyEmergencyCodes_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  return false;
#undef DO_
}

void CTwoFactor_DestroyEmergencyCodes_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
}

::google::protobuf::uint8* CTwoFactor_DestroyEmergencyCodes_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  return target;
}

size_t CTwoFactor_DestroyEmergencyCodes_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
  if (has_steamid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTwoFactor_DestroyEmergencyCodes_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_DestroyEmergencyCodes_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CTwoFactor_DestroyEmergencyCodes_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
    MergeFrom(*source);
  }
}

void CTwoFactor_DestroyEmergencyCodes_Request::MergeFrom(const CTwoFactor_DestroyEmergencyCodes_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CTwoFactor_DestroyEmergencyCodes_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_DestroyEmergencyCodes_Request::CopyFrom(const CTwoFactor_DestroyEmergencyCodes_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_DestroyEmergencyCodes_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_DestroyEmergencyCodes_Request::Swap(CTwoFactor_DestroyEmergencyCodes_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_DestroyEmergencyCodes_Request::InternalSwap(CTwoFactor_DestroyEmergencyCodes_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CTwoFactor_DestroyEmergencyCodes_Request::GetMetadata() const {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CTwoFactor_DestroyEmergencyCodes_Request

// optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
bool CTwoFactor_DestroyEmergencyCodes_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CTwoFactor_DestroyEmergencyCodes_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CTwoFactor_DestroyEmergencyCodes_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CTwoFactor_DestroyEmergencyCodes_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CTwoFactor_DestroyEmergencyCodes_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request.steamid)
  return steamid_;
}
void CTwoFactor_DestroyEmergencyCodes_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request.steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_DestroyEmergencyCodes_Response::CTwoFactor_DestroyEmergencyCodes_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
}
CTwoFactor_DestroyEmergencyCodes_Response::CTwoFactor_DestroyEmergencyCodes_Response(const CTwoFactor_DestroyEmergencyCodes_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
}

void CTwoFactor_DestroyEmergencyCodes_Response::SharedCtor() {
  _cached_size_ = 0;
}

CTwoFactor_DestroyEmergencyCodes_Response::~CTwoFactor_DestroyEmergencyCodes_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  SharedDtor();
}

void CTwoFactor_DestroyEmergencyCodes_Response::SharedDtor() {
}

void CTwoFactor_DestroyEmergencyCodes_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTwoFactor_DestroyEmergencyCodes_Response::descriptor() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CTwoFactor_DestroyEmergencyCodes_Response& CTwoFactor_DestroyEmergencyCodes_Response::default_instance() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CTwoFactor_DestroyEmergencyCodes_Response* CTwoFactor_DestroyEmergencyCodes_Response::New(::google::protobuf::Arena* arena) const {
  CTwoFactor_DestroyEmergencyCodes_Response* n = new CTwoFactor_DestroyEmergencyCodes_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CTwoFactor_DestroyEmergencyCodes_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CTwoFactor_DestroyEmergencyCodes_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  return false;
#undef DO_
}

void CTwoFactor_DestroyEmergencyCodes_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
}

::google::protobuf::uint8* CTwoFactor_DestroyEmergencyCodes_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  return target;
}

size_t CTwoFactor_DestroyEmergencyCodes_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTwoFactor_DestroyEmergencyCodes_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_DestroyEmergencyCodes_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CTwoFactor_DestroyEmergencyCodes_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
    MergeFrom(*source);
  }
}

void CTwoFactor_DestroyEmergencyCodes_Response::MergeFrom(const CTwoFactor_DestroyEmergencyCodes_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CTwoFactor_DestroyEmergencyCodes_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_DestroyEmergencyCodes_Response::CopyFrom(const CTwoFactor_DestroyEmergencyCodes_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_DestroyEmergencyCodes_Response::IsInitialized() const {
  return true;
}

void CTwoFactor_DestroyEmergencyCodes_Response::Swap(CTwoFactor_DestroyEmergencyCodes_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_DestroyEmergencyCodes_Response::InternalSwap(CTwoFactor_DestroyEmergencyCodes_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CTwoFactor_DestroyEmergencyCodes_Response::GetMetadata() const {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CTwoFactor_DestroyEmergencyCodes_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_ValidateToken_Request::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_ValidateToken_Request::CTwoFactor_ValidateToken_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_ValidateToken_Request)
}
CTwoFactor_ValidateToken_Request::CTwoFactor_ValidateToken_Request(const CTwoFactor_ValidateToken_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_ValidateToken_Request)
}

void CTwoFactor_ValidateToken_Request::SharedCtor() {
  _cached_size_ = 0;
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CTwoFactor_ValidateToken_Request::~CTwoFactor_ValidateToken_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_ValidateToken_Request)
  SharedDtor();
}

void CTwoFactor_ValidateToken_Request::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTwoFactor_ValidateToken_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTwoFactor_ValidateToken_Request::descriptor() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CTwoFactor_ValidateToken_Request& CTwoFactor_ValidateToken_Request::default_instance() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CTwoFactor_ValidateToken_Request* CTwoFactor_ValidateToken_Request::New(::google::protobuf::Arena* arena) const {
  CTwoFactor_ValidateToken_Request* n = new CTwoFactor_ValidateToken_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CTwoFactor_ValidateToken_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_ValidateToken_Request)
  if (has_code()) {
    GOOGLE_DCHECK(!code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*code_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CTwoFactor_ValidateToken_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_ValidateToken_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1 [(.proto.steam.description) = "code to validate"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_ValidateToken_Request.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_ValidateToken_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_ValidateToken_Request)
  return false;
#undef DO_
}

void CTwoFactor_ValidateToken_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_ValidateToken_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string code = 1 [(.proto.steam.description) = "code to validate"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_ValidateToken_Request.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_ValidateToken_Request)
}

::google::protobuf::uint8* CTwoFactor_ValidateToken_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_ValidateToken_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string code = 1 [(.proto.steam.description) = "code to validate"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_ValidateToken_Request.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_ValidateToken_Request)
  return target;
}

size_t CTwoFactor_ValidateToken_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_ValidateToken_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string code = 1 [(.proto.steam.description) = "code to validate"];
  if (has_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTwoFactor_ValidateToken_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_ValidateToken_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_ValidateToken_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CTwoFactor_ValidateToken_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_ValidateToken_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_ValidateToken_Request)
    MergeFrom(*source);
  }
}

void CTwoFactor_ValidateToken_Request::MergeFrom(const CTwoFactor_ValidateToken_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_ValidateToken_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_code()) {
    set_has_code();
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
}

void CTwoFactor_ValidateToken_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_ValidateToken_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_ValidateToken_Request::CopyFrom(const CTwoFactor_ValidateToken_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_ValidateToken_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_ValidateToken_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_ValidateToken_Request::Swap(CTwoFactor_ValidateToken_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_ValidateToken_Request::InternalSwap(CTwoFactor_ValidateToken_Request* other) {
  code_.Swap(&other->code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CTwoFactor_ValidateToken_Request::GetMetadata() const {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CTwoFactor_ValidateToken_Request

// optional string code = 1 [(.proto.steam.description) = "code to validate"];
bool CTwoFactor_ValidateToken_Request::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CTwoFactor_ValidateToken_Request::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
void CTwoFactor_ValidateToken_Request::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void CTwoFactor_ValidateToken_Request::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
const ::std::string& CTwoFactor_ValidateToken_Request::code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_ValidateToken_Request.code)
  return code_.GetNoArena();
}
void CTwoFactor_ValidateToken_Request::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_ValidateToken_Request.code)
}
#if LANG_CXX11
void CTwoFactor_ValidateToken_Request::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CTwoFactor_ValidateToken_Request.code)
}
#endif
void CTwoFactor_ValidateToken_Request::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CTwoFactor_ValidateToken_Request.code)
}
void CTwoFactor_ValidateToken_Request::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CTwoFactor_ValidateToken_Request.code)
}
::std::string* CTwoFactor_ValidateToken_Request::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:proto.steam.CTwoFactor_ValidateToken_Request.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTwoFactor_ValidateToken_Request::release_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CTwoFactor_ValidateToken_Request.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTwoFactor_ValidateToken_Request::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CTwoFactor_ValidateToken_Request.code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_ValidateToken_Response::kValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_ValidateToken_Response::CTwoFactor_ValidateToken_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_ValidateToken_Response)
}
CTwoFactor_ValidateToken_Response::CTwoFactor_ValidateToken_Response(const CTwoFactor_ValidateToken_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  valid_ = from.valid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_ValidateToken_Response)
}

void CTwoFactor_ValidateToken_Response::SharedCtor() {
  _cached_size_ = 0;
  valid_ = false;
}

CTwoFactor_ValidateToken_Response::~CTwoFactor_ValidateToken_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_ValidateToken_Response)
  SharedDtor();
}

void CTwoFactor_ValidateToken_Response::SharedDtor() {
}

void CTwoFactor_ValidateToken_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTwoFactor_ValidateToken_Response::descriptor() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CTwoFactor_ValidateToken_Response& CTwoFactor_ValidateToken_Response::default_instance() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CTwoFactor_ValidateToken_Response* CTwoFactor_ValidateToken_Response::New(::google::protobuf::Arena* arena) const {
  CTwoFactor_ValidateToken_Response* n = new CTwoFactor_ValidateToken_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CTwoFactor_ValidateToken_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_ValidateToken_Response)
  valid_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CTwoFactor_ValidateToken_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_ValidateToken_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool valid = 1 [(.proto.steam.description) = "result of validation"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_ValidateToken_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_ValidateToken_Response)
  return false;
#undef DO_
}

void CTwoFactor_ValidateToken_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_ValidateToken_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool valid = 1 [(.proto.steam.description) = "result of validation"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->valid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_ValidateToken_Response)
}

::google::protobuf::uint8* CTwoFactor_ValidateToken_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_ValidateToken_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool valid = 1 [(.proto.steam.description) = "result of validation"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->valid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_ValidateToken_Response)
  return target;
}

size_t CTwoFactor_ValidateToken_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_ValidateToken_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool valid = 1 [(.proto.steam.description) = "result of validation"];
  if (has_valid()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTwoFactor_ValidateToken_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_ValidateToken_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_ValidateToken_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CTwoFactor_ValidateToken_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_ValidateToken_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_ValidateToken_Response)
    MergeFrom(*source);
  }
}

void CTwoFactor_ValidateToken_Response::MergeFrom(const CTwoFactor_ValidateToken_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_ValidateToken_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_valid()) {
    set_valid(from.valid());
  }
}

void CTwoFactor_ValidateToken_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_ValidateToken_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_ValidateToken_Response::CopyFrom(const CTwoFactor_ValidateToken_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_ValidateToken_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_ValidateToken_Response::IsInitialized() const {
  return true;
}

void CTwoFactor_ValidateToken_Response::Swap(CTwoFactor_ValidateToken_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_ValidateToken_Response::InternalSwap(CTwoFactor_ValidateToken_Response* other) {
  std::swap(valid_, other->valid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CTwoFactor_ValidateToken_Response::GetMetadata() const {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CTwoFactor_ValidateToken_Response

// optional bool valid = 1 [(.proto.steam.description) = "result of validation"];
bool CTwoFactor_ValidateToken_Response::has_valid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CTwoFactor_ValidateToken_Response::set_has_valid() {
  _has_bits_[0] |= 0x00000001u;
}
void CTwoFactor_ValidateToken_Response::clear_has_valid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CTwoFactor_ValidateToken_Response::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
bool CTwoFactor_ValidateToken_Response::valid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CTwoFactor_ValidateToken_Response.valid)
  return valid_;
}
void CTwoFactor_ValidateToken_Response::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CTwoFactor_ValidateToken_Response.valid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

TwoFactor::~TwoFactor() {}

const ::google::protobuf::ServiceDescriptor* TwoFactor::descriptor() {
  protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* TwoFactor::GetDescriptor() {
  return descriptor();
}

void TwoFactor::QueryStatus(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CTwoFactor_Status_Request*,
                         ::proto::steam::CTwoFactor_Status_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryStatus() not implemented.");
  done->Run();
}

void TwoFactor::AddAuthenticator(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CTwoFactor_AddAuthenticator_Request*,
                         ::proto::steam::CTwoFactor_AddAuthenticator_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddAuthenticator() not implemented.");
  done->Run();
}

void TwoFactor::SendEmail(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CTwoFactor_SendEmail_Request*,
                         ::proto::steam::CTwoFactor_SendEmail_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendEmail() not implemented.");
  done->Run();
}

void TwoFactor::FinalizeAddAuthenticator(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Request*,
                         ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FinalizeAddAuthenticator() not implemented.");
  done->Run();
}

void TwoFactor::RemoveAuthenticator(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CTwoFactor_RemoveAuthenticator_Request*,
                         ::proto::steam::CTwoFactor_RemoveAuthenticator_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveAuthenticator() not implemented.");
  done->Run();
}

void TwoFactor::CreateEmergencyCodes(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CTwoFactor_CreateEmergencyCodes_Request*,
                         ::proto::steam::CTwoFactor_CreateEmergencyCodes_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateEmergencyCodes() not implemented.");
  done->Run();
}

void TwoFactor::DestroyEmergencyCodes(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Request*,
                         ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DestroyEmergencyCodes() not implemented.");
  done->Run();
}

void TwoFactor::ValidateToken(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CTwoFactor_ValidateToken_Request*,
                         ::proto::steam::CTwoFactor_ValidateToken_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ValidateToken() not implemented.");
  done->Run();
}

void TwoFactor::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5ftwofactor_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      QueryStatus(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CTwoFactor_Status_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CTwoFactor_Status_Response*>(response),
             done);
      break;
    case 1:
      AddAuthenticator(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CTwoFactor_AddAuthenticator_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CTwoFactor_AddAuthenticator_Response*>(response),
             done);
      break;
    case 2:
      SendEmail(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CTwoFactor_SendEmail_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CTwoFactor_SendEmail_Response*>(response),
             done);
      break;
    case 3:
      FinalizeAddAuthenticator(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Response*>(response),
             done);
      break;
    case 4:
      RemoveAuthenticator(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CTwoFactor_RemoveAuthenticator_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CTwoFactor_RemoveAuthenticator_Response*>(response),
             done);
      break;
    case 5:
      CreateEmergencyCodes(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CTwoFactor_CreateEmergencyCodes_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CTwoFactor_CreateEmergencyCodes_Response*>(response),
             done);
      break;
    case 6:
      DestroyEmergencyCodes(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Response*>(response),
             done);
      break;
    case 7:
      ValidateToken(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CTwoFactor_ValidateToken_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CTwoFactor_ValidateToken_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& TwoFactor::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CTwoFactor_Status_Request::default_instance();
    case 1:
      return ::proto::steam::CTwoFactor_AddAuthenticator_Request::default_instance();
    case 2:
      return ::proto::steam::CTwoFactor_SendEmail_Request::default_instance();
    case 3:
      return ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Request::default_instance();
    case 4:
      return ::proto::steam::CTwoFactor_RemoveAuthenticator_Request::default_instance();
    case 5:
      return ::proto::steam::CTwoFactor_CreateEmergencyCodes_Request::default_instance();
    case 6:
      return ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Request::default_instance();
    case 7:
      return ::proto::steam::CTwoFactor_ValidateToken_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& TwoFactor::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CTwoFactor_Status_Response::default_instance();
    case 1:
      return ::proto::steam::CTwoFactor_AddAuthenticator_Response::default_instance();
    case 2:
      return ::proto::steam::CTwoFactor_SendEmail_Response::default_instance();
    case 3:
      return ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Response::default_instance();
    case 4:
      return ::proto::steam::CTwoFactor_RemoveAuthenticator_Response::default_instance();
    case 5:
      return ::proto::steam::CTwoFactor_CreateEmergencyCodes_Response::default_instance();
    case 6:
      return ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Response::default_instance();
    case 7:
      return ::proto::steam::CTwoFactor_ValidateToken_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

TwoFactor_Stub::TwoFactor_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TwoFactor_Stub::TwoFactor_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
TwoFactor_Stub::~TwoFactor_Stub() {
  if (owns_channel_) delete channel_;
}

void TwoFactor_Stub::QueryStatus(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CTwoFactor_Status_Request* request,
                              ::proto::steam::CTwoFactor_Status_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void TwoFactor_Stub::AddAuthenticator(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CTwoFactor_AddAuthenticator_Request* request,
                              ::proto::steam::CTwoFactor_AddAuthenticator_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void TwoFactor_Stub::SendEmail(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CTwoFactor_SendEmail_Request* request,
                              ::proto::steam::CTwoFactor_SendEmail_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void TwoFactor_Stub::FinalizeAddAuthenticator(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Request* request,
                              ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void TwoFactor_Stub::RemoveAuthenticator(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CTwoFactor_RemoveAuthenticator_Request* request,
                              ::proto::steam::CTwoFactor_RemoveAuthenticator_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void TwoFactor_Stub::CreateEmergencyCodes(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CTwoFactor_CreateEmergencyCodes_Request* request,
                              ::proto::steam::CTwoFactor_CreateEmergencyCodes_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void TwoFactor_Stub::DestroyEmergencyCodes(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Request* request,
                              ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void TwoFactor_Stub::ValidateToken(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CTwoFactor_ValidateToken_Request* request,
                              ::proto::steam::CTwoFactor_ValidateToken_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
