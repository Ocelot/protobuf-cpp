// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_physicalgoods.steamclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_physicalgoods.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CPhysicalGoods_RegisterSteamController_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPhysicalGoods_RegisterSteamController_Request> {
} _CPhysicalGoods_RegisterSteamController_Request_default_instance_;
class CPhysicalGoods_RegisterSteamController_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPhysicalGoods_RegisterSteamController_Response> {
} _CPhysicalGoods_RegisterSteamController_Response_default_instance_;
class CPhysicalGoods_CompleteSteamControllerRegistration_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPhysicalGoods_CompleteSteamControllerRegistration_Request> {
} _CPhysicalGoods_CompleteSteamControllerRegistration_Request_default_instance_;
class CPhysicalGoods_CompleteSteamControllerRegistration_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPhysicalGoods_CompleteSteamControllerRegistration_Response> {
} _CPhysicalGoods_CompleteSteamControllerRegistration_Response_default_instance_;
class CPhysicalGoods_QueryAccountsRegisteredToSerial_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPhysicalGoods_QueryAccountsRegisteredToSerial_Request> {
} _CPhysicalGoods_QueryAccountsRegisteredToSerial_Request_default_instance_;
class CPhysicalGoods_QueryAccountsRegisteredToSerial_AccountsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts> {
} _CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts_default_instance_;
class CPhysicalGoods_QueryAccountsRegisteredToSerial_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPhysicalGoods_QueryAccountsRegisteredToSerial_Response> {
} _CPhysicalGoods_QueryAccountsRegisteredToSerial_Response_default_instance_;
class CPhysicalGoods_SteamControllerSetConfig_ControllerConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPhysicalGoods_SteamControllerSetConfig_ControllerConfig> {
} _CPhysicalGoods_SteamControllerSetConfig_ControllerConfig_default_instance_;
class CPhysicalGoods_SteamControllerSetConfig_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPhysicalGoods_SteamControllerSetConfig_Request> {
} _CPhysicalGoods_SteamControllerSetConfig_Request_default_instance_;
class CPhysicalGoods_SteamControllerSetConfig_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPhysicalGoods_SteamControllerSetConfig_Response> {
} _CPhysicalGoods_SteamControllerSetConfig_Response_default_instance_;
class CPhysicalGoods_SteamControllerGetConfig_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPhysicalGoods_SteamControllerGetConfig_Request> {
} _CPhysicalGoods_SteamControllerGetConfig_Request_default_instance_;
class CPhysicalGoods_SteamControllerGetConfig_ControllerConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPhysicalGoods_SteamControllerGetConfig_ControllerConfig> {
} _CPhysicalGoods_SteamControllerGetConfig_ControllerConfig_default_instance_;
class CPhysicalGoods_SteamControllerGetConfig_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPhysicalGoods_SteamControllerGetConfig_Response> {
} _CPhysicalGoods_SteamControllerGetConfig_Response_default_instance_;
class CPhysicalGoods_DeRegisterSteamController_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPhysicalGoods_DeRegisterSteamController_Request> {
} _CPhysicalGoods_DeRegisterSteamController_Request_default_instance_;
class CPhysicalGoods_DeRegisterSteamController_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPhysicalGoods_DeRegisterSteamController_Response> {
} _CPhysicalGoods_DeRegisterSteamController_Response_default_instance_;
class CPhysicalGoods_SetPersonalizationFile_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPhysicalGoods_SetPersonalizationFile_Request> {
} _CPhysicalGoods_SetPersonalizationFile_Request_default_instance_;
class CPhysicalGoods_SetPersonalizationFile_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPhysicalGoods_SetPersonalizationFile_Response> {
} _CPhysicalGoods_SetPersonalizationFile_Response_default_instance_;
class CPhysicalGoods_GetPersonalizationFile_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPhysicalGoods_GetPersonalizationFile_Request> {
} _CPhysicalGoods_GetPersonalizationFile_Request_default_instance_;
class CPhysicalGoods_GetPersonalizationFile_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPhysicalGoods_GetPersonalizationFile_Response> {
} _CPhysicalGoods_GetPersonalizationFile_Response_default_instance_;

namespace protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[19];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_RegisterSteamController_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_RegisterSteamController_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_RegisterSteamController_Request, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_RegisterSteamController_Request, controller_code_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_RegisterSteamController_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_RegisterSteamController_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_CompleteSteamControllerRegistration_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_CompleteSteamControllerRegistration_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_CompleteSteamControllerRegistration_Request, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_CompleteSteamControllerRegistration_Request, controller_code_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_CompleteSteamControllerRegistration_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_CompleteSteamControllerRegistration_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_QueryAccountsRegisteredToSerial_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_QueryAccountsRegisteredToSerial_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_QueryAccountsRegisteredToSerial_Request, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_QueryAccountsRegisteredToSerial_Request, controller_code_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts, registration_complete_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_QueryAccountsRegisteredToSerial_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_QueryAccountsRegisteredToSerial_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_QueryAccountsRegisteredToSerial_Response, accounts_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerSetConfig_ControllerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerSetConfig_ControllerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerSetConfig_ControllerConfig, appidorname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerSetConfig_ControllerConfig, publishedfileid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerSetConfig_ControllerConfig, templatename_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerSetConfig_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerSetConfig_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerSetConfig_Request, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerSetConfig_Request, controller_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerSetConfig_Request, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerSetConfig_Request, configurations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerSetConfig_Request, controller_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerSetConfig_Request, only_for_this_serial_),
  0,
  1,
  2,
  ~0u,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerSetConfig_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerSetConfig_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerGetConfig_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerGetConfig_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerGetConfig_Request, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerGetConfig_Request, controller_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerGetConfig_Request, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerGetConfig_Request, appidorname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerGetConfig_Request, controller_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerGetConfig_Request, only_for_this_serial_),
  0,
  1,
  3,
  2,
  5,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerGetConfig_ControllerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerGetConfig_ControllerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerGetConfig_ControllerConfig, appidorname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerGetConfig_ControllerConfig, publishedfileid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerGetConfig_ControllerConfig, templatename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerGetConfig_ControllerConfig, serial_number_),
  0,
  3,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerGetConfig_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerGetConfig_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SteamControllerGetConfig_Response, configurations_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_DeRegisterSteamController_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_DeRegisterSteamController_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_DeRegisterSteamController_Request, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_DeRegisterSteamController_Request, controller_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_DeRegisterSteamController_Request, accountid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_DeRegisterSteamController_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_DeRegisterSteamController_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SetPersonalizationFile_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SetPersonalizationFile_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SetPersonalizationFile_Request, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SetPersonalizationFile_Request, publishedfileid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SetPersonalizationFile_Request, accountid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SetPersonalizationFile_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_SetPersonalizationFile_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_GetPersonalizationFile_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_GetPersonalizationFile_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_GetPersonalizationFile_Request, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_GetPersonalizationFile_Request, accountid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_GetPersonalizationFile_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_GetPersonalizationFile_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPhysicalGoods_GetPersonalizationFile_Response, publishedfileid_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(CPhysicalGoods_RegisterSteamController_Request)},
  { 9, 14, sizeof(CPhysicalGoods_RegisterSteamController_Response)},
  { 14, 21, sizeof(CPhysicalGoods_CompleteSteamControllerRegistration_Request)},
  { 23, 28, sizeof(CPhysicalGoods_CompleteSteamControllerRegistration_Response)},
  { 28, 35, sizeof(CPhysicalGoods_QueryAccountsRegisteredToSerial_Request)},
  { 37, 44, sizeof(CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts)},
  { 46, 52, sizeof(CPhysicalGoods_QueryAccountsRegisteredToSerial_Response)},
  { 53, 61, sizeof(CPhysicalGoods_SteamControllerSetConfig_ControllerConfig)},
  { 64, 75, sizeof(CPhysicalGoods_SteamControllerSetConfig_Request)},
  { 81, 86, sizeof(CPhysicalGoods_SteamControllerSetConfig_Response)},
  { 86, 97, sizeof(CPhysicalGoods_SteamControllerGetConfig_Request)},
  { 103, 112, sizeof(CPhysicalGoods_SteamControllerGetConfig_ControllerConfig)},
  { 116, 122, sizeof(CPhysicalGoods_SteamControllerGetConfig_Response)},
  { 123, 131, sizeof(CPhysicalGoods_DeRegisterSteamController_Request)},
  { 134, 139, sizeof(CPhysicalGoods_DeRegisterSteamController_Response)},
  { 139, 147, sizeof(CPhysicalGoods_SetPersonalizationFile_Request)},
  { 150, 155, sizeof(CPhysicalGoods_SetPersonalizationFile_Response)},
  { 155, 162, sizeof(CPhysicalGoods_GetPersonalizationFile_Request)},
  { 164, 170, sizeof(CPhysicalGoods_GetPersonalizationFile_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPhysicalGoods_RegisterSteamController_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPhysicalGoods_RegisterSteamController_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPhysicalGoods_CompleteSteamControllerRegistration_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPhysicalGoods_CompleteSteamControllerRegistration_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPhysicalGoods_QueryAccountsRegisteredToSerial_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPhysicalGoods_QueryAccountsRegisteredToSerial_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPhysicalGoods_SteamControllerSetConfig_ControllerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPhysicalGoods_SteamControllerSetConfig_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPhysicalGoods_SteamControllerSetConfig_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPhysicalGoods_SteamControllerGetConfig_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPhysicalGoods_SteamControllerGetConfig_ControllerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPhysicalGoods_SteamControllerGetConfig_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPhysicalGoods_DeRegisterSteamController_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPhysicalGoods_DeRegisterSteamController_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPhysicalGoods_SetPersonalizationFile_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPhysicalGoods_SetPersonalizationFile_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPhysicalGoods_GetPersonalizationFile_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPhysicalGoods_GetPersonalizationFile_Response_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_physicalgoods.steamclient.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 19);
}

}  // namespace

void TableStruct::Shutdown() {
  _CPhysicalGoods_RegisterSteamController_Request_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CPhysicalGoods_RegisterSteamController_Response_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CPhysicalGoods_CompleteSteamControllerRegistration_Request_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CPhysicalGoods_CompleteSteamControllerRegistration_Response_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CPhysicalGoods_QueryAccountsRegisteredToSerial_Request_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CPhysicalGoods_QueryAccountsRegisteredToSerial_Response_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CPhysicalGoods_SteamControllerSetConfig_ControllerConfig_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CPhysicalGoods_SteamControllerSetConfig_Request_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CPhysicalGoods_SteamControllerSetConfig_Response_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CPhysicalGoods_SteamControllerGetConfig_Request_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CPhysicalGoods_SteamControllerGetConfig_ControllerConfig_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CPhysicalGoods_SteamControllerGetConfig_Response_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CPhysicalGoods_DeRegisterSteamController_Request_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CPhysicalGoods_DeRegisterSteamController_Response_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CPhysicalGoods_SetPersonalizationFile_Request_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CPhysicalGoods_SetPersonalizationFile_Response_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CPhysicalGoods_GetPersonalizationFile_Request_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CPhysicalGoods_GetPersonalizationFile_Response_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::InitDefaults();
  _CPhysicalGoods_RegisterSteamController_Request_default_instance_.DefaultConstruct();
  _CPhysicalGoods_RegisterSteamController_Response_default_instance_.DefaultConstruct();
  _CPhysicalGoods_CompleteSteamControllerRegistration_Request_default_instance_.DefaultConstruct();
  _CPhysicalGoods_CompleteSteamControllerRegistration_Response_default_instance_.DefaultConstruct();
  _CPhysicalGoods_QueryAccountsRegisteredToSerial_Request_default_instance_.DefaultConstruct();
  _CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts_default_instance_.DefaultConstruct();
  _CPhysicalGoods_QueryAccountsRegisteredToSerial_Response_default_instance_.DefaultConstruct();
  _CPhysicalGoods_SteamControllerSetConfig_ControllerConfig_default_instance_.DefaultConstruct();
  _CPhysicalGoods_SteamControllerSetConfig_Request_default_instance_.DefaultConstruct();
  _CPhysicalGoods_SteamControllerSetConfig_Response_default_instance_.DefaultConstruct();
  _CPhysicalGoods_SteamControllerGetConfig_Request_default_instance_.DefaultConstruct();
  _CPhysicalGoods_SteamControllerGetConfig_ControllerConfig_default_instance_.DefaultConstruct();
  _CPhysicalGoods_SteamControllerGetConfig_Response_default_instance_.DefaultConstruct();
  _CPhysicalGoods_DeRegisterSteamController_Request_default_instance_.DefaultConstruct();
  _CPhysicalGoods_DeRegisterSteamController_Response_default_instance_.DefaultConstruct();
  _CPhysicalGoods_SetPersonalizationFile_Request_default_instance_.DefaultConstruct();
  _CPhysicalGoods_SetPersonalizationFile_Response_default_instance_.DefaultConstruct();
  _CPhysicalGoods_GetPersonalizationFile_Request_default_instance_.DefaultConstruct();
  _CPhysicalGoods_GetPersonalizationFile_Response_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n-steammessages_physicalgoods.steamclien"
      "t.proto\022\013proto.steam\032,steammessages_unif"
      "ied_base.steamclient.proto\"`\n.CPhysicalG"
      "oods_RegisterSteamController_Request\022\025\n\r"
      "serial_number\030\001 \001(\t\022\027\n\017controller_code\030\002"
      " \001(\t\"1\n/CPhysicalGoods_RegisterSteamCont"
      "roller_Response\"l\n:CPhysicalGoods_Comple"
      "teSteamControllerRegistration_Request\022\025\n"
      "\rserial_number\030\001 \001(\t\022\027\n\017controller_code\030"
      "\002 \001(\t\"=\n;CPhysicalGoods_CompleteSteamCon"
      "trollerRegistration_Response\"h\n6CPhysica"
      "lGoods_QueryAccountsRegisteredToSerial_R"
      "equest\022\025\n\rserial_number\030\001 \001(\t\022\027\n\017control"
      "ler_code\030\002 \001(\t\"k\n7CPhysicalGoods_QueryAc"
      "countsRegisteredToSerial_Accounts\022\021\n\tacc"
      "ountid\030\001 \001(\r\022\035\n\025registration_complete\030\002 "
      "\001(\010\"\221\001\n7CPhysicalGoods_QueryAccountsRegi"
      "steredToSerial_Response\022V\n\010accounts\030\001 \003("
      "\0132D.proto.steam.CPhysicalGoods_QueryAcco"
      "untsRegisteredToSerial_Accounts\"~\n8CPhys"
      "icalGoods_SteamControllerSetConfig_Contr"
      "ollerConfig\022\023\n\013appidorname\030\001 \001(\t\022\027\n\017publ"
      "ishedfileid\030\002 \001(\004\022\024\n\014templatename\030\003 \001(\t\""
      "\224\002\n/CPhysicalGoods_SteamControllerSetCon"
      "fig_Request\022\025\n\rserial_number\030\001 \001(\t\022\027\n\017co"
      "ntroller_code\030\002 \001(\t\022\021\n\taccountid\030\003 \001(\r\022]"
      "\n\016configurations\030\004 \003(\0132E.proto.steam.CPh"
      "ysicalGoods_SteamControllerSetConfig_Con"
      "trollerConfig\022\032\n\017controller_type\030\005 \001(\005:\001"
      "2\022#\n\024only_for_this_serial\030\006 \001(\010:\005false\"2"
      "\n0CPhysicalGoods_SteamControllerSetConfi"
      "g_Response\"\312\001\n/CPhysicalGoods_SteamContr"
      "ollerGetConfig_Request\022\025\n\rserial_number\030"
      "\001 \001(\t\022\027\n\017controller_code\030\002 \001(\t\022\021\n\taccoun"
      "tid\030\003 \001(\r\022\023\n\013appidorname\030\004 \001(\t\022\032\n\017contro"
      "ller_type\030\005 \001(\005:\0012\022#\n\024only_for_this_seri"
      "al\030\006 \001(\010:\005false\"\225\001\n8CPhysicalGoods_Steam"
      "ControllerGetConfig_ControllerConfig\022\023\n\013"
      "appidorname\030\001 \001(\t\022\027\n\017publishedfileid\030\002 \001"
      "(\004\022\024\n\014templatename\030\003 \001(\t\022\025\n\rserial_numbe"
      "r\030\004 \001(\t\"\221\001\n0CPhysicalGoods_SteamControll"
      "erGetConfig_Response\022]\n\016configurations\030\001"
      " \003(\0132E.proto.steam.CPhysicalGoods_SteamC"
      "ontrollerGetConfig_ControllerConfig\"u\n0C"
      "PhysicalGoods_DeRegisterSteamController_"
      "Request\022\025\n\rserial_number\030\001 \001(\t\022\027\n\017contro"
      "ller_code\030\002 \001(\t\022\021\n\taccountid\030\003 \001(\r\"3\n1CP"
      "hysicalGoods_DeRegisterSteamController_R"
      "esponse\"r\n-CPhysicalGoods_SetPersonaliza"
      "tionFile_Request\022\025\n\rserial_number\030\001 \001(\t\022"
      "\027\n\017publishedfileid\030\002 \001(\004\022\021\n\taccountid\030\003 "
      "\001(\r\"0\n.CPhysicalGoods_SetPersonalization"
      "File_Response\"Y\n-CPhysicalGoods_GetPerso"
      "nalizationFile_Request\022\025\n\rserial_number\030"
      "\001 \001(\t\022\021\n\taccountid\030\002 \001(\r\"I\n.CPhysicalGoo"
      "ds_GetPersonalizationFile_Response\022\027\n\017pu"
      "blishedfileid\030\001 \001(\0042\227\016\n\rPhysicalGoods\022\354\001"
      "\n\027RegisterSteamController\022;.proto.steam."
      "CPhysicalGoods_RegisterSteamController_R"
      "equest\032<.proto.steam.CPhysicalGoods_Regi"
      "sterSteamController_Response\"V\202\265\030RRecord"
      "s a serial number and the calling user\'s"
      " account info for warranty purposes.\022\353\001\n"
      "#CompleteSteamControllerRegistration\022G.p"
      "roto.steam.CPhysicalGoods_CompleteSteamC"
      "ontrollerRegistration_Request\032H.proto.st"
      "eam.CPhysicalGoods_CompleteSteamControll"
      "erRegistration_Response\"1\202\265\030-Marks a con"
      "troller\'s registration as complete\022\357\001\n#Q"
      "ueryAccountsRegisteredToController\022C.pro"
      "to.steam.CPhysicalGoods_QueryAccountsReg"
      "isteredToSerial_Request\032D.proto.steam.CP"
      "hysicalGoods_QueryAccountsRegisteredToSe"
      "rial_Response\"=\202\265\0309Sends back a list of "
      "accounts registered to a controller.\022\320\001\n"
      " SetDesiredControllerConfigForApp\022<.prot"
      "o.steam.CPhysicalGoods_SteamControllerSe"
      "tConfig_Request\032=.proto.steam.CPhysicalG"
      "oods_SteamControllerSetConfig_Response\"/"
      "\202\265\030+Sets a desired controller config for"
      " an app\022\320\001\n GetDesiredControllerConfigFo"
      "rApp\022<.proto.steam.CPhysicalGoods_SteamC"
      "ontrollerGetConfig_Request\032=.proto.steam"
      ".CPhysicalGoods_SteamControllerGetConfig"
      "_Response\"/\202\265\030+Gets a desired controller"
      " config for an app\022\271\001\n\031DeRegisterSteamCo"
      "ntroller\022=.proto.steam.CPhysicalGoods_De"
      "RegisterSteamController_Request\032>.proto."
      "steam.CPhysicalGoods_DeRegisterSteamCont"
      "roller_Response\"\035\202\265\030\031De registers a cont"
      "roller\022\317\001\n SetControllerPersonalizationF"
      "ile\022:.proto.steam.CPhysicalGoods_SetPers"
      "onalizationFile_Request\032;.proto.steam.CP"
      "hysicalGoods_SetPersonalizationFile_Resp"
      "onse\"2\202\265\030.Stores the file ID of the pers"
      "onalization file\022\315\001\n GetControllerPerson"
      "alizationFile\022:.proto.steam.CPhysicalGoo"
      "ds_GetPersonalizationFile_Request\032;.prot"
      "o.steam.CPhysicalGoods_GetPersonalizatio"
      "nFile_Response\"0\202\265\030,Gets the file ID of "
      "the personalization file\0323\202\265\030/A service "
      "to use physical goods related methodsB\003\200"
      "\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4082);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_physicalgoods.steamclient.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPhysicalGoods_RegisterSteamController_Request::kSerialNumberFieldNumber;
const int CPhysicalGoods_RegisterSteamController_Request::kControllerCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPhysicalGoods_RegisterSteamController_Request::CPhysicalGoods_RegisterSteamController_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPhysicalGoods_RegisterSteamController_Request)
}
CPhysicalGoods_RegisterSteamController_Request::CPhysicalGoods_RegisterSteamController_Request(const CPhysicalGoods_RegisterSteamController_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_controller_code()) {
    controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPhysicalGoods_RegisterSteamController_Request)
}

void CPhysicalGoods_RegisterSteamController_Request::SharedCtor() {
  _cached_size_ = 0;
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CPhysicalGoods_RegisterSteamController_Request::~CPhysicalGoods_RegisterSteamController_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPhysicalGoods_RegisterSteamController_Request)
  SharedDtor();
}

void CPhysicalGoods_RegisterSteamController_Request::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPhysicalGoods_RegisterSteamController_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPhysicalGoods_RegisterSteamController_Request::descriptor() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPhysicalGoods_RegisterSteamController_Request& CPhysicalGoods_RegisterSteamController_Request::default_instance() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPhysicalGoods_RegisterSteamController_Request* CPhysicalGoods_RegisterSteamController_Request::New(::google::protobuf::Arena* arena) const {
  CPhysicalGoods_RegisterSteamController_Request* n = new CPhysicalGoods_RegisterSteamController_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPhysicalGoods_RegisterSteamController_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPhysicalGoods_RegisterSteamController_Request)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_serial_number()) {
      GOOGLE_DCHECK(!serial_number_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serial_number_.UnsafeRawStringPointer())->clear();
    }
    if (has_controller_code()) {
      GOOGLE_DCHECK(!controller_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*controller_code_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPhysicalGoods_RegisterSteamController_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPhysicalGoods_RegisterSteamController_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), this->serial_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPhysicalGoods_RegisterSteamController_Request.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string controller_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_controller_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->controller_code().data(), this->controller_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPhysicalGoods_RegisterSteamController_Request.controller_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPhysicalGoods_RegisterSteamController_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPhysicalGoods_RegisterSteamController_Request)
  return false;
#undef DO_
}

void CPhysicalGoods_RegisterSteamController_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPhysicalGoods_RegisterSteamController_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_RegisterSteamController_Request.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_number(), output);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), this->controller_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_RegisterSteamController_Request.controller_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->controller_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPhysicalGoods_RegisterSteamController_Request)
}

::google::protobuf::uint8* CPhysicalGoods_RegisterSteamController_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPhysicalGoods_RegisterSteamController_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_RegisterSteamController_Request.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial_number(), target);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), this->controller_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_RegisterSteamController_Request.controller_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->controller_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPhysicalGoods_RegisterSteamController_Request)
  return target;
}

size_t CPhysicalGoods_RegisterSteamController_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPhysicalGoods_RegisterSteamController_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional string controller_code = 2;
    if (has_controller_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->controller_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPhysicalGoods_RegisterSteamController_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPhysicalGoods_RegisterSteamController_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPhysicalGoods_RegisterSteamController_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPhysicalGoods_RegisterSteamController_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPhysicalGoods_RegisterSteamController_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPhysicalGoods_RegisterSteamController_Request)
    MergeFrom(*source);
  }
}

void CPhysicalGoods_RegisterSteamController_Request::MergeFrom(const CPhysicalGoods_RegisterSteamController_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPhysicalGoods_RegisterSteamController_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_controller_code();
      controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
    }
  }
}

void CPhysicalGoods_RegisterSteamController_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPhysicalGoods_RegisterSteamController_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPhysicalGoods_RegisterSteamController_Request::CopyFrom(const CPhysicalGoods_RegisterSteamController_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPhysicalGoods_RegisterSteamController_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPhysicalGoods_RegisterSteamController_Request::IsInitialized() const {
  return true;
}

void CPhysicalGoods_RegisterSteamController_Request::Swap(CPhysicalGoods_RegisterSteamController_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPhysicalGoods_RegisterSteamController_Request::InternalSwap(CPhysicalGoods_RegisterSteamController_Request* other) {
  serial_number_.Swap(&other->serial_number_);
  controller_code_.Swap(&other->controller_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPhysicalGoods_RegisterSteamController_Request::GetMetadata() const {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPhysicalGoods_RegisterSteamController_Request

// optional string serial_number = 1;
bool CPhysicalGoods_RegisterSteamController_Request::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPhysicalGoods_RegisterSteamController_Request::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
void CPhysicalGoods_RegisterSteamController_Request::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPhysicalGoods_RegisterSteamController_Request::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
const ::std::string& CPhysicalGoods_RegisterSteamController_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_RegisterSteamController_Request.serial_number)
  return serial_number_.GetNoArena();
}
void CPhysicalGoods_RegisterSteamController_Request::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_RegisterSteamController_Request.serial_number)
}
#if LANG_CXX11
void CPhysicalGoods_RegisterSteamController_Request::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_RegisterSteamController_Request.serial_number)
}
#endif
void CPhysicalGoods_RegisterSteamController_Request::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_RegisterSteamController_Request.serial_number)
}
void CPhysicalGoods_RegisterSteamController_Request::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_RegisterSteamController_Request.serial_number)
}
::std::string* CPhysicalGoods_RegisterSteamController_Request::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_RegisterSteamController_Request.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPhysicalGoods_RegisterSteamController_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_RegisterSteamController_Request.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPhysicalGoods_RegisterSteamController_Request::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_RegisterSteamController_Request.serial_number)
}

// optional string controller_code = 2;
bool CPhysicalGoods_RegisterSteamController_Request::has_controller_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPhysicalGoods_RegisterSteamController_Request::set_has_controller_code() {
  _has_bits_[0] |= 0x00000002u;
}
void CPhysicalGoods_RegisterSteamController_Request::clear_has_controller_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPhysicalGoods_RegisterSteamController_Request::clear_controller_code() {
  controller_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_controller_code();
}
const ::std::string& CPhysicalGoods_RegisterSteamController_Request::controller_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_RegisterSteamController_Request.controller_code)
  return controller_code_.GetNoArena();
}
void CPhysicalGoods_RegisterSteamController_Request::set_controller_code(const ::std::string& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_RegisterSteamController_Request.controller_code)
}
#if LANG_CXX11
void CPhysicalGoods_RegisterSteamController_Request::set_controller_code(::std::string&& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_RegisterSteamController_Request.controller_code)
}
#endif
void CPhysicalGoods_RegisterSteamController_Request::set_controller_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_RegisterSteamController_Request.controller_code)
}
void CPhysicalGoods_RegisterSteamController_Request::set_controller_code(const char* value, size_t size) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_RegisterSteamController_Request.controller_code)
}
::std::string* CPhysicalGoods_RegisterSteamController_Request::mutable_controller_code() {
  set_has_controller_code();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_RegisterSteamController_Request.controller_code)
  return controller_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPhysicalGoods_RegisterSteamController_Request::release_controller_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_RegisterSteamController_Request.controller_code)
  clear_has_controller_code();
  return controller_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPhysicalGoods_RegisterSteamController_Request::set_allocated_controller_code(::std::string* controller_code) {
  if (controller_code != NULL) {
    set_has_controller_code();
  } else {
    clear_has_controller_code();
  }
  controller_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), controller_code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_RegisterSteamController_Request.controller_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPhysicalGoods_RegisterSteamController_Response::CPhysicalGoods_RegisterSteamController_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPhysicalGoods_RegisterSteamController_Response)
}
CPhysicalGoods_RegisterSteamController_Response::CPhysicalGoods_RegisterSteamController_Response(const CPhysicalGoods_RegisterSteamController_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPhysicalGoods_RegisterSteamController_Response)
}

void CPhysicalGoods_RegisterSteamController_Response::SharedCtor() {
  _cached_size_ = 0;
}

CPhysicalGoods_RegisterSteamController_Response::~CPhysicalGoods_RegisterSteamController_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPhysicalGoods_RegisterSteamController_Response)
  SharedDtor();
}

void CPhysicalGoods_RegisterSteamController_Response::SharedDtor() {
}

void CPhysicalGoods_RegisterSteamController_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPhysicalGoods_RegisterSteamController_Response::descriptor() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPhysicalGoods_RegisterSteamController_Response& CPhysicalGoods_RegisterSteamController_Response::default_instance() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPhysicalGoods_RegisterSteamController_Response* CPhysicalGoods_RegisterSteamController_Response::New(::google::protobuf::Arena* arena) const {
  CPhysicalGoods_RegisterSteamController_Response* n = new CPhysicalGoods_RegisterSteamController_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPhysicalGoods_RegisterSteamController_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPhysicalGoods_RegisterSteamController_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPhysicalGoods_RegisterSteamController_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPhysicalGoods_RegisterSteamController_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPhysicalGoods_RegisterSteamController_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPhysicalGoods_RegisterSteamController_Response)
  return false;
#undef DO_
}

void CPhysicalGoods_RegisterSteamController_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPhysicalGoods_RegisterSteamController_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPhysicalGoods_RegisterSteamController_Response)
}

::google::protobuf::uint8* CPhysicalGoods_RegisterSteamController_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPhysicalGoods_RegisterSteamController_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPhysicalGoods_RegisterSteamController_Response)
  return target;
}

size_t CPhysicalGoods_RegisterSteamController_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPhysicalGoods_RegisterSteamController_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPhysicalGoods_RegisterSteamController_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPhysicalGoods_RegisterSteamController_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPhysicalGoods_RegisterSteamController_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPhysicalGoods_RegisterSteamController_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPhysicalGoods_RegisterSteamController_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPhysicalGoods_RegisterSteamController_Response)
    MergeFrom(*source);
  }
}

void CPhysicalGoods_RegisterSteamController_Response::MergeFrom(const CPhysicalGoods_RegisterSteamController_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPhysicalGoods_RegisterSteamController_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPhysicalGoods_RegisterSteamController_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPhysicalGoods_RegisterSteamController_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPhysicalGoods_RegisterSteamController_Response::CopyFrom(const CPhysicalGoods_RegisterSteamController_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPhysicalGoods_RegisterSteamController_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPhysicalGoods_RegisterSteamController_Response::IsInitialized() const {
  return true;
}

void CPhysicalGoods_RegisterSteamController_Response::Swap(CPhysicalGoods_RegisterSteamController_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPhysicalGoods_RegisterSteamController_Response::InternalSwap(CPhysicalGoods_RegisterSteamController_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPhysicalGoods_RegisterSteamController_Response::GetMetadata() const {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPhysicalGoods_RegisterSteamController_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPhysicalGoods_CompleteSteamControllerRegistration_Request::kSerialNumberFieldNumber;
const int CPhysicalGoods_CompleteSteamControllerRegistration_Request::kControllerCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPhysicalGoods_CompleteSteamControllerRegistration_Request::CPhysicalGoods_CompleteSteamControllerRegistration_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request)
}
CPhysicalGoods_CompleteSteamControllerRegistration_Request::CPhysicalGoods_CompleteSteamControllerRegistration_Request(const CPhysicalGoods_CompleteSteamControllerRegistration_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_controller_code()) {
    controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request)
}

void CPhysicalGoods_CompleteSteamControllerRegistration_Request::SharedCtor() {
  _cached_size_ = 0;
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CPhysicalGoods_CompleteSteamControllerRegistration_Request::~CPhysicalGoods_CompleteSteamControllerRegistration_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request)
  SharedDtor();
}

void CPhysicalGoods_CompleteSteamControllerRegistration_Request::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPhysicalGoods_CompleteSteamControllerRegistration_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPhysicalGoods_CompleteSteamControllerRegistration_Request::descriptor() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPhysicalGoods_CompleteSteamControllerRegistration_Request& CPhysicalGoods_CompleteSteamControllerRegistration_Request::default_instance() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPhysicalGoods_CompleteSteamControllerRegistration_Request* CPhysicalGoods_CompleteSteamControllerRegistration_Request::New(::google::protobuf::Arena* arena) const {
  CPhysicalGoods_CompleteSteamControllerRegistration_Request* n = new CPhysicalGoods_CompleteSteamControllerRegistration_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPhysicalGoods_CompleteSteamControllerRegistration_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_serial_number()) {
      GOOGLE_DCHECK(!serial_number_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serial_number_.UnsafeRawStringPointer())->clear();
    }
    if (has_controller_code()) {
      GOOGLE_DCHECK(!controller_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*controller_code_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPhysicalGoods_CompleteSteamControllerRegistration_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), this->serial_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string controller_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_controller_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->controller_code().data(), this->controller_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.controller_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request)
  return false;
#undef DO_
}

void CPhysicalGoods_CompleteSteamControllerRegistration_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_number(), output);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), this->controller_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.controller_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->controller_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request)
}

::google::protobuf::uint8* CPhysicalGoods_CompleteSteamControllerRegistration_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial_number(), target);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), this->controller_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.controller_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->controller_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request)
  return target;
}

size_t CPhysicalGoods_CompleteSteamControllerRegistration_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional string controller_code = 2;
    if (has_controller_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->controller_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPhysicalGoods_CompleteSteamControllerRegistration_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPhysicalGoods_CompleteSteamControllerRegistration_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPhysicalGoods_CompleteSteamControllerRegistration_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request)
    MergeFrom(*source);
  }
}

void CPhysicalGoods_CompleteSteamControllerRegistration_Request::MergeFrom(const CPhysicalGoods_CompleteSteamControllerRegistration_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_controller_code();
      controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
    }
  }
}

void CPhysicalGoods_CompleteSteamControllerRegistration_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPhysicalGoods_CompleteSteamControllerRegistration_Request::CopyFrom(const CPhysicalGoods_CompleteSteamControllerRegistration_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPhysicalGoods_CompleteSteamControllerRegistration_Request::IsInitialized() const {
  return true;
}

void CPhysicalGoods_CompleteSteamControllerRegistration_Request::Swap(CPhysicalGoods_CompleteSteamControllerRegistration_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPhysicalGoods_CompleteSteamControllerRegistration_Request::InternalSwap(CPhysicalGoods_CompleteSteamControllerRegistration_Request* other) {
  serial_number_.Swap(&other->serial_number_);
  controller_code_.Swap(&other->controller_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPhysicalGoods_CompleteSteamControllerRegistration_Request::GetMetadata() const {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPhysicalGoods_CompleteSteamControllerRegistration_Request

// optional string serial_number = 1;
bool CPhysicalGoods_CompleteSteamControllerRegistration_Request::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
void CPhysicalGoods_CompleteSteamControllerRegistration_Request::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPhysicalGoods_CompleteSteamControllerRegistration_Request::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
const ::std::string& CPhysicalGoods_CompleteSteamControllerRegistration_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.serial_number)
  return serial_number_.GetNoArena();
}
void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.serial_number)
}
#if LANG_CXX11
void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.serial_number)
}
#endif
void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.serial_number)
}
void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.serial_number)
}
::std::string* CPhysicalGoods_CompleteSteamControllerRegistration_Request::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPhysicalGoods_CompleteSteamControllerRegistration_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.serial_number)
}

// optional string controller_code = 2;
bool CPhysicalGoods_CompleteSteamControllerRegistration_Request::has_controller_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_has_controller_code() {
  _has_bits_[0] |= 0x00000002u;
}
void CPhysicalGoods_CompleteSteamControllerRegistration_Request::clear_has_controller_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPhysicalGoods_CompleteSteamControllerRegistration_Request::clear_controller_code() {
  controller_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_controller_code();
}
const ::std::string& CPhysicalGoods_CompleteSteamControllerRegistration_Request::controller_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.controller_code)
  return controller_code_.GetNoArena();
}
void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_controller_code(const ::std::string& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.controller_code)
}
#if LANG_CXX11
void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_controller_code(::std::string&& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.controller_code)
}
#endif
void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_controller_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.controller_code)
}
void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_controller_code(const char* value, size_t size) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.controller_code)
}
::std::string* CPhysicalGoods_CompleteSteamControllerRegistration_Request::mutable_controller_code() {
  set_has_controller_code();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.controller_code)
  return controller_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPhysicalGoods_CompleteSteamControllerRegistration_Request::release_controller_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.controller_code)
  clear_has_controller_code();
  return controller_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_allocated_controller_code(::std::string* controller_code) {
  if (controller_code != NULL) {
    set_has_controller_code();
  } else {
    clear_has_controller_code();
  }
  controller_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), controller_code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.controller_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPhysicalGoods_CompleteSteamControllerRegistration_Response::CPhysicalGoods_CompleteSteamControllerRegistration_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Response)
}
CPhysicalGoods_CompleteSteamControllerRegistration_Response::CPhysicalGoods_CompleteSteamControllerRegistration_Response(const CPhysicalGoods_CompleteSteamControllerRegistration_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Response)
}

void CPhysicalGoods_CompleteSteamControllerRegistration_Response::SharedCtor() {
  _cached_size_ = 0;
}

CPhysicalGoods_CompleteSteamControllerRegistration_Response::~CPhysicalGoods_CompleteSteamControllerRegistration_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Response)
  SharedDtor();
}

void CPhysicalGoods_CompleteSteamControllerRegistration_Response::SharedDtor() {
}

void CPhysicalGoods_CompleteSteamControllerRegistration_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPhysicalGoods_CompleteSteamControllerRegistration_Response::descriptor() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPhysicalGoods_CompleteSteamControllerRegistration_Response& CPhysicalGoods_CompleteSteamControllerRegistration_Response::default_instance() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPhysicalGoods_CompleteSteamControllerRegistration_Response* CPhysicalGoods_CompleteSteamControllerRegistration_Response::New(::google::protobuf::Arena* arena) const {
  CPhysicalGoods_CompleteSteamControllerRegistration_Response* n = new CPhysicalGoods_CompleteSteamControllerRegistration_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPhysicalGoods_CompleteSteamControllerRegistration_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPhysicalGoods_CompleteSteamControllerRegistration_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Response)
  return false;
#undef DO_
}

void CPhysicalGoods_CompleteSteamControllerRegistration_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Response)
}

::google::protobuf::uint8* CPhysicalGoods_CompleteSteamControllerRegistration_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Response)
  return target;
}

size_t CPhysicalGoods_CompleteSteamControllerRegistration_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPhysicalGoods_CompleteSteamControllerRegistration_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPhysicalGoods_CompleteSteamControllerRegistration_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPhysicalGoods_CompleteSteamControllerRegistration_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Response)
    MergeFrom(*source);
  }
}

void CPhysicalGoods_CompleteSteamControllerRegistration_Response::MergeFrom(const CPhysicalGoods_CompleteSteamControllerRegistration_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPhysicalGoods_CompleteSteamControllerRegistration_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPhysicalGoods_CompleteSteamControllerRegistration_Response::CopyFrom(const CPhysicalGoods_CompleteSteamControllerRegistration_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPhysicalGoods_CompleteSteamControllerRegistration_Response::IsInitialized() const {
  return true;
}

void CPhysicalGoods_CompleteSteamControllerRegistration_Response::Swap(CPhysicalGoods_CompleteSteamControllerRegistration_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPhysicalGoods_CompleteSteamControllerRegistration_Response::InternalSwap(CPhysicalGoods_CompleteSteamControllerRegistration_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPhysicalGoods_CompleteSteamControllerRegistration_Response::GetMetadata() const {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPhysicalGoods_CompleteSteamControllerRegistration_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::kSerialNumberFieldNumber;
const int CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::kControllerCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::CPhysicalGoods_QueryAccountsRegisteredToSerial_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request)
}
CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::CPhysicalGoods_QueryAccountsRegisteredToSerial_Request(const CPhysicalGoods_QueryAccountsRegisteredToSerial_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_controller_code()) {
    controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request)
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::SharedCtor() {
  _cached_size_ = 0;
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::~CPhysicalGoods_QueryAccountsRegisteredToSerial_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request)
  SharedDtor();
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::descriptor() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPhysicalGoods_QueryAccountsRegisteredToSerial_Request& CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::default_instance() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPhysicalGoods_QueryAccountsRegisteredToSerial_Request* CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::New(::google::protobuf::Arena* arena) const {
  CPhysicalGoods_QueryAccountsRegisteredToSerial_Request* n = new CPhysicalGoods_QueryAccountsRegisteredToSerial_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_serial_number()) {
      GOOGLE_DCHECK(!serial_number_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serial_number_.UnsafeRawStringPointer())->clear();
    }
    if (has_controller_code()) {
      GOOGLE_DCHECK(!controller_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*controller_code_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), this->serial_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string controller_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_controller_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->controller_code().data(), this->controller_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.controller_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request)
  return false;
#undef DO_
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_number(), output);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), this->controller_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.controller_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->controller_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request)
}

::google::protobuf::uint8* CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial_number(), target);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), this->controller_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.controller_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->controller_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request)
  return target;
}

size_t CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional string controller_code = 2;
    if (has_controller_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->controller_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPhysicalGoods_QueryAccountsRegisteredToSerial_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPhysicalGoods_QueryAccountsRegisteredToSerial_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request)
    MergeFrom(*source);
  }
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::MergeFrom(const CPhysicalGoods_QueryAccountsRegisteredToSerial_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_controller_code();
      controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
    }
  }
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::CopyFrom(const CPhysicalGoods_QueryAccountsRegisteredToSerial_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::IsInitialized() const {
  return true;
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::Swap(CPhysicalGoods_QueryAccountsRegisteredToSerial_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::InternalSwap(CPhysicalGoods_QueryAccountsRegisteredToSerial_Request* other) {
  serial_number_.Swap(&other->serial_number_);
  controller_code_.Swap(&other->controller_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::GetMetadata() const {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPhysicalGoods_QueryAccountsRegisteredToSerial_Request

// optional string serial_number = 1;
bool CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
const ::std::string& CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.serial_number)
  return serial_number_.GetNoArena();
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.serial_number)
}
#if LANG_CXX11
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.serial_number)
}
#endif
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.serial_number)
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.serial_number)
}
::std::string* CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.serial_number)
}

// optional string controller_code = 2;
bool CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::has_controller_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_has_controller_code() {
  _has_bits_[0] |= 0x00000002u;
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::clear_has_controller_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::clear_controller_code() {
  controller_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_controller_code();
}
const ::std::string& CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::controller_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.controller_code)
  return controller_code_.GetNoArena();
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_controller_code(const ::std::string& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.controller_code)
}
#if LANG_CXX11
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_controller_code(::std::string&& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.controller_code)
}
#endif
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_controller_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.controller_code)
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_controller_code(const char* value, size_t size) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.controller_code)
}
::std::string* CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::mutable_controller_code() {
  set_has_controller_code();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.controller_code)
  return controller_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::release_controller_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.controller_code)
  clear_has_controller_code();
  return controller_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_allocated_controller_code(::std::string* controller_code) {
  if (controller_code != NULL) {
    set_has_controller_code();
  } else {
    clear_has_controller_code();
  }
  controller_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), controller_code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.controller_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::kAccountidFieldNumber;
const int CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::kRegistrationCompleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts)
}
CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts(const CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    reinterpret_cast<char*>(&registration_complete_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(registration_complete_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts)
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&accountid_, 0, reinterpret_cast<char*>(&registration_complete_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(registration_complete_));
}

CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::~CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts() {
  // @@protoc_insertion_point(destructor:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts)
  SharedDtor();
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::SharedDtor() {
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::descriptor() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts& CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::default_instance() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts* CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::New(::google::protobuf::Arena* arena) const {
  CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts* n = new CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&accountid_, 0, reinterpret_cast<char*>(&registration_complete_) -
      reinterpret_cast<char*>(&accountid_) + sizeof(registration_complete_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool registration_complete = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_registration_complete();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &registration_complete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts)
  return false;
#undef DO_
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional bool registration_complete = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->registration_complete(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts)
}

::google::protobuf::uint8* CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional bool registration_complete = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->registration_complete(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts)
  return target;
}

size_t CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional bool registration_complete = 2;
    if (has_registration_complete()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts)
  GOOGLE_DCHECK_NE(&from, this);
  const CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts)
    MergeFrom(*source);
  }
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::MergeFrom(const CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      registration_complete_ = from.registration_complete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::CopyFrom(const CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::IsInitialized() const {
  return true;
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::Swap(CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::InternalSwap(CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts* other) {
  std::swap(accountid_, other->accountid_);
  std::swap(registration_complete_, other->registration_complete_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::GetMetadata() const {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts

// optional uint32 accountid = 1;
bool CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
::google::protobuf::uint32 CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::accountid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts.accountid)
  return accountid_;
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts.accountid)
}

// optional bool registration_complete = 2;
bool CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::has_registration_complete() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::set_has_registration_complete() {
  _has_bits_[0] |= 0x00000002u;
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::clear_has_registration_complete() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::clear_registration_complete() {
  registration_complete_ = false;
  clear_has_registration_complete();
}
bool CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::registration_complete() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts.registration_complete)
  return registration_complete_;
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::set_registration_complete(bool value) {
  set_has_registration_complete();
  registration_complete_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts.registration_complete)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::kAccountsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::CPhysicalGoods_QueryAccountsRegisteredToSerial_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response)
}
CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::CPhysicalGoods_QueryAccountsRegisteredToSerial_Response(const CPhysicalGoods_QueryAccountsRegisteredToSerial_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response)
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::SharedCtor() {
  _cached_size_ = 0;
}

CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::~CPhysicalGoods_QueryAccountsRegisteredToSerial_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response)
  SharedDtor();
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::SharedDtor() {
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::descriptor() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPhysicalGoods_QueryAccountsRegisteredToSerial_Response& CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::default_instance() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPhysicalGoods_QueryAccountsRegisteredToSerial_Response* CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::New(::google::protobuf::Arena* arena) const {
  CPhysicalGoods_QueryAccountsRegisteredToSerial_Response* n = new CPhysicalGoods_QueryAccountsRegisteredToSerial_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response)
  accounts_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts accounts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accounts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response)
  return false;
#undef DO_
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts accounts = 1;
  for (unsigned int i = 0, n = this->accounts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->accounts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response)
}

::google::protobuf::uint8* CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts accounts = 1;
  for (unsigned int i = 0, n = this->accounts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->accounts(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response)
  return target;
}

size_t CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts accounts = 1;
  {
    unsigned int count = this->accounts_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accounts(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPhysicalGoods_QueryAccountsRegisteredToSerial_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPhysicalGoods_QueryAccountsRegisteredToSerial_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response)
    MergeFrom(*source);
  }
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::MergeFrom(const CPhysicalGoods_QueryAccountsRegisteredToSerial_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::CopyFrom(const CPhysicalGoods_QueryAccountsRegisteredToSerial_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::IsInitialized() const {
  return true;
}

void CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::Swap(CPhysicalGoods_QueryAccountsRegisteredToSerial_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::InternalSwap(CPhysicalGoods_QueryAccountsRegisteredToSerial_Response* other) {
  accounts_.InternalSwap(&other->accounts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::GetMetadata() const {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPhysicalGoods_QueryAccountsRegisteredToSerial_Response

// repeated .proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts accounts = 1;
int CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::accounts_size() const {
  return accounts_.size();
}
void CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::clear_accounts() {
  accounts_.Clear();
}
const ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts& CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::accounts(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response.accounts)
  return accounts_.Get(index);
}
::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts* CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response.accounts)
  return accounts_.Mutable(index);
}
::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts* CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::add_accounts() {
  // @@protoc_insertion_point(field_add:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response.accounts)
  return accounts_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts >*
CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response.accounts)
  return &accounts_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts >&
CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::accounts() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response.accounts)
  return accounts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::kAppidornameFieldNumber;
const int CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::kPublishedfileidFieldNumber;
const int CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::kTemplatenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::CPhysicalGoods_SteamControllerSetConfig_ControllerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig)
}
CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::CPhysicalGoods_SteamControllerSetConfig_ControllerConfig(const CPhysicalGoods_SteamControllerSetConfig_ControllerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appidorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_appidorname()) {
    appidorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appidorname_);
  }
  templatename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_templatename()) {
    templatename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.templatename_);
  }
  publishedfileid_ = from.publishedfileid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig)
}

void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::SharedCtor() {
  _cached_size_ = 0;
  appidorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  templatename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publishedfileid_ = GOOGLE_ULONGLONG(0);
}

CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::~CPhysicalGoods_SteamControllerSetConfig_ControllerConfig() {
  // @@protoc_insertion_point(destructor:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig)
  SharedDtor();
}

void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::SharedDtor() {
  appidorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  templatename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::descriptor() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPhysicalGoods_SteamControllerSetConfig_ControllerConfig& CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::default_instance() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPhysicalGoods_SteamControllerSetConfig_ControllerConfig* CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::New(::google::protobuf::Arena* arena) const {
  CPhysicalGoods_SteamControllerSetConfig_ControllerConfig* n = new CPhysicalGoods_SteamControllerSetConfig_ControllerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_appidorname()) {
      GOOGLE_DCHECK(!appidorname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*appidorname_.UnsafeRawStringPointer())->clear();
    }
    if (has_templatename()) {
      GOOGLE_DCHECK(!templatename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*templatename_.UnsafeRawStringPointer())->clear();
    }
  }
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string appidorname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appidorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appidorname().data(), this->appidorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.appidorname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 publishedfileid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_publishedfileid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string templatename = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_templatename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->templatename().data(), this->templatename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.templatename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig)
  return false;
#undef DO_
}

void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string appidorname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appidorname().data(), this->appidorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.appidorname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->appidorname(), output);
  }

  // optional uint64 publishedfileid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->publishedfileid(), output);
  }

  // optional string templatename = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->templatename().data(), this->templatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.templatename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->templatename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig)
}

::google::protobuf::uint8* CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string appidorname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appidorname().data(), this->appidorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.appidorname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->appidorname(), target);
  }

  // optional uint64 publishedfileid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->publishedfileid(), target);
  }

  // optional string templatename = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->templatename().data(), this->templatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.templatename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->templatename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig)
  return target;
}

size_t CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string appidorname = 1;
    if (has_appidorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appidorname());
    }

    // optional string templatename = 3;
    if (has_templatename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->templatename());
    }

    // optional uint64 publishedfileid = 2;
    if (has_publishedfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CPhysicalGoods_SteamControllerSetConfig_ControllerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPhysicalGoods_SteamControllerSetConfig_ControllerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig)
    MergeFrom(*source);
  }
}

void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::MergeFrom(const CPhysicalGoods_SteamControllerSetConfig_ControllerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_appidorname();
      appidorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appidorname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_templatename();
      templatename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.templatename_);
    }
    if (cached_has_bits & 0x00000004u) {
      publishedfileid_ = from.publishedfileid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::CopyFrom(const CPhysicalGoods_SteamControllerSetConfig_ControllerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::IsInitialized() const {
  return true;
}

void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::Swap(CPhysicalGoods_SteamControllerSetConfig_ControllerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::InternalSwap(CPhysicalGoods_SteamControllerSetConfig_ControllerConfig* other) {
  appidorname_.Swap(&other->appidorname_);
  templatename_.Swap(&other->templatename_);
  std::swap(publishedfileid_, other->publishedfileid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::GetMetadata() const {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPhysicalGoods_SteamControllerSetConfig_ControllerConfig

// optional string appidorname = 1;
bool CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::has_appidorname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_has_appidorname() {
  _has_bits_[0] |= 0x00000001u;
}
void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::clear_has_appidorname() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::clear_appidorname() {
  appidorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appidorname();
}
const ::std::string& CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::appidorname() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.appidorname)
  return appidorname_.GetNoArena();
}
void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_appidorname(const ::std::string& value) {
  set_has_appidorname();
  appidorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.appidorname)
}
#if LANG_CXX11
void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_appidorname(::std::string&& value) {
  set_has_appidorname();
  appidorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.appidorname)
}
#endif
void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_appidorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appidorname();
  appidorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.appidorname)
}
void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_appidorname(const char* value, size_t size) {
  set_has_appidorname();
  appidorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.appidorname)
}
::std::string* CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::mutable_appidorname() {
  set_has_appidorname();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.appidorname)
  return appidorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::release_appidorname() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.appidorname)
  clear_has_appidorname();
  return appidorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_allocated_appidorname(::std::string* appidorname) {
  if (appidorname != NULL) {
    set_has_appidorname();
  } else {
    clear_has_appidorname();
  }
  appidorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appidorname);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.appidorname)
}

// optional uint64 publishedfileid = 2;
bool CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000004u;
}
void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
::google::protobuf::uint64 CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::publishedfileid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.publishedfileid)
  return publishedfileid_;
}
void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.publishedfileid)
}

// optional string templatename = 3;
bool CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::has_templatename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_has_templatename() {
  _has_bits_[0] |= 0x00000002u;
}
void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::clear_has_templatename() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::clear_templatename() {
  templatename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_templatename();
}
const ::std::string& CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::templatename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.templatename)
  return templatename_.GetNoArena();
}
void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_templatename(const ::std::string& value) {
  set_has_templatename();
  templatename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.templatename)
}
#if LANG_CXX11
void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_templatename(::std::string&& value) {
  set_has_templatename();
  templatename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.templatename)
}
#endif
void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_templatename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_templatename();
  templatename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.templatename)
}
void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_templatename(const char* value, size_t size) {
  set_has_templatename();
  templatename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.templatename)
}
::std::string* CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::mutable_templatename() {
  set_has_templatename();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.templatename)
  return templatename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::release_templatename() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.templatename)
  clear_has_templatename();
  return templatename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_allocated_templatename(::std::string* templatename) {
  if (templatename != NULL) {
    set_has_templatename();
  } else {
    clear_has_templatename();
  }
  templatename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), templatename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.templatename)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPhysicalGoods_SteamControllerSetConfig_Request::kSerialNumberFieldNumber;
const int CPhysicalGoods_SteamControllerSetConfig_Request::kControllerCodeFieldNumber;
const int CPhysicalGoods_SteamControllerSetConfig_Request::kAccountidFieldNumber;
const int CPhysicalGoods_SteamControllerSetConfig_Request::kConfigurationsFieldNumber;
const int CPhysicalGoods_SteamControllerSetConfig_Request::kControllerTypeFieldNumber;
const int CPhysicalGoods_SteamControllerSetConfig_Request::kOnlyForThisSerialFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPhysicalGoods_SteamControllerSetConfig_Request::CPhysicalGoods_SteamControllerSetConfig_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request)
}
CPhysicalGoods_SteamControllerSetConfig_Request::CPhysicalGoods_SteamControllerSetConfig_Request(const CPhysicalGoods_SteamControllerSetConfig_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      configurations_(from.configurations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_controller_code()) {
    controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
  }
  ::memcpy(&accountid_, &from.accountid_,
    reinterpret_cast<char*>(&controller_type_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(controller_type_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request)
}

void CPhysicalGoods_SteamControllerSetConfig_Request::SharedCtor() {
  _cached_size_ = 0;
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, reinterpret_cast<char*>(&only_for_this_serial_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(only_for_this_serial_));
  controller_type_ = 2;
}

CPhysicalGoods_SteamControllerSetConfig_Request::~CPhysicalGoods_SteamControllerSetConfig_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request)
  SharedDtor();
}

void CPhysicalGoods_SteamControllerSetConfig_Request::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPhysicalGoods_SteamControllerSetConfig_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPhysicalGoods_SteamControllerSetConfig_Request::descriptor() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPhysicalGoods_SteamControllerSetConfig_Request& CPhysicalGoods_SteamControllerSetConfig_Request::default_instance() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPhysicalGoods_SteamControllerSetConfig_Request* CPhysicalGoods_SteamControllerSetConfig_Request::New(::google::protobuf::Arena* arena) const {
  CPhysicalGoods_SteamControllerSetConfig_Request* n = new CPhysicalGoods_SteamControllerSetConfig_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPhysicalGoods_SteamControllerSetConfig_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request)
  configurations_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_serial_number()) {
      GOOGLE_DCHECK(!serial_number_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serial_number_.UnsafeRawStringPointer())->clear();
    }
    if (has_controller_code()) {
      GOOGLE_DCHECK(!controller_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*controller_code_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&accountid_, 0, reinterpret_cast<char*>(&only_for_this_serial_) -
      reinterpret_cast<char*>(&accountid_) + sizeof(only_for_this_serial_));
    controller_type_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPhysicalGoods_SteamControllerSetConfig_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), this->serial_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string controller_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_controller_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->controller_code().data(), this->controller_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.controller_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accountid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig configurations = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_configurations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 controller_type = 5 [default = 2];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_controller_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &controller_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool only_for_this_serial = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_only_for_this_serial();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_for_this_serial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request)
  return false;
#undef DO_
}

void CPhysicalGoods_SteamControllerSetConfig_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_number(), output);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), this->controller_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.controller_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->controller_code(), output);
  }

  // optional uint32 accountid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->accountid(), output);
  }

  // repeated .proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig configurations = 4;
  for (unsigned int i = 0, n = this->configurations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->configurations(i), output);
  }

  // optional int32 controller_type = 5 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->controller_type(), output);
  }

  // optional bool only_for_this_serial = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->only_for_this_serial(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request)
}

::google::protobuf::uint8* CPhysicalGoods_SteamControllerSetConfig_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial_number(), target);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), this->controller_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.controller_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->controller_code(), target);
  }

  // optional uint32 accountid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->accountid(), target);
  }

  // repeated .proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig configurations = 4;
  for (unsigned int i = 0, n = this->configurations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->configurations(i), deterministic, target);
  }

  // optional int32 controller_type = 5 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->controller_type(), target);
  }

  // optional bool only_for_this_serial = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->only_for_this_serial(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request)
  return target;
}

size_t CPhysicalGoods_SteamControllerSetConfig_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig configurations = 4;
  {
    unsigned int count = this->configurations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->configurations(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional string controller_code = 2;
    if (has_controller_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->controller_code());
    }

    // optional uint32 accountid = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional bool only_for_this_serial = 6 [default = false];
    if (has_only_for_this_serial()) {
      total_size += 1 + 1;
    }

    // optional int32 controller_type = 5 [default = 2];
    if (has_controller_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->controller_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPhysicalGoods_SteamControllerSetConfig_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPhysicalGoods_SteamControllerSetConfig_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPhysicalGoods_SteamControllerSetConfig_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request)
    MergeFrom(*source);
  }
}

void CPhysicalGoods_SteamControllerSetConfig_Request::MergeFrom(const CPhysicalGoods_SteamControllerSetConfig_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configurations_.MergeFrom(from.configurations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_controller_code();
      controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000008u) {
      only_for_this_serial_ = from.only_for_this_serial_;
    }
    if (cached_has_bits & 0x00000010u) {
      controller_type_ = from.controller_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPhysicalGoods_SteamControllerSetConfig_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPhysicalGoods_SteamControllerSetConfig_Request::CopyFrom(const CPhysicalGoods_SteamControllerSetConfig_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPhysicalGoods_SteamControllerSetConfig_Request::IsInitialized() const {
  return true;
}

void CPhysicalGoods_SteamControllerSetConfig_Request::Swap(CPhysicalGoods_SteamControllerSetConfig_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPhysicalGoods_SteamControllerSetConfig_Request::InternalSwap(CPhysicalGoods_SteamControllerSetConfig_Request* other) {
  configurations_.InternalSwap(&other->configurations_);
  serial_number_.Swap(&other->serial_number_);
  controller_code_.Swap(&other->controller_code_);
  std::swap(accountid_, other->accountid_);
  std::swap(only_for_this_serial_, other->only_for_this_serial_);
  std::swap(controller_type_, other->controller_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPhysicalGoods_SteamControllerSetConfig_Request::GetMetadata() const {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPhysicalGoods_SteamControllerSetConfig_Request

// optional string serial_number = 1;
bool CPhysicalGoods_SteamControllerSetConfig_Request::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPhysicalGoods_SteamControllerSetConfig_Request::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
void CPhysicalGoods_SteamControllerSetConfig_Request::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPhysicalGoods_SteamControllerSetConfig_Request::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
const ::std::string& CPhysicalGoods_SteamControllerSetConfig_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.serial_number)
  return serial_number_.GetNoArena();
}
void CPhysicalGoods_SteamControllerSetConfig_Request::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.serial_number)
}
#if LANG_CXX11
void CPhysicalGoods_SteamControllerSetConfig_Request::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.serial_number)
}
#endif
void CPhysicalGoods_SteamControllerSetConfig_Request::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.serial_number)
}
void CPhysicalGoods_SteamControllerSetConfig_Request::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.serial_number)
}
::std::string* CPhysicalGoods_SteamControllerSetConfig_Request::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPhysicalGoods_SteamControllerSetConfig_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPhysicalGoods_SteamControllerSetConfig_Request::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.serial_number)
}

// optional string controller_code = 2;
bool CPhysicalGoods_SteamControllerSetConfig_Request::has_controller_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPhysicalGoods_SteamControllerSetConfig_Request::set_has_controller_code() {
  _has_bits_[0] |= 0x00000002u;
}
void CPhysicalGoods_SteamControllerSetConfig_Request::clear_has_controller_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPhysicalGoods_SteamControllerSetConfig_Request::clear_controller_code() {
  controller_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_controller_code();
}
const ::std::string& CPhysicalGoods_SteamControllerSetConfig_Request::controller_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.controller_code)
  return controller_code_.GetNoArena();
}
void CPhysicalGoods_SteamControllerSetConfig_Request::set_controller_code(const ::std::string& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.controller_code)
}
#if LANG_CXX11
void CPhysicalGoods_SteamControllerSetConfig_Request::set_controller_code(::std::string&& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.controller_code)
}
#endif
void CPhysicalGoods_SteamControllerSetConfig_Request::set_controller_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.controller_code)
}
void CPhysicalGoods_SteamControllerSetConfig_Request::set_controller_code(const char* value, size_t size) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.controller_code)
}
::std::string* CPhysicalGoods_SteamControllerSetConfig_Request::mutable_controller_code() {
  set_has_controller_code();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.controller_code)
  return controller_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPhysicalGoods_SteamControllerSetConfig_Request::release_controller_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.controller_code)
  clear_has_controller_code();
  return controller_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPhysicalGoods_SteamControllerSetConfig_Request::set_allocated_controller_code(::std::string* controller_code) {
  if (controller_code != NULL) {
    set_has_controller_code();
  } else {
    clear_has_controller_code();
  }
  controller_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), controller_code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.controller_code)
}

// optional uint32 accountid = 3;
bool CPhysicalGoods_SteamControllerSetConfig_Request::has_accountid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPhysicalGoods_SteamControllerSetConfig_Request::set_has_accountid() {
  _has_bits_[0] |= 0x00000004u;
}
void CPhysicalGoods_SteamControllerSetConfig_Request::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPhysicalGoods_SteamControllerSetConfig_Request::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
::google::protobuf::uint32 CPhysicalGoods_SteamControllerSetConfig_Request::accountid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.accountid)
  return accountid_;
}
void CPhysicalGoods_SteamControllerSetConfig_Request::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.accountid)
}

// repeated .proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig configurations = 4;
int CPhysicalGoods_SteamControllerSetConfig_Request::configurations_size() const {
  return configurations_.size();
}
void CPhysicalGoods_SteamControllerSetConfig_Request::clear_configurations() {
  configurations_.Clear();
}
const ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_ControllerConfig& CPhysicalGoods_SteamControllerSetConfig_Request::configurations(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.configurations)
  return configurations_.Get(index);
}
::proto::steam::CPhysicalGoods_SteamControllerSetConfig_ControllerConfig* CPhysicalGoods_SteamControllerSetConfig_Request::mutable_configurations(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.configurations)
  return configurations_.Mutable(index);
}
::proto::steam::CPhysicalGoods_SteamControllerSetConfig_ControllerConfig* CPhysicalGoods_SteamControllerSetConfig_Request::add_configurations() {
  // @@protoc_insertion_point(field_add:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.configurations)
  return configurations_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_ControllerConfig >*
CPhysicalGoods_SteamControllerSetConfig_Request::mutable_configurations() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.configurations)
  return &configurations_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_ControllerConfig >&
CPhysicalGoods_SteamControllerSetConfig_Request::configurations() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.configurations)
  return configurations_;
}

// optional int32 controller_type = 5 [default = 2];
bool CPhysicalGoods_SteamControllerSetConfig_Request::has_controller_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CPhysicalGoods_SteamControllerSetConfig_Request::set_has_controller_type() {
  _has_bits_[0] |= 0x00000010u;
}
void CPhysicalGoods_SteamControllerSetConfig_Request::clear_has_controller_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void CPhysicalGoods_SteamControllerSetConfig_Request::clear_controller_type() {
  controller_type_ = 2;
  clear_has_controller_type();
}
::google::protobuf::int32 CPhysicalGoods_SteamControllerSetConfig_Request::controller_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.controller_type)
  return controller_type_;
}
void CPhysicalGoods_SteamControllerSetConfig_Request::set_controller_type(::google::protobuf::int32 value) {
  set_has_controller_type();
  controller_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.controller_type)
}

// optional bool only_for_this_serial = 6 [default = false];
bool CPhysicalGoods_SteamControllerSetConfig_Request::has_only_for_this_serial() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CPhysicalGoods_SteamControllerSetConfig_Request::set_has_only_for_this_serial() {
  _has_bits_[0] |= 0x00000008u;
}
void CPhysicalGoods_SteamControllerSetConfig_Request::clear_has_only_for_this_serial() {
  _has_bits_[0] &= ~0x00000008u;
}
void CPhysicalGoods_SteamControllerSetConfig_Request::clear_only_for_this_serial() {
  only_for_this_serial_ = false;
  clear_has_only_for_this_serial();
}
bool CPhysicalGoods_SteamControllerSetConfig_Request::only_for_this_serial() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.only_for_this_serial)
  return only_for_this_serial_;
}
void CPhysicalGoods_SteamControllerSetConfig_Request::set_only_for_this_serial(bool value) {
  set_has_only_for_this_serial();
  only_for_this_serial_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.only_for_this_serial)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPhysicalGoods_SteamControllerSetConfig_Response::CPhysicalGoods_SteamControllerSetConfig_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Response)
}
CPhysicalGoods_SteamControllerSetConfig_Response::CPhysicalGoods_SteamControllerSetConfig_Response(const CPhysicalGoods_SteamControllerSetConfig_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Response)
}

void CPhysicalGoods_SteamControllerSetConfig_Response::SharedCtor() {
  _cached_size_ = 0;
}

CPhysicalGoods_SteamControllerSetConfig_Response::~CPhysicalGoods_SteamControllerSetConfig_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Response)
  SharedDtor();
}

void CPhysicalGoods_SteamControllerSetConfig_Response::SharedDtor() {
}

void CPhysicalGoods_SteamControllerSetConfig_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPhysicalGoods_SteamControllerSetConfig_Response::descriptor() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPhysicalGoods_SteamControllerSetConfig_Response& CPhysicalGoods_SteamControllerSetConfig_Response::default_instance() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPhysicalGoods_SteamControllerSetConfig_Response* CPhysicalGoods_SteamControllerSetConfig_Response::New(::google::protobuf::Arena* arena) const {
  CPhysicalGoods_SteamControllerSetConfig_Response* n = new CPhysicalGoods_SteamControllerSetConfig_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPhysicalGoods_SteamControllerSetConfig_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPhysicalGoods_SteamControllerSetConfig_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Response)
  return false;
#undef DO_
}

void CPhysicalGoods_SteamControllerSetConfig_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Response)
}

::google::protobuf::uint8* CPhysicalGoods_SteamControllerSetConfig_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Response)
  return target;
}

size_t CPhysicalGoods_SteamControllerSetConfig_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPhysicalGoods_SteamControllerSetConfig_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPhysicalGoods_SteamControllerSetConfig_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPhysicalGoods_SteamControllerSetConfig_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Response)
    MergeFrom(*source);
  }
}

void CPhysicalGoods_SteamControllerSetConfig_Response::MergeFrom(const CPhysicalGoods_SteamControllerSetConfig_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPhysicalGoods_SteamControllerSetConfig_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPhysicalGoods_SteamControllerSetConfig_Response::CopyFrom(const CPhysicalGoods_SteamControllerSetConfig_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPhysicalGoods_SteamControllerSetConfig_Response::IsInitialized() const {
  return true;
}

void CPhysicalGoods_SteamControllerSetConfig_Response::Swap(CPhysicalGoods_SteamControllerSetConfig_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPhysicalGoods_SteamControllerSetConfig_Response::InternalSwap(CPhysicalGoods_SteamControllerSetConfig_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPhysicalGoods_SteamControllerSetConfig_Response::GetMetadata() const {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPhysicalGoods_SteamControllerSetConfig_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPhysicalGoods_SteamControllerGetConfig_Request::kSerialNumberFieldNumber;
const int CPhysicalGoods_SteamControllerGetConfig_Request::kControllerCodeFieldNumber;
const int CPhysicalGoods_SteamControllerGetConfig_Request::kAccountidFieldNumber;
const int CPhysicalGoods_SteamControllerGetConfig_Request::kAppidornameFieldNumber;
const int CPhysicalGoods_SteamControllerGetConfig_Request::kControllerTypeFieldNumber;
const int CPhysicalGoods_SteamControllerGetConfig_Request::kOnlyForThisSerialFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPhysicalGoods_SteamControllerGetConfig_Request::CPhysicalGoods_SteamControllerGetConfig_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request)
}
CPhysicalGoods_SteamControllerGetConfig_Request::CPhysicalGoods_SteamControllerGetConfig_Request(const CPhysicalGoods_SteamControllerGetConfig_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_controller_code()) {
    controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
  }
  appidorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_appidorname()) {
    appidorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appidorname_);
  }
  ::memcpy(&accountid_, &from.accountid_,
    reinterpret_cast<char*>(&controller_type_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(controller_type_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request)
}

void CPhysicalGoods_SteamControllerGetConfig_Request::SharedCtor() {
  _cached_size_ = 0;
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appidorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, reinterpret_cast<char*>(&only_for_this_serial_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(only_for_this_serial_));
  controller_type_ = 2;
}

CPhysicalGoods_SteamControllerGetConfig_Request::~CPhysicalGoods_SteamControllerGetConfig_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request)
  SharedDtor();
}

void CPhysicalGoods_SteamControllerGetConfig_Request::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appidorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPhysicalGoods_SteamControllerGetConfig_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPhysicalGoods_SteamControllerGetConfig_Request::descriptor() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPhysicalGoods_SteamControllerGetConfig_Request& CPhysicalGoods_SteamControllerGetConfig_Request::default_instance() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPhysicalGoods_SteamControllerGetConfig_Request* CPhysicalGoods_SteamControllerGetConfig_Request::New(::google::protobuf::Arena* arena) const {
  CPhysicalGoods_SteamControllerGetConfig_Request* n = new CPhysicalGoods_SteamControllerGetConfig_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPhysicalGoods_SteamControllerGetConfig_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_serial_number()) {
      GOOGLE_DCHECK(!serial_number_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serial_number_.UnsafeRawStringPointer())->clear();
    }
    if (has_controller_code()) {
      GOOGLE_DCHECK(!controller_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*controller_code_.UnsafeRawStringPointer())->clear();
    }
    if (has_appidorname()) {
      GOOGLE_DCHECK(!appidorname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*appidorname_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&accountid_, 0, reinterpret_cast<char*>(&only_for_this_serial_) -
      reinterpret_cast<char*>(&accountid_) + sizeof(only_for_this_serial_));
    controller_type_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPhysicalGoods_SteamControllerGetConfig_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), this->serial_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string controller_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_controller_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->controller_code().data(), this->controller_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.controller_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accountid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string appidorname = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appidorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appidorname().data(), this->appidorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.appidorname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 controller_type = 5 [default = 2];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_controller_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &controller_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool only_for_this_serial = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_only_for_this_serial();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_for_this_serial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request)
  return false;
#undef DO_
}

void CPhysicalGoods_SteamControllerGetConfig_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_number(), output);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), this->controller_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.controller_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->controller_code(), output);
  }

  // optional uint32 accountid = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->accountid(), output);
  }

  // optional string appidorname = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appidorname().data(), this->appidorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.appidorname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->appidorname(), output);
  }

  // optional int32 controller_type = 5 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->controller_type(), output);
  }

  // optional bool only_for_this_serial = 6 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->only_for_this_serial(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request)
}

::google::protobuf::uint8* CPhysicalGoods_SteamControllerGetConfig_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial_number(), target);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), this->controller_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.controller_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->controller_code(), target);
  }

  // optional uint32 accountid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->accountid(), target);
  }

  // optional string appidorname = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appidorname().data(), this->appidorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.appidorname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->appidorname(), target);
  }

  // optional int32 controller_type = 5 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->controller_type(), target);
  }

  // optional bool only_for_this_serial = 6 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->only_for_this_serial(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request)
  return target;
}

size_t CPhysicalGoods_SteamControllerGetConfig_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional string controller_code = 2;
    if (has_controller_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->controller_code());
    }

    // optional string appidorname = 4;
    if (has_appidorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appidorname());
    }

    // optional uint32 accountid = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional bool only_for_this_serial = 6 [default = false];
    if (has_only_for_this_serial()) {
      total_size += 1 + 1;
    }

    // optional int32 controller_type = 5 [default = 2];
    if (has_controller_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->controller_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPhysicalGoods_SteamControllerGetConfig_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPhysicalGoods_SteamControllerGetConfig_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPhysicalGoods_SteamControllerGetConfig_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request)
    MergeFrom(*source);
  }
}

void CPhysicalGoods_SteamControllerGetConfig_Request::MergeFrom(const CPhysicalGoods_SteamControllerGetConfig_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_controller_code();
      controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_appidorname();
      appidorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appidorname_);
    }
    if (cached_has_bits & 0x00000008u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000010u) {
      only_for_this_serial_ = from.only_for_this_serial_;
    }
    if (cached_has_bits & 0x00000020u) {
      controller_type_ = from.controller_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPhysicalGoods_SteamControllerGetConfig_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPhysicalGoods_SteamControllerGetConfig_Request::CopyFrom(const CPhysicalGoods_SteamControllerGetConfig_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPhysicalGoods_SteamControllerGetConfig_Request::IsInitialized() const {
  return true;
}

void CPhysicalGoods_SteamControllerGetConfig_Request::Swap(CPhysicalGoods_SteamControllerGetConfig_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPhysicalGoods_SteamControllerGetConfig_Request::InternalSwap(CPhysicalGoods_SteamControllerGetConfig_Request* other) {
  serial_number_.Swap(&other->serial_number_);
  controller_code_.Swap(&other->controller_code_);
  appidorname_.Swap(&other->appidorname_);
  std::swap(accountid_, other->accountid_);
  std::swap(only_for_this_serial_, other->only_for_this_serial_);
  std::swap(controller_type_, other->controller_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPhysicalGoods_SteamControllerGetConfig_Request::GetMetadata() const {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPhysicalGoods_SteamControllerGetConfig_Request

// optional string serial_number = 1;
bool CPhysicalGoods_SteamControllerGetConfig_Request::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPhysicalGoods_SteamControllerGetConfig_Request::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
void CPhysicalGoods_SteamControllerGetConfig_Request::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPhysicalGoods_SteamControllerGetConfig_Request::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
const ::std::string& CPhysicalGoods_SteamControllerGetConfig_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.serial_number)
  return serial_number_.GetNoArena();
}
void CPhysicalGoods_SteamControllerGetConfig_Request::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.serial_number)
}
#if LANG_CXX11
void CPhysicalGoods_SteamControllerGetConfig_Request::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.serial_number)
}
#endif
void CPhysicalGoods_SteamControllerGetConfig_Request::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.serial_number)
}
void CPhysicalGoods_SteamControllerGetConfig_Request::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.serial_number)
}
::std::string* CPhysicalGoods_SteamControllerGetConfig_Request::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPhysicalGoods_SteamControllerGetConfig_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPhysicalGoods_SteamControllerGetConfig_Request::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.serial_number)
}

// optional string controller_code = 2;
bool CPhysicalGoods_SteamControllerGetConfig_Request::has_controller_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPhysicalGoods_SteamControllerGetConfig_Request::set_has_controller_code() {
  _has_bits_[0] |= 0x00000002u;
}
void CPhysicalGoods_SteamControllerGetConfig_Request::clear_has_controller_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPhysicalGoods_SteamControllerGetConfig_Request::clear_controller_code() {
  controller_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_controller_code();
}
const ::std::string& CPhysicalGoods_SteamControllerGetConfig_Request::controller_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.controller_code)
  return controller_code_.GetNoArena();
}
void CPhysicalGoods_SteamControllerGetConfig_Request::set_controller_code(const ::std::string& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.controller_code)
}
#if LANG_CXX11
void CPhysicalGoods_SteamControllerGetConfig_Request::set_controller_code(::std::string&& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.controller_code)
}
#endif
void CPhysicalGoods_SteamControllerGetConfig_Request::set_controller_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.controller_code)
}
void CPhysicalGoods_SteamControllerGetConfig_Request::set_controller_code(const char* value, size_t size) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.controller_code)
}
::std::string* CPhysicalGoods_SteamControllerGetConfig_Request::mutable_controller_code() {
  set_has_controller_code();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.controller_code)
  return controller_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPhysicalGoods_SteamControllerGetConfig_Request::release_controller_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.controller_code)
  clear_has_controller_code();
  return controller_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPhysicalGoods_SteamControllerGetConfig_Request::set_allocated_controller_code(::std::string* controller_code) {
  if (controller_code != NULL) {
    set_has_controller_code();
  } else {
    clear_has_controller_code();
  }
  controller_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), controller_code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.controller_code)
}

// optional uint32 accountid = 3;
bool CPhysicalGoods_SteamControllerGetConfig_Request::has_accountid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CPhysicalGoods_SteamControllerGetConfig_Request::set_has_accountid() {
  _has_bits_[0] |= 0x00000008u;
}
void CPhysicalGoods_SteamControllerGetConfig_Request::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CPhysicalGoods_SteamControllerGetConfig_Request::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
::google::protobuf::uint32 CPhysicalGoods_SteamControllerGetConfig_Request::accountid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.accountid)
  return accountid_;
}
void CPhysicalGoods_SteamControllerGetConfig_Request::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.accountid)
}

// optional string appidorname = 4;
bool CPhysicalGoods_SteamControllerGetConfig_Request::has_appidorname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPhysicalGoods_SteamControllerGetConfig_Request::set_has_appidorname() {
  _has_bits_[0] |= 0x00000004u;
}
void CPhysicalGoods_SteamControllerGetConfig_Request::clear_has_appidorname() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPhysicalGoods_SteamControllerGetConfig_Request::clear_appidorname() {
  appidorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appidorname();
}
const ::std::string& CPhysicalGoods_SteamControllerGetConfig_Request::appidorname() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.appidorname)
  return appidorname_.GetNoArena();
}
void CPhysicalGoods_SteamControllerGetConfig_Request::set_appidorname(const ::std::string& value) {
  set_has_appidorname();
  appidorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.appidorname)
}
#if LANG_CXX11
void CPhysicalGoods_SteamControllerGetConfig_Request::set_appidorname(::std::string&& value) {
  set_has_appidorname();
  appidorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.appidorname)
}
#endif
void CPhysicalGoods_SteamControllerGetConfig_Request::set_appidorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appidorname();
  appidorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.appidorname)
}
void CPhysicalGoods_SteamControllerGetConfig_Request::set_appidorname(const char* value, size_t size) {
  set_has_appidorname();
  appidorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.appidorname)
}
::std::string* CPhysicalGoods_SteamControllerGetConfig_Request::mutable_appidorname() {
  set_has_appidorname();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.appidorname)
  return appidorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPhysicalGoods_SteamControllerGetConfig_Request::release_appidorname() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.appidorname)
  clear_has_appidorname();
  return appidorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPhysicalGoods_SteamControllerGetConfig_Request::set_allocated_appidorname(::std::string* appidorname) {
  if (appidorname != NULL) {
    set_has_appidorname();
  } else {
    clear_has_appidorname();
  }
  appidorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appidorname);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.appidorname)
}

// optional int32 controller_type = 5 [default = 2];
bool CPhysicalGoods_SteamControllerGetConfig_Request::has_controller_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CPhysicalGoods_SteamControllerGetConfig_Request::set_has_controller_type() {
  _has_bits_[0] |= 0x00000020u;
}
void CPhysicalGoods_SteamControllerGetConfig_Request::clear_has_controller_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void CPhysicalGoods_SteamControllerGetConfig_Request::clear_controller_type() {
  controller_type_ = 2;
  clear_has_controller_type();
}
::google::protobuf::int32 CPhysicalGoods_SteamControllerGetConfig_Request::controller_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.controller_type)
  return controller_type_;
}
void CPhysicalGoods_SteamControllerGetConfig_Request::set_controller_type(::google::protobuf::int32 value) {
  set_has_controller_type();
  controller_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.controller_type)
}

// optional bool only_for_this_serial = 6 [default = false];
bool CPhysicalGoods_SteamControllerGetConfig_Request::has_only_for_this_serial() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CPhysicalGoods_SteamControllerGetConfig_Request::set_has_only_for_this_serial() {
  _has_bits_[0] |= 0x00000010u;
}
void CPhysicalGoods_SteamControllerGetConfig_Request::clear_has_only_for_this_serial() {
  _has_bits_[0] &= ~0x00000010u;
}
void CPhysicalGoods_SteamControllerGetConfig_Request::clear_only_for_this_serial() {
  only_for_this_serial_ = false;
  clear_has_only_for_this_serial();
}
bool CPhysicalGoods_SteamControllerGetConfig_Request::only_for_this_serial() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.only_for_this_serial)
  return only_for_this_serial_;
}
void CPhysicalGoods_SteamControllerGetConfig_Request::set_only_for_this_serial(bool value) {
  set_has_only_for_this_serial();
  only_for_this_serial_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.only_for_this_serial)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::kAppidornameFieldNumber;
const int CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::kPublishedfileidFieldNumber;
const int CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::kTemplatenameFieldNumber;
const int CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::kSerialNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::CPhysicalGoods_SteamControllerGetConfig_ControllerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig)
}
CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::CPhysicalGoods_SteamControllerGetConfig_ControllerConfig(const CPhysicalGoods_SteamControllerGetConfig_ControllerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appidorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_appidorname()) {
    appidorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appidorname_);
  }
  templatename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_templatename()) {
    templatename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.templatename_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  publishedfileid_ = from.publishedfileid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig)
}

void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::SharedCtor() {
  _cached_size_ = 0;
  appidorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  templatename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publishedfileid_ = GOOGLE_ULONGLONG(0);
}

CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::~CPhysicalGoods_SteamControllerGetConfig_ControllerConfig() {
  // @@protoc_insertion_point(destructor:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig)
  SharedDtor();
}

void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::SharedDtor() {
  appidorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  templatename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::descriptor() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPhysicalGoods_SteamControllerGetConfig_ControllerConfig& CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::default_instance() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPhysicalGoods_SteamControllerGetConfig_ControllerConfig* CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::New(::google::protobuf::Arena* arena) const {
  CPhysicalGoods_SteamControllerGetConfig_ControllerConfig* n = new CPhysicalGoods_SteamControllerGetConfig_ControllerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_appidorname()) {
      GOOGLE_DCHECK(!appidorname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*appidorname_.UnsafeRawStringPointer())->clear();
    }
    if (has_templatename()) {
      GOOGLE_DCHECK(!templatename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*templatename_.UnsafeRawStringPointer())->clear();
    }
    if (has_serial_number()) {
      GOOGLE_DCHECK(!serial_number_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serial_number_.UnsafeRawStringPointer())->clear();
    }
  }
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string appidorname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appidorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appidorname().data(), this->appidorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.appidorname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 publishedfileid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_publishedfileid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string templatename = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_templatename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->templatename().data(), this->templatename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.templatename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string serial_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), this->serial_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig)
  return false;
#undef DO_
}

void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string appidorname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appidorname().data(), this->appidorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.appidorname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->appidorname(), output);
  }

  // optional uint64 publishedfileid = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->publishedfileid(), output);
  }

  // optional string templatename = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->templatename().data(), this->templatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.templatename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->templatename(), output);
  }

  // optional string serial_number = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->serial_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig)
}

::google::protobuf::uint8* CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string appidorname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appidorname().data(), this->appidorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.appidorname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->appidorname(), target);
  }

  // optional uint64 publishedfileid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->publishedfileid(), target);
  }

  // optional string templatename = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->templatename().data(), this->templatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.templatename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->templatename(), target);
  }

  // optional string serial_number = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->serial_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig)
  return target;
}

size_t CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string appidorname = 1;
    if (has_appidorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appidorname());
    }

    // optional string templatename = 3;
    if (has_templatename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->templatename());
    }

    // optional string serial_number = 4;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional uint64 publishedfileid = 2;
    if (has_publishedfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CPhysicalGoods_SteamControllerGetConfig_ControllerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPhysicalGoods_SteamControllerGetConfig_ControllerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig)
    MergeFrom(*source);
  }
}

void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::MergeFrom(const CPhysicalGoods_SteamControllerGetConfig_ControllerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_appidorname();
      appidorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appidorname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_templatename();
      templatename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.templatename_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000008u) {
      publishedfileid_ = from.publishedfileid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::CopyFrom(const CPhysicalGoods_SteamControllerGetConfig_ControllerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::IsInitialized() const {
  return true;
}

void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::Swap(CPhysicalGoods_SteamControllerGetConfig_ControllerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::InternalSwap(CPhysicalGoods_SteamControllerGetConfig_ControllerConfig* other) {
  appidorname_.Swap(&other->appidorname_);
  templatename_.Swap(&other->templatename_);
  serial_number_.Swap(&other->serial_number_);
  std::swap(publishedfileid_, other->publishedfileid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::GetMetadata() const {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPhysicalGoods_SteamControllerGetConfig_ControllerConfig

// optional string appidorname = 1;
bool CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::has_appidorname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_has_appidorname() {
  _has_bits_[0] |= 0x00000001u;
}
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::clear_has_appidorname() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::clear_appidorname() {
  appidorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appidorname();
}
const ::std::string& CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::appidorname() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.appidorname)
  return appidorname_.GetNoArena();
}
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_appidorname(const ::std::string& value) {
  set_has_appidorname();
  appidorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.appidorname)
}
#if LANG_CXX11
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_appidorname(::std::string&& value) {
  set_has_appidorname();
  appidorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.appidorname)
}
#endif
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_appidorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appidorname();
  appidorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.appidorname)
}
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_appidorname(const char* value, size_t size) {
  set_has_appidorname();
  appidorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.appidorname)
}
::std::string* CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::mutable_appidorname() {
  set_has_appidorname();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.appidorname)
  return appidorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::release_appidorname() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.appidorname)
  clear_has_appidorname();
  return appidorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_allocated_appidorname(::std::string* appidorname) {
  if (appidorname != NULL) {
    set_has_appidorname();
  } else {
    clear_has_appidorname();
  }
  appidorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appidorname);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.appidorname)
}

// optional uint64 publishedfileid = 2;
bool CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000008u;
}
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
::google::protobuf::uint64 CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::publishedfileid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.publishedfileid)
  return publishedfileid_;
}
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.publishedfileid)
}

// optional string templatename = 3;
bool CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::has_templatename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_has_templatename() {
  _has_bits_[0] |= 0x00000002u;
}
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::clear_has_templatename() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::clear_templatename() {
  templatename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_templatename();
}
const ::std::string& CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::templatename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.templatename)
  return templatename_.GetNoArena();
}
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_templatename(const ::std::string& value) {
  set_has_templatename();
  templatename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.templatename)
}
#if LANG_CXX11
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_templatename(::std::string&& value) {
  set_has_templatename();
  templatename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.templatename)
}
#endif
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_templatename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_templatename();
  templatename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.templatename)
}
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_templatename(const char* value, size_t size) {
  set_has_templatename();
  templatename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.templatename)
}
::std::string* CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::mutable_templatename() {
  set_has_templatename();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.templatename)
  return templatename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::release_templatename() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.templatename)
  clear_has_templatename();
  return templatename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_allocated_templatename(::std::string* templatename) {
  if (templatename != NULL) {
    set_has_templatename();
  } else {
    clear_has_templatename();
  }
  templatename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), templatename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.templatename)
}

// optional string serial_number = 4;
bool CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::has_serial_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_has_serial_number() {
  _has_bits_[0] |= 0x00000004u;
}
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
const ::std::string& CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::serial_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.serial_number)
  return serial_number_.GetNoArena();
}
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.serial_number)
}
#if LANG_CXX11
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.serial_number)
}
#endif
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.serial_number)
}
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.serial_number)
}
::std::string* CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::release_serial_number() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.serial_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPhysicalGoods_SteamControllerGetConfig_Response::kConfigurationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPhysicalGoods_SteamControllerGetConfig_Response::CPhysicalGoods_SteamControllerGetConfig_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response)
}
CPhysicalGoods_SteamControllerGetConfig_Response::CPhysicalGoods_SteamControllerGetConfig_Response(const CPhysicalGoods_SteamControllerGetConfig_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      configurations_(from.configurations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response)
}

void CPhysicalGoods_SteamControllerGetConfig_Response::SharedCtor() {
  _cached_size_ = 0;
}

CPhysicalGoods_SteamControllerGetConfig_Response::~CPhysicalGoods_SteamControllerGetConfig_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response)
  SharedDtor();
}

void CPhysicalGoods_SteamControllerGetConfig_Response::SharedDtor() {
}

void CPhysicalGoods_SteamControllerGetConfig_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPhysicalGoods_SteamControllerGetConfig_Response::descriptor() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPhysicalGoods_SteamControllerGetConfig_Response& CPhysicalGoods_SteamControllerGetConfig_Response::default_instance() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPhysicalGoods_SteamControllerGetConfig_Response* CPhysicalGoods_SteamControllerGetConfig_Response::New(::google::protobuf::Arena* arena) const {
  CPhysicalGoods_SteamControllerGetConfig_Response* n = new CPhysicalGoods_SteamControllerGetConfig_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPhysicalGoods_SteamControllerGetConfig_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response)
  configurations_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPhysicalGoods_SteamControllerGetConfig_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig configurations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_configurations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response)
  return false;
#undef DO_
}

void CPhysicalGoods_SteamControllerGetConfig_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig configurations = 1;
  for (unsigned int i = 0, n = this->configurations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->configurations(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response)
}

::google::protobuf::uint8* CPhysicalGoods_SteamControllerGetConfig_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig configurations = 1;
  for (unsigned int i = 0, n = this->configurations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->configurations(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response)
  return target;
}

size_t CPhysicalGoods_SteamControllerGetConfig_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig configurations = 1;
  {
    unsigned int count = this->configurations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->configurations(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPhysicalGoods_SteamControllerGetConfig_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPhysicalGoods_SteamControllerGetConfig_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPhysicalGoods_SteamControllerGetConfig_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response)
    MergeFrom(*source);
  }
}

void CPhysicalGoods_SteamControllerGetConfig_Response::MergeFrom(const CPhysicalGoods_SteamControllerGetConfig_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configurations_.MergeFrom(from.configurations_);
}

void CPhysicalGoods_SteamControllerGetConfig_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPhysicalGoods_SteamControllerGetConfig_Response::CopyFrom(const CPhysicalGoods_SteamControllerGetConfig_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPhysicalGoods_SteamControllerGetConfig_Response::IsInitialized() const {
  return true;
}

void CPhysicalGoods_SteamControllerGetConfig_Response::Swap(CPhysicalGoods_SteamControllerGetConfig_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPhysicalGoods_SteamControllerGetConfig_Response::InternalSwap(CPhysicalGoods_SteamControllerGetConfig_Response* other) {
  configurations_.InternalSwap(&other->configurations_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPhysicalGoods_SteamControllerGetConfig_Response::GetMetadata() const {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPhysicalGoods_SteamControllerGetConfig_Response

// repeated .proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig configurations = 1;
int CPhysicalGoods_SteamControllerGetConfig_Response::configurations_size() const {
  return configurations_.size();
}
void CPhysicalGoods_SteamControllerGetConfig_Response::clear_configurations() {
  configurations_.Clear();
}
const ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_ControllerConfig& CPhysicalGoods_SteamControllerGetConfig_Response::configurations(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response.configurations)
  return configurations_.Get(index);
}
::proto::steam::CPhysicalGoods_SteamControllerGetConfig_ControllerConfig* CPhysicalGoods_SteamControllerGetConfig_Response::mutable_configurations(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response.configurations)
  return configurations_.Mutable(index);
}
::proto::steam::CPhysicalGoods_SteamControllerGetConfig_ControllerConfig* CPhysicalGoods_SteamControllerGetConfig_Response::add_configurations() {
  // @@protoc_insertion_point(field_add:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response.configurations)
  return configurations_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_ControllerConfig >*
CPhysicalGoods_SteamControllerGetConfig_Response::mutable_configurations() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response.configurations)
  return &configurations_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_ControllerConfig >&
CPhysicalGoods_SteamControllerGetConfig_Response::configurations() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response.configurations)
  return configurations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPhysicalGoods_DeRegisterSteamController_Request::kSerialNumberFieldNumber;
const int CPhysicalGoods_DeRegisterSteamController_Request::kControllerCodeFieldNumber;
const int CPhysicalGoods_DeRegisterSteamController_Request::kAccountidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPhysicalGoods_DeRegisterSteamController_Request::CPhysicalGoods_DeRegisterSteamController_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request)
}
CPhysicalGoods_DeRegisterSteamController_Request::CPhysicalGoods_DeRegisterSteamController_Request(const CPhysicalGoods_DeRegisterSteamController_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_controller_code()) {
    controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
  }
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request)
}

void CPhysicalGoods_DeRegisterSteamController_Request::SharedCtor() {
  _cached_size_ = 0;
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_ = 0u;
}

CPhysicalGoods_DeRegisterSteamController_Request::~CPhysicalGoods_DeRegisterSteamController_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request)
  SharedDtor();
}

void CPhysicalGoods_DeRegisterSteamController_Request::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPhysicalGoods_DeRegisterSteamController_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPhysicalGoods_DeRegisterSteamController_Request::descriptor() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPhysicalGoods_DeRegisterSteamController_Request& CPhysicalGoods_DeRegisterSteamController_Request::default_instance() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPhysicalGoods_DeRegisterSteamController_Request* CPhysicalGoods_DeRegisterSteamController_Request::New(::google::protobuf::Arena* arena) const {
  CPhysicalGoods_DeRegisterSteamController_Request* n = new CPhysicalGoods_DeRegisterSteamController_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPhysicalGoods_DeRegisterSteamController_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_serial_number()) {
      GOOGLE_DCHECK(!serial_number_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serial_number_.UnsafeRawStringPointer())->clear();
    }
    if (has_controller_code()) {
      GOOGLE_DCHECK(!controller_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*controller_code_.UnsafeRawStringPointer())->clear();
    }
  }
  accountid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPhysicalGoods_DeRegisterSteamController_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), this->serial_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string controller_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_controller_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->controller_code().data(), this->controller_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.controller_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accountid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request)
  return false;
#undef DO_
}

void CPhysicalGoods_DeRegisterSteamController_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_number(), output);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), this->controller_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.controller_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->controller_code(), output);
  }

  // optional uint32 accountid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->accountid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request)
}

::google::protobuf::uint8* CPhysicalGoods_DeRegisterSteamController_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial_number(), target);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controller_code().data(), this->controller_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.controller_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->controller_code(), target);
  }

  // optional uint32 accountid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->accountid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request)
  return target;
}

size_t CPhysicalGoods_DeRegisterSteamController_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional string controller_code = 2;
    if (has_controller_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->controller_code());
    }

    // optional uint32 accountid = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPhysicalGoods_DeRegisterSteamController_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPhysicalGoods_DeRegisterSteamController_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPhysicalGoods_DeRegisterSteamController_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request)
    MergeFrom(*source);
  }
}

void CPhysicalGoods_DeRegisterSteamController_Request::MergeFrom(const CPhysicalGoods_DeRegisterSteamController_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_controller_code();
      controller_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      accountid_ = from.accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPhysicalGoods_DeRegisterSteamController_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPhysicalGoods_DeRegisterSteamController_Request::CopyFrom(const CPhysicalGoods_DeRegisterSteamController_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPhysicalGoods_DeRegisterSteamController_Request::IsInitialized() const {
  return true;
}

void CPhysicalGoods_DeRegisterSteamController_Request::Swap(CPhysicalGoods_DeRegisterSteamController_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPhysicalGoods_DeRegisterSteamController_Request::InternalSwap(CPhysicalGoods_DeRegisterSteamController_Request* other) {
  serial_number_.Swap(&other->serial_number_);
  controller_code_.Swap(&other->controller_code_);
  std::swap(accountid_, other->accountid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPhysicalGoods_DeRegisterSteamController_Request::GetMetadata() const {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPhysicalGoods_DeRegisterSteamController_Request

// optional string serial_number = 1;
bool CPhysicalGoods_DeRegisterSteamController_Request::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPhysicalGoods_DeRegisterSteamController_Request::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
void CPhysicalGoods_DeRegisterSteamController_Request::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPhysicalGoods_DeRegisterSteamController_Request::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
const ::std::string& CPhysicalGoods_DeRegisterSteamController_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.serial_number)
  return serial_number_.GetNoArena();
}
void CPhysicalGoods_DeRegisterSteamController_Request::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.serial_number)
}
#if LANG_CXX11
void CPhysicalGoods_DeRegisterSteamController_Request::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.serial_number)
}
#endif
void CPhysicalGoods_DeRegisterSteamController_Request::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.serial_number)
}
void CPhysicalGoods_DeRegisterSteamController_Request::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.serial_number)
}
::std::string* CPhysicalGoods_DeRegisterSteamController_Request::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPhysicalGoods_DeRegisterSteamController_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPhysicalGoods_DeRegisterSteamController_Request::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.serial_number)
}

// optional string controller_code = 2;
bool CPhysicalGoods_DeRegisterSteamController_Request::has_controller_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPhysicalGoods_DeRegisterSteamController_Request::set_has_controller_code() {
  _has_bits_[0] |= 0x00000002u;
}
void CPhysicalGoods_DeRegisterSteamController_Request::clear_has_controller_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPhysicalGoods_DeRegisterSteamController_Request::clear_controller_code() {
  controller_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_controller_code();
}
const ::std::string& CPhysicalGoods_DeRegisterSteamController_Request::controller_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.controller_code)
  return controller_code_.GetNoArena();
}
void CPhysicalGoods_DeRegisterSteamController_Request::set_controller_code(const ::std::string& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.controller_code)
}
#if LANG_CXX11
void CPhysicalGoods_DeRegisterSteamController_Request::set_controller_code(::std::string&& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.controller_code)
}
#endif
void CPhysicalGoods_DeRegisterSteamController_Request::set_controller_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.controller_code)
}
void CPhysicalGoods_DeRegisterSteamController_Request::set_controller_code(const char* value, size_t size) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.controller_code)
}
::std::string* CPhysicalGoods_DeRegisterSteamController_Request::mutable_controller_code() {
  set_has_controller_code();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.controller_code)
  return controller_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPhysicalGoods_DeRegisterSteamController_Request::release_controller_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.controller_code)
  clear_has_controller_code();
  return controller_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPhysicalGoods_DeRegisterSteamController_Request::set_allocated_controller_code(::std::string* controller_code) {
  if (controller_code != NULL) {
    set_has_controller_code();
  } else {
    clear_has_controller_code();
  }
  controller_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), controller_code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.controller_code)
}

// optional uint32 accountid = 3;
bool CPhysicalGoods_DeRegisterSteamController_Request::has_accountid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPhysicalGoods_DeRegisterSteamController_Request::set_has_accountid() {
  _has_bits_[0] |= 0x00000004u;
}
void CPhysicalGoods_DeRegisterSteamController_Request::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPhysicalGoods_DeRegisterSteamController_Request::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
::google::protobuf::uint32 CPhysicalGoods_DeRegisterSteamController_Request::accountid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.accountid)
  return accountid_;
}
void CPhysicalGoods_DeRegisterSteamController_Request::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.accountid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPhysicalGoods_DeRegisterSteamController_Response::CPhysicalGoods_DeRegisterSteamController_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPhysicalGoods_DeRegisterSteamController_Response)
}
CPhysicalGoods_DeRegisterSteamController_Response::CPhysicalGoods_DeRegisterSteamController_Response(const CPhysicalGoods_DeRegisterSteamController_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPhysicalGoods_DeRegisterSteamController_Response)
}

void CPhysicalGoods_DeRegisterSteamController_Response::SharedCtor() {
  _cached_size_ = 0;
}

CPhysicalGoods_DeRegisterSteamController_Response::~CPhysicalGoods_DeRegisterSteamController_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPhysicalGoods_DeRegisterSteamController_Response)
  SharedDtor();
}

void CPhysicalGoods_DeRegisterSteamController_Response::SharedDtor() {
}

void CPhysicalGoods_DeRegisterSteamController_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPhysicalGoods_DeRegisterSteamController_Response::descriptor() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPhysicalGoods_DeRegisterSteamController_Response& CPhysicalGoods_DeRegisterSteamController_Response::default_instance() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPhysicalGoods_DeRegisterSteamController_Response* CPhysicalGoods_DeRegisterSteamController_Response::New(::google::protobuf::Arena* arena) const {
  CPhysicalGoods_DeRegisterSteamController_Response* n = new CPhysicalGoods_DeRegisterSteamController_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPhysicalGoods_DeRegisterSteamController_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPhysicalGoods_DeRegisterSteamController_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPhysicalGoods_DeRegisterSteamController_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPhysicalGoods_DeRegisterSteamController_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPhysicalGoods_DeRegisterSteamController_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPhysicalGoods_DeRegisterSteamController_Response)
  return false;
#undef DO_
}

void CPhysicalGoods_DeRegisterSteamController_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPhysicalGoods_DeRegisterSteamController_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPhysicalGoods_DeRegisterSteamController_Response)
}

::google::protobuf::uint8* CPhysicalGoods_DeRegisterSteamController_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPhysicalGoods_DeRegisterSteamController_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPhysicalGoods_DeRegisterSteamController_Response)
  return target;
}

size_t CPhysicalGoods_DeRegisterSteamController_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPhysicalGoods_DeRegisterSteamController_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPhysicalGoods_DeRegisterSteamController_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPhysicalGoods_DeRegisterSteamController_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPhysicalGoods_DeRegisterSteamController_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPhysicalGoods_DeRegisterSteamController_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPhysicalGoods_DeRegisterSteamController_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPhysicalGoods_DeRegisterSteamController_Response)
    MergeFrom(*source);
  }
}

void CPhysicalGoods_DeRegisterSteamController_Response::MergeFrom(const CPhysicalGoods_DeRegisterSteamController_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPhysicalGoods_DeRegisterSteamController_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPhysicalGoods_DeRegisterSteamController_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPhysicalGoods_DeRegisterSteamController_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPhysicalGoods_DeRegisterSteamController_Response::CopyFrom(const CPhysicalGoods_DeRegisterSteamController_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPhysicalGoods_DeRegisterSteamController_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPhysicalGoods_DeRegisterSteamController_Response::IsInitialized() const {
  return true;
}

void CPhysicalGoods_DeRegisterSteamController_Response::Swap(CPhysicalGoods_DeRegisterSteamController_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPhysicalGoods_DeRegisterSteamController_Response::InternalSwap(CPhysicalGoods_DeRegisterSteamController_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPhysicalGoods_DeRegisterSteamController_Response::GetMetadata() const {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPhysicalGoods_DeRegisterSteamController_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPhysicalGoods_SetPersonalizationFile_Request::kSerialNumberFieldNumber;
const int CPhysicalGoods_SetPersonalizationFile_Request::kPublishedfileidFieldNumber;
const int CPhysicalGoods_SetPersonalizationFile_Request::kAccountidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPhysicalGoods_SetPersonalizationFile_Request::CPhysicalGoods_SetPersonalizationFile_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request)
}
CPhysicalGoods_SetPersonalizationFile_Request::CPhysicalGoods_SetPersonalizationFile_Request(const CPhysicalGoods_SetPersonalizationFile_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    reinterpret_cast<char*>(&accountid_) -
    reinterpret_cast<char*>(&publishedfileid_) + sizeof(accountid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request)
}

void CPhysicalGoods_SetPersonalizationFile_Request::SharedCtor() {
  _cached_size_ = 0;
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&publishedfileid_, 0, reinterpret_cast<char*>(&accountid_) -
    reinterpret_cast<char*>(&publishedfileid_) + sizeof(accountid_));
}

CPhysicalGoods_SetPersonalizationFile_Request::~CPhysicalGoods_SetPersonalizationFile_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request)
  SharedDtor();
}

void CPhysicalGoods_SetPersonalizationFile_Request::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPhysicalGoods_SetPersonalizationFile_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPhysicalGoods_SetPersonalizationFile_Request::descriptor() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPhysicalGoods_SetPersonalizationFile_Request& CPhysicalGoods_SetPersonalizationFile_Request::default_instance() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPhysicalGoods_SetPersonalizationFile_Request* CPhysicalGoods_SetPersonalizationFile_Request::New(::google::protobuf::Arena* arena) const {
  CPhysicalGoods_SetPersonalizationFile_Request* n = new CPhysicalGoods_SetPersonalizationFile_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPhysicalGoods_SetPersonalizationFile_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request)
  if (has_serial_number()) {
    GOOGLE_DCHECK(!serial_number_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*serial_number_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&publishedfileid_, 0, reinterpret_cast<char*>(&accountid_) -
      reinterpret_cast<char*>(&publishedfileid_) + sizeof(accountid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPhysicalGoods_SetPersonalizationFile_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), this->serial_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 publishedfileid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_publishedfileid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accountid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request)
  return false;
#undef DO_
}

void CPhysicalGoods_SetPersonalizationFile_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_number(), output);
  }

  // optional uint64 publishedfileid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->publishedfileid(), output);
  }

  // optional uint32 accountid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->accountid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request)
}

::google::protobuf::uint8* CPhysicalGoods_SetPersonalizationFile_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial_number(), target);
  }

  // optional uint64 publishedfileid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->publishedfileid(), target);
  }

  // optional uint32 accountid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->accountid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request)
  return target;
}

size_t CPhysicalGoods_SetPersonalizationFile_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional uint64 publishedfileid = 2;
    if (has_publishedfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

    // optional uint32 accountid = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPhysicalGoods_SetPersonalizationFile_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPhysicalGoods_SetPersonalizationFile_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPhysicalGoods_SetPersonalizationFile_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request)
    MergeFrom(*source);
  }
}

void CPhysicalGoods_SetPersonalizationFile_Request::MergeFrom(const CPhysicalGoods_SetPersonalizationFile_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000004u) {
      accountid_ = from.accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPhysicalGoods_SetPersonalizationFile_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPhysicalGoods_SetPersonalizationFile_Request::CopyFrom(const CPhysicalGoods_SetPersonalizationFile_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPhysicalGoods_SetPersonalizationFile_Request::IsInitialized() const {
  return true;
}

void CPhysicalGoods_SetPersonalizationFile_Request::Swap(CPhysicalGoods_SetPersonalizationFile_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPhysicalGoods_SetPersonalizationFile_Request::InternalSwap(CPhysicalGoods_SetPersonalizationFile_Request* other) {
  serial_number_.Swap(&other->serial_number_);
  std::swap(publishedfileid_, other->publishedfileid_);
  std::swap(accountid_, other->accountid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPhysicalGoods_SetPersonalizationFile_Request::GetMetadata() const {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPhysicalGoods_SetPersonalizationFile_Request

// optional string serial_number = 1;
bool CPhysicalGoods_SetPersonalizationFile_Request::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPhysicalGoods_SetPersonalizationFile_Request::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
void CPhysicalGoods_SetPersonalizationFile_Request::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPhysicalGoods_SetPersonalizationFile_Request::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
const ::std::string& CPhysicalGoods_SetPersonalizationFile_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.serial_number)
  return serial_number_.GetNoArena();
}
void CPhysicalGoods_SetPersonalizationFile_Request::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.serial_number)
}
#if LANG_CXX11
void CPhysicalGoods_SetPersonalizationFile_Request::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.serial_number)
}
#endif
void CPhysicalGoods_SetPersonalizationFile_Request::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.serial_number)
}
void CPhysicalGoods_SetPersonalizationFile_Request::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.serial_number)
}
::std::string* CPhysicalGoods_SetPersonalizationFile_Request::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPhysicalGoods_SetPersonalizationFile_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPhysicalGoods_SetPersonalizationFile_Request::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.serial_number)
}

// optional uint64 publishedfileid = 2;
bool CPhysicalGoods_SetPersonalizationFile_Request::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPhysicalGoods_SetPersonalizationFile_Request::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000002u;
}
void CPhysicalGoods_SetPersonalizationFile_Request::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPhysicalGoods_SetPersonalizationFile_Request::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
::google::protobuf::uint64 CPhysicalGoods_SetPersonalizationFile_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.publishedfileid)
  return publishedfileid_;
}
void CPhysicalGoods_SetPersonalizationFile_Request::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.publishedfileid)
}

// optional uint32 accountid = 3;
bool CPhysicalGoods_SetPersonalizationFile_Request::has_accountid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPhysicalGoods_SetPersonalizationFile_Request::set_has_accountid() {
  _has_bits_[0] |= 0x00000004u;
}
void CPhysicalGoods_SetPersonalizationFile_Request::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPhysicalGoods_SetPersonalizationFile_Request::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
::google::protobuf::uint32 CPhysicalGoods_SetPersonalizationFile_Request::accountid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.accountid)
  return accountid_;
}
void CPhysicalGoods_SetPersonalizationFile_Request::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.accountid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPhysicalGoods_SetPersonalizationFile_Response::CPhysicalGoods_SetPersonalizationFile_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPhysicalGoods_SetPersonalizationFile_Response)
}
CPhysicalGoods_SetPersonalizationFile_Response::CPhysicalGoods_SetPersonalizationFile_Response(const CPhysicalGoods_SetPersonalizationFile_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPhysicalGoods_SetPersonalizationFile_Response)
}

void CPhysicalGoods_SetPersonalizationFile_Response::SharedCtor() {
  _cached_size_ = 0;
}

CPhysicalGoods_SetPersonalizationFile_Response::~CPhysicalGoods_SetPersonalizationFile_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPhysicalGoods_SetPersonalizationFile_Response)
  SharedDtor();
}

void CPhysicalGoods_SetPersonalizationFile_Response::SharedDtor() {
}

void CPhysicalGoods_SetPersonalizationFile_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPhysicalGoods_SetPersonalizationFile_Response::descriptor() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPhysicalGoods_SetPersonalizationFile_Response& CPhysicalGoods_SetPersonalizationFile_Response::default_instance() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPhysicalGoods_SetPersonalizationFile_Response* CPhysicalGoods_SetPersonalizationFile_Response::New(::google::protobuf::Arena* arena) const {
  CPhysicalGoods_SetPersonalizationFile_Response* n = new CPhysicalGoods_SetPersonalizationFile_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPhysicalGoods_SetPersonalizationFile_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPhysicalGoods_SetPersonalizationFile_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPhysicalGoods_SetPersonalizationFile_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPhysicalGoods_SetPersonalizationFile_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPhysicalGoods_SetPersonalizationFile_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPhysicalGoods_SetPersonalizationFile_Response)
  return false;
#undef DO_
}

void CPhysicalGoods_SetPersonalizationFile_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPhysicalGoods_SetPersonalizationFile_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPhysicalGoods_SetPersonalizationFile_Response)
}

::google::protobuf::uint8* CPhysicalGoods_SetPersonalizationFile_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPhysicalGoods_SetPersonalizationFile_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPhysicalGoods_SetPersonalizationFile_Response)
  return target;
}

size_t CPhysicalGoods_SetPersonalizationFile_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPhysicalGoods_SetPersonalizationFile_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPhysicalGoods_SetPersonalizationFile_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPhysicalGoods_SetPersonalizationFile_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPhysicalGoods_SetPersonalizationFile_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPhysicalGoods_SetPersonalizationFile_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPhysicalGoods_SetPersonalizationFile_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPhysicalGoods_SetPersonalizationFile_Response)
    MergeFrom(*source);
  }
}

void CPhysicalGoods_SetPersonalizationFile_Response::MergeFrom(const CPhysicalGoods_SetPersonalizationFile_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPhysicalGoods_SetPersonalizationFile_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPhysicalGoods_SetPersonalizationFile_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPhysicalGoods_SetPersonalizationFile_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPhysicalGoods_SetPersonalizationFile_Response::CopyFrom(const CPhysicalGoods_SetPersonalizationFile_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPhysicalGoods_SetPersonalizationFile_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPhysicalGoods_SetPersonalizationFile_Response::IsInitialized() const {
  return true;
}

void CPhysicalGoods_SetPersonalizationFile_Response::Swap(CPhysicalGoods_SetPersonalizationFile_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPhysicalGoods_SetPersonalizationFile_Response::InternalSwap(CPhysicalGoods_SetPersonalizationFile_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPhysicalGoods_SetPersonalizationFile_Response::GetMetadata() const {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPhysicalGoods_SetPersonalizationFile_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPhysicalGoods_GetPersonalizationFile_Request::kSerialNumberFieldNumber;
const int CPhysicalGoods_GetPersonalizationFile_Request::kAccountidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPhysicalGoods_GetPersonalizationFile_Request::CPhysicalGoods_GetPersonalizationFile_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request)
}
CPhysicalGoods_GetPersonalizationFile_Request::CPhysicalGoods_GetPersonalizationFile_Request(const CPhysicalGoods_GetPersonalizationFile_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request)
}

void CPhysicalGoods_GetPersonalizationFile_Request::SharedCtor() {
  _cached_size_ = 0;
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_ = 0u;
}

CPhysicalGoods_GetPersonalizationFile_Request::~CPhysicalGoods_GetPersonalizationFile_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request)
  SharedDtor();
}

void CPhysicalGoods_GetPersonalizationFile_Request::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPhysicalGoods_GetPersonalizationFile_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPhysicalGoods_GetPersonalizationFile_Request::descriptor() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPhysicalGoods_GetPersonalizationFile_Request& CPhysicalGoods_GetPersonalizationFile_Request::default_instance() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPhysicalGoods_GetPersonalizationFile_Request* CPhysicalGoods_GetPersonalizationFile_Request::New(::google::protobuf::Arena* arena) const {
  CPhysicalGoods_GetPersonalizationFile_Request* n = new CPhysicalGoods_GetPersonalizationFile_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPhysicalGoods_GetPersonalizationFile_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request)
  if (has_serial_number()) {
    GOOGLE_DCHECK(!serial_number_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*serial_number_.UnsafeRawStringPointer())->clear();
  }
  accountid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPhysicalGoods_GetPersonalizationFile_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), this->serial_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPhysicalGoods_GetPersonalizationFile_Request.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accountid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request)
  return false;
#undef DO_
}

void CPhysicalGoods_GetPersonalizationFile_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_GetPersonalizationFile_Request.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_number(), output);
  }

  // optional uint32 accountid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request)
}

::google::protobuf::uint8* CPhysicalGoods_GetPersonalizationFile_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPhysicalGoods_GetPersonalizationFile_Request.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial_number(), target);
  }

  // optional uint32 accountid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request)
  return target;
}

size_t CPhysicalGoods_GetPersonalizationFile_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional uint32 accountid = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPhysicalGoods_GetPersonalizationFile_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPhysicalGoods_GetPersonalizationFile_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPhysicalGoods_GetPersonalizationFile_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request)
    MergeFrom(*source);
  }
}

void CPhysicalGoods_GetPersonalizationFile_Request::MergeFrom(const CPhysicalGoods_GetPersonalizationFile_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPhysicalGoods_GetPersonalizationFile_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPhysicalGoods_GetPersonalizationFile_Request::CopyFrom(const CPhysicalGoods_GetPersonalizationFile_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPhysicalGoods_GetPersonalizationFile_Request::IsInitialized() const {
  return true;
}

void CPhysicalGoods_GetPersonalizationFile_Request::Swap(CPhysicalGoods_GetPersonalizationFile_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPhysicalGoods_GetPersonalizationFile_Request::InternalSwap(CPhysicalGoods_GetPersonalizationFile_Request* other) {
  serial_number_.Swap(&other->serial_number_);
  std::swap(accountid_, other->accountid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPhysicalGoods_GetPersonalizationFile_Request::GetMetadata() const {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPhysicalGoods_GetPersonalizationFile_Request

// optional string serial_number = 1;
bool CPhysicalGoods_GetPersonalizationFile_Request::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPhysicalGoods_GetPersonalizationFile_Request::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
void CPhysicalGoods_GetPersonalizationFile_Request::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPhysicalGoods_GetPersonalizationFile_Request::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
const ::std::string& CPhysicalGoods_GetPersonalizationFile_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request.serial_number)
  return serial_number_.GetNoArena();
}
void CPhysicalGoods_GetPersonalizationFile_Request::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request.serial_number)
}
#if LANG_CXX11
void CPhysicalGoods_GetPersonalizationFile_Request::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request.serial_number)
}
#endif
void CPhysicalGoods_GetPersonalizationFile_Request::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request.serial_number)
}
void CPhysicalGoods_GetPersonalizationFile_Request::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request.serial_number)
}
::std::string* CPhysicalGoods_GetPersonalizationFile_Request::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPhysicalGoods_GetPersonalizationFile_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPhysicalGoods_GetPersonalizationFile_Request::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request.serial_number)
}

// optional uint32 accountid = 2;
bool CPhysicalGoods_GetPersonalizationFile_Request::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPhysicalGoods_GetPersonalizationFile_Request::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
void CPhysicalGoods_GetPersonalizationFile_Request::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPhysicalGoods_GetPersonalizationFile_Request::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
::google::protobuf::uint32 CPhysicalGoods_GetPersonalizationFile_Request::accountid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request.accountid)
  return accountid_;
}
void CPhysicalGoods_GetPersonalizationFile_Request::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request.accountid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPhysicalGoods_GetPersonalizationFile_Response::kPublishedfileidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPhysicalGoods_GetPersonalizationFile_Response::CPhysicalGoods_GetPersonalizationFile_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response)
}
CPhysicalGoods_GetPersonalizationFile_Response::CPhysicalGoods_GetPersonalizationFile_Response(const CPhysicalGoods_GetPersonalizationFile_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  publishedfileid_ = from.publishedfileid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response)
}

void CPhysicalGoods_GetPersonalizationFile_Response::SharedCtor() {
  _cached_size_ = 0;
  publishedfileid_ = GOOGLE_ULONGLONG(0);
}

CPhysicalGoods_GetPersonalizationFile_Response::~CPhysicalGoods_GetPersonalizationFile_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response)
  SharedDtor();
}

void CPhysicalGoods_GetPersonalizationFile_Response::SharedDtor() {
}

void CPhysicalGoods_GetPersonalizationFile_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPhysicalGoods_GetPersonalizationFile_Response::descriptor() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPhysicalGoods_GetPersonalizationFile_Response& CPhysicalGoods_GetPersonalizationFile_Response::default_instance() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPhysicalGoods_GetPersonalizationFile_Response* CPhysicalGoods_GetPersonalizationFile_Response::New(::google::protobuf::Arena* arena) const {
  CPhysicalGoods_GetPersonalizationFile_Response* n = new CPhysicalGoods_GetPersonalizationFile_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPhysicalGoods_GetPersonalizationFile_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response)
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPhysicalGoods_GetPersonalizationFile_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 publishedfileid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_publishedfileid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response)
  return false;
#undef DO_
}

void CPhysicalGoods_GetPersonalizationFile_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->publishedfileid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response)
}

::google::protobuf::uint8* CPhysicalGoods_GetPersonalizationFile_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->publishedfileid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response)
  return target;
}

size_t CPhysicalGoods_GetPersonalizationFile_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint64 publishedfileid = 1;
  if (has_publishedfileid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->publishedfileid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPhysicalGoods_GetPersonalizationFile_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPhysicalGoods_GetPersonalizationFile_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPhysicalGoods_GetPersonalizationFile_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response)
    MergeFrom(*source);
  }
}

void CPhysicalGoods_GetPersonalizationFile_Response::MergeFrom(const CPhysicalGoods_GetPersonalizationFile_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_publishedfileid()) {
    set_publishedfileid(from.publishedfileid());
  }
}

void CPhysicalGoods_GetPersonalizationFile_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPhysicalGoods_GetPersonalizationFile_Response::CopyFrom(const CPhysicalGoods_GetPersonalizationFile_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPhysicalGoods_GetPersonalizationFile_Response::IsInitialized() const {
  return true;
}

void CPhysicalGoods_GetPersonalizationFile_Response::Swap(CPhysicalGoods_GetPersonalizationFile_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPhysicalGoods_GetPersonalizationFile_Response::InternalSwap(CPhysicalGoods_GetPersonalizationFile_Response* other) {
  std::swap(publishedfileid_, other->publishedfileid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPhysicalGoods_GetPersonalizationFile_Response::GetMetadata() const {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPhysicalGoods_GetPersonalizationFile_Response

// optional uint64 publishedfileid = 1;
bool CPhysicalGoods_GetPersonalizationFile_Response::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPhysicalGoods_GetPersonalizationFile_Response::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000001u;
}
void CPhysicalGoods_GetPersonalizationFile_Response::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPhysicalGoods_GetPersonalizationFile_Response::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
::google::protobuf::uint64 CPhysicalGoods_GetPersonalizationFile_Response::publishedfileid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response.publishedfileid)
  return publishedfileid_;
}
void CPhysicalGoods_GetPersonalizationFile_Response::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response.publishedfileid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

PhysicalGoods::~PhysicalGoods() {}

const ::google::protobuf::ServiceDescriptor* PhysicalGoods::descriptor() {
  protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* PhysicalGoods::GetDescriptor() {
  return descriptor();
}

void PhysicalGoods::RegisterSteamController(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPhysicalGoods_RegisterSteamController_Request*,
                         ::proto::steam::CPhysicalGoods_RegisterSteamController_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RegisterSteamController() not implemented.");
  done->Run();
}

void PhysicalGoods::CompleteSteamControllerRegistration(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPhysicalGoods_CompleteSteamControllerRegistration_Request*,
                         ::proto::steam::CPhysicalGoods_CompleteSteamControllerRegistration_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CompleteSteamControllerRegistration() not implemented.");
  done->Run();
}

void PhysicalGoods::QueryAccountsRegisteredToController(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Request*,
                         ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryAccountsRegisteredToController() not implemented.");
  done->Run();
}

void PhysicalGoods::SetDesiredControllerConfigForApp(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_Request*,
                         ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetDesiredControllerConfigForApp() not implemented.");
  done->Run();
}

void PhysicalGoods::GetDesiredControllerConfigForApp(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_Request*,
                         ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetDesiredControllerConfigForApp() not implemented.");
  done->Run();
}

void PhysicalGoods::DeRegisterSteamController(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPhysicalGoods_DeRegisterSteamController_Request*,
                         ::proto::steam::CPhysicalGoods_DeRegisterSteamController_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeRegisterSteamController() not implemented.");
  done->Run();
}

void PhysicalGoods::SetControllerPersonalizationFile(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPhysicalGoods_SetPersonalizationFile_Request*,
                         ::proto::steam::CPhysicalGoods_SetPersonalizationFile_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetControllerPersonalizationFile() not implemented.");
  done->Run();
}

void PhysicalGoods::GetControllerPersonalizationFile(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPhysicalGoods_GetPersonalizationFile_Request*,
                         ::proto::steam::CPhysicalGoods_GetPersonalizationFile_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetControllerPersonalizationFile() not implemented.");
  done->Run();
}

void PhysicalGoods::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      RegisterSteamController(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPhysicalGoods_RegisterSteamController_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPhysicalGoods_RegisterSteamController_Response*>(response),
             done);
      break;
    case 1:
      CompleteSteamControllerRegistration(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPhysicalGoods_CompleteSteamControllerRegistration_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPhysicalGoods_CompleteSteamControllerRegistration_Response*>(response),
             done);
      break;
    case 2:
      QueryAccountsRegisteredToController(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Response*>(response),
             done);
      break;
    case 3:
      SetDesiredControllerConfigForApp(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_Response*>(response),
             done);
      break;
    case 4:
      GetDesiredControllerConfigForApp(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_Response*>(response),
             done);
      break;
    case 5:
      DeRegisterSteamController(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPhysicalGoods_DeRegisterSteamController_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPhysicalGoods_DeRegisterSteamController_Response*>(response),
             done);
      break;
    case 6:
      SetControllerPersonalizationFile(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPhysicalGoods_SetPersonalizationFile_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPhysicalGoods_SetPersonalizationFile_Response*>(response),
             done);
      break;
    case 7:
      GetControllerPersonalizationFile(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPhysicalGoods_GetPersonalizationFile_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPhysicalGoods_GetPersonalizationFile_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& PhysicalGoods::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CPhysicalGoods_RegisterSteamController_Request::default_instance();
    case 1:
      return ::proto::steam::CPhysicalGoods_CompleteSteamControllerRegistration_Request::default_instance();
    case 2:
      return ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::default_instance();
    case 3:
      return ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_Request::default_instance();
    case 4:
      return ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_Request::default_instance();
    case 5:
      return ::proto::steam::CPhysicalGoods_DeRegisterSteamController_Request::default_instance();
    case 6:
      return ::proto::steam::CPhysicalGoods_SetPersonalizationFile_Request::default_instance();
    case 7:
      return ::proto::steam::CPhysicalGoods_GetPersonalizationFile_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& PhysicalGoods::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CPhysicalGoods_RegisterSteamController_Response::default_instance();
    case 1:
      return ::proto::steam::CPhysicalGoods_CompleteSteamControllerRegistration_Response::default_instance();
    case 2:
      return ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::default_instance();
    case 3:
      return ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_Response::default_instance();
    case 4:
      return ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_Response::default_instance();
    case 5:
      return ::proto::steam::CPhysicalGoods_DeRegisterSteamController_Response::default_instance();
    case 6:
      return ::proto::steam::CPhysicalGoods_SetPersonalizationFile_Response::default_instance();
    case 7:
      return ::proto::steam::CPhysicalGoods_GetPersonalizationFile_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

PhysicalGoods_Stub::PhysicalGoods_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
PhysicalGoods_Stub::PhysicalGoods_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
PhysicalGoods_Stub::~PhysicalGoods_Stub() {
  if (owns_channel_) delete channel_;
}

void PhysicalGoods_Stub::RegisterSteamController(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPhysicalGoods_RegisterSteamController_Request* request,
                              ::proto::steam::CPhysicalGoods_RegisterSteamController_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void PhysicalGoods_Stub::CompleteSteamControllerRegistration(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPhysicalGoods_CompleteSteamControllerRegistration_Request* request,
                              ::proto::steam::CPhysicalGoods_CompleteSteamControllerRegistration_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void PhysicalGoods_Stub::QueryAccountsRegisteredToController(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Request* request,
                              ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void PhysicalGoods_Stub::SetDesiredControllerConfigForApp(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_Request* request,
                              ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void PhysicalGoods_Stub::GetDesiredControllerConfigForApp(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_Request* request,
                              ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void PhysicalGoods_Stub::DeRegisterSteamController(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPhysicalGoods_DeRegisterSteamController_Request* request,
                              ::proto::steam::CPhysicalGoods_DeRegisterSteamController_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void PhysicalGoods_Stub::SetControllerPersonalizationFile(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPhysicalGoods_SetPersonalizationFile_Request* request,
                              ::proto::steam::CPhysicalGoods_SetPersonalizationFile_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void PhysicalGoods_Stub::GetControllerPersonalizationFile(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPhysicalGoods_GetPersonalizationFile_Request* request,
                              ::proto::steam::CPhysicalGoods_GetPersonalizationFile_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
