// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_secrets.steamclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_secrets.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CKeyEscrow_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CKeyEscrow_Request> {
} _CKeyEscrow_Request_default_instance_;
class CKeyEscrow_TicketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CKeyEscrow_Ticket> {
} _CKeyEscrow_Ticket_default_instance_;
class CKeyEscrow_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CKeyEscrow_Response> {
} _CKeyEscrow_Response_default_instance_;

namespace protobuf_steammessages_5fsecrets_2esteamclient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CKeyEscrow_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CKeyEscrow_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CKeyEscrow_Request, rsa_oaep_sha_ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CKeyEscrow_Request, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CKeyEscrow_Request, usage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CKeyEscrow_Request, device_name_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CKeyEscrow_Ticket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CKeyEscrow_Ticket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CKeyEscrow_Ticket, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CKeyEscrow_Ticket, identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CKeyEscrow_Ticket, payload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CKeyEscrow_Ticket, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CKeyEscrow_Ticket, usage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CKeyEscrow_Ticket, device_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CKeyEscrow_Ticket, device_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CKeyEscrow_Ticket, device_serial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CKeyEscrow_Ticket, device_provisioning_id_),
  0,
  5,
  1,
  6,
  7,
  2,
  3,
  4,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CKeyEscrow_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CKeyEscrow_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CKeyEscrow_Response, ticket_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(CKeyEscrow_Request)},
  { 13, 27, sizeof(CKeyEscrow_Ticket)},
  { 36, 42, sizeof(CKeyEscrow_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CKeyEscrow_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CKeyEscrow_Ticket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CKeyEscrow_Response_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_secrets.steamclient.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _CKeyEscrow_Request_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CKeyEscrow_Ticket_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CKeyEscrow_Response_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::InitDefaults();
  _CKeyEscrow_Request_default_instance_.DefaultConstruct();
  _CKeyEscrow_Ticket_default_instance_.DefaultConstruct();
  _CKeyEscrow_Response_default_instance_.DefaultConstruct();
  _CKeyEscrow_Response_default_instance_.get_mutable()->ticket_ = const_cast< ::proto::steam::CKeyEscrow_Ticket*>(
      ::proto::steam::CKeyEscrow_Ticket::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\'steammessages_secrets.steamclient.prot"
      "o\022\013proto.steam\032,steammessages_unified_ba"
      "se.steamclient.proto\"\247\001\n\022CKeyEscrow_Requ"
      "est\022\033\n\023rsa_oaep_sha_ticket\030\001 \001(\014\022\020\n\010pass"
      "word\030\002 \001(\014\022M\n\005usage\030\003 \001(\0162\034.proto.steam."
      "EKeyEscrowUsage: k_EKeyEscrowUsageStream"
      "ingDevice\022\023\n\013device_name\030\004 \001(\t\"\216\002\n\021CKeyE"
      "scrow_Ticket\022\020\n\010password\030\001 \001(\014\022\022\n\nidenti"
      "fier\030\002 \001(\004\022\017\n\007payload\030\003 \001(\014\022\021\n\ttimestamp"
      "\030\004 \001(\r\022M\n\005usage\030\005 \001(\0162\034.proto.steam.EKey"
      "EscrowUsage: k_EKeyEscrowUsageStreamingD"
      "evice\022\023\n\013device_name\030\006 \001(\t\022\024\n\014device_mod"
      "el\030\007 \001(\t\022\025\n\rdevice_serial\030\010 \001(\t\022\036\n\026devic"
      "e_provisioning_id\030\t \001(\r\"E\n\023CKeyEscrow_Re"
      "sponse\022.\n\006ticket\030\001 \001(\0132\036.proto.steam.CKe"
      "yEscrow_Ticket*7\n\017EKeyEscrowUsage\022$\n k_E"
      "KeyEscrowUsageStreamingDevice\020\0002\340\001\n\007Secr"
      "ets\022\230\001\n\tKeyEscrow\022\037.proto.steam.CKeyEscr"
      "ow_Request\032 .proto.steam.CKeyEscrow_Resp"
      "onse\"H\202\265\030DService to perform authenticat"
      "ed key-exchange involving Steam Client\032:"
      "\202\265\0306Service for accessing credentials an"
      "d guarding secretsB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 903);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_secrets.steamclient.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fsecrets_2esteamclient_2eproto

const ::google::protobuf::EnumDescriptor* EKeyEscrowUsage_descriptor() {
  protobuf_steammessages_5fsecrets_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsecrets_2esteamclient_2eproto::file_level_enum_descriptors[0];
}
bool EKeyEscrowUsage_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CKeyEscrow_Request::kRsaOaepShaTicketFieldNumber;
const int CKeyEscrow_Request::kPasswordFieldNumber;
const int CKeyEscrow_Request::kUsageFieldNumber;
const int CKeyEscrow_Request::kDeviceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CKeyEscrow_Request::CKeyEscrow_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsecrets_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CKeyEscrow_Request)
}
CKeyEscrow_Request::CKeyEscrow_Request(const CKeyEscrow_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rsa_oaep_sha_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rsa_oaep_sha_ticket()) {
    rsa_oaep_sha_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsa_oaep_sha_ticket_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_name()) {
    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  usage_ = from.usage_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CKeyEscrow_Request)
}

void CKeyEscrow_Request::SharedCtor() {
  _cached_size_ = 0;
  rsa_oaep_sha_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usage_ = 0;
}

CKeyEscrow_Request::~CKeyEscrow_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CKeyEscrow_Request)
  SharedDtor();
}

void CKeyEscrow_Request::SharedDtor() {
  rsa_oaep_sha_ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CKeyEscrow_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CKeyEscrow_Request::descriptor() {
  protobuf_steammessages_5fsecrets_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsecrets_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CKeyEscrow_Request& CKeyEscrow_Request::default_instance() {
  protobuf_steammessages_5fsecrets_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CKeyEscrow_Request* CKeyEscrow_Request::New(::google::protobuf::Arena* arena) const {
  CKeyEscrow_Request* n = new CKeyEscrow_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CKeyEscrow_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CKeyEscrow_Request)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_rsa_oaep_sha_ticket()) {
      GOOGLE_DCHECK(!rsa_oaep_sha_ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rsa_oaep_sha_ticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_password()) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
    if (has_device_name()) {
      GOOGLE_DCHECK(!device_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_name_.UnsafeRawStringPointer())->clear();
    }
  }
  usage_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CKeyEscrow_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CKeyEscrow_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes rsa_oaep_sha_ticket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rsa_oaep_sha_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.EKeyEscrowUsage usage = 3 [default = k_EKeyEscrowUsageStreamingDevice];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::EKeyEscrowUsage_IsValid(value)) {
            set_usage(static_cast< ::proto::steam::EKeyEscrowUsage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CKeyEscrow_Request.device_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CKeyEscrow_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CKeyEscrow_Request)
  return false;
#undef DO_
}

void CKeyEscrow_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CKeyEscrow_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes rsa_oaep_sha_ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->rsa_oaep_sha_ticket(), output);
  }

  // optional bytes password = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->password(), output);
  }

  // optional .proto.steam.EKeyEscrowUsage usage = 3 [default = k_EKeyEscrowUsageStreamingDevice];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->usage(), output);
  }

  // optional string device_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CKeyEscrow_Request.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->device_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CKeyEscrow_Request)
}

::google::protobuf::uint8* CKeyEscrow_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CKeyEscrow_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes rsa_oaep_sha_ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->rsa_oaep_sha_ticket(), target);
  }

  // optional bytes password = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  // optional .proto.steam.EKeyEscrowUsage usage = 3 [default = k_EKeyEscrowUsageStreamingDevice];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->usage(), target);
  }

  // optional string device_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CKeyEscrow_Request.device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->device_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CKeyEscrow_Request)
  return target;
}

size_t CKeyEscrow_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CKeyEscrow_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes rsa_oaep_sha_ticket = 1;
    if (has_rsa_oaep_sha_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rsa_oaep_sha_ticket());
    }

    // optional bytes password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

    // optional string device_name = 4;
    if (has_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }

    // optional .proto.steam.EKeyEscrowUsage usage = 3 [default = k_EKeyEscrowUsageStreamingDevice];
    if (has_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->usage());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CKeyEscrow_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CKeyEscrow_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CKeyEscrow_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CKeyEscrow_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CKeyEscrow_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CKeyEscrow_Request)
    MergeFrom(*source);
  }
}

void CKeyEscrow_Request::MergeFrom(const CKeyEscrow_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CKeyEscrow_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rsa_oaep_sha_ticket();
      rsa_oaep_sha_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsa_oaep_sha_ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_device_name();
      device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      usage_ = from.usage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CKeyEscrow_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CKeyEscrow_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CKeyEscrow_Request::CopyFrom(const CKeyEscrow_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CKeyEscrow_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CKeyEscrow_Request::IsInitialized() const {
  return true;
}

void CKeyEscrow_Request::Swap(CKeyEscrow_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CKeyEscrow_Request::InternalSwap(CKeyEscrow_Request* other) {
  rsa_oaep_sha_ticket_.Swap(&other->rsa_oaep_sha_ticket_);
  password_.Swap(&other->password_);
  device_name_.Swap(&other->device_name_);
  std::swap(usage_, other->usage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CKeyEscrow_Request::GetMetadata() const {
  protobuf_steammessages_5fsecrets_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsecrets_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CKeyEscrow_Request

// optional bytes rsa_oaep_sha_ticket = 1;
bool CKeyEscrow_Request::has_rsa_oaep_sha_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CKeyEscrow_Request::set_has_rsa_oaep_sha_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
void CKeyEscrow_Request::clear_has_rsa_oaep_sha_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
void CKeyEscrow_Request::clear_rsa_oaep_sha_ticket() {
  rsa_oaep_sha_ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rsa_oaep_sha_ticket();
}
const ::std::string& CKeyEscrow_Request::rsa_oaep_sha_ticket() const {
  // @@protoc_insertion_point(field_get:proto.steam.CKeyEscrow_Request.rsa_oaep_sha_ticket)
  return rsa_oaep_sha_ticket_.GetNoArena();
}
void CKeyEscrow_Request::set_rsa_oaep_sha_ticket(const ::std::string& value) {
  set_has_rsa_oaep_sha_ticket();
  rsa_oaep_sha_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CKeyEscrow_Request.rsa_oaep_sha_ticket)
}
#if LANG_CXX11
void CKeyEscrow_Request::set_rsa_oaep_sha_ticket(::std::string&& value) {
  set_has_rsa_oaep_sha_ticket();
  rsa_oaep_sha_ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CKeyEscrow_Request.rsa_oaep_sha_ticket)
}
#endif
void CKeyEscrow_Request::set_rsa_oaep_sha_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rsa_oaep_sha_ticket();
  rsa_oaep_sha_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CKeyEscrow_Request.rsa_oaep_sha_ticket)
}
void CKeyEscrow_Request::set_rsa_oaep_sha_ticket(const void* value, size_t size) {
  set_has_rsa_oaep_sha_ticket();
  rsa_oaep_sha_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CKeyEscrow_Request.rsa_oaep_sha_ticket)
}
::std::string* CKeyEscrow_Request::mutable_rsa_oaep_sha_ticket() {
  set_has_rsa_oaep_sha_ticket();
  // @@protoc_insertion_point(field_mutable:proto.steam.CKeyEscrow_Request.rsa_oaep_sha_ticket)
  return rsa_oaep_sha_ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CKeyEscrow_Request::release_rsa_oaep_sha_ticket() {
  // @@protoc_insertion_point(field_release:proto.steam.CKeyEscrow_Request.rsa_oaep_sha_ticket)
  clear_has_rsa_oaep_sha_ticket();
  return rsa_oaep_sha_ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CKeyEscrow_Request::set_allocated_rsa_oaep_sha_ticket(::std::string* rsa_oaep_sha_ticket) {
  if (rsa_oaep_sha_ticket != NULL) {
    set_has_rsa_oaep_sha_ticket();
  } else {
    clear_has_rsa_oaep_sha_ticket();
  }
  rsa_oaep_sha_ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rsa_oaep_sha_ticket);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CKeyEscrow_Request.rsa_oaep_sha_ticket)
}

// optional bytes password = 2;
bool CKeyEscrow_Request::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CKeyEscrow_Request::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void CKeyEscrow_Request::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void CKeyEscrow_Request::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& CKeyEscrow_Request::password() const {
  // @@protoc_insertion_point(field_get:proto.steam.CKeyEscrow_Request.password)
  return password_.GetNoArena();
}
void CKeyEscrow_Request::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CKeyEscrow_Request.password)
}
#if LANG_CXX11
void CKeyEscrow_Request::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CKeyEscrow_Request.password)
}
#endif
void CKeyEscrow_Request::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CKeyEscrow_Request.password)
}
void CKeyEscrow_Request::set_password(const void* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CKeyEscrow_Request.password)
}
::std::string* CKeyEscrow_Request::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:proto.steam.CKeyEscrow_Request.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CKeyEscrow_Request::release_password() {
  // @@protoc_insertion_point(field_release:proto.steam.CKeyEscrow_Request.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CKeyEscrow_Request::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CKeyEscrow_Request.password)
}

// optional .proto.steam.EKeyEscrowUsage usage = 3 [default = k_EKeyEscrowUsageStreamingDevice];
bool CKeyEscrow_Request::has_usage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CKeyEscrow_Request::set_has_usage() {
  _has_bits_[0] |= 0x00000008u;
}
void CKeyEscrow_Request::clear_has_usage() {
  _has_bits_[0] &= ~0x00000008u;
}
void CKeyEscrow_Request::clear_usage() {
  usage_ = 0;
  clear_has_usage();
}
::proto::steam::EKeyEscrowUsage CKeyEscrow_Request::usage() const {
  // @@protoc_insertion_point(field_get:proto.steam.CKeyEscrow_Request.usage)
  return static_cast< ::proto::steam::EKeyEscrowUsage >(usage_);
}
void CKeyEscrow_Request::set_usage(::proto::steam::EKeyEscrowUsage value) {
  assert(::proto::steam::EKeyEscrowUsage_IsValid(value));
  set_has_usage();
  usage_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CKeyEscrow_Request.usage)
}

// optional string device_name = 4;
bool CKeyEscrow_Request::has_device_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CKeyEscrow_Request::set_has_device_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CKeyEscrow_Request::clear_has_device_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CKeyEscrow_Request::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_name();
}
const ::std::string& CKeyEscrow_Request::device_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CKeyEscrow_Request.device_name)
  return device_name_.GetNoArena();
}
void CKeyEscrow_Request::set_device_name(const ::std::string& value) {
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CKeyEscrow_Request.device_name)
}
#if LANG_CXX11
void CKeyEscrow_Request::set_device_name(::std::string&& value) {
  set_has_device_name();
  device_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CKeyEscrow_Request.device_name)
}
#endif
void CKeyEscrow_Request::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CKeyEscrow_Request.device_name)
}
void CKeyEscrow_Request::set_device_name(const char* value, size_t size) {
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CKeyEscrow_Request.device_name)
}
::std::string* CKeyEscrow_Request::mutable_device_name() {
  set_has_device_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CKeyEscrow_Request.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CKeyEscrow_Request::release_device_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CKeyEscrow_Request.device_name)
  clear_has_device_name();
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CKeyEscrow_Request::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    set_has_device_name();
  } else {
    clear_has_device_name();
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CKeyEscrow_Request.device_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CKeyEscrow_Ticket::kPasswordFieldNumber;
const int CKeyEscrow_Ticket::kIdentifierFieldNumber;
const int CKeyEscrow_Ticket::kPayloadFieldNumber;
const int CKeyEscrow_Ticket::kTimestampFieldNumber;
const int CKeyEscrow_Ticket::kUsageFieldNumber;
const int CKeyEscrow_Ticket::kDeviceNameFieldNumber;
const int CKeyEscrow_Ticket::kDeviceModelFieldNumber;
const int CKeyEscrow_Ticket::kDeviceSerialFieldNumber;
const int CKeyEscrow_Ticket::kDeviceProvisioningIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CKeyEscrow_Ticket::CKeyEscrow_Ticket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsecrets_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CKeyEscrow_Ticket)
}
CKeyEscrow_Ticket::CKeyEscrow_Ticket(const CKeyEscrow_Ticket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_name()) {
    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  device_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_model()) {
    device_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_model_);
  }
  device_serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_serial()) {
    device_serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_serial_);
  }
  ::memcpy(&identifier_, &from.identifier_,
    reinterpret_cast<char*>(&device_provisioning_id_) -
    reinterpret_cast<char*>(&identifier_) + sizeof(device_provisioning_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CKeyEscrow_Ticket)
}

void CKeyEscrow_Ticket::SharedCtor() {
  _cached_size_ = 0;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&identifier_, 0, reinterpret_cast<char*>(&device_provisioning_id_) -
    reinterpret_cast<char*>(&identifier_) + sizeof(device_provisioning_id_));
}

CKeyEscrow_Ticket::~CKeyEscrow_Ticket() {
  // @@protoc_insertion_point(destructor:proto.steam.CKeyEscrow_Ticket)
  SharedDtor();
}

void CKeyEscrow_Ticket::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_serial_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CKeyEscrow_Ticket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CKeyEscrow_Ticket::descriptor() {
  protobuf_steammessages_5fsecrets_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsecrets_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CKeyEscrow_Ticket& CKeyEscrow_Ticket::default_instance() {
  protobuf_steammessages_5fsecrets_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CKeyEscrow_Ticket* CKeyEscrow_Ticket::New(::google::protobuf::Arena* arena) const {
  CKeyEscrow_Ticket* n = new CKeyEscrow_Ticket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CKeyEscrow_Ticket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CKeyEscrow_Ticket)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_password()) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
    if (has_payload()) {
      GOOGLE_DCHECK(!payload_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*payload_.UnsafeRawStringPointer())->clear();
    }
    if (has_device_name()) {
      GOOGLE_DCHECK(!device_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_device_model()) {
      GOOGLE_DCHECK(!device_model_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_model_.UnsafeRawStringPointer())->clear();
    }
    if (has_device_serial()) {
      GOOGLE_DCHECK(!device_serial_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_serial_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&identifier_, 0, reinterpret_cast<char*>(&usage_) -
      reinterpret_cast<char*>(&identifier_) + sizeof(usage_));
  }
  device_provisioning_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CKeyEscrow_Ticket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CKeyEscrow_Ticket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes password = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 identifier = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_identifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::EKeyEscrowUsage_IsValid(value)) {
            set_usage(static_cast< ::proto::steam::EKeyEscrowUsage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CKeyEscrow_Ticket.device_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_model = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_model().data(), this->device_model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CKeyEscrow_Ticket.device_model");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_serial = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_serial()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_serial().data(), this->device_serial().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CKeyEscrow_Ticket.device_serial");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 device_provisioning_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_device_provisioning_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_provisioning_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CKeyEscrow_Ticket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CKeyEscrow_Ticket)
  return false;
#undef DO_
}

void CKeyEscrow_Ticket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CKeyEscrow_Ticket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->password(), output);
  }

  // optional uint64 identifier = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->identifier(), output);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->payload(), output);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  // optional .proto.steam.EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->usage(), output);
  }

  // optional string device_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CKeyEscrow_Ticket.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->device_name(), output);
  }

  // optional string device_model = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_model().data(), this->device_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CKeyEscrow_Ticket.device_model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->device_model(), output);
  }

  // optional string device_serial = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_serial().data(), this->device_serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CKeyEscrow_Ticket.device_serial");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->device_serial(), output);
  }

  // optional uint32 device_provisioning_id = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->device_provisioning_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CKeyEscrow_Ticket)
}

::google::protobuf::uint8* CKeyEscrow_Ticket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CKeyEscrow_Ticket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes password = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->password(), target);
  }

  // optional uint64 identifier = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->identifier(), target);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->payload(), target);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timestamp(), target);
  }

  // optional .proto.steam.EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->usage(), target);
  }

  // optional string device_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CKeyEscrow_Ticket.device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->device_name(), target);
  }

  // optional string device_model = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_model().data(), this->device_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CKeyEscrow_Ticket.device_model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->device_model(), target);
  }

  // optional string device_serial = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_serial().data(), this->device_serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CKeyEscrow_Ticket.device_serial");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->device_serial(), target);
  }

  // optional uint32 device_provisioning_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->device_provisioning_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CKeyEscrow_Ticket)
  return target;
}

size_t CKeyEscrow_Ticket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CKeyEscrow_Ticket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes password = 1;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

    // optional bytes payload = 3;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional string device_name = 6;
    if (has_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }

    // optional string device_model = 7;
    if (has_device_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_model());
    }

    // optional string device_serial = 8;
    if (has_device_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_serial());
    }

    // optional uint64 identifier = 2;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->identifier());
    }

    // optional uint32 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional .proto.steam.EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
    if (has_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->usage());
    }

  }
  // optional uint32 device_provisioning_id = 9;
  if (has_device_provisioning_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device_provisioning_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CKeyEscrow_Ticket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CKeyEscrow_Ticket)
  GOOGLE_DCHECK_NE(&from, this);
  const CKeyEscrow_Ticket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CKeyEscrow_Ticket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CKeyEscrow_Ticket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CKeyEscrow_Ticket)
    MergeFrom(*source);
  }
}

void CKeyEscrow_Ticket::MergeFrom(const CKeyEscrow_Ticket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CKeyEscrow_Ticket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_device_name();
      device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_device_model();
      device_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_model_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_device_serial();
      device_serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_serial_);
    }
    if (cached_has_bits & 0x00000020u) {
      identifier_ = from.identifier_;
    }
    if (cached_has_bits & 0x00000040u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      usage_ = from.usage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_device_provisioning_id(from.device_provisioning_id());
  }
}

void CKeyEscrow_Ticket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CKeyEscrow_Ticket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CKeyEscrow_Ticket::CopyFrom(const CKeyEscrow_Ticket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CKeyEscrow_Ticket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CKeyEscrow_Ticket::IsInitialized() const {
  return true;
}

void CKeyEscrow_Ticket::Swap(CKeyEscrow_Ticket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CKeyEscrow_Ticket::InternalSwap(CKeyEscrow_Ticket* other) {
  password_.Swap(&other->password_);
  payload_.Swap(&other->payload_);
  device_name_.Swap(&other->device_name_);
  device_model_.Swap(&other->device_model_);
  device_serial_.Swap(&other->device_serial_);
  std::swap(identifier_, other->identifier_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(usage_, other->usage_);
  std::swap(device_provisioning_id_, other->device_provisioning_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CKeyEscrow_Ticket::GetMetadata() const {
  protobuf_steammessages_5fsecrets_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsecrets_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CKeyEscrow_Ticket

// optional bytes password = 1;
bool CKeyEscrow_Ticket::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CKeyEscrow_Ticket::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
void CKeyEscrow_Ticket::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
void CKeyEscrow_Ticket::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& CKeyEscrow_Ticket::password() const {
  // @@protoc_insertion_point(field_get:proto.steam.CKeyEscrow_Ticket.password)
  return password_.GetNoArena();
}
void CKeyEscrow_Ticket::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CKeyEscrow_Ticket.password)
}
#if LANG_CXX11
void CKeyEscrow_Ticket::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CKeyEscrow_Ticket.password)
}
#endif
void CKeyEscrow_Ticket::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CKeyEscrow_Ticket.password)
}
void CKeyEscrow_Ticket::set_password(const void* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CKeyEscrow_Ticket.password)
}
::std::string* CKeyEscrow_Ticket::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:proto.steam.CKeyEscrow_Ticket.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CKeyEscrow_Ticket::release_password() {
  // @@protoc_insertion_point(field_release:proto.steam.CKeyEscrow_Ticket.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CKeyEscrow_Ticket::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CKeyEscrow_Ticket.password)
}

// optional uint64 identifier = 2;
bool CKeyEscrow_Ticket::has_identifier() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CKeyEscrow_Ticket::set_has_identifier() {
  _has_bits_[0] |= 0x00000020u;
}
void CKeyEscrow_Ticket::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000020u;
}
void CKeyEscrow_Ticket::clear_identifier() {
  identifier_ = GOOGLE_ULONGLONG(0);
  clear_has_identifier();
}
::google::protobuf::uint64 CKeyEscrow_Ticket::identifier() const {
  // @@protoc_insertion_point(field_get:proto.steam.CKeyEscrow_Ticket.identifier)
  return identifier_;
}
void CKeyEscrow_Ticket::set_identifier(::google::protobuf::uint64 value) {
  set_has_identifier();
  identifier_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CKeyEscrow_Ticket.identifier)
}

// optional bytes payload = 3;
bool CKeyEscrow_Ticket::has_payload() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CKeyEscrow_Ticket::set_has_payload() {
  _has_bits_[0] |= 0x00000002u;
}
void CKeyEscrow_Ticket::clear_has_payload() {
  _has_bits_[0] &= ~0x00000002u;
}
void CKeyEscrow_Ticket::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
const ::std::string& CKeyEscrow_Ticket::payload() const {
  // @@protoc_insertion_point(field_get:proto.steam.CKeyEscrow_Ticket.payload)
  return payload_.GetNoArena();
}
void CKeyEscrow_Ticket::set_payload(const ::std::string& value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CKeyEscrow_Ticket.payload)
}
#if LANG_CXX11
void CKeyEscrow_Ticket::set_payload(::std::string&& value) {
  set_has_payload();
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CKeyEscrow_Ticket.payload)
}
#endif
void CKeyEscrow_Ticket::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CKeyEscrow_Ticket.payload)
}
void CKeyEscrow_Ticket::set_payload(const void* value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CKeyEscrow_Ticket.payload)
}
::std::string* CKeyEscrow_Ticket::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:proto.steam.CKeyEscrow_Ticket.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CKeyEscrow_Ticket::release_payload() {
  // @@protoc_insertion_point(field_release:proto.steam.CKeyEscrow_Ticket.payload)
  clear_has_payload();
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CKeyEscrow_Ticket::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CKeyEscrow_Ticket.payload)
}

// optional uint32 timestamp = 4;
bool CKeyEscrow_Ticket::has_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CKeyEscrow_Ticket::set_has_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
void CKeyEscrow_Ticket::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
void CKeyEscrow_Ticket::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CKeyEscrow_Ticket::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CKeyEscrow_Ticket.timestamp)
  return timestamp_;
}
void CKeyEscrow_Ticket::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CKeyEscrow_Ticket.timestamp)
}

// optional .proto.steam.EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
bool CKeyEscrow_Ticket::has_usage() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CKeyEscrow_Ticket::set_has_usage() {
  _has_bits_[0] |= 0x00000080u;
}
void CKeyEscrow_Ticket::clear_has_usage() {
  _has_bits_[0] &= ~0x00000080u;
}
void CKeyEscrow_Ticket::clear_usage() {
  usage_ = 0;
  clear_has_usage();
}
::proto::steam::EKeyEscrowUsage CKeyEscrow_Ticket::usage() const {
  // @@protoc_insertion_point(field_get:proto.steam.CKeyEscrow_Ticket.usage)
  return static_cast< ::proto::steam::EKeyEscrowUsage >(usage_);
}
void CKeyEscrow_Ticket::set_usage(::proto::steam::EKeyEscrowUsage value) {
  assert(::proto::steam::EKeyEscrowUsage_IsValid(value));
  set_has_usage();
  usage_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CKeyEscrow_Ticket.usage)
}

// optional string device_name = 6;
bool CKeyEscrow_Ticket::has_device_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CKeyEscrow_Ticket::set_has_device_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CKeyEscrow_Ticket::clear_has_device_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CKeyEscrow_Ticket::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_name();
}
const ::std::string& CKeyEscrow_Ticket::device_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CKeyEscrow_Ticket.device_name)
  return device_name_.GetNoArena();
}
void CKeyEscrow_Ticket::set_device_name(const ::std::string& value) {
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CKeyEscrow_Ticket.device_name)
}
#if LANG_CXX11
void CKeyEscrow_Ticket::set_device_name(::std::string&& value) {
  set_has_device_name();
  device_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CKeyEscrow_Ticket.device_name)
}
#endif
void CKeyEscrow_Ticket::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CKeyEscrow_Ticket.device_name)
}
void CKeyEscrow_Ticket::set_device_name(const char* value, size_t size) {
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CKeyEscrow_Ticket.device_name)
}
::std::string* CKeyEscrow_Ticket::mutable_device_name() {
  set_has_device_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CKeyEscrow_Ticket.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CKeyEscrow_Ticket::release_device_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CKeyEscrow_Ticket.device_name)
  clear_has_device_name();
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CKeyEscrow_Ticket::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    set_has_device_name();
  } else {
    clear_has_device_name();
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CKeyEscrow_Ticket.device_name)
}

// optional string device_model = 7;
bool CKeyEscrow_Ticket::has_device_model() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CKeyEscrow_Ticket::set_has_device_model() {
  _has_bits_[0] |= 0x00000008u;
}
void CKeyEscrow_Ticket::clear_has_device_model() {
  _has_bits_[0] &= ~0x00000008u;
}
void CKeyEscrow_Ticket::clear_device_model() {
  device_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_model();
}
const ::std::string& CKeyEscrow_Ticket::device_model() const {
  // @@protoc_insertion_point(field_get:proto.steam.CKeyEscrow_Ticket.device_model)
  return device_model_.GetNoArena();
}
void CKeyEscrow_Ticket::set_device_model(const ::std::string& value) {
  set_has_device_model();
  device_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CKeyEscrow_Ticket.device_model)
}
#if LANG_CXX11
void CKeyEscrow_Ticket::set_device_model(::std::string&& value) {
  set_has_device_model();
  device_model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CKeyEscrow_Ticket.device_model)
}
#endif
void CKeyEscrow_Ticket::set_device_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_model();
  device_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CKeyEscrow_Ticket.device_model)
}
void CKeyEscrow_Ticket::set_device_model(const char* value, size_t size) {
  set_has_device_model();
  device_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CKeyEscrow_Ticket.device_model)
}
::std::string* CKeyEscrow_Ticket::mutable_device_model() {
  set_has_device_model();
  // @@protoc_insertion_point(field_mutable:proto.steam.CKeyEscrow_Ticket.device_model)
  return device_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CKeyEscrow_Ticket::release_device_model() {
  // @@protoc_insertion_point(field_release:proto.steam.CKeyEscrow_Ticket.device_model)
  clear_has_device_model();
  return device_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CKeyEscrow_Ticket::set_allocated_device_model(::std::string* device_model) {
  if (device_model != NULL) {
    set_has_device_model();
  } else {
    clear_has_device_model();
  }
  device_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_model);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CKeyEscrow_Ticket.device_model)
}

// optional string device_serial = 8;
bool CKeyEscrow_Ticket::has_device_serial() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CKeyEscrow_Ticket::set_has_device_serial() {
  _has_bits_[0] |= 0x00000010u;
}
void CKeyEscrow_Ticket::clear_has_device_serial() {
  _has_bits_[0] &= ~0x00000010u;
}
void CKeyEscrow_Ticket::clear_device_serial() {
  device_serial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_serial();
}
const ::std::string& CKeyEscrow_Ticket::device_serial() const {
  // @@protoc_insertion_point(field_get:proto.steam.CKeyEscrow_Ticket.device_serial)
  return device_serial_.GetNoArena();
}
void CKeyEscrow_Ticket::set_device_serial(const ::std::string& value) {
  set_has_device_serial();
  device_serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CKeyEscrow_Ticket.device_serial)
}
#if LANG_CXX11
void CKeyEscrow_Ticket::set_device_serial(::std::string&& value) {
  set_has_device_serial();
  device_serial_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CKeyEscrow_Ticket.device_serial)
}
#endif
void CKeyEscrow_Ticket::set_device_serial(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_serial();
  device_serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CKeyEscrow_Ticket.device_serial)
}
void CKeyEscrow_Ticket::set_device_serial(const char* value, size_t size) {
  set_has_device_serial();
  device_serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CKeyEscrow_Ticket.device_serial)
}
::std::string* CKeyEscrow_Ticket::mutable_device_serial() {
  set_has_device_serial();
  // @@protoc_insertion_point(field_mutable:proto.steam.CKeyEscrow_Ticket.device_serial)
  return device_serial_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CKeyEscrow_Ticket::release_device_serial() {
  // @@protoc_insertion_point(field_release:proto.steam.CKeyEscrow_Ticket.device_serial)
  clear_has_device_serial();
  return device_serial_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CKeyEscrow_Ticket::set_allocated_device_serial(::std::string* device_serial) {
  if (device_serial != NULL) {
    set_has_device_serial();
  } else {
    clear_has_device_serial();
  }
  device_serial_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_serial);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CKeyEscrow_Ticket.device_serial)
}

// optional uint32 device_provisioning_id = 9;
bool CKeyEscrow_Ticket::has_device_provisioning_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CKeyEscrow_Ticket::set_has_device_provisioning_id() {
  _has_bits_[0] |= 0x00000100u;
}
void CKeyEscrow_Ticket::clear_has_device_provisioning_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void CKeyEscrow_Ticket::clear_device_provisioning_id() {
  device_provisioning_id_ = 0u;
  clear_has_device_provisioning_id();
}
::google::protobuf::uint32 CKeyEscrow_Ticket::device_provisioning_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CKeyEscrow_Ticket.device_provisioning_id)
  return device_provisioning_id_;
}
void CKeyEscrow_Ticket::set_device_provisioning_id(::google::protobuf::uint32 value) {
  set_has_device_provisioning_id();
  device_provisioning_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CKeyEscrow_Ticket.device_provisioning_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CKeyEscrow_Response::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CKeyEscrow_Response::CKeyEscrow_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fsecrets_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CKeyEscrow_Response)
}
CKeyEscrow_Response::CKeyEscrow_Response(const CKeyEscrow_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ticket()) {
    ticket_ = new ::proto::steam::CKeyEscrow_Ticket(*from.ticket_);
  } else {
    ticket_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CKeyEscrow_Response)
}

void CKeyEscrow_Response::SharedCtor() {
  _cached_size_ = 0;
  ticket_ = NULL;
}

CKeyEscrow_Response::~CKeyEscrow_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CKeyEscrow_Response)
  SharedDtor();
}

void CKeyEscrow_Response::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ticket_;
  }
}

void CKeyEscrow_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CKeyEscrow_Response::descriptor() {
  protobuf_steammessages_5fsecrets_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsecrets_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CKeyEscrow_Response& CKeyEscrow_Response::default_instance() {
  protobuf_steammessages_5fsecrets_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CKeyEscrow_Response* CKeyEscrow_Response::New(::google::protobuf::Arena* arena) const {
  CKeyEscrow_Response* n = new CKeyEscrow_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CKeyEscrow_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CKeyEscrow_Response)
  if (has_ticket()) {
    GOOGLE_DCHECK(ticket_ != NULL);
    ticket_->::proto::steam::CKeyEscrow_Ticket::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CKeyEscrow_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CKeyEscrow_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CKeyEscrow_Ticket ticket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CKeyEscrow_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CKeyEscrow_Response)
  return false;
#undef DO_
}

void CKeyEscrow_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CKeyEscrow_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CKeyEscrow_Ticket ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ticket_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CKeyEscrow_Response)
}

::google::protobuf::uint8* CKeyEscrow_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CKeyEscrow_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CKeyEscrow_Ticket ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ticket_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CKeyEscrow_Response)
  return target;
}

size_t CKeyEscrow_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CKeyEscrow_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.steam.CKeyEscrow_Ticket ticket = 1;
  if (has_ticket()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ticket_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CKeyEscrow_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CKeyEscrow_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CKeyEscrow_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CKeyEscrow_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CKeyEscrow_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CKeyEscrow_Response)
    MergeFrom(*source);
  }
}

void CKeyEscrow_Response::MergeFrom(const CKeyEscrow_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CKeyEscrow_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ticket()) {
    mutable_ticket()->::proto::steam::CKeyEscrow_Ticket::MergeFrom(from.ticket());
  }
}

void CKeyEscrow_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CKeyEscrow_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CKeyEscrow_Response::CopyFrom(const CKeyEscrow_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CKeyEscrow_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CKeyEscrow_Response::IsInitialized() const {
  return true;
}

void CKeyEscrow_Response::Swap(CKeyEscrow_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CKeyEscrow_Response::InternalSwap(CKeyEscrow_Response* other) {
  std::swap(ticket_, other->ticket_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CKeyEscrow_Response::GetMetadata() const {
  protobuf_steammessages_5fsecrets_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsecrets_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CKeyEscrow_Response

// optional .proto.steam.CKeyEscrow_Ticket ticket = 1;
bool CKeyEscrow_Response::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CKeyEscrow_Response::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
void CKeyEscrow_Response::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
void CKeyEscrow_Response::clear_ticket() {
  if (ticket_ != NULL) ticket_->::proto::steam::CKeyEscrow_Ticket::Clear();
  clear_has_ticket();
}
const ::proto::steam::CKeyEscrow_Ticket& CKeyEscrow_Response::ticket() const {
  // @@protoc_insertion_point(field_get:proto.steam.CKeyEscrow_Response.ticket)
  return ticket_ != NULL ? *ticket_
                         : *::proto::steam::CKeyEscrow_Ticket::internal_default_instance();
}
::proto::steam::CKeyEscrow_Ticket* CKeyEscrow_Response::mutable_ticket() {
  set_has_ticket();
  if (ticket_ == NULL) {
    ticket_ = new ::proto::steam::CKeyEscrow_Ticket;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CKeyEscrow_Response.ticket)
  return ticket_;
}
::proto::steam::CKeyEscrow_Ticket* CKeyEscrow_Response::release_ticket() {
  // @@protoc_insertion_point(field_release:proto.steam.CKeyEscrow_Response.ticket)
  clear_has_ticket();
  ::proto::steam::CKeyEscrow_Ticket* temp = ticket_;
  ticket_ = NULL;
  return temp;
}
void CKeyEscrow_Response::set_allocated_ticket(::proto::steam::CKeyEscrow_Ticket* ticket) {
  delete ticket_;
  ticket_ = ticket;
  if (ticket) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CKeyEscrow_Response.ticket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Secrets::~Secrets() {}

const ::google::protobuf::ServiceDescriptor* Secrets::descriptor() {
  protobuf_steammessages_5fsecrets_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fsecrets_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* Secrets::GetDescriptor() {
  return descriptor();
}

void Secrets::KeyEscrow(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CKeyEscrow_Request*,
                         ::proto::steam::CKeyEscrow_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method KeyEscrow() not implemented.");
  done->Run();
}

void Secrets::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fsecrets_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      KeyEscrow(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CKeyEscrow_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CKeyEscrow_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Secrets::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CKeyEscrow_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& Secrets::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CKeyEscrow_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Secrets_Stub::Secrets_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Secrets_Stub::Secrets_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Secrets_Stub::~Secrets_Stub() {
  if (owns_channel_) delete channel_;
}

void Secrets_Stub::KeyEscrow(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CKeyEscrow_Request* request,
                              ::proto::steam::CKeyEscrow_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
