// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_friends.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_clientserver_friends.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CMsgClientFriendMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientFriendMsg> {
} _CMsgClientFriendMsg_default_instance_;
class CMsgClientFriendMsgIncomingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientFriendMsgIncoming> {
} _CMsgClientFriendMsgIncoming_default_instance_;
class CMsgClientAddFriendDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAddFriend> {
} _CMsgClientAddFriend_default_instance_;
class CMsgClientAddFriendResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAddFriendResponse> {
} _CMsgClientAddFriendResponse_default_instance_;
class CMsgClientRemoveFriendDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRemoveFriend> {
} _CMsgClientRemoveFriend_default_instance_;
class CMsgClientHideFriendDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientHideFriend> {
} _CMsgClientHideFriend_default_instance_;
class CMsgClientFriendsList_FriendDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientFriendsList_Friend> {
} _CMsgClientFriendsList_Friend_default_instance_;
class CMsgClientFriendsListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientFriendsList> {
} _CMsgClientFriendsList_default_instance_;
class CMsgClientFriendsGroupsList_FriendGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientFriendsGroupsList_FriendGroup> {
} _CMsgClientFriendsGroupsList_FriendGroup_default_instance_;
class CMsgClientFriendsGroupsList_FriendGroupsMembershipDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientFriendsGroupsList_FriendGroupsMembership> {
} _CMsgClientFriendsGroupsList_FriendGroupsMembership_default_instance_;
class CMsgClientFriendsGroupsListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientFriendsGroupsList> {
} _CMsgClientFriendsGroupsList_default_instance_;
class CMsgClientPlayerNicknameList_PlayerNicknameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPlayerNicknameList_PlayerNickname> {
} _CMsgClientPlayerNicknameList_PlayerNickname_default_instance_;
class CMsgClientPlayerNicknameListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPlayerNicknameList> {
} _CMsgClientPlayerNicknameList_default_instance_;
class CMsgClientSetPlayerNicknameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSetPlayerNickname> {
} _CMsgClientSetPlayerNickname_default_instance_;
class CMsgClientSetPlayerNicknameResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSetPlayerNicknameResponse> {
} _CMsgClientSetPlayerNicknameResponse_default_instance_;
class CMsgClientRequestFriendDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRequestFriendData> {
} _CMsgClientRequestFriendData_default_instance_;
class CMsgClientChangeStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientChangeStatus> {
} _CMsgClientChangeStatus_default_instance_;
class CMsgPersonaChangeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPersonaChangeResponse> {
} _CMsgPersonaChangeResponse_default_instance_;
class CMsgClientPersonaState_FriendDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPersonaState_Friend> {
} _CMsgClientPersonaState_Friend_default_instance_;
class CMsgClientPersonaStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPersonaState> {
} _CMsgClientPersonaState_default_instance_;
class CMsgClientFriendProfileInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientFriendProfileInfo> {
} _CMsgClientFriendProfileInfo_default_instance_;
class CMsgClientFriendProfileInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientFriendProfileInfoResponse> {
} _CMsgClientFriendProfileInfoResponse_default_instance_;
class CMsgClientCreateFriendsGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientCreateFriendsGroup> {
} _CMsgClientCreateFriendsGroup_default_instance_;
class CMsgClientCreateFriendsGroupResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientCreateFriendsGroupResponse> {
} _CMsgClientCreateFriendsGroupResponse_default_instance_;
class CMsgClientDeleteFriendsGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientDeleteFriendsGroup> {
} _CMsgClientDeleteFriendsGroup_default_instance_;
class CMsgClientDeleteFriendsGroupResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientDeleteFriendsGroupResponse> {
} _CMsgClientDeleteFriendsGroupResponse_default_instance_;
class CMsgClientRenameFriendsGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRenameFriendsGroup> {
} _CMsgClientRenameFriendsGroup_default_instance_;
class CMsgClientRenameFriendsGroupResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRenameFriendsGroupResponse> {
} _CMsgClientRenameFriendsGroupResponse_default_instance_;
class CMsgClientAddFriendToGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAddFriendToGroup> {
} _CMsgClientAddFriendToGroup_default_instance_;
class CMsgClientAddFriendToGroupResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAddFriendToGroupResponse> {
} _CMsgClientAddFriendToGroupResponse_default_instance_;
class CMsgClientRemoveFriendFromGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRemoveFriendFromGroup> {
} _CMsgClientRemoveFriendFromGroup_default_instance_;
class CMsgClientRemoveFriendFromGroupResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRemoveFriendFromGroupResponse> {
} _CMsgClientRemoveFriendFromGroupResponse_default_instance_;
class CMsgClientGetEmoticonListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetEmoticonList> {
} _CMsgClientGetEmoticonList_default_instance_;
class CMsgClientEmoticonList_EmoticonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientEmoticonList_Emoticon> {
} _CMsgClientEmoticonList_Emoticon_default_instance_;
class CMsgClientEmoticonListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientEmoticonList> {
} _CMsgClientEmoticonList_default_instance_;

namespace protobuf_steammessages_5fclientserver_5ffriends_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[35];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsg, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsg, chat_entry_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsg, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsg, rtime32_server_timestamp_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsgIncoming, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsgIncoming, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsgIncoming, steamid_from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsgIncoming, chat_entry_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsgIncoming, from_limited_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsgIncoming, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsgIncoming, rtime32_server_timestamp_),
  1,
  2,
  3,
  0,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriend, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriend, steamid_to_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriend, accountname_or_email_to_add_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendResponse, steam_id_added_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendResponse, persona_name_added_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRemoveFriend, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRemoveFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRemoveFriend, friendid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHideFriend, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHideFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHideFriend, friendid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHideFriend, hide_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsList_Friend, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsList_Friend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsList_Friend, ulfriendid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsList_Friend, efriendrelationship_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsList, bincremental_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsList, friends_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsList, max_friend_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsList, active_friend_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsList, friends_limit_hit_),
  1,
  ~0u,
  0,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList_FriendGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList_FriendGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList_FriendGroup, ngroupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList_FriendGroup, strgroupname_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList_FriendGroupsMembership, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList_FriendGroupsMembership, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList_FriendGroupsMembership, ulsteamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList_FriendGroupsMembership, ngroupid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList, bremoval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList, bincremental_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList, friendgroups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList, memberships_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPlayerNicknameList_PlayerNickname, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPlayerNicknameList_PlayerNickname, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPlayerNicknameList_PlayerNickname, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPlayerNicknameList_PlayerNickname, nickname_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPlayerNicknameList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPlayerNicknameList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPlayerNicknameList, removal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPlayerNicknameList, incremental_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPlayerNicknameList, nicknames_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSetPlayerNickname, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSetPlayerNickname, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSetPlayerNickname, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSetPlayerNickname, nickname_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSetPlayerNicknameResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSetPlayerNicknameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSetPlayerNicknameResponse, eresult_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestFriendData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestFriendData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestFriendData, persona_state_requested_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestFriendData, friends_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChangeStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChangeStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChangeStatus, persona_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChangeStatus, player_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChangeStatus, is_auto_generated_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChangeStatus, high_priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChangeStatus, persona_set_by_user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChangeStatus, persona_state_flags_),
  1,
  0,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPersonaChangeResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPersonaChangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPersonaChangeResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPersonaChangeResponse, player_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, friendid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, persona_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, game_played_app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, game_server_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, game_server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, persona_state_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, online_session_instances_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, published_instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, persona_set_by_user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, player_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, query_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, steamid_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, avatar_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, last_logoff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, last_logon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, clan_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, game_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, game_data_blob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, clan_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, facebook_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, facebook_id_),
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  0,
  16,
  15,
  1,
  17,
  18,
  19,
  2,
  20,
  3,
  4,
  5,
  21,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState, status_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState, friends_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfo, steamid_friend_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, steamid_friend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, time_created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, real_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, city_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, state_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, country_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, headline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, summary_),
  8,
  6,
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCreateFriendsGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCreateFriendsGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCreateFriendsGroup, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCreateFriendsGroup, groupname_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCreateFriendsGroupResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCreateFriendsGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCreateFriendsGroupResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCreateFriendsGroupResponse, groupid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeleteFriendsGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeleteFriendsGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeleteFriendsGroup, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeleteFriendsGroup, groupid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeleteFriendsGroupResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeleteFriendsGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeleteFriendsGroupResponse, eresult_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRenameFriendsGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRenameFriendsGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRenameFriendsGroup, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRenameFriendsGroup, groupname_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRenameFriendsGroupResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRenameFriendsGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRenameFriendsGroupResponse, eresult_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendToGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendToGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendToGroup, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendToGroup, steamiduser_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendToGroupResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendToGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendToGroupResponse, eresult_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRemoveFriendFromGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRemoveFriendFromGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRemoveFriendFromGroup, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRemoveFriendFromGroup, steamiduser_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRemoveFriendFromGroupResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRemoveFriendFromGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRemoveFriendFromGroupResponse, eresult_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetEmoticonList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetEmoticonList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Emoticon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Emoticon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Emoticon, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Emoticon, count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList, emoticons_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(CMsgClientFriendMsg)},
  { 13, 23, sizeof(CMsgClientFriendMsgIncoming)},
  { 28, 35, sizeof(CMsgClientAddFriend)},
  { 37, 45, sizeof(CMsgClientAddFriendResponse)},
  { 48, 54, sizeof(CMsgClientRemoveFriend)},
  { 55, 62, sizeof(CMsgClientHideFriend)},
  { 64, 71, sizeof(CMsgClientFriendsList_Friend)},
  { 73, 83, sizeof(CMsgClientFriendsList)},
  { 88, 95, sizeof(CMsgClientFriendsGroupsList_FriendGroup)},
  { 97, 104, sizeof(CMsgClientFriendsGroupsList_FriendGroupsMembership)},
  { 106, 115, sizeof(CMsgClientFriendsGroupsList)},
  { 119, 126, sizeof(CMsgClientPlayerNicknameList_PlayerNickname)},
  { 128, 136, sizeof(CMsgClientPlayerNicknameList)},
  { 139, 146, sizeof(CMsgClientSetPlayerNickname)},
  { 148, 154, sizeof(CMsgClientSetPlayerNicknameResponse)},
  { 155, 162, sizeof(CMsgClientRequestFriendData)},
  { 164, 175, sizeof(CMsgClientChangeStatus)},
  { 181, 188, sizeof(CMsgPersonaChangeResponse)},
  { 190, 217, sizeof(CMsgClientPersonaState_Friend)},
  { 239, 246, sizeof(CMsgClientPersonaState)},
  { 248, 254, sizeof(CMsgClientFriendProfileInfo)},
  { 255, 269, sizeof(CMsgClientFriendProfileInfoResponse)},
  { 278, 285, sizeof(CMsgClientCreateFriendsGroup)},
  { 287, 294, sizeof(CMsgClientCreateFriendsGroupResponse)},
  { 296, 303, sizeof(CMsgClientDeleteFriendsGroup)},
  { 305, 311, sizeof(CMsgClientDeleteFriendsGroupResponse)},
  { 312, 319, sizeof(CMsgClientRenameFriendsGroup)},
  { 321, 327, sizeof(CMsgClientRenameFriendsGroupResponse)},
  { 328, 335, sizeof(CMsgClientAddFriendToGroup)},
  { 337, 343, sizeof(CMsgClientAddFriendToGroupResponse)},
  { 344, 351, sizeof(CMsgClientRemoveFriendFromGroup)},
  { 353, 359, sizeof(CMsgClientRemoveFriendFromGroupResponse)},
  { 360, 365, sizeof(CMsgClientGetEmoticonList)},
  { 365, 372, sizeof(CMsgClientEmoticonList_Emoticon)},
  { 374, 380, sizeof(CMsgClientEmoticonList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientFriendMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientFriendMsgIncoming_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientAddFriend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientAddFriendResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientRemoveFriend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientHideFriend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientFriendsList_Friend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientFriendsList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientFriendsGroupsList_FriendGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientFriendsGroupsList_FriendGroupsMembership_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientFriendsGroupsList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientPlayerNicknameList_PlayerNickname_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientPlayerNicknameList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientSetPlayerNickname_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientSetPlayerNicknameResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientRequestFriendData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientChangeStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPersonaChangeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientPersonaState_Friend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientPersonaState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientFriendProfileInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientFriendProfileInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientCreateFriendsGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientCreateFriendsGroupResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientDeleteFriendsGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientDeleteFriendsGroupResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientRenameFriendsGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientRenameFriendsGroupResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientAddFriendToGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientAddFriendToGroupResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientRemoveFriendFromGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientRemoveFriendFromGroupResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientGetEmoticonList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientEmoticonList_Emoticon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientEmoticonList_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_clientserver_friends.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 35);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgClientFriendMsg_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgClientFriendMsgIncoming_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgClientAddFriend_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgClientAddFriendResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMsgClientRemoveFriend_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgClientHideFriend_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CMsgClientFriendsList_Friend_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CMsgClientFriendsList_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CMsgClientFriendsGroupsList_FriendGroup_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CMsgClientFriendsGroupsList_FriendGroupsMembership_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CMsgClientFriendsGroupsList_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CMsgClientPlayerNicknameList_PlayerNickname_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CMsgClientPlayerNicknameList_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CMsgClientSetPlayerNickname_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CMsgClientSetPlayerNicknameResponse_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CMsgClientRequestFriendData_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CMsgClientChangeStatus_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CMsgPersonaChangeResponse_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CMsgClientPersonaState_Friend_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CMsgClientPersonaState_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CMsgClientFriendProfileInfo_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CMsgClientFriendProfileInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CMsgClientCreateFriendsGroup_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CMsgClientCreateFriendsGroupResponse_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CMsgClientDeleteFriendsGroup_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CMsgClientDeleteFriendsGroupResponse_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CMsgClientRenameFriendsGroup_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CMsgClientRenameFriendsGroupResponse_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CMsgClientAddFriendToGroup_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CMsgClientAddFriendToGroupResponse_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _CMsgClientRemoveFriendFromGroup_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _CMsgClientRemoveFriendFromGroupResponse_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _CMsgClientGetEmoticonList_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _CMsgClientEmoticonList_Emoticon_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _CMsgClientEmoticonList_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5fbase_2eproto::InitDefaults();
  _CMsgClientFriendMsg_default_instance_.DefaultConstruct();
  _CMsgClientFriendMsgIncoming_default_instance_.DefaultConstruct();
  _CMsgClientAddFriend_default_instance_.DefaultConstruct();
  _CMsgClientAddFriendResponse_default_instance_.DefaultConstruct();
  _CMsgClientRemoveFriend_default_instance_.DefaultConstruct();
  _CMsgClientHideFriend_default_instance_.DefaultConstruct();
  _CMsgClientFriendsList_Friend_default_instance_.DefaultConstruct();
  _CMsgClientFriendsList_default_instance_.DefaultConstruct();
  _CMsgClientFriendsGroupsList_FriendGroup_default_instance_.DefaultConstruct();
  _CMsgClientFriendsGroupsList_FriendGroupsMembership_default_instance_.DefaultConstruct();
  _CMsgClientFriendsGroupsList_default_instance_.DefaultConstruct();
  _CMsgClientPlayerNicknameList_PlayerNickname_default_instance_.DefaultConstruct();
  _CMsgClientPlayerNicknameList_default_instance_.DefaultConstruct();
  _CMsgClientSetPlayerNickname_default_instance_.DefaultConstruct();
  _CMsgClientSetPlayerNicknameResponse_default_instance_.DefaultConstruct();
  _CMsgClientRequestFriendData_default_instance_.DefaultConstruct();
  _CMsgClientChangeStatus_default_instance_.DefaultConstruct();
  _CMsgPersonaChangeResponse_default_instance_.DefaultConstruct();
  _CMsgClientPersonaState_Friend_default_instance_.DefaultConstruct();
  _CMsgClientPersonaState_default_instance_.DefaultConstruct();
  _CMsgClientFriendProfileInfo_default_instance_.DefaultConstruct();
  _CMsgClientFriendProfileInfoResponse_default_instance_.DefaultConstruct();
  _CMsgClientCreateFriendsGroup_default_instance_.DefaultConstruct();
  _CMsgClientCreateFriendsGroupResponse_default_instance_.DefaultConstruct();
  _CMsgClientDeleteFriendsGroup_default_instance_.DefaultConstruct();
  _CMsgClientDeleteFriendsGroupResponse_default_instance_.DefaultConstruct();
  _CMsgClientRenameFriendsGroup_default_instance_.DefaultConstruct();
  _CMsgClientRenameFriendsGroupResponse_default_instance_.DefaultConstruct();
  _CMsgClientAddFriendToGroup_default_instance_.DefaultConstruct();
  _CMsgClientAddFriendToGroupResponse_default_instance_.DefaultConstruct();
  _CMsgClientRemoveFriendFromGroup_default_instance_.DefaultConstruct();
  _CMsgClientRemoveFriendFromGroupResponse_default_instance_.DefaultConstruct();
  _CMsgClientGetEmoticonList_default_instance_.DefaultConstruct();
  _CMsgClientEmoticonList_Emoticon_default_instance_.DefaultConstruct();
  _CMsgClientEmoticonList_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n(steammessages_clientserver_friends.pro"
      "to\022\013proto.steam\032\030steammessages_base.prot"
      "o\"r\n\023CMsgClientFriendMsg\022\017\n\007steamid\030\001 \001("
      "\006\022\027\n\017chat_entry_type\030\002 \001(\005\022\017\n\007message\030\003 "
      "\001(\014\022 \n\030rtime32_server_timestamp\030\004 \001(\007\"\235\001"
      "\n\033CMsgClientFriendMsgIncoming\022\024\n\014steamid"
      "_from\030\001 \001(\006\022\027\n\017chat_entry_type\030\002 \001(\005\022\034\n\024"
      "from_limited_account\030\003 \001(\010\022\017\n\007message\030\004 "
      "\001(\014\022 \n\030rtime32_server_timestamp\030\005 \001(\007\"R\n"
      "\023CMsgClientAddFriend\022\026\n\016steamid_to_add\030\001"
      " \001(\006\022#\n\033accountname_or_email_to_add\030\002 \001("
      "\t\"e\n\033CMsgClientAddFriendResponse\022\022\n\007eres"
      "ult\030\001 \001(\005:\0012\022\026\n\016steam_id_added\030\002 \001(\006\022\032\n\022"
      "persona_name_added\030\003 \001(\t\"*\n\026CMsgClientRe"
      "moveFriend\022\020\n\010friendid\030\001 \001(\006\"6\n\024CMsgClie"
      "ntHideFriend\022\020\n\010friendid\030\001 \001(\006\022\014\n\004hide\030\002"
      " \001(\010\"\366\001\n\025CMsgClientFriendsList\022\024\n\014bincre"
      "mental\030\001 \001(\010\022:\n\007friends\030\002 \003(\0132).proto.st"
      "eam.CMsgClientFriendsList.Friend\022\030\n\020max_"
      "friend_count\030\003 \001(\r\022\033\n\023active_friend_coun"
      "t\030\004 \001(\r\022\031\n\021friends_limit_hit\030\005 \001(\010\0329\n\006Fr"
      "iend\022\022\n\nulfriendid\030\001 \001(\006\022\033\n\023efriendrelat"
      "ionship\030\002 \001(\r\"\335\002\n\033CMsgClientFriendsGroup"
      "sList\022\020\n\010bremoval\030\001 \001(\010\022\024\n\014bincremental\030"
      "\002 \001(\010\022J\n\014friendGroups\030\003 \003(\01324.proto.stea"
      "m.CMsgClientFriendsGroupsList.FriendGrou"
      "p\022T\n\013memberships\030\004 \003(\0132\?.proto.steam.CMs"
      "gClientFriendsGroupsList.FriendGroupsMem"
      "bership\0325\n\013FriendGroup\022\020\n\010nGroupID\030\001 \001(\005"
      "\022\024\n\014strGroupName\030\002 \001(\t\032=\n\026FriendGroupsMe"
      "mbership\022\021\n\tulSteamID\030\001 \001(\006\022\020\n\010nGroupID\030"
      "\002 \001(\005\"\306\001\n\034CMsgClientPlayerNicknameList\022\017"
      "\n\007removal\030\001 \001(\010\022\023\n\013incremental\030\002 \001(\010\022K\n\t"
      "nicknames\030\003 \003(\01328.proto.steam.CMsgClient"
      "PlayerNicknameList.PlayerNickname\0323\n\016Pla"
      "yerNickname\022\017\n\007steamid\030\001 \001(\006\022\020\n\010nickname"
      "\030\003 \001(\t\"@\n\033CMsgClientSetPlayerNickname\022\017\n"
      "\007steamid\030\001 \001(\006\022\020\n\010nickname\030\002 \001(\t\"6\n#CMsg"
      "ClientSetPlayerNicknameResponse\022\017\n\007eresu"
      "lt\030\001 \001(\r\"O\n\033CMsgClientRequestFriendData\022"
      "\037\n\027persona_state_requested\030\001 \001(\r\022\017\n\007frie"
      "nds\030\002 \003(\006\"\270\001\n\026CMsgClientChangeStatus\022\025\n\r"
      "persona_state\030\001 \001(\r\022\023\n\013player_name\030\002 \001(\t"
      "\022\036\n\026is_auto_generated_name\030\003 \001(\010\022\025\n\rhigh"
      "_priority\030\004 \001(\010\022\033\n\023persona_set_by_user\030\005"
      " \001(\010\022\036\n\023persona_state_flags\030\006 \001(\r:\0010\"@\n\031"
      "CMsgPersonaChangeResponse\022\016\n\006result\030\001 \001("
      "\r\022\023\n\013player_name\030\002 \001(\t\"\363\004\n\026CMsgClientPer"
      "sonaState\022\024\n\014status_flags\030\001 \001(\r\022;\n\007frien"
      "ds\030\002 \003(\0132*.proto.steam.CMsgClientPersona"
      "State.Friend\032\205\004\n\006Friend\022\020\n\010friendid\030\001 \001("
      "\006\022\025\n\rpersona_state\030\002 \001(\r\022\032\n\022game_played_"
      "app_id\030\003 \001(\r\022\026\n\016game_server_ip\030\004 \001(\r\022\030\n\020"
      "game_server_port\030\005 \001(\r\022\033\n\023persona_state_"
      "flags\030\006 \001(\r\022 \n\030online_session_instances\030"
      "\007 \001(\r\022\035\n\025published_instance_id\030\010 \001(\r\022\033\n\023"
      "persona_set_by_user\030\n \001(\010\022\023\n\013player_name"
      "\030\017 \001(\t\022\022\n\nquery_port\030\024 \001(\r\022\026\n\016steamid_so"
      "urce\030\031 \001(\006\022\023\n\013avatar_hash\030\037 \001(\014\022\023\n\013last_"
      "logoff\030- \001(\r\022\022\n\nlast_logon\030. \001(\r\022\021\n\tclan"
      "_rank\0302 \001(\r\022\021\n\tgame_name\0307 \001(\t\022\016\n\006gameid"
      "\0308 \001(\006\022\026\n\016game_data_blob\030< \001(\014\022\020\n\010clan_t"
      "ag\030A \001(\t\022\025\n\rfacebook_name\030B \001(\t\022\023\n\013faceb"
      "ook_id\030C \001(\004\"5\n\033CMsgClientFriendProfileI"
      "nfo\022\026\n\016steamid_friend\030\001 \001(\006\"\332\001\n#CMsgClie"
      "ntFriendProfileInfoResponse\022\022\n\007eresult\030\001"
      " \001(\005:\0012\022\026\n\016steamid_friend\030\002 \001(\006\022\024\n\014time_"
      "created\030\003 \001(\r\022\021\n\treal_name\030\004 \001(\t\022\021\n\tcity"
      "_name\030\005 \001(\t\022\022\n\nstate_name\030\006 \001(\t\022\024\n\014count"
      "ry_name\030\007 \001(\t\022\020\n\010headline\030\010 \001(\t\022\017\n\007summa"
      "ry\030\t \001(\t\"B\n\034CMsgClientCreateFriendsGroup"
      "\022\017\n\007steamid\030\001 \001(\006\022\021\n\tgroupname\030\002 \001(\t\"H\n$"
      "CMsgClientCreateFriendsGroupResponse\022\017\n\007"
      "eresult\030\001 \001(\r\022\017\n\007groupid\030\002 \001(\005\"@\n\034CMsgCl"
      "ientDeleteFriendsGroup\022\017\n\007steamid\030\001 \001(\006\022"
      "\017\n\007groupid\030\002 \001(\005\"7\n$CMsgClientDeleteFrie"
      "ndsGroupResponse\022\017\n\007eresult\030\001 \001(\r\"B\n\034CMs"
      "gClientRenameFriendsGroup\022\017\n\007groupid\030\001 \001"
      "(\005\022\021\n\tgroupname\030\002 \001(\t\"7\n$CMsgClientRenam"
      "eFriendsGroupResponse\022\017\n\007eresult\030\001 \001(\r\"B"
      "\n\032CMsgClientAddFriendToGroup\022\017\n\007groupid\030"
      "\001 \001(\005\022\023\n\013steamiduser\030\002 \001(\006\"5\n\"CMsgClient"
      "AddFriendToGroupResponse\022\017\n\007eresult\030\001 \001("
      "\r\"G\n\037CMsgClientRemoveFriendFromGroup\022\017\n\007"
      "groupid\030\001 \001(\005\022\023\n\013steamiduser\030\002 \001(\006\":\n\'CM"
      "sgClientRemoveFriendFromGroupResponse\022\017\n"
      "\007eresult\030\001 \001(\r\"\033\n\031CMsgClientGetEmoticonL"
      "ist\"\202\001\n\026CMsgClientEmoticonList\022\?\n\temotic"
      "ons\030\001 \003(\0132,.proto.steam.CMsgClientEmotic"
      "onList.Emoticon\032\'\n\010Emoticon\022\014\n\004name\030\001 \001("
      "\t\022\r\n\005count\030\002 \001(\005B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3623);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_clientserver_friends.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5fbase_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fclientserver_5ffriends_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientFriendMsg::kSteamidFieldNumber;
const int CMsgClientFriendMsg::kChatEntryTypeFieldNumber;
const int CMsgClientFriendMsg::kMessageFieldNumber;
const int CMsgClientFriendMsg::kRtime32ServerTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientFriendMsg::CMsgClientFriendMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientFriendMsg)
}
CMsgClientFriendMsg::CMsgClientFriendMsg(const CMsgClientFriendMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&rtime32_server_timestamp_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(rtime32_server_timestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientFriendMsg)
}

void CMsgClientFriendMsg::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&rtime32_server_timestamp_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(rtime32_server_timestamp_));
}

CMsgClientFriendMsg::~CMsgClientFriendMsg() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientFriendMsg)
  SharedDtor();
}

void CMsgClientFriendMsg::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientFriendMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientFriendMsg::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientFriendMsg& CMsgClientFriendMsg::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientFriendMsg* CMsgClientFriendMsg::New(::google::protobuf::Arena* arena) const {
  CMsgClientFriendMsg* n = new CMsgClientFriendMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientFriendMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientFriendMsg)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&rtime32_server_timestamp_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(rtime32_server_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientFriendMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientFriendMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chat_entry_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_chat_entry_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_entry_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 rtime32_server_timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_rtime32_server_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_server_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientFriendMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientFriendMsg)
  return false;
#undef DO_
}

void CMsgClientFriendMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientFriendMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional int32 chat_entry_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chat_entry_type(), output);
  }

  // optional bytes message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->message(), output);
  }

  // optional fixed32 rtime32_server_timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->rtime32_server_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientFriendMsg)
}

::google::protobuf::uint8* CMsgClientFriendMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientFriendMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional int32 chat_entry_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chat_entry_type(), target);
  }

  // optional bytes message = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->message(), target);
  }

  // optional fixed32 rtime32_server_timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->rtime32_server_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientFriendMsg)
  return target;
}

size_t CMsgClientFriendMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientFriendMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional int32 chat_entry_type = 2;
    if (has_chat_entry_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_entry_type());
    }

    // optional fixed32 rtime32_server_timestamp = 4;
    if (has_rtime32_server_timestamp()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientFriendMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientFriendMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientFriendMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientFriendMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientFriendMsg)
    MergeFrom(*source);
  }
}

void CMsgClientFriendMsg::MergeFrom(const CMsgClientFriendMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientFriendMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_entry_type_ = from.chat_entry_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      rtime32_server_timestamp_ = from.rtime32_server_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientFriendMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientFriendMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendMsg::CopyFrom(const CMsgClientFriendMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientFriendMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendMsg::IsInitialized() const {
  return true;
}

void CMsgClientFriendMsg::Swap(CMsgClientFriendMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientFriendMsg::InternalSwap(CMsgClientFriendMsg* other) {
  message_.Swap(&other->message_);
  std::swap(steamid_, other->steamid_);
  std::swap(chat_entry_type_, other->chat_entry_type_);
  std::swap(rtime32_server_timestamp_, other->rtime32_server_timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientFriendMsg::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientFriendMsg

// optional fixed64 steamid = 1;
bool CMsgClientFriendMsg::has_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientFriendMsg::set_has_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientFriendMsg::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientFriendMsg::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgClientFriendMsg::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendMsg.steamid)
  return steamid_;
}
void CMsgClientFriendMsg::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendMsg.steamid)
}

// optional int32 chat_entry_type = 2;
bool CMsgClientFriendMsg::has_chat_entry_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientFriendMsg::set_has_chat_entry_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientFriendMsg::clear_has_chat_entry_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientFriendMsg::clear_chat_entry_type() {
  chat_entry_type_ = 0;
  clear_has_chat_entry_type();
}
::google::protobuf::int32 CMsgClientFriendMsg::chat_entry_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendMsg.chat_entry_type)
  return chat_entry_type_;
}
void CMsgClientFriendMsg::set_chat_entry_type(::google::protobuf::int32 value) {
  set_has_chat_entry_type();
  chat_entry_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendMsg.chat_entry_type)
}

// optional bytes message = 3;
bool CMsgClientFriendMsg::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientFriendMsg::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientFriendMsg::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientFriendMsg::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CMsgClientFriendMsg::message() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendMsg.message)
  return message_.GetNoArena();
}
void CMsgClientFriendMsg::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendMsg.message)
}
#if LANG_CXX11
void CMsgClientFriendMsg::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientFriendMsg.message)
}
#endif
void CMsgClientFriendMsg::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientFriendMsg.message)
}
void CMsgClientFriendMsg::set_message(const void* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientFriendMsg.message)
}
::std::string* CMsgClientFriendMsg::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientFriendMsg.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientFriendMsg::release_message() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientFriendMsg.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientFriendMsg::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientFriendMsg.message)
}

// optional fixed32 rtime32_server_timestamp = 4;
bool CMsgClientFriendMsg::has_rtime32_server_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientFriendMsg::set_has_rtime32_server_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientFriendMsg::clear_has_rtime32_server_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientFriendMsg::clear_rtime32_server_timestamp() {
  rtime32_server_timestamp_ = 0u;
  clear_has_rtime32_server_timestamp();
}
::google::protobuf::uint32 CMsgClientFriendMsg::rtime32_server_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendMsg.rtime32_server_timestamp)
  return rtime32_server_timestamp_;
}
void CMsgClientFriendMsg::set_rtime32_server_timestamp(::google::protobuf::uint32 value) {
  set_has_rtime32_server_timestamp();
  rtime32_server_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendMsg.rtime32_server_timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientFriendMsgIncoming::kSteamidFromFieldNumber;
const int CMsgClientFriendMsgIncoming::kChatEntryTypeFieldNumber;
const int CMsgClientFriendMsgIncoming::kFromLimitedAccountFieldNumber;
const int CMsgClientFriendMsgIncoming::kMessageFieldNumber;
const int CMsgClientFriendMsgIncoming::kRtime32ServerTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientFriendMsgIncoming::CMsgClientFriendMsgIncoming()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientFriendMsgIncoming)
}
CMsgClientFriendMsgIncoming::CMsgClientFriendMsgIncoming(const CMsgClientFriendMsgIncoming& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&steamid_from_, &from.steamid_from_,
    reinterpret_cast<char*>(&rtime32_server_timestamp_) -
    reinterpret_cast<char*>(&steamid_from_) + sizeof(rtime32_server_timestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientFriendMsgIncoming)
}

void CMsgClientFriendMsgIncoming::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_from_, 0, reinterpret_cast<char*>(&rtime32_server_timestamp_) -
    reinterpret_cast<char*>(&steamid_from_) + sizeof(rtime32_server_timestamp_));
}

CMsgClientFriendMsgIncoming::~CMsgClientFriendMsgIncoming() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientFriendMsgIncoming)
  SharedDtor();
}

void CMsgClientFriendMsgIncoming::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientFriendMsgIncoming::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientFriendMsgIncoming::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientFriendMsgIncoming& CMsgClientFriendMsgIncoming::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientFriendMsgIncoming* CMsgClientFriendMsgIncoming::New(::google::protobuf::Arena* arena) const {
  CMsgClientFriendMsgIncoming* n = new CMsgClientFriendMsgIncoming;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientFriendMsgIncoming::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientFriendMsgIncoming)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&steamid_from_, 0, reinterpret_cast<char*>(&rtime32_server_timestamp_) -
      reinterpret_cast<char*>(&steamid_from_) + sizeof(rtime32_server_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientFriendMsgIncoming::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientFriendMsgIncoming)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_from = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid_from();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chat_entry_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_chat_entry_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_entry_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool from_limited_account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_from_limited_account();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_limited_account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 rtime32_server_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_rtime32_server_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_server_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientFriendMsgIncoming)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientFriendMsgIncoming)
  return false;
#undef DO_
}

void CMsgClientFriendMsgIncoming::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientFriendMsgIncoming)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_from = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_from(), output);
  }

  // optional int32 chat_entry_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chat_entry_type(), output);
  }

  // optional bool from_limited_account = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_limited_account(), output);
  }

  // optional bytes message = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->message(), output);
  }

  // optional fixed32 rtime32_server_timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->rtime32_server_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientFriendMsgIncoming)
}

::google::protobuf::uint8* CMsgClientFriendMsgIncoming::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientFriendMsgIncoming)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_from = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_from(), target);
  }

  // optional int32 chat_entry_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chat_entry_type(), target);
  }

  // optional bool from_limited_account = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from_limited_account(), target);
  }

  // optional bytes message = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->message(), target);
  }

  // optional fixed32 rtime32_server_timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->rtime32_server_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientFriendMsgIncoming)
  return target;
}

size_t CMsgClientFriendMsgIncoming::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientFriendMsgIncoming)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

    // optional fixed64 steamid_from = 1;
    if (has_steamid_from()) {
      total_size += 1 + 8;
    }

    // optional int32 chat_entry_type = 2;
    if (has_chat_entry_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_entry_type());
    }

    // optional bool from_limited_account = 3;
    if (has_from_limited_account()) {
      total_size += 1 + 1;
    }

    // optional fixed32 rtime32_server_timestamp = 5;
    if (has_rtime32_server_timestamp()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendMsgIncoming::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientFriendMsgIncoming)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientFriendMsgIncoming* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientFriendMsgIncoming>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientFriendMsgIncoming)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientFriendMsgIncoming)
    MergeFrom(*source);
  }
}

void CMsgClientFriendMsgIncoming::MergeFrom(const CMsgClientFriendMsgIncoming& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientFriendMsgIncoming)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_from_ = from.steamid_from_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_entry_type_ = from.chat_entry_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      from_limited_account_ = from.from_limited_account_;
    }
    if (cached_has_bits & 0x00000010u) {
      rtime32_server_timestamp_ = from.rtime32_server_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientFriendMsgIncoming::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientFriendMsgIncoming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendMsgIncoming::CopyFrom(const CMsgClientFriendMsgIncoming& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientFriendMsgIncoming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendMsgIncoming::IsInitialized() const {
  return true;
}

void CMsgClientFriendMsgIncoming::Swap(CMsgClientFriendMsgIncoming* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientFriendMsgIncoming::InternalSwap(CMsgClientFriendMsgIncoming* other) {
  message_.Swap(&other->message_);
  std::swap(steamid_from_, other->steamid_from_);
  std::swap(chat_entry_type_, other->chat_entry_type_);
  std::swap(from_limited_account_, other->from_limited_account_);
  std::swap(rtime32_server_timestamp_, other->rtime32_server_timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientFriendMsgIncoming::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientFriendMsgIncoming

// optional fixed64 steamid_from = 1;
bool CMsgClientFriendMsgIncoming::has_steamid_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientFriendMsgIncoming::set_has_steamid_from() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientFriendMsgIncoming::clear_has_steamid_from() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientFriendMsgIncoming::clear_steamid_from() {
  steamid_from_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_from();
}
::google::protobuf::uint64 CMsgClientFriendMsgIncoming::steamid_from() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendMsgIncoming.steamid_from)
  return steamid_from_;
}
void CMsgClientFriendMsgIncoming::set_steamid_from(::google::protobuf::uint64 value) {
  set_has_steamid_from();
  steamid_from_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendMsgIncoming.steamid_from)
}

// optional int32 chat_entry_type = 2;
bool CMsgClientFriendMsgIncoming::has_chat_entry_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientFriendMsgIncoming::set_has_chat_entry_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientFriendMsgIncoming::clear_has_chat_entry_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientFriendMsgIncoming::clear_chat_entry_type() {
  chat_entry_type_ = 0;
  clear_has_chat_entry_type();
}
::google::protobuf::int32 CMsgClientFriendMsgIncoming::chat_entry_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendMsgIncoming.chat_entry_type)
  return chat_entry_type_;
}
void CMsgClientFriendMsgIncoming::set_chat_entry_type(::google::protobuf::int32 value) {
  set_has_chat_entry_type();
  chat_entry_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendMsgIncoming.chat_entry_type)
}

// optional bool from_limited_account = 3;
bool CMsgClientFriendMsgIncoming::has_from_limited_account() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientFriendMsgIncoming::set_has_from_limited_account() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientFriendMsgIncoming::clear_has_from_limited_account() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientFriendMsgIncoming::clear_from_limited_account() {
  from_limited_account_ = false;
  clear_has_from_limited_account();
}
bool CMsgClientFriendMsgIncoming::from_limited_account() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendMsgIncoming.from_limited_account)
  return from_limited_account_;
}
void CMsgClientFriendMsgIncoming::set_from_limited_account(bool value) {
  set_has_from_limited_account();
  from_limited_account_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendMsgIncoming.from_limited_account)
}

// optional bytes message = 4;
bool CMsgClientFriendMsgIncoming::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientFriendMsgIncoming::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientFriendMsgIncoming::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientFriendMsgIncoming::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CMsgClientFriendMsgIncoming::message() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendMsgIncoming.message)
  return message_.GetNoArena();
}
void CMsgClientFriendMsgIncoming::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendMsgIncoming.message)
}
#if LANG_CXX11
void CMsgClientFriendMsgIncoming::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientFriendMsgIncoming.message)
}
#endif
void CMsgClientFriendMsgIncoming::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientFriendMsgIncoming.message)
}
void CMsgClientFriendMsgIncoming::set_message(const void* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientFriendMsgIncoming.message)
}
::std::string* CMsgClientFriendMsgIncoming::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientFriendMsgIncoming.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientFriendMsgIncoming::release_message() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientFriendMsgIncoming.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientFriendMsgIncoming::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientFriendMsgIncoming.message)
}

// optional fixed32 rtime32_server_timestamp = 5;
bool CMsgClientFriendMsgIncoming::has_rtime32_server_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientFriendMsgIncoming::set_has_rtime32_server_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientFriendMsgIncoming::clear_has_rtime32_server_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientFriendMsgIncoming::clear_rtime32_server_timestamp() {
  rtime32_server_timestamp_ = 0u;
  clear_has_rtime32_server_timestamp();
}
::google::protobuf::uint32 CMsgClientFriendMsgIncoming::rtime32_server_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendMsgIncoming.rtime32_server_timestamp)
  return rtime32_server_timestamp_;
}
void CMsgClientFriendMsgIncoming::set_rtime32_server_timestamp(::google::protobuf::uint32 value) {
  set_has_rtime32_server_timestamp();
  rtime32_server_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendMsgIncoming.rtime32_server_timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAddFriend::kSteamidToAddFieldNumber;
const int CMsgClientAddFriend::kAccountnameOrEmailToAddFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAddFriend::CMsgClientAddFriend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAddFriend)
}
CMsgClientAddFriend::CMsgClientAddFriend(const CMsgClientAddFriend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accountname_or_email_to_add_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_accountname_or_email_to_add()) {
    accountname_or_email_to_add_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accountname_or_email_to_add_);
  }
  steamid_to_add_ = from.steamid_to_add_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAddFriend)
}

void CMsgClientAddFriend::SharedCtor() {
  _cached_size_ = 0;
  accountname_or_email_to_add_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamid_to_add_ = GOOGLE_ULONGLONG(0);
}

CMsgClientAddFriend::~CMsgClientAddFriend() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAddFriend)
  SharedDtor();
}

void CMsgClientAddFriend::SharedDtor() {
  accountname_or_email_to_add_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAddFriend::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientAddFriend& CMsgClientAddFriend::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientAddFriend* CMsgClientAddFriend::New(::google::protobuf::Arena* arena) const {
  CMsgClientAddFriend* n = new CMsgClientAddFriend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientAddFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAddFriend)
  if (has_accountname_or_email_to_add()) {
    GOOGLE_DCHECK(!accountname_or_email_to_add_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*accountname_or_email_to_add_.UnsafeRawStringPointer())->clear();
  }
  steamid_to_add_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAddFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_to_add = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid_to_add();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_to_add_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string accountname_or_email_to_add = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname_or_email_to_add()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accountname_or_email_to_add().data(), this->accountname_or_email_to_add().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientAddFriend.accountname_or_email_to_add");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAddFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAddFriend)
  return false;
#undef DO_
}

void CMsgClientAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAddFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_to_add = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_to_add(), output);
  }

  // optional string accountname_or_email_to_add = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountname_or_email_to_add().data(), this->accountname_or_email_to_add().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAddFriend.accountname_or_email_to_add");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->accountname_or_email_to_add(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAddFriend)
}

::google::protobuf::uint8* CMsgClientAddFriend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAddFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_to_add = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_to_add(), target);
  }

  // optional string accountname_or_email_to_add = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountname_or_email_to_add().data(), this->accountname_or_email_to_add().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAddFriend.accountname_or_email_to_add");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accountname_or_email_to_add(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAddFriend)
  return target;
}

size_t CMsgClientAddFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAddFriend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string accountname_or_email_to_add = 2;
    if (has_accountname_or_email_to_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname_or_email_to_add());
    }

    // optional fixed64 steamid_to_add = 1;
    if (has_steamid_to_add()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAddFriend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientAddFriend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAddFriend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAddFriend)
    MergeFrom(*source);
  }
}

void CMsgClientAddFriend::MergeFrom(const CMsgClientAddFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_accountname_or_email_to_add();
      accountname_or_email_to_add_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accountname_or_email_to_add_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_to_add_ = from.steamid_to_add_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAddFriend::CopyFrom(const CMsgClientAddFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAddFriend::IsInitialized() const {
  return true;
}

void CMsgClientAddFriend::Swap(CMsgClientAddFriend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAddFriend::InternalSwap(CMsgClientAddFriend* other) {
  accountname_or_email_to_add_.Swap(&other->accountname_or_email_to_add_);
  std::swap(steamid_to_add_, other->steamid_to_add_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientAddFriend::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientAddFriend

// optional fixed64 steamid_to_add = 1;
bool CMsgClientAddFriend::has_steamid_to_add() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientAddFriend::set_has_steamid_to_add() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientAddFriend::clear_has_steamid_to_add() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientAddFriend::clear_steamid_to_add() {
  steamid_to_add_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_to_add();
}
::google::protobuf::uint64 CMsgClientAddFriend::steamid_to_add() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAddFriend.steamid_to_add)
  return steamid_to_add_;
}
void CMsgClientAddFriend::set_steamid_to_add(::google::protobuf::uint64 value) {
  set_has_steamid_to_add();
  steamid_to_add_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAddFriend.steamid_to_add)
}

// optional string accountname_or_email_to_add = 2;
bool CMsgClientAddFriend::has_accountname_or_email_to_add() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientAddFriend::set_has_accountname_or_email_to_add() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientAddFriend::clear_has_accountname_or_email_to_add() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientAddFriend::clear_accountname_or_email_to_add() {
  accountname_or_email_to_add_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_accountname_or_email_to_add();
}
const ::std::string& CMsgClientAddFriend::accountname_or_email_to_add() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAddFriend.accountname_or_email_to_add)
  return accountname_or_email_to_add_.GetNoArena();
}
void CMsgClientAddFriend::set_accountname_or_email_to_add(const ::std::string& value) {
  set_has_accountname_or_email_to_add();
  accountname_or_email_to_add_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAddFriend.accountname_or_email_to_add)
}
#if LANG_CXX11
void CMsgClientAddFriend::set_accountname_or_email_to_add(::std::string&& value) {
  set_has_accountname_or_email_to_add();
  accountname_or_email_to_add_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientAddFriend.accountname_or_email_to_add)
}
#endif
void CMsgClientAddFriend::set_accountname_or_email_to_add(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_accountname_or_email_to_add();
  accountname_or_email_to_add_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientAddFriend.accountname_or_email_to_add)
}
void CMsgClientAddFriend::set_accountname_or_email_to_add(const char* value, size_t size) {
  set_has_accountname_or_email_to_add();
  accountname_or_email_to_add_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientAddFriend.accountname_or_email_to_add)
}
::std::string* CMsgClientAddFriend::mutable_accountname_or_email_to_add() {
  set_has_accountname_or_email_to_add();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientAddFriend.accountname_or_email_to_add)
  return accountname_or_email_to_add_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientAddFriend::release_accountname_or_email_to_add() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientAddFriend.accountname_or_email_to_add)
  clear_has_accountname_or_email_to_add();
  return accountname_or_email_to_add_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientAddFriend::set_allocated_accountname_or_email_to_add(::std::string* accountname_or_email_to_add) {
  if (accountname_or_email_to_add != NULL) {
    set_has_accountname_or_email_to_add();
  } else {
    clear_has_accountname_or_email_to_add();
  }
  accountname_or_email_to_add_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountname_or_email_to_add);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientAddFriend.accountname_or_email_to_add)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAddFriendResponse::kEresultFieldNumber;
const int CMsgClientAddFriendResponse::kSteamIdAddedFieldNumber;
const int CMsgClientAddFriendResponse::kPersonaNameAddedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAddFriendResponse::CMsgClientAddFriendResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAddFriendResponse)
}
CMsgClientAddFriendResponse::CMsgClientAddFriendResponse(const CMsgClientAddFriendResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_added_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name_added()) {
    persona_name_added_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_added_);
  }
  ::memcpy(&steam_id_added_, &from.steam_id_added_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steam_id_added_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAddFriendResponse)
}

void CMsgClientAddFriendResponse::SharedCtor() {
  _cached_size_ = 0;
  persona_name_added_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_added_ = GOOGLE_ULONGLONG(0);
  eresult_ = 2;
}

CMsgClientAddFriendResponse::~CMsgClientAddFriendResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAddFriendResponse)
  SharedDtor();
}

void CMsgClientAddFriendResponse::SharedDtor() {
  persona_name_added_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientAddFriendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAddFriendResponse::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientAddFriendResponse& CMsgClientAddFriendResponse::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientAddFriendResponse* CMsgClientAddFriendResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientAddFriendResponse* n = new CMsgClientAddFriendResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientAddFriendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAddFriendResponse)
  if (has_persona_name_added()) {
    GOOGLE_DCHECK(!persona_name_added_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*persona_name_added_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    steam_id_added_ = GOOGLE_ULONGLONG(0);
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientAddFriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAddFriendResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_added = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_added();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_added_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name_added = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name_added()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name_added().data(), this->persona_name_added().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientAddFriendResponse.persona_name_added");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAddFriendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAddFriendResponse)
  return false;
#undef DO_
}

void CMsgClientAddFriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAddFriendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed64 steam_id_added = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_added(), output);
  }

  // optional string persona_name_added = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name_added().data(), this->persona_name_added().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAddFriendResponse.persona_name_added");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->persona_name_added(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAddFriendResponse)
}

::google::protobuf::uint8* CMsgClientAddFriendResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAddFriendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional fixed64 steam_id_added = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_added(), target);
  }

  // optional string persona_name_added = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name_added().data(), this->persona_name_added().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAddFriendResponse.persona_name_added");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->persona_name_added(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAddFriendResponse)
  return target;
}

size_t CMsgClientAddFriendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAddFriendResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string persona_name_added = 3;
    if (has_persona_name_added()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name_added());
    }

    // optional fixed64 steam_id_added = 2;
    if (has_steam_id_added()) {
      total_size += 1 + 8;
    }

    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAddFriendResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAddFriendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAddFriendResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientAddFriendResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAddFriendResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAddFriendResponse)
    MergeFrom(*source);
  }
}

void CMsgClientAddFriendResponse::MergeFrom(const CMsgClientAddFriendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAddFriendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_persona_name_added();
      persona_name_added_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_added_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_added_ = from.steam_id_added_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAddFriendResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAddFriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAddFriendResponse::CopyFrom(const CMsgClientAddFriendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAddFriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAddFriendResponse::IsInitialized() const {
  return true;
}

void CMsgClientAddFriendResponse::Swap(CMsgClientAddFriendResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAddFriendResponse::InternalSwap(CMsgClientAddFriendResponse* other) {
  persona_name_added_.Swap(&other->persona_name_added_);
  std::swap(steam_id_added_, other->steam_id_added_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientAddFriendResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientAddFriendResponse

// optional int32 eresult = 1 [default = 2];
bool CMsgClientAddFriendResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientAddFriendResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientAddFriendResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientAddFriendResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientAddFriendResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAddFriendResponse.eresult)
  return eresult_;
}
void CMsgClientAddFriendResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAddFriendResponse.eresult)
}

// optional fixed64 steam_id_added = 2;
bool CMsgClientAddFriendResponse::has_steam_id_added() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientAddFriendResponse::set_has_steam_id_added() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientAddFriendResponse::clear_has_steam_id_added() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientAddFriendResponse::clear_steam_id_added() {
  steam_id_added_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_added();
}
::google::protobuf::uint64 CMsgClientAddFriendResponse::steam_id_added() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAddFriendResponse.steam_id_added)
  return steam_id_added_;
}
void CMsgClientAddFriendResponse::set_steam_id_added(::google::protobuf::uint64 value) {
  set_has_steam_id_added();
  steam_id_added_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAddFriendResponse.steam_id_added)
}

// optional string persona_name_added = 3;
bool CMsgClientAddFriendResponse::has_persona_name_added() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientAddFriendResponse::set_has_persona_name_added() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientAddFriendResponse::clear_has_persona_name_added() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientAddFriendResponse::clear_persona_name_added() {
  persona_name_added_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona_name_added();
}
const ::std::string& CMsgClientAddFriendResponse::persona_name_added() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAddFriendResponse.persona_name_added)
  return persona_name_added_.GetNoArena();
}
void CMsgClientAddFriendResponse::set_persona_name_added(const ::std::string& value) {
  set_has_persona_name_added();
  persona_name_added_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAddFriendResponse.persona_name_added)
}
#if LANG_CXX11
void CMsgClientAddFriendResponse::set_persona_name_added(::std::string&& value) {
  set_has_persona_name_added();
  persona_name_added_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientAddFriendResponse.persona_name_added)
}
#endif
void CMsgClientAddFriendResponse::set_persona_name_added(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona_name_added();
  persona_name_added_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientAddFriendResponse.persona_name_added)
}
void CMsgClientAddFriendResponse::set_persona_name_added(const char* value, size_t size) {
  set_has_persona_name_added();
  persona_name_added_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientAddFriendResponse.persona_name_added)
}
::std::string* CMsgClientAddFriendResponse::mutable_persona_name_added() {
  set_has_persona_name_added();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientAddFriendResponse.persona_name_added)
  return persona_name_added_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientAddFriendResponse::release_persona_name_added() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientAddFriendResponse.persona_name_added)
  clear_has_persona_name_added();
  return persona_name_added_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientAddFriendResponse::set_allocated_persona_name_added(::std::string* persona_name_added) {
  if (persona_name_added != NULL) {
    set_has_persona_name_added();
  } else {
    clear_has_persona_name_added();
  }
  persona_name_added_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name_added);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientAddFriendResponse.persona_name_added)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRemoveFriend::kFriendidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRemoveFriend::CMsgClientRemoveFriend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRemoveFriend)
}
CMsgClientRemoveFriend::CMsgClientRemoveFriend(const CMsgClientRemoveFriend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  friendid_ = from.friendid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRemoveFriend)
}

void CMsgClientRemoveFriend::SharedCtor() {
  _cached_size_ = 0;
  friendid_ = GOOGLE_ULONGLONG(0);
}

CMsgClientRemoveFriend::~CMsgClientRemoveFriend() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRemoveFriend)
  SharedDtor();
}

void CMsgClientRemoveFriend::SharedDtor() {
}

void CMsgClientRemoveFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRemoveFriend::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientRemoveFriend& CMsgClientRemoveFriend::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientRemoveFriend* CMsgClientRemoveFriend::New(::google::protobuf::Arena* arena) const {
  CMsgClientRemoveFriend* n = new CMsgClientRemoveFriend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientRemoveFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRemoveFriend)
  friendid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientRemoveFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRemoveFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 friendid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_friendid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &friendid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRemoveFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRemoveFriend)
  return false;
#undef DO_
}

void CMsgClientRemoveFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRemoveFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 friendid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->friendid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRemoveFriend)
}

::google::protobuf::uint8* CMsgClientRemoveFriend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRemoveFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 friendid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->friendid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRemoveFriend)
  return target;
}

size_t CMsgClientRemoveFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRemoveFriend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 friendid = 1;
  if (has_friendid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRemoveFriend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRemoveFriend)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRemoveFriend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientRemoveFriend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRemoveFriend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRemoveFriend)
    MergeFrom(*source);
  }
}

void CMsgClientRemoveFriend::MergeFrom(const CMsgClientRemoveFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRemoveFriend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_friendid()) {
    set_friendid(from.friendid());
  }
}

void CMsgClientRemoveFriend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRemoveFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRemoveFriend::CopyFrom(const CMsgClientRemoveFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRemoveFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRemoveFriend::IsInitialized() const {
  return true;
}

void CMsgClientRemoveFriend::Swap(CMsgClientRemoveFriend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRemoveFriend::InternalSwap(CMsgClientRemoveFriend* other) {
  std::swap(friendid_, other->friendid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientRemoveFriend::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientRemoveFriend

// optional fixed64 friendid = 1;
bool CMsgClientRemoveFriend::has_friendid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientRemoveFriend::set_has_friendid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientRemoveFriend::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientRemoveFriend::clear_friendid() {
  friendid_ = GOOGLE_ULONGLONG(0);
  clear_has_friendid();
}
::google::protobuf::uint64 CMsgClientRemoveFriend::friendid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRemoveFriend.friendid)
  return friendid_;
}
void CMsgClientRemoveFriend::set_friendid(::google::protobuf::uint64 value) {
  set_has_friendid();
  friendid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientRemoveFriend.friendid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientHideFriend::kFriendidFieldNumber;
const int CMsgClientHideFriend::kHideFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientHideFriend::CMsgClientHideFriend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientHideFriend)
}
CMsgClientHideFriend::CMsgClientHideFriend(const CMsgClientHideFriend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&friendid_, &from.friendid_,
    reinterpret_cast<char*>(&hide_) -
    reinterpret_cast<char*>(&friendid_) + sizeof(hide_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientHideFriend)
}

void CMsgClientHideFriend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&friendid_, 0, reinterpret_cast<char*>(&hide_) -
    reinterpret_cast<char*>(&friendid_) + sizeof(hide_));
}

CMsgClientHideFriend::~CMsgClientHideFriend() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientHideFriend)
  SharedDtor();
}

void CMsgClientHideFriend::SharedDtor() {
}

void CMsgClientHideFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientHideFriend::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientHideFriend& CMsgClientHideFriend::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientHideFriend* CMsgClientHideFriend::New(::google::protobuf::Arena* arena) const {
  CMsgClientHideFriend* n = new CMsgClientHideFriend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientHideFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientHideFriend)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&friendid_, 0, reinterpret_cast<char*>(&hide_) -
      reinterpret_cast<char*>(&friendid_) + sizeof(hide_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientHideFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientHideFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 friendid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_friendid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &friendid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hide = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hide();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientHideFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientHideFriend)
  return false;
#undef DO_
}

void CMsgClientHideFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientHideFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 friendid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->friendid(), output);
  }

  // optional bool hide = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hide(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientHideFriend)
}

::google::protobuf::uint8* CMsgClientHideFriend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientHideFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 friendid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->friendid(), target);
  }

  // optional bool hide = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hide(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientHideFriend)
  return target;
}

size_t CMsgClientHideFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientHideFriend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 friendid = 1;
    if (has_friendid()) {
      total_size += 1 + 8;
    }

    // optional bool hide = 2;
    if (has_hide()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientHideFriend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientHideFriend)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientHideFriend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientHideFriend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientHideFriend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientHideFriend)
    MergeFrom(*source);
  }
}

void CMsgClientHideFriend::MergeFrom(const CMsgClientHideFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientHideFriend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      friendid_ = from.friendid_;
    }
    if (cached_has_bits & 0x00000002u) {
      hide_ = from.hide_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientHideFriend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientHideFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientHideFriend::CopyFrom(const CMsgClientHideFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientHideFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientHideFriend::IsInitialized() const {
  return true;
}

void CMsgClientHideFriend::Swap(CMsgClientHideFriend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientHideFriend::InternalSwap(CMsgClientHideFriend* other) {
  std::swap(friendid_, other->friendid_);
  std::swap(hide_, other->hide_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientHideFriend::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientHideFriend

// optional fixed64 friendid = 1;
bool CMsgClientHideFriend::has_friendid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientHideFriend::set_has_friendid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientHideFriend::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientHideFriend::clear_friendid() {
  friendid_ = GOOGLE_ULONGLONG(0);
  clear_has_friendid();
}
::google::protobuf::uint64 CMsgClientHideFriend::friendid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientHideFriend.friendid)
  return friendid_;
}
void CMsgClientHideFriend::set_friendid(::google::protobuf::uint64 value) {
  set_has_friendid();
  friendid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientHideFriend.friendid)
}

// optional bool hide = 2;
bool CMsgClientHideFriend::has_hide() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientHideFriend::set_has_hide() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientHideFriend::clear_has_hide() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientHideFriend::clear_hide() {
  hide_ = false;
  clear_has_hide();
}
bool CMsgClientHideFriend::hide() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientHideFriend.hide)
  return hide_;
}
void CMsgClientHideFriend::set_hide(bool value) {
  set_has_hide();
  hide_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientHideFriend.hide)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientFriendsList_Friend::kUlfriendidFieldNumber;
const int CMsgClientFriendsList_Friend::kEfriendrelationshipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientFriendsList_Friend::CMsgClientFriendsList_Friend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientFriendsList.Friend)
}
CMsgClientFriendsList_Friend::CMsgClientFriendsList_Friend(const CMsgClientFriendsList_Friend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ulfriendid_, &from.ulfriendid_,
    reinterpret_cast<char*>(&efriendrelationship_) -
    reinterpret_cast<char*>(&ulfriendid_) + sizeof(efriendrelationship_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientFriendsList.Friend)
}

void CMsgClientFriendsList_Friend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ulfriendid_, 0, reinterpret_cast<char*>(&efriendrelationship_) -
    reinterpret_cast<char*>(&ulfriendid_) + sizeof(efriendrelationship_));
}

CMsgClientFriendsList_Friend::~CMsgClientFriendsList_Friend() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientFriendsList.Friend)
  SharedDtor();
}

void CMsgClientFriendsList_Friend::SharedDtor() {
}

void CMsgClientFriendsList_Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientFriendsList_Friend::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientFriendsList_Friend& CMsgClientFriendsList_Friend::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientFriendsList_Friend* CMsgClientFriendsList_Friend::New(::google::protobuf::Arena* arena) const {
  CMsgClientFriendsList_Friend* n = new CMsgClientFriendsList_Friend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientFriendsList_Friend::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientFriendsList.Friend)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&ulfriendid_, 0, reinterpret_cast<char*>(&efriendrelationship_) -
      reinterpret_cast<char*>(&ulfriendid_) + sizeof(efriendrelationship_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientFriendsList_Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientFriendsList.Friend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 ulfriendid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_ulfriendid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ulfriendid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 efriendrelationship = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_efriendrelationship();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &efriendrelationship_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientFriendsList.Friend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientFriendsList.Friend)
  return false;
#undef DO_
}

void CMsgClientFriendsList_Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientFriendsList.Friend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 ulfriendid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->ulfriendid(), output);
  }

  // optional uint32 efriendrelationship = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->efriendrelationship(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientFriendsList.Friend)
}

::google::protobuf::uint8* CMsgClientFriendsList_Friend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientFriendsList.Friend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 ulfriendid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->ulfriendid(), target);
  }

  // optional uint32 efriendrelationship = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->efriendrelationship(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientFriendsList.Friend)
  return target;
}

size_t CMsgClientFriendsList_Friend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientFriendsList.Friend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 ulfriendid = 1;
    if (has_ulfriendid()) {
      total_size += 1 + 8;
    }

    // optional uint32 efriendrelationship = 2;
    if (has_efriendrelationship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->efriendrelationship());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendsList_Friend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientFriendsList.Friend)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientFriendsList_Friend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientFriendsList_Friend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientFriendsList.Friend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientFriendsList.Friend)
    MergeFrom(*source);
  }
}

void CMsgClientFriendsList_Friend::MergeFrom(const CMsgClientFriendsList_Friend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientFriendsList.Friend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ulfriendid_ = from.ulfriendid_;
    }
    if (cached_has_bits & 0x00000002u) {
      efriendrelationship_ = from.efriendrelationship_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientFriendsList_Friend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientFriendsList.Friend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendsList_Friend::CopyFrom(const CMsgClientFriendsList_Friend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientFriendsList.Friend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsList_Friend::IsInitialized() const {
  return true;
}

void CMsgClientFriendsList_Friend::Swap(CMsgClientFriendsList_Friend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientFriendsList_Friend::InternalSwap(CMsgClientFriendsList_Friend* other) {
  std::swap(ulfriendid_, other->ulfriendid_);
  std::swap(efriendrelationship_, other->efriendrelationship_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientFriendsList_Friend::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientFriendsList_Friend

// optional fixed64 ulfriendid = 1;
bool CMsgClientFriendsList_Friend::has_ulfriendid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientFriendsList_Friend::set_has_ulfriendid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientFriendsList_Friend::clear_has_ulfriendid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientFriendsList_Friend::clear_ulfriendid() {
  ulfriendid_ = GOOGLE_ULONGLONG(0);
  clear_has_ulfriendid();
}
::google::protobuf::uint64 CMsgClientFriendsList_Friend::ulfriendid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendsList.Friend.ulfriendid)
  return ulfriendid_;
}
void CMsgClientFriendsList_Friend::set_ulfriendid(::google::protobuf::uint64 value) {
  set_has_ulfriendid();
  ulfriendid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendsList.Friend.ulfriendid)
}

// optional uint32 efriendrelationship = 2;
bool CMsgClientFriendsList_Friend::has_efriendrelationship() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientFriendsList_Friend::set_has_efriendrelationship() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientFriendsList_Friend::clear_has_efriendrelationship() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientFriendsList_Friend::clear_efriendrelationship() {
  efriendrelationship_ = 0u;
  clear_has_efriendrelationship();
}
::google::protobuf::uint32 CMsgClientFriendsList_Friend::efriendrelationship() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendsList.Friend.efriendrelationship)
  return efriendrelationship_;
}
void CMsgClientFriendsList_Friend::set_efriendrelationship(::google::protobuf::uint32 value) {
  set_has_efriendrelationship();
  efriendrelationship_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendsList.Friend.efriendrelationship)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientFriendsList::kBincrementalFieldNumber;
const int CMsgClientFriendsList::kFriendsFieldNumber;
const int CMsgClientFriendsList::kMaxFriendCountFieldNumber;
const int CMsgClientFriendsList::kActiveFriendCountFieldNumber;
const int CMsgClientFriendsList::kFriendsLimitHitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientFriendsList::CMsgClientFriendsList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientFriendsList)
}
CMsgClientFriendsList::CMsgClientFriendsList(const CMsgClientFriendsList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_friend_count_, &from.max_friend_count_,
    reinterpret_cast<char*>(&active_friend_count_) -
    reinterpret_cast<char*>(&max_friend_count_) + sizeof(active_friend_count_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientFriendsList)
}

void CMsgClientFriendsList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&max_friend_count_, 0, reinterpret_cast<char*>(&active_friend_count_) -
    reinterpret_cast<char*>(&max_friend_count_) + sizeof(active_friend_count_));
}

CMsgClientFriendsList::~CMsgClientFriendsList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientFriendsList)
  SharedDtor();
}

void CMsgClientFriendsList::SharedDtor() {
}

void CMsgClientFriendsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientFriendsList::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientFriendsList& CMsgClientFriendsList::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientFriendsList* CMsgClientFriendsList::New(::google::protobuf::Arena* arena) const {
  CMsgClientFriendsList* n = new CMsgClientFriendsList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientFriendsList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientFriendsList)
  friends_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&max_friend_count_, 0, reinterpret_cast<char*>(&active_friend_count_) -
      reinterpret_cast<char*>(&max_friend_count_) + sizeof(active_friend_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientFriendsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientFriendsList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bincremental = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_bincremental();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bincremental_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientFriendsList.Friend friends = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_friend_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_max_friend_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_friend_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 active_friend_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_active_friend_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_friend_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool friends_limit_hit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_friends_limit_hit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &friends_limit_hit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientFriendsList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientFriendsList)
  return false;
#undef DO_
}

void CMsgClientFriendsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientFriendsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bincremental = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bincremental(), output);
  }

  // repeated .proto.steam.CMsgClientFriendsList.Friend friends = 2;
  for (unsigned int i = 0, n = this->friends_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friends(i), output);
  }

  // optional uint32 max_friend_count = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_friend_count(), output);
  }

  // optional uint32 active_friend_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->active_friend_count(), output);
  }

  // optional bool friends_limit_hit = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->friends_limit_hit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientFriendsList)
}

::google::protobuf::uint8* CMsgClientFriendsList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientFriendsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bincremental = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bincremental(), target);
  }

  // repeated .proto.steam.CMsgClientFriendsList.Friend friends = 2;
  for (unsigned int i = 0, n = this->friends_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->friends(i), deterministic, target);
  }

  // optional uint32 max_friend_count = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_friend_count(), target);
  }

  // optional uint32 active_friend_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->active_friend_count(), target);
  }

  // optional bool friends_limit_hit = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->friends_limit_hit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientFriendsList)
  return target;
}

size_t CMsgClientFriendsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientFriendsList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientFriendsList.Friend friends = 2;
  {
    unsigned int count = this->friends_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friends(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 max_friend_count = 3;
    if (has_max_friend_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_friend_count());
    }

    // optional bool bincremental = 1;
    if (has_bincremental()) {
      total_size += 1 + 1;
    }

    // optional bool friends_limit_hit = 5;
    if (has_friends_limit_hit()) {
      total_size += 1 + 1;
    }

    // optional uint32 active_friend_count = 4;
    if (has_active_friend_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_friend_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendsList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientFriendsList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientFriendsList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientFriendsList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientFriendsList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientFriendsList)
    MergeFrom(*source);
  }
}

void CMsgClientFriendsList::MergeFrom(const CMsgClientFriendsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientFriendsList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      max_friend_count_ = from.max_friend_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      bincremental_ = from.bincremental_;
    }
    if (cached_has_bits & 0x00000004u) {
      friends_limit_hit_ = from.friends_limit_hit_;
    }
    if (cached_has_bits & 0x00000008u) {
      active_friend_count_ = from.active_friend_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientFriendsList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientFriendsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendsList::CopyFrom(const CMsgClientFriendsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientFriendsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsList::IsInitialized() const {
  return true;
}

void CMsgClientFriendsList::Swap(CMsgClientFriendsList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientFriendsList::InternalSwap(CMsgClientFriendsList* other) {
  friends_.InternalSwap(&other->friends_);
  std::swap(max_friend_count_, other->max_friend_count_);
  std::swap(bincremental_, other->bincremental_);
  std::swap(friends_limit_hit_, other->friends_limit_hit_);
  std::swap(active_friend_count_, other->active_friend_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientFriendsList::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientFriendsList

// optional bool bincremental = 1;
bool CMsgClientFriendsList::has_bincremental() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientFriendsList::set_has_bincremental() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientFriendsList::clear_has_bincremental() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientFriendsList::clear_bincremental() {
  bincremental_ = false;
  clear_has_bincremental();
}
bool CMsgClientFriendsList::bincremental() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendsList.bincremental)
  return bincremental_;
}
void CMsgClientFriendsList::set_bincremental(bool value) {
  set_has_bincremental();
  bincremental_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendsList.bincremental)
}

// repeated .proto.steam.CMsgClientFriendsList.Friend friends = 2;
int CMsgClientFriendsList::friends_size() const {
  return friends_.size();
}
void CMsgClientFriendsList::clear_friends() {
  friends_.Clear();
}
const ::proto::steam::CMsgClientFriendsList_Friend& CMsgClientFriendsList::friends(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendsList.friends)
  return friends_.Get(index);
}
::proto::steam::CMsgClientFriendsList_Friend* CMsgClientFriendsList::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientFriendsList.friends)
  return friends_.Mutable(index);
}
::proto::steam::CMsgClientFriendsList_Friend* CMsgClientFriendsList::add_friends() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientFriendsList.friends)
  return friends_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientFriendsList_Friend >*
CMsgClientFriendsList::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientFriendsList.friends)
  return &friends_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientFriendsList_Friend >&
CMsgClientFriendsList::friends() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientFriendsList.friends)
  return friends_;
}

// optional uint32 max_friend_count = 3;
bool CMsgClientFriendsList::has_max_friend_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientFriendsList::set_has_max_friend_count() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientFriendsList::clear_has_max_friend_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientFriendsList::clear_max_friend_count() {
  max_friend_count_ = 0u;
  clear_has_max_friend_count();
}
::google::protobuf::uint32 CMsgClientFriendsList::max_friend_count() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendsList.max_friend_count)
  return max_friend_count_;
}
void CMsgClientFriendsList::set_max_friend_count(::google::protobuf::uint32 value) {
  set_has_max_friend_count();
  max_friend_count_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendsList.max_friend_count)
}

// optional uint32 active_friend_count = 4;
bool CMsgClientFriendsList::has_active_friend_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientFriendsList::set_has_active_friend_count() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientFriendsList::clear_has_active_friend_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientFriendsList::clear_active_friend_count() {
  active_friend_count_ = 0u;
  clear_has_active_friend_count();
}
::google::protobuf::uint32 CMsgClientFriendsList::active_friend_count() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendsList.active_friend_count)
  return active_friend_count_;
}
void CMsgClientFriendsList::set_active_friend_count(::google::protobuf::uint32 value) {
  set_has_active_friend_count();
  active_friend_count_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendsList.active_friend_count)
}

// optional bool friends_limit_hit = 5;
bool CMsgClientFriendsList::has_friends_limit_hit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientFriendsList::set_has_friends_limit_hit() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientFriendsList::clear_has_friends_limit_hit() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientFriendsList::clear_friends_limit_hit() {
  friends_limit_hit_ = false;
  clear_has_friends_limit_hit();
}
bool CMsgClientFriendsList::friends_limit_hit() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendsList.friends_limit_hit)
  return friends_limit_hit_;
}
void CMsgClientFriendsList::set_friends_limit_hit(bool value) {
  set_has_friends_limit_hit();
  friends_limit_hit_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendsList.friends_limit_hit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientFriendsGroupsList_FriendGroup::kNGroupIDFieldNumber;
const int CMsgClientFriendsGroupsList_FriendGroup::kStrGroupNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientFriendsGroupsList_FriendGroup::CMsgClientFriendsGroupsList_FriendGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
}
CMsgClientFriendsGroupsList_FriendGroup::CMsgClientFriendsGroupsList_FriendGroup(const CMsgClientFriendsGroupsList_FriendGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strgroupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_strgroupname()) {
    strgroupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strgroupname_);
  }
  ngroupid_ = from.ngroupid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
}

void CMsgClientFriendsGroupsList_FriendGroup::SharedCtor() {
  _cached_size_ = 0;
  strgroupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ngroupid_ = 0;
}

CMsgClientFriendsGroupsList_FriendGroup::~CMsgClientFriendsGroupsList_FriendGroup() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  SharedDtor();
}

void CMsgClientFriendsGroupsList_FriendGroup::SharedDtor() {
  strgroupname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientFriendsGroupsList_FriendGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientFriendsGroupsList_FriendGroup::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientFriendsGroupsList_FriendGroup& CMsgClientFriendsGroupsList_FriendGroup::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientFriendsGroupsList_FriendGroup* CMsgClientFriendsGroupsList_FriendGroup::New(::google::protobuf::Arena* arena) const {
  CMsgClientFriendsGroupsList_FriendGroup* n = new CMsgClientFriendsGroupsList_FriendGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientFriendsGroupsList_FriendGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  if (has_strgroupname()) {
    GOOGLE_DCHECK(!strgroupname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*strgroupname_.UnsafeRawStringPointer())->clear();
  }
  ngroupid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientFriendsGroupsList_FriendGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nGroupID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ngroupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngroupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string strGroupName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strgroupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strgroupname().data(), this->strgroupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientFriendsGroupsList.FriendGroup.strGroupName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  return false;
#undef DO_
}

void CMsgClientFriendsGroupsList_FriendGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nGroupID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ngroupid(), output);
  }

  // optional string strGroupName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strgroupname().data(), this->strgroupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendsGroupsList.FriendGroup.strGroupName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strgroupname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
}

::google::protobuf::uint8* CMsgClientFriendsGroupsList_FriendGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nGroupID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ngroupid(), target);
  }

  // optional string strGroupName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strgroupname().data(), this->strgroupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendsGroupsList.FriendGroup.strGroupName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strgroupname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  return target;
}

size_t CMsgClientFriendsGroupsList_FriendGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string strGroupName = 2;
    if (has_strgroupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strgroupname());
    }

    // optional int32 nGroupID = 1;
    if (has_ngroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngroupid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendsGroupsList_FriendGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientFriendsGroupsList_FriendGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientFriendsGroupsList_FriendGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
    MergeFrom(*source);
  }
}

void CMsgClientFriendsGroupsList_FriendGroup::MergeFrom(const CMsgClientFriendsGroupsList_FriendGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_strgroupname();
      strgroupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strgroupname_);
    }
    if (cached_has_bits & 0x00000002u) {
      ngroupid_ = from.ngroupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientFriendsGroupsList_FriendGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendsGroupsList_FriendGroup::CopyFrom(const CMsgClientFriendsGroupsList_FriendGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsGroupsList_FriendGroup::IsInitialized() const {
  return true;
}

void CMsgClientFriendsGroupsList_FriendGroup::Swap(CMsgClientFriendsGroupsList_FriendGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientFriendsGroupsList_FriendGroup::InternalSwap(CMsgClientFriendsGroupsList_FriendGroup* other) {
  strgroupname_.Swap(&other->strgroupname_);
  std::swap(ngroupid_, other->ngroupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientFriendsGroupsList_FriendGroup::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientFriendsGroupsList_FriendGroup

// optional int32 nGroupID = 1;
bool CMsgClientFriendsGroupsList_FriendGroup::has_ngroupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientFriendsGroupsList_FriendGroup::set_has_ngroupid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientFriendsGroupsList_FriendGroup::clear_has_ngroupid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientFriendsGroupsList_FriendGroup::clear_ngroupid() {
  ngroupid_ = 0;
  clear_has_ngroupid();
}
::google::protobuf::int32 CMsgClientFriendsGroupsList_FriendGroup::ngroupid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendsGroupsList.FriendGroup.nGroupID)
  return ngroupid_;
}
void CMsgClientFriendsGroupsList_FriendGroup::set_ngroupid(::google::protobuf::int32 value) {
  set_has_ngroupid();
  ngroupid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendsGroupsList.FriendGroup.nGroupID)
}

// optional string strGroupName = 2;
bool CMsgClientFriendsGroupsList_FriendGroup::has_strgroupname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientFriendsGroupsList_FriendGroup::set_has_strgroupname() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientFriendsGroupsList_FriendGroup::clear_has_strgroupname() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientFriendsGroupsList_FriendGroup::clear_strgroupname() {
  strgroupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_strgroupname();
}
const ::std::string& CMsgClientFriendsGroupsList_FriendGroup::strgroupname() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendsGroupsList.FriendGroup.strGroupName)
  return strgroupname_.GetNoArena();
}
void CMsgClientFriendsGroupsList_FriendGroup::set_strgroupname(const ::std::string& value) {
  set_has_strgroupname();
  strgroupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendsGroupsList.FriendGroup.strGroupName)
}
#if LANG_CXX11
void CMsgClientFriendsGroupsList_FriendGroup::set_strgroupname(::std::string&& value) {
  set_has_strgroupname();
  strgroupname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientFriendsGroupsList.FriendGroup.strGroupName)
}
#endif
void CMsgClientFriendsGroupsList_FriendGroup::set_strgroupname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_strgroupname();
  strgroupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientFriendsGroupsList.FriendGroup.strGroupName)
}
void CMsgClientFriendsGroupsList_FriendGroup::set_strgroupname(const char* value, size_t size) {
  set_has_strgroupname();
  strgroupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientFriendsGroupsList.FriendGroup.strGroupName)
}
::std::string* CMsgClientFriendsGroupsList_FriendGroup::mutable_strgroupname() {
  set_has_strgroupname();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientFriendsGroupsList.FriendGroup.strGroupName)
  return strgroupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientFriendsGroupsList_FriendGroup::release_strgroupname() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientFriendsGroupsList.FriendGroup.strGroupName)
  clear_has_strgroupname();
  return strgroupname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientFriendsGroupsList_FriendGroup::set_allocated_strgroupname(::std::string* strgroupname) {
  if (strgroupname != NULL) {
    set_has_strgroupname();
  } else {
    clear_has_strgroupname();
  }
  strgroupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strgroupname);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientFriendsGroupsList.FriendGroup.strGroupName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientFriendsGroupsList_FriendGroupsMembership::kUlSteamIDFieldNumber;
const int CMsgClientFriendsGroupsList_FriendGroupsMembership::kNGroupIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientFriendsGroupsList_FriendGroupsMembership::CMsgClientFriendsGroupsList_FriendGroupsMembership()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
}
CMsgClientFriendsGroupsList_FriendGroupsMembership::CMsgClientFriendsGroupsList_FriendGroupsMembership(const CMsgClientFriendsGroupsList_FriendGroupsMembership& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ulsteamid_, &from.ulsteamid_,
    reinterpret_cast<char*>(&ngroupid_) -
    reinterpret_cast<char*>(&ulsteamid_) + sizeof(ngroupid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ulsteamid_, 0, reinterpret_cast<char*>(&ngroupid_) -
    reinterpret_cast<char*>(&ulsteamid_) + sizeof(ngroupid_));
}

CMsgClientFriendsGroupsList_FriendGroupsMembership::~CMsgClientFriendsGroupsList_FriendGroupsMembership() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  SharedDtor();
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::SharedDtor() {
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientFriendsGroupsList_FriendGroupsMembership::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientFriendsGroupsList_FriendGroupsMembership& CMsgClientFriendsGroupsList_FriendGroupsMembership::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientFriendsGroupsList_FriendGroupsMembership* CMsgClientFriendsGroupsList_FriendGroupsMembership::New(::google::protobuf::Arena* arena) const {
  CMsgClientFriendsGroupsList_FriendGroupsMembership* n = new CMsgClientFriendsGroupsList_FriendGroupsMembership;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&ulsteamid_, 0, reinterpret_cast<char*>(&ngroupid_) -
      reinterpret_cast<char*>(&ulsteamid_) + sizeof(ngroupid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientFriendsGroupsList_FriendGroupsMembership::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 ulSteamID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_ulsteamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ulsteamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nGroupID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ngroupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngroupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  return false;
#undef DO_
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 ulSteamID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->ulsteamid(), output);
  }

  // optional int32 nGroupID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ngroupid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
}

::google::protobuf::uint8* CMsgClientFriendsGroupsList_FriendGroupsMembership::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 ulSteamID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->ulsteamid(), target);
  }

  // optional int32 nGroupID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ngroupid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  return target;
}

size_t CMsgClientFriendsGroupsList_FriendGroupsMembership::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 ulSteamID = 1;
    if (has_ulsteamid()) {
      total_size += 1 + 8;
    }

    // optional int32 nGroupID = 2;
    if (has_ngroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngroupid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientFriendsGroupsList_FriendGroupsMembership* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientFriendsGroupsList_FriendGroupsMembership>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
    MergeFrom(*source);
  }
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::MergeFrom(const CMsgClientFriendsGroupsList_FriendGroupsMembership& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ulsteamid_ = from.ulsteamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      ngroupid_ = from.ngroupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::CopyFrom(const CMsgClientFriendsGroupsList_FriendGroupsMembership& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsGroupsList_FriendGroupsMembership::IsInitialized() const {
  return true;
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::Swap(CMsgClientFriendsGroupsList_FriendGroupsMembership* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientFriendsGroupsList_FriendGroupsMembership::InternalSwap(CMsgClientFriendsGroupsList_FriendGroupsMembership* other) {
  std::swap(ulsteamid_, other->ulsteamid_);
  std::swap(ngroupid_, other->ngroupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientFriendsGroupsList_FriendGroupsMembership::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientFriendsGroupsList_FriendGroupsMembership

// optional fixed64 ulSteamID = 1;
bool CMsgClientFriendsGroupsList_FriendGroupsMembership::has_ulsteamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientFriendsGroupsList_FriendGroupsMembership::set_has_ulsteamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientFriendsGroupsList_FriendGroupsMembership::clear_has_ulsteamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientFriendsGroupsList_FriendGroupsMembership::clear_ulsteamid() {
  ulsteamid_ = GOOGLE_ULONGLONG(0);
  clear_has_ulsteamid();
}
::google::protobuf::uint64 CMsgClientFriendsGroupsList_FriendGroupsMembership::ulsteamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership.ulSteamID)
  return ulsteamid_;
}
void CMsgClientFriendsGroupsList_FriendGroupsMembership::set_ulsteamid(::google::protobuf::uint64 value) {
  set_has_ulsteamid();
  ulsteamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership.ulSteamID)
}

// optional int32 nGroupID = 2;
bool CMsgClientFriendsGroupsList_FriendGroupsMembership::has_ngroupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientFriendsGroupsList_FriendGroupsMembership::set_has_ngroupid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientFriendsGroupsList_FriendGroupsMembership::clear_has_ngroupid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientFriendsGroupsList_FriendGroupsMembership::clear_ngroupid() {
  ngroupid_ = 0;
  clear_has_ngroupid();
}
::google::protobuf::int32 CMsgClientFriendsGroupsList_FriendGroupsMembership::ngroupid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership.nGroupID)
  return ngroupid_;
}
void CMsgClientFriendsGroupsList_FriendGroupsMembership::set_ngroupid(::google::protobuf::int32 value) {
  set_has_ngroupid();
  ngroupid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership.nGroupID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientFriendsGroupsList::kBremovalFieldNumber;
const int CMsgClientFriendsGroupsList::kBincrementalFieldNumber;
const int CMsgClientFriendsGroupsList::kFriendGroupsFieldNumber;
const int CMsgClientFriendsGroupsList::kMembershipsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientFriendsGroupsList::CMsgClientFriendsGroupsList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientFriendsGroupsList)
}
CMsgClientFriendsGroupsList::CMsgClientFriendsGroupsList(const CMsgClientFriendsGroupsList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      friendgroups_(from.friendgroups_),
      memberships_(from.memberships_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bremoval_, &from.bremoval_,
    reinterpret_cast<char*>(&bincremental_) -
    reinterpret_cast<char*>(&bremoval_) + sizeof(bincremental_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientFriendsGroupsList)
}

void CMsgClientFriendsGroupsList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bremoval_, 0, reinterpret_cast<char*>(&bincremental_) -
    reinterpret_cast<char*>(&bremoval_) + sizeof(bincremental_));
}

CMsgClientFriendsGroupsList::~CMsgClientFriendsGroupsList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientFriendsGroupsList)
  SharedDtor();
}

void CMsgClientFriendsGroupsList::SharedDtor() {
}

void CMsgClientFriendsGroupsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientFriendsGroupsList::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientFriendsGroupsList& CMsgClientFriendsGroupsList::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientFriendsGroupsList* CMsgClientFriendsGroupsList::New(::google::protobuf::Arena* arena) const {
  CMsgClientFriendsGroupsList* n = new CMsgClientFriendsGroupsList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientFriendsGroupsList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientFriendsGroupsList)
  friendgroups_.Clear();
  memberships_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&bremoval_, 0, reinterpret_cast<char*>(&bincremental_) -
      reinterpret_cast<char*>(&bremoval_) + sizeof(bincremental_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientFriendsGroupsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientFriendsGroupsList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bremoval = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_bremoval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bremoval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bincremental = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bincremental();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bincremental_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendgroups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberships()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientFriendsGroupsList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientFriendsGroupsList)
  return false;
#undef DO_
}

void CMsgClientFriendsGroupsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientFriendsGroupsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bremoval = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bremoval(), output);
  }

  // optional bool bincremental = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bincremental(), output);
  }

  // repeated .proto.steam.CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
  for (unsigned int i = 0, n = this->friendgroups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->friendgroups(i), output);
  }

  // repeated .proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
  for (unsigned int i = 0, n = this->memberships_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->memberships(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientFriendsGroupsList)
}

::google::protobuf::uint8* CMsgClientFriendsGroupsList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientFriendsGroupsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bremoval = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bremoval(), target);
  }

  // optional bool bincremental = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bincremental(), target);
  }

  // repeated .proto.steam.CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
  for (unsigned int i = 0, n = this->friendgroups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->friendgroups(i), deterministic, target);
  }

  // repeated .proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
  for (unsigned int i = 0, n = this->memberships_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->memberships(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientFriendsGroupsList)
  return target;
}

size_t CMsgClientFriendsGroupsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientFriendsGroupsList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
  {
    unsigned int count = this->friendgroups_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendgroups(i));
    }
  }

  // repeated .proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
  {
    unsigned int count = this->memberships_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberships(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bool bremoval = 1;
    if (has_bremoval()) {
      total_size += 1 + 1;
    }

    // optional bool bincremental = 2;
    if (has_bincremental()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendsGroupsList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientFriendsGroupsList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientFriendsGroupsList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientFriendsGroupsList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientFriendsGroupsList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientFriendsGroupsList)
    MergeFrom(*source);
  }
}

void CMsgClientFriendsGroupsList::MergeFrom(const CMsgClientFriendsGroupsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientFriendsGroupsList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friendgroups_.MergeFrom(from.friendgroups_);
  memberships_.MergeFrom(from.memberships_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      bremoval_ = from.bremoval_;
    }
    if (cached_has_bits & 0x00000002u) {
      bincremental_ = from.bincremental_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientFriendsGroupsList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientFriendsGroupsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendsGroupsList::CopyFrom(const CMsgClientFriendsGroupsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientFriendsGroupsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsGroupsList::IsInitialized() const {
  return true;
}

void CMsgClientFriendsGroupsList::Swap(CMsgClientFriendsGroupsList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientFriendsGroupsList::InternalSwap(CMsgClientFriendsGroupsList* other) {
  friendgroups_.InternalSwap(&other->friendgroups_);
  memberships_.InternalSwap(&other->memberships_);
  std::swap(bremoval_, other->bremoval_);
  std::swap(bincremental_, other->bincremental_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientFriendsGroupsList::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientFriendsGroupsList

// optional bool bremoval = 1;
bool CMsgClientFriendsGroupsList::has_bremoval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientFriendsGroupsList::set_has_bremoval() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientFriendsGroupsList::clear_has_bremoval() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientFriendsGroupsList::clear_bremoval() {
  bremoval_ = false;
  clear_has_bremoval();
}
bool CMsgClientFriendsGroupsList::bremoval() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendsGroupsList.bremoval)
  return bremoval_;
}
void CMsgClientFriendsGroupsList::set_bremoval(bool value) {
  set_has_bremoval();
  bremoval_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendsGroupsList.bremoval)
}

// optional bool bincremental = 2;
bool CMsgClientFriendsGroupsList::has_bincremental() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientFriendsGroupsList::set_has_bincremental() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientFriendsGroupsList::clear_has_bincremental() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientFriendsGroupsList::clear_bincremental() {
  bincremental_ = false;
  clear_has_bincremental();
}
bool CMsgClientFriendsGroupsList::bincremental() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendsGroupsList.bincremental)
  return bincremental_;
}
void CMsgClientFriendsGroupsList::set_bincremental(bool value) {
  set_has_bincremental();
  bincremental_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendsGroupsList.bincremental)
}

// repeated .proto.steam.CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
int CMsgClientFriendsGroupsList::friendgroups_size() const {
  return friendgroups_.size();
}
void CMsgClientFriendsGroupsList::clear_friendgroups() {
  friendgroups_.Clear();
}
const ::proto::steam::CMsgClientFriendsGroupsList_FriendGroup& CMsgClientFriendsGroupsList::friendgroups(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendsGroupsList.friendGroups)
  return friendgroups_.Get(index);
}
::proto::steam::CMsgClientFriendsGroupsList_FriendGroup* CMsgClientFriendsGroupsList::mutable_friendgroups(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientFriendsGroupsList.friendGroups)
  return friendgroups_.Mutable(index);
}
::proto::steam::CMsgClientFriendsGroupsList_FriendGroup* CMsgClientFriendsGroupsList::add_friendgroups() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientFriendsGroupsList.friendGroups)
  return friendgroups_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientFriendsGroupsList_FriendGroup >*
CMsgClientFriendsGroupsList::mutable_friendgroups() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientFriendsGroupsList.friendGroups)
  return &friendgroups_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientFriendsGroupsList_FriendGroup >&
CMsgClientFriendsGroupsList::friendgroups() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientFriendsGroupsList.friendGroups)
  return friendgroups_;
}

// repeated .proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
int CMsgClientFriendsGroupsList::memberships_size() const {
  return memberships_.size();
}
void CMsgClientFriendsGroupsList::clear_memberships() {
  memberships_.Clear();
}
const ::proto::steam::CMsgClientFriendsGroupsList_FriendGroupsMembership& CMsgClientFriendsGroupsList::memberships(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendsGroupsList.memberships)
  return memberships_.Get(index);
}
::proto::steam::CMsgClientFriendsGroupsList_FriendGroupsMembership* CMsgClientFriendsGroupsList::mutable_memberships(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientFriendsGroupsList.memberships)
  return memberships_.Mutable(index);
}
::proto::steam::CMsgClientFriendsGroupsList_FriendGroupsMembership* CMsgClientFriendsGroupsList::add_memberships() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientFriendsGroupsList.memberships)
  return memberships_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientFriendsGroupsList_FriendGroupsMembership >*
CMsgClientFriendsGroupsList::mutable_memberships() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientFriendsGroupsList.memberships)
  return &memberships_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientFriendsGroupsList_FriendGroupsMembership >&
CMsgClientFriendsGroupsList::memberships() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientFriendsGroupsList.memberships)
  return memberships_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPlayerNicknameList_PlayerNickname::kSteamidFieldNumber;
const int CMsgClientPlayerNicknameList_PlayerNickname::kNicknameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPlayerNicknameList_PlayerNickname::CMsgClientPlayerNicknameList_PlayerNickname()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
}
CMsgClientPlayerNicknameList_PlayerNickname::CMsgClientPlayerNicknameList_PlayerNickname(const CMsgClientPlayerNicknameList_PlayerNickname& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
}

void CMsgClientPlayerNicknameList_PlayerNickname::SharedCtor() {
  _cached_size_ = 0;
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamid_ = GOOGLE_ULONGLONG(0);
}

CMsgClientPlayerNicknameList_PlayerNickname::~CMsgClientPlayerNicknameList_PlayerNickname() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  SharedDtor();
}

void CMsgClientPlayerNicknameList_PlayerNickname::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientPlayerNicknameList_PlayerNickname::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPlayerNicknameList_PlayerNickname::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientPlayerNicknameList_PlayerNickname& CMsgClientPlayerNicknameList_PlayerNickname::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientPlayerNicknameList_PlayerNickname* CMsgClientPlayerNicknameList_PlayerNickname::New(::google::protobuf::Arena* arena) const {
  CMsgClientPlayerNicknameList_PlayerNickname* n = new CMsgClientPlayerNicknameList_PlayerNickname;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientPlayerNicknameList_PlayerNickname::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  if (has_nickname()) {
    GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*nickname_.UnsafeRawStringPointer())->clear();
  }
  steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientPlayerNicknameList_PlayerNickname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientPlayerNicknameList.PlayerNickname.nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  return false;
#undef DO_
}

void CMsgClientPlayerNicknameList_PlayerNickname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string nickname = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPlayerNicknameList.PlayerNickname.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
}

::google::protobuf::uint8* CMsgClientPlayerNicknameList_PlayerNickname::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional string nickname = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPlayerNicknameList.PlayerNickname.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  return target;
}

size_t CMsgClientPlayerNicknameList_PlayerNickname::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPlayerNicknameList_PlayerNickname::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPlayerNicknameList_PlayerNickname* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientPlayerNicknameList_PlayerNickname>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
    MergeFrom(*source);
  }
}

void CMsgClientPlayerNicknameList_PlayerNickname::MergeFrom(const CMsgClientPlayerNicknameList_PlayerNickname& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPlayerNicknameList_PlayerNickname::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPlayerNicknameList_PlayerNickname::CopyFrom(const CMsgClientPlayerNicknameList_PlayerNickname& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPlayerNicknameList_PlayerNickname::IsInitialized() const {
  return true;
}

void CMsgClientPlayerNicknameList_PlayerNickname::Swap(CMsgClientPlayerNicknameList_PlayerNickname* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPlayerNicknameList_PlayerNickname::InternalSwap(CMsgClientPlayerNicknameList_PlayerNickname* other) {
  nickname_.Swap(&other->nickname_);
  std::swap(steamid_, other->steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientPlayerNicknameList_PlayerNickname::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientPlayerNicknameList_PlayerNickname

// optional fixed64 steamid = 1;
bool CMsgClientPlayerNicknameList_PlayerNickname::has_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientPlayerNicknameList_PlayerNickname::set_has_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientPlayerNicknameList_PlayerNickname::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientPlayerNicknameList_PlayerNickname::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgClientPlayerNicknameList_PlayerNickname::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname.steamid)
  return steamid_;
}
void CMsgClientPlayerNicknameList_PlayerNickname::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname.steamid)
}

// optional string nickname = 3;
bool CMsgClientPlayerNicknameList_PlayerNickname::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientPlayerNicknameList_PlayerNickname::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientPlayerNicknameList_PlayerNickname::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientPlayerNicknameList_PlayerNickname::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& CMsgClientPlayerNicknameList_PlayerNickname::nickname() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname.nickname)
  return nickname_.GetNoArena();
}
void CMsgClientPlayerNicknameList_PlayerNickname::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname.nickname)
}
#if LANG_CXX11
void CMsgClientPlayerNicknameList_PlayerNickname::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname.nickname)
}
#endif
void CMsgClientPlayerNicknameList_PlayerNickname::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname.nickname)
}
void CMsgClientPlayerNicknameList_PlayerNickname::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname.nickname)
}
::std::string* CMsgClientPlayerNicknameList_PlayerNickname::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientPlayerNicknameList_PlayerNickname::release_nickname() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientPlayerNicknameList_PlayerNickname::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname.nickname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPlayerNicknameList::kRemovalFieldNumber;
const int CMsgClientPlayerNicknameList::kIncrementalFieldNumber;
const int CMsgClientPlayerNicknameList::kNicknamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPlayerNicknameList::CMsgClientPlayerNicknameList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPlayerNicknameList)
}
CMsgClientPlayerNicknameList::CMsgClientPlayerNicknameList(const CMsgClientPlayerNicknameList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      nicknames_(from.nicknames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&removal_, &from.removal_,
    reinterpret_cast<char*>(&incremental_) -
    reinterpret_cast<char*>(&removal_) + sizeof(incremental_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPlayerNicknameList)
}

void CMsgClientPlayerNicknameList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&removal_, 0, reinterpret_cast<char*>(&incremental_) -
    reinterpret_cast<char*>(&removal_) + sizeof(incremental_));
}

CMsgClientPlayerNicknameList::~CMsgClientPlayerNicknameList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPlayerNicknameList)
  SharedDtor();
}

void CMsgClientPlayerNicknameList::SharedDtor() {
}

void CMsgClientPlayerNicknameList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPlayerNicknameList::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientPlayerNicknameList& CMsgClientPlayerNicknameList::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientPlayerNicknameList* CMsgClientPlayerNicknameList::New(::google::protobuf::Arena* arena) const {
  CMsgClientPlayerNicknameList* n = new CMsgClientPlayerNicknameList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientPlayerNicknameList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPlayerNicknameList)
  nicknames_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&removal_, 0, reinterpret_cast<char*>(&incremental_) -
      reinterpret_cast<char*>(&removal_) + sizeof(incremental_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientPlayerNicknameList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPlayerNicknameList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool removal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_removal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool incremental = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_incremental();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incremental_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nicknames()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPlayerNicknameList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPlayerNicknameList)
  return false;
#undef DO_
}

void CMsgClientPlayerNicknameList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPlayerNicknameList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool removal = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->removal(), output);
  }

  // optional bool incremental = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->incremental(), output);
  }

  // repeated .proto.steam.CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
  for (unsigned int i = 0, n = this->nicknames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nicknames(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPlayerNicknameList)
}

::google::protobuf::uint8* CMsgClientPlayerNicknameList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPlayerNicknameList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool removal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->removal(), target);
  }

  // optional bool incremental = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->incremental(), target);
  }

  // repeated .proto.steam.CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
  for (unsigned int i = 0, n = this->nicknames_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->nicknames(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPlayerNicknameList)
  return target;
}

size_t CMsgClientPlayerNicknameList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPlayerNicknameList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
  {
    unsigned int count = this->nicknames_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nicknames(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bool removal = 1;
    if (has_removal()) {
      total_size += 1 + 1;
    }

    // optional bool incremental = 2;
    if (has_incremental()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPlayerNicknameList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPlayerNicknameList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPlayerNicknameList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientPlayerNicknameList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPlayerNicknameList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPlayerNicknameList)
    MergeFrom(*source);
  }
}

void CMsgClientPlayerNicknameList::MergeFrom(const CMsgClientPlayerNicknameList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPlayerNicknameList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nicknames_.MergeFrom(from.nicknames_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      removal_ = from.removal_;
    }
    if (cached_has_bits & 0x00000002u) {
      incremental_ = from.incremental_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPlayerNicknameList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPlayerNicknameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPlayerNicknameList::CopyFrom(const CMsgClientPlayerNicknameList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPlayerNicknameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPlayerNicknameList::IsInitialized() const {
  return true;
}

void CMsgClientPlayerNicknameList::Swap(CMsgClientPlayerNicknameList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPlayerNicknameList::InternalSwap(CMsgClientPlayerNicknameList* other) {
  nicknames_.InternalSwap(&other->nicknames_);
  std::swap(removal_, other->removal_);
  std::swap(incremental_, other->incremental_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientPlayerNicknameList::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientPlayerNicknameList

// optional bool removal = 1;
bool CMsgClientPlayerNicknameList::has_removal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientPlayerNicknameList::set_has_removal() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientPlayerNicknameList::clear_has_removal() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientPlayerNicknameList::clear_removal() {
  removal_ = false;
  clear_has_removal();
}
bool CMsgClientPlayerNicknameList::removal() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPlayerNicknameList.removal)
  return removal_;
}
void CMsgClientPlayerNicknameList::set_removal(bool value) {
  set_has_removal();
  removal_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPlayerNicknameList.removal)
}

// optional bool incremental = 2;
bool CMsgClientPlayerNicknameList::has_incremental() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientPlayerNicknameList::set_has_incremental() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientPlayerNicknameList::clear_has_incremental() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientPlayerNicknameList::clear_incremental() {
  incremental_ = false;
  clear_has_incremental();
}
bool CMsgClientPlayerNicknameList::incremental() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPlayerNicknameList.incremental)
  return incremental_;
}
void CMsgClientPlayerNicknameList::set_incremental(bool value) {
  set_has_incremental();
  incremental_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPlayerNicknameList.incremental)
}

// repeated .proto.steam.CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
int CMsgClientPlayerNicknameList::nicknames_size() const {
  return nicknames_.size();
}
void CMsgClientPlayerNicknameList::clear_nicknames() {
  nicknames_.Clear();
}
const ::proto::steam::CMsgClientPlayerNicknameList_PlayerNickname& CMsgClientPlayerNicknameList::nicknames(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPlayerNicknameList.nicknames)
  return nicknames_.Get(index);
}
::proto::steam::CMsgClientPlayerNicknameList_PlayerNickname* CMsgClientPlayerNicknameList::mutable_nicknames(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPlayerNicknameList.nicknames)
  return nicknames_.Mutable(index);
}
::proto::steam::CMsgClientPlayerNicknameList_PlayerNickname* CMsgClientPlayerNicknameList::add_nicknames() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientPlayerNicknameList.nicknames)
  return nicknames_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientPlayerNicknameList_PlayerNickname >*
CMsgClientPlayerNicknameList::mutable_nicknames() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientPlayerNicknameList.nicknames)
  return &nicknames_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientPlayerNicknameList_PlayerNickname >&
CMsgClientPlayerNicknameList::nicknames() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientPlayerNicknameList.nicknames)
  return nicknames_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSetPlayerNickname::kSteamidFieldNumber;
const int CMsgClientSetPlayerNickname::kNicknameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSetPlayerNickname::CMsgClientSetPlayerNickname()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSetPlayerNickname)
}
CMsgClientSetPlayerNickname::CMsgClientSetPlayerNickname(const CMsgClientSetPlayerNickname& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSetPlayerNickname)
}

void CMsgClientSetPlayerNickname::SharedCtor() {
  _cached_size_ = 0;
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamid_ = GOOGLE_ULONGLONG(0);
}

CMsgClientSetPlayerNickname::~CMsgClientSetPlayerNickname() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSetPlayerNickname)
  SharedDtor();
}

void CMsgClientSetPlayerNickname::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientSetPlayerNickname::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientSetPlayerNickname::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientSetPlayerNickname& CMsgClientSetPlayerNickname::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientSetPlayerNickname* CMsgClientSetPlayerNickname::New(::google::protobuf::Arena* arena) const {
  CMsgClientSetPlayerNickname* n = new CMsgClientSetPlayerNickname;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientSetPlayerNickname::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSetPlayerNickname)
  if (has_nickname()) {
    GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*nickname_.UnsafeRawStringPointer())->clear();
  }
  steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientSetPlayerNickname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSetPlayerNickname)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientSetPlayerNickname.nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSetPlayerNickname)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSetPlayerNickname)
  return false;
#undef DO_
}

void CMsgClientSetPlayerNickname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSetPlayerNickname)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientSetPlayerNickname.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSetPlayerNickname)
}

::google::protobuf::uint8* CMsgClientSetPlayerNickname::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSetPlayerNickname)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientSetPlayerNickname.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSetPlayerNickname)
  return target;
}

size_t CMsgClientSetPlayerNickname::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSetPlayerNickname)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSetPlayerNickname::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSetPlayerNickname)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSetPlayerNickname* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientSetPlayerNickname>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSetPlayerNickname)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSetPlayerNickname)
    MergeFrom(*source);
  }
}

void CMsgClientSetPlayerNickname::MergeFrom(const CMsgClientSetPlayerNickname& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSetPlayerNickname)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientSetPlayerNickname::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSetPlayerNickname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSetPlayerNickname::CopyFrom(const CMsgClientSetPlayerNickname& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSetPlayerNickname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSetPlayerNickname::IsInitialized() const {
  return true;
}

void CMsgClientSetPlayerNickname::Swap(CMsgClientSetPlayerNickname* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSetPlayerNickname::InternalSwap(CMsgClientSetPlayerNickname* other) {
  nickname_.Swap(&other->nickname_);
  std::swap(steamid_, other->steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientSetPlayerNickname::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientSetPlayerNickname

// optional fixed64 steamid = 1;
bool CMsgClientSetPlayerNickname::has_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientSetPlayerNickname::set_has_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientSetPlayerNickname::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientSetPlayerNickname::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgClientSetPlayerNickname::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientSetPlayerNickname.steamid)
  return steamid_;
}
void CMsgClientSetPlayerNickname::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientSetPlayerNickname.steamid)
}

// optional string nickname = 2;
bool CMsgClientSetPlayerNickname::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientSetPlayerNickname::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientSetPlayerNickname::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientSetPlayerNickname::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& CMsgClientSetPlayerNickname::nickname() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientSetPlayerNickname.nickname)
  return nickname_.GetNoArena();
}
void CMsgClientSetPlayerNickname::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientSetPlayerNickname.nickname)
}
#if LANG_CXX11
void CMsgClientSetPlayerNickname::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientSetPlayerNickname.nickname)
}
#endif
void CMsgClientSetPlayerNickname::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientSetPlayerNickname.nickname)
}
void CMsgClientSetPlayerNickname::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientSetPlayerNickname.nickname)
}
::std::string* CMsgClientSetPlayerNickname::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientSetPlayerNickname.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientSetPlayerNickname::release_nickname() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientSetPlayerNickname.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientSetPlayerNickname::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientSetPlayerNickname.nickname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSetPlayerNicknameResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSetPlayerNicknameResponse::CMsgClientSetPlayerNicknameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSetPlayerNicknameResponse)
}
CMsgClientSetPlayerNicknameResponse::CMsgClientSetPlayerNicknameResponse(const CMsgClientSetPlayerNicknameResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSetPlayerNicknameResponse)
}

void CMsgClientSetPlayerNicknameResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
}

CMsgClientSetPlayerNicknameResponse::~CMsgClientSetPlayerNicknameResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSetPlayerNicknameResponse)
  SharedDtor();
}

void CMsgClientSetPlayerNicknameResponse::SharedDtor() {
}

void CMsgClientSetPlayerNicknameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientSetPlayerNicknameResponse::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientSetPlayerNicknameResponse& CMsgClientSetPlayerNicknameResponse::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientSetPlayerNicknameResponse* CMsgClientSetPlayerNicknameResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientSetPlayerNicknameResponse* n = new CMsgClientSetPlayerNicknameResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientSetPlayerNicknameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSetPlayerNicknameResponse)
  eresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientSetPlayerNicknameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSetPlayerNicknameResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSetPlayerNicknameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSetPlayerNicknameResponse)
  return false;
#undef DO_
}

void CMsgClientSetPlayerNicknameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSetPlayerNicknameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSetPlayerNicknameResponse)
}

::google::protobuf::uint8* CMsgClientSetPlayerNicknameResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSetPlayerNicknameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSetPlayerNicknameResponse)
  return target;
}

size_t CMsgClientSetPlayerNicknameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSetPlayerNicknameResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSetPlayerNicknameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSetPlayerNicknameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSetPlayerNicknameResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientSetPlayerNicknameResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSetPlayerNicknameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSetPlayerNicknameResponse)
    MergeFrom(*source);
  }
}

void CMsgClientSetPlayerNicknameResponse::MergeFrom(const CMsgClientSetPlayerNicknameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSetPlayerNicknameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgClientSetPlayerNicknameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSetPlayerNicknameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSetPlayerNicknameResponse::CopyFrom(const CMsgClientSetPlayerNicknameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSetPlayerNicknameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSetPlayerNicknameResponse::IsInitialized() const {
  return true;
}

void CMsgClientSetPlayerNicknameResponse::Swap(CMsgClientSetPlayerNicknameResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSetPlayerNicknameResponse::InternalSwap(CMsgClientSetPlayerNicknameResponse* other) {
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientSetPlayerNicknameResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientSetPlayerNicknameResponse

// optional uint32 eresult = 1;
bool CMsgClientSetPlayerNicknameResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientSetPlayerNicknameResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientSetPlayerNicknameResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientSetPlayerNicknameResponse::clear_eresult() {
  eresult_ = 0u;
  clear_has_eresult();
}
::google::protobuf::uint32 CMsgClientSetPlayerNicknameResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientSetPlayerNicknameResponse.eresult)
  return eresult_;
}
void CMsgClientSetPlayerNicknameResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientSetPlayerNicknameResponse.eresult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRequestFriendData::kPersonaStateRequestedFieldNumber;
const int CMsgClientRequestFriendData::kFriendsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRequestFriendData::CMsgClientRequestFriendData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRequestFriendData)
}
CMsgClientRequestFriendData::CMsgClientRequestFriendData(const CMsgClientRequestFriendData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_state_requested_ = from.persona_state_requested_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRequestFriendData)
}

void CMsgClientRequestFriendData::SharedCtor() {
  _cached_size_ = 0;
  persona_state_requested_ = 0u;
}

CMsgClientRequestFriendData::~CMsgClientRequestFriendData() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRequestFriendData)
  SharedDtor();
}

void CMsgClientRequestFriendData::SharedDtor() {
}

void CMsgClientRequestFriendData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestFriendData::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientRequestFriendData& CMsgClientRequestFriendData::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientRequestFriendData* CMsgClientRequestFriendData::New(::google::protobuf::Arena* arena) const {
  CMsgClientRequestFriendData* n = new CMsgClientRequestFriendData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientRequestFriendData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRequestFriendData)
  friends_.Clear();
  persona_state_requested_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientRequestFriendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRequestFriendData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 persona_state_requested = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_persona_state_requested();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &persona_state_requested_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 friends = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_friends())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_friends())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRequestFriendData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRequestFriendData)
  return false;
#undef DO_
}

void CMsgClientRequestFriendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRequestFriendData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 persona_state_requested = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->persona_state_requested(), output);
  }

  // repeated fixed64 friends = 2;
  for (int i = 0, n = this->friends_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->friends(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRequestFriendData)
}

::google::protobuf::uint8* CMsgClientRequestFriendData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRequestFriendData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 persona_state_requested = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->persona_state_requested(), target);
  }

  // repeated fixed64 friends = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->friends_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRequestFriendData)
  return target;
}

size_t CMsgClientRequestFriendData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRequestFriendData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed64 friends = 2;
  {
    unsigned int count = this->friends_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->friends_size());
    total_size += data_size;
  }

  // optional uint32 persona_state_requested = 1;
  if (has_persona_state_requested()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->persona_state_requested());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestFriendData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRequestFriendData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRequestFriendData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientRequestFriendData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRequestFriendData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRequestFriendData)
    MergeFrom(*source);
  }
}

void CMsgClientRequestFriendData::MergeFrom(const CMsgClientRequestFriendData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRequestFriendData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
  if (from.has_persona_state_requested()) {
    set_persona_state_requested(from.persona_state_requested());
  }
}

void CMsgClientRequestFriendData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRequestFriendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestFriendData::CopyFrom(const CMsgClientRequestFriendData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRequestFriendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestFriendData::IsInitialized() const {
  return true;
}

void CMsgClientRequestFriendData::Swap(CMsgClientRequestFriendData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRequestFriendData::InternalSwap(CMsgClientRequestFriendData* other) {
  friends_.InternalSwap(&other->friends_);
  std::swap(persona_state_requested_, other->persona_state_requested_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientRequestFriendData::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientRequestFriendData

// optional uint32 persona_state_requested = 1;
bool CMsgClientRequestFriendData::has_persona_state_requested() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientRequestFriendData::set_has_persona_state_requested() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientRequestFriendData::clear_has_persona_state_requested() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientRequestFriendData::clear_persona_state_requested() {
  persona_state_requested_ = 0u;
  clear_has_persona_state_requested();
}
::google::protobuf::uint32 CMsgClientRequestFriendData::persona_state_requested() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRequestFriendData.persona_state_requested)
  return persona_state_requested_;
}
void CMsgClientRequestFriendData::set_persona_state_requested(::google::protobuf::uint32 value) {
  set_has_persona_state_requested();
  persona_state_requested_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientRequestFriendData.persona_state_requested)
}

// repeated fixed64 friends = 2;
int CMsgClientRequestFriendData::friends_size() const {
  return friends_.size();
}
void CMsgClientRequestFriendData::clear_friends() {
  friends_.Clear();
}
::google::protobuf::uint64 CMsgClientRequestFriendData::friends(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRequestFriendData.friends)
  return friends_.Get(index);
}
void CMsgClientRequestFriendData::set_friends(int index, ::google::protobuf::uint64 value) {
  friends_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientRequestFriendData.friends)
}
void CMsgClientRequestFriendData::add_friends(::google::protobuf::uint64 value) {
  friends_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientRequestFriendData.friends)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgClientRequestFriendData::friends() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientRequestFriendData.friends)
  return friends_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgClientRequestFriendData::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientRequestFriendData.friends)
  return &friends_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientChangeStatus::kPersonaStateFieldNumber;
const int CMsgClientChangeStatus::kPlayerNameFieldNumber;
const int CMsgClientChangeStatus::kIsAutoGeneratedNameFieldNumber;
const int CMsgClientChangeStatus::kHighPriorityFieldNumber;
const int CMsgClientChangeStatus::kPersonaSetByUserFieldNumber;
const int CMsgClientChangeStatus::kPersonaStateFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientChangeStatus::CMsgClientChangeStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientChangeStatus)
}
CMsgClientChangeStatus::CMsgClientChangeStatus(const CMsgClientChangeStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_name()) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  ::memcpy(&persona_state_, &from.persona_state_,
    reinterpret_cast<char*>(&persona_state_flags_) -
    reinterpret_cast<char*>(&persona_state_) + sizeof(persona_state_flags_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientChangeStatus)
}

void CMsgClientChangeStatus::SharedCtor() {
  _cached_size_ = 0;
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&persona_state_, 0, reinterpret_cast<char*>(&persona_state_flags_) -
    reinterpret_cast<char*>(&persona_state_) + sizeof(persona_state_flags_));
}

CMsgClientChangeStatus::~CMsgClientChangeStatus() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientChangeStatus)
  SharedDtor();
}

void CMsgClientChangeStatus::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientChangeStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientChangeStatus::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientChangeStatus& CMsgClientChangeStatus::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientChangeStatus* CMsgClientChangeStatus::New(::google::protobuf::Arena* arena) const {
  CMsgClientChangeStatus* n = new CMsgClientChangeStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientChangeStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientChangeStatus)
  if (has_player_name()) {
    GOOGLE_DCHECK(!player_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*player_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&persona_state_, 0, reinterpret_cast<char*>(&persona_state_flags_) -
      reinterpret_cast<char*>(&persona_state_) + sizeof(persona_state_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientChangeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientChangeStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 persona_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_persona_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &persona_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientChangeStatus.player_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_auto_generated_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_is_auto_generated_name();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_generated_name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool high_priority = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_high_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &high_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool persona_set_by_user = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_persona_set_by_user();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &persona_set_by_user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 persona_state_flags = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_persona_state_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &persona_state_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientChangeStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientChangeStatus)
  return false;
#undef DO_
}

void CMsgClientChangeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientChangeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 persona_state = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->persona_state(), output);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientChangeStatus.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_name(), output);
  }

  // optional bool is_auto_generated_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_auto_generated_name(), output);
  }

  // optional bool high_priority = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->high_priority(), output);
  }

  // optional bool persona_set_by_user = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->persona_set_by_user(), output);
  }

  // optional uint32 persona_state_flags = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->persona_state_flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientChangeStatus)
}

::google::protobuf::uint8* CMsgClientChangeStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientChangeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 persona_state = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->persona_state(), target);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientChangeStatus.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional bool is_auto_generated_name = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_auto_generated_name(), target);
  }

  // optional bool high_priority = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->high_priority(), target);
  }

  // optional bool persona_set_by_user = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->persona_set_by_user(), target);
  }

  // optional uint32 persona_state_flags = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->persona_state_flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientChangeStatus)
  return target;
}

size_t CMsgClientChangeStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientChangeStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint32 persona_state = 1;
    if (has_persona_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->persona_state());
    }

    // optional bool is_auto_generated_name = 3;
    if (has_is_auto_generated_name()) {
      total_size += 1 + 1;
    }

    // optional bool high_priority = 4;
    if (has_high_priority()) {
      total_size += 1 + 1;
    }

    // optional bool persona_set_by_user = 5;
    if (has_persona_set_by_user()) {
      total_size += 1 + 1;
    }

    // optional uint32 persona_state_flags = 6 [default = 0];
    if (has_persona_state_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->persona_state_flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientChangeStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientChangeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientChangeStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientChangeStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientChangeStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientChangeStatus)
    MergeFrom(*source);
  }
}

void CMsgClientChangeStatus::MergeFrom(const CMsgClientChangeStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientChangeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_player_name();
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      persona_state_ = from.persona_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_auto_generated_name_ = from.is_auto_generated_name_;
    }
    if (cached_has_bits & 0x00000008u) {
      high_priority_ = from.high_priority_;
    }
    if (cached_has_bits & 0x00000010u) {
      persona_set_by_user_ = from.persona_set_by_user_;
    }
    if (cached_has_bits & 0x00000020u) {
      persona_state_flags_ = from.persona_state_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientChangeStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientChangeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientChangeStatus::CopyFrom(const CMsgClientChangeStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientChangeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChangeStatus::IsInitialized() const {
  return true;
}

void CMsgClientChangeStatus::Swap(CMsgClientChangeStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientChangeStatus::InternalSwap(CMsgClientChangeStatus* other) {
  player_name_.Swap(&other->player_name_);
  std::swap(persona_state_, other->persona_state_);
  std::swap(is_auto_generated_name_, other->is_auto_generated_name_);
  std::swap(high_priority_, other->high_priority_);
  std::swap(persona_set_by_user_, other->persona_set_by_user_);
  std::swap(persona_state_flags_, other->persona_state_flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientChangeStatus::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientChangeStatus

// optional uint32 persona_state = 1;
bool CMsgClientChangeStatus::has_persona_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientChangeStatus::set_has_persona_state() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientChangeStatus::clear_has_persona_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientChangeStatus::clear_persona_state() {
  persona_state_ = 0u;
  clear_has_persona_state();
}
::google::protobuf::uint32 CMsgClientChangeStatus::persona_state() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientChangeStatus.persona_state)
  return persona_state_;
}
void CMsgClientChangeStatus::set_persona_state(::google::protobuf::uint32 value) {
  set_has_persona_state();
  persona_state_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientChangeStatus.persona_state)
}

// optional string player_name = 2;
bool CMsgClientChangeStatus::has_player_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientChangeStatus::set_has_player_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientChangeStatus::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientChangeStatus::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_player_name();
}
const ::std::string& CMsgClientChangeStatus::player_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientChangeStatus.player_name)
  return player_name_.GetNoArena();
}
void CMsgClientChangeStatus::set_player_name(const ::std::string& value) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientChangeStatus.player_name)
}
#if LANG_CXX11
void CMsgClientChangeStatus::set_player_name(::std::string&& value) {
  set_has_player_name();
  player_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientChangeStatus.player_name)
}
#endif
void CMsgClientChangeStatus::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientChangeStatus.player_name)
}
void CMsgClientChangeStatus::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientChangeStatus.player_name)
}
::std::string* CMsgClientChangeStatus::mutable_player_name() {
  set_has_player_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientChangeStatus.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientChangeStatus::release_player_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientChangeStatus.player_name)
  clear_has_player_name();
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientChangeStatus::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    set_has_player_name();
  } else {
    clear_has_player_name();
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientChangeStatus.player_name)
}

// optional bool is_auto_generated_name = 3;
bool CMsgClientChangeStatus::has_is_auto_generated_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientChangeStatus::set_has_is_auto_generated_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientChangeStatus::clear_has_is_auto_generated_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientChangeStatus::clear_is_auto_generated_name() {
  is_auto_generated_name_ = false;
  clear_has_is_auto_generated_name();
}
bool CMsgClientChangeStatus::is_auto_generated_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientChangeStatus.is_auto_generated_name)
  return is_auto_generated_name_;
}
void CMsgClientChangeStatus::set_is_auto_generated_name(bool value) {
  set_has_is_auto_generated_name();
  is_auto_generated_name_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientChangeStatus.is_auto_generated_name)
}

// optional bool high_priority = 4;
bool CMsgClientChangeStatus::has_high_priority() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientChangeStatus::set_has_high_priority() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientChangeStatus::clear_has_high_priority() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientChangeStatus::clear_high_priority() {
  high_priority_ = false;
  clear_has_high_priority();
}
bool CMsgClientChangeStatus::high_priority() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientChangeStatus.high_priority)
  return high_priority_;
}
void CMsgClientChangeStatus::set_high_priority(bool value) {
  set_has_high_priority();
  high_priority_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientChangeStatus.high_priority)
}

// optional bool persona_set_by_user = 5;
bool CMsgClientChangeStatus::has_persona_set_by_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientChangeStatus::set_has_persona_set_by_user() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientChangeStatus::clear_has_persona_set_by_user() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientChangeStatus::clear_persona_set_by_user() {
  persona_set_by_user_ = false;
  clear_has_persona_set_by_user();
}
bool CMsgClientChangeStatus::persona_set_by_user() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientChangeStatus.persona_set_by_user)
  return persona_set_by_user_;
}
void CMsgClientChangeStatus::set_persona_set_by_user(bool value) {
  set_has_persona_set_by_user();
  persona_set_by_user_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientChangeStatus.persona_set_by_user)
}

// optional uint32 persona_state_flags = 6 [default = 0];
bool CMsgClientChangeStatus::has_persona_state_flags() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientChangeStatus::set_has_persona_state_flags() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientChangeStatus::clear_has_persona_state_flags() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientChangeStatus::clear_persona_state_flags() {
  persona_state_flags_ = 0u;
  clear_has_persona_state_flags();
}
::google::protobuf::uint32 CMsgClientChangeStatus::persona_state_flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientChangeStatus.persona_state_flags)
  return persona_state_flags_;
}
void CMsgClientChangeStatus::set_persona_state_flags(::google::protobuf::uint32 value) {
  set_has_persona_state_flags();
  persona_state_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientChangeStatus.persona_state_flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPersonaChangeResponse::kResultFieldNumber;
const int CMsgPersonaChangeResponse::kPlayerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPersonaChangeResponse::CMsgPersonaChangeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgPersonaChangeResponse)
}
CMsgPersonaChangeResponse::CMsgPersonaChangeResponse(const CMsgPersonaChangeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_name()) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgPersonaChangeResponse)
}

void CMsgPersonaChangeResponse::SharedCtor() {
  _cached_size_ = 0;
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0u;
}

CMsgPersonaChangeResponse::~CMsgPersonaChangeResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgPersonaChangeResponse)
  SharedDtor();
}

void CMsgPersonaChangeResponse::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgPersonaChangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPersonaChangeResponse::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPersonaChangeResponse& CMsgPersonaChangeResponse::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPersonaChangeResponse* CMsgPersonaChangeResponse::New(::google::protobuf::Arena* arena) const {
  CMsgPersonaChangeResponse* n = new CMsgPersonaChangeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPersonaChangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgPersonaChangeResponse)
  if (has_player_name()) {
    GOOGLE_DCHECK(!player_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*player_name_.UnsafeRawStringPointer())->clear();
  }
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPersonaChangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgPersonaChangeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgPersonaChangeResponse.player_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgPersonaChangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgPersonaChangeResponse)
  return false;
#undef DO_
}

void CMsgPersonaChangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgPersonaChangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgPersonaChangeResponse.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgPersonaChangeResponse)
}

::google::protobuf::uint8* CMsgPersonaChangeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgPersonaChangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgPersonaChangeResponse.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgPersonaChangeResponse)
  return target;
}

size_t CMsgPersonaChangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgPersonaChangeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPersonaChangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgPersonaChangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPersonaChangeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPersonaChangeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgPersonaChangeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgPersonaChangeResponse)
    MergeFrom(*source);
  }
}

void CMsgPersonaChangeResponse::MergeFrom(const CMsgPersonaChangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgPersonaChangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_player_name();
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPersonaChangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgPersonaChangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPersonaChangeResponse::CopyFrom(const CMsgPersonaChangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgPersonaChangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPersonaChangeResponse::IsInitialized() const {
  return true;
}

void CMsgPersonaChangeResponse::Swap(CMsgPersonaChangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPersonaChangeResponse::InternalSwap(CMsgPersonaChangeResponse* other) {
  player_name_.Swap(&other->player_name_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPersonaChangeResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPersonaChangeResponse

// optional uint32 result = 1;
bool CMsgPersonaChangeResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgPersonaChangeResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgPersonaChangeResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgPersonaChangeResponse::clear_result() {
  result_ = 0u;
  clear_has_result();
}
::google::protobuf::uint32 CMsgPersonaChangeResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgPersonaChangeResponse.result)
  return result_;
}
void CMsgPersonaChangeResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgPersonaChangeResponse.result)
}

// optional string player_name = 2;
bool CMsgPersonaChangeResponse::has_player_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPersonaChangeResponse::set_has_player_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPersonaChangeResponse::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPersonaChangeResponse::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_player_name();
}
const ::std::string& CMsgPersonaChangeResponse::player_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgPersonaChangeResponse.player_name)
  return player_name_.GetNoArena();
}
void CMsgPersonaChangeResponse::set_player_name(const ::std::string& value) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgPersonaChangeResponse.player_name)
}
#if LANG_CXX11
void CMsgPersonaChangeResponse::set_player_name(::std::string&& value) {
  set_has_player_name();
  player_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgPersonaChangeResponse.player_name)
}
#endif
void CMsgPersonaChangeResponse::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgPersonaChangeResponse.player_name)
}
void CMsgPersonaChangeResponse::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgPersonaChangeResponse.player_name)
}
::std::string* CMsgPersonaChangeResponse::mutable_player_name() {
  set_has_player_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgPersonaChangeResponse.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgPersonaChangeResponse::release_player_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgPersonaChangeResponse.player_name)
  clear_has_player_name();
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgPersonaChangeResponse::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    set_has_player_name();
  } else {
    clear_has_player_name();
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgPersonaChangeResponse.player_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPersonaState_Friend::kFriendidFieldNumber;
const int CMsgClientPersonaState_Friend::kPersonaStateFieldNumber;
const int CMsgClientPersonaState_Friend::kGamePlayedAppIdFieldNumber;
const int CMsgClientPersonaState_Friend::kGameServerIpFieldNumber;
const int CMsgClientPersonaState_Friend::kGameServerPortFieldNumber;
const int CMsgClientPersonaState_Friend::kPersonaStateFlagsFieldNumber;
const int CMsgClientPersonaState_Friend::kOnlineSessionInstancesFieldNumber;
const int CMsgClientPersonaState_Friend::kPublishedInstanceIdFieldNumber;
const int CMsgClientPersonaState_Friend::kPersonaSetByUserFieldNumber;
const int CMsgClientPersonaState_Friend::kPlayerNameFieldNumber;
const int CMsgClientPersonaState_Friend::kQueryPortFieldNumber;
const int CMsgClientPersonaState_Friend::kSteamidSourceFieldNumber;
const int CMsgClientPersonaState_Friend::kAvatarHashFieldNumber;
const int CMsgClientPersonaState_Friend::kLastLogoffFieldNumber;
const int CMsgClientPersonaState_Friend::kLastLogonFieldNumber;
const int CMsgClientPersonaState_Friend::kClanRankFieldNumber;
const int CMsgClientPersonaState_Friend::kGameNameFieldNumber;
const int CMsgClientPersonaState_Friend::kGameidFieldNumber;
const int CMsgClientPersonaState_Friend::kGameDataBlobFieldNumber;
const int CMsgClientPersonaState_Friend::kClanTagFieldNumber;
const int CMsgClientPersonaState_Friend::kFacebookNameFieldNumber;
const int CMsgClientPersonaState_Friend::kFacebookIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPersonaState_Friend::CMsgClientPersonaState_Friend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPersonaState.Friend)
}
CMsgClientPersonaState_Friend::CMsgClientPersonaState_Friend(const CMsgClientPersonaState_Friend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_name()) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  avatar_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_avatar_hash()) {
    avatar_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_hash_);
  }
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_name()) {
    game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
  }
  game_data_blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_data_blob()) {
    game_data_blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_data_blob_);
  }
  clan_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clan_tag()) {
    clan_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clan_tag_);
  }
  facebook_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_facebook_name()) {
    facebook_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.facebook_name_);
  }
  ::memcpy(&friendid_, &from.friendid_,
    reinterpret_cast<char*>(&facebook_id_) -
    reinterpret_cast<char*>(&friendid_) + sizeof(facebook_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPersonaState.Friend)
}

void CMsgClientPersonaState_Friend::SharedCtor() {
  _cached_size_ = 0;
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_data_blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clan_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  facebook_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&friendid_, 0, reinterpret_cast<char*>(&facebook_id_) -
    reinterpret_cast<char*>(&friendid_) + sizeof(facebook_id_));
}

CMsgClientPersonaState_Friend::~CMsgClientPersonaState_Friend() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPersonaState.Friend)
  SharedDtor();
}

void CMsgClientPersonaState_Friend::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_data_blob_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clan_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  facebook_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientPersonaState_Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPersonaState_Friend::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientPersonaState_Friend& CMsgClientPersonaState_Friend::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientPersonaState_Friend* CMsgClientPersonaState_Friend::New(::google::protobuf::Arena* arena) const {
  CMsgClientPersonaState_Friend* n = new CMsgClientPersonaState_Friend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientPersonaState_Friend::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPersonaState.Friend)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_player_name()) {
      GOOGLE_DCHECK(!player_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*player_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_avatar_hash()) {
      GOOGLE_DCHECK(!avatar_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*avatar_hash_.UnsafeRawStringPointer())->clear();
    }
    if (has_game_name()) {
      GOOGLE_DCHECK(!game_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_game_data_blob()) {
      GOOGLE_DCHECK(!game_data_blob_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_data_blob_.UnsafeRawStringPointer())->clear();
    }
    if (has_clan_tag()) {
      GOOGLE_DCHECK(!clan_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clan_tag_.UnsafeRawStringPointer())->clear();
    }
    if (has_facebook_name()) {
      GOOGLE_DCHECK(!facebook_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*facebook_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&friendid_, 0, reinterpret_cast<char*>(&persona_state_) -
      reinterpret_cast<char*>(&friendid_) + sizeof(persona_state_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&game_played_app_id_, 0, reinterpret_cast<char*>(&steamid_source_) -
      reinterpret_cast<char*>(&game_played_app_id_) + sizeof(steamid_source_));
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ::memset(&query_port_, 0, reinterpret_cast<char*>(&facebook_id_) -
      reinterpret_cast<char*>(&query_port_) + sizeof(facebook_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientPersonaState_Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPersonaState.Friend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 friendid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_friendid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &friendid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 persona_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_persona_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &persona_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_played_app_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_game_played_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_played_app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_server_ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_game_server_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_server_port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_game_server_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 persona_state_flags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_persona_state_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &persona_state_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 online_session_instances = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_online_session_instances();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_session_instances_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 published_instance_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_published_instance_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &published_instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool persona_set_by_user = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_persona_set_by_user();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &persona_set_by_user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_name = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientPersonaState.Friend.player_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 query_port = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_query_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid_source = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u)) {
          set_has_steamid_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes avatar_hash = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_logoff = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(360u)) {
          set_has_last_logoff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_logoff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_logon = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(368u)) {
          set_has_last_logon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_logon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clan_rank = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(400u)) {
          set_has_clan_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clan_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_name = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(442u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_name().data(), this->game_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientPersonaState.Friend.game_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 gameid = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(449u)) {
          set_has_gameid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes game_data_blob = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(482u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_game_data_blob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string clan_tag = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(522u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clan_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clan_tag().data(), this->clan_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientPersonaState.Friend.clan_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string facebook_name = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(530u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facebook_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->facebook_name().data(), this->facebook_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientPersonaState.Friend.facebook_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 facebook_id = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(536u)) {
          set_has_facebook_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &facebook_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPersonaState.Friend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPersonaState.Friend)
  return false;
#undef DO_
}

void CMsgClientPersonaState_Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPersonaState.Friend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 friendid = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->friendid(), output);
  }

  // optional uint32 persona_state = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->persona_state(), output);
  }

  // optional uint32 game_played_app_id = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_played_app_id(), output);
  }

  // optional uint32 game_server_ip = 4;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_server_ip(), output);
  }

  // optional uint32 game_server_port = 5;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_server_port(), output);
  }

  // optional uint32 persona_state_flags = 6;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->persona_state_flags(), output);
  }

  // optional uint32 online_session_instances = 7;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->online_session_instances(), output);
  }

  // optional uint32 published_instance_id = 8;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->published_instance_id(), output);
  }

  // optional bool persona_set_by_user = 10;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->persona_set_by_user(), output);
  }

  // optional string player_name = 15;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPersonaState.Friend.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->player_name(), output);
  }

  // optional uint32 query_port = 20;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->query_port(), output);
  }

  // optional fixed64 steamid_source = 25;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(25, this->steamid_source(), output);
  }

  // optional bytes avatar_hash = 31;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      31, this->avatar_hash(), output);
  }

  // optional uint32 last_logoff = 45;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->last_logoff(), output);
  }

  // optional uint32 last_logon = 46;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->last_logon(), output);
  }

  // optional uint32 clan_rank = 50;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->clan_rank(), output);
  }

  // optional string game_name = 55;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPersonaState.Friend.game_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      55, this->game_name(), output);
  }

  // optional fixed64 gameid = 56;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(56, this->gameid(), output);
  }

  // optional bytes game_data_blob = 60;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      60, this->game_data_blob(), output);
  }

  // optional string clan_tag = 65;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clan_tag().data(), this->clan_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPersonaState.Friend.clan_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      65, this->clan_tag(), output);
  }

  // optional string facebook_name = 66;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->facebook_name().data(), this->facebook_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPersonaState.Friend.facebook_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      66, this->facebook_name(), output);
  }

  // optional uint64 facebook_id = 67;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(67, this->facebook_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPersonaState.Friend)
}

::google::protobuf::uint8* CMsgClientPersonaState_Friend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPersonaState.Friend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 friendid = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->friendid(), target);
  }

  // optional uint32 persona_state = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->persona_state(), target);
  }

  // optional uint32 game_played_app_id = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_played_app_id(), target);
  }

  // optional uint32 game_server_ip = 4;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_server_ip(), target);
  }

  // optional uint32 game_server_port = 5;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->game_server_port(), target);
  }

  // optional uint32 persona_state_flags = 6;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->persona_state_flags(), target);
  }

  // optional uint32 online_session_instances = 7;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->online_session_instances(), target);
  }

  // optional uint32 published_instance_id = 8;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->published_instance_id(), target);
  }

  // optional bool persona_set_by_user = 10;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->persona_set_by_user(), target);
  }

  // optional string player_name = 15;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPersonaState.Friend.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->player_name(), target);
  }

  // optional uint32 query_port = 20;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->query_port(), target);
  }

  // optional fixed64 steamid_source = 25;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(25, this->steamid_source(), target);
  }

  // optional bytes avatar_hash = 31;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        31, this->avatar_hash(), target);
  }

  // optional uint32 last_logoff = 45;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->last_logoff(), target);
  }

  // optional uint32 last_logon = 46;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->last_logon(), target);
  }

  // optional uint32 clan_rank = 50;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->clan_rank(), target);
  }

  // optional string game_name = 55;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPersonaState.Friend.game_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        55, this->game_name(), target);
  }

  // optional fixed64 gameid = 56;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(56, this->gameid(), target);
  }

  // optional bytes game_data_blob = 60;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        60, this->game_data_blob(), target);
  }

  // optional string clan_tag = 65;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clan_tag().data(), this->clan_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPersonaState.Friend.clan_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        65, this->clan_tag(), target);
  }

  // optional string facebook_name = 66;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->facebook_name().data(), this->facebook_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPersonaState.Friend.facebook_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        66, this->facebook_name(), target);
  }

  // optional uint64 facebook_id = 67;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(67, this->facebook_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPersonaState.Friend)
  return target;
}

size_t CMsgClientPersonaState_Friend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPersonaState.Friend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string player_name = 15;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional bytes avatar_hash = 31;
    if (has_avatar_hash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar_hash());
    }

    // optional string game_name = 55;
    if (has_game_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_name());
    }

    // optional bytes game_data_blob = 60;
    if (has_game_data_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->game_data_blob());
    }

    // optional string clan_tag = 65;
    if (has_clan_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clan_tag());
    }

    // optional string facebook_name = 66;
    if (has_facebook_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facebook_name());
    }

    // optional fixed64 friendid = 1;
    if (has_friendid()) {
      total_size += 1 + 8;
    }

    // optional uint32 persona_state = 2;
    if (has_persona_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->persona_state());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 game_played_app_id = 3;
    if (has_game_played_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_played_app_id());
    }

    // optional uint32 game_server_ip = 4;
    if (has_game_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_ip());
    }

    // optional uint32 game_server_port = 5;
    if (has_game_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_port());
    }

    // optional uint32 persona_state_flags = 6;
    if (has_persona_state_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->persona_state_flags());
    }

    // optional uint32 online_session_instances = 7;
    if (has_online_session_instances()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_session_instances());
    }

    // optional uint32 published_instance_id = 8;
    if (has_published_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->published_instance_id());
    }

    // optional bool persona_set_by_user = 10;
    if (has_persona_set_by_user()) {
      total_size += 1 + 1;
    }

    // optional fixed64 steamid_source = 25;
    if (has_steamid_source()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional uint32 query_port = 20;
    if (has_query_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_port());
    }

    // optional uint32 last_logoff = 45;
    if (has_last_logoff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_logoff());
    }

    // optional uint32 last_logon = 46;
    if (has_last_logon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_logon());
    }

    // optional uint32 clan_rank = 50;
    if (has_clan_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clan_rank());
    }

    // optional fixed64 gameid = 56;
    if (has_gameid()) {
      total_size += 2 + 8;
    }

    // optional uint64 facebook_id = 67;
    if (has_facebook_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->facebook_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPersonaState_Friend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPersonaState.Friend)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPersonaState_Friend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientPersonaState_Friend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPersonaState.Friend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPersonaState.Friend)
    MergeFrom(*source);
  }
}

void CMsgClientPersonaState_Friend::MergeFrom(const CMsgClientPersonaState_Friend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPersonaState.Friend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_player_name();
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_avatar_hash();
      avatar_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_hash_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_game_name();
      game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_game_data_blob();
      game_data_blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_data_blob_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_clan_tag();
      clan_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clan_tag_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_facebook_name();
      facebook_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.facebook_name_);
    }
    if (cached_has_bits & 0x00000040u) {
      friendid_ = from.friendid_;
    }
    if (cached_has_bits & 0x00000080u) {
      persona_state_ = from.persona_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      game_played_app_id_ = from.game_played_app_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      game_server_ip_ = from.game_server_ip_;
    }
    if (cached_has_bits & 0x00000400u) {
      game_server_port_ = from.game_server_port_;
    }
    if (cached_has_bits & 0x00000800u) {
      persona_state_flags_ = from.persona_state_flags_;
    }
    if (cached_has_bits & 0x00001000u) {
      online_session_instances_ = from.online_session_instances_;
    }
    if (cached_has_bits & 0x00002000u) {
      published_instance_id_ = from.published_instance_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      persona_set_by_user_ = from.persona_set_by_user_;
    }
    if (cached_has_bits & 0x00008000u) {
      steamid_source_ = from.steamid_source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      query_port_ = from.query_port_;
    }
    if (cached_has_bits & 0x00020000u) {
      last_logoff_ = from.last_logoff_;
    }
    if (cached_has_bits & 0x00040000u) {
      last_logon_ = from.last_logon_;
    }
    if (cached_has_bits & 0x00080000u) {
      clan_rank_ = from.clan_rank_;
    }
    if (cached_has_bits & 0x00100000u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00200000u) {
      facebook_id_ = from.facebook_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPersonaState_Friend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPersonaState.Friend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPersonaState_Friend::CopyFrom(const CMsgClientPersonaState_Friend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPersonaState.Friend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPersonaState_Friend::IsInitialized() const {
  return true;
}

void CMsgClientPersonaState_Friend::Swap(CMsgClientPersonaState_Friend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPersonaState_Friend::InternalSwap(CMsgClientPersonaState_Friend* other) {
  player_name_.Swap(&other->player_name_);
  avatar_hash_.Swap(&other->avatar_hash_);
  game_name_.Swap(&other->game_name_);
  game_data_blob_.Swap(&other->game_data_blob_);
  clan_tag_.Swap(&other->clan_tag_);
  facebook_name_.Swap(&other->facebook_name_);
  std::swap(friendid_, other->friendid_);
  std::swap(persona_state_, other->persona_state_);
  std::swap(game_played_app_id_, other->game_played_app_id_);
  std::swap(game_server_ip_, other->game_server_ip_);
  std::swap(game_server_port_, other->game_server_port_);
  std::swap(persona_state_flags_, other->persona_state_flags_);
  std::swap(online_session_instances_, other->online_session_instances_);
  std::swap(published_instance_id_, other->published_instance_id_);
  std::swap(persona_set_by_user_, other->persona_set_by_user_);
  std::swap(steamid_source_, other->steamid_source_);
  std::swap(query_port_, other->query_port_);
  std::swap(last_logoff_, other->last_logoff_);
  std::swap(last_logon_, other->last_logon_);
  std::swap(clan_rank_, other->clan_rank_);
  std::swap(gameid_, other->gameid_);
  std::swap(facebook_id_, other->facebook_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientPersonaState_Friend::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientPersonaState_Friend

// optional fixed64 friendid = 1;
bool CMsgClientPersonaState_Friend::has_friendid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientPersonaState_Friend::set_has_friendid() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientPersonaState_Friend::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientPersonaState_Friend::clear_friendid() {
  friendid_ = GOOGLE_ULONGLONG(0);
  clear_has_friendid();
}
::google::protobuf::uint64 CMsgClientPersonaState_Friend::friendid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.Friend.friendid)
  return friendid_;
}
void CMsgClientPersonaState_Friend::set_friendid(::google::protobuf::uint64 value) {
  set_has_friendid();
  friendid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPersonaState.Friend.friendid)
}

// optional uint32 persona_state = 2;
bool CMsgClientPersonaState_Friend::has_persona_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgClientPersonaState_Friend::set_has_persona_state() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgClientPersonaState_Friend::clear_has_persona_state() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgClientPersonaState_Friend::clear_persona_state() {
  persona_state_ = 0u;
  clear_has_persona_state();
}
::google::protobuf::uint32 CMsgClientPersonaState_Friend::persona_state() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.Friend.persona_state)
  return persona_state_;
}
void CMsgClientPersonaState_Friend::set_persona_state(::google::protobuf::uint32 value) {
  set_has_persona_state();
  persona_state_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPersonaState.Friend.persona_state)
}

// optional uint32 game_played_app_id = 3;
bool CMsgClientPersonaState_Friend::has_game_played_app_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgClientPersonaState_Friend::set_has_game_played_app_id() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgClientPersonaState_Friend::clear_has_game_played_app_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgClientPersonaState_Friend::clear_game_played_app_id() {
  game_played_app_id_ = 0u;
  clear_has_game_played_app_id();
}
::google::protobuf::uint32 CMsgClientPersonaState_Friend::game_played_app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.Friend.game_played_app_id)
  return game_played_app_id_;
}
void CMsgClientPersonaState_Friend::set_game_played_app_id(::google::protobuf::uint32 value) {
  set_has_game_played_app_id();
  game_played_app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPersonaState.Friend.game_played_app_id)
}

// optional uint32 game_server_ip = 4;
bool CMsgClientPersonaState_Friend::has_game_server_ip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgClientPersonaState_Friend::set_has_game_server_ip() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgClientPersonaState_Friend::clear_has_game_server_ip() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgClientPersonaState_Friend::clear_game_server_ip() {
  game_server_ip_ = 0u;
  clear_has_game_server_ip();
}
::google::protobuf::uint32 CMsgClientPersonaState_Friend::game_server_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.Friend.game_server_ip)
  return game_server_ip_;
}
void CMsgClientPersonaState_Friend::set_game_server_ip(::google::protobuf::uint32 value) {
  set_has_game_server_ip();
  game_server_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPersonaState.Friend.game_server_ip)
}

// optional uint32 game_server_port = 5;
bool CMsgClientPersonaState_Friend::has_game_server_port() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgClientPersonaState_Friend::set_has_game_server_port() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgClientPersonaState_Friend::clear_has_game_server_port() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgClientPersonaState_Friend::clear_game_server_port() {
  game_server_port_ = 0u;
  clear_has_game_server_port();
}
::google::protobuf::uint32 CMsgClientPersonaState_Friend::game_server_port() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.Friend.game_server_port)
  return game_server_port_;
}
void CMsgClientPersonaState_Friend::set_game_server_port(::google::protobuf::uint32 value) {
  set_has_game_server_port();
  game_server_port_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPersonaState.Friend.game_server_port)
}

// optional uint32 persona_state_flags = 6;
bool CMsgClientPersonaState_Friend::has_persona_state_flags() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgClientPersonaState_Friend::set_has_persona_state_flags() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgClientPersonaState_Friend::clear_has_persona_state_flags() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgClientPersonaState_Friend::clear_persona_state_flags() {
  persona_state_flags_ = 0u;
  clear_has_persona_state_flags();
}
::google::protobuf::uint32 CMsgClientPersonaState_Friend::persona_state_flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.Friend.persona_state_flags)
  return persona_state_flags_;
}
void CMsgClientPersonaState_Friend::set_persona_state_flags(::google::protobuf::uint32 value) {
  set_has_persona_state_flags();
  persona_state_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPersonaState.Friend.persona_state_flags)
}

// optional uint32 online_session_instances = 7;
bool CMsgClientPersonaState_Friend::has_online_session_instances() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgClientPersonaState_Friend::set_has_online_session_instances() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgClientPersonaState_Friend::clear_has_online_session_instances() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgClientPersonaState_Friend::clear_online_session_instances() {
  online_session_instances_ = 0u;
  clear_has_online_session_instances();
}
::google::protobuf::uint32 CMsgClientPersonaState_Friend::online_session_instances() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.Friend.online_session_instances)
  return online_session_instances_;
}
void CMsgClientPersonaState_Friend::set_online_session_instances(::google::protobuf::uint32 value) {
  set_has_online_session_instances();
  online_session_instances_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPersonaState.Friend.online_session_instances)
}

// optional uint32 published_instance_id = 8;
bool CMsgClientPersonaState_Friend::has_published_instance_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgClientPersonaState_Friend::set_has_published_instance_id() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgClientPersonaState_Friend::clear_has_published_instance_id() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgClientPersonaState_Friend::clear_published_instance_id() {
  published_instance_id_ = 0u;
  clear_has_published_instance_id();
}
::google::protobuf::uint32 CMsgClientPersonaState_Friend::published_instance_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.Friend.published_instance_id)
  return published_instance_id_;
}
void CMsgClientPersonaState_Friend::set_published_instance_id(::google::protobuf::uint32 value) {
  set_has_published_instance_id();
  published_instance_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPersonaState.Friend.published_instance_id)
}

// optional bool persona_set_by_user = 10;
bool CMsgClientPersonaState_Friend::has_persona_set_by_user() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgClientPersonaState_Friend::set_has_persona_set_by_user() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgClientPersonaState_Friend::clear_has_persona_set_by_user() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgClientPersonaState_Friend::clear_persona_set_by_user() {
  persona_set_by_user_ = false;
  clear_has_persona_set_by_user();
}
bool CMsgClientPersonaState_Friend::persona_set_by_user() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.Friend.persona_set_by_user)
  return persona_set_by_user_;
}
void CMsgClientPersonaState_Friend::set_persona_set_by_user(bool value) {
  set_has_persona_set_by_user();
  persona_set_by_user_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPersonaState.Friend.persona_set_by_user)
}

// optional string player_name = 15;
bool CMsgClientPersonaState_Friend::has_player_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientPersonaState_Friend::set_has_player_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientPersonaState_Friend::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientPersonaState_Friend::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_player_name();
}
const ::std::string& CMsgClientPersonaState_Friend::player_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.Friend.player_name)
  return player_name_.GetNoArena();
}
void CMsgClientPersonaState_Friend::set_player_name(const ::std::string& value) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPersonaState.Friend.player_name)
}
#if LANG_CXX11
void CMsgClientPersonaState_Friend::set_player_name(::std::string&& value) {
  set_has_player_name();
  player_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientPersonaState.Friend.player_name)
}
#endif
void CMsgClientPersonaState_Friend::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientPersonaState.Friend.player_name)
}
void CMsgClientPersonaState_Friend::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientPersonaState.Friend.player_name)
}
::std::string* CMsgClientPersonaState_Friend::mutable_player_name() {
  set_has_player_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPersonaState.Friend.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientPersonaState_Friend::release_player_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientPersonaState.Friend.player_name)
  clear_has_player_name();
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientPersonaState_Friend::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    set_has_player_name();
  } else {
    clear_has_player_name();
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientPersonaState.Friend.player_name)
}

// optional uint32 query_port = 20;
bool CMsgClientPersonaState_Friend::has_query_port() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgClientPersonaState_Friend::set_has_query_port() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgClientPersonaState_Friend::clear_has_query_port() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgClientPersonaState_Friend::clear_query_port() {
  query_port_ = 0u;
  clear_has_query_port();
}
::google::protobuf::uint32 CMsgClientPersonaState_Friend::query_port() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.Friend.query_port)
  return query_port_;
}
void CMsgClientPersonaState_Friend::set_query_port(::google::protobuf::uint32 value) {
  set_has_query_port();
  query_port_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPersonaState.Friend.query_port)
}

// optional fixed64 steamid_source = 25;
bool CMsgClientPersonaState_Friend::has_steamid_source() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgClientPersonaState_Friend::set_has_steamid_source() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgClientPersonaState_Friend::clear_has_steamid_source() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgClientPersonaState_Friend::clear_steamid_source() {
  steamid_source_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_source();
}
::google::protobuf::uint64 CMsgClientPersonaState_Friend::steamid_source() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.Friend.steamid_source)
  return steamid_source_;
}
void CMsgClientPersonaState_Friend::set_steamid_source(::google::protobuf::uint64 value) {
  set_has_steamid_source();
  steamid_source_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPersonaState.Friend.steamid_source)
}

// optional bytes avatar_hash = 31;
bool CMsgClientPersonaState_Friend::has_avatar_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientPersonaState_Friend::set_has_avatar_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientPersonaState_Friend::clear_has_avatar_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientPersonaState_Friend::clear_avatar_hash() {
  avatar_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_avatar_hash();
}
const ::std::string& CMsgClientPersonaState_Friend::avatar_hash() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.Friend.avatar_hash)
  return avatar_hash_.GetNoArena();
}
void CMsgClientPersonaState_Friend::set_avatar_hash(const ::std::string& value) {
  set_has_avatar_hash();
  avatar_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPersonaState.Friend.avatar_hash)
}
#if LANG_CXX11
void CMsgClientPersonaState_Friend::set_avatar_hash(::std::string&& value) {
  set_has_avatar_hash();
  avatar_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientPersonaState.Friend.avatar_hash)
}
#endif
void CMsgClientPersonaState_Friend::set_avatar_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_avatar_hash();
  avatar_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientPersonaState.Friend.avatar_hash)
}
void CMsgClientPersonaState_Friend::set_avatar_hash(const void* value, size_t size) {
  set_has_avatar_hash();
  avatar_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientPersonaState.Friend.avatar_hash)
}
::std::string* CMsgClientPersonaState_Friend::mutable_avatar_hash() {
  set_has_avatar_hash();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPersonaState.Friend.avatar_hash)
  return avatar_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientPersonaState_Friend::release_avatar_hash() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientPersonaState.Friend.avatar_hash)
  clear_has_avatar_hash();
  return avatar_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientPersonaState_Friend::set_allocated_avatar_hash(::std::string* avatar_hash) {
  if (avatar_hash != NULL) {
    set_has_avatar_hash();
  } else {
    clear_has_avatar_hash();
  }
  avatar_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_hash);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientPersonaState.Friend.avatar_hash)
}

// optional uint32 last_logoff = 45;
bool CMsgClientPersonaState_Friend::has_last_logoff() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgClientPersonaState_Friend::set_has_last_logoff() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgClientPersonaState_Friend::clear_has_last_logoff() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgClientPersonaState_Friend::clear_last_logoff() {
  last_logoff_ = 0u;
  clear_has_last_logoff();
}
::google::protobuf::uint32 CMsgClientPersonaState_Friend::last_logoff() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.Friend.last_logoff)
  return last_logoff_;
}
void CMsgClientPersonaState_Friend::set_last_logoff(::google::protobuf::uint32 value) {
  set_has_last_logoff();
  last_logoff_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPersonaState.Friend.last_logoff)
}

// optional uint32 last_logon = 46;
bool CMsgClientPersonaState_Friend::has_last_logon() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgClientPersonaState_Friend::set_has_last_logon() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgClientPersonaState_Friend::clear_has_last_logon() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgClientPersonaState_Friend::clear_last_logon() {
  last_logon_ = 0u;
  clear_has_last_logon();
}
::google::protobuf::uint32 CMsgClientPersonaState_Friend::last_logon() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.Friend.last_logon)
  return last_logon_;
}
void CMsgClientPersonaState_Friend::set_last_logon(::google::protobuf::uint32 value) {
  set_has_last_logon();
  last_logon_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPersonaState.Friend.last_logon)
}

// optional uint32 clan_rank = 50;
bool CMsgClientPersonaState_Friend::has_clan_rank() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgClientPersonaState_Friend::set_has_clan_rank() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgClientPersonaState_Friend::clear_has_clan_rank() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgClientPersonaState_Friend::clear_clan_rank() {
  clan_rank_ = 0u;
  clear_has_clan_rank();
}
::google::protobuf::uint32 CMsgClientPersonaState_Friend::clan_rank() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.Friend.clan_rank)
  return clan_rank_;
}
void CMsgClientPersonaState_Friend::set_clan_rank(::google::protobuf::uint32 value) {
  set_has_clan_rank();
  clan_rank_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPersonaState.Friend.clan_rank)
}

// optional string game_name = 55;
bool CMsgClientPersonaState_Friend::has_game_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientPersonaState_Friend::set_has_game_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientPersonaState_Friend::clear_has_game_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientPersonaState_Friend::clear_game_name() {
  game_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_name();
}
const ::std::string& CMsgClientPersonaState_Friend::game_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.Friend.game_name)
  return game_name_.GetNoArena();
}
void CMsgClientPersonaState_Friend::set_game_name(const ::std::string& value) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPersonaState.Friend.game_name)
}
#if LANG_CXX11
void CMsgClientPersonaState_Friend::set_game_name(::std::string&& value) {
  set_has_game_name();
  game_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientPersonaState.Friend.game_name)
}
#endif
void CMsgClientPersonaState_Friend::set_game_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientPersonaState.Friend.game_name)
}
void CMsgClientPersonaState_Friend::set_game_name(const char* value, size_t size) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientPersonaState.Friend.game_name)
}
::std::string* CMsgClientPersonaState_Friend::mutable_game_name() {
  set_has_game_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPersonaState.Friend.game_name)
  return game_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientPersonaState_Friend::release_game_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientPersonaState.Friend.game_name)
  clear_has_game_name();
  return game_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientPersonaState_Friend::set_allocated_game_name(::std::string* game_name) {
  if (game_name != NULL) {
    set_has_game_name();
  } else {
    clear_has_game_name();
  }
  game_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientPersonaState.Friend.game_name)
}

// optional fixed64 gameid = 56;
bool CMsgClientPersonaState_Friend::has_gameid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CMsgClientPersonaState_Friend::set_has_gameid() {
  _has_bits_[0] |= 0x00100000u;
}
void CMsgClientPersonaState_Friend::clear_has_gameid() {
  _has_bits_[0] &= ~0x00100000u;
}
void CMsgClientPersonaState_Friend::clear_gameid() {
  gameid_ = GOOGLE_ULONGLONG(0);
  clear_has_gameid();
}
::google::protobuf::uint64 CMsgClientPersonaState_Friend::gameid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.Friend.gameid)
  return gameid_;
}
void CMsgClientPersonaState_Friend::set_gameid(::google::protobuf::uint64 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPersonaState.Friend.gameid)
}

// optional bytes game_data_blob = 60;
bool CMsgClientPersonaState_Friend::has_game_data_blob() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientPersonaState_Friend::set_has_game_data_blob() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientPersonaState_Friend::clear_has_game_data_blob() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientPersonaState_Friend::clear_game_data_blob() {
  game_data_blob_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_data_blob();
}
const ::std::string& CMsgClientPersonaState_Friend::game_data_blob() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.Friend.game_data_blob)
  return game_data_blob_.GetNoArena();
}
void CMsgClientPersonaState_Friend::set_game_data_blob(const ::std::string& value) {
  set_has_game_data_blob();
  game_data_blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPersonaState.Friend.game_data_blob)
}
#if LANG_CXX11
void CMsgClientPersonaState_Friend::set_game_data_blob(::std::string&& value) {
  set_has_game_data_blob();
  game_data_blob_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientPersonaState.Friend.game_data_blob)
}
#endif
void CMsgClientPersonaState_Friend::set_game_data_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_data_blob();
  game_data_blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientPersonaState.Friend.game_data_blob)
}
void CMsgClientPersonaState_Friend::set_game_data_blob(const void* value, size_t size) {
  set_has_game_data_blob();
  game_data_blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientPersonaState.Friend.game_data_blob)
}
::std::string* CMsgClientPersonaState_Friend::mutable_game_data_blob() {
  set_has_game_data_blob();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPersonaState.Friend.game_data_blob)
  return game_data_blob_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientPersonaState_Friend::release_game_data_blob() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientPersonaState.Friend.game_data_blob)
  clear_has_game_data_blob();
  return game_data_blob_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientPersonaState_Friend::set_allocated_game_data_blob(::std::string* game_data_blob) {
  if (game_data_blob != NULL) {
    set_has_game_data_blob();
  } else {
    clear_has_game_data_blob();
  }
  game_data_blob_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_data_blob);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientPersonaState.Friend.game_data_blob)
}

// optional string clan_tag = 65;
bool CMsgClientPersonaState_Friend::has_clan_tag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientPersonaState_Friend::set_has_clan_tag() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientPersonaState_Friend::clear_has_clan_tag() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientPersonaState_Friend::clear_clan_tag() {
  clan_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clan_tag();
}
const ::std::string& CMsgClientPersonaState_Friend::clan_tag() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.Friend.clan_tag)
  return clan_tag_.GetNoArena();
}
void CMsgClientPersonaState_Friend::set_clan_tag(const ::std::string& value) {
  set_has_clan_tag();
  clan_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPersonaState.Friend.clan_tag)
}
#if LANG_CXX11
void CMsgClientPersonaState_Friend::set_clan_tag(::std::string&& value) {
  set_has_clan_tag();
  clan_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientPersonaState.Friend.clan_tag)
}
#endif
void CMsgClientPersonaState_Friend::set_clan_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clan_tag();
  clan_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientPersonaState.Friend.clan_tag)
}
void CMsgClientPersonaState_Friend::set_clan_tag(const char* value, size_t size) {
  set_has_clan_tag();
  clan_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientPersonaState.Friend.clan_tag)
}
::std::string* CMsgClientPersonaState_Friend::mutable_clan_tag() {
  set_has_clan_tag();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPersonaState.Friend.clan_tag)
  return clan_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientPersonaState_Friend::release_clan_tag() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientPersonaState.Friend.clan_tag)
  clear_has_clan_tag();
  return clan_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientPersonaState_Friend::set_allocated_clan_tag(::std::string* clan_tag) {
  if (clan_tag != NULL) {
    set_has_clan_tag();
  } else {
    clear_has_clan_tag();
  }
  clan_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clan_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientPersonaState.Friend.clan_tag)
}

// optional string facebook_name = 66;
bool CMsgClientPersonaState_Friend::has_facebook_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientPersonaState_Friend::set_has_facebook_name() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientPersonaState_Friend::clear_has_facebook_name() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientPersonaState_Friend::clear_facebook_name() {
  facebook_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_facebook_name();
}
const ::std::string& CMsgClientPersonaState_Friend::facebook_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.Friend.facebook_name)
  return facebook_name_.GetNoArena();
}
void CMsgClientPersonaState_Friend::set_facebook_name(const ::std::string& value) {
  set_has_facebook_name();
  facebook_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPersonaState.Friend.facebook_name)
}
#if LANG_CXX11
void CMsgClientPersonaState_Friend::set_facebook_name(::std::string&& value) {
  set_has_facebook_name();
  facebook_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientPersonaState.Friend.facebook_name)
}
#endif
void CMsgClientPersonaState_Friend::set_facebook_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_facebook_name();
  facebook_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientPersonaState.Friend.facebook_name)
}
void CMsgClientPersonaState_Friend::set_facebook_name(const char* value, size_t size) {
  set_has_facebook_name();
  facebook_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientPersonaState.Friend.facebook_name)
}
::std::string* CMsgClientPersonaState_Friend::mutable_facebook_name() {
  set_has_facebook_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPersonaState.Friend.facebook_name)
  return facebook_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientPersonaState_Friend::release_facebook_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientPersonaState.Friend.facebook_name)
  clear_has_facebook_name();
  return facebook_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientPersonaState_Friend::set_allocated_facebook_name(::std::string* facebook_name) {
  if (facebook_name != NULL) {
    set_has_facebook_name();
  } else {
    clear_has_facebook_name();
  }
  facebook_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), facebook_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientPersonaState.Friend.facebook_name)
}

// optional uint64 facebook_id = 67;
bool CMsgClientPersonaState_Friend::has_facebook_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CMsgClientPersonaState_Friend::set_has_facebook_id() {
  _has_bits_[0] |= 0x00200000u;
}
void CMsgClientPersonaState_Friend::clear_has_facebook_id() {
  _has_bits_[0] &= ~0x00200000u;
}
void CMsgClientPersonaState_Friend::clear_facebook_id() {
  facebook_id_ = GOOGLE_ULONGLONG(0);
  clear_has_facebook_id();
}
::google::protobuf::uint64 CMsgClientPersonaState_Friend::facebook_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.Friend.facebook_id)
  return facebook_id_;
}
void CMsgClientPersonaState_Friend::set_facebook_id(::google::protobuf::uint64 value) {
  set_has_facebook_id();
  facebook_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPersonaState.Friend.facebook_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPersonaState::kStatusFlagsFieldNumber;
const int CMsgClientPersonaState::kFriendsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPersonaState::CMsgClientPersonaState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPersonaState)
}
CMsgClientPersonaState::CMsgClientPersonaState(const CMsgClientPersonaState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_flags_ = from.status_flags_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPersonaState)
}

void CMsgClientPersonaState::SharedCtor() {
  _cached_size_ = 0;
  status_flags_ = 0u;
}

CMsgClientPersonaState::~CMsgClientPersonaState() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPersonaState)
  SharedDtor();
}

void CMsgClientPersonaState::SharedDtor() {
}

void CMsgClientPersonaState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPersonaState::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientPersonaState& CMsgClientPersonaState::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientPersonaState* CMsgClientPersonaState::New(::google::protobuf::Arena* arena) const {
  CMsgClientPersonaState* n = new CMsgClientPersonaState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientPersonaState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPersonaState)
  friends_.Clear();
  status_flags_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientPersonaState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPersonaState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status_flags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_status_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientPersonaState.Friend friends = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPersonaState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPersonaState)
  return false;
#undef DO_
}

void CMsgClientPersonaState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPersonaState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 status_flags = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status_flags(), output);
  }

  // repeated .proto.steam.CMsgClientPersonaState.Friend friends = 2;
  for (unsigned int i = 0, n = this->friends_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friends(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPersonaState)
}

::google::protobuf::uint8* CMsgClientPersonaState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPersonaState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 status_flags = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status_flags(), target);
  }

  // repeated .proto.steam.CMsgClientPersonaState.Friend friends = 2;
  for (unsigned int i = 0, n = this->friends_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->friends(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPersonaState)
  return target;
}

size_t CMsgClientPersonaState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPersonaState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientPersonaState.Friend friends = 2;
  {
    unsigned int count = this->friends_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friends(i));
    }
  }

  // optional uint32 status_flags = 1;
  if (has_status_flags()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status_flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPersonaState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPersonaState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPersonaState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientPersonaState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPersonaState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPersonaState)
    MergeFrom(*source);
  }
}

void CMsgClientPersonaState::MergeFrom(const CMsgClientPersonaState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPersonaState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
  if (from.has_status_flags()) {
    set_status_flags(from.status_flags());
  }
}

void CMsgClientPersonaState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPersonaState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPersonaState::CopyFrom(const CMsgClientPersonaState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPersonaState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPersonaState::IsInitialized() const {
  return true;
}

void CMsgClientPersonaState::Swap(CMsgClientPersonaState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPersonaState::InternalSwap(CMsgClientPersonaState* other) {
  friends_.InternalSwap(&other->friends_);
  std::swap(status_flags_, other->status_flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientPersonaState::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientPersonaState

// optional uint32 status_flags = 1;
bool CMsgClientPersonaState::has_status_flags() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientPersonaState::set_has_status_flags() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientPersonaState::clear_has_status_flags() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientPersonaState::clear_status_flags() {
  status_flags_ = 0u;
  clear_has_status_flags();
}
::google::protobuf::uint32 CMsgClientPersonaState::status_flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.status_flags)
  return status_flags_;
}
void CMsgClientPersonaState::set_status_flags(::google::protobuf::uint32 value) {
  set_has_status_flags();
  status_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPersonaState.status_flags)
}

// repeated .proto.steam.CMsgClientPersonaState.Friend friends = 2;
int CMsgClientPersonaState::friends_size() const {
  return friends_.size();
}
void CMsgClientPersonaState::clear_friends() {
  friends_.Clear();
}
const ::proto::steam::CMsgClientPersonaState_Friend& CMsgClientPersonaState::friends(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPersonaState.friends)
  return friends_.Get(index);
}
::proto::steam::CMsgClientPersonaState_Friend* CMsgClientPersonaState::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPersonaState.friends)
  return friends_.Mutable(index);
}
::proto::steam::CMsgClientPersonaState_Friend* CMsgClientPersonaState::add_friends() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientPersonaState.friends)
  return friends_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientPersonaState_Friend >*
CMsgClientPersonaState::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientPersonaState.friends)
  return &friends_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientPersonaState_Friend >&
CMsgClientPersonaState::friends() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientPersonaState.friends)
  return friends_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientFriendProfileInfo::kSteamidFriendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientFriendProfileInfo::CMsgClientFriendProfileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientFriendProfileInfo)
}
CMsgClientFriendProfileInfo::CMsgClientFriendProfileInfo(const CMsgClientFriendProfileInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_friend_ = from.steamid_friend_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientFriendProfileInfo)
}

void CMsgClientFriendProfileInfo::SharedCtor() {
  _cached_size_ = 0;
  steamid_friend_ = GOOGLE_ULONGLONG(0);
}

CMsgClientFriendProfileInfo::~CMsgClientFriendProfileInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientFriendProfileInfo)
  SharedDtor();
}

void CMsgClientFriendProfileInfo::SharedDtor() {
}

void CMsgClientFriendProfileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientFriendProfileInfo::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientFriendProfileInfo& CMsgClientFriendProfileInfo::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientFriendProfileInfo* CMsgClientFriendProfileInfo::New(::google::protobuf::Arena* arena) const {
  CMsgClientFriendProfileInfo* n = new CMsgClientFriendProfileInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientFriendProfileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientFriendProfileInfo)
  steamid_friend_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientFriendProfileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientFriendProfileInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_friend = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid_friend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_friend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientFriendProfileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientFriendProfileInfo)
  return false;
#undef DO_
}

void CMsgClientFriendProfileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientFriendProfileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_friend = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_friend(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientFriendProfileInfo)
}

::google::protobuf::uint8* CMsgClientFriendProfileInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientFriendProfileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_friend = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_friend(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientFriendProfileInfo)
  return target;
}

size_t CMsgClientFriendProfileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientFriendProfileInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 steamid_friend = 1;
  if (has_steamid_friend()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendProfileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientFriendProfileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientFriendProfileInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientFriendProfileInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientFriendProfileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientFriendProfileInfo)
    MergeFrom(*source);
  }
}

void CMsgClientFriendProfileInfo::MergeFrom(const CMsgClientFriendProfileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientFriendProfileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid_friend()) {
    set_steamid_friend(from.steamid_friend());
  }
}

void CMsgClientFriendProfileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientFriendProfileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendProfileInfo::CopyFrom(const CMsgClientFriendProfileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientFriendProfileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendProfileInfo::IsInitialized() const {
  return true;
}

void CMsgClientFriendProfileInfo::Swap(CMsgClientFriendProfileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientFriendProfileInfo::InternalSwap(CMsgClientFriendProfileInfo* other) {
  std::swap(steamid_friend_, other->steamid_friend_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientFriendProfileInfo::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientFriendProfileInfo

// optional fixed64 steamid_friend = 1;
bool CMsgClientFriendProfileInfo::has_steamid_friend() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientFriendProfileInfo::set_has_steamid_friend() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientFriendProfileInfo::clear_has_steamid_friend() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientFriendProfileInfo::clear_steamid_friend() {
  steamid_friend_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_friend();
}
::google::protobuf::uint64 CMsgClientFriendProfileInfo::steamid_friend() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendProfileInfo.steamid_friend)
  return steamid_friend_;
}
void CMsgClientFriendProfileInfo::set_steamid_friend(::google::protobuf::uint64 value) {
  set_has_steamid_friend();
  steamid_friend_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendProfileInfo.steamid_friend)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientFriendProfileInfoResponse::kEresultFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kSteamidFriendFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kTimeCreatedFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kRealNameFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kCityNameFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kStateNameFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kCountryNameFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kHeadlineFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kSummaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientFriendProfileInfoResponse::CMsgClientFriendProfileInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientFriendProfileInfoResponse)
}
CMsgClientFriendProfileInfoResponse::CMsgClientFriendProfileInfoResponse(const CMsgClientFriendProfileInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  real_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_real_name()) {
    real_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.real_name_);
  }
  city_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_city_name()) {
    city_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_name_);
  }
  state_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_state_name()) {
    state_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_name_);
  }
  country_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_name()) {
    country_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_name_);
  }
  headline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_headline()) {
    headline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headline_);
  }
  summary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_summary()) {
    summary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.summary_);
  }
  ::memcpy(&steamid_friend_, &from.steamid_friend_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steamid_friend_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientFriendProfileInfoResponse)
}

void CMsgClientFriendProfileInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  real_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  summary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_friend_, 0, reinterpret_cast<char*>(&time_created_) -
    reinterpret_cast<char*>(&steamid_friend_) + sizeof(time_created_));
  eresult_ = 2;
}

CMsgClientFriendProfileInfoResponse::~CMsgClientFriendProfileInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientFriendProfileInfoResponse)
  SharedDtor();
}

void CMsgClientFriendProfileInfoResponse::SharedDtor() {
  real_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headline_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  summary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientFriendProfileInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientFriendProfileInfoResponse::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientFriendProfileInfoResponse& CMsgClientFriendProfileInfoResponse::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientFriendProfileInfoResponse* CMsgClientFriendProfileInfoResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientFriendProfileInfoResponse* n = new CMsgClientFriendProfileInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientFriendProfileInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientFriendProfileInfoResponse)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_real_name()) {
      GOOGLE_DCHECK(!real_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*real_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_city_name()) {
      GOOGLE_DCHECK(!city_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*city_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_state_name()) {
      GOOGLE_DCHECK(!state_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*state_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_country_name()) {
      GOOGLE_DCHECK(!country_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_headline()) {
      GOOGLE_DCHECK(!headline_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*headline_.UnsafeRawStringPointer())->clear();
    }
    if (has_summary()) {
      GOOGLE_DCHECK(!summary_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*summary_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&steamid_friend_, 0, reinterpret_cast<char*>(&time_created_) -
      reinterpret_cast<char*>(&steamid_friend_) + sizeof(time_created_));
  }
  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientFriendProfileInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientFriendProfileInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid_friend = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steamid_friend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_friend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_created = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_time_created();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string real_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_real_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->real_name().data(), this->real_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientFriendProfileInfoResponse.real_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string city_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city_name().data(), this->city_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientFriendProfileInfoResponse.city_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string state_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->state_name().data(), this->state_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientFriendProfileInfoResponse.state_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_name().data(), this->country_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientFriendProfileInfoResponse.country_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string headline = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headline().data(), this->headline().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientFriendProfileInfoResponse.headline");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string summary = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_summary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->summary().data(), this->summary().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientFriendProfileInfoResponse.summary");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientFriendProfileInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientFriendProfileInfoResponse)
  return false;
#undef DO_
}

void CMsgClientFriendProfileInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientFriendProfileInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed64 steamid_friend = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid_friend(), output);
  }

  // optional uint32 time_created = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_created(), output);
  }

  // optional string real_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->real_name().data(), this->real_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.real_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->real_name(), output);
  }

  // optional string city_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city_name().data(), this->city_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.city_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->city_name(), output);
  }

  // optional string state_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state_name().data(), this->state_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.state_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->state_name(), output);
  }

  // optional string country_name = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_name().data(), this->country_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.country_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->country_name(), output);
  }

  // optional string headline = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headline().data(), this->headline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.headline");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->headline(), output);
  }

  // optional string summary = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.summary");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->summary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientFriendProfileInfoResponse)
}

::google::protobuf::uint8* CMsgClientFriendProfileInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientFriendProfileInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional fixed64 steamid_friend = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid_friend(), target);
  }

  // optional uint32 time_created = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_created(), target);
  }

  // optional string real_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->real_name().data(), this->real_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.real_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->real_name(), target);
  }

  // optional string city_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city_name().data(), this->city_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.city_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->city_name(), target);
  }

  // optional string state_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state_name().data(), this->state_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.state_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->state_name(), target);
  }

  // optional string country_name = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_name().data(), this->country_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.country_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->country_name(), target);
  }

  // optional string headline = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headline().data(), this->headline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.headline");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->headline(), target);
  }

  // optional string summary = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.summary");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->summary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientFriendProfileInfoResponse)
  return target;
}

size_t CMsgClientFriendProfileInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientFriendProfileInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string real_name = 4;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->real_name());
    }

    // optional string city_name = 5;
    if (has_city_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city_name());
    }

    // optional string state_name = 6;
    if (has_state_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state_name());
    }

    // optional string country_name = 7;
    if (has_country_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_name());
    }

    // optional string headline = 8;
    if (has_headline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headline());
    }

    // optional string summary = 9;
    if (has_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->summary());
    }

    // optional fixed64 steamid_friend = 2;
    if (has_steamid_friend()) {
      total_size += 1 + 8;
    }

    // optional uint32 time_created = 3;
    if (has_time_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

  }
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendProfileInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientFriendProfileInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientFriendProfileInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientFriendProfileInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientFriendProfileInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientFriendProfileInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgClientFriendProfileInfoResponse::MergeFrom(const CMsgClientFriendProfileInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientFriendProfileInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_real_name();
      real_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.real_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_city_name();
      city_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_state_name();
      state_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_country_name();
      country_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_headline();
      headline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headline_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_summary();
      summary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.summary_);
    }
    if (cached_has_bits & 0x00000040u) {
      steamid_friend_ = from.steamid_friend_;
    }
    if (cached_has_bits & 0x00000080u) {
      time_created_ = from.time_created_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_eresult(from.eresult());
  }
}

void CMsgClientFriendProfileInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientFriendProfileInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendProfileInfoResponse::CopyFrom(const CMsgClientFriendProfileInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientFriendProfileInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendProfileInfoResponse::IsInitialized() const {
  return true;
}

void CMsgClientFriendProfileInfoResponse::Swap(CMsgClientFriendProfileInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientFriendProfileInfoResponse::InternalSwap(CMsgClientFriendProfileInfoResponse* other) {
  real_name_.Swap(&other->real_name_);
  city_name_.Swap(&other->city_name_);
  state_name_.Swap(&other->state_name_);
  country_name_.Swap(&other->country_name_);
  headline_.Swap(&other->headline_);
  summary_.Swap(&other->summary_);
  std::swap(steamid_friend_, other->steamid_friend_);
  std::swap(time_created_, other->time_created_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientFriendProfileInfoResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientFriendProfileInfoResponse

// optional int32 eresult = 1 [default = 2];
bool CMsgClientFriendProfileInfoResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgClientFriendProfileInfoResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgClientFriendProfileInfoResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgClientFriendProfileInfoResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientFriendProfileInfoResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendProfileInfoResponse.eresult)
  return eresult_;
}
void CMsgClientFriendProfileInfoResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendProfileInfoResponse.eresult)
}

// optional fixed64 steamid_friend = 2;
bool CMsgClientFriendProfileInfoResponse::has_steamid_friend() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientFriendProfileInfoResponse::set_has_steamid_friend() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientFriendProfileInfoResponse::clear_has_steamid_friend() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientFriendProfileInfoResponse::clear_steamid_friend() {
  steamid_friend_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_friend();
}
::google::protobuf::uint64 CMsgClientFriendProfileInfoResponse::steamid_friend() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendProfileInfoResponse.steamid_friend)
  return steamid_friend_;
}
void CMsgClientFriendProfileInfoResponse::set_steamid_friend(::google::protobuf::uint64 value) {
  set_has_steamid_friend();
  steamid_friend_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendProfileInfoResponse.steamid_friend)
}

// optional uint32 time_created = 3;
bool CMsgClientFriendProfileInfoResponse::has_time_created() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgClientFriendProfileInfoResponse::set_has_time_created() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgClientFriendProfileInfoResponse::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgClientFriendProfileInfoResponse::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
::google::protobuf::uint32 CMsgClientFriendProfileInfoResponse::time_created() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendProfileInfoResponse.time_created)
  return time_created_;
}
void CMsgClientFriendProfileInfoResponse::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendProfileInfoResponse.time_created)
}

// optional string real_name = 4;
bool CMsgClientFriendProfileInfoResponse::has_real_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientFriendProfileInfoResponse::set_has_real_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientFriendProfileInfoResponse::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientFriendProfileInfoResponse::clear_real_name() {
  real_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_real_name();
}
const ::std::string& CMsgClientFriendProfileInfoResponse::real_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendProfileInfoResponse.real_name)
  return real_name_.GetNoArena();
}
void CMsgClientFriendProfileInfoResponse::set_real_name(const ::std::string& value) {
  set_has_real_name();
  real_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendProfileInfoResponse.real_name)
}
#if LANG_CXX11
void CMsgClientFriendProfileInfoResponse::set_real_name(::std::string&& value) {
  set_has_real_name();
  real_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientFriendProfileInfoResponse.real_name)
}
#endif
void CMsgClientFriendProfileInfoResponse::set_real_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_real_name();
  real_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientFriendProfileInfoResponse.real_name)
}
void CMsgClientFriendProfileInfoResponse::set_real_name(const char* value, size_t size) {
  set_has_real_name();
  real_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientFriendProfileInfoResponse.real_name)
}
::std::string* CMsgClientFriendProfileInfoResponse::mutable_real_name() {
  set_has_real_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientFriendProfileInfoResponse.real_name)
  return real_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientFriendProfileInfoResponse::release_real_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientFriendProfileInfoResponse.real_name)
  clear_has_real_name();
  return real_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientFriendProfileInfoResponse::set_allocated_real_name(::std::string* real_name) {
  if (real_name != NULL) {
    set_has_real_name();
  } else {
    clear_has_real_name();
  }
  real_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), real_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientFriendProfileInfoResponse.real_name)
}

// optional string city_name = 5;
bool CMsgClientFriendProfileInfoResponse::has_city_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientFriendProfileInfoResponse::set_has_city_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientFriendProfileInfoResponse::clear_has_city_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientFriendProfileInfoResponse::clear_city_name() {
  city_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city_name();
}
const ::std::string& CMsgClientFriendProfileInfoResponse::city_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendProfileInfoResponse.city_name)
  return city_name_.GetNoArena();
}
void CMsgClientFriendProfileInfoResponse::set_city_name(const ::std::string& value) {
  set_has_city_name();
  city_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendProfileInfoResponse.city_name)
}
#if LANG_CXX11
void CMsgClientFriendProfileInfoResponse::set_city_name(::std::string&& value) {
  set_has_city_name();
  city_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientFriendProfileInfoResponse.city_name)
}
#endif
void CMsgClientFriendProfileInfoResponse::set_city_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city_name();
  city_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientFriendProfileInfoResponse.city_name)
}
void CMsgClientFriendProfileInfoResponse::set_city_name(const char* value, size_t size) {
  set_has_city_name();
  city_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientFriendProfileInfoResponse.city_name)
}
::std::string* CMsgClientFriendProfileInfoResponse::mutable_city_name() {
  set_has_city_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientFriendProfileInfoResponse.city_name)
  return city_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientFriendProfileInfoResponse::release_city_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientFriendProfileInfoResponse.city_name)
  clear_has_city_name();
  return city_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientFriendProfileInfoResponse::set_allocated_city_name(::std::string* city_name) {
  if (city_name != NULL) {
    set_has_city_name();
  } else {
    clear_has_city_name();
  }
  city_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientFriendProfileInfoResponse.city_name)
}

// optional string state_name = 6;
bool CMsgClientFriendProfileInfoResponse::has_state_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientFriendProfileInfoResponse::set_has_state_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientFriendProfileInfoResponse::clear_has_state_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientFriendProfileInfoResponse::clear_state_name() {
  state_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_state_name();
}
const ::std::string& CMsgClientFriendProfileInfoResponse::state_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendProfileInfoResponse.state_name)
  return state_name_.GetNoArena();
}
void CMsgClientFriendProfileInfoResponse::set_state_name(const ::std::string& value) {
  set_has_state_name();
  state_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendProfileInfoResponse.state_name)
}
#if LANG_CXX11
void CMsgClientFriendProfileInfoResponse::set_state_name(::std::string&& value) {
  set_has_state_name();
  state_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientFriendProfileInfoResponse.state_name)
}
#endif
void CMsgClientFriendProfileInfoResponse::set_state_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_state_name();
  state_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientFriendProfileInfoResponse.state_name)
}
void CMsgClientFriendProfileInfoResponse::set_state_name(const char* value, size_t size) {
  set_has_state_name();
  state_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientFriendProfileInfoResponse.state_name)
}
::std::string* CMsgClientFriendProfileInfoResponse::mutable_state_name() {
  set_has_state_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientFriendProfileInfoResponse.state_name)
  return state_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientFriendProfileInfoResponse::release_state_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientFriendProfileInfoResponse.state_name)
  clear_has_state_name();
  return state_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientFriendProfileInfoResponse::set_allocated_state_name(::std::string* state_name) {
  if (state_name != NULL) {
    set_has_state_name();
  } else {
    clear_has_state_name();
  }
  state_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientFriendProfileInfoResponse.state_name)
}

// optional string country_name = 7;
bool CMsgClientFriendProfileInfoResponse::has_country_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientFriendProfileInfoResponse::set_has_country_name() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientFriendProfileInfoResponse::clear_has_country_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientFriendProfileInfoResponse::clear_country_name() {
  country_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_name();
}
const ::std::string& CMsgClientFriendProfileInfoResponse::country_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendProfileInfoResponse.country_name)
  return country_name_.GetNoArena();
}
void CMsgClientFriendProfileInfoResponse::set_country_name(const ::std::string& value) {
  set_has_country_name();
  country_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendProfileInfoResponse.country_name)
}
#if LANG_CXX11
void CMsgClientFriendProfileInfoResponse::set_country_name(::std::string&& value) {
  set_has_country_name();
  country_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientFriendProfileInfoResponse.country_name)
}
#endif
void CMsgClientFriendProfileInfoResponse::set_country_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_name();
  country_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientFriendProfileInfoResponse.country_name)
}
void CMsgClientFriendProfileInfoResponse::set_country_name(const char* value, size_t size) {
  set_has_country_name();
  country_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientFriendProfileInfoResponse.country_name)
}
::std::string* CMsgClientFriendProfileInfoResponse::mutable_country_name() {
  set_has_country_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientFriendProfileInfoResponse.country_name)
  return country_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientFriendProfileInfoResponse::release_country_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientFriendProfileInfoResponse.country_name)
  clear_has_country_name();
  return country_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientFriendProfileInfoResponse::set_allocated_country_name(::std::string* country_name) {
  if (country_name != NULL) {
    set_has_country_name();
  } else {
    clear_has_country_name();
  }
  country_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientFriendProfileInfoResponse.country_name)
}

// optional string headline = 8;
bool CMsgClientFriendProfileInfoResponse::has_headline() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientFriendProfileInfoResponse::set_has_headline() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientFriendProfileInfoResponse::clear_has_headline() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientFriendProfileInfoResponse::clear_headline() {
  headline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headline();
}
const ::std::string& CMsgClientFriendProfileInfoResponse::headline() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendProfileInfoResponse.headline)
  return headline_.GetNoArena();
}
void CMsgClientFriendProfileInfoResponse::set_headline(const ::std::string& value) {
  set_has_headline();
  headline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendProfileInfoResponse.headline)
}
#if LANG_CXX11
void CMsgClientFriendProfileInfoResponse::set_headline(::std::string&& value) {
  set_has_headline();
  headline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientFriendProfileInfoResponse.headline)
}
#endif
void CMsgClientFriendProfileInfoResponse::set_headline(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_headline();
  headline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientFriendProfileInfoResponse.headline)
}
void CMsgClientFriendProfileInfoResponse::set_headline(const char* value, size_t size) {
  set_has_headline();
  headline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientFriendProfileInfoResponse.headline)
}
::std::string* CMsgClientFriendProfileInfoResponse::mutable_headline() {
  set_has_headline();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientFriendProfileInfoResponse.headline)
  return headline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientFriendProfileInfoResponse::release_headline() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientFriendProfileInfoResponse.headline)
  clear_has_headline();
  return headline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientFriendProfileInfoResponse::set_allocated_headline(::std::string* headline) {
  if (headline != NULL) {
    set_has_headline();
  } else {
    clear_has_headline();
  }
  headline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headline);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientFriendProfileInfoResponse.headline)
}

// optional string summary = 9;
bool CMsgClientFriendProfileInfoResponse::has_summary() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientFriendProfileInfoResponse::set_has_summary() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientFriendProfileInfoResponse::clear_has_summary() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientFriendProfileInfoResponse::clear_summary() {
  summary_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_summary();
}
const ::std::string& CMsgClientFriendProfileInfoResponse::summary() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientFriendProfileInfoResponse.summary)
  return summary_.GetNoArena();
}
void CMsgClientFriendProfileInfoResponse::set_summary(const ::std::string& value) {
  set_has_summary();
  summary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientFriendProfileInfoResponse.summary)
}
#if LANG_CXX11
void CMsgClientFriendProfileInfoResponse::set_summary(::std::string&& value) {
  set_has_summary();
  summary_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientFriendProfileInfoResponse.summary)
}
#endif
void CMsgClientFriendProfileInfoResponse::set_summary(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_summary();
  summary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientFriendProfileInfoResponse.summary)
}
void CMsgClientFriendProfileInfoResponse::set_summary(const char* value, size_t size) {
  set_has_summary();
  summary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientFriendProfileInfoResponse.summary)
}
::std::string* CMsgClientFriendProfileInfoResponse::mutable_summary() {
  set_has_summary();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientFriendProfileInfoResponse.summary)
  return summary_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientFriendProfileInfoResponse::release_summary() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientFriendProfileInfoResponse.summary)
  clear_has_summary();
  return summary_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientFriendProfileInfoResponse::set_allocated_summary(::std::string* summary) {
  if (summary != NULL) {
    set_has_summary();
  } else {
    clear_has_summary();
  }
  summary_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), summary);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientFriendProfileInfoResponse.summary)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientCreateFriendsGroup::kSteamidFieldNumber;
const int CMsgClientCreateFriendsGroup::kGroupnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientCreateFriendsGroup::CMsgClientCreateFriendsGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientCreateFriendsGroup)
}
CMsgClientCreateFriendsGroup::CMsgClientCreateFriendsGroup(const CMsgClientCreateFriendsGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupname()) {
    groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientCreateFriendsGroup)
}

void CMsgClientCreateFriendsGroup::SharedCtor() {
  _cached_size_ = 0;
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamid_ = GOOGLE_ULONGLONG(0);
}

CMsgClientCreateFriendsGroup::~CMsgClientCreateFriendsGroup() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientCreateFriendsGroup)
  SharedDtor();
}

void CMsgClientCreateFriendsGroup::SharedDtor() {
  groupname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientCreateFriendsGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientCreateFriendsGroup::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientCreateFriendsGroup& CMsgClientCreateFriendsGroup::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientCreateFriendsGroup* CMsgClientCreateFriendsGroup::New(::google::protobuf::Arena* arena) const {
  CMsgClientCreateFriendsGroup* n = new CMsgClientCreateFriendsGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientCreateFriendsGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientCreateFriendsGroup)
  if (has_groupname()) {
    GOOGLE_DCHECK(!groupname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*groupname_.UnsafeRawStringPointer())->clear();
  }
  steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientCreateFriendsGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientCreateFriendsGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string groupname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientCreateFriendsGroup.groupname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientCreateFriendsGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientCreateFriendsGroup)
  return false;
#undef DO_
}

void CMsgClientCreateFriendsGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientCreateFriendsGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string groupname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientCreateFriendsGroup.groupname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientCreateFriendsGroup)
}

::google::protobuf::uint8* CMsgClientCreateFriendsGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientCreateFriendsGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional string groupname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientCreateFriendsGroup.groupname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientCreateFriendsGroup)
  return target;
}

size_t CMsgClientCreateFriendsGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientCreateFriendsGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string groupname = 2;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientCreateFriendsGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientCreateFriendsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientCreateFriendsGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientCreateFriendsGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientCreateFriendsGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientCreateFriendsGroup)
    MergeFrom(*source);
  }
}

void CMsgClientCreateFriendsGroup::MergeFrom(const CMsgClientCreateFriendsGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientCreateFriendsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_groupname();
      groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientCreateFriendsGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientCreateFriendsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientCreateFriendsGroup::CopyFrom(const CMsgClientCreateFriendsGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientCreateFriendsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCreateFriendsGroup::IsInitialized() const {
  return true;
}

void CMsgClientCreateFriendsGroup::Swap(CMsgClientCreateFriendsGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientCreateFriendsGroup::InternalSwap(CMsgClientCreateFriendsGroup* other) {
  groupname_.Swap(&other->groupname_);
  std::swap(steamid_, other->steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientCreateFriendsGroup::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientCreateFriendsGroup

// optional fixed64 steamid = 1;
bool CMsgClientCreateFriendsGroup::has_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientCreateFriendsGroup::set_has_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientCreateFriendsGroup::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientCreateFriendsGroup::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgClientCreateFriendsGroup::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientCreateFriendsGroup.steamid)
  return steamid_;
}
void CMsgClientCreateFriendsGroup::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientCreateFriendsGroup.steamid)
}

// optional string groupname = 2;
bool CMsgClientCreateFriendsGroup::has_groupname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientCreateFriendsGroup::set_has_groupname() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientCreateFriendsGroup::clear_has_groupname() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientCreateFriendsGroup::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupname();
}
const ::std::string& CMsgClientCreateFriendsGroup::groupname() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientCreateFriendsGroup.groupname)
  return groupname_.GetNoArena();
}
void CMsgClientCreateFriendsGroup::set_groupname(const ::std::string& value) {
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientCreateFriendsGroup.groupname)
}
#if LANG_CXX11
void CMsgClientCreateFriendsGroup::set_groupname(::std::string&& value) {
  set_has_groupname();
  groupname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientCreateFriendsGroup.groupname)
}
#endif
void CMsgClientCreateFriendsGroup::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientCreateFriendsGroup.groupname)
}
void CMsgClientCreateFriendsGroup::set_groupname(const char* value, size_t size) {
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientCreateFriendsGroup.groupname)
}
::std::string* CMsgClientCreateFriendsGroup::mutable_groupname() {
  set_has_groupname();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientCreateFriendsGroup.groupname)
  return groupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientCreateFriendsGroup::release_groupname() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientCreateFriendsGroup.groupname)
  clear_has_groupname();
  return groupname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientCreateFriendsGroup::set_allocated_groupname(::std::string* groupname) {
  if (groupname != NULL) {
    set_has_groupname();
  } else {
    clear_has_groupname();
  }
  groupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientCreateFriendsGroup.groupname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientCreateFriendsGroupResponse::kEresultFieldNumber;
const int CMsgClientCreateFriendsGroupResponse::kGroupidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientCreateFriendsGroupResponse::CMsgClientCreateFriendsGroupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientCreateFriendsGroupResponse)
}
CMsgClientCreateFriendsGroupResponse::CMsgClientCreateFriendsGroupResponse(const CMsgClientCreateFriendsGroupResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eresult_, &from.eresult_,
    reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&eresult_) + sizeof(groupid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientCreateFriendsGroupResponse)
}

void CMsgClientCreateFriendsGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&eresult_, 0, reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&eresult_) + sizeof(groupid_));
}

CMsgClientCreateFriendsGroupResponse::~CMsgClientCreateFriendsGroupResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientCreateFriendsGroupResponse)
  SharedDtor();
}

void CMsgClientCreateFriendsGroupResponse::SharedDtor() {
}

void CMsgClientCreateFriendsGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientCreateFriendsGroupResponse::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientCreateFriendsGroupResponse& CMsgClientCreateFriendsGroupResponse::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientCreateFriendsGroupResponse* CMsgClientCreateFriendsGroupResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientCreateFriendsGroupResponse* n = new CMsgClientCreateFriendsGroupResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientCreateFriendsGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientCreateFriendsGroupResponse)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&eresult_, 0, reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&eresult_) + sizeof(groupid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientCreateFriendsGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientCreateFriendsGroupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 groupid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_groupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientCreateFriendsGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientCreateFriendsGroupResponse)
  return false;
#undef DO_
}

void CMsgClientCreateFriendsGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientCreateFriendsGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional int32 groupid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientCreateFriendsGroupResponse)
}

::google::protobuf::uint8* CMsgClientCreateFriendsGroupResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientCreateFriendsGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 groupid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientCreateFriendsGroupResponse)
  return target;
}

size_t CMsgClientCreateFriendsGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientCreateFriendsGroupResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 eresult = 1;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional int32 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientCreateFriendsGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientCreateFriendsGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientCreateFriendsGroupResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientCreateFriendsGroupResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientCreateFriendsGroupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientCreateFriendsGroupResponse)
    MergeFrom(*source);
  }
}

void CMsgClientCreateFriendsGroupResponse::MergeFrom(const CMsgClientCreateFriendsGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientCreateFriendsGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      eresult_ = from.eresult_;
    }
    if (cached_has_bits & 0x00000002u) {
      groupid_ = from.groupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientCreateFriendsGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientCreateFriendsGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientCreateFriendsGroupResponse::CopyFrom(const CMsgClientCreateFriendsGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientCreateFriendsGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCreateFriendsGroupResponse::IsInitialized() const {
  return true;
}

void CMsgClientCreateFriendsGroupResponse::Swap(CMsgClientCreateFriendsGroupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientCreateFriendsGroupResponse::InternalSwap(CMsgClientCreateFriendsGroupResponse* other) {
  std::swap(eresult_, other->eresult_);
  std::swap(groupid_, other->groupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientCreateFriendsGroupResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientCreateFriendsGroupResponse

// optional uint32 eresult = 1;
bool CMsgClientCreateFriendsGroupResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientCreateFriendsGroupResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientCreateFriendsGroupResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientCreateFriendsGroupResponse::clear_eresult() {
  eresult_ = 0u;
  clear_has_eresult();
}
::google::protobuf::uint32 CMsgClientCreateFriendsGroupResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientCreateFriendsGroupResponse.eresult)
  return eresult_;
}
void CMsgClientCreateFriendsGroupResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientCreateFriendsGroupResponse.eresult)
}

// optional int32 groupid = 2;
bool CMsgClientCreateFriendsGroupResponse::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientCreateFriendsGroupResponse::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientCreateFriendsGroupResponse::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientCreateFriendsGroupResponse::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
::google::protobuf::int32 CMsgClientCreateFriendsGroupResponse::groupid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientCreateFriendsGroupResponse.groupid)
  return groupid_;
}
void CMsgClientCreateFriendsGroupResponse::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientCreateFriendsGroupResponse.groupid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientDeleteFriendsGroup::kSteamidFieldNumber;
const int CMsgClientDeleteFriendsGroup::kGroupidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientDeleteFriendsGroup::CMsgClientDeleteFriendsGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientDeleteFriendsGroup)
}
CMsgClientDeleteFriendsGroup::CMsgClientDeleteFriendsGroup(const CMsgClientDeleteFriendsGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(groupid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientDeleteFriendsGroup)
}

void CMsgClientDeleteFriendsGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(groupid_));
}

CMsgClientDeleteFriendsGroup::~CMsgClientDeleteFriendsGroup() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientDeleteFriendsGroup)
  SharedDtor();
}

void CMsgClientDeleteFriendsGroup::SharedDtor() {
}

void CMsgClientDeleteFriendsGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientDeleteFriendsGroup::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientDeleteFriendsGroup& CMsgClientDeleteFriendsGroup::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientDeleteFriendsGroup* CMsgClientDeleteFriendsGroup::New(::google::protobuf::Arena* arena) const {
  CMsgClientDeleteFriendsGroup* n = new CMsgClientDeleteFriendsGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientDeleteFriendsGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientDeleteFriendsGroup)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(groupid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientDeleteFriendsGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientDeleteFriendsGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 groupid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_groupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientDeleteFriendsGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientDeleteFriendsGroup)
  return false;
#undef DO_
}

void CMsgClientDeleteFriendsGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientDeleteFriendsGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional int32 groupid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientDeleteFriendsGroup)
}

::google::protobuf::uint8* CMsgClientDeleteFriendsGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientDeleteFriendsGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional int32 groupid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientDeleteFriendsGroup)
  return target;
}

size_t CMsgClientDeleteFriendsGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientDeleteFriendsGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional int32 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientDeleteFriendsGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientDeleteFriendsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientDeleteFriendsGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientDeleteFriendsGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientDeleteFriendsGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientDeleteFriendsGroup)
    MergeFrom(*source);
  }
}

void CMsgClientDeleteFriendsGroup::MergeFrom(const CMsgClientDeleteFriendsGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientDeleteFriendsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      groupid_ = from.groupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientDeleteFriendsGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientDeleteFriendsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientDeleteFriendsGroup::CopyFrom(const CMsgClientDeleteFriendsGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientDeleteFriendsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDeleteFriendsGroup::IsInitialized() const {
  return true;
}

void CMsgClientDeleteFriendsGroup::Swap(CMsgClientDeleteFriendsGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientDeleteFriendsGroup::InternalSwap(CMsgClientDeleteFriendsGroup* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(groupid_, other->groupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientDeleteFriendsGroup::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientDeleteFriendsGroup

// optional fixed64 steamid = 1;
bool CMsgClientDeleteFriendsGroup::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientDeleteFriendsGroup::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientDeleteFriendsGroup::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientDeleteFriendsGroup::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgClientDeleteFriendsGroup::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientDeleteFriendsGroup.steamid)
  return steamid_;
}
void CMsgClientDeleteFriendsGroup::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientDeleteFriendsGroup.steamid)
}

// optional int32 groupid = 2;
bool CMsgClientDeleteFriendsGroup::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientDeleteFriendsGroup::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientDeleteFriendsGroup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientDeleteFriendsGroup::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
::google::protobuf::int32 CMsgClientDeleteFriendsGroup::groupid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientDeleteFriendsGroup.groupid)
  return groupid_;
}
void CMsgClientDeleteFriendsGroup::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientDeleteFriendsGroup.groupid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientDeleteFriendsGroupResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientDeleteFriendsGroupResponse::CMsgClientDeleteFriendsGroupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientDeleteFriendsGroupResponse)
}
CMsgClientDeleteFriendsGroupResponse::CMsgClientDeleteFriendsGroupResponse(const CMsgClientDeleteFriendsGroupResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientDeleteFriendsGroupResponse)
}

void CMsgClientDeleteFriendsGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
}

CMsgClientDeleteFriendsGroupResponse::~CMsgClientDeleteFriendsGroupResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  SharedDtor();
}

void CMsgClientDeleteFriendsGroupResponse::SharedDtor() {
}

void CMsgClientDeleteFriendsGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientDeleteFriendsGroupResponse::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientDeleteFriendsGroupResponse& CMsgClientDeleteFriendsGroupResponse::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientDeleteFriendsGroupResponse* CMsgClientDeleteFriendsGroupResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientDeleteFriendsGroupResponse* n = new CMsgClientDeleteFriendsGroupResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientDeleteFriendsGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  eresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientDeleteFriendsGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  return false;
#undef DO_
}

void CMsgClientDeleteFriendsGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientDeleteFriendsGroupResponse)
}

::google::protobuf::uint8* CMsgClientDeleteFriendsGroupResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  return target;
}

size_t CMsgClientDeleteFriendsGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientDeleteFriendsGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientDeleteFriendsGroupResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientDeleteFriendsGroupResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientDeleteFriendsGroupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientDeleteFriendsGroupResponse)
    MergeFrom(*source);
  }
}

void CMsgClientDeleteFriendsGroupResponse::MergeFrom(const CMsgClientDeleteFriendsGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgClientDeleteFriendsGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientDeleteFriendsGroupResponse::CopyFrom(const CMsgClientDeleteFriendsGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDeleteFriendsGroupResponse::IsInitialized() const {
  return true;
}

void CMsgClientDeleteFriendsGroupResponse::Swap(CMsgClientDeleteFriendsGroupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientDeleteFriendsGroupResponse::InternalSwap(CMsgClientDeleteFriendsGroupResponse* other) {
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientDeleteFriendsGroupResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientDeleteFriendsGroupResponse

// optional uint32 eresult = 1;
bool CMsgClientDeleteFriendsGroupResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientDeleteFriendsGroupResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientDeleteFriendsGroupResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientDeleteFriendsGroupResponse::clear_eresult() {
  eresult_ = 0u;
  clear_has_eresult();
}
::google::protobuf::uint32 CMsgClientDeleteFriendsGroupResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientDeleteFriendsGroupResponse.eresult)
  return eresult_;
}
void CMsgClientDeleteFriendsGroupResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientDeleteFriendsGroupResponse.eresult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRenameFriendsGroup::kGroupidFieldNumber;
const int CMsgClientRenameFriendsGroup::kGroupnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRenameFriendsGroup::CMsgClientRenameFriendsGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRenameFriendsGroup)
}
CMsgClientRenameFriendsGroup::CMsgClientRenameFriendsGroup(const CMsgClientRenameFriendsGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupname()) {
    groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  groupid_ = from.groupid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRenameFriendsGroup)
}

void CMsgClientRenameFriendsGroup::SharedCtor() {
  _cached_size_ = 0;
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_ = 0;
}

CMsgClientRenameFriendsGroup::~CMsgClientRenameFriendsGroup() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRenameFriendsGroup)
  SharedDtor();
}

void CMsgClientRenameFriendsGroup::SharedDtor() {
  groupname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientRenameFriendsGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRenameFriendsGroup::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientRenameFriendsGroup& CMsgClientRenameFriendsGroup::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientRenameFriendsGroup* CMsgClientRenameFriendsGroup::New(::google::protobuf::Arena* arena) const {
  CMsgClientRenameFriendsGroup* n = new CMsgClientRenameFriendsGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientRenameFriendsGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRenameFriendsGroup)
  if (has_groupname()) {
    GOOGLE_DCHECK(!groupname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*groupname_.UnsafeRawStringPointer())->clear();
  }
  groupid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientRenameFriendsGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRenameFriendsGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 groupid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_groupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string groupname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientRenameFriendsGroup.groupname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRenameFriendsGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRenameFriendsGroup)
  return false;
#undef DO_
}

void CMsgClientRenameFriendsGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRenameFriendsGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 groupid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // optional string groupname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientRenameFriendsGroup.groupname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRenameFriendsGroup)
}

::google::protobuf::uint8* CMsgClientRenameFriendsGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRenameFriendsGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 groupid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // optional string groupname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientRenameFriendsGroup.groupname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRenameFriendsGroup)
  return target;
}

size_t CMsgClientRenameFriendsGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRenameFriendsGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string groupname = 2;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

    // optional int32 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRenameFriendsGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRenameFriendsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRenameFriendsGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientRenameFriendsGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRenameFriendsGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRenameFriendsGroup)
    MergeFrom(*source);
  }
}

void CMsgClientRenameFriendsGroup::MergeFrom(const CMsgClientRenameFriendsGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRenameFriendsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_groupname();
      groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
    }
    if (cached_has_bits & 0x00000002u) {
      groupid_ = from.groupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientRenameFriendsGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRenameFriendsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRenameFriendsGroup::CopyFrom(const CMsgClientRenameFriendsGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRenameFriendsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRenameFriendsGroup::IsInitialized() const {
  return true;
}

void CMsgClientRenameFriendsGroup::Swap(CMsgClientRenameFriendsGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRenameFriendsGroup::InternalSwap(CMsgClientRenameFriendsGroup* other) {
  groupname_.Swap(&other->groupname_);
  std::swap(groupid_, other->groupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientRenameFriendsGroup::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientRenameFriendsGroup

// optional int32 groupid = 1;
bool CMsgClientRenameFriendsGroup::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientRenameFriendsGroup::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientRenameFriendsGroup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientRenameFriendsGroup::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
::google::protobuf::int32 CMsgClientRenameFriendsGroup::groupid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRenameFriendsGroup.groupid)
  return groupid_;
}
void CMsgClientRenameFriendsGroup::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientRenameFriendsGroup.groupid)
}

// optional string groupname = 2;
bool CMsgClientRenameFriendsGroup::has_groupname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientRenameFriendsGroup::set_has_groupname() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientRenameFriendsGroup::clear_has_groupname() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientRenameFriendsGroup::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupname();
}
const ::std::string& CMsgClientRenameFriendsGroup::groupname() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRenameFriendsGroup.groupname)
  return groupname_.GetNoArena();
}
void CMsgClientRenameFriendsGroup::set_groupname(const ::std::string& value) {
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientRenameFriendsGroup.groupname)
}
#if LANG_CXX11
void CMsgClientRenameFriendsGroup::set_groupname(::std::string&& value) {
  set_has_groupname();
  groupname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientRenameFriendsGroup.groupname)
}
#endif
void CMsgClientRenameFriendsGroup::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientRenameFriendsGroup.groupname)
}
void CMsgClientRenameFriendsGroup::set_groupname(const char* value, size_t size) {
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientRenameFriendsGroup.groupname)
}
::std::string* CMsgClientRenameFriendsGroup::mutable_groupname() {
  set_has_groupname();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientRenameFriendsGroup.groupname)
  return groupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientRenameFriendsGroup::release_groupname() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientRenameFriendsGroup.groupname)
  clear_has_groupname();
  return groupname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientRenameFriendsGroup::set_allocated_groupname(::std::string* groupname) {
  if (groupname != NULL) {
    set_has_groupname();
  } else {
    clear_has_groupname();
  }
  groupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientRenameFriendsGroup.groupname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRenameFriendsGroupResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRenameFriendsGroupResponse::CMsgClientRenameFriendsGroupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRenameFriendsGroupResponse)
}
CMsgClientRenameFriendsGroupResponse::CMsgClientRenameFriendsGroupResponse(const CMsgClientRenameFriendsGroupResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRenameFriendsGroupResponse)
}

void CMsgClientRenameFriendsGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
}

CMsgClientRenameFriendsGroupResponse::~CMsgClientRenameFriendsGroupResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRenameFriendsGroupResponse)
  SharedDtor();
}

void CMsgClientRenameFriendsGroupResponse::SharedDtor() {
}

void CMsgClientRenameFriendsGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRenameFriendsGroupResponse::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientRenameFriendsGroupResponse& CMsgClientRenameFriendsGroupResponse::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientRenameFriendsGroupResponse* CMsgClientRenameFriendsGroupResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientRenameFriendsGroupResponse* n = new CMsgClientRenameFriendsGroupResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientRenameFriendsGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRenameFriendsGroupResponse)
  eresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientRenameFriendsGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRenameFriendsGroupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRenameFriendsGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRenameFriendsGroupResponse)
  return false;
#undef DO_
}

void CMsgClientRenameFriendsGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRenameFriendsGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRenameFriendsGroupResponse)
}

::google::protobuf::uint8* CMsgClientRenameFriendsGroupResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRenameFriendsGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRenameFriendsGroupResponse)
  return target;
}

size_t CMsgClientRenameFriendsGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRenameFriendsGroupResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRenameFriendsGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRenameFriendsGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRenameFriendsGroupResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientRenameFriendsGroupResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRenameFriendsGroupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRenameFriendsGroupResponse)
    MergeFrom(*source);
  }
}

void CMsgClientRenameFriendsGroupResponse::MergeFrom(const CMsgClientRenameFriendsGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRenameFriendsGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgClientRenameFriendsGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRenameFriendsGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRenameFriendsGroupResponse::CopyFrom(const CMsgClientRenameFriendsGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRenameFriendsGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRenameFriendsGroupResponse::IsInitialized() const {
  return true;
}

void CMsgClientRenameFriendsGroupResponse::Swap(CMsgClientRenameFriendsGroupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRenameFriendsGroupResponse::InternalSwap(CMsgClientRenameFriendsGroupResponse* other) {
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientRenameFriendsGroupResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientRenameFriendsGroupResponse

// optional uint32 eresult = 1;
bool CMsgClientRenameFriendsGroupResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientRenameFriendsGroupResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientRenameFriendsGroupResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientRenameFriendsGroupResponse::clear_eresult() {
  eresult_ = 0u;
  clear_has_eresult();
}
::google::protobuf::uint32 CMsgClientRenameFriendsGroupResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRenameFriendsGroupResponse.eresult)
  return eresult_;
}
void CMsgClientRenameFriendsGroupResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientRenameFriendsGroupResponse.eresult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAddFriendToGroup::kGroupidFieldNumber;
const int CMsgClientAddFriendToGroup::kSteamiduserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAddFriendToGroup::CMsgClientAddFriendToGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAddFriendToGroup)
}
CMsgClientAddFriendToGroup::CMsgClientAddFriendToGroup(const CMsgClientAddFriendToGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamiduser_, &from.steamiduser_,
    reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&steamiduser_) + sizeof(groupid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAddFriendToGroup)
}

void CMsgClientAddFriendToGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamiduser_, 0, reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&steamiduser_) + sizeof(groupid_));
}

CMsgClientAddFriendToGroup::~CMsgClientAddFriendToGroup() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAddFriendToGroup)
  SharedDtor();
}

void CMsgClientAddFriendToGroup::SharedDtor() {
}

void CMsgClientAddFriendToGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAddFriendToGroup::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientAddFriendToGroup& CMsgClientAddFriendToGroup::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientAddFriendToGroup* CMsgClientAddFriendToGroup::New(::google::protobuf::Arena* arena) const {
  CMsgClientAddFriendToGroup* n = new CMsgClientAddFriendToGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientAddFriendToGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAddFriendToGroup)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steamiduser_, 0, reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&steamiduser_) + sizeof(groupid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientAddFriendToGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAddFriendToGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 groupid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_groupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamiduser = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steamiduser();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamiduser_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAddFriendToGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAddFriendToGroup)
  return false;
#undef DO_
}

void CMsgClientAddFriendToGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAddFriendToGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 groupid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // optional fixed64 steamiduser = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamiduser(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAddFriendToGroup)
}

::google::protobuf::uint8* CMsgClientAddFriendToGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAddFriendToGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 groupid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // optional fixed64 steamiduser = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamiduser(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAddFriendToGroup)
  return target;
}

size_t CMsgClientAddFriendToGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAddFriendToGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamiduser = 2;
    if (has_steamiduser()) {
      total_size += 1 + 8;
    }

    // optional int32 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAddFriendToGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAddFriendToGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAddFriendToGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientAddFriendToGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAddFriendToGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAddFriendToGroup)
    MergeFrom(*source);
  }
}

void CMsgClientAddFriendToGroup::MergeFrom(const CMsgClientAddFriendToGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAddFriendToGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamiduser_ = from.steamiduser_;
    }
    if (cached_has_bits & 0x00000002u) {
      groupid_ = from.groupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAddFriendToGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAddFriendToGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAddFriendToGroup::CopyFrom(const CMsgClientAddFriendToGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAddFriendToGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAddFriendToGroup::IsInitialized() const {
  return true;
}

void CMsgClientAddFriendToGroup::Swap(CMsgClientAddFriendToGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAddFriendToGroup::InternalSwap(CMsgClientAddFriendToGroup* other) {
  std::swap(steamiduser_, other->steamiduser_);
  std::swap(groupid_, other->groupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientAddFriendToGroup::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientAddFriendToGroup

// optional int32 groupid = 1;
bool CMsgClientAddFriendToGroup::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientAddFriendToGroup::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientAddFriendToGroup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientAddFriendToGroup::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
::google::protobuf::int32 CMsgClientAddFriendToGroup::groupid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAddFriendToGroup.groupid)
  return groupid_;
}
void CMsgClientAddFriendToGroup::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAddFriendToGroup.groupid)
}

// optional fixed64 steamiduser = 2;
bool CMsgClientAddFriendToGroup::has_steamiduser() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientAddFriendToGroup::set_has_steamiduser() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientAddFriendToGroup::clear_has_steamiduser() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientAddFriendToGroup::clear_steamiduser() {
  steamiduser_ = GOOGLE_ULONGLONG(0);
  clear_has_steamiduser();
}
::google::protobuf::uint64 CMsgClientAddFriendToGroup::steamiduser() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAddFriendToGroup.steamiduser)
  return steamiduser_;
}
void CMsgClientAddFriendToGroup::set_steamiduser(::google::protobuf::uint64 value) {
  set_has_steamiduser();
  steamiduser_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAddFriendToGroup.steamiduser)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAddFriendToGroupResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAddFriendToGroupResponse::CMsgClientAddFriendToGroupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAddFriendToGroupResponse)
}
CMsgClientAddFriendToGroupResponse::CMsgClientAddFriendToGroupResponse(const CMsgClientAddFriendToGroupResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAddFriendToGroupResponse)
}

void CMsgClientAddFriendToGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
}

CMsgClientAddFriendToGroupResponse::~CMsgClientAddFriendToGroupResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAddFriendToGroupResponse)
  SharedDtor();
}

void CMsgClientAddFriendToGroupResponse::SharedDtor() {
}

void CMsgClientAddFriendToGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAddFriendToGroupResponse::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientAddFriendToGroupResponse& CMsgClientAddFriendToGroupResponse::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientAddFriendToGroupResponse* CMsgClientAddFriendToGroupResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientAddFriendToGroupResponse* n = new CMsgClientAddFriendToGroupResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientAddFriendToGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAddFriendToGroupResponse)
  eresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientAddFriendToGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAddFriendToGroupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAddFriendToGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAddFriendToGroupResponse)
  return false;
#undef DO_
}

void CMsgClientAddFriendToGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAddFriendToGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAddFriendToGroupResponse)
}

::google::protobuf::uint8* CMsgClientAddFriendToGroupResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAddFriendToGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAddFriendToGroupResponse)
  return target;
}

size_t CMsgClientAddFriendToGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAddFriendToGroupResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAddFriendToGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAddFriendToGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAddFriendToGroupResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientAddFriendToGroupResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAddFriendToGroupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAddFriendToGroupResponse)
    MergeFrom(*source);
  }
}

void CMsgClientAddFriendToGroupResponse::MergeFrom(const CMsgClientAddFriendToGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAddFriendToGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgClientAddFriendToGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAddFriendToGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAddFriendToGroupResponse::CopyFrom(const CMsgClientAddFriendToGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAddFriendToGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAddFriendToGroupResponse::IsInitialized() const {
  return true;
}

void CMsgClientAddFriendToGroupResponse::Swap(CMsgClientAddFriendToGroupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAddFriendToGroupResponse::InternalSwap(CMsgClientAddFriendToGroupResponse* other) {
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientAddFriendToGroupResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientAddFriendToGroupResponse

// optional uint32 eresult = 1;
bool CMsgClientAddFriendToGroupResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientAddFriendToGroupResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientAddFriendToGroupResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientAddFriendToGroupResponse::clear_eresult() {
  eresult_ = 0u;
  clear_has_eresult();
}
::google::protobuf::uint32 CMsgClientAddFriendToGroupResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAddFriendToGroupResponse.eresult)
  return eresult_;
}
void CMsgClientAddFriendToGroupResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAddFriendToGroupResponse.eresult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRemoveFriendFromGroup::kGroupidFieldNumber;
const int CMsgClientRemoveFriendFromGroup::kSteamiduserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRemoveFriendFromGroup::CMsgClientRemoveFriendFromGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRemoveFriendFromGroup)
}
CMsgClientRemoveFriendFromGroup::CMsgClientRemoveFriendFromGroup(const CMsgClientRemoveFriendFromGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamiduser_, &from.steamiduser_,
    reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&steamiduser_) + sizeof(groupid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRemoveFriendFromGroup)
}

void CMsgClientRemoveFriendFromGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamiduser_, 0, reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&steamiduser_) + sizeof(groupid_));
}

CMsgClientRemoveFriendFromGroup::~CMsgClientRemoveFriendFromGroup() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRemoveFriendFromGroup)
  SharedDtor();
}

void CMsgClientRemoveFriendFromGroup::SharedDtor() {
}

void CMsgClientRemoveFriendFromGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRemoveFriendFromGroup::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientRemoveFriendFromGroup& CMsgClientRemoveFriendFromGroup::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientRemoveFriendFromGroup* CMsgClientRemoveFriendFromGroup::New(::google::protobuf::Arena* arena) const {
  CMsgClientRemoveFriendFromGroup* n = new CMsgClientRemoveFriendFromGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientRemoveFriendFromGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRemoveFriendFromGroup)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steamiduser_, 0, reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&steamiduser_) + sizeof(groupid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientRemoveFriendFromGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRemoveFriendFromGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 groupid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_groupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamiduser = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steamiduser();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamiduser_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRemoveFriendFromGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRemoveFriendFromGroup)
  return false;
#undef DO_
}

void CMsgClientRemoveFriendFromGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRemoveFriendFromGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 groupid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // optional fixed64 steamiduser = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamiduser(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRemoveFriendFromGroup)
}

::google::protobuf::uint8* CMsgClientRemoveFriendFromGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRemoveFriendFromGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 groupid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // optional fixed64 steamiduser = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamiduser(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRemoveFriendFromGroup)
  return target;
}

size_t CMsgClientRemoveFriendFromGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRemoveFriendFromGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamiduser = 2;
    if (has_steamiduser()) {
      total_size += 1 + 8;
    }

    // optional int32 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRemoveFriendFromGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRemoveFriendFromGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRemoveFriendFromGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientRemoveFriendFromGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRemoveFriendFromGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRemoveFriendFromGroup)
    MergeFrom(*source);
  }
}

void CMsgClientRemoveFriendFromGroup::MergeFrom(const CMsgClientRemoveFriendFromGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRemoveFriendFromGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamiduser_ = from.steamiduser_;
    }
    if (cached_has_bits & 0x00000002u) {
      groupid_ = from.groupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientRemoveFriendFromGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRemoveFriendFromGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRemoveFriendFromGroup::CopyFrom(const CMsgClientRemoveFriendFromGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRemoveFriendFromGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRemoveFriendFromGroup::IsInitialized() const {
  return true;
}

void CMsgClientRemoveFriendFromGroup::Swap(CMsgClientRemoveFriendFromGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRemoveFriendFromGroup::InternalSwap(CMsgClientRemoveFriendFromGroup* other) {
  std::swap(steamiduser_, other->steamiduser_);
  std::swap(groupid_, other->groupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientRemoveFriendFromGroup::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientRemoveFriendFromGroup

// optional int32 groupid = 1;
bool CMsgClientRemoveFriendFromGroup::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientRemoveFriendFromGroup::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientRemoveFriendFromGroup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientRemoveFriendFromGroup::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
::google::protobuf::int32 CMsgClientRemoveFriendFromGroup::groupid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRemoveFriendFromGroup.groupid)
  return groupid_;
}
void CMsgClientRemoveFriendFromGroup::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientRemoveFriendFromGroup.groupid)
}

// optional fixed64 steamiduser = 2;
bool CMsgClientRemoveFriendFromGroup::has_steamiduser() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientRemoveFriendFromGroup::set_has_steamiduser() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientRemoveFriendFromGroup::clear_has_steamiduser() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientRemoveFriendFromGroup::clear_steamiduser() {
  steamiduser_ = GOOGLE_ULONGLONG(0);
  clear_has_steamiduser();
}
::google::protobuf::uint64 CMsgClientRemoveFriendFromGroup::steamiduser() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRemoveFriendFromGroup.steamiduser)
  return steamiduser_;
}
void CMsgClientRemoveFriendFromGroup::set_steamiduser(::google::protobuf::uint64 value) {
  set_has_steamiduser();
  steamiduser_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientRemoveFriendFromGroup.steamiduser)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRemoveFriendFromGroupResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRemoveFriendFromGroupResponse::CMsgClientRemoveFriendFromGroupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
}
CMsgClientRemoveFriendFromGroupResponse::CMsgClientRemoveFriendFromGroupResponse(const CMsgClientRemoveFriendFromGroupResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
}

void CMsgClientRemoveFriendFromGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
}

CMsgClientRemoveFriendFromGroupResponse::~CMsgClientRemoveFriendFromGroupResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  SharedDtor();
}

void CMsgClientRemoveFriendFromGroupResponse::SharedDtor() {
}

void CMsgClientRemoveFriendFromGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRemoveFriendFromGroupResponse::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientRemoveFriendFromGroupResponse& CMsgClientRemoveFriendFromGroupResponse::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientRemoveFriendFromGroupResponse* CMsgClientRemoveFriendFromGroupResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientRemoveFriendFromGroupResponse* n = new CMsgClientRemoveFriendFromGroupResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientRemoveFriendFromGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  eresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientRemoveFriendFromGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  return false;
#undef DO_
}

void CMsgClientRemoveFriendFromGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
}

::google::protobuf::uint8* CMsgClientRemoveFriendFromGroupResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  return target;
}

size_t CMsgClientRemoveFriendFromGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRemoveFriendFromGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRemoveFriendFromGroupResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientRemoveFriendFromGroupResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
    MergeFrom(*source);
  }
}

void CMsgClientRemoveFriendFromGroupResponse::MergeFrom(const CMsgClientRemoveFriendFromGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgClientRemoveFriendFromGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRemoveFriendFromGroupResponse::CopyFrom(const CMsgClientRemoveFriendFromGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRemoveFriendFromGroupResponse::IsInitialized() const {
  return true;
}

void CMsgClientRemoveFriendFromGroupResponse::Swap(CMsgClientRemoveFriendFromGroupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRemoveFriendFromGroupResponse::InternalSwap(CMsgClientRemoveFriendFromGroupResponse* other) {
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientRemoveFriendFromGroupResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientRemoveFriendFromGroupResponse

// optional uint32 eresult = 1;
bool CMsgClientRemoveFriendFromGroupResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientRemoveFriendFromGroupResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientRemoveFriendFromGroupResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientRemoveFriendFromGroupResponse::clear_eresult() {
  eresult_ = 0u;
  clear_has_eresult();
}
::google::protobuf::uint32 CMsgClientRemoveFriendFromGroupResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRemoveFriendFromGroupResponse.eresult)
  return eresult_;
}
void CMsgClientRemoveFriendFromGroupResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientRemoveFriendFromGroupResponse.eresult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetEmoticonList::CMsgClientGetEmoticonList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetEmoticonList)
}
CMsgClientGetEmoticonList::CMsgClientGetEmoticonList(const CMsgClientGetEmoticonList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetEmoticonList)
}

void CMsgClientGetEmoticonList::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClientGetEmoticonList::~CMsgClientGetEmoticonList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetEmoticonList)
  SharedDtor();
}

void CMsgClientGetEmoticonList::SharedDtor() {
}

void CMsgClientGetEmoticonList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetEmoticonList::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientGetEmoticonList& CMsgClientGetEmoticonList::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientGetEmoticonList* CMsgClientGetEmoticonList::New(::google::protobuf::Arena* arena) const {
  CMsgClientGetEmoticonList* n = new CMsgClientGetEmoticonList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientGetEmoticonList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetEmoticonList)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientGetEmoticonList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetEmoticonList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetEmoticonList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetEmoticonList)
  return false;
#undef DO_
}

void CMsgClientGetEmoticonList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetEmoticonList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetEmoticonList)
}

::google::protobuf::uint8* CMsgClientGetEmoticonList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetEmoticonList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetEmoticonList)
  return target;
}

size_t CMsgClientGetEmoticonList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetEmoticonList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetEmoticonList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetEmoticonList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetEmoticonList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientGetEmoticonList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetEmoticonList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetEmoticonList)
    MergeFrom(*source);
  }
}

void CMsgClientGetEmoticonList::MergeFrom(const CMsgClientGetEmoticonList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetEmoticonList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClientGetEmoticonList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetEmoticonList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetEmoticonList::CopyFrom(const CMsgClientGetEmoticonList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetEmoticonList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetEmoticonList::IsInitialized() const {
  return true;
}

void CMsgClientGetEmoticonList::Swap(CMsgClientGetEmoticonList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetEmoticonList::InternalSwap(CMsgClientGetEmoticonList* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientGetEmoticonList::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientGetEmoticonList

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientEmoticonList_Emoticon::kNameFieldNumber;
const int CMsgClientEmoticonList_Emoticon::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientEmoticonList_Emoticon::CMsgClientEmoticonList_Emoticon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientEmoticonList.Emoticon)
}
CMsgClientEmoticonList_Emoticon::CMsgClientEmoticonList_Emoticon(const CMsgClientEmoticonList_Emoticon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientEmoticonList.Emoticon)
}

void CMsgClientEmoticonList_Emoticon::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
}

CMsgClientEmoticonList_Emoticon::~CMsgClientEmoticonList_Emoticon() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientEmoticonList.Emoticon)
  SharedDtor();
}

void CMsgClientEmoticonList_Emoticon::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientEmoticonList_Emoticon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientEmoticonList_Emoticon::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientEmoticonList_Emoticon& CMsgClientEmoticonList_Emoticon::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientEmoticonList_Emoticon* CMsgClientEmoticonList_Emoticon::New(::google::protobuf::Arena* arena) const {
  CMsgClientEmoticonList_Emoticon* n = new CMsgClientEmoticonList_Emoticon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientEmoticonList_Emoticon::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientEmoticonList.Emoticon)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientEmoticonList_Emoticon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientEmoticonList.Emoticon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientEmoticonList.Emoticon.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientEmoticonList.Emoticon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientEmoticonList.Emoticon)
  return false;
#undef DO_
}

void CMsgClientEmoticonList_Emoticon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientEmoticonList.Emoticon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientEmoticonList.Emoticon.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientEmoticonList.Emoticon)
}

::google::protobuf::uint8* CMsgClientEmoticonList_Emoticon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientEmoticonList.Emoticon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientEmoticonList.Emoticon.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientEmoticonList.Emoticon)
  return target;
}

size_t CMsgClientEmoticonList_Emoticon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientEmoticonList.Emoticon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientEmoticonList_Emoticon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientEmoticonList.Emoticon)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientEmoticonList_Emoticon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientEmoticonList_Emoticon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientEmoticonList.Emoticon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientEmoticonList.Emoticon)
    MergeFrom(*source);
  }
}

void CMsgClientEmoticonList_Emoticon::MergeFrom(const CMsgClientEmoticonList_Emoticon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientEmoticonList.Emoticon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientEmoticonList_Emoticon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientEmoticonList.Emoticon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientEmoticonList_Emoticon::CopyFrom(const CMsgClientEmoticonList_Emoticon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientEmoticonList.Emoticon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientEmoticonList_Emoticon::IsInitialized() const {
  return true;
}

void CMsgClientEmoticonList_Emoticon::Swap(CMsgClientEmoticonList_Emoticon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientEmoticonList_Emoticon::InternalSwap(CMsgClientEmoticonList_Emoticon* other) {
  name_.Swap(&other->name_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientEmoticonList_Emoticon::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientEmoticonList_Emoticon

// optional string name = 1;
bool CMsgClientEmoticonList_Emoticon::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientEmoticonList_Emoticon::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientEmoticonList_Emoticon::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientEmoticonList_Emoticon::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgClientEmoticonList_Emoticon::name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientEmoticonList.Emoticon.name)
  return name_.GetNoArena();
}
void CMsgClientEmoticonList_Emoticon::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientEmoticonList.Emoticon.name)
}
#if LANG_CXX11
void CMsgClientEmoticonList_Emoticon::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientEmoticonList.Emoticon.name)
}
#endif
void CMsgClientEmoticonList_Emoticon::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientEmoticonList.Emoticon.name)
}
void CMsgClientEmoticonList_Emoticon::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientEmoticonList.Emoticon.name)
}
::std::string* CMsgClientEmoticonList_Emoticon::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientEmoticonList.Emoticon.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientEmoticonList_Emoticon::release_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientEmoticonList.Emoticon.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientEmoticonList_Emoticon::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientEmoticonList.Emoticon.name)
}

// optional int32 count = 2;
bool CMsgClientEmoticonList_Emoticon::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientEmoticonList_Emoticon::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientEmoticonList_Emoticon::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientEmoticonList_Emoticon::clear_count() {
  count_ = 0;
  clear_has_count();
}
::google::protobuf::int32 CMsgClientEmoticonList_Emoticon::count() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientEmoticonList.Emoticon.count)
  return count_;
}
void CMsgClientEmoticonList_Emoticon::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientEmoticonList.Emoticon.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientEmoticonList::kEmoticonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientEmoticonList::CMsgClientEmoticonList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientEmoticonList)
}
CMsgClientEmoticonList::CMsgClientEmoticonList(const CMsgClientEmoticonList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      emoticons_(from.emoticons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientEmoticonList)
}

void CMsgClientEmoticonList::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClientEmoticonList::~CMsgClientEmoticonList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientEmoticonList)
  SharedDtor();
}

void CMsgClientEmoticonList::SharedDtor() {
}

void CMsgClientEmoticonList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientEmoticonList::descriptor() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientEmoticonList& CMsgClientEmoticonList::default_instance() {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientEmoticonList* CMsgClientEmoticonList::New(::google::protobuf::Arena* arena) const {
  CMsgClientEmoticonList* n = new CMsgClientEmoticonList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientEmoticonList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientEmoticonList)
  emoticons_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientEmoticonList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientEmoticonList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientEmoticonList.Emoticon emoticons = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_emoticons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientEmoticonList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientEmoticonList)
  return false;
#undef DO_
}

void CMsgClientEmoticonList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientEmoticonList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientEmoticonList.Emoticon emoticons = 1;
  for (unsigned int i = 0, n = this->emoticons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->emoticons(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientEmoticonList)
}

::google::protobuf::uint8* CMsgClientEmoticonList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientEmoticonList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientEmoticonList.Emoticon emoticons = 1;
  for (unsigned int i = 0, n = this->emoticons_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->emoticons(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientEmoticonList)
  return target;
}

size_t CMsgClientEmoticonList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientEmoticonList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientEmoticonList.Emoticon emoticons = 1;
  {
    unsigned int count = this->emoticons_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emoticons(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientEmoticonList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientEmoticonList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientEmoticonList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientEmoticonList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientEmoticonList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientEmoticonList)
    MergeFrom(*source);
  }
}

void CMsgClientEmoticonList::MergeFrom(const CMsgClientEmoticonList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientEmoticonList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emoticons_.MergeFrom(from.emoticons_);
}

void CMsgClientEmoticonList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientEmoticonList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientEmoticonList::CopyFrom(const CMsgClientEmoticonList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientEmoticonList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientEmoticonList::IsInitialized() const {
  return true;
}

void CMsgClientEmoticonList::Swap(CMsgClientEmoticonList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientEmoticonList::InternalSwap(CMsgClientEmoticonList* other) {
  emoticons_.InternalSwap(&other->emoticons_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientEmoticonList::GetMetadata() const {
  protobuf_steammessages_5fclientserver_5ffriends_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_5ffriends_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientEmoticonList

// repeated .proto.steam.CMsgClientEmoticonList.Emoticon emoticons = 1;
int CMsgClientEmoticonList::emoticons_size() const {
  return emoticons_.size();
}
void CMsgClientEmoticonList::clear_emoticons() {
  emoticons_.Clear();
}
const ::proto::steam::CMsgClientEmoticonList_Emoticon& CMsgClientEmoticonList::emoticons(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientEmoticonList.emoticons)
  return emoticons_.Get(index);
}
::proto::steam::CMsgClientEmoticonList_Emoticon* CMsgClientEmoticonList::mutable_emoticons(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientEmoticonList.emoticons)
  return emoticons_.Mutable(index);
}
::proto::steam::CMsgClientEmoticonList_Emoticon* CMsgClientEmoticonList::add_emoticons() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientEmoticonList.emoticons)
  return emoticons_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientEmoticonList_Emoticon >*
CMsgClientEmoticonList::mutable_emoticons() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientEmoticonList.emoticons)
  return &emoticons_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientEmoticonList_Emoticon >&
CMsgClientEmoticonList::emoticons() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientEmoticonList.emoticons)
  return emoticons_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
