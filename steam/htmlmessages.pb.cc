// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: htmlmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "htmlmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CMsgKeyUpDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgKeyUp> {
} _CMsgKeyUp_default_instance_;
class CMsgKeyDownDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgKeyDown> {
} _CMsgKeyDown_default_instance_;
class CMsgKeyCharDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgKeyChar> {
} _CMsgKeyChar_default_instance_;
class CMsgMouseDownDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgMouseDown> {
} _CMsgMouseDown_default_instance_;
class CMsgMouseUpDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgMouseUp> {
} _CMsgMouseUp_default_instance_;
class CMsgMouseDblClickDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgMouseDblClick> {
} _CMsgMouseDblClick_default_instance_;
class CMsgMouseWheelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgMouseWheel> {
} _CMsgMouseWheel_default_instance_;
class CMsgMouseMoveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgMouseMove> {
} _CMsgMouseMove_default_instance_;
class CMsgMouseLeaveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgMouseLeave> {
} _CMsgMouseLeave_default_instance_;
class CMsgBrowserCreateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBrowserCreate> {
} _CMsgBrowserCreate_default_instance_;
class CMsgBrowserCreateResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBrowserCreateResponse> {
} _CMsgBrowserCreateResponse_default_instance_;
class CMsgBrowserRemoveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBrowserRemove> {
} _CMsgBrowserRemove_default_instance_;
class CMsgSetLocalFileRequestMapping_AdditionalRouteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetLocalFileRequestMapping_AdditionalRoute> {
} _CMsgSetLocalFileRequestMapping_AdditionalRoute_default_instance_;
class CMsgSetLocalFileRequestMappingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetLocalFileRequestMapping> {
} _CMsgSetLocalFileRequestMapping_default_instance_;
class CMsgBrowserErrorStringsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBrowserErrorStrings> {
} _CMsgBrowserErrorStrings_default_instance_;
class CMsgBrowserSizeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBrowserSize> {
} _CMsgBrowserSize_default_instance_;
class CMsgPostURLDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPostURL> {
} _CMsgPostURL_default_instance_;
class CMsgAddHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAddHeader> {
} _CMsgAddHeader_default_instance_;
class CMsgStopLoadDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgStopLoad> {
} _CMsgStopLoad_default_instance_;
class CMsgReloadDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgReload> {
} _CMsgReload_default_instance_;
class CMsgGoForwardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGoForward> {
} _CMsgGoForward_default_instance_;
class CMsgGoBackDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGoBack> {
} _CMsgGoBack_default_instance_;
class CMsgClearHistoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClearHistory> {
} _CMsgClearHistory_default_instance_;
class CMsgCopyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgCopy> {
} _CMsgCopy_default_instance_;
class CMsgPasteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPaste> {
} _CMsgPaste_default_instance_;
class CMsgExecuteJavaScriptDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgExecuteJavaScript> {
} _CMsgExecuteJavaScript_default_instance_;
class CMsgSetFocusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetFocus> {
} _CMsgSetFocus_default_instance_;
class CMsgHorizontalScrollBarSizeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgHorizontalScrollBarSize> {
} _CMsgHorizontalScrollBarSize_default_instance_;
class CMsgHorizontalScrollBarSizeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgHorizontalScrollBarSizeResponse> {
} _CMsgHorizontalScrollBarSizeResponse_default_instance_;
class CMsgVerticalScrollBarSizeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgVerticalScrollBarSize> {
} _CMsgVerticalScrollBarSize_default_instance_;
class CMsgVerticalScrollBarSizeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgVerticalScrollBarSizeResponse> {
} _CMsgVerticalScrollBarSizeResponse_default_instance_;
class CMsgFindDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgFind> {
} _CMsgFind_default_instance_;
class CMsgStopFindDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgStopFind> {
} _CMsgStopFind_default_instance_;
class CMsgSetHorizontalScrollDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetHorizontalScroll> {
} _CMsgSetHorizontalScroll_default_instance_;
class CMsgSetVerticalScrollDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetVerticalScroll> {
} _CMsgSetVerticalScroll_default_instance_;
class CMsgSetZoomLevelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetZoomLevel> {
} _CMsgSetZoomLevel_default_instance_;
class CMsgViewSourceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgViewSource> {
} _CMsgViewSource_default_instance_;
class CMsgBrowserReadyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBrowserReady> {
} _CMsgBrowserReady_default_instance_;
class CMsgURLChangedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgURLChanged> {
} _CMsgURLChanged_default_instance_;
class CHTMLHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHTMLHeader> {
} _CHTMLHeader_default_instance_;
class CHTMLPageSecurityInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHTMLPageSecurityInfo> {
} _CHTMLPageSecurityInfo_default_instance_;
class CMsgFinishedRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgFinishedRequest> {
} _CMsgFinishedRequest_default_instance_;
class CMsgLoadedRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgLoadedRequest> {
} _CMsgLoadedRequest_default_instance_;
class CMsgPageSecurityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPageSecurity> {
} _CMsgPageSecurity_default_instance_;
class CMsgStartRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgStartRequest> {
} _CMsgStartRequest_default_instance_;
class CMsgStartRequestResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgStartRequestResponse> {
} _CMsgStartRequestResponse_default_instance_;
class CMsgShowPopupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgShowPopup> {
} _CMsgShowPopup_default_instance_;
class CMsgHidePopupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgHidePopup> {
} _CMsgHidePopup_default_instance_;
class CMsgSizePopupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSizePopup> {
} _CMsgSizePopup_default_instance_;
class CMsgOpenNewTabDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgOpenNewTab> {
} _CMsgOpenNewTab_default_instance_;
class CMsgPopupHTMLWindowDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPopupHTMLWindow> {
} _CMsgPopupHTMLWindow_default_instance_;
class CMsgPopupHTMLWindowResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPopupHTMLWindowResponse> {
} _CMsgPopupHTMLWindowResponse_default_instance_;
class CMsgSetHTMLTitleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetHTMLTitle> {
} _CMsgSetHTMLTitle_default_instance_;
class CMsgLoadingResourceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgLoadingResource> {
} _CMsgLoadingResource_default_instance_;
class CMsgStatusTextDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgStatusText> {
} _CMsgStatusText_default_instance_;
class CMsgSetCursorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetCursor> {
} _CMsgSetCursor_default_instance_;
class CMsgFileLoadDialogDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgFileLoadDialog> {
} _CMsgFileLoadDialog_default_instance_;
class CMsgFileLoadDialogResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgFileLoadDialogResponse> {
} _CMsgFileLoadDialogResponse_default_instance_;
class CMsgShowToolTipDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgShowToolTip> {
} _CMsgShowToolTip_default_instance_;
class CMsgUpdateToolTipDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgUpdateToolTip> {
} _CMsgUpdateToolTip_default_instance_;
class CMsgHideToolTipDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgHideToolTip> {
} _CMsgHideToolTip_default_instance_;
class CMsgSearchResultsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSearchResults> {
} _CMsgSearchResults_default_instance_;
class CMsgCloseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClose> {
} _CMsgClose_default_instance_;
class CMsgSetSharedPaintBuffersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetSharedPaintBuffers> {
} _CMsgSetSharedPaintBuffers_default_instance_;
class CMsgNeedsPaintDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgNeedsPaint> {
} _CMsgNeedsPaint_default_instance_;
class CMsgComboNeedsPaintDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgComboNeedsPaint> {
} _CMsgComboNeedsPaint_default_instance_;
class CMsgGetZoomDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGetZoom> {
} _CMsgGetZoom_default_instance_;
class CMsgGetZoomResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGetZoomResponse> {
} _CMsgGetZoomResponse_default_instance_;
class CMsgLinkAtPositionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgLinkAtPosition> {
} _CMsgLinkAtPosition_default_instance_;
class CMsgLinkAtPositionResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgLinkAtPositionResponse> {
} _CMsgLinkAtPositionResponse_default_instance_;
class CMsgZoomToElementAtPositionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgZoomToElementAtPosition> {
} _CMsgZoomToElementAtPosition_default_instance_;
class CMsgZoomToElementAtPositionResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgZoomToElementAtPositionResponse> {
} _CMsgZoomToElementAtPositionResponse_default_instance_;
class CMsgScalePageToValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgScalePageToValue> {
} _CMsgScalePageToValue_default_instance_;
class CMsgScalePageToValueResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgScalePageToValueResponse> {
} _CMsgScalePageToValueResponse_default_instance_;
class CMsgSavePageToJPEGDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSavePageToJPEG> {
} _CMsgSavePageToJPEG_default_instance_;
class CMsgSavePageToJPEGResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSavePageToJPEGResponse> {
} _CMsgSavePageToJPEGResponse_default_instance_;
class CMsgJSAlertDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgJSAlert> {
} _CMsgJSAlert_default_instance_;
class CMsgJSConfirmDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgJSConfirm> {
} _CMsgJSConfirm_default_instance_;
class CMsgJSDialogResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgJSDialogResponse> {
} _CMsgJSDialogResponse_default_instance_;
class CMsgCanGoBackAndForwardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgCanGoBackAndForward> {
} _CMsgCanGoBackAndForward_default_instance_;
class CMsgOpenSteamURLDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgOpenSteamURL> {
} _CMsgOpenSteamURL_default_instance_;
class CMsgSetCookieDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetCookie> {
} _CMsgSetCookie_default_instance_;
class CMsgSetTargetFrameRateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetTargetFrameRate> {
} _CMsgSetTargetFrameRate_default_instance_;
class CMsgPauseRepaintDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPauseRepaint> {
} _CMsgPauseRepaint_default_instance_;
class CMsgFullRepaintDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgFullRepaint> {
} _CMsgFullRepaint_default_instance_;
class CMsgRequestFullScreenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRequestFullScreen> {
} _CMsgRequestFullScreen_default_instance_;
class CMsgRequestFullScreenResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRequestFullScreenResponse> {
} _CMsgRequestFullScreenResponse_default_instance_;
class CMsgExitFullScreenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgExitFullScreen> {
} _CMsgExitFullScreen_default_instance_;
class CMsgGetCookiesForURLDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGetCookiesForURL> {
} _CMsgGetCookiesForURL_default_instance_;
class CCookieDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCookie> {
} _CCookie_default_instance_;
class CMsgGetCookiesForURLResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGetCookiesForURLResponse> {
} _CMsgGetCookiesForURLResponse_default_instance_;
class CMsgNodeHasFocusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgNodeHasFocus> {
} _CMsgNodeHasFocus_default_instance_;
class CMsgZoomToFocusedElementDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgZoomToFocusedElement> {
} _CMsgZoomToFocusedElement_default_instance_;
class CMsgCloseFullScreenFlashIfOpenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgCloseFullScreenFlashIfOpen> {
} _CMsgCloseFullScreenFlashIfOpen_default_instance_;
class CMsgPauseFullScreenFlashMovieIfOpenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPauseFullScreenFlashMovieIfOpen> {
} _CMsgPauseFullScreenFlashMovieIfOpen_default_instance_;
class CMsgFocusedNodeTextDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgFocusedNodeText> {
} _CMsgFocusedNodeText_default_instance_;
class CMsgFocusedNodeTextResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgFocusedNodeTextResponse> {
} _CMsgFocusedNodeTextResponse_default_instance_;
class CMsgBuildIDDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBuildID> {
} _CMsgBuildID_default_instance_;
class CMsgOpenDevToolsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgOpenDevTools> {
} _CMsgOpenDevTools_default_instance_;
class CMsgCloseDevToolsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgCloseDevTools> {
} _CMsgCloseDevTools_default_instance_;
class CMsgUnlockH264DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgUnlockH264> {
} _CMsgUnlockH264_default_instance_;
class CMsgScreenInformationChangedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgScreenInformationChanged> {
} _CMsgScreenInformationChanged_default_instance_;
class CMsgClearAllCookiesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClearAllCookies> {
} _CMsgClearAllCookies_default_instance_;
class CMsgScreenDPIDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgScreenDPI> {
} _CMsgScreenDPI_default_instance_;
class CMsgAuthedSteamDomainsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAuthedSteamDomains> {
} _CMsgAuthedSteamDomains_default_instance_;
class CMsgSteamAuthNeededDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamAuthNeeded> {
} _CMsgSteamAuthNeeded_default_instance_;
class CMsgSteamAuthCookiesSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamAuthCookiesSet> {
} _CMsgSteamAuthCookiesSet_default_instance_;
class CMsgJSRegisterMethodDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgJSRegisterMethod> {
} _CMsgJSRegisterMethod_default_instance_;
class CJSMethodArgumentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CJSMethodArgument> {
} _CJSMethodArgument_default_instance_;
class CMsgJSValue_JSObjectPropertyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgJSValue_JSObjectProperty> {
} _CMsgJSValue_JSObjectProperty_default_instance_;
class CMsgJSValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgJSValue> {
} _CMsgJSValue_default_instance_;
class CMsgJSMethodCallDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgJSMethodCall> {
} _CMsgJSMethodCall_default_instance_;
class CMsgJSExecuteCallbackDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgJSExecuteCallback> {
} _CMsgJSExecuteCallback_default_instance_;
class CMsgJSReleaseCallbackDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgJSReleaseCallback> {
} _CMsgJSReleaseCallback_default_instance_;
class CMsgJSRaiseExceptionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgJSRaiseException> {
} _CMsgJSRaiseException_default_instance_;
class CMsgLoadLocalizationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgLoadLocalization> {
} _CMsgLoadLocalization_default_instance_;
class CMsgEnableSteamClientAPIDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgEnableSteamClientAPI> {
} _CMsgEnableSteamClientAPI_default_instance_;
class CMsgJumpListLinkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgJumpListLink> {
} _CMsgJumpListLink_default_instance_;
class CMSgJumpListMRUAppDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMSgJumpListMRUApp> {
} _CMSgJumpListMRUApp_default_instance_;
class CMsgSetJumpListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetJumpList> {
} _CMsgSetJumpList_default_instance_;

namespace protobuf_htmlmessages_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[120];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyUp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyUp, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyUp, keycode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyUp, modifiers_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyDown, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyDown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyDown, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyDown, keycode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyDown, modifiers_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyChar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyChar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyChar, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyChar, unichar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyChar, modifiers_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseDown, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseDown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseDown, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseDown, mouse_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseDown, modifiers_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseUp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseUp, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseUp, mouse_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseUp, modifiers_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseDblClick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseDblClick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseDblClick, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseDblClick, mouse_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseDblClick, modifiers_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseWheel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseWheel, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseWheel, delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseWheel, modifiers_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseMove, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseMove, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseMove, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseMove, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseMove, modifiers_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseLeave, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseLeave, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreate, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreate, useragent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreate, user_css_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreate, native_dropdowns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreate, dpi_scaling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreate, offscreen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreate, initial_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreate, initial_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreate, window_icon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreate, borderless_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreate, vroverlay_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreate, browser_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreate, initial_top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreate, initial_left_),
  4,
  0,
  1,
  7,
  5,
  12,
  6,
  9,
  2,
  8,
  3,
  10,
  13,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreateResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreateResponse, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreateResponse, request_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserRemove, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserRemove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserRemove, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetLocalFileRequestMapping_AdditionalRoute, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetLocalFileRequestMapping_AdditionalRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetLocalFileRequestMapping_AdditionalRoute, relative_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetLocalFileRequestMapping_AdditionalRoute, local_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetLocalFileRequestMapping_AdditionalRoute, allowed_extensions_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetLocalFileRequestMapping, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetLocalFileRequestMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetLocalFileRequestMapping, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetLocalFileRequestMapping, request_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetLocalFileRequestMapping, default_local_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetLocalFileRequestMapping, routes_),
  2,
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserErrorStrings, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserErrorStrings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserErrorStrings, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserErrorStrings, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserErrorStrings, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserErrorStrings, cache_miss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserErrorStrings, bad_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserErrorStrings, connection_problem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserErrorStrings, proxy_problem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserErrorStrings, unknown_),
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserSize, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserSize, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserSize, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserSize, height_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPostURL, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPostURL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPostURL, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPostURL, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPostURL, post_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPostURL, pageserial_),
  2,
  0,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddHeader, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddHeader, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddHeader, value_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStopLoad, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStopLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStopLoad, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReload, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReload, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGoForward, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGoForward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGoForward, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGoBack, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGoBack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGoBack, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearHistory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearHistory, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCopy, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCopy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCopy, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaste, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaste, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaste, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteJavaScript, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteJavaScript, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteJavaScript, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteJavaScript, script_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetFocus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetFocus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetFocus, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetFocus, focus_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSize, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSize, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSizeResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSizeResponse, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSizeResponse, scroll_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSizeResponse, scroll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSizeResponse, zoom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSizeResponse, visible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSizeResponse, page_size_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSize, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSize, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSizeResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSizeResponse, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSizeResponse, scroll_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSizeResponse, scroll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSizeResponse, zoom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSizeResponse, visible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSizeResponse, page_size_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFind, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFind, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFind, find_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFind, infind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFind, reverse_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStopFind, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStopFind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStopFind, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetHorizontalScroll, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetHorizontalScroll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetHorizontalScroll, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetHorizontalScroll, scroll_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetVerticalScroll, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetVerticalScroll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetVerticalScroll, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetVerticalScroll, scroll_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetZoomLevel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetZoomLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetZoomLevel, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetZoomLevel, zoom_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgViewSource, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgViewSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgViewSource, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserReady, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserReady, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserReady, vr_overlay_key_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgURLChanged, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgURLChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgURLChanged, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgURLChanged, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgURLChanged, postdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgURLChanged, bisredirect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgURLChanged, pagetitle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgURLChanged, bnewnavigation_),
  3,
  0,
  1,
  4,
  2,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLHeader, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLHeader, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLPageSecurityInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLPageSecurityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLPageSecurityInfo, bissecure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLPageSecurityInfo, bhascerterror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLPageSecurityInfo, issuername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLPageSecurityInfo, certname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLPageSecurityInfo, certexpiry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLPageSecurityInfo, ncertbits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLPageSecurityInfo, bisevcert_),
  2,
  3,
  0,
  1,
  5,
  6,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFinishedRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFinishedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFinishedRequest, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFinishedRequest, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFinishedRequest, pagetitle_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoadedRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoadedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoadedRequest, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoadedRequest, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoadedRequest, pagetitle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoadedRequest, headers_),
  2,
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPageSecurity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPageSecurity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPageSecurity, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPageSecurity, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPageSecurity, security_info_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartRequest, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartRequest, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartRequest, target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartRequest, postdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartRequest, bisredirect_),
  3,
  0,
  1,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartRequestResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartRequestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartRequestResponse, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartRequestResponse, ballow_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgShowPopup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgShowPopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgShowPopup, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHidePopup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHidePopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHidePopup, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSizePopup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSizePopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSizePopup, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSizePopup, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSizePopup, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSizePopup, wide_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSizePopup, tall_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenNewTab, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenNewTab, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenNewTab, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenNewTab, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenNewTab, bforeground_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindow, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindow, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindow, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindow, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindow, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindow, wide_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindow, tall_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindow, popup_index_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindowResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindowResponse, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindowResponse, ballow_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetHTMLTitle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetHTMLTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetHTMLTitle, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetHTMLTitle, title_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoadingResource, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoadingResource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoadingResource, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoadingResource, url_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStatusText, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStatusText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStatusText, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStatusText, text_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCursor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCursor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCursor, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCursor, cursor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCursor, custom_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCursor, wide_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCursor, tall_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCursor, xhotspot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCursor, yhotspot_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFileLoadDialog, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFileLoadDialog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFileLoadDialog, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFileLoadDialog, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFileLoadDialog, initialfile_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFileLoadDialogResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFileLoadDialogResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFileLoadDialogResponse, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFileLoadDialogResponse, files_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgShowToolTip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgShowToolTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgShowToolTip, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgShowToolTip, text_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateToolTip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateToolTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateToolTip, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateToolTip, text_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHideToolTip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHideToolTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHideToolTip, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSearchResults, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSearchResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSearchResults, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSearchResults, activematch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSearchResults, results_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClose, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClose, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetSharedPaintBuffers, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetSharedPaintBuffers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetSharedPaintBuffers, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetSharedPaintBuffers, wide_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetSharedPaintBuffers, tall_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetSharedPaintBuffers, source_pid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetSharedPaintBuffers, source_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetSharedPaintBuffers, handle_),
  0,
  1,
  5,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, scrollx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, scrolly_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, pagescale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, pageserial_),
  0,
  1,
  3,
  4,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgComboNeedsPaint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgComboNeedsPaint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgComboNeedsPaint, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgComboNeedsPaint, rgba_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgComboNeedsPaint, combobox_wide_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgComboNeedsPaint, combobox_tall_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgComboNeedsPaint, shared_memory_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgComboNeedsPaint, shared_memory_size_),
  1,
  0,
  2,
  5,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetZoom, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetZoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetZoom, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetZoomResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetZoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetZoomResponse, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetZoomResponse, zoom_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPosition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPosition, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPosition, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPosition, y_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPositionResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPositionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPositionResponse, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPositionResponse, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPositionResponse, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPositionResponse, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPositionResponse, blivelink_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPositionResponse, binput_),
  1,
  2,
  3,
  0,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPosition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPosition, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPosition, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPosition, y_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPositionResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPositionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPositionResponse, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPositionResponse, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPositionResponse, duration_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScalePageToValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScalePageToValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScalePageToValue, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScalePageToValue, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScalePageToValue, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScalePageToValue, y_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScalePageToValueResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScalePageToValueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScalePageToValueResponse, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScalePageToValueResponse, zoom_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEG, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEG, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEG, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEG, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEG, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEG, height_),
  2,
  0,
  1,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEGResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEGResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEGResponse, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEGResponse, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEGResponse, filename_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSAlert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSAlert, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSAlert, message_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSConfirm, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSConfirm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSConfirm, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSConfirm, message_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSDialogResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSDialogResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSDialogResponse, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSDialogResponse, result_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCanGoBackAndForward, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCanGoBackAndForward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCanGoBackAndForward, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCanGoBackAndForward, bgoback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCanGoBackAndForward, bgoforward_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenSteamURL, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenSteamURL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenSteamURL, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenSteamURL, url_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCookie, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCookie, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCookie, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCookie, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCookie, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCookie, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCookie, expires_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCookie, secure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCookie, httponly_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetTargetFrameRate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetTargetFrameRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetTargetFrameRate, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetTargetFrameRate, ntargetframerate_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPauseRepaint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPauseRepaint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPauseRepaint, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFullRepaint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFullRepaint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFullRepaint, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestFullScreen, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestFullScreen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestFullScreen, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestFullScreenResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestFullScreenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestFullScreenResponse, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestFullScreenResponse, ballow_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExitFullScreen, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExitFullScreen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExitFullScreen, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetCookiesForURL, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetCookiesForURL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetCookiesForURL, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetCookiesForURL, url_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCookie, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCookie, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCookie, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCookie, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCookie, domain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCookie, path_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetCookiesForURLResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetCookiesForURLResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetCookiesForURLResponse, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetCookiesForURLResponse, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetCookiesForURLResponse, cookies_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNodeHasFocus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNodeHasFocus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNodeHasFocus, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNodeHasFocus, binput_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNodeHasFocus, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNodeHasFocus, elementtagname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNodeHasFocus, searchbuttontext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNodeHasFocus, bhasmultipleinputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNodeHasFocus, input_type_),
  4,
  5,
  0,
  1,
  2,
  6,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToFocusedElement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToFocusedElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToFocusedElement, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCloseFullScreenFlashIfOpen, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCloseFullScreenFlashIfOpen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCloseFullScreenFlashIfOpen, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPauseFullScreenFlashMovieIfOpen, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPauseFullScreenFlashMovieIfOpen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPauseFullScreenFlashMovieIfOpen, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFocusedNodeText, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFocusedNodeText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFocusedNodeText, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFocusedNodeTextResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFocusedNodeTextResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFocusedNodeTextResponse, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFocusedNodeTextResponse, value_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBuildID, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBuildID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBuildID, build_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenDevTools, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenDevTools, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenDevTools, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCloseDevTools, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCloseDevTools, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCloseDevTools, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUnlockH264, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUnlockH264, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUnlockH264, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUnlockH264, unlock_code_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScreenInformationChanged, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScreenInformationChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScreenInformationChanged, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScreenInformationChanged, override_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScreenInformationChanged, override_height_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearAllCookies, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearAllCookies, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearAllCookies, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScreenDPI, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScreenDPI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScreenDPI, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScreenDPI, dpi_scaling_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthedSteamDomains, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthedSteamDomains, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthedSteamDomains, domains_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamAuthNeeded, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamAuthNeeded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamAuthNeeded, filler_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamAuthCookiesSet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamAuthCookiesSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamAuthCookiesSet, success_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSRegisterMethod, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSRegisterMethod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSRegisterMethod, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSRegisterMethod, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSRegisterMethod, method_type_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJSMethodArgument, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJSMethodArgument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJSMethodArgument, json_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJSMethodArgument, function_handle_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSValue_JSObjectProperty, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSValue_JSObjectProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSValue_JSObjectProperty, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSValue_JSObjectProperty, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSValue, bool_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSValue, int_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSValue, uint_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSValue, float_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSValue, string_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSValue, function_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSValue, is_array_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSValue, array_values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSValue, is_object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSValue, object_properties_),
  4,
  1,
  2,
  3,
  0,
  7,
  5,
  ~0u,
  6,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSMethodCall, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSMethodCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSMethodCall, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSMethodCall, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSMethodCall, arguments_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSExecuteCallback, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSExecuteCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSExecuteCallback, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSExecuteCallback, function_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSExecuteCallback, arguments_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSReleaseCallback, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSReleaseCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSReleaseCallback, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSReleaseCallback, function_handle_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSRaiseException, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSRaiseException, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSRaiseException, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSRaiseException, exception_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoadLocalization, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoadLocalization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoadLocalization, browser_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoadLocalization, localization_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoadLocalization, language_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEnableSteamClientAPI, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEnableSteamClientAPI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEnableSteamClientAPI, browser_handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJumpListLink, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJumpListLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJumpListLink, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJumpListLink, url_link_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJumpListLink, icon_path_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMSgJumpListMRUApp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMSgJumpListMRUApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMSgJumpListMRUApp, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMSgJumpListMRUApp, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMSgJumpListMRUApp, url_link_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMSgJumpListMRUApp, icon_path_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetJumpList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetJumpList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetJumpList, steam_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetJumpList, mru_title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetJumpList, apps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetJumpList, links_),
  0,
  1,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(CMsgKeyUp)},
  { 11, 19, sizeof(CMsgKeyDown)},
  { 22, 30, sizeof(CMsgKeyChar)},
  { 33, 41, sizeof(CMsgMouseDown)},
  { 44, 52, sizeof(CMsgMouseUp)},
  { 55, 63, sizeof(CMsgMouseDblClick)},
  { 66, 74, sizeof(CMsgMouseWheel)},
  { 77, 86, sizeof(CMsgMouseMove)},
  { 90, 96, sizeof(CMsgMouseLeave)},
  { 97, 116, sizeof(CMsgBrowserCreate)},
  { 130, 137, sizeof(CMsgBrowserCreateResponse)},
  { 139, 145, sizeof(CMsgBrowserRemove)},
  { 146, 154, sizeof(CMsgSetLocalFileRequestMapping_AdditionalRoute)},
  { 157, 166, sizeof(CMsgSetLocalFileRequestMapping)},
  { 170, 183, sizeof(CMsgBrowserErrorStrings)},
  { 191, 199, sizeof(CMsgBrowserSize)},
  { 202, 211, sizeof(CMsgPostURL)},
  { 215, 223, sizeof(CMsgAddHeader)},
  { 226, 232, sizeof(CMsgStopLoad)},
  { 233, 239, sizeof(CMsgReload)},
  { 240, 246, sizeof(CMsgGoForward)},
  { 247, 253, sizeof(CMsgGoBack)},
  { 254, 260, sizeof(CMsgClearHistory)},
  { 261, 267, sizeof(CMsgCopy)},
  { 268, 274, sizeof(CMsgPaste)},
  { 275, 282, sizeof(CMsgExecuteJavaScript)},
  { 284, 291, sizeof(CMsgSetFocus)},
  { 293, 299, sizeof(CMsgHorizontalScrollBarSize)},
  { 300, 311, sizeof(CMsgHorizontalScrollBarSizeResponse)},
  { 317, 323, sizeof(CMsgVerticalScrollBarSize)},
  { 324, 335, sizeof(CMsgVerticalScrollBarSizeResponse)},
  { 341, 350, sizeof(CMsgFind)},
  { 354, 360, sizeof(CMsgStopFind)},
  { 361, 368, sizeof(CMsgSetHorizontalScroll)},
  { 370, 377, sizeof(CMsgSetVerticalScroll)},
  { 379, 386, sizeof(CMsgSetZoomLevel)},
  { 388, 394, sizeof(CMsgViewSource)},
  { 395, 402, sizeof(CMsgBrowserReady)},
  { 404, 415, sizeof(CMsgURLChanged)},
  { 421, 428, sizeof(CHTMLHeader)},
  { 430, 442, sizeof(CHTMLPageSecurityInfo)},
  { 449, 457, sizeof(CMsgFinishedRequest)},
  { 460, 469, sizeof(CMsgLoadedRequest)},
  { 473, 481, sizeof(CMsgPageSecurity)},
  { 484, 494, sizeof(CMsgStartRequest)},
  { 499, 506, sizeof(CMsgStartRequestResponse)},
  { 508, 514, sizeof(CMsgShowPopup)},
  { 515, 521, sizeof(CMsgHidePopup)},
  { 522, 532, sizeof(CMsgSizePopup)},
  { 537, 545, sizeof(CMsgOpenNewTab)},
  { 548, 560, sizeof(CMsgPopupHTMLWindow)},
  { 567, 574, sizeof(CMsgPopupHTMLWindowResponse)},
  { 576, 583, sizeof(CMsgSetHTMLTitle)},
  { 585, 592, sizeof(CMsgLoadingResource)},
  { 594, 601, sizeof(CMsgStatusText)},
  { 603, 615, sizeof(CMsgSetCursor)},
  { 622, 630, sizeof(CMsgFileLoadDialog)},
  { 633, 640, sizeof(CMsgFileLoadDialogResponse)},
  { 642, 649, sizeof(CMsgShowToolTip)},
  { 651, 658, sizeof(CMsgUpdateToolTip)},
  { 660, 666, sizeof(CMsgHideToolTip)},
  { 667, 675, sizeof(CMsgSearchResults)},
  { 678, 684, sizeof(CMsgClose)},
  { 685, 696, sizeof(CMsgSetSharedPaintBuffers)},
  { 702, 712, sizeof(CMsgNeedsPaint)},
  { 717, 728, sizeof(CMsgComboNeedsPaint)},
  { 734, 740, sizeof(CMsgGetZoom)},
  { 741, 748, sizeof(CMsgGetZoomResponse)},
  { 750, 758, sizeof(CMsgLinkAtPosition)},
  { 761, 772, sizeof(CMsgLinkAtPositionResponse)},
  { 778, 786, sizeof(CMsgZoomToElementAtPosition)},
  { 789, 797, sizeof(CMsgZoomToElementAtPositionResponse)},
  { 800, 809, sizeof(CMsgScalePageToValue)},
  { 813, 820, sizeof(CMsgScalePageToValueResponse)},
  { 822, 832, sizeof(CMsgSavePageToJPEG)},
  { 837, 845, sizeof(CMsgSavePageToJPEGResponse)},
  { 848, 855, sizeof(CMsgJSAlert)},
  { 857, 864, sizeof(CMsgJSConfirm)},
  { 866, 873, sizeof(CMsgJSDialogResponse)},
  { 875, 883, sizeof(CMsgCanGoBackAndForward)},
  { 886, 893, sizeof(CMsgOpenSteamURL)},
  { 895, 907, sizeof(CMsgSetCookie)},
  { 914, 921, sizeof(CMsgSetTargetFrameRate)},
  { 923, 929, sizeof(CMsgPauseRepaint)},
  { 930, 936, sizeof(CMsgFullRepaint)},
  { 937, 943, sizeof(CMsgRequestFullScreen)},
  { 944, 951, sizeof(CMsgRequestFullScreenResponse)},
  { 953, 959, sizeof(CMsgExitFullScreen)},
  { 960, 967, sizeof(CMsgGetCookiesForURL)},
  { 969, 978, sizeof(CCookie)},
  { 982, 990, sizeof(CMsgGetCookiesForURLResponse)},
  { 993, 1005, sizeof(CMsgNodeHasFocus)},
  { 1012, 1018, sizeof(CMsgZoomToFocusedElement)},
  { 1019, 1025, sizeof(CMsgCloseFullScreenFlashIfOpen)},
  { 1026, 1032, sizeof(CMsgPauseFullScreenFlashMovieIfOpen)},
  { 1033, 1039, sizeof(CMsgFocusedNodeText)},
  { 1040, 1047, sizeof(CMsgFocusedNodeTextResponse)},
  { 1049, 1055, sizeof(CMsgBuildID)},
  { 1056, 1062, sizeof(CMsgOpenDevTools)},
  { 1063, 1069, sizeof(CMsgCloseDevTools)},
  { 1070, 1077, sizeof(CMsgUnlockH264)},
  { 1079, 1087, sizeof(CMsgScreenInformationChanged)},
  { 1090, 1096, sizeof(CMsgClearAllCookies)},
  { 1097, 1104, sizeof(CMsgScreenDPI)},
  { 1106, 1112, sizeof(CMsgAuthedSteamDomains)},
  { 1113, 1119, sizeof(CMsgSteamAuthNeeded)},
  { 1120, 1126, sizeof(CMsgSteamAuthCookiesSet)},
  { 1127, 1135, sizeof(CMsgJSRegisterMethod)},
  { 1138, 1145, sizeof(CJSMethodArgument)},
  { 1147, 1154, sizeof(CMsgJSValue_JSObjectProperty)},
  { 1156, 1171, sizeof(CMsgJSValue)},
  { 1181, 1189, sizeof(CMsgJSMethodCall)},
  { 1192, 1200, sizeof(CMsgJSExecuteCallback)},
  { 1203, 1210, sizeof(CMsgJSReleaseCallback)},
  { 1212, 1219, sizeof(CMsgJSRaiseException)},
  { 1221, 1229, sizeof(CMsgLoadLocalization)},
  { 1232, 1238, sizeof(CMsgEnableSteamClientAPI)},
  { 1239, 1247, sizeof(CMsgJumpListLink)},
  { 1250, 1259, sizeof(CMSgJumpListMRUApp)},
  { 1263, 1272, sizeof(CMsgSetJumpList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgKeyUp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgKeyDown_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgKeyChar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgMouseDown_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgMouseUp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgMouseDblClick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgMouseWheel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgMouseMove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgMouseLeave_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBrowserCreate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBrowserCreateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBrowserRemove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSetLocalFileRequestMapping_AdditionalRoute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSetLocalFileRequestMapping_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBrowserErrorStrings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBrowserSize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPostURL_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAddHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgStopLoad_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgReload_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGoForward_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGoBack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClearHistory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgCopy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPaste_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgExecuteJavaScript_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSetFocus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgHorizontalScrollBarSize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgHorizontalScrollBarSizeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgVerticalScrollBarSize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgVerticalScrollBarSizeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgFind_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgStopFind_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSetHorizontalScroll_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSetVerticalScroll_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSetZoomLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgViewSource_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBrowserReady_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgURLChanged_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHTMLHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHTMLPageSecurityInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgFinishedRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgLoadedRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPageSecurity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgStartRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgStartRequestResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgShowPopup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgHidePopup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSizePopup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgOpenNewTab_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPopupHTMLWindow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPopupHTMLWindowResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSetHTMLTitle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgLoadingResource_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgStatusText_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSetCursor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgFileLoadDialog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgFileLoadDialogResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgShowToolTip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgUpdateToolTip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgHideToolTip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSearchResults_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSetSharedPaintBuffers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgNeedsPaint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgComboNeedsPaint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGetZoom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGetZoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgLinkAtPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgLinkAtPositionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgZoomToElementAtPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgZoomToElementAtPositionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgScalePageToValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgScalePageToValueResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSavePageToJPEG_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSavePageToJPEGResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgJSAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgJSConfirm_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgJSDialogResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgCanGoBackAndForward_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgOpenSteamURL_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSetCookie_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSetTargetFrameRate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPauseRepaint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgFullRepaint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRequestFullScreen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRequestFullScreenResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgExitFullScreen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGetCookiesForURL_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCookie_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGetCookiesForURLResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgNodeHasFocus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgZoomToFocusedElement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgCloseFullScreenFlashIfOpen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPauseFullScreenFlashMovieIfOpen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgFocusedNodeText_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgFocusedNodeTextResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBuildID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgOpenDevTools_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgCloseDevTools_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgUnlockH264_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgScreenInformationChanged_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClearAllCookies_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgScreenDPI_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAuthedSteamDomains_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSteamAuthNeeded_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSteamAuthCookiesSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgJSRegisterMethod_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CJSMethodArgument_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgJSValue_JSObjectProperty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgJSValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgJSMethodCall_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgJSExecuteCallback_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgJSReleaseCallback_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgJSRaiseException_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgLoadLocalization_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgEnableSteamClientAPI_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgJumpListLink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMSgJumpListMRUApp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSetJumpList_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "htmlmessages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 120);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgKeyUp_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgKeyDown_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgKeyChar_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgMouseDown_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMsgMouseUp_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgMouseDblClick_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CMsgMouseWheel_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CMsgMouseMove_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CMsgMouseLeave_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CMsgBrowserCreate_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CMsgBrowserCreateResponse_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CMsgBrowserRemove_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CMsgSetLocalFileRequestMapping_AdditionalRoute_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CMsgSetLocalFileRequestMapping_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CMsgBrowserErrorStrings_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CMsgBrowserSize_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CMsgPostURL_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CMsgAddHeader_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CMsgStopLoad_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CMsgReload_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CMsgGoForward_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CMsgGoBack_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CMsgClearHistory_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CMsgCopy_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CMsgPaste_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CMsgExecuteJavaScript_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CMsgSetFocus_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CMsgHorizontalScrollBarSize_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CMsgHorizontalScrollBarSizeResponse_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CMsgVerticalScrollBarSize_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _CMsgVerticalScrollBarSizeResponse_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _CMsgFind_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _CMsgStopFind_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _CMsgSetHorizontalScroll_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _CMsgSetVerticalScroll_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _CMsgSetZoomLevel_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _CMsgViewSource_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _CMsgBrowserReady_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _CMsgURLChanged_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _CHTMLHeader_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _CHTMLPageSecurityInfo_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _CMsgFinishedRequest_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _CMsgLoadedRequest_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _CMsgPageSecurity_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _CMsgStartRequest_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _CMsgStartRequestResponse_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _CMsgShowPopup_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _CMsgHidePopup_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _CMsgSizePopup_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _CMsgOpenNewTab_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _CMsgPopupHTMLWindow_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _CMsgPopupHTMLWindowResponse_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _CMsgSetHTMLTitle_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _CMsgLoadingResource_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _CMsgStatusText_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _CMsgSetCursor_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _CMsgFileLoadDialog_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  _CMsgFileLoadDialogResponse_default_instance_.Shutdown();
  delete file_level_metadata[57].reflection;
  _CMsgShowToolTip_default_instance_.Shutdown();
  delete file_level_metadata[58].reflection;
  _CMsgUpdateToolTip_default_instance_.Shutdown();
  delete file_level_metadata[59].reflection;
  _CMsgHideToolTip_default_instance_.Shutdown();
  delete file_level_metadata[60].reflection;
  _CMsgSearchResults_default_instance_.Shutdown();
  delete file_level_metadata[61].reflection;
  _CMsgClose_default_instance_.Shutdown();
  delete file_level_metadata[62].reflection;
  _CMsgSetSharedPaintBuffers_default_instance_.Shutdown();
  delete file_level_metadata[63].reflection;
  _CMsgNeedsPaint_default_instance_.Shutdown();
  delete file_level_metadata[64].reflection;
  _CMsgComboNeedsPaint_default_instance_.Shutdown();
  delete file_level_metadata[65].reflection;
  _CMsgGetZoom_default_instance_.Shutdown();
  delete file_level_metadata[66].reflection;
  _CMsgGetZoomResponse_default_instance_.Shutdown();
  delete file_level_metadata[67].reflection;
  _CMsgLinkAtPosition_default_instance_.Shutdown();
  delete file_level_metadata[68].reflection;
  _CMsgLinkAtPositionResponse_default_instance_.Shutdown();
  delete file_level_metadata[69].reflection;
  _CMsgZoomToElementAtPosition_default_instance_.Shutdown();
  delete file_level_metadata[70].reflection;
  _CMsgZoomToElementAtPositionResponse_default_instance_.Shutdown();
  delete file_level_metadata[71].reflection;
  _CMsgScalePageToValue_default_instance_.Shutdown();
  delete file_level_metadata[72].reflection;
  _CMsgScalePageToValueResponse_default_instance_.Shutdown();
  delete file_level_metadata[73].reflection;
  _CMsgSavePageToJPEG_default_instance_.Shutdown();
  delete file_level_metadata[74].reflection;
  _CMsgSavePageToJPEGResponse_default_instance_.Shutdown();
  delete file_level_metadata[75].reflection;
  _CMsgJSAlert_default_instance_.Shutdown();
  delete file_level_metadata[76].reflection;
  _CMsgJSConfirm_default_instance_.Shutdown();
  delete file_level_metadata[77].reflection;
  _CMsgJSDialogResponse_default_instance_.Shutdown();
  delete file_level_metadata[78].reflection;
  _CMsgCanGoBackAndForward_default_instance_.Shutdown();
  delete file_level_metadata[79].reflection;
  _CMsgOpenSteamURL_default_instance_.Shutdown();
  delete file_level_metadata[80].reflection;
  _CMsgSetCookie_default_instance_.Shutdown();
  delete file_level_metadata[81].reflection;
  _CMsgSetTargetFrameRate_default_instance_.Shutdown();
  delete file_level_metadata[82].reflection;
  _CMsgPauseRepaint_default_instance_.Shutdown();
  delete file_level_metadata[83].reflection;
  _CMsgFullRepaint_default_instance_.Shutdown();
  delete file_level_metadata[84].reflection;
  _CMsgRequestFullScreen_default_instance_.Shutdown();
  delete file_level_metadata[85].reflection;
  _CMsgRequestFullScreenResponse_default_instance_.Shutdown();
  delete file_level_metadata[86].reflection;
  _CMsgExitFullScreen_default_instance_.Shutdown();
  delete file_level_metadata[87].reflection;
  _CMsgGetCookiesForURL_default_instance_.Shutdown();
  delete file_level_metadata[88].reflection;
  _CCookie_default_instance_.Shutdown();
  delete file_level_metadata[89].reflection;
  _CMsgGetCookiesForURLResponse_default_instance_.Shutdown();
  delete file_level_metadata[90].reflection;
  _CMsgNodeHasFocus_default_instance_.Shutdown();
  delete file_level_metadata[91].reflection;
  _CMsgZoomToFocusedElement_default_instance_.Shutdown();
  delete file_level_metadata[92].reflection;
  _CMsgCloseFullScreenFlashIfOpen_default_instance_.Shutdown();
  delete file_level_metadata[93].reflection;
  _CMsgPauseFullScreenFlashMovieIfOpen_default_instance_.Shutdown();
  delete file_level_metadata[94].reflection;
  _CMsgFocusedNodeText_default_instance_.Shutdown();
  delete file_level_metadata[95].reflection;
  _CMsgFocusedNodeTextResponse_default_instance_.Shutdown();
  delete file_level_metadata[96].reflection;
  _CMsgBuildID_default_instance_.Shutdown();
  delete file_level_metadata[97].reflection;
  _CMsgOpenDevTools_default_instance_.Shutdown();
  delete file_level_metadata[98].reflection;
  _CMsgCloseDevTools_default_instance_.Shutdown();
  delete file_level_metadata[99].reflection;
  _CMsgUnlockH264_default_instance_.Shutdown();
  delete file_level_metadata[100].reflection;
  _CMsgScreenInformationChanged_default_instance_.Shutdown();
  delete file_level_metadata[101].reflection;
  _CMsgClearAllCookies_default_instance_.Shutdown();
  delete file_level_metadata[102].reflection;
  _CMsgScreenDPI_default_instance_.Shutdown();
  delete file_level_metadata[103].reflection;
  _CMsgAuthedSteamDomains_default_instance_.Shutdown();
  delete file_level_metadata[104].reflection;
  _CMsgSteamAuthNeeded_default_instance_.Shutdown();
  delete file_level_metadata[105].reflection;
  _CMsgSteamAuthCookiesSet_default_instance_.Shutdown();
  delete file_level_metadata[106].reflection;
  _CMsgJSRegisterMethod_default_instance_.Shutdown();
  delete file_level_metadata[107].reflection;
  _CJSMethodArgument_default_instance_.Shutdown();
  delete file_level_metadata[108].reflection;
  _CMsgJSValue_JSObjectProperty_default_instance_.Shutdown();
  delete file_level_metadata[109].reflection;
  _CMsgJSValue_default_instance_.Shutdown();
  delete file_level_metadata[110].reflection;
  _CMsgJSMethodCall_default_instance_.Shutdown();
  delete file_level_metadata[111].reflection;
  _CMsgJSExecuteCallback_default_instance_.Shutdown();
  delete file_level_metadata[112].reflection;
  _CMsgJSReleaseCallback_default_instance_.Shutdown();
  delete file_level_metadata[113].reflection;
  _CMsgJSRaiseException_default_instance_.Shutdown();
  delete file_level_metadata[114].reflection;
  _CMsgLoadLocalization_default_instance_.Shutdown();
  delete file_level_metadata[115].reflection;
  _CMsgEnableSteamClientAPI_default_instance_.Shutdown();
  delete file_level_metadata[116].reflection;
  _CMsgJumpListLink_default_instance_.Shutdown();
  delete file_level_metadata[117].reflection;
  _CMSgJumpListMRUApp_default_instance_.Shutdown();
  delete file_level_metadata[118].reflection;
  _CMsgSetJumpList_default_instance_.Shutdown();
  delete file_level_metadata[119].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CMsgKeyUp_default_instance_.DefaultConstruct();
  _CMsgKeyDown_default_instance_.DefaultConstruct();
  _CMsgKeyChar_default_instance_.DefaultConstruct();
  _CMsgMouseDown_default_instance_.DefaultConstruct();
  _CMsgMouseUp_default_instance_.DefaultConstruct();
  _CMsgMouseDblClick_default_instance_.DefaultConstruct();
  _CMsgMouseWheel_default_instance_.DefaultConstruct();
  _CMsgMouseMove_default_instance_.DefaultConstruct();
  _CMsgMouseLeave_default_instance_.DefaultConstruct();
  _CMsgBrowserCreate_default_instance_.DefaultConstruct();
  _CMsgBrowserCreateResponse_default_instance_.DefaultConstruct();
  _CMsgBrowserRemove_default_instance_.DefaultConstruct();
  _CMsgSetLocalFileRequestMapping_AdditionalRoute_default_instance_.DefaultConstruct();
  _CMsgSetLocalFileRequestMapping_default_instance_.DefaultConstruct();
  _CMsgBrowserErrorStrings_default_instance_.DefaultConstruct();
  _CMsgBrowserSize_default_instance_.DefaultConstruct();
  _CMsgPostURL_default_instance_.DefaultConstruct();
  _CMsgAddHeader_default_instance_.DefaultConstruct();
  _CMsgStopLoad_default_instance_.DefaultConstruct();
  _CMsgReload_default_instance_.DefaultConstruct();
  _CMsgGoForward_default_instance_.DefaultConstruct();
  _CMsgGoBack_default_instance_.DefaultConstruct();
  _CMsgClearHistory_default_instance_.DefaultConstruct();
  _CMsgCopy_default_instance_.DefaultConstruct();
  _CMsgPaste_default_instance_.DefaultConstruct();
  _CMsgExecuteJavaScript_default_instance_.DefaultConstruct();
  _CMsgSetFocus_default_instance_.DefaultConstruct();
  _CMsgHorizontalScrollBarSize_default_instance_.DefaultConstruct();
  _CMsgHorizontalScrollBarSizeResponse_default_instance_.DefaultConstruct();
  _CMsgVerticalScrollBarSize_default_instance_.DefaultConstruct();
  _CMsgVerticalScrollBarSizeResponse_default_instance_.DefaultConstruct();
  _CMsgFind_default_instance_.DefaultConstruct();
  _CMsgStopFind_default_instance_.DefaultConstruct();
  _CMsgSetHorizontalScroll_default_instance_.DefaultConstruct();
  _CMsgSetVerticalScroll_default_instance_.DefaultConstruct();
  _CMsgSetZoomLevel_default_instance_.DefaultConstruct();
  _CMsgViewSource_default_instance_.DefaultConstruct();
  _CMsgBrowserReady_default_instance_.DefaultConstruct();
  _CMsgURLChanged_default_instance_.DefaultConstruct();
  _CHTMLHeader_default_instance_.DefaultConstruct();
  _CHTMLPageSecurityInfo_default_instance_.DefaultConstruct();
  _CMsgFinishedRequest_default_instance_.DefaultConstruct();
  _CMsgLoadedRequest_default_instance_.DefaultConstruct();
  _CMsgPageSecurity_default_instance_.DefaultConstruct();
  _CMsgStartRequest_default_instance_.DefaultConstruct();
  _CMsgStartRequestResponse_default_instance_.DefaultConstruct();
  _CMsgShowPopup_default_instance_.DefaultConstruct();
  _CMsgHidePopup_default_instance_.DefaultConstruct();
  _CMsgSizePopup_default_instance_.DefaultConstruct();
  _CMsgOpenNewTab_default_instance_.DefaultConstruct();
  _CMsgPopupHTMLWindow_default_instance_.DefaultConstruct();
  _CMsgPopupHTMLWindowResponse_default_instance_.DefaultConstruct();
  _CMsgSetHTMLTitle_default_instance_.DefaultConstruct();
  _CMsgLoadingResource_default_instance_.DefaultConstruct();
  _CMsgStatusText_default_instance_.DefaultConstruct();
  _CMsgSetCursor_default_instance_.DefaultConstruct();
  _CMsgFileLoadDialog_default_instance_.DefaultConstruct();
  _CMsgFileLoadDialogResponse_default_instance_.DefaultConstruct();
  _CMsgShowToolTip_default_instance_.DefaultConstruct();
  _CMsgUpdateToolTip_default_instance_.DefaultConstruct();
  _CMsgHideToolTip_default_instance_.DefaultConstruct();
  _CMsgSearchResults_default_instance_.DefaultConstruct();
  _CMsgClose_default_instance_.DefaultConstruct();
  _CMsgSetSharedPaintBuffers_default_instance_.DefaultConstruct();
  _CMsgNeedsPaint_default_instance_.DefaultConstruct();
  _CMsgComboNeedsPaint_default_instance_.DefaultConstruct();
  _CMsgGetZoom_default_instance_.DefaultConstruct();
  _CMsgGetZoomResponse_default_instance_.DefaultConstruct();
  _CMsgLinkAtPosition_default_instance_.DefaultConstruct();
  _CMsgLinkAtPositionResponse_default_instance_.DefaultConstruct();
  _CMsgZoomToElementAtPosition_default_instance_.DefaultConstruct();
  _CMsgZoomToElementAtPositionResponse_default_instance_.DefaultConstruct();
  _CMsgScalePageToValue_default_instance_.DefaultConstruct();
  _CMsgScalePageToValueResponse_default_instance_.DefaultConstruct();
  _CMsgSavePageToJPEG_default_instance_.DefaultConstruct();
  _CMsgSavePageToJPEGResponse_default_instance_.DefaultConstruct();
  _CMsgJSAlert_default_instance_.DefaultConstruct();
  _CMsgJSConfirm_default_instance_.DefaultConstruct();
  _CMsgJSDialogResponse_default_instance_.DefaultConstruct();
  _CMsgCanGoBackAndForward_default_instance_.DefaultConstruct();
  _CMsgOpenSteamURL_default_instance_.DefaultConstruct();
  _CMsgSetCookie_default_instance_.DefaultConstruct();
  _CMsgSetTargetFrameRate_default_instance_.DefaultConstruct();
  _CMsgPauseRepaint_default_instance_.DefaultConstruct();
  _CMsgFullRepaint_default_instance_.DefaultConstruct();
  _CMsgRequestFullScreen_default_instance_.DefaultConstruct();
  _CMsgRequestFullScreenResponse_default_instance_.DefaultConstruct();
  _CMsgExitFullScreen_default_instance_.DefaultConstruct();
  _CMsgGetCookiesForURL_default_instance_.DefaultConstruct();
  _CCookie_default_instance_.DefaultConstruct();
  _CMsgGetCookiesForURLResponse_default_instance_.DefaultConstruct();
  _CMsgNodeHasFocus_default_instance_.DefaultConstruct();
  _CMsgZoomToFocusedElement_default_instance_.DefaultConstruct();
  _CMsgCloseFullScreenFlashIfOpen_default_instance_.DefaultConstruct();
  _CMsgPauseFullScreenFlashMovieIfOpen_default_instance_.DefaultConstruct();
  _CMsgFocusedNodeText_default_instance_.DefaultConstruct();
  _CMsgFocusedNodeTextResponse_default_instance_.DefaultConstruct();
  _CMsgBuildID_default_instance_.DefaultConstruct();
  _CMsgOpenDevTools_default_instance_.DefaultConstruct();
  _CMsgCloseDevTools_default_instance_.DefaultConstruct();
  _CMsgUnlockH264_default_instance_.DefaultConstruct();
  _CMsgScreenInformationChanged_default_instance_.DefaultConstruct();
  _CMsgClearAllCookies_default_instance_.DefaultConstruct();
  _CMsgScreenDPI_default_instance_.DefaultConstruct();
  _CMsgAuthedSteamDomains_default_instance_.DefaultConstruct();
  _CMsgSteamAuthNeeded_default_instance_.DefaultConstruct();
  _CMsgSteamAuthCookiesSet_default_instance_.DefaultConstruct();
  _CMsgJSRegisterMethod_default_instance_.DefaultConstruct();
  _CJSMethodArgument_default_instance_.DefaultConstruct();
  _CMsgJSValue_JSObjectProperty_default_instance_.DefaultConstruct();
  _CMsgJSValue_default_instance_.DefaultConstruct();
  _CMsgJSMethodCall_default_instance_.DefaultConstruct();
  _CMsgJSExecuteCallback_default_instance_.DefaultConstruct();
  _CMsgJSReleaseCallback_default_instance_.DefaultConstruct();
  _CMsgJSRaiseException_default_instance_.DefaultConstruct();
  _CMsgLoadLocalization_default_instance_.DefaultConstruct();
  _CMsgEnableSteamClientAPI_default_instance_.DefaultConstruct();
  _CMsgJumpListLink_default_instance_.DefaultConstruct();
  _CMSgJumpListMRUApp_default_instance_.DefaultConstruct();
  _CMsgSetJumpList_default_instance_.DefaultConstruct();
  _CMsgPageSecurity_default_instance_.get_mutable()->security_info_ = const_cast< ::proto::steam::CHTMLPageSecurityInfo*>(
      ::proto::steam::CHTMLPageSecurityInfo::internal_default_instance());
  _CMsgJSValue_JSObjectProperty_default_instance_.get_mutable()->value_ = const_cast< ::proto::steam::CMsgJSValue*>(
      ::proto::steam::CMsgJSValue::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\022htmlmessages.proto\022\013proto.steam\"G\n\tCMs"
      "gKeyUp\022\026\n\016browser_handle\030\001 \001(\r\022\017\n\007keyCod"
      "e\030\002 \001(\r\022\021\n\tmodifiers\030\003 \001(\r\"I\n\013CMsgKeyDow"
      "n\022\026\n\016browser_handle\030\001 \001(\r\022\017\n\007keyCode\030\002 \001"
      "(\r\022\021\n\tmodifiers\030\003 \001(\r\"I\n\013CMsgKeyChar\022\026\n\016"
      "browser_handle\030\001 \001(\r\022\017\n\007unichar\030\002 \001(\r\022\021\n"
      "\tmodifiers\030\003 \001(\r\"P\n\rCMsgMouseDown\022\026\n\016bro"
      "wser_handle\030\001 \001(\r\022\024\n\014mouse_button\030\002 \001(\r\022"
      "\021\n\tmodifiers\030\003 \001(\r\"N\n\013CMsgMouseUp\022\026\n\016bro"
      "wser_handle\030\001 \001(\r\022\024\n\014mouse_button\030\002 \001(\r\022"
      "\021\n\tmodifiers\030\003 \001(\r\"T\n\021CMsgMouseDblClick\022"
      "\026\n\016browser_handle\030\001 \001(\r\022\024\n\014mouse_button\030"
      "\002 \001(\r\022\021\n\tmodifiers\030\003 \001(\r\"J\n\016CMsgMouseWhe"
      "el\022\026\n\016browser_handle\030\001 \001(\r\022\r\n\005delta\030\002 \001("
      "\005\022\021\n\tmodifiers\030\003 \001(\r\"P\n\rCMsgMouseMove\022\026\n"
      "\016browser_handle\030\001 \001(\r\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 "
      "\001(\005\022\021\n\tmodifiers\030\004 \001(\r\"(\n\016CMsgMouseLeave"
      "\022\026\n\016browser_handle\030\001 \001(\r\"\334\002\n\021CMsgBrowser"
      "Create\022\022\n\nrequest_id\030\001 \001(\r\022\021\n\tuseragent\030"
      "\003 \001(\t\022\020\n\010user_css\030\005 \001(\t\022\030\n\020native_dropdo"
      "wns\030\006 \001(\010\022\023\n\013dpi_scaling\030\007 \001(\002\022\027\n\toffscr"
      "een\030\010 \001(\010:\004true\022\030\n\rinitial_width\030\t \001(\r:\001"
      "0\022\031\n\016initial_height\030\n \001(\r:\0010\022\023\n\013window_i"
      "con\030\013 \001(\t\022\031\n\nborderless\030\014 \001(\010:\005false\022\025\n\r"
      "vroverlay_key\030\r \001(\t\022\027\n\014browser_type\030\016 \001("
      "\r:\0010\022\027\n\013initial_top\030\017 \001(\005:\002-1\022\030\n\014initial"
      "_left\030\020 \001(\005:\002-1\"G\n\031CMsgBrowserCreateResp"
      "onse\022\026\n\016browser_handle\030\001 \001(\r\022\022\n\nrequest_"
      "id\030\002 \001(\r\"+\n\021CMsgBrowserRemove\022\026\n\016browser"
      "_handle\030\001 \001(\r\"\217\002\n\036CMsgSetLocalFileReques"
      "tMapping\022\026\n\016browser_handle\030\001 \001(\r\022\023\n\013requ"
      "est_url\030\002 \001(\t\022\032\n\022default_local_path\030\003 \001("
      "\t\022K\n\006routes\030\004 \003(\0132;.proto.steam.CMsgSetL"
      "ocalFileRequestMapping.AdditionalRoute\032W"
      "\n\017AdditionalRoute\022\024\n\014relative_url\030\001 \001(\t\022"
      "\022\n\nlocal_path\030\002 \001(\t\022\032\n\022allowed_extension"
      "s\030\003 \001(\t\"\271\001\n\027CMsgBrowserErrorStrings\022\026\n\016b"
      "rowser_handle\030\001 \001(\r\022\r\n\005title\030\002 \001(\t\022\016\n\006he"
      "ader\030\003 \001(\t\022\022\n\ncache_miss\030\004 \001(\t\022\017\n\007bad_ur"
      "l\030\005 \001(\t\022\032\n\022connection_problem\030\006 \001(\t\022\025\n\rp"
      "roxy_problem\030\007 \001(\t\022\017\n\007unknown\030\010 \001(\t\"H\n\017C"
      "MsgBrowserSize\022\026\n\016browser_handle\030\001 \001(\r\022\r"
      "\n\005width\030\002 \001(\r\022\016\n\006height\030\003 \001(\r\"T\n\013CMsgPos"
      "tURL\022\026\n\016browser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001("
      "\t\022\014\n\004post\030\003 \001(\t\022\022\n\npageserial\030\004 \001(\r\"C\n\rC"
      "MsgAddHeader\022\026\n\016browser_handle\030\001 \001(\r\022\013\n\003"
      "key\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\"&\n\014CMsgStopLoad"
      "\022\026\n\016browser_handle\030\001 \001(\r\"$\n\nCMsgReload\022\026"
      "\n\016browser_handle\030\001 \001(\r\"\'\n\rCMsgGoForward\022"
      "\026\n\016browser_handle\030\001 \001(\r\"$\n\nCMsgGoBack\022\026\n"
      "\016browser_handle\030\001 \001(\r\"*\n\020CMsgClearHistor"
      "y\022\026\n\016browser_handle\030\001 \001(\r\"\"\n\010CMsgCopy\022\026\n"
      "\016browser_handle\030\001 \001(\r\"#\n\tCMsgPaste\022\026\n\016br"
      "owser_handle\030\001 \001(\r\"\?\n\025CMsgExecuteJavaScr"
      "ipt\022\026\n\016browser_handle\030\001 \001(\r\022\016\n\006script\030\002 "
      "\001(\t\"5\n\014CMsgSetFocus\022\026\n\016browser_handle\030\001 "
      "\001(\r\022\r\n\005focus\030\002 \001(\010\"5\n\033CMsgHorizontalScro"
      "llBarSize\022\026\n\016browser_handle\030\001 \001(\r\"\223\001\n#CM"
      "sgHorizontalScrollBarSizeResponse\022\026\n\016bro"
      "wser_handle\030\001 \001(\r\022\022\n\nscroll_max\030\006 \001(\r\022\016\n"
      "\006scroll\030\007 \001(\r\022\014\n\004zoom\030\010 \001(\002\022\017\n\007visible\030\t"
      " \001(\010\022\021\n\tpage_size\030\n \001(\r\"3\n\031CMsgVerticalS"
      "crollBarSize\022\026\n\016browser_handle\030\001 \001(\r\"\221\001\n"
      "!CMsgVerticalScrollBarSizeResponse\022\026\n\016br"
      "owser_handle\030\001 \001(\r\022\022\n\nscroll_max\030\006 \001(\r\022\016"
      "\n\006scroll\030\007 \001(\r\022\014\n\004zoom\030\010 \001(\002\022\017\n\007visible\030"
      "\t \001(\010\022\021\n\tpage_size\030\n \001(\r\"X\n\010CMsgFind\022\026\n\016"
      "browser_handle\030\001 \001(\r\022\014\n\004find\030\002 \001(\t\022\016\n\006in"
      "find\030\003 \001(\010\022\026\n\007reverse\030\004 \001(\010:\005false\"&\n\014CM"
      "sgStopFind\022\026\n\016browser_handle\030\001 \001(\r\"A\n\027CM"
      "sgSetHorizontalScroll\022\026\n\016browser_handle\030"
      "\001 \001(\r\022\016\n\006scroll\030\002 \001(\r\"\?\n\025CMsgSetVertical"
      "Scroll\022\026\n\016browser_handle\030\001 \001(\r\022\016\n\006scroll"
      "\030\002 \001(\r\"8\n\020CMsgSetZoomLevel\022\026\n\016browser_ha"
      "ndle\030\001 \001(\r\022\014\n\004zoom\030\002 \001(\r\"(\n\016CMsgViewSour"
      "ce\022\026\n\016browser_handle\030\001 \001(\r\"B\n\020CMsgBrowse"
      "rReady\022\026\n\016browser_handle\030\001 \001(\r\022\026\n\016vr_ove"
      "rlay_key\030\002 \001(\t\"\207\001\n\016CMsgURLChanged\022\026\n\016bro"
      "wser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\020\n\010postDa"
      "ta\030\003 \001(\t\022\023\n\013bIsRedirect\030\004 \001(\010\022\021\n\tpagetit"
      "le\030\005 \001(\t\022\026\n\016bNewNavigation\030\006 \001(\010\")\n\013CHTM"
      "LHeader\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\274\001\n\025"
      "CHTMLPageSecurityInfo\022\030\n\tbIsSecure\030\001 \001(\010"
      ":\005false\022\034\n\rbHasCertError\030\002 \001(\010:\005false\022\022\n"
      "\nissuerName\030\003 \001(\t\022\020\n\010certName\030\004 \001(\t\022\025\n\nc"
      "ertExpiry\030\005 \001(\005:\0010\022\024\n\tnCertBits\030\006 \001(\005:\0010"
      "\022\030\n\tbIsEVCert\030\007 \001(\010:\005false\"M\n\023CMsgFinish"
      "edRequest\022\026\n\016browser_handle\030\001 \001(\r\022\013\n\003url"
      "\030\002 \001(\t\022\021\n\tpageTitle\030\003 \001(\t\"v\n\021CMsgLoadedR"
      "equest\022\026\n\016browser_handle\030\001 \001(\r\022\013\n\003url\030\002 "
      "\001(\t\022\021\n\tpageTitle\030\003 \001(\t\022)\n\007headers\030\005 \003(\0132"
      "\030.proto.steam.CHTMLHeader\"r\n\020CMsgPageSec"
      "urity\022\026\n\016browser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001"
      "(\t\0229\n\rsecurity_info\030\003 \001(\0132\".proto.steam."
      "CHTMLPageSecurityInfo\"n\n\020CMsgStartReques"
      "t\022\026\n\016browser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\016"
      "\n\006target\030\003 \001(\t\022\020\n\010postData\030\004 \001(\t\022\023\n\013bIsR"
      "edirect\030\005 \001(\010\"B\n\030CMsgStartRequestRespons"
      "e\022\026\n\016browser_handle\030\001 \001(\r\022\016\n\006bAllow\030\002 \001("
      "\010\"\'\n\rCMsgShowPopup\022\026\n\016browser_handle\030\001 \001"
      "(\r\"\'\n\rCMsgHidePopup\022\026\n\016browser_handle\030\001 "
      "\001(\r\"Y\n\rCMsgSizePopup\022\026\n\016browser_handle\030\001"
      " \001(\r\022\t\n\001x\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\022\014\n\004wide\030\004 \001(\r"
      "\022\014\n\004tall\030\005 \001(\r\"J\n\016CMsgOpenNewTab\022\026\n\016brow"
      "ser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\023\n\013bForegr"
      "ound\030\003 \001(\010\"\201\001\n\023CMsgPopupHTMLWindow\022\026\n\016br"
      "owser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\t\n\001x\030\003 \001"
      "(\r\022\t\n\001y\030\004 \001(\r\022\014\n\004wide\030\005 \001(\r\022\014\n\004tall\030\006 \001("
      "\r\022\023\n\013popup_index\030\007 \001(\r\"E\n\033CMsgPopupHTMLW"
      "indowResponse\022\026\n\016browser_handle\030\001 \001(\r\022\016\n"
      "\006bAllow\030\002 \001(\010\"9\n\020CMsgSetHTMLTitle\022\026\n\016bro"
      "wser_handle\030\001 \001(\r\022\r\n\005title\030\002 \001(\t\":\n\023CMsg"
      "LoadingResource\022\026\n\016browser_handle\030\001 \001(\r\022"
      "\013\n\003url\030\002 \001(\t\"6\n\016CMsgStatusText\022\026\n\016browse"
      "r_handle\030\001 \001(\r\022\014\n\004text\030\002 \001(\t\"\214\001\n\rCMsgSet"
      "Cursor\022\026\n\016browser_handle\030\001 \001(\r\022\016\n\006cursor"
      "\030\002 \001(\r\022\023\n\013custom_data\030\003 \001(\014\022\014\n\004wide\030\004 \001("
      "\r\022\014\n\004tall\030\005 \001(\r\022\020\n\010xhotspot\030\006 \001(\r\022\020\n\010yho"
      "tspot\030\007 \001(\r\"P\n\022CMsgFileLoadDialog\022\026\n\016bro"
      "wser_handle\030\001 \001(\r\022\r\n\005title\030\002 \001(\t\022\023\n\013init"
      "ialFile\030\003 \001(\t\"C\n\032CMsgFileLoadDialogRespo"
      "nse\022\026\n\016browser_handle\030\001 \001(\r\022\r\n\005files\030\002 \003"
      "(\t\"7\n\017CMsgShowToolTip\022\026\n\016browser_handle\030"
      "\001 \001(\r\022\014\n\004text\030\002 \001(\t\"9\n\021CMsgUpdateToolTip"
      "\022\026\n\016browser_handle\030\001 \001(\r\022\014\n\004text\030\002 \001(\t\")"
      "\n\017CMsgHideToolTip\022\026\n\016browser_handle\030\001 \001("
      "\r\"Q\n\021CMsgSearchResults\022\026\n\016browser_handle"
      "\030\001 \001(\r\022\023\n\013activeMatch\030\002 \001(\005\022\017\n\007results\030\003"
      " \001(\005\"#\n\tCMsgClose\022\026\n\016browser_handle\030\001 \001("
      "\r\"\212\001\n\031CMsgSetSharedPaintBuffers\022\026\n\016brows"
      "er_handle\030\001 \001(\r\022\014\n\004wide\030\002 \001(\r\022\014\n\004tall\030\003 "
      "\001(\r\022\022\n\nsource_pid\030\004 \001(\004\022\025\n\rsource_handle"
      "\030\005 \001(\004\022\016\n\006handle\030\006 \001(\004\"q\n\016CMsgNeedsPaint"
      "\022\026\n\016browser_handle\030\001 \001(\r\022\017\n\007scrollx\030\n \001("
      "\r\022\017\n\007scrolly\030\013 \001(\r\022\021\n\tpagescale\030\014 \001(\002\022\022\n"
      "\npageserial\030\017 \001(\r\"\257\001\n\023CMsgComboNeedsPain"
      "t\022\026\n\016browser_handle\030\001 \001(\r\022\014\n\004rgba\030\002 \001(\004\022"
      "\030\n\rcombobox_wide\030\003 \001(\r:\0010\022\030\n\rcombobox_ta"
      "ll\030\004 \001(\r:\0010\022\037\n\024shared_memory_handle\030\005 \001("
      "\004:\0010\022\035\n\022shared_memory_size\030\007 \001(\004:\0010\"%\n\013C"
      "MsgGetZoom\022\026\n\016browser_handle\030\001 \001(\r\";\n\023CM"
      "sgGetZoomResponse\022\026\n\016browser_handle\030\001 \001("
      "\r\022\014\n\004zoom\030\002 \001(\002\"B\n\022CMsgLinkAtPosition\022\026\n"
      "\016browser_handle\030\001 \001(\r\022\t\n\001x\030\002 \001(\r\022\t\n\001y\030\003 "
      "\001(\r\"z\n\032CMsgLinkAtPositionResponse\022\026\n\016bro"
      "wser_handle\030\001 \001(\r\022\t\n\001x\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\022"
      "\013\n\003url\030\004 \001(\t\022\021\n\tblivelink\030\005 \001(\010\022\016\n\006binpu"
      "t\030\006 \001(\010\"K\n\033CMsgZoomToElementAtPosition\022\026"
      "\n\016browser_handle\030\001 \001(\r\022\t\n\001x\030\002 \001(\r\022\t\n\001y\030\003"
      " \001(\r\"^\n#CMsgZoomToElementAtPositionRespo"
      "nse\022\026\n\016browser_handle\030\001 \001(\r\022\r\n\005scale\030\002 \001"
      "(\002\022\020\n\010duration\030\003 \001(\002\"S\n\024CMsgScalePageToV"
      "alue\022\026\n\016browser_handle\030\001 \001(\r\022\r\n\005scale\030\002 "
      "\001(\002\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\"D\n\034CMsgScalePa"
      "geToValueResponse\022\026\n\016browser_handle\030\001 \001("
      "\r\022\014\n\004zoom\030\002 \001(\002\"j\n\022CMsgSavePageToJPEG\022\026\n"
      "\016browser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\020\n\010fi"
      "lename\030\003 \001(\t\022\r\n\005width\030\004 \001(\r\022\016\n\006height\030\005 "
      "\001(\r\"S\n\032CMsgSavePageToJPEGResponse\022\026\n\016bro"
      "wser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\020\n\010filena"
      "me\030\003 \001(\t\"6\n\013CMsgJSAlert\022\026\n\016browser_handl"
      "e\030\001 \001(\r\022\017\n\007message\030\002 \001(\t\"8\n\rCMsgJSConfir"
      "m\022\026\n\016browser_handle\030\001 \001(\r\022\017\n\007message\030\002 \001"
      "(\t\">\n\024CMsgJSDialogResponse\022\026\n\016browser_ha"
      "ndle\030\001 \001(\r\022\016\n\006result\030\002 \001(\010\"V\n\027CMsgCanGoB"
      "ackAndForward\022\026\n\016browser_handle\030\001 \001(\r\022\017\n"
      "\007bgoback\030\002 \001(\010\022\022\n\nbgoforward\030\003 \001(\010\"7\n\020CM"
      "sgOpenSteamURL\022\026\n\016browser_handle\030\001 \001(\r\022\013"
      "\n\003url\030\002 \001(\t\"z\n\rCMsgSetCookie\022\013\n\003key\030\001 \001("
      "\t\022\r\n\005value\030\002 \001(\t\022\014\n\004path\030\003 \001(\t\022\014\n\004host\030\004"
      " \001(\t\022\017\n\007expires\030\005 \001(\r\022\016\n\006secure\030\006 \001(\010\022\020\n"
      "\010httponly\030\007 \001(\010\"J\n\026CMsgSetTargetFrameRat"
      "e\022\026\n\016browser_handle\030\001 \001(\r\022\030\n\020nTargetFram"
      "eRate\030\002 \001(\r\"*\n\020CMsgPauseRepaint\022\026\n\016brows"
      "er_handle\030\001 \001(\r\")\n\017CMsgFullRepaint\022\026\n\016br"
      "owser_handle\030\001 \001(\r\"/\n\025CMsgRequestFullScr"
      "een\022\026\n\016browser_handle\030\001 \001(\r\"G\n\035CMsgReque"
      "stFullScreenResponse\022\026\n\016browser_handle\030\001"
      " \001(\r\022\016\n\006ballow\030\002 \001(\010\",\n\022CMsgExitFullScre"
      "en\022\026\n\016browser_handle\030\001 \001(\r\";\n\024CMsgGetCoo"
      "kiesForURL\022\026\n\016browser_handle\030\001 \001(\r\022\013\n\003ur"
      "l\030\002 \001(\t\"D\n\007CCookie\022\014\n\004name\030\001 \001(\t\022\r\n\005valu"
      "e\030\002 \001(\t\022\016\n\006domain\030\003 \001(\t\022\014\n\004path\030\004 \001(\t\"j\n"
      "\034CMsgGetCookiesForURLResponse\022\026\n\016browser"
      "_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022%\n\007cookies\030\003 "
      "\003(\0132\024.proto.steam.CCookie\"\252\001\n\020CMsgNodeHa"
      "sFocus\022\026\n\016browser_handle\030\001 \001(\r\022\016\n\006bInput"
      "\030\002 \001(\010\022\014\n\004name\030\003 \001(\t\022\026\n\016elementtagname\030\004"
      " \001(\t\022\030\n\020searchbuttontext\030\005 \001(\t\022\032\n\022bHasMu"
      "ltipleInputs\030\006 \001(\010\022\022\n\ninput_type\030\007 \001(\t\"2"
      "\n\030CMsgZoomToFocusedElement\022\026\n\016browser_ha"
      "ndle\030\001 \001(\r\"8\n\036CMsgCloseFullScreenFlashIf"
      "Open\022\026\n\016browser_handle\030\001 \001(\r\"=\n#CMsgPaus"
      "eFullScreenFlashMovieIfOpen\022\026\n\016browser_h"
      "andle\030\001 \001(\r\"-\n\023CMsgFocusedNodeText\022\026\n\016br"
      "owser_handle\030\001 \001(\r\"D\n\033CMsgFocusedNodeTex"
      "tResponse\022\026\n\016browser_handle\030\001 \001(\r\022\r\n\005val"
      "ue\030\002 \001(\t\"\037\n\013CMsgBuildID\022\020\n\010build_id\030\001 \001("
      "\004\"*\n\020CMsgOpenDevTools\022\026\n\016browser_handle\030"
      "\001 \001(\r\"+\n\021CMsgCloseDevTools\022\026\n\016browser_ha"
      "ndle\030\001 \001(\r\"=\n\016CMsgUnlockH264\022\026\n\016browser_"
      "handle\030\001 \001(\r\022\023\n\013unlock_code\030\002 \001(\t\"g\n\034CMs"
      "gScreenInformationChanged\022\026\n\016browser_han"
      "dle\030\001 \001(\r\022\026\n\016override_width\030\002 \001(\r\022\027\n\017ove"
      "rride_height\030\003 \001(\r\"-\n\023CMsgClearAllCookie"
      "s\022\026\n\016browser_handle\030\001 \001(\r\"<\n\rCMsgScreenD"
      "PI\022\026\n\016browser_handle\030\001 \001(\r\022\023\n\013dpi_scalin"
      "g\030\002 \001(\002\")\n\026CMsgAuthedSteamDomains\022\017\n\007dom"
      "ains\030\001 \003(\t\"%\n\023CMsgSteamAuthNeeded\022\016\n\006fil"
      "ler\030\001 \001(\010\"*\n\027CMsgSteamAuthCookiesSet\022\017\n\007"
      "success\030\001 \001(\010\"\226\001\n\024CMsgJSRegisterMethod\022\026"
      "\n\016browser_handle\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022X\n\013"
      "method_type\030\003 \001(\0162\".proto.steam.EJSRegis"
      "terMethodType:\037k_EJSRegisterMethodType_I"
      "nvalid\"\?\n\021CJSMethodArgument\022\021\n\tjson_data"
      "\030\001 \001(\t\022\027\n\017function_handle\030\002 \001(\004\"\362\002\n\013CMsg"
      "JSValue\022\022\n\nbool_value\030\001 \001(\010\022\021\n\tint_value"
      "\030\002 \001(\005\022\022\n\nuint_value\030\003 \001(\r\022\023\n\013float_valu"
      "e\030\004 \001(\002\022\024\n\014string_value\030\005 \001(\t\022\027\n\017functio"
      "n_handle\030\006 \001(\004\022\020\n\010is_array\030\010 \001(\010\022.\n\014arra"
      "y_values\030\t \003(\0132\030.proto.steam.CMsgJSValue"
      "\022\021\n\tis_object\030\n \001(\010\022D\n\021object_properties"
      "\030\013 \003(\0132).proto.steam.CMsgJSValue.JSObjec"
      "tProperty\032I\n\020JSObjectProperty\022\014\n\004name\030\001 "
      "\001(\t\022\'\n\005value\030\002 \001(\0132\030.proto.steam.CMsgJSV"
      "alue\"e\n\020CMsgJSMethodCall\022\026\n\016browser_hand"
      "le\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022+\n\targuments\030\003 \003("
      "\0132\030.proto.steam.CMsgJSValue\"u\n\025CMsgJSExe"
      "cuteCallback\022\026\n\016browser_handle\030\001 \001(\r\022\027\n\017"
      "function_handle\030\002 \001(\004\022+\n\targuments\030\003 \003(\013"
      "2\030.proto.steam.CMsgJSValue\"H\n\025CMsgJSRele"
      "aseCallback\022\026\n\016browser_handle\030\001 \001(\r\022\027\n\017f"
      "unction_handle\030\002 \001(\004\"A\n\024CMsgJSRaiseExcep"
      "tion\022\026\n\016browser_handle\030\001 \001(\r\022\021\n\texceptio"
      "n\030\002 \001(\t\"[\n\024CMsgLoadLocalization\022\026\n\016brows"
      "er_handle\030\001 \001(\r\022\031\n\021localization_path\030\002 \001"
      "(\t\022\020\n\010language\030\003 \001(\t\"2\n\030CMsgEnableSteamC"
      "lientAPI\022\026\n\016browser_handle\030\001 \001(\r\"M\n\020CMsg"
      "JumpListLink\022\024\n\014display_name\030\001 \001(\t\022\020\n\010ur"
      "l_link\030\002 \001(\t\022\021\n\ticon_path\030\003 \001(\t\"^\n\022CMSgJ"
      "umpListMRUApp\022\r\n\005appid\030\001 \001(\r\022\024\n\014display_"
      "name\030\002 \001(\t\022\020\n\010url_link\030\003 \001(\t\022\021\n\ticon_pat"
      "h\030\004 \001(\t\"\225\001\n\017CMsgSetJumpList\022\022\n\nsteam_pat"
      "h\030\001 \001(\t\022\021\n\tmru_title\030\002 \001(\t\022-\n\004apps\030\003 \003(\013"
      "2\037.proto.steam.CMSgJumpListMRUApp\022,\n\005lin"
      "ks\030\004 \003(\0132\035.proto.steam.CMsgJumpListLink*"
      "\255\001\n\025EJSRegisterMethodType\022#\n\037k_EJSRegist"
      "erMethodType_Invalid\020\000\022$\n k_EJSRegisterM"
      "ethodType_Function\020\001\022$\n k_EJSRegisterMet"
      "hodType_Callback\020\002\022#\n\037k_EJSRegisterMetho"
      "dType_Promise\020\003B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 10022);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "htmlmessages.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_htmlmessages_2eproto

const ::google::protobuf::EnumDescriptor* EJSRegisterMethodType_descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_enum_descriptors[0];
}
bool EJSRegisterMethodType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgKeyUp::kBrowserHandleFieldNumber;
const int CMsgKeyUp::kKeyCodeFieldNumber;
const int CMsgKeyUp::kModifiersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgKeyUp::CMsgKeyUp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgKeyUp)
}
CMsgKeyUp::CMsgKeyUp(const CMsgKeyUp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgKeyUp)
}

void CMsgKeyUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
}

CMsgKeyUp::~CMsgKeyUp() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgKeyUp)
  SharedDtor();
}

void CMsgKeyUp::SharedDtor() {
}

void CMsgKeyUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgKeyUp::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgKeyUp& CMsgKeyUp::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgKeyUp* CMsgKeyUp::New(::google::protobuf::Arena* arena) const {
  CMsgKeyUp* n = new CMsgKeyUp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgKeyUp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgKeyUp)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&modifiers_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgKeyUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgKeyUp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 keyCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_keycode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keycode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modifiers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_modifiers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifiers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgKeyUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgKeyUp)
  return false;
#undef DO_
}

void CMsgKeyUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgKeyUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 keyCode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->keycode(), output);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->modifiers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgKeyUp)
}

::google::protobuf::uint8* CMsgKeyUp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgKeyUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 keyCode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->keycode(), target);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->modifiers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgKeyUp)
  return target;
}

size_t CMsgKeyUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgKeyUp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 keyCode = 2;
    if (has_keycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keycode());
    }

    // optional uint32 modifiers = 3;
    if (has_modifiers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifiers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgKeyUp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgKeyUp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgKeyUp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgKeyUp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgKeyUp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgKeyUp)
    MergeFrom(*source);
  }
}

void CMsgKeyUp::MergeFrom(const CMsgKeyUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgKeyUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      keycode_ = from.keycode_;
    }
    if (cached_has_bits & 0x00000004u) {
      modifiers_ = from.modifiers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgKeyUp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgKeyUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgKeyUp::CopyFrom(const CMsgKeyUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgKeyUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKeyUp::IsInitialized() const {
  return true;
}

void CMsgKeyUp::Swap(CMsgKeyUp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgKeyUp::InternalSwap(CMsgKeyUp* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(keycode_, other->keycode_);
  std::swap(modifiers_, other->modifiers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgKeyUp::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgKeyUp

// optional uint32 browser_handle = 1;
bool CMsgKeyUp::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgKeyUp::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgKeyUp::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgKeyUp::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgKeyUp::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgKeyUp.browser_handle)
  return browser_handle_;
}
void CMsgKeyUp::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgKeyUp.browser_handle)
}

// optional uint32 keyCode = 2;
bool CMsgKeyUp::has_keycode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgKeyUp::set_has_keycode() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgKeyUp::clear_has_keycode() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgKeyUp::clear_keycode() {
  keycode_ = 0u;
  clear_has_keycode();
}
::google::protobuf::uint32 CMsgKeyUp::keycode() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgKeyUp.keyCode)
  return keycode_;
}
void CMsgKeyUp::set_keycode(::google::protobuf::uint32 value) {
  set_has_keycode();
  keycode_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgKeyUp.keyCode)
}

// optional uint32 modifiers = 3;
bool CMsgKeyUp::has_modifiers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgKeyUp::set_has_modifiers() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgKeyUp::clear_has_modifiers() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgKeyUp::clear_modifiers() {
  modifiers_ = 0u;
  clear_has_modifiers();
}
::google::protobuf::uint32 CMsgKeyUp::modifiers() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgKeyUp.modifiers)
  return modifiers_;
}
void CMsgKeyUp::set_modifiers(::google::protobuf::uint32 value) {
  set_has_modifiers();
  modifiers_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgKeyUp.modifiers)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgKeyDown::kBrowserHandleFieldNumber;
const int CMsgKeyDown::kKeyCodeFieldNumber;
const int CMsgKeyDown::kModifiersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgKeyDown::CMsgKeyDown()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgKeyDown)
}
CMsgKeyDown::CMsgKeyDown(const CMsgKeyDown& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgKeyDown)
}

void CMsgKeyDown::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
}

CMsgKeyDown::~CMsgKeyDown() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgKeyDown)
  SharedDtor();
}

void CMsgKeyDown::SharedDtor() {
}

void CMsgKeyDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgKeyDown::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgKeyDown& CMsgKeyDown::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgKeyDown* CMsgKeyDown::New(::google::protobuf::Arena* arena) const {
  CMsgKeyDown* n = new CMsgKeyDown;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgKeyDown::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgKeyDown)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&modifiers_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgKeyDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgKeyDown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 keyCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_keycode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keycode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modifiers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_modifiers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifiers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgKeyDown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgKeyDown)
  return false;
#undef DO_
}

void CMsgKeyDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgKeyDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 keyCode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->keycode(), output);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->modifiers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgKeyDown)
}

::google::protobuf::uint8* CMsgKeyDown::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgKeyDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 keyCode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->keycode(), target);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->modifiers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgKeyDown)
  return target;
}

size_t CMsgKeyDown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgKeyDown)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 keyCode = 2;
    if (has_keycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keycode());
    }

    // optional uint32 modifiers = 3;
    if (has_modifiers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifiers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgKeyDown::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgKeyDown)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgKeyDown* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgKeyDown>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgKeyDown)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgKeyDown)
    MergeFrom(*source);
  }
}

void CMsgKeyDown::MergeFrom(const CMsgKeyDown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgKeyDown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      keycode_ = from.keycode_;
    }
    if (cached_has_bits & 0x00000004u) {
      modifiers_ = from.modifiers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgKeyDown::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgKeyDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgKeyDown::CopyFrom(const CMsgKeyDown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgKeyDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKeyDown::IsInitialized() const {
  return true;
}

void CMsgKeyDown::Swap(CMsgKeyDown* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgKeyDown::InternalSwap(CMsgKeyDown* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(keycode_, other->keycode_);
  std::swap(modifiers_, other->modifiers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgKeyDown::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgKeyDown

// optional uint32 browser_handle = 1;
bool CMsgKeyDown::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgKeyDown::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgKeyDown::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgKeyDown::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgKeyDown::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgKeyDown.browser_handle)
  return browser_handle_;
}
void CMsgKeyDown::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgKeyDown.browser_handle)
}

// optional uint32 keyCode = 2;
bool CMsgKeyDown::has_keycode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgKeyDown::set_has_keycode() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgKeyDown::clear_has_keycode() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgKeyDown::clear_keycode() {
  keycode_ = 0u;
  clear_has_keycode();
}
::google::protobuf::uint32 CMsgKeyDown::keycode() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgKeyDown.keyCode)
  return keycode_;
}
void CMsgKeyDown::set_keycode(::google::protobuf::uint32 value) {
  set_has_keycode();
  keycode_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgKeyDown.keyCode)
}

// optional uint32 modifiers = 3;
bool CMsgKeyDown::has_modifiers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgKeyDown::set_has_modifiers() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgKeyDown::clear_has_modifiers() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgKeyDown::clear_modifiers() {
  modifiers_ = 0u;
  clear_has_modifiers();
}
::google::protobuf::uint32 CMsgKeyDown::modifiers() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgKeyDown.modifiers)
  return modifiers_;
}
void CMsgKeyDown::set_modifiers(::google::protobuf::uint32 value) {
  set_has_modifiers();
  modifiers_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgKeyDown.modifiers)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgKeyChar::kBrowserHandleFieldNumber;
const int CMsgKeyChar::kUnicharFieldNumber;
const int CMsgKeyChar::kModifiersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgKeyChar::CMsgKeyChar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgKeyChar)
}
CMsgKeyChar::CMsgKeyChar(const CMsgKeyChar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgKeyChar)
}

void CMsgKeyChar::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
}

CMsgKeyChar::~CMsgKeyChar() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgKeyChar)
  SharedDtor();
}

void CMsgKeyChar::SharedDtor() {
}

void CMsgKeyChar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgKeyChar::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgKeyChar& CMsgKeyChar::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgKeyChar* CMsgKeyChar::New(::google::protobuf::Arena* arena) const {
  CMsgKeyChar* n = new CMsgKeyChar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgKeyChar::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgKeyChar)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&modifiers_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgKeyChar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgKeyChar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 unichar = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_unichar();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unichar_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modifiers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_modifiers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifiers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgKeyChar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgKeyChar)
  return false;
#undef DO_
}

void CMsgKeyChar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgKeyChar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 unichar = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unichar(), output);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->modifiers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgKeyChar)
}

::google::protobuf::uint8* CMsgKeyChar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgKeyChar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 unichar = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unichar(), target);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->modifiers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgKeyChar)
  return target;
}

size_t CMsgKeyChar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgKeyChar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 unichar = 2;
    if (has_unichar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unichar());
    }

    // optional uint32 modifiers = 3;
    if (has_modifiers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifiers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgKeyChar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgKeyChar)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgKeyChar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgKeyChar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgKeyChar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgKeyChar)
    MergeFrom(*source);
  }
}

void CMsgKeyChar::MergeFrom(const CMsgKeyChar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgKeyChar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      unichar_ = from.unichar_;
    }
    if (cached_has_bits & 0x00000004u) {
      modifiers_ = from.modifiers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgKeyChar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgKeyChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgKeyChar::CopyFrom(const CMsgKeyChar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgKeyChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKeyChar::IsInitialized() const {
  return true;
}

void CMsgKeyChar::Swap(CMsgKeyChar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgKeyChar::InternalSwap(CMsgKeyChar* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(unichar_, other->unichar_);
  std::swap(modifiers_, other->modifiers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgKeyChar::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgKeyChar

// optional uint32 browser_handle = 1;
bool CMsgKeyChar::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgKeyChar::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgKeyChar::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgKeyChar::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgKeyChar::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgKeyChar.browser_handle)
  return browser_handle_;
}
void CMsgKeyChar::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgKeyChar.browser_handle)
}

// optional uint32 unichar = 2;
bool CMsgKeyChar::has_unichar() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgKeyChar::set_has_unichar() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgKeyChar::clear_has_unichar() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgKeyChar::clear_unichar() {
  unichar_ = 0u;
  clear_has_unichar();
}
::google::protobuf::uint32 CMsgKeyChar::unichar() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgKeyChar.unichar)
  return unichar_;
}
void CMsgKeyChar::set_unichar(::google::protobuf::uint32 value) {
  set_has_unichar();
  unichar_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgKeyChar.unichar)
}

// optional uint32 modifiers = 3;
bool CMsgKeyChar::has_modifiers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgKeyChar::set_has_modifiers() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgKeyChar::clear_has_modifiers() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgKeyChar::clear_modifiers() {
  modifiers_ = 0u;
  clear_has_modifiers();
}
::google::protobuf::uint32 CMsgKeyChar::modifiers() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgKeyChar.modifiers)
  return modifiers_;
}
void CMsgKeyChar::set_modifiers(::google::protobuf::uint32 value) {
  set_has_modifiers();
  modifiers_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgKeyChar.modifiers)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMouseDown::kBrowserHandleFieldNumber;
const int CMsgMouseDown::kMouseButtonFieldNumber;
const int CMsgMouseDown::kModifiersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMouseDown::CMsgMouseDown()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgMouseDown)
}
CMsgMouseDown::CMsgMouseDown(const CMsgMouseDown& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgMouseDown)
}

void CMsgMouseDown::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
}

CMsgMouseDown::~CMsgMouseDown() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgMouseDown)
  SharedDtor();
}

void CMsgMouseDown::SharedDtor() {
}

void CMsgMouseDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMouseDown::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgMouseDown& CMsgMouseDown::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgMouseDown* CMsgMouseDown::New(::google::protobuf::Arena* arena) const {
  CMsgMouseDown* n = new CMsgMouseDown;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgMouseDown::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgMouseDown)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&modifiers_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgMouseDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgMouseDown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mouse_button = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_mouse_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mouse_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modifiers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_modifiers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifiers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgMouseDown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgMouseDown)
  return false;
#undef DO_
}

void CMsgMouseDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgMouseDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 mouse_button = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mouse_button(), output);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->modifiers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgMouseDown)
}

::google::protobuf::uint8* CMsgMouseDown::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgMouseDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 mouse_button = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mouse_button(), target);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->modifiers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgMouseDown)
  return target;
}

size_t CMsgMouseDown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgMouseDown)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 mouse_button = 2;
    if (has_mouse_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mouse_button());
    }

    // optional uint32 modifiers = 3;
    if (has_modifiers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifiers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMouseDown::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgMouseDown)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMouseDown* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgMouseDown>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgMouseDown)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgMouseDown)
    MergeFrom(*source);
  }
}

void CMsgMouseDown::MergeFrom(const CMsgMouseDown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgMouseDown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      mouse_button_ = from.mouse_button_;
    }
    if (cached_has_bits & 0x00000004u) {
      modifiers_ = from.modifiers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMouseDown::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgMouseDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseDown::CopyFrom(const CMsgMouseDown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgMouseDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseDown::IsInitialized() const {
  return true;
}

void CMsgMouseDown::Swap(CMsgMouseDown* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMouseDown::InternalSwap(CMsgMouseDown* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(mouse_button_, other->mouse_button_);
  std::swap(modifiers_, other->modifiers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgMouseDown::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgMouseDown

// optional uint32 browser_handle = 1;
bool CMsgMouseDown::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgMouseDown::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgMouseDown::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgMouseDown::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgMouseDown::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgMouseDown.browser_handle)
  return browser_handle_;
}
void CMsgMouseDown::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgMouseDown.browser_handle)
}

// optional uint32 mouse_button = 2;
bool CMsgMouseDown::has_mouse_button() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgMouseDown::set_has_mouse_button() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgMouseDown::clear_has_mouse_button() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgMouseDown::clear_mouse_button() {
  mouse_button_ = 0u;
  clear_has_mouse_button();
}
::google::protobuf::uint32 CMsgMouseDown::mouse_button() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgMouseDown.mouse_button)
  return mouse_button_;
}
void CMsgMouseDown::set_mouse_button(::google::protobuf::uint32 value) {
  set_has_mouse_button();
  mouse_button_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgMouseDown.mouse_button)
}

// optional uint32 modifiers = 3;
bool CMsgMouseDown::has_modifiers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgMouseDown::set_has_modifiers() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgMouseDown::clear_has_modifiers() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgMouseDown::clear_modifiers() {
  modifiers_ = 0u;
  clear_has_modifiers();
}
::google::protobuf::uint32 CMsgMouseDown::modifiers() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgMouseDown.modifiers)
  return modifiers_;
}
void CMsgMouseDown::set_modifiers(::google::protobuf::uint32 value) {
  set_has_modifiers();
  modifiers_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgMouseDown.modifiers)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMouseUp::kBrowserHandleFieldNumber;
const int CMsgMouseUp::kMouseButtonFieldNumber;
const int CMsgMouseUp::kModifiersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMouseUp::CMsgMouseUp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgMouseUp)
}
CMsgMouseUp::CMsgMouseUp(const CMsgMouseUp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgMouseUp)
}

void CMsgMouseUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
}

CMsgMouseUp::~CMsgMouseUp() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgMouseUp)
  SharedDtor();
}

void CMsgMouseUp::SharedDtor() {
}

void CMsgMouseUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMouseUp::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgMouseUp& CMsgMouseUp::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgMouseUp* CMsgMouseUp::New(::google::protobuf::Arena* arena) const {
  CMsgMouseUp* n = new CMsgMouseUp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgMouseUp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgMouseUp)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&modifiers_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgMouseUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgMouseUp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mouse_button = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_mouse_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mouse_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modifiers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_modifiers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifiers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgMouseUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgMouseUp)
  return false;
#undef DO_
}

void CMsgMouseUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgMouseUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 mouse_button = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mouse_button(), output);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->modifiers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgMouseUp)
}

::google::protobuf::uint8* CMsgMouseUp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgMouseUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 mouse_button = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mouse_button(), target);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->modifiers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgMouseUp)
  return target;
}

size_t CMsgMouseUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgMouseUp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 mouse_button = 2;
    if (has_mouse_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mouse_button());
    }

    // optional uint32 modifiers = 3;
    if (has_modifiers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifiers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMouseUp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgMouseUp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMouseUp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgMouseUp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgMouseUp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgMouseUp)
    MergeFrom(*source);
  }
}

void CMsgMouseUp::MergeFrom(const CMsgMouseUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgMouseUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      mouse_button_ = from.mouse_button_;
    }
    if (cached_has_bits & 0x00000004u) {
      modifiers_ = from.modifiers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMouseUp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgMouseUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseUp::CopyFrom(const CMsgMouseUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgMouseUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseUp::IsInitialized() const {
  return true;
}

void CMsgMouseUp::Swap(CMsgMouseUp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMouseUp::InternalSwap(CMsgMouseUp* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(mouse_button_, other->mouse_button_);
  std::swap(modifiers_, other->modifiers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgMouseUp::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgMouseUp

// optional uint32 browser_handle = 1;
bool CMsgMouseUp::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgMouseUp::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgMouseUp::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgMouseUp::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgMouseUp::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgMouseUp.browser_handle)
  return browser_handle_;
}
void CMsgMouseUp::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgMouseUp.browser_handle)
}

// optional uint32 mouse_button = 2;
bool CMsgMouseUp::has_mouse_button() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgMouseUp::set_has_mouse_button() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgMouseUp::clear_has_mouse_button() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgMouseUp::clear_mouse_button() {
  mouse_button_ = 0u;
  clear_has_mouse_button();
}
::google::protobuf::uint32 CMsgMouseUp::mouse_button() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgMouseUp.mouse_button)
  return mouse_button_;
}
void CMsgMouseUp::set_mouse_button(::google::protobuf::uint32 value) {
  set_has_mouse_button();
  mouse_button_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgMouseUp.mouse_button)
}

// optional uint32 modifiers = 3;
bool CMsgMouseUp::has_modifiers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgMouseUp::set_has_modifiers() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgMouseUp::clear_has_modifiers() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgMouseUp::clear_modifiers() {
  modifiers_ = 0u;
  clear_has_modifiers();
}
::google::protobuf::uint32 CMsgMouseUp::modifiers() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgMouseUp.modifiers)
  return modifiers_;
}
void CMsgMouseUp::set_modifiers(::google::protobuf::uint32 value) {
  set_has_modifiers();
  modifiers_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgMouseUp.modifiers)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMouseDblClick::kBrowserHandleFieldNumber;
const int CMsgMouseDblClick::kMouseButtonFieldNumber;
const int CMsgMouseDblClick::kModifiersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMouseDblClick::CMsgMouseDblClick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgMouseDblClick)
}
CMsgMouseDblClick::CMsgMouseDblClick(const CMsgMouseDblClick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgMouseDblClick)
}

void CMsgMouseDblClick::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
}

CMsgMouseDblClick::~CMsgMouseDblClick() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgMouseDblClick)
  SharedDtor();
}

void CMsgMouseDblClick::SharedDtor() {
}

void CMsgMouseDblClick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMouseDblClick::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgMouseDblClick& CMsgMouseDblClick::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgMouseDblClick* CMsgMouseDblClick::New(::google::protobuf::Arena* arena) const {
  CMsgMouseDblClick* n = new CMsgMouseDblClick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgMouseDblClick::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgMouseDblClick)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&modifiers_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgMouseDblClick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgMouseDblClick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mouse_button = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_mouse_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mouse_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modifiers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_modifiers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifiers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgMouseDblClick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgMouseDblClick)
  return false;
#undef DO_
}

void CMsgMouseDblClick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgMouseDblClick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 mouse_button = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mouse_button(), output);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->modifiers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgMouseDblClick)
}

::google::protobuf::uint8* CMsgMouseDblClick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgMouseDblClick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 mouse_button = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mouse_button(), target);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->modifiers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgMouseDblClick)
  return target;
}

size_t CMsgMouseDblClick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgMouseDblClick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 mouse_button = 2;
    if (has_mouse_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mouse_button());
    }

    // optional uint32 modifiers = 3;
    if (has_modifiers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifiers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMouseDblClick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgMouseDblClick)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMouseDblClick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgMouseDblClick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgMouseDblClick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgMouseDblClick)
    MergeFrom(*source);
  }
}

void CMsgMouseDblClick::MergeFrom(const CMsgMouseDblClick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgMouseDblClick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      mouse_button_ = from.mouse_button_;
    }
    if (cached_has_bits & 0x00000004u) {
      modifiers_ = from.modifiers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMouseDblClick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgMouseDblClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseDblClick::CopyFrom(const CMsgMouseDblClick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgMouseDblClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseDblClick::IsInitialized() const {
  return true;
}

void CMsgMouseDblClick::Swap(CMsgMouseDblClick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMouseDblClick::InternalSwap(CMsgMouseDblClick* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(mouse_button_, other->mouse_button_);
  std::swap(modifiers_, other->modifiers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgMouseDblClick::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgMouseDblClick

// optional uint32 browser_handle = 1;
bool CMsgMouseDblClick::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgMouseDblClick::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgMouseDblClick::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgMouseDblClick::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgMouseDblClick::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgMouseDblClick.browser_handle)
  return browser_handle_;
}
void CMsgMouseDblClick::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgMouseDblClick.browser_handle)
}

// optional uint32 mouse_button = 2;
bool CMsgMouseDblClick::has_mouse_button() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgMouseDblClick::set_has_mouse_button() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgMouseDblClick::clear_has_mouse_button() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgMouseDblClick::clear_mouse_button() {
  mouse_button_ = 0u;
  clear_has_mouse_button();
}
::google::protobuf::uint32 CMsgMouseDblClick::mouse_button() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgMouseDblClick.mouse_button)
  return mouse_button_;
}
void CMsgMouseDblClick::set_mouse_button(::google::protobuf::uint32 value) {
  set_has_mouse_button();
  mouse_button_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgMouseDblClick.mouse_button)
}

// optional uint32 modifiers = 3;
bool CMsgMouseDblClick::has_modifiers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgMouseDblClick::set_has_modifiers() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgMouseDblClick::clear_has_modifiers() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgMouseDblClick::clear_modifiers() {
  modifiers_ = 0u;
  clear_has_modifiers();
}
::google::protobuf::uint32 CMsgMouseDblClick::modifiers() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgMouseDblClick.modifiers)
  return modifiers_;
}
void CMsgMouseDblClick::set_modifiers(::google::protobuf::uint32 value) {
  set_has_modifiers();
  modifiers_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgMouseDblClick.modifiers)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMouseWheel::kBrowserHandleFieldNumber;
const int CMsgMouseWheel::kDeltaFieldNumber;
const int CMsgMouseWheel::kModifiersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMouseWheel::CMsgMouseWheel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgMouseWheel)
}
CMsgMouseWheel::CMsgMouseWheel(const CMsgMouseWheel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgMouseWheel)
}

void CMsgMouseWheel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
}

CMsgMouseWheel::~CMsgMouseWheel() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgMouseWheel)
  SharedDtor();
}

void CMsgMouseWheel::SharedDtor() {
}

void CMsgMouseWheel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMouseWheel::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgMouseWheel& CMsgMouseWheel::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgMouseWheel* CMsgMouseWheel::New(::google::protobuf::Arena* arena) const {
  CMsgMouseWheel* n = new CMsgMouseWheel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgMouseWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgMouseWheel)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&modifiers_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgMouseWheel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgMouseWheel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 delta = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modifiers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_modifiers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifiers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgMouseWheel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgMouseWheel)
  return false;
#undef DO_
}

void CMsgMouseWheel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgMouseWheel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional int32 delta = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delta(), output);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->modifiers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgMouseWheel)
}

::google::protobuf::uint8* CMsgMouseWheel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgMouseWheel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional int32 delta = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delta(), target);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->modifiers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgMouseWheel)
  return target;
}

size_t CMsgMouseWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgMouseWheel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional int32 delta = 2;
    if (has_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delta());
    }

    // optional uint32 modifiers = 3;
    if (has_modifiers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifiers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMouseWheel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgMouseWheel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMouseWheel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgMouseWheel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgMouseWheel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgMouseWheel)
    MergeFrom(*source);
  }
}

void CMsgMouseWheel::MergeFrom(const CMsgMouseWheel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgMouseWheel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      delta_ = from.delta_;
    }
    if (cached_has_bits & 0x00000004u) {
      modifiers_ = from.modifiers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMouseWheel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgMouseWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseWheel::CopyFrom(const CMsgMouseWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgMouseWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseWheel::IsInitialized() const {
  return true;
}

void CMsgMouseWheel::Swap(CMsgMouseWheel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMouseWheel::InternalSwap(CMsgMouseWheel* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(delta_, other->delta_);
  std::swap(modifiers_, other->modifiers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgMouseWheel::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgMouseWheel

// optional uint32 browser_handle = 1;
bool CMsgMouseWheel::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgMouseWheel::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgMouseWheel::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgMouseWheel::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgMouseWheel::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgMouseWheel.browser_handle)
  return browser_handle_;
}
void CMsgMouseWheel::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgMouseWheel.browser_handle)
}

// optional int32 delta = 2;
bool CMsgMouseWheel::has_delta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgMouseWheel::set_has_delta() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgMouseWheel::clear_has_delta() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgMouseWheel::clear_delta() {
  delta_ = 0;
  clear_has_delta();
}
::google::protobuf::int32 CMsgMouseWheel::delta() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgMouseWheel.delta)
  return delta_;
}
void CMsgMouseWheel::set_delta(::google::protobuf::int32 value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgMouseWheel.delta)
}

// optional uint32 modifiers = 3;
bool CMsgMouseWheel::has_modifiers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgMouseWheel::set_has_modifiers() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgMouseWheel::clear_has_modifiers() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgMouseWheel::clear_modifiers() {
  modifiers_ = 0u;
  clear_has_modifiers();
}
::google::protobuf::uint32 CMsgMouseWheel::modifiers() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgMouseWheel.modifiers)
  return modifiers_;
}
void CMsgMouseWheel::set_modifiers(::google::protobuf::uint32 value) {
  set_has_modifiers();
  modifiers_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgMouseWheel.modifiers)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMouseMove::kBrowserHandleFieldNumber;
const int CMsgMouseMove::kXFieldNumber;
const int CMsgMouseMove::kYFieldNumber;
const int CMsgMouseMove::kModifiersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMouseMove::CMsgMouseMove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgMouseMove)
}
CMsgMouseMove::CMsgMouseMove(const CMsgMouseMove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgMouseMove)
}

void CMsgMouseMove::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
}

CMsgMouseMove::~CMsgMouseMove() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgMouseMove)
  SharedDtor();
}

void CMsgMouseMove::SharedDtor() {
}

void CMsgMouseMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMouseMove::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgMouseMove& CMsgMouseMove::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgMouseMove* CMsgMouseMove::New(::google::protobuf::Arena* arena) const {
  CMsgMouseMove* n = new CMsgMouseMove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgMouseMove::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgMouseMove)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&modifiers_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(modifiers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgMouseMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgMouseMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modifiers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_modifiers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifiers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgMouseMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgMouseMove)
  return false;
#undef DO_
}

void CMsgMouseMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgMouseMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // optional uint32 modifiers = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->modifiers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgMouseMove)
}

::google::protobuf::uint8* CMsgMouseMove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgMouseMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // optional int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // optional uint32 modifiers = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->modifiers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgMouseMove)
  return target;
}

size_t CMsgMouseMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgMouseMove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional uint32 modifiers = 4;
    if (has_modifiers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifiers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMouseMove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgMouseMove)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMouseMove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgMouseMove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgMouseMove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgMouseMove)
    MergeFrom(*source);
  }
}

void CMsgMouseMove::MergeFrom(const CMsgMouseMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgMouseMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      modifiers_ = from.modifiers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMouseMove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgMouseMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseMove::CopyFrom(const CMsgMouseMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgMouseMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseMove::IsInitialized() const {
  return true;
}

void CMsgMouseMove::Swap(CMsgMouseMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMouseMove::InternalSwap(CMsgMouseMove* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(modifiers_, other->modifiers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgMouseMove::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgMouseMove

// optional uint32 browser_handle = 1;
bool CMsgMouseMove::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgMouseMove::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgMouseMove::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgMouseMove::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgMouseMove::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgMouseMove.browser_handle)
  return browser_handle_;
}
void CMsgMouseMove::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgMouseMove.browser_handle)
}

// optional int32 x = 2;
bool CMsgMouseMove::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgMouseMove::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgMouseMove::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgMouseMove::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 CMsgMouseMove::x() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgMouseMove.x)
  return x_;
}
void CMsgMouseMove::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgMouseMove.x)
}

// optional int32 y = 3;
bool CMsgMouseMove::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgMouseMove::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgMouseMove::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgMouseMove::clear_y() {
  y_ = 0;
  clear_has_y();
}
::google::protobuf::int32 CMsgMouseMove::y() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgMouseMove.y)
  return y_;
}
void CMsgMouseMove::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgMouseMove.y)
}

// optional uint32 modifiers = 4;
bool CMsgMouseMove::has_modifiers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgMouseMove::set_has_modifiers() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgMouseMove::clear_has_modifiers() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgMouseMove::clear_modifiers() {
  modifiers_ = 0u;
  clear_has_modifiers();
}
::google::protobuf::uint32 CMsgMouseMove::modifiers() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgMouseMove.modifiers)
  return modifiers_;
}
void CMsgMouseMove::set_modifiers(::google::protobuf::uint32 value) {
  set_has_modifiers();
  modifiers_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgMouseMove.modifiers)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMouseLeave::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMouseLeave::CMsgMouseLeave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgMouseLeave)
}
CMsgMouseLeave::CMsgMouseLeave(const CMsgMouseLeave& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgMouseLeave)
}

void CMsgMouseLeave::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgMouseLeave::~CMsgMouseLeave() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgMouseLeave)
  SharedDtor();
}

void CMsgMouseLeave::SharedDtor() {
}

void CMsgMouseLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMouseLeave::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgMouseLeave& CMsgMouseLeave::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgMouseLeave* CMsgMouseLeave::New(::google::protobuf::Arena* arena) const {
  CMsgMouseLeave* n = new CMsgMouseLeave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgMouseLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgMouseLeave)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgMouseLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgMouseLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgMouseLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgMouseLeave)
  return false;
#undef DO_
}

void CMsgMouseLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgMouseLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgMouseLeave)
}

::google::protobuf::uint8* CMsgMouseLeave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgMouseLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgMouseLeave)
  return target;
}

size_t CMsgMouseLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgMouseLeave)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMouseLeave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgMouseLeave)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMouseLeave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgMouseLeave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgMouseLeave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgMouseLeave)
    MergeFrom(*source);
  }
}

void CMsgMouseLeave::MergeFrom(const CMsgMouseLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgMouseLeave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgMouseLeave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgMouseLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseLeave::CopyFrom(const CMsgMouseLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgMouseLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseLeave::IsInitialized() const {
  return true;
}

void CMsgMouseLeave::Swap(CMsgMouseLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMouseLeave::InternalSwap(CMsgMouseLeave* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgMouseLeave::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgMouseLeave

// optional uint32 browser_handle = 1;
bool CMsgMouseLeave::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgMouseLeave::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgMouseLeave::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgMouseLeave::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgMouseLeave::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgMouseLeave.browser_handle)
  return browser_handle_;
}
void CMsgMouseLeave::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgMouseLeave.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBrowserCreate::kRequestIdFieldNumber;
const int CMsgBrowserCreate::kUseragentFieldNumber;
const int CMsgBrowserCreate::kUserCssFieldNumber;
const int CMsgBrowserCreate::kNativeDropdownsFieldNumber;
const int CMsgBrowserCreate::kDpiScalingFieldNumber;
const int CMsgBrowserCreate::kOffscreenFieldNumber;
const int CMsgBrowserCreate::kInitialWidthFieldNumber;
const int CMsgBrowserCreate::kInitialHeightFieldNumber;
const int CMsgBrowserCreate::kWindowIconFieldNumber;
const int CMsgBrowserCreate::kBorderlessFieldNumber;
const int CMsgBrowserCreate::kVroverlayKeyFieldNumber;
const int CMsgBrowserCreate::kBrowserTypeFieldNumber;
const int CMsgBrowserCreate::kInitialTopFieldNumber;
const int CMsgBrowserCreate::kInitialLeftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBrowserCreate::CMsgBrowserCreate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgBrowserCreate)
}
CMsgBrowserCreate::CMsgBrowserCreate(const CMsgBrowserCreate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  useragent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_useragent()) {
    useragent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useragent_);
  }
  user_css_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_css()) {
    user_css_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_css_);
  }
  window_icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_window_icon()) {
    window_icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.window_icon_);
  }
  vroverlay_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vroverlay_key()) {
    vroverlay_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vroverlay_key_);
  }
  ::memcpy(&request_id_, &from.request_id_,
    reinterpret_cast<char*>(&initial_top_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(initial_top_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgBrowserCreate)
}

void CMsgBrowserCreate::SharedCtor() {
  _cached_size_ = 0;
  useragent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_css_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  window_icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vroverlay_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_id_, 0, reinterpret_cast<char*>(&browser_type_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(browser_type_));
  initial_left_ = -1;
  offscreen_ = true;
  initial_top_ = -1;
}

CMsgBrowserCreate::~CMsgBrowserCreate() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgBrowserCreate)
  SharedDtor();
}

void CMsgBrowserCreate::SharedDtor() {
  useragent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_css_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  window_icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vroverlay_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgBrowserCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBrowserCreate::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBrowserCreate& CMsgBrowserCreate::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBrowserCreate* CMsgBrowserCreate::New(::google::protobuf::Arena* arena) const {
  CMsgBrowserCreate* n = new CMsgBrowserCreate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBrowserCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgBrowserCreate)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_useragent()) {
      GOOGLE_DCHECK(!useragent_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*useragent_.UnsafeRawStringPointer())->clear();
    }
    if (has_user_css()) {
      GOOGLE_DCHECK(!user_css_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_css_.UnsafeRawStringPointer())->clear();
    }
    if (has_window_icon()) {
      GOOGLE_DCHECK(!window_icon_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*window_icon_.UnsafeRawStringPointer())->clear();
    }
    if (has_vroverlay_key()) {
      GOOGLE_DCHECK(!vroverlay_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vroverlay_key_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&request_id_, 0, reinterpret_cast<char*>(&native_dropdowns_) -
      reinterpret_cast<char*>(&request_id_) + sizeof(native_dropdowns_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&borderless_, 0, reinterpret_cast<char*>(&browser_type_) -
      reinterpret_cast<char*>(&borderless_) + sizeof(browser_type_));
    initial_left_ = -1;
    offscreen_ = true;
    initial_top_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBrowserCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgBrowserCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string useragent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useragent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->useragent().data(), this->useragent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserCreate.useragent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_css = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_css()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_css().data(), this->user_css().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserCreate.user_css");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool native_dropdowns = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_native_dropdowns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &native_dropdowns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dpi_scaling = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_dpi_scaling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dpi_scaling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool offscreen = 8 [default = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_offscreen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &offscreen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 initial_width = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_initial_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 initial_height = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_initial_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string window_icon = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_window_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->window_icon().data(), this->window_icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserCreate.window_icon");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool borderless = 12 [default = false];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_borderless();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &borderless_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vroverlay_key = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vroverlay_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vroverlay_key().data(), this->vroverlay_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserCreate.vroverlay_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 browser_type = 14 [default = 0];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_browser_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 initial_top = 15 [default = -1];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_initial_top();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initial_top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 initial_left = 16 [default = -1];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_initial_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initial_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgBrowserCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgBrowserCreate)
  return false;
#undef DO_
}

void CMsgBrowserCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgBrowserCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // optional string useragent = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useragent().data(), this->useragent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserCreate.useragent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->useragent(), output);
  }

  // optional string user_css = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_css().data(), this->user_css().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserCreate.user_css");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->user_css(), output);
  }

  // optional bool native_dropdowns = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->native_dropdowns(), output);
  }

  // optional float dpi_scaling = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->dpi_scaling(), output);
  }

  // optional bool offscreen = 8 [default = true];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->offscreen(), output);
  }

  // optional uint32 initial_width = 9 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->initial_width(), output);
  }

  // optional uint32 initial_height = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->initial_height(), output);
  }

  // optional string window_icon = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->window_icon().data(), this->window_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserCreate.window_icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->window_icon(), output);
  }

  // optional bool borderless = 12 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->borderless(), output);
  }

  // optional string vroverlay_key = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vroverlay_key().data(), this->vroverlay_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserCreate.vroverlay_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->vroverlay_key(), output);
  }

  // optional uint32 browser_type = 14 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->browser_type(), output);
  }

  // optional int32 initial_top = 15 [default = -1];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->initial_top(), output);
  }

  // optional int32 initial_left = 16 [default = -1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->initial_left(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgBrowserCreate)
}

::google::protobuf::uint8* CMsgBrowserCreate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgBrowserCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // optional string useragent = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useragent().data(), this->useragent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserCreate.useragent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->useragent(), target);
  }

  // optional string user_css = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_css().data(), this->user_css().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserCreate.user_css");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user_css(), target);
  }

  // optional bool native_dropdowns = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->native_dropdowns(), target);
  }

  // optional float dpi_scaling = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->dpi_scaling(), target);
  }

  // optional bool offscreen = 8 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->offscreen(), target);
  }

  // optional uint32 initial_width = 9 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->initial_width(), target);
  }

  // optional uint32 initial_height = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->initial_height(), target);
  }

  // optional string window_icon = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->window_icon().data(), this->window_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserCreate.window_icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->window_icon(), target);
  }

  // optional bool borderless = 12 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->borderless(), target);
  }

  // optional string vroverlay_key = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vroverlay_key().data(), this->vroverlay_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserCreate.vroverlay_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->vroverlay_key(), target);
  }

  // optional uint32 browser_type = 14 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->browser_type(), target);
  }

  // optional int32 initial_top = 15 [default = -1];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->initial_top(), target);
  }

  // optional int32 initial_left = 16 [default = -1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->initial_left(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgBrowserCreate)
  return target;
}

size_t CMsgBrowserCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgBrowserCreate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string useragent = 3;
    if (has_useragent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->useragent());
    }

    // optional string user_css = 5;
    if (has_user_css()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_css());
    }

    // optional string window_icon = 11;
    if (has_window_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->window_icon());
    }

    // optional string vroverlay_key = 13;
    if (has_vroverlay_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vroverlay_key());
    }

    // optional uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

    // optional float dpi_scaling = 7;
    if (has_dpi_scaling()) {
      total_size += 1 + 4;
    }

    // optional uint32 initial_width = 9 [default = 0];
    if (has_initial_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_width());
    }

    // optional bool native_dropdowns = 6;
    if (has_native_dropdowns()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional bool borderless = 12 [default = false];
    if (has_borderless()) {
      total_size += 1 + 1;
    }

    // optional uint32 initial_height = 10 [default = 0];
    if (has_initial_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_height());
    }

    // optional uint32 browser_type = 14 [default = 0];
    if (has_browser_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_type());
    }

    // optional int32 initial_left = 16 [default = -1];
    if (has_initial_left()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->initial_left());
    }

    // optional bool offscreen = 8 [default = true];
    if (has_offscreen()) {
      total_size += 1 + 1;
    }

    // optional int32 initial_top = 15 [default = -1];
    if (has_initial_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->initial_top());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBrowserCreate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgBrowserCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserCreate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBrowserCreate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgBrowserCreate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgBrowserCreate)
    MergeFrom(*source);
  }
}

void CMsgBrowserCreate::MergeFrom(const CMsgBrowserCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgBrowserCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_useragent();
      useragent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useragent_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_user_css();
      user_css_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_css_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_window_icon();
      window_icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.window_icon_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_vroverlay_key();
      vroverlay_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vroverlay_key_);
    }
    if (cached_has_bits & 0x00000010u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      dpi_scaling_ = from.dpi_scaling_;
    }
    if (cached_has_bits & 0x00000040u) {
      initial_width_ = from.initial_width_;
    }
    if (cached_has_bits & 0x00000080u) {
      native_dropdowns_ = from.native_dropdowns_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      borderless_ = from.borderless_;
    }
    if (cached_has_bits & 0x00000200u) {
      initial_height_ = from.initial_height_;
    }
    if (cached_has_bits & 0x00000400u) {
      browser_type_ = from.browser_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      initial_left_ = from.initial_left_;
    }
    if (cached_has_bits & 0x00001000u) {
      offscreen_ = from.offscreen_;
    }
    if (cached_has_bits & 0x00002000u) {
      initial_top_ = from.initial_top_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBrowserCreate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgBrowserCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserCreate::CopyFrom(const CMsgBrowserCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgBrowserCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserCreate::IsInitialized() const {
  return true;
}

void CMsgBrowserCreate::Swap(CMsgBrowserCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBrowserCreate::InternalSwap(CMsgBrowserCreate* other) {
  useragent_.Swap(&other->useragent_);
  user_css_.Swap(&other->user_css_);
  window_icon_.Swap(&other->window_icon_);
  vroverlay_key_.Swap(&other->vroverlay_key_);
  std::swap(request_id_, other->request_id_);
  std::swap(dpi_scaling_, other->dpi_scaling_);
  std::swap(initial_width_, other->initial_width_);
  std::swap(native_dropdowns_, other->native_dropdowns_);
  std::swap(borderless_, other->borderless_);
  std::swap(initial_height_, other->initial_height_);
  std::swap(browser_type_, other->browser_type_);
  std::swap(initial_left_, other->initial_left_);
  std::swap(offscreen_, other->offscreen_);
  std::swap(initial_top_, other->initial_top_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBrowserCreate::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBrowserCreate

// optional uint32 request_id = 1;
bool CMsgBrowserCreate::has_request_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgBrowserCreate::set_has_request_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgBrowserCreate::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgBrowserCreate::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
::google::protobuf::uint32 CMsgBrowserCreate::request_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserCreate.request_id)
  return request_id_;
}
void CMsgBrowserCreate::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserCreate.request_id)
}

// optional string useragent = 3;
bool CMsgBrowserCreate::has_useragent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBrowserCreate::set_has_useragent() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBrowserCreate::clear_has_useragent() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBrowserCreate::clear_useragent() {
  useragent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_useragent();
}
const ::std::string& CMsgBrowserCreate::useragent() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserCreate.useragent)
  return useragent_.GetNoArena();
}
void CMsgBrowserCreate::set_useragent(const ::std::string& value) {
  set_has_useragent();
  useragent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserCreate.useragent)
}
#if LANG_CXX11
void CMsgBrowserCreate::set_useragent(::std::string&& value) {
  set_has_useragent();
  useragent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgBrowserCreate.useragent)
}
#endif
void CMsgBrowserCreate::set_useragent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_useragent();
  useragent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgBrowserCreate.useragent)
}
void CMsgBrowserCreate::set_useragent(const char* value, size_t size) {
  set_has_useragent();
  useragent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgBrowserCreate.useragent)
}
::std::string* CMsgBrowserCreate::mutable_useragent() {
  set_has_useragent();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgBrowserCreate.useragent)
  return useragent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgBrowserCreate::release_useragent() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgBrowserCreate.useragent)
  clear_has_useragent();
  return useragent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgBrowserCreate::set_allocated_useragent(::std::string* useragent) {
  if (useragent != NULL) {
    set_has_useragent();
  } else {
    clear_has_useragent();
  }
  useragent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), useragent);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgBrowserCreate.useragent)
}

// optional string user_css = 5;
bool CMsgBrowserCreate::has_user_css() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBrowserCreate::set_has_user_css() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBrowserCreate::clear_has_user_css() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBrowserCreate::clear_user_css() {
  user_css_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_css();
}
const ::std::string& CMsgBrowserCreate::user_css() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserCreate.user_css)
  return user_css_.GetNoArena();
}
void CMsgBrowserCreate::set_user_css(const ::std::string& value) {
  set_has_user_css();
  user_css_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserCreate.user_css)
}
#if LANG_CXX11
void CMsgBrowserCreate::set_user_css(::std::string&& value) {
  set_has_user_css();
  user_css_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgBrowserCreate.user_css)
}
#endif
void CMsgBrowserCreate::set_user_css(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_css();
  user_css_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgBrowserCreate.user_css)
}
void CMsgBrowserCreate::set_user_css(const char* value, size_t size) {
  set_has_user_css();
  user_css_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgBrowserCreate.user_css)
}
::std::string* CMsgBrowserCreate::mutable_user_css() {
  set_has_user_css();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgBrowserCreate.user_css)
  return user_css_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgBrowserCreate::release_user_css() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgBrowserCreate.user_css)
  clear_has_user_css();
  return user_css_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgBrowserCreate::set_allocated_user_css(::std::string* user_css) {
  if (user_css != NULL) {
    set_has_user_css();
  } else {
    clear_has_user_css();
  }
  user_css_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_css);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgBrowserCreate.user_css)
}

// optional bool native_dropdowns = 6;
bool CMsgBrowserCreate::has_native_dropdowns() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgBrowserCreate::set_has_native_dropdowns() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgBrowserCreate::clear_has_native_dropdowns() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgBrowserCreate::clear_native_dropdowns() {
  native_dropdowns_ = false;
  clear_has_native_dropdowns();
}
bool CMsgBrowserCreate::native_dropdowns() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserCreate.native_dropdowns)
  return native_dropdowns_;
}
void CMsgBrowserCreate::set_native_dropdowns(bool value) {
  set_has_native_dropdowns();
  native_dropdowns_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserCreate.native_dropdowns)
}

// optional float dpi_scaling = 7;
bool CMsgBrowserCreate::has_dpi_scaling() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgBrowserCreate::set_has_dpi_scaling() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgBrowserCreate::clear_has_dpi_scaling() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgBrowserCreate::clear_dpi_scaling() {
  dpi_scaling_ = 0;
  clear_has_dpi_scaling();
}
float CMsgBrowserCreate::dpi_scaling() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserCreate.dpi_scaling)
  return dpi_scaling_;
}
void CMsgBrowserCreate::set_dpi_scaling(float value) {
  set_has_dpi_scaling();
  dpi_scaling_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserCreate.dpi_scaling)
}

// optional bool offscreen = 8 [default = true];
bool CMsgBrowserCreate::has_offscreen() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgBrowserCreate::set_has_offscreen() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgBrowserCreate::clear_has_offscreen() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgBrowserCreate::clear_offscreen() {
  offscreen_ = true;
  clear_has_offscreen();
}
bool CMsgBrowserCreate::offscreen() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserCreate.offscreen)
  return offscreen_;
}
void CMsgBrowserCreate::set_offscreen(bool value) {
  set_has_offscreen();
  offscreen_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserCreate.offscreen)
}

// optional uint32 initial_width = 9 [default = 0];
bool CMsgBrowserCreate::has_initial_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgBrowserCreate::set_has_initial_width() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgBrowserCreate::clear_has_initial_width() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgBrowserCreate::clear_initial_width() {
  initial_width_ = 0u;
  clear_has_initial_width();
}
::google::protobuf::uint32 CMsgBrowserCreate::initial_width() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserCreate.initial_width)
  return initial_width_;
}
void CMsgBrowserCreate::set_initial_width(::google::protobuf::uint32 value) {
  set_has_initial_width();
  initial_width_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserCreate.initial_width)
}

// optional uint32 initial_height = 10 [default = 0];
bool CMsgBrowserCreate::has_initial_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgBrowserCreate::set_has_initial_height() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgBrowserCreate::clear_has_initial_height() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgBrowserCreate::clear_initial_height() {
  initial_height_ = 0u;
  clear_has_initial_height();
}
::google::protobuf::uint32 CMsgBrowserCreate::initial_height() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserCreate.initial_height)
  return initial_height_;
}
void CMsgBrowserCreate::set_initial_height(::google::protobuf::uint32 value) {
  set_has_initial_height();
  initial_height_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserCreate.initial_height)
}

// optional string window_icon = 11;
bool CMsgBrowserCreate::has_window_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgBrowserCreate::set_has_window_icon() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgBrowserCreate::clear_has_window_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgBrowserCreate::clear_window_icon() {
  window_icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_window_icon();
}
const ::std::string& CMsgBrowserCreate::window_icon() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserCreate.window_icon)
  return window_icon_.GetNoArena();
}
void CMsgBrowserCreate::set_window_icon(const ::std::string& value) {
  set_has_window_icon();
  window_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserCreate.window_icon)
}
#if LANG_CXX11
void CMsgBrowserCreate::set_window_icon(::std::string&& value) {
  set_has_window_icon();
  window_icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgBrowserCreate.window_icon)
}
#endif
void CMsgBrowserCreate::set_window_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_window_icon();
  window_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgBrowserCreate.window_icon)
}
void CMsgBrowserCreate::set_window_icon(const char* value, size_t size) {
  set_has_window_icon();
  window_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgBrowserCreate.window_icon)
}
::std::string* CMsgBrowserCreate::mutable_window_icon() {
  set_has_window_icon();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgBrowserCreate.window_icon)
  return window_icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgBrowserCreate::release_window_icon() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgBrowserCreate.window_icon)
  clear_has_window_icon();
  return window_icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgBrowserCreate::set_allocated_window_icon(::std::string* window_icon) {
  if (window_icon != NULL) {
    set_has_window_icon();
  } else {
    clear_has_window_icon();
  }
  window_icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), window_icon);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgBrowserCreate.window_icon)
}

// optional bool borderless = 12 [default = false];
bool CMsgBrowserCreate::has_borderless() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgBrowserCreate::set_has_borderless() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgBrowserCreate::clear_has_borderless() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgBrowserCreate::clear_borderless() {
  borderless_ = false;
  clear_has_borderless();
}
bool CMsgBrowserCreate::borderless() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserCreate.borderless)
  return borderless_;
}
void CMsgBrowserCreate::set_borderless(bool value) {
  set_has_borderless();
  borderless_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserCreate.borderless)
}

// optional string vroverlay_key = 13;
bool CMsgBrowserCreate::has_vroverlay_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgBrowserCreate::set_has_vroverlay_key() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgBrowserCreate::clear_has_vroverlay_key() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgBrowserCreate::clear_vroverlay_key() {
  vroverlay_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vroverlay_key();
}
const ::std::string& CMsgBrowserCreate::vroverlay_key() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserCreate.vroverlay_key)
  return vroverlay_key_.GetNoArena();
}
void CMsgBrowserCreate::set_vroverlay_key(const ::std::string& value) {
  set_has_vroverlay_key();
  vroverlay_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserCreate.vroverlay_key)
}
#if LANG_CXX11
void CMsgBrowserCreate::set_vroverlay_key(::std::string&& value) {
  set_has_vroverlay_key();
  vroverlay_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgBrowserCreate.vroverlay_key)
}
#endif
void CMsgBrowserCreate::set_vroverlay_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vroverlay_key();
  vroverlay_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgBrowserCreate.vroverlay_key)
}
void CMsgBrowserCreate::set_vroverlay_key(const char* value, size_t size) {
  set_has_vroverlay_key();
  vroverlay_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgBrowserCreate.vroverlay_key)
}
::std::string* CMsgBrowserCreate::mutable_vroverlay_key() {
  set_has_vroverlay_key();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgBrowserCreate.vroverlay_key)
  return vroverlay_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgBrowserCreate::release_vroverlay_key() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgBrowserCreate.vroverlay_key)
  clear_has_vroverlay_key();
  return vroverlay_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgBrowserCreate::set_allocated_vroverlay_key(::std::string* vroverlay_key) {
  if (vroverlay_key != NULL) {
    set_has_vroverlay_key();
  } else {
    clear_has_vroverlay_key();
  }
  vroverlay_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vroverlay_key);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgBrowserCreate.vroverlay_key)
}

// optional uint32 browser_type = 14 [default = 0];
bool CMsgBrowserCreate::has_browser_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgBrowserCreate::set_has_browser_type() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgBrowserCreate::clear_has_browser_type() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgBrowserCreate::clear_browser_type() {
  browser_type_ = 0u;
  clear_has_browser_type();
}
::google::protobuf::uint32 CMsgBrowserCreate::browser_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserCreate.browser_type)
  return browser_type_;
}
void CMsgBrowserCreate::set_browser_type(::google::protobuf::uint32 value) {
  set_has_browser_type();
  browser_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserCreate.browser_type)
}

// optional int32 initial_top = 15 [default = -1];
bool CMsgBrowserCreate::has_initial_top() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgBrowserCreate::set_has_initial_top() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgBrowserCreate::clear_has_initial_top() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgBrowserCreate::clear_initial_top() {
  initial_top_ = -1;
  clear_has_initial_top();
}
::google::protobuf::int32 CMsgBrowserCreate::initial_top() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserCreate.initial_top)
  return initial_top_;
}
void CMsgBrowserCreate::set_initial_top(::google::protobuf::int32 value) {
  set_has_initial_top();
  initial_top_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserCreate.initial_top)
}

// optional int32 initial_left = 16 [default = -1];
bool CMsgBrowserCreate::has_initial_left() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgBrowserCreate::set_has_initial_left() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgBrowserCreate::clear_has_initial_left() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgBrowserCreate::clear_initial_left() {
  initial_left_ = -1;
  clear_has_initial_left();
}
::google::protobuf::int32 CMsgBrowserCreate::initial_left() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserCreate.initial_left)
  return initial_left_;
}
void CMsgBrowserCreate::set_initial_left(::google::protobuf::int32 value) {
  set_has_initial_left();
  initial_left_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserCreate.initial_left)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBrowserCreateResponse::kBrowserHandleFieldNumber;
const int CMsgBrowserCreateResponse::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBrowserCreateResponse::CMsgBrowserCreateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgBrowserCreateResponse)
}
CMsgBrowserCreateResponse::CMsgBrowserCreateResponse(const CMsgBrowserCreateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&request_id_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(request_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgBrowserCreateResponse)
}

void CMsgBrowserCreateResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&request_id_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(request_id_));
}

CMsgBrowserCreateResponse::~CMsgBrowserCreateResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgBrowserCreateResponse)
  SharedDtor();
}

void CMsgBrowserCreateResponse::SharedDtor() {
}

void CMsgBrowserCreateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBrowserCreateResponse::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBrowserCreateResponse& CMsgBrowserCreateResponse::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBrowserCreateResponse* CMsgBrowserCreateResponse::New(::google::protobuf::Arena* arena) const {
  CMsgBrowserCreateResponse* n = new CMsgBrowserCreateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBrowserCreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgBrowserCreateResponse)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&request_id_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(request_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBrowserCreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgBrowserCreateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 request_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgBrowserCreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgBrowserCreateResponse)
  return false;
#undef DO_
}

void CMsgBrowserCreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgBrowserCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 request_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgBrowserCreateResponse)
}

::google::protobuf::uint8* CMsgBrowserCreateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgBrowserCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 request_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgBrowserCreateResponse)
  return target;
}

size_t CMsgBrowserCreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgBrowserCreateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 request_id = 2;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBrowserCreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgBrowserCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserCreateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBrowserCreateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgBrowserCreateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgBrowserCreateResponse)
    MergeFrom(*source);
  }
}

void CMsgBrowserCreateResponse::MergeFrom(const CMsgBrowserCreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgBrowserCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_ = from.request_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBrowserCreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgBrowserCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserCreateResponse::CopyFrom(const CMsgBrowserCreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgBrowserCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserCreateResponse::IsInitialized() const {
  return true;
}

void CMsgBrowserCreateResponse::Swap(CMsgBrowserCreateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBrowserCreateResponse::InternalSwap(CMsgBrowserCreateResponse* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(request_id_, other->request_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBrowserCreateResponse::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBrowserCreateResponse

// optional uint32 browser_handle = 1;
bool CMsgBrowserCreateResponse::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBrowserCreateResponse::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBrowserCreateResponse::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBrowserCreateResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgBrowserCreateResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserCreateResponse.browser_handle)
  return browser_handle_;
}
void CMsgBrowserCreateResponse::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserCreateResponse.browser_handle)
}

// optional uint32 request_id = 2;
bool CMsgBrowserCreateResponse::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBrowserCreateResponse::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBrowserCreateResponse::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBrowserCreateResponse::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
::google::protobuf::uint32 CMsgBrowserCreateResponse::request_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserCreateResponse.request_id)
  return request_id_;
}
void CMsgBrowserCreateResponse::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserCreateResponse.request_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBrowserRemove::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBrowserRemove::CMsgBrowserRemove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgBrowserRemove)
}
CMsgBrowserRemove::CMsgBrowserRemove(const CMsgBrowserRemove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgBrowserRemove)
}

void CMsgBrowserRemove::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgBrowserRemove::~CMsgBrowserRemove() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgBrowserRemove)
  SharedDtor();
}

void CMsgBrowserRemove::SharedDtor() {
}

void CMsgBrowserRemove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBrowserRemove::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBrowserRemove& CMsgBrowserRemove::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBrowserRemove* CMsgBrowserRemove::New(::google::protobuf::Arena* arena) const {
  CMsgBrowserRemove* n = new CMsgBrowserRemove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBrowserRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgBrowserRemove)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBrowserRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgBrowserRemove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgBrowserRemove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgBrowserRemove)
  return false;
#undef DO_
}

void CMsgBrowserRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgBrowserRemove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgBrowserRemove)
}

::google::protobuf::uint8* CMsgBrowserRemove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgBrowserRemove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgBrowserRemove)
  return target;
}

size_t CMsgBrowserRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgBrowserRemove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBrowserRemove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgBrowserRemove)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserRemove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBrowserRemove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgBrowserRemove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgBrowserRemove)
    MergeFrom(*source);
  }
}

void CMsgBrowserRemove::MergeFrom(const CMsgBrowserRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgBrowserRemove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgBrowserRemove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgBrowserRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserRemove::CopyFrom(const CMsgBrowserRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgBrowserRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserRemove::IsInitialized() const {
  return true;
}

void CMsgBrowserRemove::Swap(CMsgBrowserRemove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBrowserRemove::InternalSwap(CMsgBrowserRemove* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBrowserRemove::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBrowserRemove

// optional uint32 browser_handle = 1;
bool CMsgBrowserRemove::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBrowserRemove::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBrowserRemove::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBrowserRemove::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgBrowserRemove::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserRemove.browser_handle)
  return browser_handle_;
}
void CMsgBrowserRemove::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserRemove.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetLocalFileRequestMapping_AdditionalRoute::kRelativeUrlFieldNumber;
const int CMsgSetLocalFileRequestMapping_AdditionalRoute::kLocalPathFieldNumber;
const int CMsgSetLocalFileRequestMapping_AdditionalRoute::kAllowedExtensionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetLocalFileRequestMapping_AdditionalRoute::CMsgSetLocalFileRequestMapping_AdditionalRoute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
}
CMsgSetLocalFileRequestMapping_AdditionalRoute::CMsgSetLocalFileRequestMapping_AdditionalRoute(const CMsgSetLocalFileRequestMapping_AdditionalRoute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  relative_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_relative_url()) {
    relative_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relative_url_);
  }
  local_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_local_path()) {
    local_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_path_);
  }
  allowed_extensions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_allowed_extensions()) {
    allowed_extensions_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.allowed_extensions_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::SharedCtor() {
  _cached_size_ = 0;
  relative_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  allowed_extensions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgSetLocalFileRequestMapping_AdditionalRoute::~CMsgSetLocalFileRequestMapping_AdditionalRoute() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  SharedDtor();
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::SharedDtor() {
  relative_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  allowed_extensions_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetLocalFileRequestMapping_AdditionalRoute::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSetLocalFileRequestMapping_AdditionalRoute& CMsgSetLocalFileRequestMapping_AdditionalRoute::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSetLocalFileRequestMapping_AdditionalRoute* CMsgSetLocalFileRequestMapping_AdditionalRoute::New(::google::protobuf::Arena* arena) const {
  CMsgSetLocalFileRequestMapping_AdditionalRoute* n = new CMsgSetLocalFileRequestMapping_AdditionalRoute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_relative_url()) {
      GOOGLE_DCHECK(!relative_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*relative_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_local_path()) {
      GOOGLE_DCHECK(!local_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*local_path_.UnsafeRawStringPointer())->clear();
    }
    if (has_allowed_extensions()) {
      GOOGLE_DCHECK(!allowed_extensions_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*allowed_extensions_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSetLocalFileRequestMapping_AdditionalRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string relative_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relative_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->relative_url().data(), this->relative_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.relative_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string local_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->local_path().data(), this->local_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.local_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string allowed_extensions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_allowed_extensions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->allowed_extensions().data(), this->allowed_extensions().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.allowed_extensions");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  return false;
#undef DO_
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string relative_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relative_url().data(), this->relative_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.relative_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->relative_url(), output);
  }

  // optional string local_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_path().data(), this->local_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.local_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->local_path(), output);
  }

  // optional string allowed_extensions = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->allowed_extensions().data(), this->allowed_extensions().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.allowed_extensions");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->allowed_extensions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
}

::google::protobuf::uint8* CMsgSetLocalFileRequestMapping_AdditionalRoute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string relative_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relative_url().data(), this->relative_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.relative_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->relative_url(), target);
  }

  // optional string local_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_path().data(), this->local_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.local_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->local_path(), target);
  }

  // optional string allowed_extensions = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->allowed_extensions().data(), this->allowed_extensions().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.allowed_extensions");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->allowed_extensions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  return target;
}

size_t CMsgSetLocalFileRequestMapping_AdditionalRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string relative_url = 1;
    if (has_relative_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relative_url());
    }

    // optional string local_path = 2;
    if (has_local_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_path());
    }

    // optional string allowed_extensions = 3;
    if (has_allowed_extensions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->allowed_extensions());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetLocalFileRequestMapping_AdditionalRoute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSetLocalFileRequestMapping_AdditionalRoute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
    MergeFrom(*source);
  }
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::MergeFrom(const CMsgSetLocalFileRequestMapping_AdditionalRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_relative_url();
      relative_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relative_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_local_path();
      local_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_allowed_extensions();
      allowed_extensions_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.allowed_extensions_);
    }
  }
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::CopyFrom(const CMsgSetLocalFileRequestMapping_AdditionalRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetLocalFileRequestMapping_AdditionalRoute::IsInitialized() const {
  return true;
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::Swap(CMsgSetLocalFileRequestMapping_AdditionalRoute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetLocalFileRequestMapping_AdditionalRoute::InternalSwap(CMsgSetLocalFileRequestMapping_AdditionalRoute* other) {
  relative_url_.Swap(&other->relative_url_);
  local_path_.Swap(&other->local_path_);
  allowed_extensions_.Swap(&other->allowed_extensions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSetLocalFileRequestMapping_AdditionalRoute::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSetLocalFileRequestMapping_AdditionalRoute

// optional string relative_url = 1;
bool CMsgSetLocalFileRequestMapping_AdditionalRoute::has_relative_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_has_relative_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSetLocalFileRequestMapping_AdditionalRoute::clear_has_relative_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSetLocalFileRequestMapping_AdditionalRoute::clear_relative_url() {
  relative_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_relative_url();
}
const ::std::string& CMsgSetLocalFileRequestMapping_AdditionalRoute::relative_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.relative_url)
  return relative_url_.GetNoArena();
}
void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_relative_url(const ::std::string& value) {
  set_has_relative_url();
  relative_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.relative_url)
}
#if LANG_CXX11
void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_relative_url(::std::string&& value) {
  set_has_relative_url();
  relative_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.relative_url)
}
#endif
void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_relative_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_relative_url();
  relative_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.relative_url)
}
void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_relative_url(const char* value, size_t size) {
  set_has_relative_url();
  relative_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.relative_url)
}
::std::string* CMsgSetLocalFileRequestMapping_AdditionalRoute::mutable_relative_url() {
  set_has_relative_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.relative_url)
  return relative_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSetLocalFileRequestMapping_AdditionalRoute::release_relative_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.relative_url)
  clear_has_relative_url();
  return relative_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_allocated_relative_url(::std::string* relative_url) {
  if (relative_url != NULL) {
    set_has_relative_url();
  } else {
    clear_has_relative_url();
  }
  relative_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), relative_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.relative_url)
}

// optional string local_path = 2;
bool CMsgSetLocalFileRequestMapping_AdditionalRoute::has_local_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_has_local_path() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSetLocalFileRequestMapping_AdditionalRoute::clear_has_local_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSetLocalFileRequestMapping_AdditionalRoute::clear_local_path() {
  local_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_local_path();
}
const ::std::string& CMsgSetLocalFileRequestMapping_AdditionalRoute::local_path() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.local_path)
  return local_path_.GetNoArena();
}
void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_local_path(const ::std::string& value) {
  set_has_local_path();
  local_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.local_path)
}
#if LANG_CXX11
void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_local_path(::std::string&& value) {
  set_has_local_path();
  local_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.local_path)
}
#endif
void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_local_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_local_path();
  local_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.local_path)
}
void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_local_path(const char* value, size_t size) {
  set_has_local_path();
  local_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.local_path)
}
::std::string* CMsgSetLocalFileRequestMapping_AdditionalRoute::mutable_local_path() {
  set_has_local_path();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.local_path)
  return local_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSetLocalFileRequestMapping_AdditionalRoute::release_local_path() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.local_path)
  clear_has_local_path();
  return local_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_allocated_local_path(::std::string* local_path) {
  if (local_path != NULL) {
    set_has_local_path();
  } else {
    clear_has_local_path();
  }
  local_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_path);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.local_path)
}

// optional string allowed_extensions = 3;
bool CMsgSetLocalFileRequestMapping_AdditionalRoute::has_allowed_extensions() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_has_allowed_extensions() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSetLocalFileRequestMapping_AdditionalRoute::clear_has_allowed_extensions() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSetLocalFileRequestMapping_AdditionalRoute::clear_allowed_extensions() {
  allowed_extensions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_allowed_extensions();
}
const ::std::string& CMsgSetLocalFileRequestMapping_AdditionalRoute::allowed_extensions() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.allowed_extensions)
  return allowed_extensions_.GetNoArena();
}
void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_allowed_extensions(const ::std::string& value) {
  set_has_allowed_extensions();
  allowed_extensions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.allowed_extensions)
}
#if LANG_CXX11
void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_allowed_extensions(::std::string&& value) {
  set_has_allowed_extensions();
  allowed_extensions_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.allowed_extensions)
}
#endif
void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_allowed_extensions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_allowed_extensions();
  allowed_extensions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.allowed_extensions)
}
void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_allowed_extensions(const char* value, size_t size) {
  set_has_allowed_extensions();
  allowed_extensions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.allowed_extensions)
}
::std::string* CMsgSetLocalFileRequestMapping_AdditionalRoute::mutable_allowed_extensions() {
  set_has_allowed_extensions();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.allowed_extensions)
  return allowed_extensions_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSetLocalFileRequestMapping_AdditionalRoute::release_allowed_extensions() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.allowed_extensions)
  clear_has_allowed_extensions();
  return allowed_extensions_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_allocated_allowed_extensions(::std::string* allowed_extensions) {
  if (allowed_extensions != NULL) {
    set_has_allowed_extensions();
  } else {
    clear_has_allowed_extensions();
  }
  allowed_extensions_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), allowed_extensions);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.allowed_extensions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetLocalFileRequestMapping::kBrowserHandleFieldNumber;
const int CMsgSetLocalFileRequestMapping::kRequestUrlFieldNumber;
const int CMsgSetLocalFileRequestMapping::kDefaultLocalPathFieldNumber;
const int CMsgSetLocalFileRequestMapping::kRoutesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetLocalFileRequestMapping::CMsgSetLocalFileRequestMapping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetLocalFileRequestMapping)
}
CMsgSetLocalFileRequestMapping::CMsgSetLocalFileRequestMapping(const CMsgSetLocalFileRequestMapping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      routes_(from.routes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_url()) {
    request_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_url_);
  }
  default_local_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_default_local_path()) {
    default_local_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_local_path_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetLocalFileRequestMapping)
}

void CMsgSetLocalFileRequestMapping::SharedCtor() {
  _cached_size_ = 0;
  request_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_local_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgSetLocalFileRequestMapping::~CMsgSetLocalFileRequestMapping() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetLocalFileRequestMapping)
  SharedDtor();
}

void CMsgSetLocalFileRequestMapping::SharedDtor() {
  request_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_local_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSetLocalFileRequestMapping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetLocalFileRequestMapping::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSetLocalFileRequestMapping& CMsgSetLocalFileRequestMapping::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSetLocalFileRequestMapping* CMsgSetLocalFileRequestMapping::New(::google::protobuf::Arena* arena) const {
  CMsgSetLocalFileRequestMapping* n = new CMsgSetLocalFileRequestMapping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSetLocalFileRequestMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetLocalFileRequestMapping)
  routes_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_request_url()) {
      GOOGLE_DCHECK(!request_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*request_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_default_local_path()) {
      GOOGLE_DCHECK(!default_local_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*default_local_path_.UnsafeRawStringPointer())->clear();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSetLocalFileRequestMapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetLocalFileRequestMapping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_url().data(), this->request_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetLocalFileRequestMapping.request_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string default_local_path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_local_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->default_local_path().data(), this->default_local_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetLocalFileRequestMapping.default_local_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute routes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_routes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetLocalFileRequestMapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetLocalFileRequestMapping)
  return false;
#undef DO_
}

void CMsgSetLocalFileRequestMapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetLocalFileRequestMapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string request_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_url().data(), this->request_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetLocalFileRequestMapping.request_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->request_url(), output);
  }

  // optional string default_local_path = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_local_path().data(), this->default_local_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetLocalFileRequestMapping.default_local_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->default_local_path(), output);
  }

  // repeated .proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute routes = 4;
  for (unsigned int i = 0, n = this->routes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->routes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetLocalFileRequestMapping)
}

::google::protobuf::uint8* CMsgSetLocalFileRequestMapping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetLocalFileRequestMapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string request_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_url().data(), this->request_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetLocalFileRequestMapping.request_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request_url(), target);
  }

  // optional string default_local_path = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_local_path().data(), this->default_local_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetLocalFileRequestMapping.default_local_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->default_local_path(), target);
  }

  // repeated .proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute routes = 4;
  for (unsigned int i = 0, n = this->routes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->routes(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetLocalFileRequestMapping)
  return target;
}

size_t CMsgSetLocalFileRequestMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetLocalFileRequestMapping)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute routes = 4;
  {
    unsigned int count = this->routes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->routes(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string request_url = 2;
    if (has_request_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_url());
    }

    // optional string default_local_path = 3;
    if (has_default_local_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->default_local_path());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetLocalFileRequestMapping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetLocalFileRequestMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetLocalFileRequestMapping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSetLocalFileRequestMapping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetLocalFileRequestMapping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetLocalFileRequestMapping)
    MergeFrom(*source);
  }
}

void CMsgSetLocalFileRequestMapping::MergeFrom(const CMsgSetLocalFileRequestMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetLocalFileRequestMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routes_.MergeFrom(from.routes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_request_url();
      request_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_default_local_path();
      default_local_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_local_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetLocalFileRequestMapping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetLocalFileRequestMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetLocalFileRequestMapping::CopyFrom(const CMsgSetLocalFileRequestMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetLocalFileRequestMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetLocalFileRequestMapping::IsInitialized() const {
  return true;
}

void CMsgSetLocalFileRequestMapping::Swap(CMsgSetLocalFileRequestMapping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetLocalFileRequestMapping::InternalSwap(CMsgSetLocalFileRequestMapping* other) {
  routes_.InternalSwap(&other->routes_);
  request_url_.Swap(&other->request_url_);
  default_local_path_.Swap(&other->default_local_path_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSetLocalFileRequestMapping::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSetLocalFileRequestMapping

// optional uint32 browser_handle = 1;
bool CMsgSetLocalFileRequestMapping::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSetLocalFileRequestMapping::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSetLocalFileRequestMapping::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSetLocalFileRequestMapping::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgSetLocalFileRequestMapping::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetLocalFileRequestMapping.browser_handle)
  return browser_handle_;
}
void CMsgSetLocalFileRequestMapping::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetLocalFileRequestMapping.browser_handle)
}

// optional string request_url = 2;
bool CMsgSetLocalFileRequestMapping::has_request_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSetLocalFileRequestMapping::set_has_request_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSetLocalFileRequestMapping::clear_has_request_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSetLocalFileRequestMapping::clear_request_url() {
  request_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_url();
}
const ::std::string& CMsgSetLocalFileRequestMapping::request_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetLocalFileRequestMapping.request_url)
  return request_url_.GetNoArena();
}
void CMsgSetLocalFileRequestMapping::set_request_url(const ::std::string& value) {
  set_has_request_url();
  request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetLocalFileRequestMapping.request_url)
}
#if LANG_CXX11
void CMsgSetLocalFileRequestMapping::set_request_url(::std::string&& value) {
  set_has_request_url();
  request_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSetLocalFileRequestMapping.request_url)
}
#endif
void CMsgSetLocalFileRequestMapping::set_request_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_url();
  request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSetLocalFileRequestMapping.request_url)
}
void CMsgSetLocalFileRequestMapping::set_request_url(const char* value, size_t size) {
  set_has_request_url();
  request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSetLocalFileRequestMapping.request_url)
}
::std::string* CMsgSetLocalFileRequestMapping::mutable_request_url() {
  set_has_request_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSetLocalFileRequestMapping.request_url)
  return request_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSetLocalFileRequestMapping::release_request_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSetLocalFileRequestMapping.request_url)
  clear_has_request_url();
  return request_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSetLocalFileRequestMapping::set_allocated_request_url(::std::string* request_url) {
  if (request_url != NULL) {
    set_has_request_url();
  } else {
    clear_has_request_url();
  }
  request_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSetLocalFileRequestMapping.request_url)
}

// optional string default_local_path = 3;
bool CMsgSetLocalFileRequestMapping::has_default_local_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSetLocalFileRequestMapping::set_has_default_local_path() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSetLocalFileRequestMapping::clear_has_default_local_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSetLocalFileRequestMapping::clear_default_local_path() {
  default_local_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_default_local_path();
}
const ::std::string& CMsgSetLocalFileRequestMapping::default_local_path() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetLocalFileRequestMapping.default_local_path)
  return default_local_path_.GetNoArena();
}
void CMsgSetLocalFileRequestMapping::set_default_local_path(const ::std::string& value) {
  set_has_default_local_path();
  default_local_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetLocalFileRequestMapping.default_local_path)
}
#if LANG_CXX11
void CMsgSetLocalFileRequestMapping::set_default_local_path(::std::string&& value) {
  set_has_default_local_path();
  default_local_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSetLocalFileRequestMapping.default_local_path)
}
#endif
void CMsgSetLocalFileRequestMapping::set_default_local_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_default_local_path();
  default_local_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSetLocalFileRequestMapping.default_local_path)
}
void CMsgSetLocalFileRequestMapping::set_default_local_path(const char* value, size_t size) {
  set_has_default_local_path();
  default_local_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSetLocalFileRequestMapping.default_local_path)
}
::std::string* CMsgSetLocalFileRequestMapping::mutable_default_local_path() {
  set_has_default_local_path();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSetLocalFileRequestMapping.default_local_path)
  return default_local_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSetLocalFileRequestMapping::release_default_local_path() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSetLocalFileRequestMapping.default_local_path)
  clear_has_default_local_path();
  return default_local_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSetLocalFileRequestMapping::set_allocated_default_local_path(::std::string* default_local_path) {
  if (default_local_path != NULL) {
    set_has_default_local_path();
  } else {
    clear_has_default_local_path();
  }
  default_local_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_local_path);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSetLocalFileRequestMapping.default_local_path)
}

// repeated .proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute routes = 4;
int CMsgSetLocalFileRequestMapping::routes_size() const {
  return routes_.size();
}
void CMsgSetLocalFileRequestMapping::clear_routes() {
  routes_.Clear();
}
const ::proto::steam::CMsgSetLocalFileRequestMapping_AdditionalRoute& CMsgSetLocalFileRequestMapping::routes(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetLocalFileRequestMapping.routes)
  return routes_.Get(index);
}
::proto::steam::CMsgSetLocalFileRequestMapping_AdditionalRoute* CMsgSetLocalFileRequestMapping::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSetLocalFileRequestMapping.routes)
  return routes_.Mutable(index);
}
::proto::steam::CMsgSetLocalFileRequestMapping_AdditionalRoute* CMsgSetLocalFileRequestMapping::add_routes() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSetLocalFileRequestMapping.routes)
  return routes_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSetLocalFileRequestMapping_AdditionalRoute >*
CMsgSetLocalFileRequestMapping::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSetLocalFileRequestMapping.routes)
  return &routes_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSetLocalFileRequestMapping_AdditionalRoute >&
CMsgSetLocalFileRequestMapping::routes() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSetLocalFileRequestMapping.routes)
  return routes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBrowserErrorStrings::kBrowserHandleFieldNumber;
const int CMsgBrowserErrorStrings::kTitleFieldNumber;
const int CMsgBrowserErrorStrings::kHeaderFieldNumber;
const int CMsgBrowserErrorStrings::kCacheMissFieldNumber;
const int CMsgBrowserErrorStrings::kBadUrlFieldNumber;
const int CMsgBrowserErrorStrings::kConnectionProblemFieldNumber;
const int CMsgBrowserErrorStrings::kProxyProblemFieldNumber;
const int CMsgBrowserErrorStrings::kUnknownFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBrowserErrorStrings::CMsgBrowserErrorStrings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgBrowserErrorStrings)
}
CMsgBrowserErrorStrings::CMsgBrowserErrorStrings(const CMsgBrowserErrorStrings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_header()) {
    header_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_);
  }
  cache_miss_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cache_miss()) {
    cache_miss_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cache_miss_);
  }
  bad_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bad_url()) {
    bad_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bad_url_);
  }
  connection_problem_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_connection_problem()) {
    connection_problem_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_problem_);
  }
  proxy_problem_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_proxy_problem()) {
    proxy_problem_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_problem_);
  }
  unknown_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_unknown()) {
    unknown_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unknown_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgBrowserErrorStrings)
}

void CMsgBrowserErrorStrings::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cache_miss_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bad_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_problem_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_problem_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unknown_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgBrowserErrorStrings::~CMsgBrowserErrorStrings() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgBrowserErrorStrings)
  SharedDtor();
}

void CMsgBrowserErrorStrings::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cache_miss_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bad_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_problem_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_problem_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unknown_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgBrowserErrorStrings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBrowserErrorStrings::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBrowserErrorStrings& CMsgBrowserErrorStrings::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBrowserErrorStrings* CMsgBrowserErrorStrings::New(::google::protobuf::Arena* arena) const {
  CMsgBrowserErrorStrings* n = new CMsgBrowserErrorStrings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBrowserErrorStrings::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgBrowserErrorStrings)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_header()) {
      GOOGLE_DCHECK(!header_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*header_.UnsafeRawStringPointer())->clear();
    }
    if (has_cache_miss()) {
      GOOGLE_DCHECK(!cache_miss_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cache_miss_.UnsafeRawStringPointer())->clear();
    }
    if (has_bad_url()) {
      GOOGLE_DCHECK(!bad_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bad_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_connection_problem()) {
      GOOGLE_DCHECK(!connection_problem_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*connection_problem_.UnsafeRawStringPointer())->clear();
    }
    if (has_proxy_problem()) {
      GOOGLE_DCHECK(!proxy_problem_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*proxy_problem_.UnsafeRawStringPointer())->clear();
    }
    if (has_unknown()) {
      GOOGLE_DCHECK(!unknown_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*unknown_.UnsafeRawStringPointer())->clear();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBrowserErrorStrings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgBrowserErrorStrings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserErrorStrings.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string header = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->header().data(), this->header().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserErrorStrings.header");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cache_miss = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cache_miss()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cache_miss().data(), this->cache_miss().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserErrorStrings.cache_miss");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bad_url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bad_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bad_url().data(), this->bad_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserErrorStrings.bad_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string connection_problem = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connection_problem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->connection_problem().data(), this->connection_problem().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserErrorStrings.connection_problem");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string proxy_problem = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxy_problem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proxy_problem().data(), this->proxy_problem().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserErrorStrings.proxy_problem");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string unknown = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unknown()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unknown().data(), this->unknown().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserErrorStrings.unknown");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgBrowserErrorStrings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgBrowserErrorStrings)
  return false;
#undef DO_
}

void CMsgBrowserErrorStrings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgBrowserErrorStrings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string header = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header().data(), this->header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.header");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->header(), output);
  }

  // optional string cache_miss = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cache_miss().data(), this->cache_miss().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.cache_miss");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cache_miss(), output);
  }

  // optional string bad_url = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bad_url().data(), this->bad_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.bad_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bad_url(), output);
  }

  // optional string connection_problem = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connection_problem().data(), this->connection_problem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.connection_problem");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->connection_problem(), output);
  }

  // optional string proxy_problem = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxy_problem().data(), this->proxy_problem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.proxy_problem");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->proxy_problem(), output);
  }

  // optional string unknown = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unknown().data(), this->unknown().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.unknown");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->unknown(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgBrowserErrorStrings)
}

::google::protobuf::uint8* CMsgBrowserErrorStrings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgBrowserErrorStrings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string header = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header().data(), this->header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.header");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->header(), target);
  }

  // optional string cache_miss = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cache_miss().data(), this->cache_miss().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.cache_miss");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cache_miss(), target);
  }

  // optional string bad_url = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bad_url().data(), this->bad_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.bad_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bad_url(), target);
  }

  // optional string connection_problem = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connection_problem().data(), this->connection_problem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.connection_problem");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->connection_problem(), target);
  }

  // optional string proxy_problem = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxy_problem().data(), this->proxy_problem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.proxy_problem");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->proxy_problem(), target);
  }

  // optional string unknown = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unknown().data(), this->unknown().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.unknown");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->unknown(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgBrowserErrorStrings)
  return target;
}

size_t CMsgBrowserErrorStrings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgBrowserErrorStrings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string header = 3;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->header());
    }

    // optional string cache_miss = 4;
    if (has_cache_miss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cache_miss());
    }

    // optional string bad_url = 5;
    if (has_bad_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bad_url());
    }

    // optional string connection_problem = 6;
    if (has_connection_problem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connection_problem());
    }

    // optional string proxy_problem = 7;
    if (has_proxy_problem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxy_problem());
    }

    // optional string unknown = 8;
    if (has_unknown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unknown());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBrowserErrorStrings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgBrowserErrorStrings)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserErrorStrings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBrowserErrorStrings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgBrowserErrorStrings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgBrowserErrorStrings)
    MergeFrom(*source);
  }
}

void CMsgBrowserErrorStrings::MergeFrom(const CMsgBrowserErrorStrings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgBrowserErrorStrings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_header();
      header_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_cache_miss();
      cache_miss_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cache_miss_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_bad_url();
      bad_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bad_url_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_connection_problem();
      connection_problem_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_problem_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_proxy_problem();
      proxy_problem_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_problem_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_unknown();
      unknown_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unknown_);
    }
    if (cached_has_bits & 0x00000080u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBrowserErrorStrings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgBrowserErrorStrings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserErrorStrings::CopyFrom(const CMsgBrowserErrorStrings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgBrowserErrorStrings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserErrorStrings::IsInitialized() const {
  return true;
}

void CMsgBrowserErrorStrings::Swap(CMsgBrowserErrorStrings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBrowserErrorStrings::InternalSwap(CMsgBrowserErrorStrings* other) {
  title_.Swap(&other->title_);
  header_.Swap(&other->header_);
  cache_miss_.Swap(&other->cache_miss_);
  bad_url_.Swap(&other->bad_url_);
  connection_problem_.Swap(&other->connection_problem_);
  proxy_problem_.Swap(&other->proxy_problem_);
  unknown_.Swap(&other->unknown_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBrowserErrorStrings::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBrowserErrorStrings

// optional uint32 browser_handle = 1;
bool CMsgBrowserErrorStrings::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgBrowserErrorStrings::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgBrowserErrorStrings::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgBrowserErrorStrings::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgBrowserErrorStrings::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserErrorStrings.browser_handle)
  return browser_handle_;
}
void CMsgBrowserErrorStrings::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserErrorStrings.browser_handle)
}

// optional string title = 2;
bool CMsgBrowserErrorStrings::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBrowserErrorStrings::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBrowserErrorStrings::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBrowserErrorStrings::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& CMsgBrowserErrorStrings::title() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserErrorStrings.title)
  return title_.GetNoArena();
}
void CMsgBrowserErrorStrings::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserErrorStrings.title)
}
#if LANG_CXX11
void CMsgBrowserErrorStrings::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgBrowserErrorStrings.title)
}
#endif
void CMsgBrowserErrorStrings::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgBrowserErrorStrings.title)
}
void CMsgBrowserErrorStrings::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgBrowserErrorStrings.title)
}
::std::string* CMsgBrowserErrorStrings::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgBrowserErrorStrings.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgBrowserErrorStrings::release_title() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgBrowserErrorStrings.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgBrowserErrorStrings::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgBrowserErrorStrings.title)
}

// optional string header = 3;
bool CMsgBrowserErrorStrings::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBrowserErrorStrings::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBrowserErrorStrings::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBrowserErrorStrings::clear_header() {
  header_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_header();
}
const ::std::string& CMsgBrowserErrorStrings::header() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserErrorStrings.header)
  return header_.GetNoArena();
}
void CMsgBrowserErrorStrings::set_header(const ::std::string& value) {
  set_has_header();
  header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserErrorStrings.header)
}
#if LANG_CXX11
void CMsgBrowserErrorStrings::set_header(::std::string&& value) {
  set_has_header();
  header_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgBrowserErrorStrings.header)
}
#endif
void CMsgBrowserErrorStrings::set_header(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_header();
  header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgBrowserErrorStrings.header)
}
void CMsgBrowserErrorStrings::set_header(const char* value, size_t size) {
  set_has_header();
  header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgBrowserErrorStrings.header)
}
::std::string* CMsgBrowserErrorStrings::mutable_header() {
  set_has_header();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgBrowserErrorStrings.header)
  return header_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgBrowserErrorStrings::release_header() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgBrowserErrorStrings.header)
  clear_has_header();
  return header_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgBrowserErrorStrings::set_allocated_header(::std::string* header) {
  if (header != NULL) {
    set_has_header();
  } else {
    clear_has_header();
  }
  header_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgBrowserErrorStrings.header)
}

// optional string cache_miss = 4;
bool CMsgBrowserErrorStrings::has_cache_miss() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgBrowserErrorStrings::set_has_cache_miss() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgBrowserErrorStrings::clear_has_cache_miss() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgBrowserErrorStrings::clear_cache_miss() {
  cache_miss_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cache_miss();
}
const ::std::string& CMsgBrowserErrorStrings::cache_miss() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserErrorStrings.cache_miss)
  return cache_miss_.GetNoArena();
}
void CMsgBrowserErrorStrings::set_cache_miss(const ::std::string& value) {
  set_has_cache_miss();
  cache_miss_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserErrorStrings.cache_miss)
}
#if LANG_CXX11
void CMsgBrowserErrorStrings::set_cache_miss(::std::string&& value) {
  set_has_cache_miss();
  cache_miss_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgBrowserErrorStrings.cache_miss)
}
#endif
void CMsgBrowserErrorStrings::set_cache_miss(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cache_miss();
  cache_miss_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgBrowserErrorStrings.cache_miss)
}
void CMsgBrowserErrorStrings::set_cache_miss(const char* value, size_t size) {
  set_has_cache_miss();
  cache_miss_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgBrowserErrorStrings.cache_miss)
}
::std::string* CMsgBrowserErrorStrings::mutable_cache_miss() {
  set_has_cache_miss();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgBrowserErrorStrings.cache_miss)
  return cache_miss_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgBrowserErrorStrings::release_cache_miss() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgBrowserErrorStrings.cache_miss)
  clear_has_cache_miss();
  return cache_miss_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgBrowserErrorStrings::set_allocated_cache_miss(::std::string* cache_miss) {
  if (cache_miss != NULL) {
    set_has_cache_miss();
  } else {
    clear_has_cache_miss();
  }
  cache_miss_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cache_miss);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgBrowserErrorStrings.cache_miss)
}

// optional string bad_url = 5;
bool CMsgBrowserErrorStrings::has_bad_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgBrowserErrorStrings::set_has_bad_url() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgBrowserErrorStrings::clear_has_bad_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgBrowserErrorStrings::clear_bad_url() {
  bad_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bad_url();
}
const ::std::string& CMsgBrowserErrorStrings::bad_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserErrorStrings.bad_url)
  return bad_url_.GetNoArena();
}
void CMsgBrowserErrorStrings::set_bad_url(const ::std::string& value) {
  set_has_bad_url();
  bad_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserErrorStrings.bad_url)
}
#if LANG_CXX11
void CMsgBrowserErrorStrings::set_bad_url(::std::string&& value) {
  set_has_bad_url();
  bad_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgBrowserErrorStrings.bad_url)
}
#endif
void CMsgBrowserErrorStrings::set_bad_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bad_url();
  bad_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgBrowserErrorStrings.bad_url)
}
void CMsgBrowserErrorStrings::set_bad_url(const char* value, size_t size) {
  set_has_bad_url();
  bad_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgBrowserErrorStrings.bad_url)
}
::std::string* CMsgBrowserErrorStrings::mutable_bad_url() {
  set_has_bad_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgBrowserErrorStrings.bad_url)
  return bad_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgBrowserErrorStrings::release_bad_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgBrowserErrorStrings.bad_url)
  clear_has_bad_url();
  return bad_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgBrowserErrorStrings::set_allocated_bad_url(::std::string* bad_url) {
  if (bad_url != NULL) {
    set_has_bad_url();
  } else {
    clear_has_bad_url();
  }
  bad_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bad_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgBrowserErrorStrings.bad_url)
}

// optional string connection_problem = 6;
bool CMsgBrowserErrorStrings::has_connection_problem() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgBrowserErrorStrings::set_has_connection_problem() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgBrowserErrorStrings::clear_has_connection_problem() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgBrowserErrorStrings::clear_connection_problem() {
  connection_problem_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_connection_problem();
}
const ::std::string& CMsgBrowserErrorStrings::connection_problem() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserErrorStrings.connection_problem)
  return connection_problem_.GetNoArena();
}
void CMsgBrowserErrorStrings::set_connection_problem(const ::std::string& value) {
  set_has_connection_problem();
  connection_problem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserErrorStrings.connection_problem)
}
#if LANG_CXX11
void CMsgBrowserErrorStrings::set_connection_problem(::std::string&& value) {
  set_has_connection_problem();
  connection_problem_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgBrowserErrorStrings.connection_problem)
}
#endif
void CMsgBrowserErrorStrings::set_connection_problem(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_connection_problem();
  connection_problem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgBrowserErrorStrings.connection_problem)
}
void CMsgBrowserErrorStrings::set_connection_problem(const char* value, size_t size) {
  set_has_connection_problem();
  connection_problem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgBrowserErrorStrings.connection_problem)
}
::std::string* CMsgBrowserErrorStrings::mutable_connection_problem() {
  set_has_connection_problem();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgBrowserErrorStrings.connection_problem)
  return connection_problem_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgBrowserErrorStrings::release_connection_problem() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgBrowserErrorStrings.connection_problem)
  clear_has_connection_problem();
  return connection_problem_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgBrowserErrorStrings::set_allocated_connection_problem(::std::string* connection_problem) {
  if (connection_problem != NULL) {
    set_has_connection_problem();
  } else {
    clear_has_connection_problem();
  }
  connection_problem_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connection_problem);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgBrowserErrorStrings.connection_problem)
}

// optional string proxy_problem = 7;
bool CMsgBrowserErrorStrings::has_proxy_problem() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgBrowserErrorStrings::set_has_proxy_problem() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgBrowserErrorStrings::clear_has_proxy_problem() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgBrowserErrorStrings::clear_proxy_problem() {
  proxy_problem_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proxy_problem();
}
const ::std::string& CMsgBrowserErrorStrings::proxy_problem() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserErrorStrings.proxy_problem)
  return proxy_problem_.GetNoArena();
}
void CMsgBrowserErrorStrings::set_proxy_problem(const ::std::string& value) {
  set_has_proxy_problem();
  proxy_problem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserErrorStrings.proxy_problem)
}
#if LANG_CXX11
void CMsgBrowserErrorStrings::set_proxy_problem(::std::string&& value) {
  set_has_proxy_problem();
  proxy_problem_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgBrowserErrorStrings.proxy_problem)
}
#endif
void CMsgBrowserErrorStrings::set_proxy_problem(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_proxy_problem();
  proxy_problem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgBrowserErrorStrings.proxy_problem)
}
void CMsgBrowserErrorStrings::set_proxy_problem(const char* value, size_t size) {
  set_has_proxy_problem();
  proxy_problem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgBrowserErrorStrings.proxy_problem)
}
::std::string* CMsgBrowserErrorStrings::mutable_proxy_problem() {
  set_has_proxy_problem();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgBrowserErrorStrings.proxy_problem)
  return proxy_problem_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgBrowserErrorStrings::release_proxy_problem() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgBrowserErrorStrings.proxy_problem)
  clear_has_proxy_problem();
  return proxy_problem_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgBrowserErrorStrings::set_allocated_proxy_problem(::std::string* proxy_problem) {
  if (proxy_problem != NULL) {
    set_has_proxy_problem();
  } else {
    clear_has_proxy_problem();
  }
  proxy_problem_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proxy_problem);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgBrowserErrorStrings.proxy_problem)
}

// optional string unknown = 8;
bool CMsgBrowserErrorStrings::has_unknown() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgBrowserErrorStrings::set_has_unknown() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgBrowserErrorStrings::clear_has_unknown() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgBrowserErrorStrings::clear_unknown() {
  unknown_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unknown();
}
const ::std::string& CMsgBrowserErrorStrings::unknown() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserErrorStrings.unknown)
  return unknown_.GetNoArena();
}
void CMsgBrowserErrorStrings::set_unknown(const ::std::string& value) {
  set_has_unknown();
  unknown_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserErrorStrings.unknown)
}
#if LANG_CXX11
void CMsgBrowserErrorStrings::set_unknown(::std::string&& value) {
  set_has_unknown();
  unknown_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgBrowserErrorStrings.unknown)
}
#endif
void CMsgBrowserErrorStrings::set_unknown(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unknown();
  unknown_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgBrowserErrorStrings.unknown)
}
void CMsgBrowserErrorStrings::set_unknown(const char* value, size_t size) {
  set_has_unknown();
  unknown_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgBrowserErrorStrings.unknown)
}
::std::string* CMsgBrowserErrorStrings::mutable_unknown() {
  set_has_unknown();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgBrowserErrorStrings.unknown)
  return unknown_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgBrowserErrorStrings::release_unknown() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgBrowserErrorStrings.unknown)
  clear_has_unknown();
  return unknown_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgBrowserErrorStrings::set_allocated_unknown(::std::string* unknown) {
  if (unknown != NULL) {
    set_has_unknown();
  } else {
    clear_has_unknown();
  }
  unknown_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unknown);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgBrowserErrorStrings.unknown)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBrowserSize::kBrowserHandleFieldNumber;
const int CMsgBrowserSize::kWidthFieldNumber;
const int CMsgBrowserSize::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBrowserSize::CMsgBrowserSize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgBrowserSize)
}
CMsgBrowserSize::CMsgBrowserSize(const CMsgBrowserSize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgBrowserSize)
}

void CMsgBrowserSize::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(height_));
}

CMsgBrowserSize::~CMsgBrowserSize() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgBrowserSize)
  SharedDtor();
}

void CMsgBrowserSize::SharedDtor() {
}

void CMsgBrowserSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBrowserSize::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBrowserSize& CMsgBrowserSize::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBrowserSize* CMsgBrowserSize::New(::google::protobuf::Arena* arena) const {
  CMsgBrowserSize* n = new CMsgBrowserSize;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBrowserSize::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgBrowserSize)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBrowserSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgBrowserSize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgBrowserSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgBrowserSize)
  return false;
#undef DO_
}

void CMsgBrowserSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgBrowserSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgBrowserSize)
}

::google::protobuf::uint8* CMsgBrowserSize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgBrowserSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgBrowserSize)
  return target;
}

size_t CMsgBrowserSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgBrowserSize)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBrowserSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgBrowserSize)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserSize* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBrowserSize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgBrowserSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgBrowserSize)
    MergeFrom(*source);
  }
}

void CMsgBrowserSize::MergeFrom(const CMsgBrowserSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgBrowserSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBrowserSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgBrowserSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserSize::CopyFrom(const CMsgBrowserSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgBrowserSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserSize::IsInitialized() const {
  return true;
}

void CMsgBrowserSize::Swap(CMsgBrowserSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBrowserSize::InternalSwap(CMsgBrowserSize* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBrowserSize::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBrowserSize

// optional uint32 browser_handle = 1;
bool CMsgBrowserSize::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBrowserSize::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBrowserSize::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBrowserSize::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgBrowserSize::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserSize.browser_handle)
  return browser_handle_;
}
void CMsgBrowserSize::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserSize.browser_handle)
}

// optional uint32 width = 2;
bool CMsgBrowserSize::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBrowserSize::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBrowserSize::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBrowserSize::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 CMsgBrowserSize::width() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserSize.width)
  return width_;
}
void CMsgBrowserSize::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserSize.width)
}

// optional uint32 height = 3;
bool CMsgBrowserSize::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgBrowserSize::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgBrowserSize::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgBrowserSize::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 CMsgBrowserSize::height() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserSize.height)
  return height_;
}
void CMsgBrowserSize::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserSize.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPostURL::kBrowserHandleFieldNumber;
const int CMsgPostURL::kUrlFieldNumber;
const int CMsgPostURL::kPostFieldNumber;
const int CMsgPostURL::kPageserialFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPostURL::CMsgPostURL()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgPostURL)
}
CMsgPostURL::CMsgPostURL(const CMsgPostURL& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  post_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_post()) {
    post_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.post_);
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&pageserial_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(pageserial_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgPostURL)
}

void CMsgPostURL::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  post_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&pageserial_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(pageserial_));
}

CMsgPostURL::~CMsgPostURL() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgPostURL)
  SharedDtor();
}

void CMsgPostURL::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  post_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgPostURL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPostURL::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPostURL& CMsgPostURL::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPostURL* CMsgPostURL::New(::google::protobuf::Arena* arena) const {
  CMsgPostURL* n = new CMsgPostURL;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPostURL::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgPostURL)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_post()) {
      GOOGLE_DCHECK(!post_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*post_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&pageserial_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(pageserial_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPostURL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgPostURL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgPostURL.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string post = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_post()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->post().data(), this->post().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgPostURL.post");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pageserial = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_pageserial();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pageserial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgPostURL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgPostURL)
  return false;
#undef DO_
}

void CMsgPostURL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgPostURL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgPostURL.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional string post = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->post().data(), this->post().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgPostURL.post");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->post(), output);
  }

  // optional uint32 pageserial = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pageserial(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgPostURL)
}

::google::protobuf::uint8* CMsgPostURL::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgPostURL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgPostURL.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional string post = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->post().data(), this->post().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgPostURL.post");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->post(), target);
  }

  // optional uint32 pageserial = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pageserial(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgPostURL)
  return target;
}

size_t CMsgPostURL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgPostURL)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string post = 3;
    if (has_post()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->post());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 pageserial = 4;
    if (has_pageserial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pageserial());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPostURL::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgPostURL)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPostURL* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPostURL>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgPostURL)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgPostURL)
    MergeFrom(*source);
  }
}

void CMsgPostURL::MergeFrom(const CMsgPostURL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgPostURL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_post();
      post_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.post_);
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      pageserial_ = from.pageserial_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPostURL::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgPostURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPostURL::CopyFrom(const CMsgPostURL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgPostURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPostURL::IsInitialized() const {
  return true;
}

void CMsgPostURL::Swap(CMsgPostURL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPostURL::InternalSwap(CMsgPostURL* other) {
  url_.Swap(&other->url_);
  post_.Swap(&other->post_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(pageserial_, other->pageserial_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPostURL::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPostURL

// optional uint32 browser_handle = 1;
bool CMsgPostURL::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgPostURL::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgPostURL::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgPostURL::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgPostURL::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgPostURL.browser_handle)
  return browser_handle_;
}
void CMsgPostURL::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgPostURL.browser_handle)
}

// optional string url = 2;
bool CMsgPostURL::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPostURL::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPostURL::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPostURL::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CMsgPostURL::url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgPostURL.url)
  return url_.GetNoArena();
}
void CMsgPostURL::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgPostURL.url)
}
#if LANG_CXX11
void CMsgPostURL::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgPostURL.url)
}
#endif
void CMsgPostURL::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgPostURL.url)
}
void CMsgPostURL::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgPostURL.url)
}
::std::string* CMsgPostURL::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgPostURL.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgPostURL::release_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgPostURL.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgPostURL::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgPostURL.url)
}

// optional string post = 3;
bool CMsgPostURL::has_post() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgPostURL::set_has_post() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgPostURL::clear_has_post() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgPostURL::clear_post() {
  post_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_post();
}
const ::std::string& CMsgPostURL::post() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgPostURL.post)
  return post_.GetNoArena();
}
void CMsgPostURL::set_post(const ::std::string& value) {
  set_has_post();
  post_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgPostURL.post)
}
#if LANG_CXX11
void CMsgPostURL::set_post(::std::string&& value) {
  set_has_post();
  post_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgPostURL.post)
}
#endif
void CMsgPostURL::set_post(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_post();
  post_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgPostURL.post)
}
void CMsgPostURL::set_post(const char* value, size_t size) {
  set_has_post();
  post_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgPostURL.post)
}
::std::string* CMsgPostURL::mutable_post() {
  set_has_post();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgPostURL.post)
  return post_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgPostURL::release_post() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgPostURL.post)
  clear_has_post();
  return post_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgPostURL::set_allocated_post(::std::string* post) {
  if (post != NULL) {
    set_has_post();
  } else {
    clear_has_post();
  }
  post_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), post);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgPostURL.post)
}

// optional uint32 pageserial = 4;
bool CMsgPostURL::has_pageserial() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgPostURL::set_has_pageserial() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgPostURL::clear_has_pageserial() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgPostURL::clear_pageserial() {
  pageserial_ = 0u;
  clear_has_pageserial();
}
::google::protobuf::uint32 CMsgPostURL::pageserial() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgPostURL.pageserial)
  return pageserial_;
}
void CMsgPostURL::set_pageserial(::google::protobuf::uint32 value) {
  set_has_pageserial();
  pageserial_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgPostURL.pageserial)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAddHeader::kBrowserHandleFieldNumber;
const int CMsgAddHeader::kKeyFieldNumber;
const int CMsgAddHeader::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAddHeader::CMsgAddHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgAddHeader)
}
CMsgAddHeader::CMsgAddHeader(const CMsgAddHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgAddHeader)
}

void CMsgAddHeader::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgAddHeader::~CMsgAddHeader() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgAddHeader)
  SharedDtor();
}

void CMsgAddHeader::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgAddHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAddHeader::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAddHeader& CMsgAddHeader::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAddHeader* CMsgAddHeader::New(::google::protobuf::Arena* arena) const {
  CMsgAddHeader* n = new CMsgAddHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAddHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgAddHeader)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAddHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgAddHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgAddHeader.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgAddHeader.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgAddHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgAddHeader)
  return false;
#undef DO_
}

void CMsgAddHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgAddHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgAddHeader.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // optional string value = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgAddHeader.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgAddHeader)
}

::google::protobuf::uint8* CMsgAddHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgAddHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgAddHeader.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // optional string value = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgAddHeader.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgAddHeader)
  return target;
}

size_t CMsgAddHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgAddHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAddHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgAddHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAddHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAddHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgAddHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgAddHeader)
    MergeFrom(*source);
  }
}

void CMsgAddHeader::MergeFrom(const CMsgAddHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgAddHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAddHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgAddHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAddHeader::CopyFrom(const CMsgAddHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgAddHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddHeader::IsInitialized() const {
  return true;
}

void CMsgAddHeader::Swap(CMsgAddHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAddHeader::InternalSwap(CMsgAddHeader* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAddHeader::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAddHeader

// optional uint32 browser_handle = 1;
bool CMsgAddHeader::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgAddHeader::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgAddHeader::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgAddHeader::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgAddHeader::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAddHeader.browser_handle)
  return browser_handle_;
}
void CMsgAddHeader::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAddHeader.browser_handle)
}

// optional string key = 2;
bool CMsgAddHeader::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgAddHeader::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgAddHeader::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgAddHeader::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& CMsgAddHeader::key() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAddHeader.key)
  return key_.GetNoArena();
}
void CMsgAddHeader::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAddHeader.key)
}
#if LANG_CXX11
void CMsgAddHeader::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgAddHeader.key)
}
#endif
void CMsgAddHeader::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgAddHeader.key)
}
void CMsgAddHeader::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgAddHeader.key)
}
::std::string* CMsgAddHeader::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgAddHeader.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgAddHeader::release_key() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgAddHeader.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgAddHeader::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgAddHeader.key)
}

// optional string value = 3;
bool CMsgAddHeader::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgAddHeader::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgAddHeader::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgAddHeader::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CMsgAddHeader::value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAddHeader.value)
  return value_.GetNoArena();
}
void CMsgAddHeader::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAddHeader.value)
}
#if LANG_CXX11
void CMsgAddHeader::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgAddHeader.value)
}
#endif
void CMsgAddHeader::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgAddHeader.value)
}
void CMsgAddHeader::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgAddHeader.value)
}
::std::string* CMsgAddHeader::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgAddHeader.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgAddHeader::release_value() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgAddHeader.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgAddHeader::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgAddHeader.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgStopLoad::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgStopLoad::CMsgStopLoad()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgStopLoad)
}
CMsgStopLoad::CMsgStopLoad(const CMsgStopLoad& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgStopLoad)
}

void CMsgStopLoad::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgStopLoad::~CMsgStopLoad() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgStopLoad)
  SharedDtor();
}

void CMsgStopLoad::SharedDtor() {
}

void CMsgStopLoad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStopLoad::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgStopLoad& CMsgStopLoad::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgStopLoad* CMsgStopLoad::New(::google::protobuf::Arena* arena) const {
  CMsgStopLoad* n = new CMsgStopLoad;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgStopLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgStopLoad)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgStopLoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgStopLoad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgStopLoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgStopLoad)
  return false;
#undef DO_
}

void CMsgStopLoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgStopLoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgStopLoad)
}

::google::protobuf::uint8* CMsgStopLoad::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgStopLoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgStopLoad)
  return target;
}

size_t CMsgStopLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgStopLoad)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStopLoad::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgStopLoad)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStopLoad* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgStopLoad>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgStopLoad)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgStopLoad)
    MergeFrom(*source);
  }
}

void CMsgStopLoad::MergeFrom(const CMsgStopLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgStopLoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgStopLoad::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgStopLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStopLoad::CopyFrom(const CMsgStopLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgStopLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStopLoad::IsInitialized() const {
  return true;
}

void CMsgStopLoad::Swap(CMsgStopLoad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgStopLoad::InternalSwap(CMsgStopLoad* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgStopLoad::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgStopLoad

// optional uint32 browser_handle = 1;
bool CMsgStopLoad::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgStopLoad::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgStopLoad::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgStopLoad::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgStopLoad::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgStopLoad.browser_handle)
  return browser_handle_;
}
void CMsgStopLoad::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgStopLoad.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgReload::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgReload::CMsgReload()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgReload)
}
CMsgReload::CMsgReload(const CMsgReload& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgReload)
}

void CMsgReload::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgReload::~CMsgReload() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgReload)
  SharedDtor();
}

void CMsgReload::SharedDtor() {
}

void CMsgReload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgReload::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgReload& CMsgReload::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgReload* CMsgReload::New(::google::protobuf::Arena* arena) const {
  CMsgReload* n = new CMsgReload;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgReload::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgReload)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgReload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgReload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgReload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgReload)
  return false;
#undef DO_
}

void CMsgReload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgReload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgReload)
}

::google::protobuf::uint8* CMsgReload::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgReload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgReload)
  return target;
}

size_t CMsgReload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgReload)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgReload::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgReload)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgReload* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgReload>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgReload)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgReload)
    MergeFrom(*source);
  }
}

void CMsgReload::MergeFrom(const CMsgReload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgReload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgReload::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgReload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReload::CopyFrom(const CMsgReload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgReload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReload::IsInitialized() const {
  return true;
}

void CMsgReload::Swap(CMsgReload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgReload::InternalSwap(CMsgReload* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgReload::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgReload

// optional uint32 browser_handle = 1;
bool CMsgReload::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgReload::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgReload::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgReload::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgReload::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgReload.browser_handle)
  return browser_handle_;
}
void CMsgReload::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgReload.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGoForward::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGoForward::CMsgGoForward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGoForward)
}
CMsgGoForward::CMsgGoForward(const CMsgGoForward& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGoForward)
}

void CMsgGoForward::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgGoForward::~CMsgGoForward() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGoForward)
  SharedDtor();
}

void CMsgGoForward::SharedDtor() {
}

void CMsgGoForward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGoForward::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGoForward& CMsgGoForward::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGoForward* CMsgGoForward::New(::google::protobuf::Arena* arena) const {
  CMsgGoForward* n = new CMsgGoForward;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGoForward::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGoForward)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGoForward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGoForward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGoForward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGoForward)
  return false;
#undef DO_
}

void CMsgGoForward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGoForward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGoForward)
}

::google::protobuf::uint8* CMsgGoForward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGoForward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGoForward)
  return target;
}

size_t CMsgGoForward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGoForward)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGoForward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGoForward)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGoForward* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGoForward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGoForward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGoForward)
    MergeFrom(*source);
  }
}

void CMsgGoForward::MergeFrom(const CMsgGoForward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGoForward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgGoForward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGoForward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGoForward::CopyFrom(const CMsgGoForward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGoForward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGoForward::IsInitialized() const {
  return true;
}

void CMsgGoForward::Swap(CMsgGoForward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGoForward::InternalSwap(CMsgGoForward* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGoForward::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGoForward

// optional uint32 browser_handle = 1;
bool CMsgGoForward::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGoForward::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGoForward::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGoForward::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgGoForward::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGoForward.browser_handle)
  return browser_handle_;
}
void CMsgGoForward::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGoForward.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGoBack::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGoBack::CMsgGoBack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGoBack)
}
CMsgGoBack::CMsgGoBack(const CMsgGoBack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGoBack)
}

void CMsgGoBack::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgGoBack::~CMsgGoBack() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGoBack)
  SharedDtor();
}

void CMsgGoBack::SharedDtor() {
}

void CMsgGoBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGoBack::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGoBack& CMsgGoBack::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGoBack* CMsgGoBack::New(::google::protobuf::Arena* arena) const {
  CMsgGoBack* n = new CMsgGoBack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGoBack::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGoBack)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGoBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGoBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGoBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGoBack)
  return false;
#undef DO_
}

void CMsgGoBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGoBack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGoBack)
}

::google::protobuf::uint8* CMsgGoBack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGoBack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGoBack)
  return target;
}

size_t CMsgGoBack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGoBack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGoBack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGoBack)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGoBack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGoBack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGoBack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGoBack)
    MergeFrom(*source);
  }
}

void CMsgGoBack::MergeFrom(const CMsgGoBack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGoBack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgGoBack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGoBack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGoBack::CopyFrom(const CMsgGoBack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGoBack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGoBack::IsInitialized() const {
  return true;
}

void CMsgGoBack::Swap(CMsgGoBack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGoBack::InternalSwap(CMsgGoBack* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGoBack::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGoBack

// optional uint32 browser_handle = 1;
bool CMsgGoBack::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGoBack::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGoBack::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGoBack::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgGoBack::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGoBack.browser_handle)
  return browser_handle_;
}
void CMsgGoBack::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGoBack.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClearHistory::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClearHistory::CMsgClearHistory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClearHistory)
}
CMsgClearHistory::CMsgClearHistory(const CMsgClearHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClearHistory)
}

void CMsgClearHistory::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgClearHistory::~CMsgClearHistory() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClearHistory)
  SharedDtor();
}

void CMsgClearHistory::SharedDtor() {
}

void CMsgClearHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClearHistory::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClearHistory& CMsgClearHistory::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClearHistory* CMsgClearHistory::New(::google::protobuf::Arena* arena) const {
  CMsgClearHistory* n = new CMsgClearHistory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClearHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClearHistory)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClearHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClearHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClearHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClearHistory)
  return false;
#undef DO_
}

void CMsgClearHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClearHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClearHistory)
}

::google::protobuf::uint8* CMsgClearHistory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClearHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClearHistory)
  return target;
}

size_t CMsgClearHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClearHistory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClearHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClearHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClearHistory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClearHistory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClearHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClearHistory)
    MergeFrom(*source);
  }
}

void CMsgClearHistory::MergeFrom(const CMsgClearHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClearHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgClearHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClearHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClearHistory::CopyFrom(const CMsgClearHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClearHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClearHistory::IsInitialized() const {
  return true;
}

void CMsgClearHistory::Swap(CMsgClearHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClearHistory::InternalSwap(CMsgClearHistory* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClearHistory::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClearHistory

// optional uint32 browser_handle = 1;
bool CMsgClearHistory::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClearHistory::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClearHistory::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClearHistory::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgClearHistory::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClearHistory.browser_handle)
  return browser_handle_;
}
void CMsgClearHistory::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClearHistory.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgCopy::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgCopy::CMsgCopy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgCopy)
}
CMsgCopy::CMsgCopy(const CMsgCopy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgCopy)
}

void CMsgCopy::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgCopy::~CMsgCopy() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgCopy)
  SharedDtor();
}

void CMsgCopy::SharedDtor() {
}

void CMsgCopy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCopy::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgCopy& CMsgCopy::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgCopy* CMsgCopy::New(::google::protobuf::Arena* arena) const {
  CMsgCopy* n = new CMsgCopy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgCopy::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgCopy)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgCopy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgCopy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgCopy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgCopy)
  return false;
#undef DO_
}

void CMsgCopy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgCopy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgCopy)
}

::google::protobuf::uint8* CMsgCopy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgCopy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgCopy)
  return target;
}

size_t CMsgCopy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgCopy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCopy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgCopy)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCopy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgCopy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgCopy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgCopy)
    MergeFrom(*source);
  }
}

void CMsgCopy::MergeFrom(const CMsgCopy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgCopy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgCopy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgCopy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCopy::CopyFrom(const CMsgCopy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgCopy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCopy::IsInitialized() const {
  return true;
}

void CMsgCopy::Swap(CMsgCopy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgCopy::InternalSwap(CMsgCopy* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgCopy::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgCopy

// optional uint32 browser_handle = 1;
bool CMsgCopy::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgCopy::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgCopy::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgCopy::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgCopy::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgCopy.browser_handle)
  return browser_handle_;
}
void CMsgCopy::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgCopy.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPaste::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPaste::CMsgPaste()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgPaste)
}
CMsgPaste::CMsgPaste(const CMsgPaste& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgPaste)
}

void CMsgPaste::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgPaste::~CMsgPaste() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgPaste)
  SharedDtor();
}

void CMsgPaste::SharedDtor() {
}

void CMsgPaste::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPaste::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPaste& CMsgPaste::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPaste* CMsgPaste::New(::google::protobuf::Arena* arena) const {
  CMsgPaste* n = new CMsgPaste;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPaste::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgPaste)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPaste::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgPaste)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgPaste)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgPaste)
  return false;
#undef DO_
}

void CMsgPaste::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgPaste)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgPaste)
}

::google::protobuf::uint8* CMsgPaste::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgPaste)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgPaste)
  return target;
}

size_t CMsgPaste::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgPaste)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPaste::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgPaste)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPaste* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPaste>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgPaste)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgPaste)
    MergeFrom(*source);
  }
}

void CMsgPaste::MergeFrom(const CMsgPaste& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgPaste)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgPaste::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgPaste)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaste::CopyFrom(const CMsgPaste& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgPaste)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaste::IsInitialized() const {
  return true;
}

void CMsgPaste::Swap(CMsgPaste* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPaste::InternalSwap(CMsgPaste* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPaste::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPaste

// optional uint32 browser_handle = 1;
bool CMsgPaste::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPaste::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPaste::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPaste::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgPaste::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgPaste.browser_handle)
  return browser_handle_;
}
void CMsgPaste::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgPaste.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgExecuteJavaScript::kBrowserHandleFieldNumber;
const int CMsgExecuteJavaScript::kScriptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgExecuteJavaScript::CMsgExecuteJavaScript()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgExecuteJavaScript)
}
CMsgExecuteJavaScript::CMsgExecuteJavaScript(const CMsgExecuteJavaScript& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_script()) {
    script_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgExecuteJavaScript)
}

void CMsgExecuteJavaScript::SharedCtor() {
  _cached_size_ = 0;
  script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgExecuteJavaScript::~CMsgExecuteJavaScript() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgExecuteJavaScript)
  SharedDtor();
}

void CMsgExecuteJavaScript::SharedDtor() {
  script_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgExecuteJavaScript::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgExecuteJavaScript::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgExecuteJavaScript& CMsgExecuteJavaScript::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgExecuteJavaScript* CMsgExecuteJavaScript::New(::google::protobuf::Arena* arena) const {
  CMsgExecuteJavaScript* n = new CMsgExecuteJavaScript;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgExecuteJavaScript::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgExecuteJavaScript)
  if (has_script()) {
    GOOGLE_DCHECK(!script_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*script_.UnsafeRawStringPointer())->clear();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgExecuteJavaScript::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgExecuteJavaScript)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string script = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->script().data(), this->script().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgExecuteJavaScript.script");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgExecuteJavaScript)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgExecuteJavaScript)
  return false;
#undef DO_
}

void CMsgExecuteJavaScript::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgExecuteJavaScript)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string script = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgExecuteJavaScript.script");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->script(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgExecuteJavaScript)
}

::google::protobuf::uint8* CMsgExecuteJavaScript::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgExecuteJavaScript)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string script = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgExecuteJavaScript.script");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->script(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgExecuteJavaScript)
  return target;
}

size_t CMsgExecuteJavaScript::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgExecuteJavaScript)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string script = 2;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->script());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgExecuteJavaScript::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgExecuteJavaScript)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgExecuteJavaScript* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgExecuteJavaScript>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgExecuteJavaScript)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgExecuteJavaScript)
    MergeFrom(*source);
  }
}

void CMsgExecuteJavaScript::MergeFrom(const CMsgExecuteJavaScript& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgExecuteJavaScript)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_script();
      script_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgExecuteJavaScript::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgExecuteJavaScript)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgExecuteJavaScript::CopyFrom(const CMsgExecuteJavaScript& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgExecuteJavaScript)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExecuteJavaScript::IsInitialized() const {
  return true;
}

void CMsgExecuteJavaScript::Swap(CMsgExecuteJavaScript* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgExecuteJavaScript::InternalSwap(CMsgExecuteJavaScript* other) {
  script_.Swap(&other->script_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgExecuteJavaScript::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgExecuteJavaScript

// optional uint32 browser_handle = 1;
bool CMsgExecuteJavaScript::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgExecuteJavaScript::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgExecuteJavaScript::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgExecuteJavaScript::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgExecuteJavaScript::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgExecuteJavaScript.browser_handle)
  return browser_handle_;
}
void CMsgExecuteJavaScript::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgExecuteJavaScript.browser_handle)
}

// optional string script = 2;
bool CMsgExecuteJavaScript::has_script() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgExecuteJavaScript::set_has_script() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgExecuteJavaScript::clear_has_script() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgExecuteJavaScript::clear_script() {
  script_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_script();
}
const ::std::string& CMsgExecuteJavaScript::script() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgExecuteJavaScript.script)
  return script_.GetNoArena();
}
void CMsgExecuteJavaScript::set_script(const ::std::string& value) {
  set_has_script();
  script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgExecuteJavaScript.script)
}
#if LANG_CXX11
void CMsgExecuteJavaScript::set_script(::std::string&& value) {
  set_has_script();
  script_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgExecuteJavaScript.script)
}
#endif
void CMsgExecuteJavaScript::set_script(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_script();
  script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgExecuteJavaScript.script)
}
void CMsgExecuteJavaScript::set_script(const char* value, size_t size) {
  set_has_script();
  script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgExecuteJavaScript.script)
}
::std::string* CMsgExecuteJavaScript::mutable_script() {
  set_has_script();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgExecuteJavaScript.script)
  return script_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgExecuteJavaScript::release_script() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgExecuteJavaScript.script)
  clear_has_script();
  return script_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgExecuteJavaScript::set_allocated_script(::std::string* script) {
  if (script != NULL) {
    set_has_script();
  } else {
    clear_has_script();
  }
  script_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), script);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgExecuteJavaScript.script)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetFocus::kBrowserHandleFieldNumber;
const int CMsgSetFocus::kFocusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetFocus::CMsgSetFocus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetFocus)
}
CMsgSetFocus::CMsgSetFocus(const CMsgSetFocus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&focus_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(focus_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetFocus)
}

void CMsgSetFocus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&focus_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(focus_));
}

CMsgSetFocus::~CMsgSetFocus() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetFocus)
  SharedDtor();
}

void CMsgSetFocus::SharedDtor() {
}

void CMsgSetFocus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetFocus::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSetFocus& CMsgSetFocus::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSetFocus* CMsgSetFocus::New(::google::protobuf::Arena* arena) const {
  CMsgSetFocus* n = new CMsgSetFocus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSetFocus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetFocus)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&focus_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(focus_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSetFocus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetFocus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool focus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_focus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &focus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetFocus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetFocus)
  return false;
#undef DO_
}

void CMsgSetFocus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetFocus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional bool focus = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->focus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetFocus)
}

::google::protobuf::uint8* CMsgSetFocus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetFocus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional bool focus = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->focus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetFocus)
  return target;
}

size_t CMsgSetFocus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetFocus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional bool focus = 2;
    if (has_focus()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetFocus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetFocus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetFocus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSetFocus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetFocus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetFocus)
    MergeFrom(*source);
  }
}

void CMsgSetFocus::MergeFrom(const CMsgSetFocus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetFocus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      focus_ = from.focus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetFocus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetFocus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetFocus::CopyFrom(const CMsgSetFocus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetFocus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetFocus::IsInitialized() const {
  return true;
}

void CMsgSetFocus::Swap(CMsgSetFocus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetFocus::InternalSwap(CMsgSetFocus* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(focus_, other->focus_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSetFocus::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSetFocus

// optional uint32 browser_handle = 1;
bool CMsgSetFocus::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSetFocus::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSetFocus::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSetFocus::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgSetFocus::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetFocus.browser_handle)
  return browser_handle_;
}
void CMsgSetFocus::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetFocus.browser_handle)
}

// optional bool focus = 2;
bool CMsgSetFocus::has_focus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSetFocus::set_has_focus() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSetFocus::clear_has_focus() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSetFocus::clear_focus() {
  focus_ = false;
  clear_has_focus();
}
bool CMsgSetFocus::focus() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetFocus.focus)
  return focus_;
}
void CMsgSetFocus::set_focus(bool value) {
  set_has_focus();
  focus_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetFocus.focus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgHorizontalScrollBarSize::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgHorizontalScrollBarSize::CMsgHorizontalScrollBarSize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgHorizontalScrollBarSize)
}
CMsgHorizontalScrollBarSize::CMsgHorizontalScrollBarSize(const CMsgHorizontalScrollBarSize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgHorizontalScrollBarSize)
}

void CMsgHorizontalScrollBarSize::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgHorizontalScrollBarSize::~CMsgHorizontalScrollBarSize() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgHorizontalScrollBarSize)
  SharedDtor();
}

void CMsgHorizontalScrollBarSize::SharedDtor() {
}

void CMsgHorizontalScrollBarSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHorizontalScrollBarSize::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgHorizontalScrollBarSize& CMsgHorizontalScrollBarSize::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgHorizontalScrollBarSize* CMsgHorizontalScrollBarSize::New(::google::protobuf::Arena* arena) const {
  CMsgHorizontalScrollBarSize* n = new CMsgHorizontalScrollBarSize;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgHorizontalScrollBarSize::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgHorizontalScrollBarSize)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgHorizontalScrollBarSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgHorizontalScrollBarSize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgHorizontalScrollBarSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgHorizontalScrollBarSize)
  return false;
#undef DO_
}

void CMsgHorizontalScrollBarSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgHorizontalScrollBarSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgHorizontalScrollBarSize)
}

::google::protobuf::uint8* CMsgHorizontalScrollBarSize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgHorizontalScrollBarSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgHorizontalScrollBarSize)
  return target;
}

size_t CMsgHorizontalScrollBarSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgHorizontalScrollBarSize)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHorizontalScrollBarSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgHorizontalScrollBarSize)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHorizontalScrollBarSize* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgHorizontalScrollBarSize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgHorizontalScrollBarSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgHorizontalScrollBarSize)
    MergeFrom(*source);
  }
}

void CMsgHorizontalScrollBarSize::MergeFrom(const CMsgHorizontalScrollBarSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgHorizontalScrollBarSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgHorizontalScrollBarSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgHorizontalScrollBarSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHorizontalScrollBarSize::CopyFrom(const CMsgHorizontalScrollBarSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgHorizontalScrollBarSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHorizontalScrollBarSize::IsInitialized() const {
  return true;
}

void CMsgHorizontalScrollBarSize::Swap(CMsgHorizontalScrollBarSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgHorizontalScrollBarSize::InternalSwap(CMsgHorizontalScrollBarSize* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgHorizontalScrollBarSize::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgHorizontalScrollBarSize

// optional uint32 browser_handle = 1;
bool CMsgHorizontalScrollBarSize::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgHorizontalScrollBarSize::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgHorizontalScrollBarSize::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgHorizontalScrollBarSize::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgHorizontalScrollBarSize::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgHorizontalScrollBarSize.browser_handle)
  return browser_handle_;
}
void CMsgHorizontalScrollBarSize::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgHorizontalScrollBarSize.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgHorizontalScrollBarSizeResponse::kBrowserHandleFieldNumber;
const int CMsgHorizontalScrollBarSizeResponse::kScrollMaxFieldNumber;
const int CMsgHorizontalScrollBarSizeResponse::kScrollFieldNumber;
const int CMsgHorizontalScrollBarSizeResponse::kZoomFieldNumber;
const int CMsgHorizontalScrollBarSizeResponse::kVisibleFieldNumber;
const int CMsgHorizontalScrollBarSizeResponse::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgHorizontalScrollBarSizeResponse::CMsgHorizontalScrollBarSizeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgHorizontalScrollBarSizeResponse)
}
CMsgHorizontalScrollBarSizeResponse::CMsgHorizontalScrollBarSizeResponse(const CMsgHorizontalScrollBarSizeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(page_size_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgHorizontalScrollBarSizeResponse)
}

void CMsgHorizontalScrollBarSizeResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(page_size_));
}

CMsgHorizontalScrollBarSizeResponse::~CMsgHorizontalScrollBarSizeResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  SharedDtor();
}

void CMsgHorizontalScrollBarSizeResponse::SharedDtor() {
}

void CMsgHorizontalScrollBarSizeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHorizontalScrollBarSizeResponse::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgHorizontalScrollBarSizeResponse& CMsgHorizontalScrollBarSizeResponse::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgHorizontalScrollBarSizeResponse* CMsgHorizontalScrollBarSizeResponse::New(::google::protobuf::Arena* arena) const {
  CMsgHorizontalScrollBarSizeResponse* n = new CMsgHorizontalScrollBarSizeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgHorizontalScrollBarSizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&page_size_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(page_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgHorizontalScrollBarSizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scroll_max = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_scroll_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scroll_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scroll = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_scroll();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scroll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float zoom = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_zoom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zoom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool visible = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_visible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 page_size = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_page_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  return false;
#undef DO_
}

void CMsgHorizontalScrollBarSizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 scroll_max = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->scroll_max(), output);
  }

  // optional uint32 scroll = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->scroll(), output);
  }

  // optional float zoom = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->zoom(), output);
  }

  // optional bool visible = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->visible(), output);
  }

  // optional uint32 page_size = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->page_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgHorizontalScrollBarSizeResponse)
}

::google::protobuf::uint8* CMsgHorizontalScrollBarSizeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 scroll_max = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->scroll_max(), target);
  }

  // optional uint32 scroll = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->scroll(), target);
  }

  // optional float zoom = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->zoom(), target);
  }

  // optional bool visible = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->visible(), target);
  }

  // optional uint32 page_size = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->page_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  return target;
}

size_t CMsgHorizontalScrollBarSizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 scroll_max = 6;
    if (has_scroll_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scroll_max());
    }

    // optional uint32 scroll = 7;
    if (has_scroll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scroll());
    }

    // optional float zoom = 8;
    if (has_zoom()) {
      total_size += 1 + 4;
    }

    // optional bool visible = 9;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional uint32 page_size = 10;
    if (has_page_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHorizontalScrollBarSizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHorizontalScrollBarSizeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgHorizontalScrollBarSizeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgHorizontalScrollBarSizeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgHorizontalScrollBarSizeResponse)
    MergeFrom(*source);
  }
}

void CMsgHorizontalScrollBarSizeResponse::MergeFrom(const CMsgHorizontalScrollBarSizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      scroll_max_ = from.scroll_max_;
    }
    if (cached_has_bits & 0x00000004u) {
      scroll_ = from.scroll_;
    }
    if (cached_has_bits & 0x00000008u) {
      zoom_ = from.zoom_;
    }
    if (cached_has_bits & 0x00000010u) {
      visible_ = from.visible_;
    }
    if (cached_has_bits & 0x00000020u) {
      page_size_ = from.page_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgHorizontalScrollBarSizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHorizontalScrollBarSizeResponse::CopyFrom(const CMsgHorizontalScrollBarSizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHorizontalScrollBarSizeResponse::IsInitialized() const {
  return true;
}

void CMsgHorizontalScrollBarSizeResponse::Swap(CMsgHorizontalScrollBarSizeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgHorizontalScrollBarSizeResponse::InternalSwap(CMsgHorizontalScrollBarSizeResponse* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(scroll_max_, other->scroll_max_);
  std::swap(scroll_, other->scroll_);
  std::swap(zoom_, other->zoom_);
  std::swap(visible_, other->visible_);
  std::swap(page_size_, other->page_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgHorizontalScrollBarSizeResponse::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgHorizontalScrollBarSizeResponse

// optional uint32 browser_handle = 1;
bool CMsgHorizontalScrollBarSizeResponse::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgHorizontalScrollBarSizeResponse::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgHorizontalScrollBarSizeResponse::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgHorizontalScrollBarSizeResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgHorizontalScrollBarSizeResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgHorizontalScrollBarSizeResponse.browser_handle)
  return browser_handle_;
}
void CMsgHorizontalScrollBarSizeResponse::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgHorizontalScrollBarSizeResponse.browser_handle)
}

// optional uint32 scroll_max = 6;
bool CMsgHorizontalScrollBarSizeResponse::has_scroll_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgHorizontalScrollBarSizeResponse::set_has_scroll_max() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgHorizontalScrollBarSizeResponse::clear_has_scroll_max() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgHorizontalScrollBarSizeResponse::clear_scroll_max() {
  scroll_max_ = 0u;
  clear_has_scroll_max();
}
::google::protobuf::uint32 CMsgHorizontalScrollBarSizeResponse::scroll_max() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgHorizontalScrollBarSizeResponse.scroll_max)
  return scroll_max_;
}
void CMsgHorizontalScrollBarSizeResponse::set_scroll_max(::google::protobuf::uint32 value) {
  set_has_scroll_max();
  scroll_max_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgHorizontalScrollBarSizeResponse.scroll_max)
}

// optional uint32 scroll = 7;
bool CMsgHorizontalScrollBarSizeResponse::has_scroll() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgHorizontalScrollBarSizeResponse::set_has_scroll() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgHorizontalScrollBarSizeResponse::clear_has_scroll() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgHorizontalScrollBarSizeResponse::clear_scroll() {
  scroll_ = 0u;
  clear_has_scroll();
}
::google::protobuf::uint32 CMsgHorizontalScrollBarSizeResponse::scroll() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgHorizontalScrollBarSizeResponse.scroll)
  return scroll_;
}
void CMsgHorizontalScrollBarSizeResponse::set_scroll(::google::protobuf::uint32 value) {
  set_has_scroll();
  scroll_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgHorizontalScrollBarSizeResponse.scroll)
}

// optional float zoom = 8;
bool CMsgHorizontalScrollBarSizeResponse::has_zoom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgHorizontalScrollBarSizeResponse::set_has_zoom() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgHorizontalScrollBarSizeResponse::clear_has_zoom() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgHorizontalScrollBarSizeResponse::clear_zoom() {
  zoom_ = 0;
  clear_has_zoom();
}
float CMsgHorizontalScrollBarSizeResponse::zoom() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgHorizontalScrollBarSizeResponse.zoom)
  return zoom_;
}
void CMsgHorizontalScrollBarSizeResponse::set_zoom(float value) {
  set_has_zoom();
  zoom_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgHorizontalScrollBarSizeResponse.zoom)
}

// optional bool visible = 9;
bool CMsgHorizontalScrollBarSizeResponse::has_visible() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgHorizontalScrollBarSizeResponse::set_has_visible() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgHorizontalScrollBarSizeResponse::clear_has_visible() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgHorizontalScrollBarSizeResponse::clear_visible() {
  visible_ = false;
  clear_has_visible();
}
bool CMsgHorizontalScrollBarSizeResponse::visible() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgHorizontalScrollBarSizeResponse.visible)
  return visible_;
}
void CMsgHorizontalScrollBarSizeResponse::set_visible(bool value) {
  set_has_visible();
  visible_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgHorizontalScrollBarSizeResponse.visible)
}

// optional uint32 page_size = 10;
bool CMsgHorizontalScrollBarSizeResponse::has_page_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgHorizontalScrollBarSizeResponse::set_has_page_size() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgHorizontalScrollBarSizeResponse::clear_has_page_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgHorizontalScrollBarSizeResponse::clear_page_size() {
  page_size_ = 0u;
  clear_has_page_size();
}
::google::protobuf::uint32 CMsgHorizontalScrollBarSizeResponse::page_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgHorizontalScrollBarSizeResponse.page_size)
  return page_size_;
}
void CMsgHorizontalScrollBarSizeResponse::set_page_size(::google::protobuf::uint32 value) {
  set_has_page_size();
  page_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgHorizontalScrollBarSizeResponse.page_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgVerticalScrollBarSize::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgVerticalScrollBarSize::CMsgVerticalScrollBarSize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgVerticalScrollBarSize)
}
CMsgVerticalScrollBarSize::CMsgVerticalScrollBarSize(const CMsgVerticalScrollBarSize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgVerticalScrollBarSize)
}

void CMsgVerticalScrollBarSize::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgVerticalScrollBarSize::~CMsgVerticalScrollBarSize() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgVerticalScrollBarSize)
  SharedDtor();
}

void CMsgVerticalScrollBarSize::SharedDtor() {
}

void CMsgVerticalScrollBarSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgVerticalScrollBarSize::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgVerticalScrollBarSize& CMsgVerticalScrollBarSize::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgVerticalScrollBarSize* CMsgVerticalScrollBarSize::New(::google::protobuf::Arena* arena) const {
  CMsgVerticalScrollBarSize* n = new CMsgVerticalScrollBarSize;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgVerticalScrollBarSize::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgVerticalScrollBarSize)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgVerticalScrollBarSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgVerticalScrollBarSize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgVerticalScrollBarSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgVerticalScrollBarSize)
  return false;
#undef DO_
}

void CMsgVerticalScrollBarSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgVerticalScrollBarSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgVerticalScrollBarSize)
}

::google::protobuf::uint8* CMsgVerticalScrollBarSize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgVerticalScrollBarSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgVerticalScrollBarSize)
  return target;
}

size_t CMsgVerticalScrollBarSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgVerticalScrollBarSize)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgVerticalScrollBarSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgVerticalScrollBarSize)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgVerticalScrollBarSize* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgVerticalScrollBarSize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgVerticalScrollBarSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgVerticalScrollBarSize)
    MergeFrom(*source);
  }
}

void CMsgVerticalScrollBarSize::MergeFrom(const CMsgVerticalScrollBarSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgVerticalScrollBarSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgVerticalScrollBarSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgVerticalScrollBarSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVerticalScrollBarSize::CopyFrom(const CMsgVerticalScrollBarSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgVerticalScrollBarSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVerticalScrollBarSize::IsInitialized() const {
  return true;
}

void CMsgVerticalScrollBarSize::Swap(CMsgVerticalScrollBarSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgVerticalScrollBarSize::InternalSwap(CMsgVerticalScrollBarSize* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgVerticalScrollBarSize::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgVerticalScrollBarSize

// optional uint32 browser_handle = 1;
bool CMsgVerticalScrollBarSize::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgVerticalScrollBarSize::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgVerticalScrollBarSize::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgVerticalScrollBarSize::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgVerticalScrollBarSize::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgVerticalScrollBarSize.browser_handle)
  return browser_handle_;
}
void CMsgVerticalScrollBarSize::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgVerticalScrollBarSize.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgVerticalScrollBarSizeResponse::kBrowserHandleFieldNumber;
const int CMsgVerticalScrollBarSizeResponse::kScrollMaxFieldNumber;
const int CMsgVerticalScrollBarSizeResponse::kScrollFieldNumber;
const int CMsgVerticalScrollBarSizeResponse::kZoomFieldNumber;
const int CMsgVerticalScrollBarSizeResponse::kVisibleFieldNumber;
const int CMsgVerticalScrollBarSizeResponse::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgVerticalScrollBarSizeResponse::CMsgVerticalScrollBarSizeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgVerticalScrollBarSizeResponse)
}
CMsgVerticalScrollBarSizeResponse::CMsgVerticalScrollBarSizeResponse(const CMsgVerticalScrollBarSizeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(page_size_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgVerticalScrollBarSizeResponse)
}

void CMsgVerticalScrollBarSizeResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(page_size_));
}

CMsgVerticalScrollBarSizeResponse::~CMsgVerticalScrollBarSizeResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgVerticalScrollBarSizeResponse)
  SharedDtor();
}

void CMsgVerticalScrollBarSizeResponse::SharedDtor() {
}

void CMsgVerticalScrollBarSizeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgVerticalScrollBarSizeResponse::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgVerticalScrollBarSizeResponse& CMsgVerticalScrollBarSizeResponse::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgVerticalScrollBarSizeResponse* CMsgVerticalScrollBarSizeResponse::New(::google::protobuf::Arena* arena) const {
  CMsgVerticalScrollBarSizeResponse* n = new CMsgVerticalScrollBarSizeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgVerticalScrollBarSizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgVerticalScrollBarSizeResponse)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&page_size_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(page_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgVerticalScrollBarSizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgVerticalScrollBarSizeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scroll_max = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_scroll_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scroll_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scroll = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_scroll();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scroll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float zoom = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_zoom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zoom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool visible = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_visible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 page_size = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_page_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgVerticalScrollBarSizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgVerticalScrollBarSizeResponse)
  return false;
#undef DO_
}

void CMsgVerticalScrollBarSizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgVerticalScrollBarSizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 scroll_max = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->scroll_max(), output);
  }

  // optional uint32 scroll = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->scroll(), output);
  }

  // optional float zoom = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->zoom(), output);
  }

  // optional bool visible = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->visible(), output);
  }

  // optional uint32 page_size = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->page_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgVerticalScrollBarSizeResponse)
}

::google::protobuf::uint8* CMsgVerticalScrollBarSizeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgVerticalScrollBarSizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 scroll_max = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->scroll_max(), target);
  }

  // optional uint32 scroll = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->scroll(), target);
  }

  // optional float zoom = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->zoom(), target);
  }

  // optional bool visible = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->visible(), target);
  }

  // optional uint32 page_size = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->page_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgVerticalScrollBarSizeResponse)
  return target;
}

size_t CMsgVerticalScrollBarSizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgVerticalScrollBarSizeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 scroll_max = 6;
    if (has_scroll_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scroll_max());
    }

    // optional uint32 scroll = 7;
    if (has_scroll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scroll());
    }

    // optional float zoom = 8;
    if (has_zoom()) {
      total_size += 1 + 4;
    }

    // optional bool visible = 9;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional uint32 page_size = 10;
    if (has_page_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgVerticalScrollBarSizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgVerticalScrollBarSizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgVerticalScrollBarSizeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgVerticalScrollBarSizeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgVerticalScrollBarSizeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgVerticalScrollBarSizeResponse)
    MergeFrom(*source);
  }
}

void CMsgVerticalScrollBarSizeResponse::MergeFrom(const CMsgVerticalScrollBarSizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgVerticalScrollBarSizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      scroll_max_ = from.scroll_max_;
    }
    if (cached_has_bits & 0x00000004u) {
      scroll_ = from.scroll_;
    }
    if (cached_has_bits & 0x00000008u) {
      zoom_ = from.zoom_;
    }
    if (cached_has_bits & 0x00000010u) {
      visible_ = from.visible_;
    }
    if (cached_has_bits & 0x00000020u) {
      page_size_ = from.page_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgVerticalScrollBarSizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgVerticalScrollBarSizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVerticalScrollBarSizeResponse::CopyFrom(const CMsgVerticalScrollBarSizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgVerticalScrollBarSizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVerticalScrollBarSizeResponse::IsInitialized() const {
  return true;
}

void CMsgVerticalScrollBarSizeResponse::Swap(CMsgVerticalScrollBarSizeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgVerticalScrollBarSizeResponse::InternalSwap(CMsgVerticalScrollBarSizeResponse* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(scroll_max_, other->scroll_max_);
  std::swap(scroll_, other->scroll_);
  std::swap(zoom_, other->zoom_);
  std::swap(visible_, other->visible_);
  std::swap(page_size_, other->page_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgVerticalScrollBarSizeResponse::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgVerticalScrollBarSizeResponse

// optional uint32 browser_handle = 1;
bool CMsgVerticalScrollBarSizeResponse::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgVerticalScrollBarSizeResponse::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgVerticalScrollBarSizeResponse::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgVerticalScrollBarSizeResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgVerticalScrollBarSizeResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgVerticalScrollBarSizeResponse.browser_handle)
  return browser_handle_;
}
void CMsgVerticalScrollBarSizeResponse::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgVerticalScrollBarSizeResponse.browser_handle)
}

// optional uint32 scroll_max = 6;
bool CMsgVerticalScrollBarSizeResponse::has_scroll_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgVerticalScrollBarSizeResponse::set_has_scroll_max() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgVerticalScrollBarSizeResponse::clear_has_scroll_max() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgVerticalScrollBarSizeResponse::clear_scroll_max() {
  scroll_max_ = 0u;
  clear_has_scroll_max();
}
::google::protobuf::uint32 CMsgVerticalScrollBarSizeResponse::scroll_max() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgVerticalScrollBarSizeResponse.scroll_max)
  return scroll_max_;
}
void CMsgVerticalScrollBarSizeResponse::set_scroll_max(::google::protobuf::uint32 value) {
  set_has_scroll_max();
  scroll_max_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgVerticalScrollBarSizeResponse.scroll_max)
}

// optional uint32 scroll = 7;
bool CMsgVerticalScrollBarSizeResponse::has_scroll() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgVerticalScrollBarSizeResponse::set_has_scroll() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgVerticalScrollBarSizeResponse::clear_has_scroll() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgVerticalScrollBarSizeResponse::clear_scroll() {
  scroll_ = 0u;
  clear_has_scroll();
}
::google::protobuf::uint32 CMsgVerticalScrollBarSizeResponse::scroll() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgVerticalScrollBarSizeResponse.scroll)
  return scroll_;
}
void CMsgVerticalScrollBarSizeResponse::set_scroll(::google::protobuf::uint32 value) {
  set_has_scroll();
  scroll_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgVerticalScrollBarSizeResponse.scroll)
}

// optional float zoom = 8;
bool CMsgVerticalScrollBarSizeResponse::has_zoom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgVerticalScrollBarSizeResponse::set_has_zoom() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgVerticalScrollBarSizeResponse::clear_has_zoom() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgVerticalScrollBarSizeResponse::clear_zoom() {
  zoom_ = 0;
  clear_has_zoom();
}
float CMsgVerticalScrollBarSizeResponse::zoom() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgVerticalScrollBarSizeResponse.zoom)
  return zoom_;
}
void CMsgVerticalScrollBarSizeResponse::set_zoom(float value) {
  set_has_zoom();
  zoom_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgVerticalScrollBarSizeResponse.zoom)
}

// optional bool visible = 9;
bool CMsgVerticalScrollBarSizeResponse::has_visible() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgVerticalScrollBarSizeResponse::set_has_visible() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgVerticalScrollBarSizeResponse::clear_has_visible() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgVerticalScrollBarSizeResponse::clear_visible() {
  visible_ = false;
  clear_has_visible();
}
bool CMsgVerticalScrollBarSizeResponse::visible() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgVerticalScrollBarSizeResponse.visible)
  return visible_;
}
void CMsgVerticalScrollBarSizeResponse::set_visible(bool value) {
  set_has_visible();
  visible_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgVerticalScrollBarSizeResponse.visible)
}

// optional uint32 page_size = 10;
bool CMsgVerticalScrollBarSizeResponse::has_page_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgVerticalScrollBarSizeResponse::set_has_page_size() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgVerticalScrollBarSizeResponse::clear_has_page_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgVerticalScrollBarSizeResponse::clear_page_size() {
  page_size_ = 0u;
  clear_has_page_size();
}
::google::protobuf::uint32 CMsgVerticalScrollBarSizeResponse::page_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgVerticalScrollBarSizeResponse.page_size)
  return page_size_;
}
void CMsgVerticalScrollBarSizeResponse::set_page_size(::google::protobuf::uint32 value) {
  set_has_page_size();
  page_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgVerticalScrollBarSizeResponse.page_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgFind::kBrowserHandleFieldNumber;
const int CMsgFind::kFindFieldNumber;
const int CMsgFind::kInfindFieldNumber;
const int CMsgFind::kReverseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgFind::CMsgFind()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgFind)
}
CMsgFind::CMsgFind(const CMsgFind& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  find_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_find()) {
    find_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.find_);
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&reverse_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(reverse_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgFind)
}

void CMsgFind::SharedCtor() {
  _cached_size_ = 0;
  find_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&reverse_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(reverse_));
}

CMsgFind::~CMsgFind() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgFind)
  SharedDtor();
}

void CMsgFind::SharedDtor() {
  find_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgFind::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFind::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgFind& CMsgFind::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgFind* CMsgFind::New(::google::protobuf::Arena* arena) const {
  CMsgFind* n = new CMsgFind;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgFind::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgFind)
  if (has_find()) {
    GOOGLE_DCHECK(!find_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*find_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&reverse_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(reverse_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgFind::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgFind)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string find = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_find()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->find().data(), this->find().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgFind.find");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool infind = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_infind();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &infind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reverse = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_reverse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgFind)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgFind)
  return false;
#undef DO_
}

void CMsgFind::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgFind)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string find = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->find().data(), this->find().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFind.find");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->find(), output);
  }

  // optional bool infind = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->infind(), output);
  }

  // optional bool reverse = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->reverse(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgFind)
}

::google::protobuf::uint8* CMsgFind::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgFind)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string find = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->find().data(), this->find().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFind.find");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->find(), target);
  }

  // optional bool infind = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->infind(), target);
  }

  // optional bool reverse = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->reverse(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgFind)
  return target;
}

size_t CMsgFind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgFind)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string find = 2;
    if (has_find()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->find());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional bool infind = 3;
    if (has_infind()) {
      total_size += 1 + 1;
    }

    // optional bool reverse = 4 [default = false];
    if (has_reverse()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFind::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgFind)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFind* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgFind>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgFind)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgFind)
    MergeFrom(*source);
  }
}

void CMsgFind::MergeFrom(const CMsgFind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgFind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_find();
      find_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.find_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      infind_ = from.infind_;
    }
    if (cached_has_bits & 0x00000008u) {
      reverse_ = from.reverse_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgFind::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgFind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFind::CopyFrom(const CMsgFind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgFind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFind::IsInitialized() const {
  return true;
}

void CMsgFind::Swap(CMsgFind* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgFind::InternalSwap(CMsgFind* other) {
  find_.Swap(&other->find_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(infind_, other->infind_);
  std::swap(reverse_, other->reverse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgFind::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgFind

// optional uint32 browser_handle = 1;
bool CMsgFind::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgFind::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgFind::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgFind::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgFind::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgFind.browser_handle)
  return browser_handle_;
}
void CMsgFind::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgFind.browser_handle)
}

// optional string find = 2;
bool CMsgFind::has_find() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgFind::set_has_find() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgFind::clear_has_find() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgFind::clear_find() {
  find_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_find();
}
const ::std::string& CMsgFind::find() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgFind.find)
  return find_.GetNoArena();
}
void CMsgFind::set_find(const ::std::string& value) {
  set_has_find();
  find_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgFind.find)
}
#if LANG_CXX11
void CMsgFind::set_find(::std::string&& value) {
  set_has_find();
  find_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgFind.find)
}
#endif
void CMsgFind::set_find(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_find();
  find_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgFind.find)
}
void CMsgFind::set_find(const char* value, size_t size) {
  set_has_find();
  find_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgFind.find)
}
::std::string* CMsgFind::mutable_find() {
  set_has_find();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgFind.find)
  return find_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgFind::release_find() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgFind.find)
  clear_has_find();
  return find_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgFind::set_allocated_find(::std::string* find) {
  if (find != NULL) {
    set_has_find();
  } else {
    clear_has_find();
  }
  find_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), find);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgFind.find)
}

// optional bool infind = 3;
bool CMsgFind::has_infind() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgFind::set_has_infind() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgFind::clear_has_infind() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgFind::clear_infind() {
  infind_ = false;
  clear_has_infind();
}
bool CMsgFind::infind() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgFind.infind)
  return infind_;
}
void CMsgFind::set_infind(bool value) {
  set_has_infind();
  infind_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgFind.infind)
}

// optional bool reverse = 4 [default = false];
bool CMsgFind::has_reverse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgFind::set_has_reverse() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgFind::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgFind::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
bool CMsgFind::reverse() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgFind.reverse)
  return reverse_;
}
void CMsgFind::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgFind.reverse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgStopFind::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgStopFind::CMsgStopFind()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgStopFind)
}
CMsgStopFind::CMsgStopFind(const CMsgStopFind& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgStopFind)
}

void CMsgStopFind::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgStopFind::~CMsgStopFind() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgStopFind)
  SharedDtor();
}

void CMsgStopFind::SharedDtor() {
}

void CMsgStopFind::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStopFind::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgStopFind& CMsgStopFind::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgStopFind* CMsgStopFind::New(::google::protobuf::Arena* arena) const {
  CMsgStopFind* n = new CMsgStopFind;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgStopFind::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgStopFind)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgStopFind::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgStopFind)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgStopFind)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgStopFind)
  return false;
#undef DO_
}

void CMsgStopFind::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgStopFind)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgStopFind)
}

::google::protobuf::uint8* CMsgStopFind::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgStopFind)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgStopFind)
  return target;
}

size_t CMsgStopFind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgStopFind)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStopFind::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgStopFind)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStopFind* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgStopFind>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgStopFind)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgStopFind)
    MergeFrom(*source);
  }
}

void CMsgStopFind::MergeFrom(const CMsgStopFind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgStopFind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgStopFind::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgStopFind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStopFind::CopyFrom(const CMsgStopFind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgStopFind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStopFind::IsInitialized() const {
  return true;
}

void CMsgStopFind::Swap(CMsgStopFind* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgStopFind::InternalSwap(CMsgStopFind* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgStopFind::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgStopFind

// optional uint32 browser_handle = 1;
bool CMsgStopFind::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgStopFind::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgStopFind::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgStopFind::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgStopFind::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgStopFind.browser_handle)
  return browser_handle_;
}
void CMsgStopFind::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgStopFind.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetHorizontalScroll::kBrowserHandleFieldNumber;
const int CMsgSetHorizontalScroll::kScrollFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetHorizontalScroll::CMsgSetHorizontalScroll()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetHorizontalScroll)
}
CMsgSetHorizontalScroll::CMsgSetHorizontalScroll(const CMsgSetHorizontalScroll& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&scroll_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(scroll_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetHorizontalScroll)
}

void CMsgSetHorizontalScroll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&scroll_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(scroll_));
}

CMsgSetHorizontalScroll::~CMsgSetHorizontalScroll() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetHorizontalScroll)
  SharedDtor();
}

void CMsgSetHorizontalScroll::SharedDtor() {
}

void CMsgSetHorizontalScroll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetHorizontalScroll::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSetHorizontalScroll& CMsgSetHorizontalScroll::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSetHorizontalScroll* CMsgSetHorizontalScroll::New(::google::protobuf::Arena* arena) const {
  CMsgSetHorizontalScroll* n = new CMsgSetHorizontalScroll;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSetHorizontalScroll::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetHorizontalScroll)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&scroll_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(scroll_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSetHorizontalScroll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetHorizontalScroll)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scroll = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_scroll();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scroll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetHorizontalScroll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetHorizontalScroll)
  return false;
#undef DO_
}

void CMsgSetHorizontalScroll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetHorizontalScroll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 scroll = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scroll(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetHorizontalScroll)
}

::google::protobuf::uint8* CMsgSetHorizontalScroll::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetHorizontalScroll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 scroll = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scroll(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetHorizontalScroll)
  return target;
}

size_t CMsgSetHorizontalScroll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetHorizontalScroll)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 scroll = 2;
    if (has_scroll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scroll());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetHorizontalScroll::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetHorizontalScroll)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetHorizontalScroll* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSetHorizontalScroll>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetHorizontalScroll)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetHorizontalScroll)
    MergeFrom(*source);
  }
}

void CMsgSetHorizontalScroll::MergeFrom(const CMsgSetHorizontalScroll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetHorizontalScroll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      scroll_ = from.scroll_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetHorizontalScroll::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetHorizontalScroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetHorizontalScroll::CopyFrom(const CMsgSetHorizontalScroll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetHorizontalScroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetHorizontalScroll::IsInitialized() const {
  return true;
}

void CMsgSetHorizontalScroll::Swap(CMsgSetHorizontalScroll* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetHorizontalScroll::InternalSwap(CMsgSetHorizontalScroll* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(scroll_, other->scroll_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSetHorizontalScroll::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSetHorizontalScroll

// optional uint32 browser_handle = 1;
bool CMsgSetHorizontalScroll::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSetHorizontalScroll::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSetHorizontalScroll::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSetHorizontalScroll::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgSetHorizontalScroll::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetHorizontalScroll.browser_handle)
  return browser_handle_;
}
void CMsgSetHorizontalScroll::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetHorizontalScroll.browser_handle)
}

// optional uint32 scroll = 2;
bool CMsgSetHorizontalScroll::has_scroll() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSetHorizontalScroll::set_has_scroll() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSetHorizontalScroll::clear_has_scroll() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSetHorizontalScroll::clear_scroll() {
  scroll_ = 0u;
  clear_has_scroll();
}
::google::protobuf::uint32 CMsgSetHorizontalScroll::scroll() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetHorizontalScroll.scroll)
  return scroll_;
}
void CMsgSetHorizontalScroll::set_scroll(::google::protobuf::uint32 value) {
  set_has_scroll();
  scroll_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetHorizontalScroll.scroll)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetVerticalScroll::kBrowserHandleFieldNumber;
const int CMsgSetVerticalScroll::kScrollFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetVerticalScroll::CMsgSetVerticalScroll()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetVerticalScroll)
}
CMsgSetVerticalScroll::CMsgSetVerticalScroll(const CMsgSetVerticalScroll& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&scroll_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(scroll_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetVerticalScroll)
}

void CMsgSetVerticalScroll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&scroll_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(scroll_));
}

CMsgSetVerticalScroll::~CMsgSetVerticalScroll() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetVerticalScroll)
  SharedDtor();
}

void CMsgSetVerticalScroll::SharedDtor() {
}

void CMsgSetVerticalScroll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetVerticalScroll::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSetVerticalScroll& CMsgSetVerticalScroll::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSetVerticalScroll* CMsgSetVerticalScroll::New(::google::protobuf::Arena* arena) const {
  CMsgSetVerticalScroll* n = new CMsgSetVerticalScroll;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSetVerticalScroll::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetVerticalScroll)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&scroll_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(scroll_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSetVerticalScroll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetVerticalScroll)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scroll = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_scroll();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scroll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetVerticalScroll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetVerticalScroll)
  return false;
#undef DO_
}

void CMsgSetVerticalScroll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetVerticalScroll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 scroll = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scroll(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetVerticalScroll)
}

::google::protobuf::uint8* CMsgSetVerticalScroll::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetVerticalScroll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 scroll = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scroll(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetVerticalScroll)
  return target;
}

size_t CMsgSetVerticalScroll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetVerticalScroll)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 scroll = 2;
    if (has_scroll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scroll());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetVerticalScroll::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetVerticalScroll)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetVerticalScroll* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSetVerticalScroll>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetVerticalScroll)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetVerticalScroll)
    MergeFrom(*source);
  }
}

void CMsgSetVerticalScroll::MergeFrom(const CMsgSetVerticalScroll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetVerticalScroll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      scroll_ = from.scroll_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetVerticalScroll::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetVerticalScroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetVerticalScroll::CopyFrom(const CMsgSetVerticalScroll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetVerticalScroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetVerticalScroll::IsInitialized() const {
  return true;
}

void CMsgSetVerticalScroll::Swap(CMsgSetVerticalScroll* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetVerticalScroll::InternalSwap(CMsgSetVerticalScroll* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(scroll_, other->scroll_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSetVerticalScroll::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSetVerticalScroll

// optional uint32 browser_handle = 1;
bool CMsgSetVerticalScroll::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSetVerticalScroll::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSetVerticalScroll::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSetVerticalScroll::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgSetVerticalScroll::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetVerticalScroll.browser_handle)
  return browser_handle_;
}
void CMsgSetVerticalScroll::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetVerticalScroll.browser_handle)
}

// optional uint32 scroll = 2;
bool CMsgSetVerticalScroll::has_scroll() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSetVerticalScroll::set_has_scroll() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSetVerticalScroll::clear_has_scroll() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSetVerticalScroll::clear_scroll() {
  scroll_ = 0u;
  clear_has_scroll();
}
::google::protobuf::uint32 CMsgSetVerticalScroll::scroll() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetVerticalScroll.scroll)
  return scroll_;
}
void CMsgSetVerticalScroll::set_scroll(::google::protobuf::uint32 value) {
  set_has_scroll();
  scroll_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetVerticalScroll.scroll)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetZoomLevel::kBrowserHandleFieldNumber;
const int CMsgSetZoomLevel::kZoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetZoomLevel::CMsgSetZoomLevel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetZoomLevel)
}
CMsgSetZoomLevel::CMsgSetZoomLevel(const CMsgSetZoomLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&zoom_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(zoom_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetZoomLevel)
}

void CMsgSetZoomLevel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&zoom_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(zoom_));
}

CMsgSetZoomLevel::~CMsgSetZoomLevel() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetZoomLevel)
  SharedDtor();
}

void CMsgSetZoomLevel::SharedDtor() {
}

void CMsgSetZoomLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetZoomLevel::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSetZoomLevel& CMsgSetZoomLevel::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSetZoomLevel* CMsgSetZoomLevel::New(::google::protobuf::Arena* arena) const {
  CMsgSetZoomLevel* n = new CMsgSetZoomLevel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSetZoomLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetZoomLevel)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&zoom_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(zoom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSetZoomLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetZoomLevel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 zoom = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_zoom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetZoomLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetZoomLevel)
  return false;
#undef DO_
}

void CMsgSetZoomLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetZoomLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 zoom = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoom(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetZoomLevel)
}

::google::protobuf::uint8* CMsgSetZoomLevel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetZoomLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 zoom = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoom(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetZoomLevel)
  return target;
}

size_t CMsgSetZoomLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetZoomLevel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 zoom = 2;
    if (has_zoom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoom());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetZoomLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetZoomLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetZoomLevel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSetZoomLevel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetZoomLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetZoomLevel)
    MergeFrom(*source);
  }
}

void CMsgSetZoomLevel::MergeFrom(const CMsgSetZoomLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetZoomLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      zoom_ = from.zoom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetZoomLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetZoomLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetZoomLevel::CopyFrom(const CMsgSetZoomLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetZoomLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetZoomLevel::IsInitialized() const {
  return true;
}

void CMsgSetZoomLevel::Swap(CMsgSetZoomLevel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetZoomLevel::InternalSwap(CMsgSetZoomLevel* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(zoom_, other->zoom_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSetZoomLevel::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSetZoomLevel

// optional uint32 browser_handle = 1;
bool CMsgSetZoomLevel::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSetZoomLevel::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSetZoomLevel::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSetZoomLevel::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgSetZoomLevel::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetZoomLevel.browser_handle)
  return browser_handle_;
}
void CMsgSetZoomLevel::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetZoomLevel.browser_handle)
}

// optional uint32 zoom = 2;
bool CMsgSetZoomLevel::has_zoom() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSetZoomLevel::set_has_zoom() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSetZoomLevel::clear_has_zoom() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSetZoomLevel::clear_zoom() {
  zoom_ = 0u;
  clear_has_zoom();
}
::google::protobuf::uint32 CMsgSetZoomLevel::zoom() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetZoomLevel.zoom)
  return zoom_;
}
void CMsgSetZoomLevel::set_zoom(::google::protobuf::uint32 value) {
  set_has_zoom();
  zoom_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetZoomLevel.zoom)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgViewSource::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgViewSource::CMsgViewSource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgViewSource)
}
CMsgViewSource::CMsgViewSource(const CMsgViewSource& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgViewSource)
}

void CMsgViewSource::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgViewSource::~CMsgViewSource() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgViewSource)
  SharedDtor();
}

void CMsgViewSource::SharedDtor() {
}

void CMsgViewSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgViewSource::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgViewSource& CMsgViewSource::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgViewSource* CMsgViewSource::New(::google::protobuf::Arena* arena) const {
  CMsgViewSource* n = new CMsgViewSource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgViewSource::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgViewSource)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgViewSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgViewSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgViewSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgViewSource)
  return false;
#undef DO_
}

void CMsgViewSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgViewSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgViewSource)
}

::google::protobuf::uint8* CMsgViewSource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgViewSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgViewSource)
  return target;
}

size_t CMsgViewSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgViewSource)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgViewSource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgViewSource)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgViewSource* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgViewSource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgViewSource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgViewSource)
    MergeFrom(*source);
  }
}

void CMsgViewSource::MergeFrom(const CMsgViewSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgViewSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgViewSource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgViewSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgViewSource::CopyFrom(const CMsgViewSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgViewSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgViewSource::IsInitialized() const {
  return true;
}

void CMsgViewSource::Swap(CMsgViewSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgViewSource::InternalSwap(CMsgViewSource* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgViewSource::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgViewSource

// optional uint32 browser_handle = 1;
bool CMsgViewSource::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgViewSource::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgViewSource::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgViewSource::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgViewSource::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgViewSource.browser_handle)
  return browser_handle_;
}
void CMsgViewSource::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgViewSource.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBrowserReady::kBrowserHandleFieldNumber;
const int CMsgBrowserReady::kVrOverlayKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBrowserReady::CMsgBrowserReady()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgBrowserReady)
}
CMsgBrowserReady::CMsgBrowserReady(const CMsgBrowserReady& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vr_overlay_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vr_overlay_key()) {
    vr_overlay_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vr_overlay_key_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgBrowserReady)
}

void CMsgBrowserReady::SharedCtor() {
  _cached_size_ = 0;
  vr_overlay_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgBrowserReady::~CMsgBrowserReady() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgBrowserReady)
  SharedDtor();
}

void CMsgBrowserReady::SharedDtor() {
  vr_overlay_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgBrowserReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBrowserReady::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBrowserReady& CMsgBrowserReady::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBrowserReady* CMsgBrowserReady::New(::google::protobuf::Arena* arena) const {
  CMsgBrowserReady* n = new CMsgBrowserReady;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBrowserReady::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgBrowserReady)
  if (has_vr_overlay_key()) {
    GOOGLE_DCHECK(!vr_overlay_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*vr_overlay_key_.UnsafeRawStringPointer())->clear();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBrowserReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgBrowserReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vr_overlay_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vr_overlay_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vr_overlay_key().data(), this->vr_overlay_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserReady.vr_overlay_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgBrowserReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgBrowserReady)
  return false;
#undef DO_
}

void CMsgBrowserReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgBrowserReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string vr_overlay_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vr_overlay_key().data(), this->vr_overlay_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserReady.vr_overlay_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vr_overlay_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgBrowserReady)
}

::google::protobuf::uint8* CMsgBrowserReady::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgBrowserReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string vr_overlay_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vr_overlay_key().data(), this->vr_overlay_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserReady.vr_overlay_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vr_overlay_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgBrowserReady)
  return target;
}

size_t CMsgBrowserReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgBrowserReady)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string vr_overlay_key = 2;
    if (has_vr_overlay_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vr_overlay_key());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBrowserReady::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgBrowserReady)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserReady* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBrowserReady>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgBrowserReady)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgBrowserReady)
    MergeFrom(*source);
  }
}

void CMsgBrowserReady::MergeFrom(const CMsgBrowserReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgBrowserReady)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_vr_overlay_key();
      vr_overlay_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vr_overlay_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBrowserReady::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgBrowserReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserReady::CopyFrom(const CMsgBrowserReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgBrowserReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserReady::IsInitialized() const {
  return true;
}

void CMsgBrowserReady::Swap(CMsgBrowserReady* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBrowserReady::InternalSwap(CMsgBrowserReady* other) {
  vr_overlay_key_.Swap(&other->vr_overlay_key_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBrowserReady::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBrowserReady

// optional uint32 browser_handle = 1;
bool CMsgBrowserReady::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBrowserReady::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBrowserReady::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBrowserReady::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgBrowserReady::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserReady.browser_handle)
  return browser_handle_;
}
void CMsgBrowserReady::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserReady.browser_handle)
}

// optional string vr_overlay_key = 2;
bool CMsgBrowserReady::has_vr_overlay_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBrowserReady::set_has_vr_overlay_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBrowserReady::clear_has_vr_overlay_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBrowserReady::clear_vr_overlay_key() {
  vr_overlay_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vr_overlay_key();
}
const ::std::string& CMsgBrowserReady::vr_overlay_key() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBrowserReady.vr_overlay_key)
  return vr_overlay_key_.GetNoArena();
}
void CMsgBrowserReady::set_vr_overlay_key(const ::std::string& value) {
  set_has_vr_overlay_key();
  vr_overlay_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBrowserReady.vr_overlay_key)
}
#if LANG_CXX11
void CMsgBrowserReady::set_vr_overlay_key(::std::string&& value) {
  set_has_vr_overlay_key();
  vr_overlay_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgBrowserReady.vr_overlay_key)
}
#endif
void CMsgBrowserReady::set_vr_overlay_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vr_overlay_key();
  vr_overlay_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgBrowserReady.vr_overlay_key)
}
void CMsgBrowserReady::set_vr_overlay_key(const char* value, size_t size) {
  set_has_vr_overlay_key();
  vr_overlay_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgBrowserReady.vr_overlay_key)
}
::std::string* CMsgBrowserReady::mutable_vr_overlay_key() {
  set_has_vr_overlay_key();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgBrowserReady.vr_overlay_key)
  return vr_overlay_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgBrowserReady::release_vr_overlay_key() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgBrowserReady.vr_overlay_key)
  clear_has_vr_overlay_key();
  return vr_overlay_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgBrowserReady::set_allocated_vr_overlay_key(::std::string* vr_overlay_key) {
  if (vr_overlay_key != NULL) {
    set_has_vr_overlay_key();
  } else {
    clear_has_vr_overlay_key();
  }
  vr_overlay_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vr_overlay_key);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgBrowserReady.vr_overlay_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgURLChanged::kBrowserHandleFieldNumber;
const int CMsgURLChanged::kUrlFieldNumber;
const int CMsgURLChanged::kPostDataFieldNumber;
const int CMsgURLChanged::kBIsRedirectFieldNumber;
const int CMsgURLChanged::kPagetitleFieldNumber;
const int CMsgURLChanged::kBNewNavigationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgURLChanged::CMsgURLChanged()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgURLChanged)
}
CMsgURLChanged::CMsgURLChanged(const CMsgURLChanged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  postdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_postdata()) {
    postdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.postdata_);
  }
  pagetitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pagetitle()) {
    pagetitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagetitle_);
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&bnewnavigation_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(bnewnavigation_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgURLChanged)
}

void CMsgURLChanged::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagetitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&bnewnavigation_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(bnewnavigation_));
}

CMsgURLChanged::~CMsgURLChanged() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgURLChanged)
  SharedDtor();
}

void CMsgURLChanged::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagetitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgURLChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgURLChanged::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgURLChanged& CMsgURLChanged::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgURLChanged* CMsgURLChanged::New(::google::protobuf::Arena* arena) const {
  CMsgURLChanged* n = new CMsgURLChanged;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgURLChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgURLChanged)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_postdata()) {
      GOOGLE_DCHECK(!postdata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*postdata_.UnsafeRawStringPointer())->clear();
    }
    if (has_pagetitle()) {
      GOOGLE_DCHECK(!pagetitle_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pagetitle_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&bnewnavigation_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(bnewnavigation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgURLChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgURLChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgURLChanged.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string postData = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->postdata().data(), this->postdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgURLChanged.postData");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bIsRedirect = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_bisredirect();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisredirect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pagetitle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pagetitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pagetitle().data(), this->pagetitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgURLChanged.pagetitle");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bNewNavigation = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_bnewnavigation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bnewnavigation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgURLChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgURLChanged)
  return false;
#undef DO_
}

void CMsgURLChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgURLChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgURLChanged.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional string postData = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postdata().data(), this->postdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgURLChanged.postData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->postdata(), output);
  }

  // optional bool bIsRedirect = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bisredirect(), output);
  }

  // optional string pagetitle = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagetitle().data(), this->pagetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgURLChanged.pagetitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->pagetitle(), output);
  }

  // optional bool bNewNavigation = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bnewnavigation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgURLChanged)
}

::google::protobuf::uint8* CMsgURLChanged::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgURLChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgURLChanged.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional string postData = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postdata().data(), this->postdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgURLChanged.postData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->postdata(), target);
  }

  // optional bool bIsRedirect = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bisredirect(), target);
  }

  // optional string pagetitle = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagetitle().data(), this->pagetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgURLChanged.pagetitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pagetitle(), target);
  }

  // optional bool bNewNavigation = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bnewnavigation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgURLChanged)
  return target;
}

size_t CMsgURLChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgURLChanged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string postData = 3;
    if (has_postdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postdata());
    }

    // optional string pagetitle = 5;
    if (has_pagetitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pagetitle());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional bool bIsRedirect = 4;
    if (has_bisredirect()) {
      total_size += 1 + 1;
    }

    // optional bool bNewNavigation = 6;
    if (has_bnewnavigation()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgURLChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgURLChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgURLChanged* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgURLChanged>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgURLChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgURLChanged)
    MergeFrom(*source);
  }
}

void CMsgURLChanged::MergeFrom(const CMsgURLChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgURLChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_postdata();
      postdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.postdata_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_pagetitle();
      pagetitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagetitle_);
    }
    if (cached_has_bits & 0x00000008u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      bisredirect_ = from.bisredirect_;
    }
    if (cached_has_bits & 0x00000020u) {
      bnewnavigation_ = from.bnewnavigation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgURLChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgURLChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgURLChanged::CopyFrom(const CMsgURLChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgURLChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgURLChanged::IsInitialized() const {
  return true;
}

void CMsgURLChanged::Swap(CMsgURLChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgURLChanged::InternalSwap(CMsgURLChanged* other) {
  url_.Swap(&other->url_);
  postdata_.Swap(&other->postdata_);
  pagetitle_.Swap(&other->pagetitle_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(bisredirect_, other->bisredirect_);
  std::swap(bnewnavigation_, other->bnewnavigation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgURLChanged::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgURLChanged

// optional uint32 browser_handle = 1;
bool CMsgURLChanged::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgURLChanged::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgURLChanged::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgURLChanged::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgURLChanged::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgURLChanged.browser_handle)
  return browser_handle_;
}
void CMsgURLChanged::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgURLChanged.browser_handle)
}

// optional string url = 2;
bool CMsgURLChanged::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgURLChanged::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgURLChanged::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgURLChanged::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CMsgURLChanged::url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgURLChanged.url)
  return url_.GetNoArena();
}
void CMsgURLChanged::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgURLChanged.url)
}
#if LANG_CXX11
void CMsgURLChanged::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgURLChanged.url)
}
#endif
void CMsgURLChanged::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgURLChanged.url)
}
void CMsgURLChanged::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgURLChanged.url)
}
::std::string* CMsgURLChanged::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgURLChanged.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgURLChanged::release_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgURLChanged.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgURLChanged::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgURLChanged.url)
}

// optional string postData = 3;
bool CMsgURLChanged::has_postdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgURLChanged::set_has_postdata() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgURLChanged::clear_has_postdata() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgURLChanged::clear_postdata() {
  postdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_postdata();
}
const ::std::string& CMsgURLChanged::postdata() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgURLChanged.postData)
  return postdata_.GetNoArena();
}
void CMsgURLChanged::set_postdata(const ::std::string& value) {
  set_has_postdata();
  postdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgURLChanged.postData)
}
#if LANG_CXX11
void CMsgURLChanged::set_postdata(::std::string&& value) {
  set_has_postdata();
  postdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgURLChanged.postData)
}
#endif
void CMsgURLChanged::set_postdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_postdata();
  postdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgURLChanged.postData)
}
void CMsgURLChanged::set_postdata(const char* value, size_t size) {
  set_has_postdata();
  postdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgURLChanged.postData)
}
::std::string* CMsgURLChanged::mutable_postdata() {
  set_has_postdata();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgURLChanged.postData)
  return postdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgURLChanged::release_postdata() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgURLChanged.postData)
  clear_has_postdata();
  return postdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgURLChanged::set_allocated_postdata(::std::string* postdata) {
  if (postdata != NULL) {
    set_has_postdata();
  } else {
    clear_has_postdata();
  }
  postdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), postdata);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgURLChanged.postData)
}

// optional bool bIsRedirect = 4;
bool CMsgURLChanged::has_bisredirect() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgURLChanged::set_has_bisredirect() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgURLChanged::clear_has_bisredirect() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgURLChanged::clear_bisredirect() {
  bisredirect_ = false;
  clear_has_bisredirect();
}
bool CMsgURLChanged::bisredirect() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgURLChanged.bIsRedirect)
  return bisredirect_;
}
void CMsgURLChanged::set_bisredirect(bool value) {
  set_has_bisredirect();
  bisredirect_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgURLChanged.bIsRedirect)
}

// optional string pagetitle = 5;
bool CMsgURLChanged::has_pagetitle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgURLChanged::set_has_pagetitle() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgURLChanged::clear_has_pagetitle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgURLChanged::clear_pagetitle() {
  pagetitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pagetitle();
}
const ::std::string& CMsgURLChanged::pagetitle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgURLChanged.pagetitle)
  return pagetitle_.GetNoArena();
}
void CMsgURLChanged::set_pagetitle(const ::std::string& value) {
  set_has_pagetitle();
  pagetitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgURLChanged.pagetitle)
}
#if LANG_CXX11
void CMsgURLChanged::set_pagetitle(::std::string&& value) {
  set_has_pagetitle();
  pagetitle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgURLChanged.pagetitle)
}
#endif
void CMsgURLChanged::set_pagetitle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pagetitle();
  pagetitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgURLChanged.pagetitle)
}
void CMsgURLChanged::set_pagetitle(const char* value, size_t size) {
  set_has_pagetitle();
  pagetitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgURLChanged.pagetitle)
}
::std::string* CMsgURLChanged::mutable_pagetitle() {
  set_has_pagetitle();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgURLChanged.pagetitle)
  return pagetitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgURLChanged::release_pagetitle() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgURLChanged.pagetitle)
  clear_has_pagetitle();
  return pagetitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgURLChanged::set_allocated_pagetitle(::std::string* pagetitle) {
  if (pagetitle != NULL) {
    set_has_pagetitle();
  } else {
    clear_has_pagetitle();
  }
  pagetitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pagetitle);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgURLChanged.pagetitle)
}

// optional bool bNewNavigation = 6;
bool CMsgURLChanged::has_bnewnavigation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgURLChanged::set_has_bnewnavigation() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgURLChanged::clear_has_bnewnavigation() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgURLChanged::clear_bnewnavigation() {
  bnewnavigation_ = false;
  clear_has_bnewnavigation();
}
bool CMsgURLChanged::bnewnavigation() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgURLChanged.bNewNavigation)
  return bnewnavigation_;
}
void CMsgURLChanged::set_bnewnavigation(bool value) {
  set_has_bnewnavigation();
  bnewnavigation_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgURLChanged.bNewNavigation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHTMLHeader::kKeyFieldNumber;
const int CHTMLHeader::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHTMLHeader::CHTMLHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHTMLHeader)
}
CHTMLHeader::CHTMLHeader(const CHTMLHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHTMLHeader)
}

void CHTMLHeader::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CHTMLHeader::~CHTMLHeader() {
  // @@protoc_insertion_point(destructor:proto.steam.CHTMLHeader)
  SharedDtor();
}

void CHTMLHeader::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CHTMLHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHTMLHeader::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHTMLHeader& CHTMLHeader::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHTMLHeader* CHTMLHeader::New(::google::protobuf::Arena* arena) const {
  CHTMLHeader* n = new CHTMLHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHTMLHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHTMLHeader)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHTMLHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHTMLHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CHTMLHeader.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CHTMLHeader.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHTMLHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHTMLHeader)
  return false;
#undef DO_
}

void CHTMLHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHTMLHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHTMLHeader.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHTMLHeader.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHTMLHeader)
}

::google::protobuf::uint8* CHTMLHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHTMLHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHTMLHeader.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHTMLHeader.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHTMLHeader)
  return target;
}

size_t CHTMLHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHTMLHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHTMLHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHTMLHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CHTMLHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHTMLHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHTMLHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHTMLHeader)
    MergeFrom(*source);
  }
}

void CHTMLHeader::MergeFrom(const CHTMLHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHTMLHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CHTMLHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHTMLHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHTMLHeader::CopyFrom(const CHTMLHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHTMLHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHTMLHeader::IsInitialized() const {
  return true;
}

void CHTMLHeader::Swap(CHTMLHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHTMLHeader::InternalSwap(CHTMLHeader* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHTMLHeader::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHTMLHeader

// optional string key = 1;
bool CHTMLHeader::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CHTMLHeader::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CHTMLHeader::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CHTMLHeader::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& CHTMLHeader::key() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHTMLHeader.key)
  return key_.GetNoArena();
}
void CHTMLHeader::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CHTMLHeader.key)
}
#if LANG_CXX11
void CHTMLHeader::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CHTMLHeader.key)
}
#endif
void CHTMLHeader::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CHTMLHeader.key)
}
void CHTMLHeader::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CHTMLHeader.key)
}
::std::string* CHTMLHeader::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:proto.steam.CHTMLHeader.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CHTMLHeader::release_key() {
  // @@protoc_insertion_point(field_release:proto.steam.CHTMLHeader.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CHTMLHeader::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHTMLHeader.key)
}

// optional string value = 2;
bool CHTMLHeader::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CHTMLHeader::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CHTMLHeader::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CHTMLHeader::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CHTMLHeader::value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHTMLHeader.value)
  return value_.GetNoArena();
}
void CHTMLHeader::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CHTMLHeader.value)
}
#if LANG_CXX11
void CHTMLHeader::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CHTMLHeader.value)
}
#endif
void CHTMLHeader::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CHTMLHeader.value)
}
void CHTMLHeader::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CHTMLHeader.value)
}
::std::string* CHTMLHeader::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:proto.steam.CHTMLHeader.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CHTMLHeader::release_value() {
  // @@protoc_insertion_point(field_release:proto.steam.CHTMLHeader.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CHTMLHeader::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHTMLHeader.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHTMLPageSecurityInfo::kBIsSecureFieldNumber;
const int CHTMLPageSecurityInfo::kBHasCertErrorFieldNumber;
const int CHTMLPageSecurityInfo::kIssuerNameFieldNumber;
const int CHTMLPageSecurityInfo::kCertNameFieldNumber;
const int CHTMLPageSecurityInfo::kCertExpiryFieldNumber;
const int CHTMLPageSecurityInfo::kNCertBitsFieldNumber;
const int CHTMLPageSecurityInfo::kBIsEVCertFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHTMLPageSecurityInfo::CHTMLPageSecurityInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHTMLPageSecurityInfo)
}
CHTMLPageSecurityInfo::CHTMLPageSecurityInfo(const CHTMLPageSecurityInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  issuername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_issuername()) {
    issuername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuername_);
  }
  certname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_certname()) {
    certname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certname_);
  }
  ::memcpy(&bissecure_, &from.bissecure_,
    reinterpret_cast<char*>(&ncertbits_) -
    reinterpret_cast<char*>(&bissecure_) + sizeof(ncertbits_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHTMLPageSecurityInfo)
}

void CHTMLPageSecurityInfo::SharedCtor() {
  _cached_size_ = 0;
  issuername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bissecure_, 0, reinterpret_cast<char*>(&ncertbits_) -
    reinterpret_cast<char*>(&bissecure_) + sizeof(ncertbits_));
}

CHTMLPageSecurityInfo::~CHTMLPageSecurityInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CHTMLPageSecurityInfo)
  SharedDtor();
}

void CHTMLPageSecurityInfo::SharedDtor() {
  issuername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CHTMLPageSecurityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHTMLPageSecurityInfo::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHTMLPageSecurityInfo& CHTMLPageSecurityInfo::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHTMLPageSecurityInfo* CHTMLPageSecurityInfo::New(::google::protobuf::Arena* arena) const {
  CHTMLPageSecurityInfo* n = new CHTMLPageSecurityInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHTMLPageSecurityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHTMLPageSecurityInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_issuername()) {
      GOOGLE_DCHECK(!issuername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*issuername_.UnsafeRawStringPointer())->clear();
    }
    if (has_certname()) {
      GOOGLE_DCHECK(!certname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*certname_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&bissecure_, 0, reinterpret_cast<char*>(&ncertbits_) -
      reinterpret_cast<char*>(&bissecure_) + sizeof(ncertbits_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHTMLPageSecurityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHTMLPageSecurityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bIsSecure = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_bissecure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bissecure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bHasCertError = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bhascerterror();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhascerterror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string issuerName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issuername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->issuername().data(), this->issuername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CHTMLPageSecurityInfo.issuerName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string certName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_certname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->certname().data(), this->certname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CHTMLPageSecurityInfo.certName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 certExpiry = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_certexpiry();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &certexpiry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nCertBits = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_ncertbits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncertbits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bIsEVCert = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_bisevcert();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisevcert_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHTMLPageSecurityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHTMLPageSecurityInfo)
  return false;
#undef DO_
}

void CHTMLPageSecurityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHTMLPageSecurityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bIsSecure = 1 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bissecure(), output);
  }

  // optional bool bHasCertError = 2 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bhascerterror(), output);
  }

  // optional string issuerName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->issuername().data(), this->issuername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHTMLPageSecurityInfo.issuerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->issuername(), output);
  }

  // optional string certName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->certname().data(), this->certname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHTMLPageSecurityInfo.certName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->certname(), output);
  }

  // optional int32 certExpiry = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->certexpiry(), output);
  }

  // optional int32 nCertBits = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ncertbits(), output);
  }

  // optional bool bIsEVCert = 7 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bisevcert(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHTMLPageSecurityInfo)
}

::google::protobuf::uint8* CHTMLPageSecurityInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHTMLPageSecurityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bIsSecure = 1 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bissecure(), target);
  }

  // optional bool bHasCertError = 2 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bhascerterror(), target);
  }

  // optional string issuerName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->issuername().data(), this->issuername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHTMLPageSecurityInfo.issuerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->issuername(), target);
  }

  // optional string certName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->certname().data(), this->certname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHTMLPageSecurityInfo.certName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->certname(), target);
  }

  // optional int32 certExpiry = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->certexpiry(), target);
  }

  // optional int32 nCertBits = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ncertbits(), target);
  }

  // optional bool bIsEVCert = 7 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->bisevcert(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHTMLPageSecurityInfo)
  return target;
}

size_t CHTMLPageSecurityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHTMLPageSecurityInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string issuerName = 3;
    if (has_issuername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->issuername());
    }

    // optional string certName = 4;
    if (has_certname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->certname());
    }

    // optional bool bIsSecure = 1 [default = false];
    if (has_bissecure()) {
      total_size += 1 + 1;
    }

    // optional bool bHasCertError = 2 [default = false];
    if (has_bhascerterror()) {
      total_size += 1 + 1;
    }

    // optional bool bIsEVCert = 7 [default = false];
    if (has_bisevcert()) {
      total_size += 1 + 1;
    }

    // optional int32 certExpiry = 5 [default = 0];
    if (has_certexpiry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->certexpiry());
    }

    // optional int32 nCertBits = 6 [default = 0];
    if (has_ncertbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncertbits());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHTMLPageSecurityInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHTMLPageSecurityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CHTMLPageSecurityInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHTMLPageSecurityInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHTMLPageSecurityInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHTMLPageSecurityInfo)
    MergeFrom(*source);
  }
}

void CHTMLPageSecurityInfo::MergeFrom(const CHTMLPageSecurityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHTMLPageSecurityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_issuername();
      issuername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuername_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_certname();
      certname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certname_);
    }
    if (cached_has_bits & 0x00000004u) {
      bissecure_ = from.bissecure_;
    }
    if (cached_has_bits & 0x00000008u) {
      bhascerterror_ = from.bhascerterror_;
    }
    if (cached_has_bits & 0x00000010u) {
      bisevcert_ = from.bisevcert_;
    }
    if (cached_has_bits & 0x00000020u) {
      certexpiry_ = from.certexpiry_;
    }
    if (cached_has_bits & 0x00000040u) {
      ncertbits_ = from.ncertbits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CHTMLPageSecurityInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHTMLPageSecurityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHTMLPageSecurityInfo::CopyFrom(const CHTMLPageSecurityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHTMLPageSecurityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHTMLPageSecurityInfo::IsInitialized() const {
  return true;
}

void CHTMLPageSecurityInfo::Swap(CHTMLPageSecurityInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHTMLPageSecurityInfo::InternalSwap(CHTMLPageSecurityInfo* other) {
  issuername_.Swap(&other->issuername_);
  certname_.Swap(&other->certname_);
  std::swap(bissecure_, other->bissecure_);
  std::swap(bhascerterror_, other->bhascerterror_);
  std::swap(bisevcert_, other->bisevcert_);
  std::swap(certexpiry_, other->certexpiry_);
  std::swap(ncertbits_, other->ncertbits_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHTMLPageSecurityInfo::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHTMLPageSecurityInfo

// optional bool bIsSecure = 1 [default = false];
bool CHTMLPageSecurityInfo::has_bissecure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CHTMLPageSecurityInfo::set_has_bissecure() {
  _has_bits_[0] |= 0x00000004u;
}
void CHTMLPageSecurityInfo::clear_has_bissecure() {
  _has_bits_[0] &= ~0x00000004u;
}
void CHTMLPageSecurityInfo::clear_bissecure() {
  bissecure_ = false;
  clear_has_bissecure();
}
bool CHTMLPageSecurityInfo::bissecure() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHTMLPageSecurityInfo.bIsSecure)
  return bissecure_;
}
void CHTMLPageSecurityInfo::set_bissecure(bool value) {
  set_has_bissecure();
  bissecure_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHTMLPageSecurityInfo.bIsSecure)
}

// optional bool bHasCertError = 2 [default = false];
bool CHTMLPageSecurityInfo::has_bhascerterror() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CHTMLPageSecurityInfo::set_has_bhascerterror() {
  _has_bits_[0] |= 0x00000008u;
}
void CHTMLPageSecurityInfo::clear_has_bhascerterror() {
  _has_bits_[0] &= ~0x00000008u;
}
void CHTMLPageSecurityInfo::clear_bhascerterror() {
  bhascerterror_ = false;
  clear_has_bhascerterror();
}
bool CHTMLPageSecurityInfo::bhascerterror() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHTMLPageSecurityInfo.bHasCertError)
  return bhascerterror_;
}
void CHTMLPageSecurityInfo::set_bhascerterror(bool value) {
  set_has_bhascerterror();
  bhascerterror_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHTMLPageSecurityInfo.bHasCertError)
}

// optional string issuerName = 3;
bool CHTMLPageSecurityInfo::has_issuername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CHTMLPageSecurityInfo::set_has_issuername() {
  _has_bits_[0] |= 0x00000001u;
}
void CHTMLPageSecurityInfo::clear_has_issuername() {
  _has_bits_[0] &= ~0x00000001u;
}
void CHTMLPageSecurityInfo::clear_issuername() {
  issuername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issuername();
}
const ::std::string& CHTMLPageSecurityInfo::issuername() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHTMLPageSecurityInfo.issuerName)
  return issuername_.GetNoArena();
}
void CHTMLPageSecurityInfo::set_issuername(const ::std::string& value) {
  set_has_issuername();
  issuername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CHTMLPageSecurityInfo.issuerName)
}
#if LANG_CXX11
void CHTMLPageSecurityInfo::set_issuername(::std::string&& value) {
  set_has_issuername();
  issuername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CHTMLPageSecurityInfo.issuerName)
}
#endif
void CHTMLPageSecurityInfo::set_issuername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_issuername();
  issuername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CHTMLPageSecurityInfo.issuerName)
}
void CHTMLPageSecurityInfo::set_issuername(const char* value, size_t size) {
  set_has_issuername();
  issuername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CHTMLPageSecurityInfo.issuerName)
}
::std::string* CHTMLPageSecurityInfo::mutable_issuername() {
  set_has_issuername();
  // @@protoc_insertion_point(field_mutable:proto.steam.CHTMLPageSecurityInfo.issuerName)
  return issuername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CHTMLPageSecurityInfo::release_issuername() {
  // @@protoc_insertion_point(field_release:proto.steam.CHTMLPageSecurityInfo.issuerName)
  clear_has_issuername();
  return issuername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CHTMLPageSecurityInfo::set_allocated_issuername(::std::string* issuername) {
  if (issuername != NULL) {
    set_has_issuername();
  } else {
    clear_has_issuername();
  }
  issuername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuername);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHTMLPageSecurityInfo.issuerName)
}

// optional string certName = 4;
bool CHTMLPageSecurityInfo::has_certname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CHTMLPageSecurityInfo::set_has_certname() {
  _has_bits_[0] |= 0x00000002u;
}
void CHTMLPageSecurityInfo::clear_has_certname() {
  _has_bits_[0] &= ~0x00000002u;
}
void CHTMLPageSecurityInfo::clear_certname() {
  certname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_certname();
}
const ::std::string& CHTMLPageSecurityInfo::certname() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHTMLPageSecurityInfo.certName)
  return certname_.GetNoArena();
}
void CHTMLPageSecurityInfo::set_certname(const ::std::string& value) {
  set_has_certname();
  certname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CHTMLPageSecurityInfo.certName)
}
#if LANG_CXX11
void CHTMLPageSecurityInfo::set_certname(::std::string&& value) {
  set_has_certname();
  certname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CHTMLPageSecurityInfo.certName)
}
#endif
void CHTMLPageSecurityInfo::set_certname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_certname();
  certname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CHTMLPageSecurityInfo.certName)
}
void CHTMLPageSecurityInfo::set_certname(const char* value, size_t size) {
  set_has_certname();
  certname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CHTMLPageSecurityInfo.certName)
}
::std::string* CHTMLPageSecurityInfo::mutable_certname() {
  set_has_certname();
  // @@protoc_insertion_point(field_mutable:proto.steam.CHTMLPageSecurityInfo.certName)
  return certname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CHTMLPageSecurityInfo::release_certname() {
  // @@protoc_insertion_point(field_release:proto.steam.CHTMLPageSecurityInfo.certName)
  clear_has_certname();
  return certname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CHTMLPageSecurityInfo::set_allocated_certname(::std::string* certname) {
  if (certname != NULL) {
    set_has_certname();
  } else {
    clear_has_certname();
  }
  certname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certname);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHTMLPageSecurityInfo.certName)
}

// optional int32 certExpiry = 5 [default = 0];
bool CHTMLPageSecurityInfo::has_certexpiry() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CHTMLPageSecurityInfo::set_has_certexpiry() {
  _has_bits_[0] |= 0x00000020u;
}
void CHTMLPageSecurityInfo::clear_has_certexpiry() {
  _has_bits_[0] &= ~0x00000020u;
}
void CHTMLPageSecurityInfo::clear_certexpiry() {
  certexpiry_ = 0;
  clear_has_certexpiry();
}
::google::protobuf::int32 CHTMLPageSecurityInfo::certexpiry() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHTMLPageSecurityInfo.certExpiry)
  return certexpiry_;
}
void CHTMLPageSecurityInfo::set_certexpiry(::google::protobuf::int32 value) {
  set_has_certexpiry();
  certexpiry_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHTMLPageSecurityInfo.certExpiry)
}

// optional int32 nCertBits = 6 [default = 0];
bool CHTMLPageSecurityInfo::has_ncertbits() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CHTMLPageSecurityInfo::set_has_ncertbits() {
  _has_bits_[0] |= 0x00000040u;
}
void CHTMLPageSecurityInfo::clear_has_ncertbits() {
  _has_bits_[0] &= ~0x00000040u;
}
void CHTMLPageSecurityInfo::clear_ncertbits() {
  ncertbits_ = 0;
  clear_has_ncertbits();
}
::google::protobuf::int32 CHTMLPageSecurityInfo::ncertbits() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHTMLPageSecurityInfo.nCertBits)
  return ncertbits_;
}
void CHTMLPageSecurityInfo::set_ncertbits(::google::protobuf::int32 value) {
  set_has_ncertbits();
  ncertbits_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHTMLPageSecurityInfo.nCertBits)
}

// optional bool bIsEVCert = 7 [default = false];
bool CHTMLPageSecurityInfo::has_bisevcert() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CHTMLPageSecurityInfo::set_has_bisevcert() {
  _has_bits_[0] |= 0x00000010u;
}
void CHTMLPageSecurityInfo::clear_has_bisevcert() {
  _has_bits_[0] &= ~0x00000010u;
}
void CHTMLPageSecurityInfo::clear_bisevcert() {
  bisevcert_ = false;
  clear_has_bisevcert();
}
bool CHTMLPageSecurityInfo::bisevcert() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHTMLPageSecurityInfo.bIsEVCert)
  return bisevcert_;
}
void CHTMLPageSecurityInfo::set_bisevcert(bool value) {
  set_has_bisevcert();
  bisevcert_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHTMLPageSecurityInfo.bIsEVCert)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgFinishedRequest::kBrowserHandleFieldNumber;
const int CMsgFinishedRequest::kUrlFieldNumber;
const int CMsgFinishedRequest::kPageTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgFinishedRequest::CMsgFinishedRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgFinishedRequest)
}
CMsgFinishedRequest::CMsgFinishedRequest(const CMsgFinishedRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  pagetitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pagetitle()) {
    pagetitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagetitle_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgFinishedRequest)
}

void CMsgFinishedRequest::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagetitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgFinishedRequest::~CMsgFinishedRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgFinishedRequest)
  SharedDtor();
}

void CMsgFinishedRequest::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagetitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgFinishedRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFinishedRequest::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgFinishedRequest& CMsgFinishedRequest::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgFinishedRequest* CMsgFinishedRequest::New(::google::protobuf::Arena* arena) const {
  CMsgFinishedRequest* n = new CMsgFinishedRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgFinishedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgFinishedRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_pagetitle()) {
      GOOGLE_DCHECK(!pagetitle_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pagetitle_.UnsafeRawStringPointer())->clear();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgFinishedRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgFinishedRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgFinishedRequest.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pageTitle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pagetitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pagetitle().data(), this->pagetitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgFinishedRequest.pageTitle");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgFinishedRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgFinishedRequest)
  return false;
#undef DO_
}

void CMsgFinishedRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgFinishedRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFinishedRequest.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional string pageTitle = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagetitle().data(), this->pagetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFinishedRequest.pageTitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pagetitle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgFinishedRequest)
}

::google::protobuf::uint8* CMsgFinishedRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgFinishedRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFinishedRequest.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional string pageTitle = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagetitle().data(), this->pagetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFinishedRequest.pageTitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pagetitle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgFinishedRequest)
  return target;
}

size_t CMsgFinishedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgFinishedRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string pageTitle = 3;
    if (has_pagetitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pagetitle());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFinishedRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgFinishedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFinishedRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgFinishedRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgFinishedRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgFinishedRequest)
    MergeFrom(*source);
  }
}

void CMsgFinishedRequest::MergeFrom(const CMsgFinishedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgFinishedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pagetitle();
      pagetitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagetitle_);
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgFinishedRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgFinishedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFinishedRequest::CopyFrom(const CMsgFinishedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgFinishedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFinishedRequest::IsInitialized() const {
  return true;
}

void CMsgFinishedRequest::Swap(CMsgFinishedRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgFinishedRequest::InternalSwap(CMsgFinishedRequest* other) {
  url_.Swap(&other->url_);
  pagetitle_.Swap(&other->pagetitle_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgFinishedRequest::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgFinishedRequest

// optional uint32 browser_handle = 1;
bool CMsgFinishedRequest::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgFinishedRequest::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgFinishedRequest::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgFinishedRequest::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgFinishedRequest::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgFinishedRequest.browser_handle)
  return browser_handle_;
}
void CMsgFinishedRequest::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgFinishedRequest.browser_handle)
}

// optional string url = 2;
bool CMsgFinishedRequest::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgFinishedRequest::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgFinishedRequest::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgFinishedRequest::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CMsgFinishedRequest::url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgFinishedRequest.url)
  return url_.GetNoArena();
}
void CMsgFinishedRequest::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgFinishedRequest.url)
}
#if LANG_CXX11
void CMsgFinishedRequest::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgFinishedRequest.url)
}
#endif
void CMsgFinishedRequest::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgFinishedRequest.url)
}
void CMsgFinishedRequest::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgFinishedRequest.url)
}
::std::string* CMsgFinishedRequest::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgFinishedRequest.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgFinishedRequest::release_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgFinishedRequest.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgFinishedRequest::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgFinishedRequest.url)
}

// optional string pageTitle = 3;
bool CMsgFinishedRequest::has_pagetitle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgFinishedRequest::set_has_pagetitle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgFinishedRequest::clear_has_pagetitle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgFinishedRequest::clear_pagetitle() {
  pagetitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pagetitle();
}
const ::std::string& CMsgFinishedRequest::pagetitle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgFinishedRequest.pageTitle)
  return pagetitle_.GetNoArena();
}
void CMsgFinishedRequest::set_pagetitle(const ::std::string& value) {
  set_has_pagetitle();
  pagetitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgFinishedRequest.pageTitle)
}
#if LANG_CXX11
void CMsgFinishedRequest::set_pagetitle(::std::string&& value) {
  set_has_pagetitle();
  pagetitle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgFinishedRequest.pageTitle)
}
#endif
void CMsgFinishedRequest::set_pagetitle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pagetitle();
  pagetitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgFinishedRequest.pageTitle)
}
void CMsgFinishedRequest::set_pagetitle(const char* value, size_t size) {
  set_has_pagetitle();
  pagetitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgFinishedRequest.pageTitle)
}
::std::string* CMsgFinishedRequest::mutable_pagetitle() {
  set_has_pagetitle();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgFinishedRequest.pageTitle)
  return pagetitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgFinishedRequest::release_pagetitle() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgFinishedRequest.pageTitle)
  clear_has_pagetitle();
  return pagetitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgFinishedRequest::set_allocated_pagetitle(::std::string* pagetitle) {
  if (pagetitle != NULL) {
    set_has_pagetitle();
  } else {
    clear_has_pagetitle();
  }
  pagetitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pagetitle);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgFinishedRequest.pageTitle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLoadedRequest::kBrowserHandleFieldNumber;
const int CMsgLoadedRequest::kUrlFieldNumber;
const int CMsgLoadedRequest::kPageTitleFieldNumber;
const int CMsgLoadedRequest::kHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLoadedRequest::CMsgLoadedRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgLoadedRequest)
}
CMsgLoadedRequest::CMsgLoadedRequest(const CMsgLoadedRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  pagetitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pagetitle()) {
    pagetitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagetitle_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgLoadedRequest)
}

void CMsgLoadedRequest::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagetitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgLoadedRequest::~CMsgLoadedRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgLoadedRequest)
  SharedDtor();
}

void CMsgLoadedRequest::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagetitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgLoadedRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLoadedRequest::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgLoadedRequest& CMsgLoadedRequest::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgLoadedRequest* CMsgLoadedRequest::New(::google::protobuf::Arena* arena) const {
  CMsgLoadedRequest* n = new CMsgLoadedRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLoadedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgLoadedRequest)
  headers_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_pagetitle()) {
      GOOGLE_DCHECK(!pagetitle_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pagetitle_.UnsafeRawStringPointer())->clear();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgLoadedRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgLoadedRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgLoadedRequest.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pageTitle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pagetitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pagetitle().data(), this->pagetitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgLoadedRequest.pageTitle");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CHTMLHeader headers = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgLoadedRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgLoadedRequest)
  return false;
#undef DO_
}

void CMsgLoadedRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgLoadedRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLoadedRequest.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional string pageTitle = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagetitle().data(), this->pagetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLoadedRequest.pageTitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pagetitle(), output);
  }

  // repeated .proto.steam.CHTMLHeader headers = 5;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->headers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgLoadedRequest)
}

::google::protobuf::uint8* CMsgLoadedRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgLoadedRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLoadedRequest.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional string pageTitle = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagetitle().data(), this->pagetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLoadedRequest.pageTitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pagetitle(), target);
  }

  // repeated .proto.steam.CHTMLHeader headers = 5;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->headers(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgLoadedRequest)
  return target;
}

size_t CMsgLoadedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgLoadedRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CHTMLHeader headers = 5;
  {
    unsigned int count = this->headers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->headers(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string pageTitle = 3;
    if (has_pagetitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pagetitle());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLoadedRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgLoadedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLoadedRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLoadedRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgLoadedRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgLoadedRequest)
    MergeFrom(*source);
  }
}

void CMsgLoadedRequest::MergeFrom(const CMsgLoadedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgLoadedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pagetitle();
      pagetitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagetitle_);
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLoadedRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgLoadedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLoadedRequest::CopyFrom(const CMsgLoadedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgLoadedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLoadedRequest::IsInitialized() const {
  return true;
}

void CMsgLoadedRequest::Swap(CMsgLoadedRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLoadedRequest::InternalSwap(CMsgLoadedRequest* other) {
  headers_.InternalSwap(&other->headers_);
  url_.Swap(&other->url_);
  pagetitle_.Swap(&other->pagetitle_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLoadedRequest::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgLoadedRequest

// optional uint32 browser_handle = 1;
bool CMsgLoadedRequest::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgLoadedRequest::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgLoadedRequest::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgLoadedRequest::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgLoadedRequest::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgLoadedRequest.browser_handle)
  return browser_handle_;
}
void CMsgLoadedRequest::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgLoadedRequest.browser_handle)
}

// optional string url = 2;
bool CMsgLoadedRequest::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgLoadedRequest::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgLoadedRequest::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgLoadedRequest::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CMsgLoadedRequest::url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgLoadedRequest.url)
  return url_.GetNoArena();
}
void CMsgLoadedRequest::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgLoadedRequest.url)
}
#if LANG_CXX11
void CMsgLoadedRequest::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgLoadedRequest.url)
}
#endif
void CMsgLoadedRequest::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgLoadedRequest.url)
}
void CMsgLoadedRequest::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgLoadedRequest.url)
}
::std::string* CMsgLoadedRequest::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgLoadedRequest.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgLoadedRequest::release_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgLoadedRequest.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgLoadedRequest::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgLoadedRequest.url)
}

// optional string pageTitle = 3;
bool CMsgLoadedRequest::has_pagetitle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgLoadedRequest::set_has_pagetitle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgLoadedRequest::clear_has_pagetitle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgLoadedRequest::clear_pagetitle() {
  pagetitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pagetitle();
}
const ::std::string& CMsgLoadedRequest::pagetitle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgLoadedRequest.pageTitle)
  return pagetitle_.GetNoArena();
}
void CMsgLoadedRequest::set_pagetitle(const ::std::string& value) {
  set_has_pagetitle();
  pagetitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgLoadedRequest.pageTitle)
}
#if LANG_CXX11
void CMsgLoadedRequest::set_pagetitle(::std::string&& value) {
  set_has_pagetitle();
  pagetitle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgLoadedRequest.pageTitle)
}
#endif
void CMsgLoadedRequest::set_pagetitle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pagetitle();
  pagetitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgLoadedRequest.pageTitle)
}
void CMsgLoadedRequest::set_pagetitle(const char* value, size_t size) {
  set_has_pagetitle();
  pagetitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgLoadedRequest.pageTitle)
}
::std::string* CMsgLoadedRequest::mutable_pagetitle() {
  set_has_pagetitle();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgLoadedRequest.pageTitle)
  return pagetitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgLoadedRequest::release_pagetitle() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgLoadedRequest.pageTitle)
  clear_has_pagetitle();
  return pagetitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgLoadedRequest::set_allocated_pagetitle(::std::string* pagetitle) {
  if (pagetitle != NULL) {
    set_has_pagetitle();
  } else {
    clear_has_pagetitle();
  }
  pagetitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pagetitle);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgLoadedRequest.pageTitle)
}

// repeated .proto.steam.CHTMLHeader headers = 5;
int CMsgLoadedRequest::headers_size() const {
  return headers_.size();
}
void CMsgLoadedRequest::clear_headers() {
  headers_.Clear();
}
const ::proto::steam::CHTMLHeader& CMsgLoadedRequest::headers(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgLoadedRequest.headers)
  return headers_.Get(index);
}
::proto::steam::CHTMLHeader* CMsgLoadedRequest::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgLoadedRequest.headers)
  return headers_.Mutable(index);
}
::proto::steam::CHTMLHeader* CMsgLoadedRequest::add_headers() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgLoadedRequest.headers)
  return headers_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CHTMLHeader >*
CMsgLoadedRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgLoadedRequest.headers)
  return &headers_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CHTMLHeader >&
CMsgLoadedRequest::headers() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgLoadedRequest.headers)
  return headers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPageSecurity::kBrowserHandleFieldNumber;
const int CMsgPageSecurity::kUrlFieldNumber;
const int CMsgPageSecurity::kSecurityInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPageSecurity::CMsgPageSecurity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgPageSecurity)
}
CMsgPageSecurity::CMsgPageSecurity(const CMsgPageSecurity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_security_info()) {
    security_info_ = new ::proto::steam::CHTMLPageSecurityInfo(*from.security_info_);
  } else {
    security_info_ = NULL;
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgPageSecurity)
}

void CMsgPageSecurity::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&security_info_, 0, reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&security_info_) + sizeof(browser_handle_));
}

CMsgPageSecurity::~CMsgPageSecurity() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgPageSecurity)
  SharedDtor();
}

void CMsgPageSecurity::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete security_info_;
  }
}

void CMsgPageSecurity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPageSecurity::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPageSecurity& CMsgPageSecurity::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPageSecurity* CMsgPageSecurity::New(::google::protobuf::Arena* arena) const {
  CMsgPageSecurity* n = new CMsgPageSecurity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPageSecurity::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgPageSecurity)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_security_info()) {
      GOOGLE_DCHECK(security_info_ != NULL);
      security_info_->::proto::steam::CHTMLPageSecurityInfo::Clear();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPageSecurity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgPageSecurity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgPageSecurity.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CHTMLPageSecurityInfo security_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_security_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgPageSecurity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgPageSecurity)
  return false;
#undef DO_
}

void CMsgPageSecurity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgPageSecurity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgPageSecurity.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional .proto.steam.CHTMLPageSecurityInfo security_info = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->security_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgPageSecurity)
}

::google::protobuf::uint8* CMsgPageSecurity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgPageSecurity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgPageSecurity.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional .proto.steam.CHTMLPageSecurityInfo security_info = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->security_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgPageSecurity)
  return target;
}

size_t CMsgPageSecurity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgPageSecurity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional .proto.steam.CHTMLPageSecurityInfo security_info = 3;
    if (has_security_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->security_info_);
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPageSecurity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgPageSecurity)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPageSecurity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPageSecurity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgPageSecurity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgPageSecurity)
    MergeFrom(*source);
  }
}

void CMsgPageSecurity::MergeFrom(const CMsgPageSecurity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgPageSecurity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_security_info()->::proto::steam::CHTMLPageSecurityInfo::MergeFrom(from.security_info());
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPageSecurity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgPageSecurity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPageSecurity::CopyFrom(const CMsgPageSecurity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgPageSecurity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPageSecurity::IsInitialized() const {
  return true;
}

void CMsgPageSecurity::Swap(CMsgPageSecurity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPageSecurity::InternalSwap(CMsgPageSecurity* other) {
  url_.Swap(&other->url_);
  std::swap(security_info_, other->security_info_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPageSecurity::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPageSecurity

// optional uint32 browser_handle = 1;
bool CMsgPageSecurity::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgPageSecurity::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgPageSecurity::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgPageSecurity::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgPageSecurity::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgPageSecurity.browser_handle)
  return browser_handle_;
}
void CMsgPageSecurity::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgPageSecurity.browser_handle)
}

// optional string url = 2;
bool CMsgPageSecurity::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPageSecurity::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPageSecurity::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPageSecurity::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CMsgPageSecurity::url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgPageSecurity.url)
  return url_.GetNoArena();
}
void CMsgPageSecurity::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgPageSecurity.url)
}
#if LANG_CXX11
void CMsgPageSecurity::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgPageSecurity.url)
}
#endif
void CMsgPageSecurity::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgPageSecurity.url)
}
void CMsgPageSecurity::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgPageSecurity.url)
}
::std::string* CMsgPageSecurity::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgPageSecurity.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgPageSecurity::release_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgPageSecurity.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgPageSecurity::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgPageSecurity.url)
}

// optional .proto.steam.CHTMLPageSecurityInfo security_info = 3;
bool CMsgPageSecurity::has_security_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgPageSecurity::set_has_security_info() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgPageSecurity::clear_has_security_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgPageSecurity::clear_security_info() {
  if (security_info_ != NULL) security_info_->::proto::steam::CHTMLPageSecurityInfo::Clear();
  clear_has_security_info();
}
const ::proto::steam::CHTMLPageSecurityInfo& CMsgPageSecurity::security_info() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgPageSecurity.security_info)
  return security_info_ != NULL ? *security_info_
                         : *::proto::steam::CHTMLPageSecurityInfo::internal_default_instance();
}
::proto::steam::CHTMLPageSecurityInfo* CMsgPageSecurity::mutable_security_info() {
  set_has_security_info();
  if (security_info_ == NULL) {
    security_info_ = new ::proto::steam::CHTMLPageSecurityInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgPageSecurity.security_info)
  return security_info_;
}
::proto::steam::CHTMLPageSecurityInfo* CMsgPageSecurity::release_security_info() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgPageSecurity.security_info)
  clear_has_security_info();
  ::proto::steam::CHTMLPageSecurityInfo* temp = security_info_;
  security_info_ = NULL;
  return temp;
}
void CMsgPageSecurity::set_allocated_security_info(::proto::steam::CHTMLPageSecurityInfo* security_info) {
  delete security_info_;
  security_info_ = security_info;
  if (security_info) {
    set_has_security_info();
  } else {
    clear_has_security_info();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgPageSecurity.security_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgStartRequest::kBrowserHandleFieldNumber;
const int CMsgStartRequest::kUrlFieldNumber;
const int CMsgStartRequest::kTargetFieldNumber;
const int CMsgStartRequest::kPostDataFieldNumber;
const int CMsgStartRequest::kBIsRedirectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgStartRequest::CMsgStartRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgStartRequest)
}
CMsgStartRequest::CMsgStartRequest(const CMsgStartRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target()) {
    target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  postdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_postdata()) {
    postdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.postdata_);
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&bisredirect_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(bisredirect_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgStartRequest)
}

void CMsgStartRequest::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&bisredirect_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(bisredirect_));
}

CMsgStartRequest::~CMsgStartRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgStartRequest)
  SharedDtor();
}

void CMsgStartRequest::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgStartRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStartRequest::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgStartRequest& CMsgStartRequest::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgStartRequest* CMsgStartRequest::New(::google::protobuf::Arena* arena) const {
  CMsgStartRequest* n = new CMsgStartRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgStartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgStartRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_target()) {
      GOOGLE_DCHECK(!target_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*target_.UnsafeRawStringPointer())->clear();
    }
    if (has_postdata()) {
      GOOGLE_DCHECK(!postdata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*postdata_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&bisredirect_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(bisredirect_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgStartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgStartRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgStartRequest.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string target = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgStartRequest.target");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string postData = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->postdata().data(), this->postdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgStartRequest.postData");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bIsRedirect = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_bisredirect();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisredirect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgStartRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgStartRequest)
  return false;
#undef DO_
}

void CMsgStartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgStartRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgStartRequest.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional string target = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgStartRequest.target");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->target(), output);
  }

  // optional string postData = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postdata().data(), this->postdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgStartRequest.postData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->postdata(), output);
  }

  // optional bool bIsRedirect = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bisredirect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgStartRequest)
}

::google::protobuf::uint8* CMsgStartRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgStartRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgStartRequest.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional string target = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgStartRequest.target");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->target(), target);
  }

  // optional string postData = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postdata().data(), this->postdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgStartRequest.postData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->postdata(), target);
  }

  // optional bool bIsRedirect = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bisredirect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgStartRequest)
  return target;
}

size_t CMsgStartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgStartRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }

    // optional string postData = 4;
    if (has_postdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postdata());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional bool bIsRedirect = 5;
    if (has_bisredirect()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStartRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStartRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgStartRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgStartRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgStartRequest)
    MergeFrom(*source);
  }
}

void CMsgStartRequest::MergeFrom(const CMsgStartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_target();
      target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_postdata();
      postdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.postdata_);
    }
    if (cached_has_bits & 0x00000008u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      bisredirect_ = from.bisredirect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgStartRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStartRequest::CopyFrom(const CMsgStartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStartRequest::IsInitialized() const {
  return true;
}

void CMsgStartRequest::Swap(CMsgStartRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgStartRequest::InternalSwap(CMsgStartRequest* other) {
  url_.Swap(&other->url_);
  target_.Swap(&other->target_);
  postdata_.Swap(&other->postdata_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(bisredirect_, other->bisredirect_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgStartRequest::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgStartRequest

// optional uint32 browser_handle = 1;
bool CMsgStartRequest::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgStartRequest::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgStartRequest::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgStartRequest::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgStartRequest::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgStartRequest.browser_handle)
  return browser_handle_;
}
void CMsgStartRequest::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgStartRequest.browser_handle)
}

// optional string url = 2;
bool CMsgStartRequest::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgStartRequest::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgStartRequest::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgStartRequest::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CMsgStartRequest::url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgStartRequest.url)
  return url_.GetNoArena();
}
void CMsgStartRequest::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgStartRequest.url)
}
#if LANG_CXX11
void CMsgStartRequest::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgStartRequest.url)
}
#endif
void CMsgStartRequest::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgStartRequest.url)
}
void CMsgStartRequest::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgStartRequest.url)
}
::std::string* CMsgStartRequest::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgStartRequest.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgStartRequest::release_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgStartRequest.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgStartRequest::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgStartRequest.url)
}

// optional string target = 3;
bool CMsgStartRequest::has_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgStartRequest::set_has_target() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgStartRequest::clear_has_target() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgStartRequest::clear_target() {
  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target();
}
const ::std::string& CMsgStartRequest::target() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgStartRequest.target)
  return target_.GetNoArena();
}
void CMsgStartRequest::set_target(const ::std::string& value) {
  set_has_target();
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgStartRequest.target)
}
#if LANG_CXX11
void CMsgStartRequest::set_target(::std::string&& value) {
  set_has_target();
  target_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgStartRequest.target)
}
#endif
void CMsgStartRequest::set_target(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_target();
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgStartRequest.target)
}
void CMsgStartRequest::set_target(const char* value, size_t size) {
  set_has_target();
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgStartRequest.target)
}
::std::string* CMsgStartRequest::mutable_target() {
  set_has_target();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgStartRequest.target)
  return target_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgStartRequest::release_target() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgStartRequest.target)
  clear_has_target();
  return target_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgStartRequest::set_allocated_target(::std::string* target) {
  if (target != NULL) {
    set_has_target();
  } else {
    clear_has_target();
  }
  target_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgStartRequest.target)
}

// optional string postData = 4;
bool CMsgStartRequest::has_postdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgStartRequest::set_has_postdata() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgStartRequest::clear_has_postdata() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgStartRequest::clear_postdata() {
  postdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_postdata();
}
const ::std::string& CMsgStartRequest::postdata() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgStartRequest.postData)
  return postdata_.GetNoArena();
}
void CMsgStartRequest::set_postdata(const ::std::string& value) {
  set_has_postdata();
  postdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgStartRequest.postData)
}
#if LANG_CXX11
void CMsgStartRequest::set_postdata(::std::string&& value) {
  set_has_postdata();
  postdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgStartRequest.postData)
}
#endif
void CMsgStartRequest::set_postdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_postdata();
  postdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgStartRequest.postData)
}
void CMsgStartRequest::set_postdata(const char* value, size_t size) {
  set_has_postdata();
  postdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgStartRequest.postData)
}
::std::string* CMsgStartRequest::mutable_postdata() {
  set_has_postdata();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgStartRequest.postData)
  return postdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgStartRequest::release_postdata() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgStartRequest.postData)
  clear_has_postdata();
  return postdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgStartRequest::set_allocated_postdata(::std::string* postdata) {
  if (postdata != NULL) {
    set_has_postdata();
  } else {
    clear_has_postdata();
  }
  postdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), postdata);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgStartRequest.postData)
}

// optional bool bIsRedirect = 5;
bool CMsgStartRequest::has_bisredirect() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgStartRequest::set_has_bisredirect() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgStartRequest::clear_has_bisredirect() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgStartRequest::clear_bisredirect() {
  bisredirect_ = false;
  clear_has_bisredirect();
}
bool CMsgStartRequest::bisredirect() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgStartRequest.bIsRedirect)
  return bisredirect_;
}
void CMsgStartRequest::set_bisredirect(bool value) {
  set_has_bisredirect();
  bisredirect_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgStartRequest.bIsRedirect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgStartRequestResponse::kBrowserHandleFieldNumber;
const int CMsgStartRequestResponse::kBAllowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgStartRequestResponse::CMsgStartRequestResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgStartRequestResponse)
}
CMsgStartRequestResponse::CMsgStartRequestResponse(const CMsgStartRequestResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&ballow_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(ballow_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgStartRequestResponse)
}

void CMsgStartRequestResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&ballow_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(ballow_));
}

CMsgStartRequestResponse::~CMsgStartRequestResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgStartRequestResponse)
  SharedDtor();
}

void CMsgStartRequestResponse::SharedDtor() {
}

void CMsgStartRequestResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStartRequestResponse::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgStartRequestResponse& CMsgStartRequestResponse::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgStartRequestResponse* CMsgStartRequestResponse::New(::google::protobuf::Arena* arena) const {
  CMsgStartRequestResponse* n = new CMsgStartRequestResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgStartRequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgStartRequestResponse)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&ballow_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(ballow_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgStartRequestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgStartRequestResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bAllow = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ballow();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ballow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgStartRequestResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgStartRequestResponse)
  return false;
#undef DO_
}

void CMsgStartRequestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgStartRequestResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional bool bAllow = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ballow(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgStartRequestResponse)
}

::google::protobuf::uint8* CMsgStartRequestResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgStartRequestResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional bool bAllow = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ballow(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgStartRequestResponse)
  return target;
}

size_t CMsgStartRequestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgStartRequestResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional bool bAllow = 2;
    if (has_ballow()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStartRequestResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgStartRequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStartRequestResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgStartRequestResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgStartRequestResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgStartRequestResponse)
    MergeFrom(*source);
  }
}

void CMsgStartRequestResponse::MergeFrom(const CMsgStartRequestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgStartRequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      ballow_ = from.ballow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgStartRequestResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgStartRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStartRequestResponse::CopyFrom(const CMsgStartRequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgStartRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStartRequestResponse::IsInitialized() const {
  return true;
}

void CMsgStartRequestResponse::Swap(CMsgStartRequestResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgStartRequestResponse::InternalSwap(CMsgStartRequestResponse* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(ballow_, other->ballow_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgStartRequestResponse::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgStartRequestResponse

// optional uint32 browser_handle = 1;
bool CMsgStartRequestResponse::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgStartRequestResponse::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgStartRequestResponse::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgStartRequestResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgStartRequestResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgStartRequestResponse.browser_handle)
  return browser_handle_;
}
void CMsgStartRequestResponse::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgStartRequestResponse.browser_handle)
}

// optional bool bAllow = 2;
bool CMsgStartRequestResponse::has_ballow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgStartRequestResponse::set_has_ballow() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgStartRequestResponse::clear_has_ballow() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgStartRequestResponse::clear_ballow() {
  ballow_ = false;
  clear_has_ballow();
}
bool CMsgStartRequestResponse::ballow() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgStartRequestResponse.bAllow)
  return ballow_;
}
void CMsgStartRequestResponse::set_ballow(bool value) {
  set_has_ballow();
  ballow_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgStartRequestResponse.bAllow)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgShowPopup::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgShowPopup::CMsgShowPopup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgShowPopup)
}
CMsgShowPopup::CMsgShowPopup(const CMsgShowPopup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgShowPopup)
}

void CMsgShowPopup::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgShowPopup::~CMsgShowPopup() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgShowPopup)
  SharedDtor();
}

void CMsgShowPopup::SharedDtor() {
}

void CMsgShowPopup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgShowPopup::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgShowPopup& CMsgShowPopup::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgShowPopup* CMsgShowPopup::New(::google::protobuf::Arena* arena) const {
  CMsgShowPopup* n = new CMsgShowPopup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgShowPopup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgShowPopup)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgShowPopup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgShowPopup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgShowPopup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgShowPopup)
  return false;
#undef DO_
}

void CMsgShowPopup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgShowPopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgShowPopup)
}

::google::protobuf::uint8* CMsgShowPopup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgShowPopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgShowPopup)
  return target;
}

size_t CMsgShowPopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgShowPopup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgShowPopup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgShowPopup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgShowPopup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgShowPopup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgShowPopup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgShowPopup)
    MergeFrom(*source);
  }
}

void CMsgShowPopup::MergeFrom(const CMsgShowPopup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgShowPopup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgShowPopup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgShowPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgShowPopup::CopyFrom(const CMsgShowPopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgShowPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowPopup::IsInitialized() const {
  return true;
}

void CMsgShowPopup::Swap(CMsgShowPopup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgShowPopup::InternalSwap(CMsgShowPopup* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgShowPopup::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgShowPopup

// optional uint32 browser_handle = 1;
bool CMsgShowPopup::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgShowPopup::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgShowPopup::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgShowPopup::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgShowPopup::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgShowPopup.browser_handle)
  return browser_handle_;
}
void CMsgShowPopup::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgShowPopup.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgHidePopup::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgHidePopup::CMsgHidePopup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgHidePopup)
}
CMsgHidePopup::CMsgHidePopup(const CMsgHidePopup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgHidePopup)
}

void CMsgHidePopup::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgHidePopup::~CMsgHidePopup() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgHidePopup)
  SharedDtor();
}

void CMsgHidePopup::SharedDtor() {
}

void CMsgHidePopup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHidePopup::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgHidePopup& CMsgHidePopup::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgHidePopup* CMsgHidePopup::New(::google::protobuf::Arena* arena) const {
  CMsgHidePopup* n = new CMsgHidePopup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgHidePopup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgHidePopup)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgHidePopup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgHidePopup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgHidePopup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgHidePopup)
  return false;
#undef DO_
}

void CMsgHidePopup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgHidePopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgHidePopup)
}

::google::protobuf::uint8* CMsgHidePopup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgHidePopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgHidePopup)
  return target;
}

size_t CMsgHidePopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgHidePopup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHidePopup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgHidePopup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHidePopup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgHidePopup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgHidePopup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgHidePopup)
    MergeFrom(*source);
  }
}

void CMsgHidePopup::MergeFrom(const CMsgHidePopup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgHidePopup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgHidePopup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgHidePopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHidePopup::CopyFrom(const CMsgHidePopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgHidePopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHidePopup::IsInitialized() const {
  return true;
}

void CMsgHidePopup::Swap(CMsgHidePopup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgHidePopup::InternalSwap(CMsgHidePopup* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgHidePopup::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgHidePopup

// optional uint32 browser_handle = 1;
bool CMsgHidePopup::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgHidePopup::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgHidePopup::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgHidePopup::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgHidePopup::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgHidePopup.browser_handle)
  return browser_handle_;
}
void CMsgHidePopup::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgHidePopup.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSizePopup::kBrowserHandleFieldNumber;
const int CMsgSizePopup::kXFieldNumber;
const int CMsgSizePopup::kYFieldNumber;
const int CMsgSizePopup::kWideFieldNumber;
const int CMsgSizePopup::kTallFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSizePopup::CMsgSizePopup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSizePopup)
}
CMsgSizePopup::CMsgSizePopup(const CMsgSizePopup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&tall_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(tall_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSizePopup)
}

void CMsgSizePopup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&tall_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(tall_));
}

CMsgSizePopup::~CMsgSizePopup() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSizePopup)
  SharedDtor();
}

void CMsgSizePopup::SharedDtor() {
}

void CMsgSizePopup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSizePopup::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSizePopup& CMsgSizePopup::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSizePopup* CMsgSizePopup::New(::google::protobuf::Arena* arena) const {
  CMsgSizePopup* n = new CMsgSizePopup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSizePopup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSizePopup)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&tall_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(tall_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSizePopup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSizePopup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wide = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_wide();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wide_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tall = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_tall();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tall_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSizePopup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSizePopup)
  return false;
#undef DO_
}

void CMsgSizePopup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSizePopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  // optional uint32 wide = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wide(), output);
  }

  // optional uint32 tall = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tall(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSizePopup)
}

::google::protobuf::uint8* CMsgSizePopup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSizePopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  // optional uint32 wide = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wide(), target);
  }

  // optional uint32 tall = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tall(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSizePopup)
  return target;
}

size_t CMsgSizePopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSizePopup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 wide = 4;
    if (has_wide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wide());
    }

    // optional uint32 tall = 5;
    if (has_tall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tall());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSizePopup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSizePopup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSizePopup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSizePopup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSizePopup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSizePopup)
    MergeFrom(*source);
  }
}

void CMsgSizePopup::MergeFrom(const CMsgSizePopup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSizePopup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      wide_ = from.wide_;
    }
    if (cached_has_bits & 0x00000010u) {
      tall_ = from.tall_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSizePopup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSizePopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSizePopup::CopyFrom(const CMsgSizePopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSizePopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSizePopup::IsInitialized() const {
  return true;
}

void CMsgSizePopup::Swap(CMsgSizePopup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSizePopup::InternalSwap(CMsgSizePopup* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(wide_, other->wide_);
  std::swap(tall_, other->tall_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSizePopup::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSizePopup

// optional uint32 browser_handle = 1;
bool CMsgSizePopup::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSizePopup::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSizePopup::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSizePopup::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgSizePopup::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSizePopup.browser_handle)
  return browser_handle_;
}
void CMsgSizePopup::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSizePopup.browser_handle)
}

// optional uint32 x = 2;
bool CMsgSizePopup::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSizePopup::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSizePopup::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSizePopup::clear_x() {
  x_ = 0u;
  clear_has_x();
}
::google::protobuf::uint32 CMsgSizePopup::x() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSizePopup.x)
  return x_;
}
void CMsgSizePopup::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSizePopup.x)
}

// optional uint32 y = 3;
bool CMsgSizePopup::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSizePopup::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSizePopup::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSizePopup::clear_y() {
  y_ = 0u;
  clear_has_y();
}
::google::protobuf::uint32 CMsgSizePopup::y() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSizePopup.y)
  return y_;
}
void CMsgSizePopup::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSizePopup.y)
}

// optional uint32 wide = 4;
bool CMsgSizePopup::has_wide() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSizePopup::set_has_wide() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSizePopup::clear_has_wide() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSizePopup::clear_wide() {
  wide_ = 0u;
  clear_has_wide();
}
::google::protobuf::uint32 CMsgSizePopup::wide() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSizePopup.wide)
  return wide_;
}
void CMsgSizePopup::set_wide(::google::protobuf::uint32 value) {
  set_has_wide();
  wide_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSizePopup.wide)
}

// optional uint32 tall = 5;
bool CMsgSizePopup::has_tall() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgSizePopup::set_has_tall() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgSizePopup::clear_has_tall() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgSizePopup::clear_tall() {
  tall_ = 0u;
  clear_has_tall();
}
::google::protobuf::uint32 CMsgSizePopup::tall() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSizePopup.tall)
  return tall_;
}
void CMsgSizePopup::set_tall(::google::protobuf::uint32 value) {
  set_has_tall();
  tall_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSizePopup.tall)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgOpenNewTab::kBrowserHandleFieldNumber;
const int CMsgOpenNewTab::kUrlFieldNumber;
const int CMsgOpenNewTab::kBForegroundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgOpenNewTab::CMsgOpenNewTab()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgOpenNewTab)
}
CMsgOpenNewTab::CMsgOpenNewTab(const CMsgOpenNewTab& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&bforeground_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(bforeground_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgOpenNewTab)
}

void CMsgOpenNewTab::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&bforeground_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(bforeground_));
}

CMsgOpenNewTab::~CMsgOpenNewTab() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgOpenNewTab)
  SharedDtor();
}

void CMsgOpenNewTab::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgOpenNewTab::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgOpenNewTab::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgOpenNewTab& CMsgOpenNewTab::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgOpenNewTab* CMsgOpenNewTab::New(::google::protobuf::Arena* arena) const {
  CMsgOpenNewTab* n = new CMsgOpenNewTab;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgOpenNewTab::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgOpenNewTab)
  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&bforeground_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(bforeground_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgOpenNewTab::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgOpenNewTab)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgOpenNewTab.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bForeground = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_bforeground();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bforeground_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgOpenNewTab)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgOpenNewTab)
  return false;
#undef DO_
}

void CMsgOpenNewTab::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgOpenNewTab)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgOpenNewTab.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional bool bForeground = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bforeground(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgOpenNewTab)
}

::google::protobuf::uint8* CMsgOpenNewTab::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgOpenNewTab)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgOpenNewTab.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional bool bForeground = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bforeground(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgOpenNewTab)
  return target;
}

size_t CMsgOpenNewTab::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgOpenNewTab)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional bool bForeground = 3;
    if (has_bforeground()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgOpenNewTab::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgOpenNewTab)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgOpenNewTab* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgOpenNewTab>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgOpenNewTab)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgOpenNewTab)
    MergeFrom(*source);
  }
}

void CMsgOpenNewTab::MergeFrom(const CMsgOpenNewTab& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgOpenNewTab)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      bforeground_ = from.bforeground_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgOpenNewTab::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgOpenNewTab)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgOpenNewTab::CopyFrom(const CMsgOpenNewTab& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgOpenNewTab)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgOpenNewTab::IsInitialized() const {
  return true;
}

void CMsgOpenNewTab::Swap(CMsgOpenNewTab* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgOpenNewTab::InternalSwap(CMsgOpenNewTab* other) {
  url_.Swap(&other->url_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(bforeground_, other->bforeground_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgOpenNewTab::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgOpenNewTab

// optional uint32 browser_handle = 1;
bool CMsgOpenNewTab::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgOpenNewTab::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgOpenNewTab::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgOpenNewTab::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgOpenNewTab::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgOpenNewTab.browser_handle)
  return browser_handle_;
}
void CMsgOpenNewTab::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgOpenNewTab.browser_handle)
}

// optional string url = 2;
bool CMsgOpenNewTab::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgOpenNewTab::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgOpenNewTab::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgOpenNewTab::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CMsgOpenNewTab::url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgOpenNewTab.url)
  return url_.GetNoArena();
}
void CMsgOpenNewTab::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgOpenNewTab.url)
}
#if LANG_CXX11
void CMsgOpenNewTab::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgOpenNewTab.url)
}
#endif
void CMsgOpenNewTab::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgOpenNewTab.url)
}
void CMsgOpenNewTab::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgOpenNewTab.url)
}
::std::string* CMsgOpenNewTab::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgOpenNewTab.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgOpenNewTab::release_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgOpenNewTab.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgOpenNewTab::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgOpenNewTab.url)
}

// optional bool bForeground = 3;
bool CMsgOpenNewTab::has_bforeground() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgOpenNewTab::set_has_bforeground() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgOpenNewTab::clear_has_bforeground() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgOpenNewTab::clear_bforeground() {
  bforeground_ = false;
  clear_has_bforeground();
}
bool CMsgOpenNewTab::bforeground() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgOpenNewTab.bForeground)
  return bforeground_;
}
void CMsgOpenNewTab::set_bforeground(bool value) {
  set_has_bforeground();
  bforeground_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgOpenNewTab.bForeground)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPopupHTMLWindow::kBrowserHandleFieldNumber;
const int CMsgPopupHTMLWindow::kUrlFieldNumber;
const int CMsgPopupHTMLWindow::kXFieldNumber;
const int CMsgPopupHTMLWindow::kYFieldNumber;
const int CMsgPopupHTMLWindow::kWideFieldNumber;
const int CMsgPopupHTMLWindow::kTallFieldNumber;
const int CMsgPopupHTMLWindow::kPopupIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPopupHTMLWindow::CMsgPopupHTMLWindow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgPopupHTMLWindow)
}
CMsgPopupHTMLWindow::CMsgPopupHTMLWindow(const CMsgPopupHTMLWindow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&popup_index_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(popup_index_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgPopupHTMLWindow)
}

void CMsgPopupHTMLWindow::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&popup_index_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(popup_index_));
}

CMsgPopupHTMLWindow::~CMsgPopupHTMLWindow() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgPopupHTMLWindow)
  SharedDtor();
}

void CMsgPopupHTMLWindow::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgPopupHTMLWindow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPopupHTMLWindow::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPopupHTMLWindow& CMsgPopupHTMLWindow::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPopupHTMLWindow* CMsgPopupHTMLWindow::New(::google::protobuf::Arena* arena) const {
  CMsgPopupHTMLWindow* n = new CMsgPopupHTMLWindow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPopupHTMLWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgPopupHTMLWindow)
  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&popup_index_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(popup_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPopupHTMLWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgPopupHTMLWindow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgPopupHTMLWindow.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wide = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_wide();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wide_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tall = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_tall();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tall_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 popup_index = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_popup_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &popup_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgPopupHTMLWindow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgPopupHTMLWindow)
  return false;
#undef DO_
}

void CMsgPopupHTMLWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgPopupHTMLWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgPopupHTMLWindow.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional uint32 x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->x(), output);
  }

  // optional uint32 y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->y(), output);
  }

  // optional uint32 wide = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->wide(), output);
  }

  // optional uint32 tall = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tall(), output);
  }

  // optional uint32 popup_index = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->popup_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgPopupHTMLWindow)
}

::google::protobuf::uint8* CMsgPopupHTMLWindow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgPopupHTMLWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgPopupHTMLWindow.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional uint32 x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->x(), target);
  }

  // optional uint32 y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->y(), target);
  }

  // optional uint32 wide = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->wide(), target);
  }

  // optional uint32 tall = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tall(), target);
  }

  // optional uint32 popup_index = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->popup_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgPopupHTMLWindow)
  return target;
}

size_t CMsgPopupHTMLWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgPopupHTMLWindow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 wide = 5;
    if (has_wide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wide());
    }

    // optional uint32 tall = 6;
    if (has_tall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tall());
    }

    // optional uint32 popup_index = 7;
    if (has_popup_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->popup_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPopupHTMLWindow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgPopupHTMLWindow)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPopupHTMLWindow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPopupHTMLWindow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgPopupHTMLWindow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgPopupHTMLWindow)
    MergeFrom(*source);
  }
}

void CMsgPopupHTMLWindow::MergeFrom(const CMsgPopupHTMLWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgPopupHTMLWindow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      wide_ = from.wide_;
    }
    if (cached_has_bits & 0x00000020u) {
      tall_ = from.tall_;
    }
    if (cached_has_bits & 0x00000040u) {
      popup_index_ = from.popup_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPopupHTMLWindow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgPopupHTMLWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPopupHTMLWindow::CopyFrom(const CMsgPopupHTMLWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgPopupHTMLWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPopupHTMLWindow::IsInitialized() const {
  return true;
}

void CMsgPopupHTMLWindow::Swap(CMsgPopupHTMLWindow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPopupHTMLWindow::InternalSwap(CMsgPopupHTMLWindow* other) {
  url_.Swap(&other->url_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(wide_, other->wide_);
  std::swap(tall_, other->tall_);
  std::swap(popup_index_, other->popup_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPopupHTMLWindow::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPopupHTMLWindow

// optional uint32 browser_handle = 1;
bool CMsgPopupHTMLWindow::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgPopupHTMLWindow::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgPopupHTMLWindow::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgPopupHTMLWindow::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgPopupHTMLWindow::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgPopupHTMLWindow.browser_handle)
  return browser_handle_;
}
void CMsgPopupHTMLWindow::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgPopupHTMLWindow.browser_handle)
}

// optional string url = 2;
bool CMsgPopupHTMLWindow::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPopupHTMLWindow::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPopupHTMLWindow::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPopupHTMLWindow::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CMsgPopupHTMLWindow::url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgPopupHTMLWindow.url)
  return url_.GetNoArena();
}
void CMsgPopupHTMLWindow::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgPopupHTMLWindow.url)
}
#if LANG_CXX11
void CMsgPopupHTMLWindow::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgPopupHTMLWindow.url)
}
#endif
void CMsgPopupHTMLWindow::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgPopupHTMLWindow.url)
}
void CMsgPopupHTMLWindow::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgPopupHTMLWindow.url)
}
::std::string* CMsgPopupHTMLWindow::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgPopupHTMLWindow.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgPopupHTMLWindow::release_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgPopupHTMLWindow.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgPopupHTMLWindow::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgPopupHTMLWindow.url)
}

// optional uint32 x = 3;
bool CMsgPopupHTMLWindow::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgPopupHTMLWindow::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgPopupHTMLWindow::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgPopupHTMLWindow::clear_x() {
  x_ = 0u;
  clear_has_x();
}
::google::protobuf::uint32 CMsgPopupHTMLWindow::x() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgPopupHTMLWindow.x)
  return x_;
}
void CMsgPopupHTMLWindow::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgPopupHTMLWindow.x)
}

// optional uint32 y = 4;
bool CMsgPopupHTMLWindow::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgPopupHTMLWindow::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgPopupHTMLWindow::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgPopupHTMLWindow::clear_y() {
  y_ = 0u;
  clear_has_y();
}
::google::protobuf::uint32 CMsgPopupHTMLWindow::y() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgPopupHTMLWindow.y)
  return y_;
}
void CMsgPopupHTMLWindow::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgPopupHTMLWindow.y)
}

// optional uint32 wide = 5;
bool CMsgPopupHTMLWindow::has_wide() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgPopupHTMLWindow::set_has_wide() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgPopupHTMLWindow::clear_has_wide() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgPopupHTMLWindow::clear_wide() {
  wide_ = 0u;
  clear_has_wide();
}
::google::protobuf::uint32 CMsgPopupHTMLWindow::wide() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgPopupHTMLWindow.wide)
  return wide_;
}
void CMsgPopupHTMLWindow::set_wide(::google::protobuf::uint32 value) {
  set_has_wide();
  wide_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgPopupHTMLWindow.wide)
}

// optional uint32 tall = 6;
bool CMsgPopupHTMLWindow::has_tall() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgPopupHTMLWindow::set_has_tall() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgPopupHTMLWindow::clear_has_tall() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgPopupHTMLWindow::clear_tall() {
  tall_ = 0u;
  clear_has_tall();
}
::google::protobuf::uint32 CMsgPopupHTMLWindow::tall() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgPopupHTMLWindow.tall)
  return tall_;
}
void CMsgPopupHTMLWindow::set_tall(::google::protobuf::uint32 value) {
  set_has_tall();
  tall_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgPopupHTMLWindow.tall)
}

// optional uint32 popup_index = 7;
bool CMsgPopupHTMLWindow::has_popup_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgPopupHTMLWindow::set_has_popup_index() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgPopupHTMLWindow::clear_has_popup_index() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgPopupHTMLWindow::clear_popup_index() {
  popup_index_ = 0u;
  clear_has_popup_index();
}
::google::protobuf::uint32 CMsgPopupHTMLWindow::popup_index() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgPopupHTMLWindow.popup_index)
  return popup_index_;
}
void CMsgPopupHTMLWindow::set_popup_index(::google::protobuf::uint32 value) {
  set_has_popup_index();
  popup_index_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgPopupHTMLWindow.popup_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPopupHTMLWindowResponse::kBrowserHandleFieldNumber;
const int CMsgPopupHTMLWindowResponse::kBAllowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPopupHTMLWindowResponse::CMsgPopupHTMLWindowResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgPopupHTMLWindowResponse)
}
CMsgPopupHTMLWindowResponse::CMsgPopupHTMLWindowResponse(const CMsgPopupHTMLWindowResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&ballow_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(ballow_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgPopupHTMLWindowResponse)
}

void CMsgPopupHTMLWindowResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&ballow_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(ballow_));
}

CMsgPopupHTMLWindowResponse::~CMsgPopupHTMLWindowResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgPopupHTMLWindowResponse)
  SharedDtor();
}

void CMsgPopupHTMLWindowResponse::SharedDtor() {
}

void CMsgPopupHTMLWindowResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPopupHTMLWindowResponse::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPopupHTMLWindowResponse& CMsgPopupHTMLWindowResponse::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPopupHTMLWindowResponse* CMsgPopupHTMLWindowResponse::New(::google::protobuf::Arena* arena) const {
  CMsgPopupHTMLWindowResponse* n = new CMsgPopupHTMLWindowResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPopupHTMLWindowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgPopupHTMLWindowResponse)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&ballow_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(ballow_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPopupHTMLWindowResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgPopupHTMLWindowResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bAllow = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ballow();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ballow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgPopupHTMLWindowResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgPopupHTMLWindowResponse)
  return false;
#undef DO_
}

void CMsgPopupHTMLWindowResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgPopupHTMLWindowResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional bool bAllow = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ballow(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgPopupHTMLWindowResponse)
}

::google::protobuf::uint8* CMsgPopupHTMLWindowResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgPopupHTMLWindowResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional bool bAllow = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ballow(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgPopupHTMLWindowResponse)
  return target;
}

size_t CMsgPopupHTMLWindowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgPopupHTMLWindowResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional bool bAllow = 2;
    if (has_ballow()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPopupHTMLWindowResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgPopupHTMLWindowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPopupHTMLWindowResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPopupHTMLWindowResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgPopupHTMLWindowResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgPopupHTMLWindowResponse)
    MergeFrom(*source);
  }
}

void CMsgPopupHTMLWindowResponse::MergeFrom(const CMsgPopupHTMLWindowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgPopupHTMLWindowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      ballow_ = from.ballow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPopupHTMLWindowResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgPopupHTMLWindowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPopupHTMLWindowResponse::CopyFrom(const CMsgPopupHTMLWindowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgPopupHTMLWindowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPopupHTMLWindowResponse::IsInitialized() const {
  return true;
}

void CMsgPopupHTMLWindowResponse::Swap(CMsgPopupHTMLWindowResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPopupHTMLWindowResponse::InternalSwap(CMsgPopupHTMLWindowResponse* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(ballow_, other->ballow_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPopupHTMLWindowResponse::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPopupHTMLWindowResponse

// optional uint32 browser_handle = 1;
bool CMsgPopupHTMLWindowResponse::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPopupHTMLWindowResponse::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPopupHTMLWindowResponse::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPopupHTMLWindowResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgPopupHTMLWindowResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgPopupHTMLWindowResponse.browser_handle)
  return browser_handle_;
}
void CMsgPopupHTMLWindowResponse::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgPopupHTMLWindowResponse.browser_handle)
}

// optional bool bAllow = 2;
bool CMsgPopupHTMLWindowResponse::has_ballow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgPopupHTMLWindowResponse::set_has_ballow() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgPopupHTMLWindowResponse::clear_has_ballow() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgPopupHTMLWindowResponse::clear_ballow() {
  ballow_ = false;
  clear_has_ballow();
}
bool CMsgPopupHTMLWindowResponse::ballow() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgPopupHTMLWindowResponse.bAllow)
  return ballow_;
}
void CMsgPopupHTMLWindowResponse::set_ballow(bool value) {
  set_has_ballow();
  ballow_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgPopupHTMLWindowResponse.bAllow)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetHTMLTitle::kBrowserHandleFieldNumber;
const int CMsgSetHTMLTitle::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetHTMLTitle::CMsgSetHTMLTitle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetHTMLTitle)
}
CMsgSetHTMLTitle::CMsgSetHTMLTitle(const CMsgSetHTMLTitle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetHTMLTitle)
}

void CMsgSetHTMLTitle::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgSetHTMLTitle::~CMsgSetHTMLTitle() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetHTMLTitle)
  SharedDtor();
}

void CMsgSetHTMLTitle::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSetHTMLTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetHTMLTitle::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSetHTMLTitle& CMsgSetHTMLTitle::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSetHTMLTitle* CMsgSetHTMLTitle::New(::google::protobuf::Arena* arena) const {
  CMsgSetHTMLTitle* n = new CMsgSetHTMLTitle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSetHTMLTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetHTMLTitle)
  if (has_title()) {
    GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*title_.UnsafeRawStringPointer())->clear();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSetHTMLTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetHTMLTitle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetHTMLTitle.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetHTMLTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetHTMLTitle)
  return false;
#undef DO_
}

void CMsgSetHTMLTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetHTMLTitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetHTMLTitle.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetHTMLTitle)
}

::google::protobuf::uint8* CMsgSetHTMLTitle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetHTMLTitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetHTMLTitle.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetHTMLTitle)
  return target;
}

size_t CMsgSetHTMLTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetHTMLTitle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetHTMLTitle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetHTMLTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetHTMLTitle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSetHTMLTitle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetHTMLTitle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetHTMLTitle)
    MergeFrom(*source);
  }
}

void CMsgSetHTMLTitle::MergeFrom(const CMsgSetHTMLTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetHTMLTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetHTMLTitle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetHTMLTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetHTMLTitle::CopyFrom(const CMsgSetHTMLTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetHTMLTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetHTMLTitle::IsInitialized() const {
  return true;
}

void CMsgSetHTMLTitle::Swap(CMsgSetHTMLTitle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetHTMLTitle::InternalSwap(CMsgSetHTMLTitle* other) {
  title_.Swap(&other->title_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSetHTMLTitle::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSetHTMLTitle

// optional uint32 browser_handle = 1;
bool CMsgSetHTMLTitle::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSetHTMLTitle::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSetHTMLTitle::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSetHTMLTitle::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgSetHTMLTitle::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetHTMLTitle.browser_handle)
  return browser_handle_;
}
void CMsgSetHTMLTitle::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetHTMLTitle.browser_handle)
}

// optional string title = 2;
bool CMsgSetHTMLTitle::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSetHTMLTitle::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSetHTMLTitle::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSetHTMLTitle::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& CMsgSetHTMLTitle::title() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetHTMLTitle.title)
  return title_.GetNoArena();
}
void CMsgSetHTMLTitle::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetHTMLTitle.title)
}
#if LANG_CXX11
void CMsgSetHTMLTitle::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSetHTMLTitle.title)
}
#endif
void CMsgSetHTMLTitle::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSetHTMLTitle.title)
}
void CMsgSetHTMLTitle::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSetHTMLTitle.title)
}
::std::string* CMsgSetHTMLTitle::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSetHTMLTitle.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSetHTMLTitle::release_title() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSetHTMLTitle.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSetHTMLTitle::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSetHTMLTitle.title)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLoadingResource::kBrowserHandleFieldNumber;
const int CMsgLoadingResource::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLoadingResource::CMsgLoadingResource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgLoadingResource)
}
CMsgLoadingResource::CMsgLoadingResource(const CMsgLoadingResource& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgLoadingResource)
}

void CMsgLoadingResource::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgLoadingResource::~CMsgLoadingResource() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgLoadingResource)
  SharedDtor();
}

void CMsgLoadingResource::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgLoadingResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLoadingResource::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgLoadingResource& CMsgLoadingResource::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgLoadingResource* CMsgLoadingResource::New(::google::protobuf::Arena* arena) const {
  CMsgLoadingResource* n = new CMsgLoadingResource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLoadingResource::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgLoadingResource)
  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgLoadingResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgLoadingResource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgLoadingResource.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgLoadingResource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgLoadingResource)
  return false;
#undef DO_
}

void CMsgLoadingResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgLoadingResource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLoadingResource.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgLoadingResource)
}

::google::protobuf::uint8* CMsgLoadingResource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgLoadingResource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLoadingResource.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgLoadingResource)
  return target;
}

size_t CMsgLoadingResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgLoadingResource)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLoadingResource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgLoadingResource)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLoadingResource* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLoadingResource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgLoadingResource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgLoadingResource)
    MergeFrom(*source);
  }
}

void CMsgLoadingResource::MergeFrom(const CMsgLoadingResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgLoadingResource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLoadingResource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgLoadingResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLoadingResource::CopyFrom(const CMsgLoadingResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgLoadingResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLoadingResource::IsInitialized() const {
  return true;
}

void CMsgLoadingResource::Swap(CMsgLoadingResource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLoadingResource::InternalSwap(CMsgLoadingResource* other) {
  url_.Swap(&other->url_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLoadingResource::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgLoadingResource

// optional uint32 browser_handle = 1;
bool CMsgLoadingResource::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgLoadingResource::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgLoadingResource::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgLoadingResource::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgLoadingResource::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgLoadingResource.browser_handle)
  return browser_handle_;
}
void CMsgLoadingResource::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgLoadingResource.browser_handle)
}

// optional string url = 2;
bool CMsgLoadingResource::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgLoadingResource::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgLoadingResource::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgLoadingResource::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CMsgLoadingResource::url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgLoadingResource.url)
  return url_.GetNoArena();
}
void CMsgLoadingResource::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgLoadingResource.url)
}
#if LANG_CXX11
void CMsgLoadingResource::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgLoadingResource.url)
}
#endif
void CMsgLoadingResource::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgLoadingResource.url)
}
void CMsgLoadingResource::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgLoadingResource.url)
}
::std::string* CMsgLoadingResource::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgLoadingResource.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgLoadingResource::release_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgLoadingResource.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgLoadingResource::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgLoadingResource.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgStatusText::kBrowserHandleFieldNumber;
const int CMsgStatusText::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgStatusText::CMsgStatusText()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgStatusText)
}
CMsgStatusText::CMsgStatusText(const CMsgStatusText& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgStatusText)
}

void CMsgStatusText::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgStatusText::~CMsgStatusText() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgStatusText)
  SharedDtor();
}

void CMsgStatusText::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgStatusText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStatusText::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgStatusText& CMsgStatusText::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgStatusText* CMsgStatusText::New(::google::protobuf::Arena* arena) const {
  CMsgStatusText* n = new CMsgStatusText;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgStatusText::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgStatusText)
  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgStatusText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgStatusText)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgStatusText.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgStatusText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgStatusText)
  return false;
#undef DO_
}

void CMsgStatusText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgStatusText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgStatusText.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgStatusText)
}

::google::protobuf::uint8* CMsgStatusText::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgStatusText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgStatusText.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgStatusText)
  return target;
}

size_t CMsgStatusText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgStatusText)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStatusText::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgStatusText)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStatusText* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgStatusText>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgStatusText)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgStatusText)
    MergeFrom(*source);
  }
}

void CMsgStatusText::MergeFrom(const CMsgStatusText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgStatusText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgStatusText::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgStatusText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStatusText::CopyFrom(const CMsgStatusText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgStatusText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStatusText::IsInitialized() const {
  return true;
}

void CMsgStatusText::Swap(CMsgStatusText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgStatusText::InternalSwap(CMsgStatusText* other) {
  text_.Swap(&other->text_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgStatusText::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgStatusText

// optional uint32 browser_handle = 1;
bool CMsgStatusText::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgStatusText::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgStatusText::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgStatusText::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgStatusText::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgStatusText.browser_handle)
  return browser_handle_;
}
void CMsgStatusText::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgStatusText.browser_handle)
}

// optional string text = 2;
bool CMsgStatusText::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgStatusText::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgStatusText::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgStatusText::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& CMsgStatusText::text() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgStatusText.text)
  return text_.GetNoArena();
}
void CMsgStatusText::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgStatusText.text)
}
#if LANG_CXX11
void CMsgStatusText::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgStatusText.text)
}
#endif
void CMsgStatusText::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgStatusText.text)
}
void CMsgStatusText::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgStatusText.text)
}
::std::string* CMsgStatusText::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgStatusText.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgStatusText::release_text() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgStatusText.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgStatusText::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgStatusText.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetCursor::kBrowserHandleFieldNumber;
const int CMsgSetCursor::kCursorFieldNumber;
const int CMsgSetCursor::kCustomDataFieldNumber;
const int CMsgSetCursor::kWideFieldNumber;
const int CMsgSetCursor::kTallFieldNumber;
const int CMsgSetCursor::kXhotspotFieldNumber;
const int CMsgSetCursor::kYhotspotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetCursor::CMsgSetCursor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetCursor)
}
CMsgSetCursor::CMsgSetCursor(const CMsgSetCursor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  custom_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_data()) {
    custom_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_data_);
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&yhotspot_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(yhotspot_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetCursor)
}

void CMsgSetCursor::SharedCtor() {
  _cached_size_ = 0;
  custom_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&yhotspot_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(yhotspot_));
}

CMsgSetCursor::~CMsgSetCursor() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetCursor)
  SharedDtor();
}

void CMsgSetCursor::SharedDtor() {
  custom_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSetCursor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetCursor::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSetCursor& CMsgSetCursor::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSetCursor* CMsgSetCursor::New(::google::protobuf::Arena* arena) const {
  CMsgSetCursor* n = new CMsgSetCursor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSetCursor::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetCursor)
  if (has_custom_data()) {
    GOOGLE_DCHECK(!custom_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*custom_data_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&yhotspot_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(yhotspot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSetCursor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetCursor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cursor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_cursor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cursor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes custom_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_custom_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wide = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_wide();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wide_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tall = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_tall();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tall_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 xhotspot = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_xhotspot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xhotspot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 yhotspot = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_yhotspot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yhotspot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetCursor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetCursor)
  return false;
#undef DO_
}

void CMsgSetCursor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetCursor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 cursor = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cursor(), output);
  }

  // optional bytes custom_data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->custom_data(), output);
  }

  // optional uint32 wide = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wide(), output);
  }

  // optional uint32 tall = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tall(), output);
  }

  // optional uint32 xhotspot = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->xhotspot(), output);
  }

  // optional uint32 yhotspot = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->yhotspot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetCursor)
}

::google::protobuf::uint8* CMsgSetCursor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetCursor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 cursor = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cursor(), target);
  }

  // optional bytes custom_data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->custom_data(), target);
  }

  // optional uint32 wide = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wide(), target);
  }

  // optional uint32 tall = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tall(), target);
  }

  // optional uint32 xhotspot = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->xhotspot(), target);
  }

  // optional uint32 yhotspot = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->yhotspot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetCursor)
  return target;
}

size_t CMsgSetCursor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetCursor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes custom_data = 3;
    if (has_custom_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->custom_data());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 cursor = 2;
    if (has_cursor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cursor());
    }

    // optional uint32 wide = 4;
    if (has_wide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wide());
    }

    // optional uint32 tall = 5;
    if (has_tall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tall());
    }

    // optional uint32 xhotspot = 6;
    if (has_xhotspot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xhotspot());
    }

    // optional uint32 yhotspot = 7;
    if (has_yhotspot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yhotspot());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetCursor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetCursor)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetCursor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSetCursor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetCursor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetCursor)
    MergeFrom(*source);
  }
}

void CMsgSetCursor::MergeFrom(const CMsgSetCursor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetCursor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_custom_data();
      custom_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      cursor_ = from.cursor_;
    }
    if (cached_has_bits & 0x00000008u) {
      wide_ = from.wide_;
    }
    if (cached_has_bits & 0x00000010u) {
      tall_ = from.tall_;
    }
    if (cached_has_bits & 0x00000020u) {
      xhotspot_ = from.xhotspot_;
    }
    if (cached_has_bits & 0x00000040u) {
      yhotspot_ = from.yhotspot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetCursor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetCursor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetCursor::CopyFrom(const CMsgSetCursor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetCursor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetCursor::IsInitialized() const {
  return true;
}

void CMsgSetCursor::Swap(CMsgSetCursor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetCursor::InternalSwap(CMsgSetCursor* other) {
  custom_data_.Swap(&other->custom_data_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(cursor_, other->cursor_);
  std::swap(wide_, other->wide_);
  std::swap(tall_, other->tall_);
  std::swap(xhotspot_, other->xhotspot_);
  std::swap(yhotspot_, other->yhotspot_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSetCursor::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSetCursor

// optional uint32 browser_handle = 1;
bool CMsgSetCursor::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSetCursor::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSetCursor::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSetCursor::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgSetCursor::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetCursor.browser_handle)
  return browser_handle_;
}
void CMsgSetCursor::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetCursor.browser_handle)
}

// optional uint32 cursor = 2;
bool CMsgSetCursor::has_cursor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSetCursor::set_has_cursor() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSetCursor::clear_has_cursor() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSetCursor::clear_cursor() {
  cursor_ = 0u;
  clear_has_cursor();
}
::google::protobuf::uint32 CMsgSetCursor::cursor() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetCursor.cursor)
  return cursor_;
}
void CMsgSetCursor::set_cursor(::google::protobuf::uint32 value) {
  set_has_cursor();
  cursor_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetCursor.cursor)
}

// optional bytes custom_data = 3;
bool CMsgSetCursor::has_custom_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSetCursor::set_has_custom_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSetCursor::clear_has_custom_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSetCursor::clear_custom_data() {
  custom_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_custom_data();
}
const ::std::string& CMsgSetCursor::custom_data() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetCursor.custom_data)
  return custom_data_.GetNoArena();
}
void CMsgSetCursor::set_custom_data(const ::std::string& value) {
  set_has_custom_data();
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetCursor.custom_data)
}
#if LANG_CXX11
void CMsgSetCursor::set_custom_data(::std::string&& value) {
  set_has_custom_data();
  custom_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSetCursor.custom_data)
}
#endif
void CMsgSetCursor::set_custom_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_custom_data();
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSetCursor.custom_data)
}
void CMsgSetCursor::set_custom_data(const void* value, size_t size) {
  set_has_custom_data();
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSetCursor.custom_data)
}
::std::string* CMsgSetCursor::mutable_custom_data() {
  set_has_custom_data();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSetCursor.custom_data)
  return custom_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSetCursor::release_custom_data() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSetCursor.custom_data)
  clear_has_custom_data();
  return custom_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSetCursor::set_allocated_custom_data(::std::string* custom_data) {
  if (custom_data != NULL) {
    set_has_custom_data();
  } else {
    clear_has_custom_data();
  }
  custom_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_data);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSetCursor.custom_data)
}

// optional uint32 wide = 4;
bool CMsgSetCursor::has_wide() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSetCursor::set_has_wide() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSetCursor::clear_has_wide() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSetCursor::clear_wide() {
  wide_ = 0u;
  clear_has_wide();
}
::google::protobuf::uint32 CMsgSetCursor::wide() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetCursor.wide)
  return wide_;
}
void CMsgSetCursor::set_wide(::google::protobuf::uint32 value) {
  set_has_wide();
  wide_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetCursor.wide)
}

// optional uint32 tall = 5;
bool CMsgSetCursor::has_tall() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgSetCursor::set_has_tall() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgSetCursor::clear_has_tall() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgSetCursor::clear_tall() {
  tall_ = 0u;
  clear_has_tall();
}
::google::protobuf::uint32 CMsgSetCursor::tall() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetCursor.tall)
  return tall_;
}
void CMsgSetCursor::set_tall(::google::protobuf::uint32 value) {
  set_has_tall();
  tall_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetCursor.tall)
}

// optional uint32 xhotspot = 6;
bool CMsgSetCursor::has_xhotspot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgSetCursor::set_has_xhotspot() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgSetCursor::clear_has_xhotspot() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgSetCursor::clear_xhotspot() {
  xhotspot_ = 0u;
  clear_has_xhotspot();
}
::google::protobuf::uint32 CMsgSetCursor::xhotspot() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetCursor.xhotspot)
  return xhotspot_;
}
void CMsgSetCursor::set_xhotspot(::google::protobuf::uint32 value) {
  set_has_xhotspot();
  xhotspot_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetCursor.xhotspot)
}

// optional uint32 yhotspot = 7;
bool CMsgSetCursor::has_yhotspot() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgSetCursor::set_has_yhotspot() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgSetCursor::clear_has_yhotspot() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgSetCursor::clear_yhotspot() {
  yhotspot_ = 0u;
  clear_has_yhotspot();
}
::google::protobuf::uint32 CMsgSetCursor::yhotspot() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetCursor.yhotspot)
  return yhotspot_;
}
void CMsgSetCursor::set_yhotspot(::google::protobuf::uint32 value) {
  set_has_yhotspot();
  yhotspot_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetCursor.yhotspot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgFileLoadDialog::kBrowserHandleFieldNumber;
const int CMsgFileLoadDialog::kTitleFieldNumber;
const int CMsgFileLoadDialog::kInitialFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgFileLoadDialog::CMsgFileLoadDialog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgFileLoadDialog)
}
CMsgFileLoadDialog::CMsgFileLoadDialog(const CMsgFileLoadDialog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  initialfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_initialfile()) {
    initialfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.initialfile_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgFileLoadDialog)
}

void CMsgFileLoadDialog::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initialfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgFileLoadDialog::~CMsgFileLoadDialog() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgFileLoadDialog)
  SharedDtor();
}

void CMsgFileLoadDialog::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initialfile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgFileLoadDialog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFileLoadDialog::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgFileLoadDialog& CMsgFileLoadDialog::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgFileLoadDialog* CMsgFileLoadDialog::New(::google::protobuf::Arena* arena) const {
  CMsgFileLoadDialog* n = new CMsgFileLoadDialog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgFileLoadDialog::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgFileLoadDialog)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_initialfile()) {
      GOOGLE_DCHECK(!initialfile_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*initialfile_.UnsafeRawStringPointer())->clear();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgFileLoadDialog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgFileLoadDialog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgFileLoadDialog.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string initialFile = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initialfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->initialfile().data(), this->initialfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgFileLoadDialog.initialFile");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgFileLoadDialog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgFileLoadDialog)
  return false;
#undef DO_
}

void CMsgFileLoadDialog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgFileLoadDialog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFileLoadDialog.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string initialFile = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initialfile().data(), this->initialfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFileLoadDialog.initialFile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->initialfile(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgFileLoadDialog)
}

::google::protobuf::uint8* CMsgFileLoadDialog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgFileLoadDialog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFileLoadDialog.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string initialFile = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initialfile().data(), this->initialfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFileLoadDialog.initialFile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->initialfile(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgFileLoadDialog)
  return target;
}

size_t CMsgFileLoadDialog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgFileLoadDialog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string initialFile = 3;
    if (has_initialfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initialfile());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFileLoadDialog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgFileLoadDialog)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFileLoadDialog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgFileLoadDialog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgFileLoadDialog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgFileLoadDialog)
    MergeFrom(*source);
  }
}

void CMsgFileLoadDialog::MergeFrom(const CMsgFileLoadDialog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgFileLoadDialog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_initialfile();
      initialfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.initialfile_);
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgFileLoadDialog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgFileLoadDialog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFileLoadDialog::CopyFrom(const CMsgFileLoadDialog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgFileLoadDialog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFileLoadDialog::IsInitialized() const {
  return true;
}

void CMsgFileLoadDialog::Swap(CMsgFileLoadDialog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgFileLoadDialog::InternalSwap(CMsgFileLoadDialog* other) {
  title_.Swap(&other->title_);
  initialfile_.Swap(&other->initialfile_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgFileLoadDialog::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgFileLoadDialog

// optional uint32 browser_handle = 1;
bool CMsgFileLoadDialog::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgFileLoadDialog::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgFileLoadDialog::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgFileLoadDialog::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgFileLoadDialog::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgFileLoadDialog.browser_handle)
  return browser_handle_;
}
void CMsgFileLoadDialog::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgFileLoadDialog.browser_handle)
}

// optional string title = 2;
bool CMsgFileLoadDialog::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgFileLoadDialog::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgFileLoadDialog::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgFileLoadDialog::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& CMsgFileLoadDialog::title() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgFileLoadDialog.title)
  return title_.GetNoArena();
}
void CMsgFileLoadDialog::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgFileLoadDialog.title)
}
#if LANG_CXX11
void CMsgFileLoadDialog::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgFileLoadDialog.title)
}
#endif
void CMsgFileLoadDialog::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgFileLoadDialog.title)
}
void CMsgFileLoadDialog::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgFileLoadDialog.title)
}
::std::string* CMsgFileLoadDialog::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgFileLoadDialog.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgFileLoadDialog::release_title() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgFileLoadDialog.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgFileLoadDialog::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgFileLoadDialog.title)
}

// optional string initialFile = 3;
bool CMsgFileLoadDialog::has_initialfile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgFileLoadDialog::set_has_initialfile() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgFileLoadDialog::clear_has_initialfile() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgFileLoadDialog::clear_initialfile() {
  initialfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_initialfile();
}
const ::std::string& CMsgFileLoadDialog::initialfile() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgFileLoadDialog.initialFile)
  return initialfile_.GetNoArena();
}
void CMsgFileLoadDialog::set_initialfile(const ::std::string& value) {
  set_has_initialfile();
  initialfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgFileLoadDialog.initialFile)
}
#if LANG_CXX11
void CMsgFileLoadDialog::set_initialfile(::std::string&& value) {
  set_has_initialfile();
  initialfile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgFileLoadDialog.initialFile)
}
#endif
void CMsgFileLoadDialog::set_initialfile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_initialfile();
  initialfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgFileLoadDialog.initialFile)
}
void CMsgFileLoadDialog::set_initialfile(const char* value, size_t size) {
  set_has_initialfile();
  initialfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgFileLoadDialog.initialFile)
}
::std::string* CMsgFileLoadDialog::mutable_initialfile() {
  set_has_initialfile();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgFileLoadDialog.initialFile)
  return initialfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgFileLoadDialog::release_initialfile() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgFileLoadDialog.initialFile)
  clear_has_initialfile();
  return initialfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgFileLoadDialog::set_allocated_initialfile(::std::string* initialfile) {
  if (initialfile != NULL) {
    set_has_initialfile();
  } else {
    clear_has_initialfile();
  }
  initialfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), initialfile);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgFileLoadDialog.initialFile)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgFileLoadDialogResponse::kBrowserHandleFieldNumber;
const int CMsgFileLoadDialogResponse::kFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgFileLoadDialogResponse::CMsgFileLoadDialogResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgFileLoadDialogResponse)
}
CMsgFileLoadDialogResponse::CMsgFileLoadDialogResponse(const CMsgFileLoadDialogResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      files_(from.files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgFileLoadDialogResponse)
}

void CMsgFileLoadDialogResponse::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgFileLoadDialogResponse::~CMsgFileLoadDialogResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgFileLoadDialogResponse)
  SharedDtor();
}

void CMsgFileLoadDialogResponse::SharedDtor() {
}

void CMsgFileLoadDialogResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFileLoadDialogResponse::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgFileLoadDialogResponse& CMsgFileLoadDialogResponse::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgFileLoadDialogResponse* CMsgFileLoadDialogResponse::New(::google::protobuf::Arena* arena) const {
  CMsgFileLoadDialogResponse* n = new CMsgFileLoadDialogResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgFileLoadDialogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgFileLoadDialogResponse)
  files_.Clear();
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgFileLoadDialogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgFileLoadDialogResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string files = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_files()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->files(this->files_size() - 1).data(),
            this->files(this->files_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgFileLoadDialogResponse.files");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgFileLoadDialogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgFileLoadDialogResponse)
  return false;
#undef DO_
}

void CMsgFileLoadDialogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgFileLoadDialogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // repeated string files = 2;
  for (int i = 0, n = this->files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->files(i).data(), this->files(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFileLoadDialogResponse.files");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->files(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgFileLoadDialogResponse)
}

::google::protobuf::uint8* CMsgFileLoadDialogResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgFileLoadDialogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // repeated string files = 2;
  for (int i = 0, n = this->files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->files(i).data(), this->files(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFileLoadDialogResponse.files");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->files(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgFileLoadDialogResponse)
  return target;
}

size_t CMsgFileLoadDialogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgFileLoadDialogResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string files = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->files_size());
  for (int i = 0, n = this->files_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->files(i));
  }

  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFileLoadDialogResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgFileLoadDialogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFileLoadDialogResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgFileLoadDialogResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgFileLoadDialogResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgFileLoadDialogResponse)
    MergeFrom(*source);
  }
}

void CMsgFileLoadDialogResponse::MergeFrom(const CMsgFileLoadDialogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgFileLoadDialogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgFileLoadDialogResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgFileLoadDialogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFileLoadDialogResponse::CopyFrom(const CMsgFileLoadDialogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgFileLoadDialogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFileLoadDialogResponse::IsInitialized() const {
  return true;
}

void CMsgFileLoadDialogResponse::Swap(CMsgFileLoadDialogResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgFileLoadDialogResponse::InternalSwap(CMsgFileLoadDialogResponse* other) {
  files_.InternalSwap(&other->files_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgFileLoadDialogResponse::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgFileLoadDialogResponse

// optional uint32 browser_handle = 1;
bool CMsgFileLoadDialogResponse::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgFileLoadDialogResponse::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgFileLoadDialogResponse::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgFileLoadDialogResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgFileLoadDialogResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgFileLoadDialogResponse.browser_handle)
  return browser_handle_;
}
void CMsgFileLoadDialogResponse::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgFileLoadDialogResponse.browser_handle)
}

// repeated string files = 2;
int CMsgFileLoadDialogResponse::files_size() const {
  return files_.size();
}
void CMsgFileLoadDialogResponse::clear_files() {
  files_.Clear();
}
const ::std::string& CMsgFileLoadDialogResponse::files(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgFileLoadDialogResponse.files)
  return files_.Get(index);
}
::std::string* CMsgFileLoadDialogResponse::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgFileLoadDialogResponse.files)
  return files_.Mutable(index);
}
void CMsgFileLoadDialogResponse::set_files(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CMsgFileLoadDialogResponse.files)
  files_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CMsgFileLoadDialogResponse::set_files(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CMsgFileLoadDialogResponse.files)
  files_.Mutable(index)->assign(std::move(value));
}
#endif
void CMsgFileLoadDialogResponse::set_files(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgFileLoadDialogResponse.files)
}
void CMsgFileLoadDialogResponse::set_files(int index, const char* value, size_t size) {
  files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgFileLoadDialogResponse.files)
}
::std::string* CMsgFileLoadDialogResponse::add_files() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CMsgFileLoadDialogResponse.files)
  return files_.Add();
}
void CMsgFileLoadDialogResponse::add_files(const ::std::string& value) {
  files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgFileLoadDialogResponse.files)
}
#if LANG_CXX11
void CMsgFileLoadDialogResponse::add_files(::std::string&& value) {
  files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CMsgFileLoadDialogResponse.files)
}
#endif
void CMsgFileLoadDialogResponse::add_files(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CMsgFileLoadDialogResponse.files)
}
void CMsgFileLoadDialogResponse::add_files(const char* value, size_t size) {
  files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CMsgFileLoadDialogResponse.files)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgFileLoadDialogResponse::files() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgFileLoadDialogResponse.files)
  return files_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgFileLoadDialogResponse::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgFileLoadDialogResponse.files)
  return &files_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgShowToolTip::kBrowserHandleFieldNumber;
const int CMsgShowToolTip::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgShowToolTip::CMsgShowToolTip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgShowToolTip)
}
CMsgShowToolTip::CMsgShowToolTip(const CMsgShowToolTip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgShowToolTip)
}

void CMsgShowToolTip::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgShowToolTip::~CMsgShowToolTip() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgShowToolTip)
  SharedDtor();
}

void CMsgShowToolTip::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgShowToolTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgShowToolTip::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgShowToolTip& CMsgShowToolTip::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgShowToolTip* CMsgShowToolTip::New(::google::protobuf::Arena* arena) const {
  CMsgShowToolTip* n = new CMsgShowToolTip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgShowToolTip::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgShowToolTip)
  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgShowToolTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgShowToolTip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgShowToolTip.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgShowToolTip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgShowToolTip)
  return false;
#undef DO_
}

void CMsgShowToolTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgShowToolTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgShowToolTip.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgShowToolTip)
}

::google::protobuf::uint8* CMsgShowToolTip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgShowToolTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgShowToolTip.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgShowToolTip)
  return target;
}

size_t CMsgShowToolTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgShowToolTip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgShowToolTip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgShowToolTip)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgShowToolTip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgShowToolTip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgShowToolTip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgShowToolTip)
    MergeFrom(*source);
  }
}

void CMsgShowToolTip::MergeFrom(const CMsgShowToolTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgShowToolTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgShowToolTip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgShowToolTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgShowToolTip::CopyFrom(const CMsgShowToolTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgShowToolTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowToolTip::IsInitialized() const {
  return true;
}

void CMsgShowToolTip::Swap(CMsgShowToolTip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgShowToolTip::InternalSwap(CMsgShowToolTip* other) {
  text_.Swap(&other->text_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgShowToolTip::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgShowToolTip

// optional uint32 browser_handle = 1;
bool CMsgShowToolTip::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgShowToolTip::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgShowToolTip::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgShowToolTip::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgShowToolTip::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgShowToolTip.browser_handle)
  return browser_handle_;
}
void CMsgShowToolTip::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgShowToolTip.browser_handle)
}

// optional string text = 2;
bool CMsgShowToolTip::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgShowToolTip::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgShowToolTip::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgShowToolTip::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& CMsgShowToolTip::text() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgShowToolTip.text)
  return text_.GetNoArena();
}
void CMsgShowToolTip::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgShowToolTip.text)
}
#if LANG_CXX11
void CMsgShowToolTip::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgShowToolTip.text)
}
#endif
void CMsgShowToolTip::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgShowToolTip.text)
}
void CMsgShowToolTip::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgShowToolTip.text)
}
::std::string* CMsgShowToolTip::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgShowToolTip.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgShowToolTip::release_text() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgShowToolTip.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgShowToolTip::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgShowToolTip.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgUpdateToolTip::kBrowserHandleFieldNumber;
const int CMsgUpdateToolTip::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgUpdateToolTip::CMsgUpdateToolTip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgUpdateToolTip)
}
CMsgUpdateToolTip::CMsgUpdateToolTip(const CMsgUpdateToolTip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgUpdateToolTip)
}

void CMsgUpdateToolTip::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgUpdateToolTip::~CMsgUpdateToolTip() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgUpdateToolTip)
  SharedDtor();
}

void CMsgUpdateToolTip::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgUpdateToolTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgUpdateToolTip::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgUpdateToolTip& CMsgUpdateToolTip::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgUpdateToolTip* CMsgUpdateToolTip::New(::google::protobuf::Arena* arena) const {
  CMsgUpdateToolTip* n = new CMsgUpdateToolTip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgUpdateToolTip::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgUpdateToolTip)
  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgUpdateToolTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgUpdateToolTip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgUpdateToolTip.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgUpdateToolTip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgUpdateToolTip)
  return false;
#undef DO_
}

void CMsgUpdateToolTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgUpdateToolTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgUpdateToolTip.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgUpdateToolTip)
}

::google::protobuf::uint8* CMsgUpdateToolTip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgUpdateToolTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgUpdateToolTip.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgUpdateToolTip)
  return target;
}

size_t CMsgUpdateToolTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgUpdateToolTip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgUpdateToolTip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgUpdateToolTip)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgUpdateToolTip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgUpdateToolTip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgUpdateToolTip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgUpdateToolTip)
    MergeFrom(*source);
  }
}

void CMsgUpdateToolTip::MergeFrom(const CMsgUpdateToolTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgUpdateToolTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgUpdateToolTip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgUpdateToolTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUpdateToolTip::CopyFrom(const CMsgUpdateToolTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgUpdateToolTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUpdateToolTip::IsInitialized() const {
  return true;
}

void CMsgUpdateToolTip::Swap(CMsgUpdateToolTip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgUpdateToolTip::InternalSwap(CMsgUpdateToolTip* other) {
  text_.Swap(&other->text_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgUpdateToolTip::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgUpdateToolTip

// optional uint32 browser_handle = 1;
bool CMsgUpdateToolTip::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgUpdateToolTip::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgUpdateToolTip::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgUpdateToolTip::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgUpdateToolTip::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgUpdateToolTip.browser_handle)
  return browser_handle_;
}
void CMsgUpdateToolTip::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgUpdateToolTip.browser_handle)
}

// optional string text = 2;
bool CMsgUpdateToolTip::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgUpdateToolTip::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgUpdateToolTip::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgUpdateToolTip::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& CMsgUpdateToolTip::text() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgUpdateToolTip.text)
  return text_.GetNoArena();
}
void CMsgUpdateToolTip::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgUpdateToolTip.text)
}
#if LANG_CXX11
void CMsgUpdateToolTip::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgUpdateToolTip.text)
}
#endif
void CMsgUpdateToolTip::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgUpdateToolTip.text)
}
void CMsgUpdateToolTip::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgUpdateToolTip.text)
}
::std::string* CMsgUpdateToolTip::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgUpdateToolTip.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgUpdateToolTip::release_text() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgUpdateToolTip.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgUpdateToolTip::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgUpdateToolTip.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgHideToolTip::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgHideToolTip::CMsgHideToolTip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgHideToolTip)
}
CMsgHideToolTip::CMsgHideToolTip(const CMsgHideToolTip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgHideToolTip)
}

void CMsgHideToolTip::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgHideToolTip::~CMsgHideToolTip() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgHideToolTip)
  SharedDtor();
}

void CMsgHideToolTip::SharedDtor() {
}

void CMsgHideToolTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHideToolTip::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgHideToolTip& CMsgHideToolTip::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgHideToolTip* CMsgHideToolTip::New(::google::protobuf::Arena* arena) const {
  CMsgHideToolTip* n = new CMsgHideToolTip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgHideToolTip::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgHideToolTip)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgHideToolTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgHideToolTip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgHideToolTip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgHideToolTip)
  return false;
#undef DO_
}

void CMsgHideToolTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgHideToolTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgHideToolTip)
}

::google::protobuf::uint8* CMsgHideToolTip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgHideToolTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgHideToolTip)
  return target;
}

size_t CMsgHideToolTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgHideToolTip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHideToolTip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgHideToolTip)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHideToolTip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgHideToolTip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgHideToolTip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgHideToolTip)
    MergeFrom(*source);
  }
}

void CMsgHideToolTip::MergeFrom(const CMsgHideToolTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgHideToolTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgHideToolTip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgHideToolTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHideToolTip::CopyFrom(const CMsgHideToolTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgHideToolTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHideToolTip::IsInitialized() const {
  return true;
}

void CMsgHideToolTip::Swap(CMsgHideToolTip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgHideToolTip::InternalSwap(CMsgHideToolTip* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgHideToolTip::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgHideToolTip

// optional uint32 browser_handle = 1;
bool CMsgHideToolTip::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgHideToolTip::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgHideToolTip::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgHideToolTip::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgHideToolTip::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgHideToolTip.browser_handle)
  return browser_handle_;
}
void CMsgHideToolTip::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgHideToolTip.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSearchResults::kBrowserHandleFieldNumber;
const int CMsgSearchResults::kActiveMatchFieldNumber;
const int CMsgSearchResults::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSearchResults::CMsgSearchResults()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSearchResults)
}
CMsgSearchResults::CMsgSearchResults(const CMsgSearchResults& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&results_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(results_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSearchResults)
}

void CMsgSearchResults::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&results_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(results_));
}

CMsgSearchResults::~CMsgSearchResults() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSearchResults)
  SharedDtor();
}

void CMsgSearchResults::SharedDtor() {
}

void CMsgSearchResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSearchResults::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSearchResults& CMsgSearchResults::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSearchResults* CMsgSearchResults::New(::google::protobuf::Arena* arena) const {
  CMsgSearchResults* n = new CMsgSearchResults;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSearchResults::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSearchResults)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&results_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(results_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSearchResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSearchResults)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 activeMatch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_activematch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activematch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 results = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_results();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &results_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSearchResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSearchResults)
  return false;
#undef DO_
}

void CMsgSearchResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSearchResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional int32 activeMatch = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->activematch(), output);
  }

  // optional int32 results = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->results(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSearchResults)
}

::google::protobuf::uint8* CMsgSearchResults::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSearchResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional int32 activeMatch = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->activematch(), target);
  }

  // optional int32 results = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->results(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSearchResults)
  return target;
}

size_t CMsgSearchResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSearchResults)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional int32 activeMatch = 2;
    if (has_activematch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activematch());
    }

    // optional int32 results = 3;
    if (has_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->results());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSearchResults::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSearchResults)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSearchResults* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSearchResults>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSearchResults)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSearchResults)
    MergeFrom(*source);
  }
}

void CMsgSearchResults::MergeFrom(const CMsgSearchResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSearchResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      activematch_ = from.activematch_;
    }
    if (cached_has_bits & 0x00000004u) {
      results_ = from.results_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSearchResults::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSearchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSearchResults::CopyFrom(const CMsgSearchResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSearchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSearchResults::IsInitialized() const {
  return true;
}

void CMsgSearchResults::Swap(CMsgSearchResults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSearchResults::InternalSwap(CMsgSearchResults* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(activematch_, other->activematch_);
  std::swap(results_, other->results_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSearchResults::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSearchResults

// optional uint32 browser_handle = 1;
bool CMsgSearchResults::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSearchResults::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSearchResults::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSearchResults::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgSearchResults::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSearchResults.browser_handle)
  return browser_handle_;
}
void CMsgSearchResults::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSearchResults.browser_handle)
}

// optional int32 activeMatch = 2;
bool CMsgSearchResults::has_activematch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSearchResults::set_has_activematch() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSearchResults::clear_has_activematch() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSearchResults::clear_activematch() {
  activematch_ = 0;
  clear_has_activematch();
}
::google::protobuf::int32 CMsgSearchResults::activematch() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSearchResults.activeMatch)
  return activematch_;
}
void CMsgSearchResults::set_activematch(::google::protobuf::int32 value) {
  set_has_activematch();
  activematch_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSearchResults.activeMatch)
}

// optional int32 results = 3;
bool CMsgSearchResults::has_results() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSearchResults::set_has_results() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSearchResults::clear_has_results() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSearchResults::clear_results() {
  results_ = 0;
  clear_has_results();
}
::google::protobuf::int32 CMsgSearchResults::results() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSearchResults.results)
  return results_;
}
void CMsgSearchResults::set_results(::google::protobuf::int32 value) {
  set_has_results();
  results_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSearchResults.results)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClose::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClose::CMsgClose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClose)
}
CMsgClose::CMsgClose(const CMsgClose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClose)
}

void CMsgClose::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgClose::~CMsgClose() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClose)
  SharedDtor();
}

void CMsgClose::SharedDtor() {
}

void CMsgClose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClose::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClose& CMsgClose::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClose* CMsgClose::New(::google::protobuf::Arena* arena) const {
  CMsgClose* n = new CMsgClose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClose::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClose)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClose)
  return false;
#undef DO_
}

void CMsgClose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClose)
}

::google::protobuf::uint8* CMsgClose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClose)
  return target;
}

size_t CMsgClose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClose)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClose)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClose)
    MergeFrom(*source);
  }
}

void CMsgClose::MergeFrom(const CMsgClose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgClose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClose::CopyFrom(const CMsgClose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClose::IsInitialized() const {
  return true;
}

void CMsgClose::Swap(CMsgClose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClose::InternalSwap(CMsgClose* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClose::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClose

// optional uint32 browser_handle = 1;
bool CMsgClose::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClose::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClose::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClose::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgClose::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClose.browser_handle)
  return browser_handle_;
}
void CMsgClose::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClose.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetSharedPaintBuffers::kBrowserHandleFieldNumber;
const int CMsgSetSharedPaintBuffers::kWideFieldNumber;
const int CMsgSetSharedPaintBuffers::kTallFieldNumber;
const int CMsgSetSharedPaintBuffers::kSourcePidFieldNumber;
const int CMsgSetSharedPaintBuffers::kSourceHandleFieldNumber;
const int CMsgSetSharedPaintBuffers::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetSharedPaintBuffers::CMsgSetSharedPaintBuffers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetSharedPaintBuffers)
}
CMsgSetSharedPaintBuffers::CMsgSetSharedPaintBuffers(const CMsgSetSharedPaintBuffers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&tall_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(tall_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetSharedPaintBuffers)
}

void CMsgSetSharedPaintBuffers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&tall_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(tall_));
}

CMsgSetSharedPaintBuffers::~CMsgSetSharedPaintBuffers() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetSharedPaintBuffers)
  SharedDtor();
}

void CMsgSetSharedPaintBuffers::SharedDtor() {
}

void CMsgSetSharedPaintBuffers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetSharedPaintBuffers::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSetSharedPaintBuffers& CMsgSetSharedPaintBuffers::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSetSharedPaintBuffers* CMsgSetSharedPaintBuffers::New(::google::protobuf::Arena* arena) const {
  CMsgSetSharedPaintBuffers* n = new CMsgSetSharedPaintBuffers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSetSharedPaintBuffers::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetSharedPaintBuffers)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&tall_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(tall_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSetSharedPaintBuffers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetSharedPaintBuffers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wide = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_wide();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wide_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tall = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tall();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tall_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 source_pid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_source_pid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 source_handle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_source_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 handle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetSharedPaintBuffers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetSharedPaintBuffers)
  return false;
#undef DO_
}

void CMsgSetSharedPaintBuffers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetSharedPaintBuffers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 wide = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wide(), output);
  }

  // optional uint32 tall = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tall(), output);
  }

  // optional uint64 source_pid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->source_pid(), output);
  }

  // optional uint64 source_handle = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->source_handle(), output);
  }

  // optional uint64 handle = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetSharedPaintBuffers)
}

::google::protobuf::uint8* CMsgSetSharedPaintBuffers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetSharedPaintBuffers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 wide = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wide(), target);
  }

  // optional uint32 tall = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tall(), target);
  }

  // optional uint64 source_pid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->source_pid(), target);
  }

  // optional uint64 source_handle = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->source_handle(), target);
  }

  // optional uint64 handle = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetSharedPaintBuffers)
  return target;
}

size_t CMsgSetSharedPaintBuffers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetSharedPaintBuffers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 wide = 2;
    if (has_wide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wide());
    }

    // optional uint64 source_pid = 4;
    if (has_source_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->source_pid());
    }

    // optional uint64 source_handle = 5;
    if (has_source_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->source_handle());
    }

    // optional uint64 handle = 6;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->handle());
    }

    // optional uint32 tall = 3;
    if (has_tall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tall());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetSharedPaintBuffers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetSharedPaintBuffers)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetSharedPaintBuffers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSetSharedPaintBuffers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetSharedPaintBuffers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetSharedPaintBuffers)
    MergeFrom(*source);
  }
}

void CMsgSetSharedPaintBuffers::MergeFrom(const CMsgSetSharedPaintBuffers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetSharedPaintBuffers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      wide_ = from.wide_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_pid_ = from.source_pid_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_handle_ = from.source_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      handle_ = from.handle_;
    }
    if (cached_has_bits & 0x00000020u) {
      tall_ = from.tall_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetSharedPaintBuffers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetSharedPaintBuffers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetSharedPaintBuffers::CopyFrom(const CMsgSetSharedPaintBuffers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetSharedPaintBuffers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetSharedPaintBuffers::IsInitialized() const {
  return true;
}

void CMsgSetSharedPaintBuffers::Swap(CMsgSetSharedPaintBuffers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetSharedPaintBuffers::InternalSwap(CMsgSetSharedPaintBuffers* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(wide_, other->wide_);
  std::swap(source_pid_, other->source_pid_);
  std::swap(source_handle_, other->source_handle_);
  std::swap(handle_, other->handle_);
  std::swap(tall_, other->tall_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSetSharedPaintBuffers::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSetSharedPaintBuffers

// optional uint32 browser_handle = 1;
bool CMsgSetSharedPaintBuffers::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSetSharedPaintBuffers::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSetSharedPaintBuffers::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSetSharedPaintBuffers::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgSetSharedPaintBuffers::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetSharedPaintBuffers.browser_handle)
  return browser_handle_;
}
void CMsgSetSharedPaintBuffers::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetSharedPaintBuffers.browser_handle)
}

// optional uint32 wide = 2;
bool CMsgSetSharedPaintBuffers::has_wide() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSetSharedPaintBuffers::set_has_wide() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSetSharedPaintBuffers::clear_has_wide() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSetSharedPaintBuffers::clear_wide() {
  wide_ = 0u;
  clear_has_wide();
}
::google::protobuf::uint32 CMsgSetSharedPaintBuffers::wide() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetSharedPaintBuffers.wide)
  return wide_;
}
void CMsgSetSharedPaintBuffers::set_wide(::google::protobuf::uint32 value) {
  set_has_wide();
  wide_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetSharedPaintBuffers.wide)
}

// optional uint32 tall = 3;
bool CMsgSetSharedPaintBuffers::has_tall() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgSetSharedPaintBuffers::set_has_tall() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgSetSharedPaintBuffers::clear_has_tall() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgSetSharedPaintBuffers::clear_tall() {
  tall_ = 0u;
  clear_has_tall();
}
::google::protobuf::uint32 CMsgSetSharedPaintBuffers::tall() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetSharedPaintBuffers.tall)
  return tall_;
}
void CMsgSetSharedPaintBuffers::set_tall(::google::protobuf::uint32 value) {
  set_has_tall();
  tall_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetSharedPaintBuffers.tall)
}

// optional uint64 source_pid = 4;
bool CMsgSetSharedPaintBuffers::has_source_pid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSetSharedPaintBuffers::set_has_source_pid() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSetSharedPaintBuffers::clear_has_source_pid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSetSharedPaintBuffers::clear_source_pid() {
  source_pid_ = GOOGLE_ULONGLONG(0);
  clear_has_source_pid();
}
::google::protobuf::uint64 CMsgSetSharedPaintBuffers::source_pid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetSharedPaintBuffers.source_pid)
  return source_pid_;
}
void CMsgSetSharedPaintBuffers::set_source_pid(::google::protobuf::uint64 value) {
  set_has_source_pid();
  source_pid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetSharedPaintBuffers.source_pid)
}

// optional uint64 source_handle = 5;
bool CMsgSetSharedPaintBuffers::has_source_handle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSetSharedPaintBuffers::set_has_source_handle() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSetSharedPaintBuffers::clear_has_source_handle() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSetSharedPaintBuffers::clear_source_handle() {
  source_handle_ = GOOGLE_ULONGLONG(0);
  clear_has_source_handle();
}
::google::protobuf::uint64 CMsgSetSharedPaintBuffers::source_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetSharedPaintBuffers.source_handle)
  return source_handle_;
}
void CMsgSetSharedPaintBuffers::set_source_handle(::google::protobuf::uint64 value) {
  set_has_source_handle();
  source_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetSharedPaintBuffers.source_handle)
}

// optional uint64 handle = 6;
bool CMsgSetSharedPaintBuffers::has_handle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgSetSharedPaintBuffers::set_has_handle() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgSetSharedPaintBuffers::clear_has_handle() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgSetSharedPaintBuffers::clear_handle() {
  handle_ = GOOGLE_ULONGLONG(0);
  clear_has_handle();
}
::google::protobuf::uint64 CMsgSetSharedPaintBuffers::handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetSharedPaintBuffers.handle)
  return handle_;
}
void CMsgSetSharedPaintBuffers::set_handle(::google::protobuf::uint64 value) {
  set_has_handle();
  handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetSharedPaintBuffers.handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgNeedsPaint::kBrowserHandleFieldNumber;
const int CMsgNeedsPaint::kScrollxFieldNumber;
const int CMsgNeedsPaint::kScrollyFieldNumber;
const int CMsgNeedsPaint::kPagescaleFieldNumber;
const int CMsgNeedsPaint::kPageserialFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgNeedsPaint::CMsgNeedsPaint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgNeedsPaint)
}
CMsgNeedsPaint::CMsgNeedsPaint(const CMsgNeedsPaint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&pagescale_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(pagescale_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgNeedsPaint)
}

void CMsgNeedsPaint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&pagescale_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(pagescale_));
}

CMsgNeedsPaint::~CMsgNeedsPaint() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgNeedsPaint)
  SharedDtor();
}

void CMsgNeedsPaint::SharedDtor() {
}

void CMsgNeedsPaint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgNeedsPaint::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgNeedsPaint& CMsgNeedsPaint::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgNeedsPaint* CMsgNeedsPaint::New(::google::protobuf::Arena* arena) const {
  CMsgNeedsPaint* n = new CMsgNeedsPaint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgNeedsPaint::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgNeedsPaint)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&pagescale_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(pagescale_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgNeedsPaint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgNeedsPaint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scrollx = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_scrollx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scrollx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scrolly = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_scrolly();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scrolly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pagescale = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_pagescale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pagescale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pageserial = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_pageserial();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pageserial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgNeedsPaint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgNeedsPaint)
  return false;
#undef DO_
}

void CMsgNeedsPaint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgNeedsPaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 scrollx = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->scrollx(), output);
  }

  // optional uint32 scrolly = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->scrolly(), output);
  }

  // optional float pagescale = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->pagescale(), output);
  }

  // optional uint32 pageserial = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->pageserial(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgNeedsPaint)
}

::google::protobuf::uint8* CMsgNeedsPaint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgNeedsPaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 scrollx = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->scrollx(), target);
  }

  // optional uint32 scrolly = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->scrolly(), target);
  }

  // optional float pagescale = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->pagescale(), target);
  }

  // optional uint32 pageserial = 15;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->pageserial(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgNeedsPaint)
  return target;
}

size_t CMsgNeedsPaint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgNeedsPaint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 scrollx = 10;
    if (has_scrollx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scrollx());
    }

    // optional uint32 pageserial = 15;
    if (has_pageserial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pageserial());
    }

    // optional uint32 scrolly = 11;
    if (has_scrolly()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scrolly());
    }

    // optional float pagescale = 12;
    if (has_pagescale()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgNeedsPaint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgNeedsPaint)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgNeedsPaint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgNeedsPaint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgNeedsPaint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgNeedsPaint)
    MergeFrom(*source);
  }
}

void CMsgNeedsPaint::MergeFrom(const CMsgNeedsPaint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgNeedsPaint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      scrollx_ = from.scrollx_;
    }
    if (cached_has_bits & 0x00000004u) {
      pageserial_ = from.pageserial_;
    }
    if (cached_has_bits & 0x00000008u) {
      scrolly_ = from.scrolly_;
    }
    if (cached_has_bits & 0x00000010u) {
      pagescale_ = from.pagescale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgNeedsPaint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgNeedsPaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNeedsPaint::CopyFrom(const CMsgNeedsPaint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgNeedsPaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNeedsPaint::IsInitialized() const {
  return true;
}

void CMsgNeedsPaint::Swap(CMsgNeedsPaint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgNeedsPaint::InternalSwap(CMsgNeedsPaint* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(scrollx_, other->scrollx_);
  std::swap(pageserial_, other->pageserial_);
  std::swap(scrolly_, other->scrolly_);
  std::swap(pagescale_, other->pagescale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgNeedsPaint::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgNeedsPaint

// optional uint32 browser_handle = 1;
bool CMsgNeedsPaint::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgNeedsPaint::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgNeedsPaint::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgNeedsPaint::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgNeedsPaint::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgNeedsPaint.browser_handle)
  return browser_handle_;
}
void CMsgNeedsPaint::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgNeedsPaint.browser_handle)
}

// optional uint32 scrollx = 10;
bool CMsgNeedsPaint::has_scrollx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgNeedsPaint::set_has_scrollx() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgNeedsPaint::clear_has_scrollx() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgNeedsPaint::clear_scrollx() {
  scrollx_ = 0u;
  clear_has_scrollx();
}
::google::protobuf::uint32 CMsgNeedsPaint::scrollx() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgNeedsPaint.scrollx)
  return scrollx_;
}
void CMsgNeedsPaint::set_scrollx(::google::protobuf::uint32 value) {
  set_has_scrollx();
  scrollx_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgNeedsPaint.scrollx)
}

// optional uint32 scrolly = 11;
bool CMsgNeedsPaint::has_scrolly() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgNeedsPaint::set_has_scrolly() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgNeedsPaint::clear_has_scrolly() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgNeedsPaint::clear_scrolly() {
  scrolly_ = 0u;
  clear_has_scrolly();
}
::google::protobuf::uint32 CMsgNeedsPaint::scrolly() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgNeedsPaint.scrolly)
  return scrolly_;
}
void CMsgNeedsPaint::set_scrolly(::google::protobuf::uint32 value) {
  set_has_scrolly();
  scrolly_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgNeedsPaint.scrolly)
}

// optional float pagescale = 12;
bool CMsgNeedsPaint::has_pagescale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgNeedsPaint::set_has_pagescale() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgNeedsPaint::clear_has_pagescale() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgNeedsPaint::clear_pagescale() {
  pagescale_ = 0;
  clear_has_pagescale();
}
float CMsgNeedsPaint::pagescale() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgNeedsPaint.pagescale)
  return pagescale_;
}
void CMsgNeedsPaint::set_pagescale(float value) {
  set_has_pagescale();
  pagescale_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgNeedsPaint.pagescale)
}

// optional uint32 pageserial = 15;
bool CMsgNeedsPaint::has_pageserial() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgNeedsPaint::set_has_pageserial() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgNeedsPaint::clear_has_pageserial() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgNeedsPaint::clear_pageserial() {
  pageserial_ = 0u;
  clear_has_pageserial();
}
::google::protobuf::uint32 CMsgNeedsPaint::pageserial() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgNeedsPaint.pageserial)
  return pageserial_;
}
void CMsgNeedsPaint::set_pageserial(::google::protobuf::uint32 value) {
  set_has_pageserial();
  pageserial_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgNeedsPaint.pageserial)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgComboNeedsPaint::kBrowserHandleFieldNumber;
const int CMsgComboNeedsPaint::kRgbaFieldNumber;
const int CMsgComboNeedsPaint::kComboboxWideFieldNumber;
const int CMsgComboNeedsPaint::kComboboxTallFieldNumber;
const int CMsgComboNeedsPaint::kSharedMemoryHandleFieldNumber;
const int CMsgComboNeedsPaint::kSharedMemorySizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgComboNeedsPaint::CMsgComboNeedsPaint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgComboNeedsPaint)
}
CMsgComboNeedsPaint::CMsgComboNeedsPaint(const CMsgComboNeedsPaint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rgba_, &from.rgba_,
    reinterpret_cast<char*>(&combobox_tall_) -
    reinterpret_cast<char*>(&rgba_) + sizeof(combobox_tall_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgComboNeedsPaint)
}

void CMsgComboNeedsPaint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rgba_, 0, reinterpret_cast<char*>(&combobox_tall_) -
    reinterpret_cast<char*>(&rgba_) + sizeof(combobox_tall_));
}

CMsgComboNeedsPaint::~CMsgComboNeedsPaint() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgComboNeedsPaint)
  SharedDtor();
}

void CMsgComboNeedsPaint::SharedDtor() {
}

void CMsgComboNeedsPaint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgComboNeedsPaint::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgComboNeedsPaint& CMsgComboNeedsPaint::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgComboNeedsPaint* CMsgComboNeedsPaint::New(::google::protobuf::Arena* arena) const {
  CMsgComboNeedsPaint* n = new CMsgComboNeedsPaint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgComboNeedsPaint::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgComboNeedsPaint)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&rgba_, 0, reinterpret_cast<char*>(&combobox_tall_) -
      reinterpret_cast<char*>(&rgba_) + sizeof(combobox_tall_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgComboNeedsPaint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgComboNeedsPaint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rgba = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_rgba();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rgba_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 combobox_wide = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_combobox_wide();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combobox_wide_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 combobox_tall = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_combobox_tall();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combobox_tall_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 shared_memory_handle = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_shared_memory_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shared_memory_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 shared_memory_size = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_shared_memory_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shared_memory_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgComboNeedsPaint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgComboNeedsPaint)
  return false;
#undef DO_
}

void CMsgComboNeedsPaint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgComboNeedsPaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint64 rgba = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->rgba(), output);
  }

  // optional uint32 combobox_wide = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->combobox_wide(), output);
  }

  // optional uint32 combobox_tall = 4 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->combobox_tall(), output);
  }

  // optional uint64 shared_memory_handle = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->shared_memory_handle(), output);
  }

  // optional uint64 shared_memory_size = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->shared_memory_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgComboNeedsPaint)
}

::google::protobuf::uint8* CMsgComboNeedsPaint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgComboNeedsPaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint64 rgba = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->rgba(), target);
  }

  // optional uint32 combobox_wide = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->combobox_wide(), target);
  }

  // optional uint32 combobox_tall = 4 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->combobox_tall(), target);
  }

  // optional uint64 shared_memory_handle = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->shared_memory_handle(), target);
  }

  // optional uint64 shared_memory_size = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->shared_memory_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgComboNeedsPaint)
  return target;
}

size_t CMsgComboNeedsPaint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgComboNeedsPaint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint64 rgba = 2;
    if (has_rgba()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rgba());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 combobox_wide = 3 [default = 0];
    if (has_combobox_wide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combobox_wide());
    }

    // optional uint64 shared_memory_handle = 5 [default = 0];
    if (has_shared_memory_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shared_memory_handle());
    }

    // optional uint64 shared_memory_size = 7 [default = 0];
    if (has_shared_memory_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shared_memory_size());
    }

    // optional uint32 combobox_tall = 4 [default = 0];
    if (has_combobox_tall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combobox_tall());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgComboNeedsPaint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgComboNeedsPaint)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgComboNeedsPaint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgComboNeedsPaint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgComboNeedsPaint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgComboNeedsPaint)
    MergeFrom(*source);
  }
}

void CMsgComboNeedsPaint::MergeFrom(const CMsgComboNeedsPaint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgComboNeedsPaint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      rgba_ = from.rgba_;
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      combobox_wide_ = from.combobox_wide_;
    }
    if (cached_has_bits & 0x00000008u) {
      shared_memory_handle_ = from.shared_memory_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      shared_memory_size_ = from.shared_memory_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      combobox_tall_ = from.combobox_tall_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgComboNeedsPaint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgComboNeedsPaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgComboNeedsPaint::CopyFrom(const CMsgComboNeedsPaint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgComboNeedsPaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgComboNeedsPaint::IsInitialized() const {
  return true;
}

void CMsgComboNeedsPaint::Swap(CMsgComboNeedsPaint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgComboNeedsPaint::InternalSwap(CMsgComboNeedsPaint* other) {
  std::swap(rgba_, other->rgba_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(combobox_wide_, other->combobox_wide_);
  std::swap(shared_memory_handle_, other->shared_memory_handle_);
  std::swap(shared_memory_size_, other->shared_memory_size_);
  std::swap(combobox_tall_, other->combobox_tall_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgComboNeedsPaint::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgComboNeedsPaint

// optional uint32 browser_handle = 1;
bool CMsgComboNeedsPaint::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgComboNeedsPaint::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgComboNeedsPaint::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgComboNeedsPaint::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgComboNeedsPaint::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgComboNeedsPaint.browser_handle)
  return browser_handle_;
}
void CMsgComboNeedsPaint::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgComboNeedsPaint.browser_handle)
}

// optional uint64 rgba = 2;
bool CMsgComboNeedsPaint::has_rgba() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgComboNeedsPaint::set_has_rgba() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgComboNeedsPaint::clear_has_rgba() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgComboNeedsPaint::clear_rgba() {
  rgba_ = GOOGLE_ULONGLONG(0);
  clear_has_rgba();
}
::google::protobuf::uint64 CMsgComboNeedsPaint::rgba() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgComboNeedsPaint.rgba)
  return rgba_;
}
void CMsgComboNeedsPaint::set_rgba(::google::protobuf::uint64 value) {
  set_has_rgba();
  rgba_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgComboNeedsPaint.rgba)
}

// optional uint32 combobox_wide = 3 [default = 0];
bool CMsgComboNeedsPaint::has_combobox_wide() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgComboNeedsPaint::set_has_combobox_wide() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgComboNeedsPaint::clear_has_combobox_wide() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgComboNeedsPaint::clear_combobox_wide() {
  combobox_wide_ = 0u;
  clear_has_combobox_wide();
}
::google::protobuf::uint32 CMsgComboNeedsPaint::combobox_wide() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgComboNeedsPaint.combobox_wide)
  return combobox_wide_;
}
void CMsgComboNeedsPaint::set_combobox_wide(::google::protobuf::uint32 value) {
  set_has_combobox_wide();
  combobox_wide_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgComboNeedsPaint.combobox_wide)
}

// optional uint32 combobox_tall = 4 [default = 0];
bool CMsgComboNeedsPaint::has_combobox_tall() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgComboNeedsPaint::set_has_combobox_tall() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgComboNeedsPaint::clear_has_combobox_tall() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgComboNeedsPaint::clear_combobox_tall() {
  combobox_tall_ = 0u;
  clear_has_combobox_tall();
}
::google::protobuf::uint32 CMsgComboNeedsPaint::combobox_tall() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgComboNeedsPaint.combobox_tall)
  return combobox_tall_;
}
void CMsgComboNeedsPaint::set_combobox_tall(::google::protobuf::uint32 value) {
  set_has_combobox_tall();
  combobox_tall_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgComboNeedsPaint.combobox_tall)
}

// optional uint64 shared_memory_handle = 5 [default = 0];
bool CMsgComboNeedsPaint::has_shared_memory_handle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgComboNeedsPaint::set_has_shared_memory_handle() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgComboNeedsPaint::clear_has_shared_memory_handle() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgComboNeedsPaint::clear_shared_memory_handle() {
  shared_memory_handle_ = GOOGLE_ULONGLONG(0);
  clear_has_shared_memory_handle();
}
::google::protobuf::uint64 CMsgComboNeedsPaint::shared_memory_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgComboNeedsPaint.shared_memory_handle)
  return shared_memory_handle_;
}
void CMsgComboNeedsPaint::set_shared_memory_handle(::google::protobuf::uint64 value) {
  set_has_shared_memory_handle();
  shared_memory_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgComboNeedsPaint.shared_memory_handle)
}

// optional uint64 shared_memory_size = 7 [default = 0];
bool CMsgComboNeedsPaint::has_shared_memory_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgComboNeedsPaint::set_has_shared_memory_size() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgComboNeedsPaint::clear_has_shared_memory_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgComboNeedsPaint::clear_shared_memory_size() {
  shared_memory_size_ = GOOGLE_ULONGLONG(0);
  clear_has_shared_memory_size();
}
::google::protobuf::uint64 CMsgComboNeedsPaint::shared_memory_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgComboNeedsPaint.shared_memory_size)
  return shared_memory_size_;
}
void CMsgComboNeedsPaint::set_shared_memory_size(::google::protobuf::uint64 value) {
  set_has_shared_memory_size();
  shared_memory_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgComboNeedsPaint.shared_memory_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGetZoom::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGetZoom::CMsgGetZoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGetZoom)
}
CMsgGetZoom::CMsgGetZoom(const CMsgGetZoom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGetZoom)
}

void CMsgGetZoom::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgGetZoom::~CMsgGetZoom() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGetZoom)
  SharedDtor();
}

void CMsgGetZoom::SharedDtor() {
}

void CMsgGetZoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGetZoom::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGetZoom& CMsgGetZoom::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGetZoom* CMsgGetZoom::New(::google::protobuf::Arena* arena) const {
  CMsgGetZoom* n = new CMsgGetZoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGetZoom::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGetZoom)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGetZoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGetZoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGetZoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGetZoom)
  return false;
#undef DO_
}

void CMsgGetZoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGetZoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGetZoom)
}

::google::protobuf::uint8* CMsgGetZoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGetZoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGetZoom)
  return target;
}

size_t CMsgGetZoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGetZoom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGetZoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGetZoom)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGetZoom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGetZoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGetZoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGetZoom)
    MergeFrom(*source);
  }
}

void CMsgGetZoom::MergeFrom(const CMsgGetZoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGetZoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgGetZoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGetZoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGetZoom::CopyFrom(const CMsgGetZoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGetZoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGetZoom::IsInitialized() const {
  return true;
}

void CMsgGetZoom::Swap(CMsgGetZoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGetZoom::InternalSwap(CMsgGetZoom* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGetZoom::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGetZoom

// optional uint32 browser_handle = 1;
bool CMsgGetZoom::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGetZoom::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGetZoom::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGetZoom::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgGetZoom::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGetZoom.browser_handle)
  return browser_handle_;
}
void CMsgGetZoom::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGetZoom.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGetZoomResponse::kBrowserHandleFieldNumber;
const int CMsgGetZoomResponse::kZoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGetZoomResponse::CMsgGetZoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGetZoomResponse)
}
CMsgGetZoomResponse::CMsgGetZoomResponse(const CMsgGetZoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&zoom_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(zoom_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGetZoomResponse)
}

void CMsgGetZoomResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&zoom_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(zoom_));
}

CMsgGetZoomResponse::~CMsgGetZoomResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGetZoomResponse)
  SharedDtor();
}

void CMsgGetZoomResponse::SharedDtor() {
}

void CMsgGetZoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGetZoomResponse::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGetZoomResponse& CMsgGetZoomResponse::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGetZoomResponse* CMsgGetZoomResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGetZoomResponse* n = new CMsgGetZoomResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGetZoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGetZoomResponse)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&zoom_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(zoom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGetZoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGetZoomResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float zoom = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_zoom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zoom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGetZoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGetZoomResponse)
  return false;
#undef DO_
}

void CMsgGetZoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGetZoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional float zoom = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->zoom(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGetZoomResponse)
}

::google::protobuf::uint8* CMsgGetZoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGetZoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional float zoom = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->zoom(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGetZoomResponse)
  return target;
}

size_t CMsgGetZoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGetZoomResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional float zoom = 2;
    if (has_zoom()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGetZoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGetZoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGetZoomResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGetZoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGetZoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGetZoomResponse)
    MergeFrom(*source);
  }
}

void CMsgGetZoomResponse::MergeFrom(const CMsgGetZoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGetZoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      zoom_ = from.zoom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGetZoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGetZoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGetZoomResponse::CopyFrom(const CMsgGetZoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGetZoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGetZoomResponse::IsInitialized() const {
  return true;
}

void CMsgGetZoomResponse::Swap(CMsgGetZoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGetZoomResponse::InternalSwap(CMsgGetZoomResponse* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(zoom_, other->zoom_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGetZoomResponse::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGetZoomResponse

// optional uint32 browser_handle = 1;
bool CMsgGetZoomResponse::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGetZoomResponse::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGetZoomResponse::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGetZoomResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgGetZoomResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGetZoomResponse.browser_handle)
  return browser_handle_;
}
void CMsgGetZoomResponse::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGetZoomResponse.browser_handle)
}

// optional float zoom = 2;
bool CMsgGetZoomResponse::has_zoom() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGetZoomResponse::set_has_zoom() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGetZoomResponse::clear_has_zoom() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGetZoomResponse::clear_zoom() {
  zoom_ = 0;
  clear_has_zoom();
}
float CMsgGetZoomResponse::zoom() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGetZoomResponse.zoom)
  return zoom_;
}
void CMsgGetZoomResponse::set_zoom(float value) {
  set_has_zoom();
  zoom_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGetZoomResponse.zoom)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLinkAtPosition::kBrowserHandleFieldNumber;
const int CMsgLinkAtPosition::kXFieldNumber;
const int CMsgLinkAtPosition::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLinkAtPosition::CMsgLinkAtPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgLinkAtPosition)
}
CMsgLinkAtPosition::CMsgLinkAtPosition(const CMsgLinkAtPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgLinkAtPosition)
}

void CMsgLinkAtPosition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(y_));
}

CMsgLinkAtPosition::~CMsgLinkAtPosition() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgLinkAtPosition)
  SharedDtor();
}

void CMsgLinkAtPosition::SharedDtor() {
}

void CMsgLinkAtPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLinkAtPosition::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgLinkAtPosition& CMsgLinkAtPosition::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgLinkAtPosition* CMsgLinkAtPosition::New(::google::protobuf::Arena* arena) const {
  CMsgLinkAtPosition* n = new CMsgLinkAtPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLinkAtPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgLinkAtPosition)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgLinkAtPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgLinkAtPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgLinkAtPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgLinkAtPosition)
  return false;
#undef DO_
}

void CMsgLinkAtPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgLinkAtPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgLinkAtPosition)
}

::google::protobuf::uint8* CMsgLinkAtPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgLinkAtPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgLinkAtPosition)
  return target;
}

size_t CMsgLinkAtPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgLinkAtPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLinkAtPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgLinkAtPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLinkAtPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLinkAtPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgLinkAtPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgLinkAtPosition)
    MergeFrom(*source);
  }
}

void CMsgLinkAtPosition::MergeFrom(const CMsgLinkAtPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgLinkAtPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLinkAtPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgLinkAtPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLinkAtPosition::CopyFrom(const CMsgLinkAtPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgLinkAtPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLinkAtPosition::IsInitialized() const {
  return true;
}

void CMsgLinkAtPosition::Swap(CMsgLinkAtPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLinkAtPosition::InternalSwap(CMsgLinkAtPosition* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLinkAtPosition::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgLinkAtPosition

// optional uint32 browser_handle = 1;
bool CMsgLinkAtPosition::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgLinkAtPosition::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgLinkAtPosition::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgLinkAtPosition::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgLinkAtPosition::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgLinkAtPosition.browser_handle)
  return browser_handle_;
}
void CMsgLinkAtPosition::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgLinkAtPosition.browser_handle)
}

// optional uint32 x = 2;
bool CMsgLinkAtPosition::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgLinkAtPosition::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgLinkAtPosition::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgLinkAtPosition::clear_x() {
  x_ = 0u;
  clear_has_x();
}
::google::protobuf::uint32 CMsgLinkAtPosition::x() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgLinkAtPosition.x)
  return x_;
}
void CMsgLinkAtPosition::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgLinkAtPosition.x)
}

// optional uint32 y = 3;
bool CMsgLinkAtPosition::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgLinkAtPosition::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgLinkAtPosition::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgLinkAtPosition::clear_y() {
  y_ = 0u;
  clear_has_y();
}
::google::protobuf::uint32 CMsgLinkAtPosition::y() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgLinkAtPosition.y)
  return y_;
}
void CMsgLinkAtPosition::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgLinkAtPosition.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLinkAtPositionResponse::kBrowserHandleFieldNumber;
const int CMsgLinkAtPositionResponse::kXFieldNumber;
const int CMsgLinkAtPositionResponse::kYFieldNumber;
const int CMsgLinkAtPositionResponse::kUrlFieldNumber;
const int CMsgLinkAtPositionResponse::kBlivelinkFieldNumber;
const int CMsgLinkAtPositionResponse::kBinputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLinkAtPositionResponse::CMsgLinkAtPositionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgLinkAtPositionResponse)
}
CMsgLinkAtPositionResponse::CMsgLinkAtPositionResponse(const CMsgLinkAtPositionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&binput_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(binput_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgLinkAtPositionResponse)
}

void CMsgLinkAtPositionResponse::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&binput_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(binput_));
}

CMsgLinkAtPositionResponse::~CMsgLinkAtPositionResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgLinkAtPositionResponse)
  SharedDtor();
}

void CMsgLinkAtPositionResponse::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgLinkAtPositionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLinkAtPositionResponse::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgLinkAtPositionResponse& CMsgLinkAtPositionResponse::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgLinkAtPositionResponse* CMsgLinkAtPositionResponse::New(::google::protobuf::Arena* arena) const {
  CMsgLinkAtPositionResponse* n = new CMsgLinkAtPositionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLinkAtPositionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgLinkAtPositionResponse)
  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&binput_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(binput_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgLinkAtPositionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgLinkAtPositionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgLinkAtPositionResponse.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool blivelink = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_blivelink();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blivelink_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool binput = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_binput();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binput_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgLinkAtPositionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgLinkAtPositionResponse)
  return false;
#undef DO_
}

void CMsgLinkAtPositionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgLinkAtPositionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  // optional string url = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLinkAtPositionResponse.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->url(), output);
  }

  // optional bool blivelink = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->blivelink(), output);
  }

  // optional bool binput = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->binput(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgLinkAtPositionResponse)
}

::google::protobuf::uint8* CMsgLinkAtPositionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgLinkAtPositionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  // optional string url = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLinkAtPositionResponse.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->url(), target);
  }

  // optional bool blivelink = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->blivelink(), target);
  }

  // optional bool binput = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->binput(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgLinkAtPositionResponse)
  return target;
}

size_t CMsgLinkAtPositionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgLinkAtPositionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string url = 4;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional bool blivelink = 5;
    if (has_blivelink()) {
      total_size += 1 + 1;
    }

    // optional bool binput = 6;
    if (has_binput()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLinkAtPositionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgLinkAtPositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLinkAtPositionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLinkAtPositionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgLinkAtPositionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgLinkAtPositionResponse)
    MergeFrom(*source);
  }
}

void CMsgLinkAtPositionResponse::MergeFrom(const CMsgLinkAtPositionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgLinkAtPositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      blivelink_ = from.blivelink_;
    }
    if (cached_has_bits & 0x00000020u) {
      binput_ = from.binput_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLinkAtPositionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgLinkAtPositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLinkAtPositionResponse::CopyFrom(const CMsgLinkAtPositionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgLinkAtPositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLinkAtPositionResponse::IsInitialized() const {
  return true;
}

void CMsgLinkAtPositionResponse::Swap(CMsgLinkAtPositionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLinkAtPositionResponse::InternalSwap(CMsgLinkAtPositionResponse* other) {
  url_.Swap(&other->url_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(blivelink_, other->blivelink_);
  std::swap(binput_, other->binput_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLinkAtPositionResponse::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgLinkAtPositionResponse

// optional uint32 browser_handle = 1;
bool CMsgLinkAtPositionResponse::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgLinkAtPositionResponse::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgLinkAtPositionResponse::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgLinkAtPositionResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgLinkAtPositionResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgLinkAtPositionResponse.browser_handle)
  return browser_handle_;
}
void CMsgLinkAtPositionResponse::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgLinkAtPositionResponse.browser_handle)
}

// optional uint32 x = 2;
bool CMsgLinkAtPositionResponse::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgLinkAtPositionResponse::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgLinkAtPositionResponse::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgLinkAtPositionResponse::clear_x() {
  x_ = 0u;
  clear_has_x();
}
::google::protobuf::uint32 CMsgLinkAtPositionResponse::x() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgLinkAtPositionResponse.x)
  return x_;
}
void CMsgLinkAtPositionResponse::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgLinkAtPositionResponse.x)
}

// optional uint32 y = 3;
bool CMsgLinkAtPositionResponse::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgLinkAtPositionResponse::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgLinkAtPositionResponse::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgLinkAtPositionResponse::clear_y() {
  y_ = 0u;
  clear_has_y();
}
::google::protobuf::uint32 CMsgLinkAtPositionResponse::y() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgLinkAtPositionResponse.y)
  return y_;
}
void CMsgLinkAtPositionResponse::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgLinkAtPositionResponse.y)
}

// optional string url = 4;
bool CMsgLinkAtPositionResponse::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgLinkAtPositionResponse::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgLinkAtPositionResponse::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgLinkAtPositionResponse::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CMsgLinkAtPositionResponse::url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgLinkAtPositionResponse.url)
  return url_.GetNoArena();
}
void CMsgLinkAtPositionResponse::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgLinkAtPositionResponse.url)
}
#if LANG_CXX11
void CMsgLinkAtPositionResponse::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgLinkAtPositionResponse.url)
}
#endif
void CMsgLinkAtPositionResponse::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgLinkAtPositionResponse.url)
}
void CMsgLinkAtPositionResponse::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgLinkAtPositionResponse.url)
}
::std::string* CMsgLinkAtPositionResponse::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgLinkAtPositionResponse.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgLinkAtPositionResponse::release_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgLinkAtPositionResponse.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgLinkAtPositionResponse::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgLinkAtPositionResponse.url)
}

// optional bool blivelink = 5;
bool CMsgLinkAtPositionResponse::has_blivelink() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgLinkAtPositionResponse::set_has_blivelink() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgLinkAtPositionResponse::clear_has_blivelink() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgLinkAtPositionResponse::clear_blivelink() {
  blivelink_ = false;
  clear_has_blivelink();
}
bool CMsgLinkAtPositionResponse::blivelink() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgLinkAtPositionResponse.blivelink)
  return blivelink_;
}
void CMsgLinkAtPositionResponse::set_blivelink(bool value) {
  set_has_blivelink();
  blivelink_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgLinkAtPositionResponse.blivelink)
}

// optional bool binput = 6;
bool CMsgLinkAtPositionResponse::has_binput() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgLinkAtPositionResponse::set_has_binput() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgLinkAtPositionResponse::clear_has_binput() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgLinkAtPositionResponse::clear_binput() {
  binput_ = false;
  clear_has_binput();
}
bool CMsgLinkAtPositionResponse::binput() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgLinkAtPositionResponse.binput)
  return binput_;
}
void CMsgLinkAtPositionResponse::set_binput(bool value) {
  set_has_binput();
  binput_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgLinkAtPositionResponse.binput)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgZoomToElementAtPosition::kBrowserHandleFieldNumber;
const int CMsgZoomToElementAtPosition::kXFieldNumber;
const int CMsgZoomToElementAtPosition::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgZoomToElementAtPosition::CMsgZoomToElementAtPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgZoomToElementAtPosition)
}
CMsgZoomToElementAtPosition::CMsgZoomToElementAtPosition(const CMsgZoomToElementAtPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgZoomToElementAtPosition)
}

void CMsgZoomToElementAtPosition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(y_));
}

CMsgZoomToElementAtPosition::~CMsgZoomToElementAtPosition() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgZoomToElementAtPosition)
  SharedDtor();
}

void CMsgZoomToElementAtPosition::SharedDtor() {
}

void CMsgZoomToElementAtPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgZoomToElementAtPosition::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgZoomToElementAtPosition& CMsgZoomToElementAtPosition::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgZoomToElementAtPosition* CMsgZoomToElementAtPosition::New(::google::protobuf::Arena* arena) const {
  CMsgZoomToElementAtPosition* n = new CMsgZoomToElementAtPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgZoomToElementAtPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgZoomToElementAtPosition)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgZoomToElementAtPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgZoomToElementAtPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgZoomToElementAtPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgZoomToElementAtPosition)
  return false;
#undef DO_
}

void CMsgZoomToElementAtPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgZoomToElementAtPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgZoomToElementAtPosition)
}

::google::protobuf::uint8* CMsgZoomToElementAtPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgZoomToElementAtPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgZoomToElementAtPosition)
  return target;
}

size_t CMsgZoomToElementAtPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgZoomToElementAtPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgZoomToElementAtPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgZoomToElementAtPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgZoomToElementAtPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgZoomToElementAtPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgZoomToElementAtPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgZoomToElementAtPosition)
    MergeFrom(*source);
  }
}

void CMsgZoomToElementAtPosition::MergeFrom(const CMsgZoomToElementAtPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgZoomToElementAtPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgZoomToElementAtPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgZoomToElementAtPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgZoomToElementAtPosition::CopyFrom(const CMsgZoomToElementAtPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgZoomToElementAtPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgZoomToElementAtPosition::IsInitialized() const {
  return true;
}

void CMsgZoomToElementAtPosition::Swap(CMsgZoomToElementAtPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgZoomToElementAtPosition::InternalSwap(CMsgZoomToElementAtPosition* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgZoomToElementAtPosition::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgZoomToElementAtPosition

// optional uint32 browser_handle = 1;
bool CMsgZoomToElementAtPosition::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgZoomToElementAtPosition::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgZoomToElementAtPosition::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgZoomToElementAtPosition::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgZoomToElementAtPosition::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgZoomToElementAtPosition.browser_handle)
  return browser_handle_;
}
void CMsgZoomToElementAtPosition::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgZoomToElementAtPosition.browser_handle)
}

// optional uint32 x = 2;
bool CMsgZoomToElementAtPosition::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgZoomToElementAtPosition::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgZoomToElementAtPosition::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgZoomToElementAtPosition::clear_x() {
  x_ = 0u;
  clear_has_x();
}
::google::protobuf::uint32 CMsgZoomToElementAtPosition::x() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgZoomToElementAtPosition.x)
  return x_;
}
void CMsgZoomToElementAtPosition::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgZoomToElementAtPosition.x)
}

// optional uint32 y = 3;
bool CMsgZoomToElementAtPosition::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgZoomToElementAtPosition::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgZoomToElementAtPosition::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgZoomToElementAtPosition::clear_y() {
  y_ = 0u;
  clear_has_y();
}
::google::protobuf::uint32 CMsgZoomToElementAtPosition::y() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgZoomToElementAtPosition.y)
  return y_;
}
void CMsgZoomToElementAtPosition::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgZoomToElementAtPosition.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgZoomToElementAtPositionResponse::kBrowserHandleFieldNumber;
const int CMsgZoomToElementAtPositionResponse::kScaleFieldNumber;
const int CMsgZoomToElementAtPositionResponse::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgZoomToElementAtPositionResponse::CMsgZoomToElementAtPositionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgZoomToElementAtPositionResponse)
}
CMsgZoomToElementAtPositionResponse::CMsgZoomToElementAtPositionResponse(const CMsgZoomToElementAtPositionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgZoomToElementAtPositionResponse)
}

void CMsgZoomToElementAtPositionResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(duration_));
}

CMsgZoomToElementAtPositionResponse::~CMsgZoomToElementAtPositionResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgZoomToElementAtPositionResponse)
  SharedDtor();
}

void CMsgZoomToElementAtPositionResponse::SharedDtor() {
}

void CMsgZoomToElementAtPositionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgZoomToElementAtPositionResponse::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgZoomToElementAtPositionResponse& CMsgZoomToElementAtPositionResponse::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgZoomToElementAtPositionResponse* CMsgZoomToElementAtPositionResponse::New(::google::protobuf::Arena* arena) const {
  CMsgZoomToElementAtPositionResponse* n = new CMsgZoomToElementAtPositionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgZoomToElementAtPositionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgZoomToElementAtPositionResponse)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgZoomToElementAtPositionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgZoomToElementAtPositionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgZoomToElementAtPositionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgZoomToElementAtPositionResponse)
  return false;
#undef DO_
}

void CMsgZoomToElementAtPositionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgZoomToElementAtPositionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional float scale = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgZoomToElementAtPositionResponse)
}

::google::protobuf::uint8* CMsgZoomToElementAtPositionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgZoomToElementAtPositionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional float scale = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgZoomToElementAtPositionResponse)
  return target;
}

size_t CMsgZoomToElementAtPositionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgZoomToElementAtPositionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional float scale = 2;
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float duration = 3;
    if (has_duration()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgZoomToElementAtPositionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgZoomToElementAtPositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgZoomToElementAtPositionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgZoomToElementAtPositionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgZoomToElementAtPositionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgZoomToElementAtPositionResponse)
    MergeFrom(*source);
  }
}

void CMsgZoomToElementAtPositionResponse::MergeFrom(const CMsgZoomToElementAtPositionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgZoomToElementAtPositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgZoomToElementAtPositionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgZoomToElementAtPositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgZoomToElementAtPositionResponse::CopyFrom(const CMsgZoomToElementAtPositionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgZoomToElementAtPositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgZoomToElementAtPositionResponse::IsInitialized() const {
  return true;
}

void CMsgZoomToElementAtPositionResponse::Swap(CMsgZoomToElementAtPositionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgZoomToElementAtPositionResponse::InternalSwap(CMsgZoomToElementAtPositionResponse* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(scale_, other->scale_);
  std::swap(duration_, other->duration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgZoomToElementAtPositionResponse::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgZoomToElementAtPositionResponse

// optional uint32 browser_handle = 1;
bool CMsgZoomToElementAtPositionResponse::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgZoomToElementAtPositionResponse::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgZoomToElementAtPositionResponse::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgZoomToElementAtPositionResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgZoomToElementAtPositionResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgZoomToElementAtPositionResponse.browser_handle)
  return browser_handle_;
}
void CMsgZoomToElementAtPositionResponse::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgZoomToElementAtPositionResponse.browser_handle)
}

// optional float scale = 2;
bool CMsgZoomToElementAtPositionResponse::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgZoomToElementAtPositionResponse::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgZoomToElementAtPositionResponse::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgZoomToElementAtPositionResponse::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
float CMsgZoomToElementAtPositionResponse::scale() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgZoomToElementAtPositionResponse.scale)
  return scale_;
}
void CMsgZoomToElementAtPositionResponse::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgZoomToElementAtPositionResponse.scale)
}

// optional float duration = 3;
bool CMsgZoomToElementAtPositionResponse::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgZoomToElementAtPositionResponse::set_has_duration() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgZoomToElementAtPositionResponse::clear_has_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgZoomToElementAtPositionResponse::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
float CMsgZoomToElementAtPositionResponse::duration() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgZoomToElementAtPositionResponse.duration)
  return duration_;
}
void CMsgZoomToElementAtPositionResponse::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgZoomToElementAtPositionResponse.duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgScalePageToValue::kBrowserHandleFieldNumber;
const int CMsgScalePageToValue::kScaleFieldNumber;
const int CMsgScalePageToValue::kXFieldNumber;
const int CMsgScalePageToValue::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgScalePageToValue::CMsgScalePageToValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgScalePageToValue)
}
CMsgScalePageToValue::CMsgScalePageToValue(const CMsgScalePageToValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgScalePageToValue)
}

void CMsgScalePageToValue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(y_));
}

CMsgScalePageToValue::~CMsgScalePageToValue() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgScalePageToValue)
  SharedDtor();
}

void CMsgScalePageToValue::SharedDtor() {
}

void CMsgScalePageToValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgScalePageToValue::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgScalePageToValue& CMsgScalePageToValue::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgScalePageToValue* CMsgScalePageToValue::New(::google::protobuf::Arena* arena) const {
  CMsgScalePageToValue* n = new CMsgScalePageToValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgScalePageToValue::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgScalePageToValue)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgScalePageToValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgScalePageToValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgScalePageToValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgScalePageToValue)
  return false;
#undef DO_
}

void CMsgScalePageToValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgScalePageToValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional float scale = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgScalePageToValue)
}

::google::protobuf::uint8* CMsgScalePageToValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgScalePageToValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional float scale = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgScalePageToValue)
  return target;
}

size_t CMsgScalePageToValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgScalePageToValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional float scale = 2;
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float x = 3;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 4;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgScalePageToValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgScalePageToValue)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgScalePageToValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgScalePageToValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgScalePageToValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgScalePageToValue)
    MergeFrom(*source);
  }
}

void CMsgScalePageToValue::MergeFrom(const CMsgScalePageToValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgScalePageToValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgScalePageToValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgScalePageToValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgScalePageToValue::CopyFrom(const CMsgScalePageToValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgScalePageToValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgScalePageToValue::IsInitialized() const {
  return true;
}

void CMsgScalePageToValue::Swap(CMsgScalePageToValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgScalePageToValue::InternalSwap(CMsgScalePageToValue* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(scale_, other->scale_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgScalePageToValue::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgScalePageToValue

// optional uint32 browser_handle = 1;
bool CMsgScalePageToValue::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgScalePageToValue::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgScalePageToValue::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgScalePageToValue::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgScalePageToValue::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgScalePageToValue.browser_handle)
  return browser_handle_;
}
void CMsgScalePageToValue::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgScalePageToValue.browser_handle)
}

// optional float scale = 2;
bool CMsgScalePageToValue::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgScalePageToValue::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgScalePageToValue::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgScalePageToValue::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
float CMsgScalePageToValue::scale() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgScalePageToValue.scale)
  return scale_;
}
void CMsgScalePageToValue::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgScalePageToValue.scale)
}

// optional float x = 3;
bool CMsgScalePageToValue::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgScalePageToValue::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgScalePageToValue::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgScalePageToValue::clear_x() {
  x_ = 0;
  clear_has_x();
}
float CMsgScalePageToValue::x() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgScalePageToValue.x)
  return x_;
}
void CMsgScalePageToValue::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgScalePageToValue.x)
}

// optional float y = 4;
bool CMsgScalePageToValue::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgScalePageToValue::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgScalePageToValue::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgScalePageToValue::clear_y() {
  y_ = 0;
  clear_has_y();
}
float CMsgScalePageToValue::y() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgScalePageToValue.y)
  return y_;
}
void CMsgScalePageToValue::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgScalePageToValue.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgScalePageToValueResponse::kBrowserHandleFieldNumber;
const int CMsgScalePageToValueResponse::kZoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgScalePageToValueResponse::CMsgScalePageToValueResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgScalePageToValueResponse)
}
CMsgScalePageToValueResponse::CMsgScalePageToValueResponse(const CMsgScalePageToValueResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&zoom_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(zoom_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgScalePageToValueResponse)
}

void CMsgScalePageToValueResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&zoom_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(zoom_));
}

CMsgScalePageToValueResponse::~CMsgScalePageToValueResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgScalePageToValueResponse)
  SharedDtor();
}

void CMsgScalePageToValueResponse::SharedDtor() {
}

void CMsgScalePageToValueResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgScalePageToValueResponse::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgScalePageToValueResponse& CMsgScalePageToValueResponse::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgScalePageToValueResponse* CMsgScalePageToValueResponse::New(::google::protobuf::Arena* arena) const {
  CMsgScalePageToValueResponse* n = new CMsgScalePageToValueResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgScalePageToValueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgScalePageToValueResponse)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&zoom_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(zoom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgScalePageToValueResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgScalePageToValueResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float zoom = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_zoom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zoom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgScalePageToValueResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgScalePageToValueResponse)
  return false;
#undef DO_
}

void CMsgScalePageToValueResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgScalePageToValueResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional float zoom = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->zoom(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgScalePageToValueResponse)
}

::google::protobuf::uint8* CMsgScalePageToValueResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgScalePageToValueResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional float zoom = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->zoom(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgScalePageToValueResponse)
  return target;
}

size_t CMsgScalePageToValueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgScalePageToValueResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional float zoom = 2;
    if (has_zoom()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgScalePageToValueResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgScalePageToValueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgScalePageToValueResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgScalePageToValueResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgScalePageToValueResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgScalePageToValueResponse)
    MergeFrom(*source);
  }
}

void CMsgScalePageToValueResponse::MergeFrom(const CMsgScalePageToValueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgScalePageToValueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      zoom_ = from.zoom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgScalePageToValueResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgScalePageToValueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgScalePageToValueResponse::CopyFrom(const CMsgScalePageToValueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgScalePageToValueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgScalePageToValueResponse::IsInitialized() const {
  return true;
}

void CMsgScalePageToValueResponse::Swap(CMsgScalePageToValueResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgScalePageToValueResponse::InternalSwap(CMsgScalePageToValueResponse* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(zoom_, other->zoom_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgScalePageToValueResponse::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgScalePageToValueResponse

// optional uint32 browser_handle = 1;
bool CMsgScalePageToValueResponse::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgScalePageToValueResponse::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgScalePageToValueResponse::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgScalePageToValueResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgScalePageToValueResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgScalePageToValueResponse.browser_handle)
  return browser_handle_;
}
void CMsgScalePageToValueResponse::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgScalePageToValueResponse.browser_handle)
}

// optional float zoom = 2;
bool CMsgScalePageToValueResponse::has_zoom() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgScalePageToValueResponse::set_has_zoom() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgScalePageToValueResponse::clear_has_zoom() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgScalePageToValueResponse::clear_zoom() {
  zoom_ = 0;
  clear_has_zoom();
}
float CMsgScalePageToValueResponse::zoom() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgScalePageToValueResponse.zoom)
  return zoom_;
}
void CMsgScalePageToValueResponse::set_zoom(float value) {
  set_has_zoom();
  zoom_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgScalePageToValueResponse.zoom)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSavePageToJPEG::kBrowserHandleFieldNumber;
const int CMsgSavePageToJPEG::kUrlFieldNumber;
const int CMsgSavePageToJPEG::kFilenameFieldNumber;
const int CMsgSavePageToJPEG::kWidthFieldNumber;
const int CMsgSavePageToJPEG::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSavePageToJPEG::CMsgSavePageToJPEG()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSavePageToJPEG)
}
CMsgSavePageToJPEG::CMsgSavePageToJPEG(const CMsgSavePageToJPEG& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSavePageToJPEG)
}

void CMsgSavePageToJPEG::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(height_));
}

CMsgSavePageToJPEG::~CMsgSavePageToJPEG() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSavePageToJPEG)
  SharedDtor();
}

void CMsgSavePageToJPEG::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSavePageToJPEG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSavePageToJPEG::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSavePageToJPEG& CMsgSavePageToJPEG::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSavePageToJPEG* CMsgSavePageToJPEG::New(::google::protobuf::Arena* arena) const {
  CMsgSavePageToJPEG* n = new CMsgSavePageToJPEG;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSavePageToJPEG::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSavePageToJPEG)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_filename()) {
      GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filename_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSavePageToJPEG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSavePageToJPEG)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSavePageToJPEG.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSavePageToJPEG.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSavePageToJPEG)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSavePageToJPEG)
  return false;
#undef DO_
}

void CMsgSavePageToJPEG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSavePageToJPEG)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSavePageToJPEG.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSavePageToJPEG.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filename(), output);
  }

  // optional uint32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width(), output);
  }

  // optional uint32 height = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSavePageToJPEG)
}

::google::protobuf::uint8* CMsgSavePageToJPEG::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSavePageToJPEG)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSavePageToJPEG.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSavePageToJPEG.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // optional uint32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width(), target);
  }

  // optional uint32 height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSavePageToJPEG)
  return target;
}

size_t CMsgSavePageToJPEG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSavePageToJPEG)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string filename = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSavePageToJPEG::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSavePageToJPEG)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSavePageToJPEG* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSavePageToJPEG>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSavePageToJPEG)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSavePageToJPEG)
    MergeFrom(*source);
  }
}

void CMsgSavePageToJPEG::MergeFrom(const CMsgSavePageToJPEG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSavePageToJPEG)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSavePageToJPEG::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSavePageToJPEG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSavePageToJPEG::CopyFrom(const CMsgSavePageToJPEG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSavePageToJPEG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSavePageToJPEG::IsInitialized() const {
  return true;
}

void CMsgSavePageToJPEG::Swap(CMsgSavePageToJPEG* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSavePageToJPEG::InternalSwap(CMsgSavePageToJPEG* other) {
  url_.Swap(&other->url_);
  filename_.Swap(&other->filename_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSavePageToJPEG::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSavePageToJPEG

// optional uint32 browser_handle = 1;
bool CMsgSavePageToJPEG::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSavePageToJPEG::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSavePageToJPEG::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSavePageToJPEG::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgSavePageToJPEG::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSavePageToJPEG.browser_handle)
  return browser_handle_;
}
void CMsgSavePageToJPEG::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSavePageToJPEG.browser_handle)
}

// optional string url = 2;
bool CMsgSavePageToJPEG::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSavePageToJPEG::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSavePageToJPEG::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSavePageToJPEG::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CMsgSavePageToJPEG::url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSavePageToJPEG.url)
  return url_.GetNoArena();
}
void CMsgSavePageToJPEG::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSavePageToJPEG.url)
}
#if LANG_CXX11
void CMsgSavePageToJPEG::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSavePageToJPEG.url)
}
#endif
void CMsgSavePageToJPEG::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSavePageToJPEG.url)
}
void CMsgSavePageToJPEG::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSavePageToJPEG.url)
}
::std::string* CMsgSavePageToJPEG::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSavePageToJPEG.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSavePageToJPEG::release_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSavePageToJPEG.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSavePageToJPEG::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSavePageToJPEG.url)
}

// optional string filename = 3;
bool CMsgSavePageToJPEG::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSavePageToJPEG::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSavePageToJPEG::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSavePageToJPEG::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& CMsgSavePageToJPEG::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSavePageToJPEG.filename)
  return filename_.GetNoArena();
}
void CMsgSavePageToJPEG::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSavePageToJPEG.filename)
}
#if LANG_CXX11
void CMsgSavePageToJPEG::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSavePageToJPEG.filename)
}
#endif
void CMsgSavePageToJPEG::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSavePageToJPEG.filename)
}
void CMsgSavePageToJPEG::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSavePageToJPEG.filename)
}
::std::string* CMsgSavePageToJPEG::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSavePageToJPEG.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSavePageToJPEG::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSavePageToJPEG.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSavePageToJPEG::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSavePageToJPEG.filename)
}

// optional uint32 width = 4;
bool CMsgSavePageToJPEG::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSavePageToJPEG::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSavePageToJPEG::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSavePageToJPEG::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 CMsgSavePageToJPEG::width() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSavePageToJPEG.width)
  return width_;
}
void CMsgSavePageToJPEG::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSavePageToJPEG.width)
}

// optional uint32 height = 5;
bool CMsgSavePageToJPEG::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgSavePageToJPEG::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgSavePageToJPEG::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgSavePageToJPEG::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 CMsgSavePageToJPEG::height() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSavePageToJPEG.height)
  return height_;
}
void CMsgSavePageToJPEG::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSavePageToJPEG.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSavePageToJPEGResponse::kBrowserHandleFieldNumber;
const int CMsgSavePageToJPEGResponse::kUrlFieldNumber;
const int CMsgSavePageToJPEGResponse::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSavePageToJPEGResponse::CMsgSavePageToJPEGResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSavePageToJPEGResponse)
}
CMsgSavePageToJPEGResponse::CMsgSavePageToJPEGResponse(const CMsgSavePageToJPEGResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSavePageToJPEGResponse)
}

void CMsgSavePageToJPEGResponse::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgSavePageToJPEGResponse::~CMsgSavePageToJPEGResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSavePageToJPEGResponse)
  SharedDtor();
}

void CMsgSavePageToJPEGResponse::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSavePageToJPEGResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSavePageToJPEGResponse::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSavePageToJPEGResponse& CMsgSavePageToJPEGResponse::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSavePageToJPEGResponse* CMsgSavePageToJPEGResponse::New(::google::protobuf::Arena* arena) const {
  CMsgSavePageToJPEGResponse* n = new CMsgSavePageToJPEGResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSavePageToJPEGResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSavePageToJPEGResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_filename()) {
      GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filename_.UnsafeRawStringPointer())->clear();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSavePageToJPEGResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSavePageToJPEGResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSavePageToJPEGResponse.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSavePageToJPEGResponse.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSavePageToJPEGResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSavePageToJPEGResponse)
  return false;
#undef DO_
}

void CMsgSavePageToJPEGResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSavePageToJPEGResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSavePageToJPEGResponse.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSavePageToJPEGResponse.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSavePageToJPEGResponse)
}

::google::protobuf::uint8* CMsgSavePageToJPEGResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSavePageToJPEGResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSavePageToJPEGResponse.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSavePageToJPEGResponse.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSavePageToJPEGResponse)
  return target;
}

size_t CMsgSavePageToJPEGResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSavePageToJPEGResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string filename = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSavePageToJPEGResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSavePageToJPEGResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSavePageToJPEGResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSavePageToJPEGResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSavePageToJPEGResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSavePageToJPEGResponse)
    MergeFrom(*source);
  }
}

void CMsgSavePageToJPEGResponse::MergeFrom(const CMsgSavePageToJPEGResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSavePageToJPEGResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSavePageToJPEGResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSavePageToJPEGResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSavePageToJPEGResponse::CopyFrom(const CMsgSavePageToJPEGResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSavePageToJPEGResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSavePageToJPEGResponse::IsInitialized() const {
  return true;
}

void CMsgSavePageToJPEGResponse::Swap(CMsgSavePageToJPEGResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSavePageToJPEGResponse::InternalSwap(CMsgSavePageToJPEGResponse* other) {
  url_.Swap(&other->url_);
  filename_.Swap(&other->filename_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSavePageToJPEGResponse::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSavePageToJPEGResponse

// optional uint32 browser_handle = 1;
bool CMsgSavePageToJPEGResponse::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSavePageToJPEGResponse::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSavePageToJPEGResponse::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSavePageToJPEGResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgSavePageToJPEGResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSavePageToJPEGResponse.browser_handle)
  return browser_handle_;
}
void CMsgSavePageToJPEGResponse::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSavePageToJPEGResponse.browser_handle)
}

// optional string url = 2;
bool CMsgSavePageToJPEGResponse::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSavePageToJPEGResponse::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSavePageToJPEGResponse::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSavePageToJPEGResponse::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CMsgSavePageToJPEGResponse::url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSavePageToJPEGResponse.url)
  return url_.GetNoArena();
}
void CMsgSavePageToJPEGResponse::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSavePageToJPEGResponse.url)
}
#if LANG_CXX11
void CMsgSavePageToJPEGResponse::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSavePageToJPEGResponse.url)
}
#endif
void CMsgSavePageToJPEGResponse::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSavePageToJPEGResponse.url)
}
void CMsgSavePageToJPEGResponse::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSavePageToJPEGResponse.url)
}
::std::string* CMsgSavePageToJPEGResponse::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSavePageToJPEGResponse.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSavePageToJPEGResponse::release_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSavePageToJPEGResponse.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSavePageToJPEGResponse::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSavePageToJPEGResponse.url)
}

// optional string filename = 3;
bool CMsgSavePageToJPEGResponse::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSavePageToJPEGResponse::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSavePageToJPEGResponse::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSavePageToJPEGResponse::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& CMsgSavePageToJPEGResponse::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSavePageToJPEGResponse.filename)
  return filename_.GetNoArena();
}
void CMsgSavePageToJPEGResponse::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSavePageToJPEGResponse.filename)
}
#if LANG_CXX11
void CMsgSavePageToJPEGResponse::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSavePageToJPEGResponse.filename)
}
#endif
void CMsgSavePageToJPEGResponse::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSavePageToJPEGResponse.filename)
}
void CMsgSavePageToJPEGResponse::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSavePageToJPEGResponse.filename)
}
::std::string* CMsgSavePageToJPEGResponse::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSavePageToJPEGResponse.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSavePageToJPEGResponse::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSavePageToJPEGResponse.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSavePageToJPEGResponse::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSavePageToJPEGResponse.filename)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJSAlert::kBrowserHandleFieldNumber;
const int CMsgJSAlert::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJSAlert::CMsgJSAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgJSAlert)
}
CMsgJSAlert::CMsgJSAlert(const CMsgJSAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgJSAlert)
}

void CMsgJSAlert::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgJSAlert::~CMsgJSAlert() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgJSAlert)
  SharedDtor();
}

void CMsgJSAlert::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgJSAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJSAlert::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgJSAlert& CMsgJSAlert::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgJSAlert* CMsgJSAlert::New(::google::protobuf::Arena* arena) const {
  CMsgJSAlert* n = new CMsgJSAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgJSAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgJSAlert)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgJSAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgJSAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgJSAlert.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgJSAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgJSAlert)
  return false;
#undef DO_
}

void CMsgJSAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgJSAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSAlert.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgJSAlert)
}

::google::protobuf::uint8* CMsgJSAlert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgJSAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSAlert.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgJSAlert)
  return target;
}

size_t CMsgJSAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgJSAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJSAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgJSAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSAlert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgJSAlert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgJSAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgJSAlert)
    MergeFrom(*source);
  }
}

void CMsgJSAlert::MergeFrom(const CMsgJSAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgJSAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgJSAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSAlert::CopyFrom(const CMsgJSAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgJSAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSAlert::IsInitialized() const {
  return true;
}

void CMsgJSAlert::Swap(CMsgJSAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJSAlert::InternalSwap(CMsgJSAlert* other) {
  message_.Swap(&other->message_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgJSAlert::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgJSAlert

// optional uint32 browser_handle = 1;
bool CMsgJSAlert::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgJSAlert::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgJSAlert::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgJSAlert::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgJSAlert::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSAlert.browser_handle)
  return browser_handle_;
}
void CMsgJSAlert::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSAlert.browser_handle)
}

// optional string message = 2;
bool CMsgJSAlert::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgJSAlert::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgJSAlert::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgJSAlert::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CMsgJSAlert::message() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSAlert.message)
  return message_.GetNoArena();
}
void CMsgJSAlert::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSAlert.message)
}
#if LANG_CXX11
void CMsgJSAlert::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgJSAlert.message)
}
#endif
void CMsgJSAlert::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgJSAlert.message)
}
void CMsgJSAlert::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgJSAlert.message)
}
::std::string* CMsgJSAlert::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgJSAlert.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgJSAlert::release_message() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgJSAlert.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgJSAlert::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgJSAlert.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJSConfirm::kBrowserHandleFieldNumber;
const int CMsgJSConfirm::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJSConfirm::CMsgJSConfirm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgJSConfirm)
}
CMsgJSConfirm::CMsgJSConfirm(const CMsgJSConfirm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgJSConfirm)
}

void CMsgJSConfirm::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgJSConfirm::~CMsgJSConfirm() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgJSConfirm)
  SharedDtor();
}

void CMsgJSConfirm::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgJSConfirm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJSConfirm::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgJSConfirm& CMsgJSConfirm::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgJSConfirm* CMsgJSConfirm::New(::google::protobuf::Arena* arena) const {
  CMsgJSConfirm* n = new CMsgJSConfirm;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgJSConfirm::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgJSConfirm)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgJSConfirm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgJSConfirm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgJSConfirm.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgJSConfirm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgJSConfirm)
  return false;
#undef DO_
}

void CMsgJSConfirm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgJSConfirm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSConfirm.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgJSConfirm)
}

::google::protobuf::uint8* CMsgJSConfirm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgJSConfirm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSConfirm.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgJSConfirm)
  return target;
}

size_t CMsgJSConfirm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgJSConfirm)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJSConfirm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgJSConfirm)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSConfirm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgJSConfirm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgJSConfirm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgJSConfirm)
    MergeFrom(*source);
  }
}

void CMsgJSConfirm::MergeFrom(const CMsgJSConfirm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgJSConfirm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSConfirm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgJSConfirm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSConfirm::CopyFrom(const CMsgJSConfirm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgJSConfirm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSConfirm::IsInitialized() const {
  return true;
}

void CMsgJSConfirm::Swap(CMsgJSConfirm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJSConfirm::InternalSwap(CMsgJSConfirm* other) {
  message_.Swap(&other->message_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgJSConfirm::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgJSConfirm

// optional uint32 browser_handle = 1;
bool CMsgJSConfirm::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgJSConfirm::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgJSConfirm::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgJSConfirm::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgJSConfirm::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSConfirm.browser_handle)
  return browser_handle_;
}
void CMsgJSConfirm::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSConfirm.browser_handle)
}

// optional string message = 2;
bool CMsgJSConfirm::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgJSConfirm::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgJSConfirm::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgJSConfirm::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CMsgJSConfirm::message() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSConfirm.message)
  return message_.GetNoArena();
}
void CMsgJSConfirm::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSConfirm.message)
}
#if LANG_CXX11
void CMsgJSConfirm::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgJSConfirm.message)
}
#endif
void CMsgJSConfirm::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgJSConfirm.message)
}
void CMsgJSConfirm::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgJSConfirm.message)
}
::std::string* CMsgJSConfirm::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgJSConfirm.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgJSConfirm::release_message() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgJSConfirm.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgJSConfirm::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgJSConfirm.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJSDialogResponse::kBrowserHandleFieldNumber;
const int CMsgJSDialogResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJSDialogResponse::CMsgJSDialogResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgJSDialogResponse)
}
CMsgJSDialogResponse::CMsgJSDialogResponse(const CMsgJSDialogResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgJSDialogResponse)
}

void CMsgJSDialogResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(result_));
}

CMsgJSDialogResponse::~CMsgJSDialogResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgJSDialogResponse)
  SharedDtor();
}

void CMsgJSDialogResponse::SharedDtor() {
}

void CMsgJSDialogResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJSDialogResponse::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgJSDialogResponse& CMsgJSDialogResponse::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgJSDialogResponse* CMsgJSDialogResponse::New(::google::protobuf::Arena* arena) const {
  CMsgJSDialogResponse* n = new CMsgJSDialogResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgJSDialogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgJSDialogResponse)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgJSDialogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgJSDialogResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgJSDialogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgJSDialogResponse)
  return false;
#undef DO_
}

void CMsgJSDialogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgJSDialogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional bool result = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgJSDialogResponse)
}

::google::protobuf::uint8* CMsgJSDialogResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgJSDialogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional bool result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgJSDialogResponse)
  return target;
}

size_t CMsgJSDialogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgJSDialogResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional bool result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJSDialogResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgJSDialogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSDialogResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgJSDialogResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgJSDialogResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgJSDialogResponse)
    MergeFrom(*source);
  }
}

void CMsgJSDialogResponse::MergeFrom(const CMsgJSDialogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgJSDialogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSDialogResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgJSDialogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSDialogResponse::CopyFrom(const CMsgJSDialogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgJSDialogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSDialogResponse::IsInitialized() const {
  return true;
}

void CMsgJSDialogResponse::Swap(CMsgJSDialogResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJSDialogResponse::InternalSwap(CMsgJSDialogResponse* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgJSDialogResponse::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgJSDialogResponse

// optional uint32 browser_handle = 1;
bool CMsgJSDialogResponse::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgJSDialogResponse::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgJSDialogResponse::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgJSDialogResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgJSDialogResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSDialogResponse.browser_handle)
  return browser_handle_;
}
void CMsgJSDialogResponse::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSDialogResponse.browser_handle)
}

// optional bool result = 2;
bool CMsgJSDialogResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgJSDialogResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgJSDialogResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgJSDialogResponse::clear_result() {
  result_ = false;
  clear_has_result();
}
bool CMsgJSDialogResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSDialogResponse.result)
  return result_;
}
void CMsgJSDialogResponse::set_result(bool value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSDialogResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgCanGoBackAndForward::kBrowserHandleFieldNumber;
const int CMsgCanGoBackAndForward::kBgobackFieldNumber;
const int CMsgCanGoBackAndForward::kBgoforwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgCanGoBackAndForward::CMsgCanGoBackAndForward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgCanGoBackAndForward)
}
CMsgCanGoBackAndForward::CMsgCanGoBackAndForward(const CMsgCanGoBackAndForward& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&bgoforward_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(bgoforward_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgCanGoBackAndForward)
}

void CMsgCanGoBackAndForward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&bgoforward_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(bgoforward_));
}

CMsgCanGoBackAndForward::~CMsgCanGoBackAndForward() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgCanGoBackAndForward)
  SharedDtor();
}

void CMsgCanGoBackAndForward::SharedDtor() {
}

void CMsgCanGoBackAndForward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCanGoBackAndForward::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgCanGoBackAndForward& CMsgCanGoBackAndForward::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgCanGoBackAndForward* CMsgCanGoBackAndForward::New(::google::protobuf::Arena* arena) const {
  CMsgCanGoBackAndForward* n = new CMsgCanGoBackAndForward;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgCanGoBackAndForward::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgCanGoBackAndForward)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&bgoforward_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(bgoforward_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgCanGoBackAndForward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgCanGoBackAndForward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bgoback = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bgoback();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bgoback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bgoforward = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_bgoforward();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bgoforward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgCanGoBackAndForward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgCanGoBackAndForward)
  return false;
#undef DO_
}

void CMsgCanGoBackAndForward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgCanGoBackAndForward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional bool bgoback = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bgoback(), output);
  }

  // optional bool bgoforward = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bgoforward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgCanGoBackAndForward)
}

::google::protobuf::uint8* CMsgCanGoBackAndForward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgCanGoBackAndForward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional bool bgoback = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bgoback(), target);
  }

  // optional bool bgoforward = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bgoforward(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgCanGoBackAndForward)
  return target;
}

size_t CMsgCanGoBackAndForward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgCanGoBackAndForward)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional bool bgoback = 2;
    if (has_bgoback()) {
      total_size += 1 + 1;
    }

    // optional bool bgoforward = 3;
    if (has_bgoforward()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCanGoBackAndForward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgCanGoBackAndForward)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCanGoBackAndForward* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgCanGoBackAndForward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgCanGoBackAndForward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgCanGoBackAndForward)
    MergeFrom(*source);
  }
}

void CMsgCanGoBackAndForward::MergeFrom(const CMsgCanGoBackAndForward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgCanGoBackAndForward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      bgoback_ = from.bgoback_;
    }
    if (cached_has_bits & 0x00000004u) {
      bgoforward_ = from.bgoforward_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgCanGoBackAndForward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgCanGoBackAndForward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCanGoBackAndForward::CopyFrom(const CMsgCanGoBackAndForward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgCanGoBackAndForward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCanGoBackAndForward::IsInitialized() const {
  return true;
}

void CMsgCanGoBackAndForward::Swap(CMsgCanGoBackAndForward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgCanGoBackAndForward::InternalSwap(CMsgCanGoBackAndForward* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(bgoback_, other->bgoback_);
  std::swap(bgoforward_, other->bgoforward_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgCanGoBackAndForward::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgCanGoBackAndForward

// optional uint32 browser_handle = 1;
bool CMsgCanGoBackAndForward::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgCanGoBackAndForward::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgCanGoBackAndForward::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgCanGoBackAndForward::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgCanGoBackAndForward::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgCanGoBackAndForward.browser_handle)
  return browser_handle_;
}
void CMsgCanGoBackAndForward::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgCanGoBackAndForward.browser_handle)
}

// optional bool bgoback = 2;
bool CMsgCanGoBackAndForward::has_bgoback() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgCanGoBackAndForward::set_has_bgoback() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgCanGoBackAndForward::clear_has_bgoback() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgCanGoBackAndForward::clear_bgoback() {
  bgoback_ = false;
  clear_has_bgoback();
}
bool CMsgCanGoBackAndForward::bgoback() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgCanGoBackAndForward.bgoback)
  return bgoback_;
}
void CMsgCanGoBackAndForward::set_bgoback(bool value) {
  set_has_bgoback();
  bgoback_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgCanGoBackAndForward.bgoback)
}

// optional bool bgoforward = 3;
bool CMsgCanGoBackAndForward::has_bgoforward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgCanGoBackAndForward::set_has_bgoforward() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgCanGoBackAndForward::clear_has_bgoforward() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgCanGoBackAndForward::clear_bgoforward() {
  bgoforward_ = false;
  clear_has_bgoforward();
}
bool CMsgCanGoBackAndForward::bgoforward() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgCanGoBackAndForward.bgoforward)
  return bgoforward_;
}
void CMsgCanGoBackAndForward::set_bgoforward(bool value) {
  set_has_bgoforward();
  bgoforward_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgCanGoBackAndForward.bgoforward)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgOpenSteamURL::kBrowserHandleFieldNumber;
const int CMsgOpenSteamURL::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgOpenSteamURL::CMsgOpenSteamURL()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgOpenSteamURL)
}
CMsgOpenSteamURL::CMsgOpenSteamURL(const CMsgOpenSteamURL& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgOpenSteamURL)
}

void CMsgOpenSteamURL::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgOpenSteamURL::~CMsgOpenSteamURL() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgOpenSteamURL)
  SharedDtor();
}

void CMsgOpenSteamURL::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgOpenSteamURL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgOpenSteamURL::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgOpenSteamURL& CMsgOpenSteamURL::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgOpenSteamURL* CMsgOpenSteamURL::New(::google::protobuf::Arena* arena) const {
  CMsgOpenSteamURL* n = new CMsgOpenSteamURL;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgOpenSteamURL::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgOpenSteamURL)
  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgOpenSteamURL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgOpenSteamURL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgOpenSteamURL.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgOpenSteamURL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgOpenSteamURL)
  return false;
#undef DO_
}

void CMsgOpenSteamURL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgOpenSteamURL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgOpenSteamURL.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgOpenSteamURL)
}

::google::protobuf::uint8* CMsgOpenSteamURL::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgOpenSteamURL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgOpenSteamURL.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgOpenSteamURL)
  return target;
}

size_t CMsgOpenSteamURL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgOpenSteamURL)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgOpenSteamURL::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgOpenSteamURL)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgOpenSteamURL* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgOpenSteamURL>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgOpenSteamURL)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgOpenSteamURL)
    MergeFrom(*source);
  }
}

void CMsgOpenSteamURL::MergeFrom(const CMsgOpenSteamURL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgOpenSteamURL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgOpenSteamURL::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgOpenSteamURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgOpenSteamURL::CopyFrom(const CMsgOpenSteamURL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgOpenSteamURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgOpenSteamURL::IsInitialized() const {
  return true;
}

void CMsgOpenSteamURL::Swap(CMsgOpenSteamURL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgOpenSteamURL::InternalSwap(CMsgOpenSteamURL* other) {
  url_.Swap(&other->url_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgOpenSteamURL::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgOpenSteamURL

// optional uint32 browser_handle = 1;
bool CMsgOpenSteamURL::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgOpenSteamURL::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgOpenSteamURL::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgOpenSteamURL::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgOpenSteamURL::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgOpenSteamURL.browser_handle)
  return browser_handle_;
}
void CMsgOpenSteamURL::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgOpenSteamURL.browser_handle)
}

// optional string url = 2;
bool CMsgOpenSteamURL::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgOpenSteamURL::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgOpenSteamURL::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgOpenSteamURL::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CMsgOpenSteamURL::url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgOpenSteamURL.url)
  return url_.GetNoArena();
}
void CMsgOpenSteamURL::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgOpenSteamURL.url)
}
#if LANG_CXX11
void CMsgOpenSteamURL::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgOpenSteamURL.url)
}
#endif
void CMsgOpenSteamURL::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgOpenSteamURL.url)
}
void CMsgOpenSteamURL::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgOpenSteamURL.url)
}
::std::string* CMsgOpenSteamURL::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgOpenSteamURL.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgOpenSteamURL::release_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgOpenSteamURL.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgOpenSteamURL::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgOpenSteamURL.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetCookie::kKeyFieldNumber;
const int CMsgSetCookie::kValueFieldNumber;
const int CMsgSetCookie::kPathFieldNumber;
const int CMsgSetCookie::kHostFieldNumber;
const int CMsgSetCookie::kExpiresFieldNumber;
const int CMsgSetCookie::kSecureFieldNumber;
const int CMsgSetCookie::kHttponlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetCookie::CMsgSetCookie()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetCookie)
}
CMsgSetCookie::CMsgSetCookie(const CMsgSetCookie& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host()) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  ::memcpy(&expires_, &from.expires_,
    reinterpret_cast<char*>(&httponly_) -
    reinterpret_cast<char*>(&expires_) + sizeof(httponly_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetCookie)
}

void CMsgSetCookie::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&expires_, 0, reinterpret_cast<char*>(&httponly_) -
    reinterpret_cast<char*>(&expires_) + sizeof(httponly_));
}

CMsgSetCookie::~CMsgSetCookie() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetCookie)
  SharedDtor();
}

void CMsgSetCookie::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSetCookie::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetCookie::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSetCookie& CMsgSetCookie::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSetCookie* CMsgSetCookie::New(::google::protobuf::Arena* arena) const {
  CMsgSetCookie* n = new CMsgSetCookie;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSetCookie::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetCookie)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
    if (has_path()) {
      GOOGLE_DCHECK(!path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*path_.UnsafeRawStringPointer())->clear();
    }
    if (has_host()) {
      GOOGLE_DCHECK(!host_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*host_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 112u) {
    ::memset(&expires_, 0, reinterpret_cast<char*>(&httponly_) -
      reinterpret_cast<char*>(&expires_) + sizeof(httponly_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSetCookie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetCookie)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetCookie.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetCookie.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetCookie.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string host = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetCookie.host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 expires = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_expires();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expires_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool secure = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_secure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &secure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool httponly = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_httponly();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &httponly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetCookie)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetCookie)
  return false;
#undef DO_
}

void CMsgSetCookie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetCookie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetCookie.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetCookie.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional string path = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetCookie.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->path(), output);
  }

  // optional string host = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetCookie.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->host(), output);
  }

  // optional uint32 expires = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->expires(), output);
  }

  // optional bool secure = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->secure(), output);
  }

  // optional bool httponly = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->httponly(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetCookie)
}

::google::protobuf::uint8* CMsgSetCookie::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetCookie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetCookie.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetCookie.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional string path = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetCookie.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }

  // optional string host = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetCookie.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->host(), target);
  }

  // optional uint32 expires = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->expires(), target);
  }

  // optional bool secure = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->secure(), target);
  }

  // optional bool httponly = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->httponly(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetCookie)
  return target;
}

size_t CMsgSetCookie::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetCookie)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional string path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string host = 4;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional uint32 expires = 5;
    if (has_expires()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expires());
    }

    // optional bool secure = 6;
    if (has_secure()) {
      total_size += 1 + 1;
    }

    // optional bool httponly = 7;
    if (has_httponly()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetCookie::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetCookie)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetCookie* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSetCookie>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetCookie)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetCookie)
    MergeFrom(*source);
  }
}

void CMsgSetCookie::MergeFrom(const CMsgSetCookie& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetCookie)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_host();
      host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
    }
    if (cached_has_bits & 0x00000010u) {
      expires_ = from.expires_;
    }
    if (cached_has_bits & 0x00000020u) {
      secure_ = from.secure_;
    }
    if (cached_has_bits & 0x00000040u) {
      httponly_ = from.httponly_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetCookie::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetCookie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetCookie::CopyFrom(const CMsgSetCookie& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetCookie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetCookie::IsInitialized() const {
  return true;
}

void CMsgSetCookie::Swap(CMsgSetCookie* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetCookie::InternalSwap(CMsgSetCookie* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  path_.Swap(&other->path_);
  host_.Swap(&other->host_);
  std::swap(expires_, other->expires_);
  std::swap(secure_, other->secure_);
  std::swap(httponly_, other->httponly_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSetCookie::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSetCookie

// optional string key = 1;
bool CMsgSetCookie::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSetCookie::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSetCookie::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSetCookie::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& CMsgSetCookie::key() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetCookie.key)
  return key_.GetNoArena();
}
void CMsgSetCookie::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetCookie.key)
}
#if LANG_CXX11
void CMsgSetCookie::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSetCookie.key)
}
#endif
void CMsgSetCookie::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSetCookie.key)
}
void CMsgSetCookie::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSetCookie.key)
}
::std::string* CMsgSetCookie::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSetCookie.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSetCookie::release_key() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSetCookie.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSetCookie::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSetCookie.key)
}

// optional string value = 2;
bool CMsgSetCookie::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSetCookie::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSetCookie::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSetCookie::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CMsgSetCookie::value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetCookie.value)
  return value_.GetNoArena();
}
void CMsgSetCookie::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetCookie.value)
}
#if LANG_CXX11
void CMsgSetCookie::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSetCookie.value)
}
#endif
void CMsgSetCookie::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSetCookie.value)
}
void CMsgSetCookie::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSetCookie.value)
}
::std::string* CMsgSetCookie::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSetCookie.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSetCookie::release_value() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSetCookie.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSetCookie::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSetCookie.value)
}

// optional string path = 3;
bool CMsgSetCookie::has_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSetCookie::set_has_path() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSetCookie::clear_has_path() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSetCookie::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
const ::std::string& CMsgSetCookie::path() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetCookie.path)
  return path_.GetNoArena();
}
void CMsgSetCookie::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetCookie.path)
}
#if LANG_CXX11
void CMsgSetCookie::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSetCookie.path)
}
#endif
void CMsgSetCookie::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSetCookie.path)
}
void CMsgSetCookie::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSetCookie.path)
}
::std::string* CMsgSetCookie::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSetCookie.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSetCookie::release_path() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSetCookie.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSetCookie::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSetCookie.path)
}

// optional string host = 4;
bool CMsgSetCookie::has_host() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSetCookie::set_has_host() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSetCookie::clear_has_host() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSetCookie::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
const ::std::string& CMsgSetCookie::host() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetCookie.host)
  return host_.GetNoArena();
}
void CMsgSetCookie::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetCookie.host)
}
#if LANG_CXX11
void CMsgSetCookie::set_host(::std::string&& value) {
  set_has_host();
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSetCookie.host)
}
#endif
void CMsgSetCookie::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSetCookie.host)
}
void CMsgSetCookie::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSetCookie.host)
}
::std::string* CMsgSetCookie::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSetCookie.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSetCookie::release_host() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSetCookie.host)
  clear_has_host();
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSetCookie::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSetCookie.host)
}

// optional uint32 expires = 5;
bool CMsgSetCookie::has_expires() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgSetCookie::set_has_expires() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgSetCookie::clear_has_expires() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgSetCookie::clear_expires() {
  expires_ = 0u;
  clear_has_expires();
}
::google::protobuf::uint32 CMsgSetCookie::expires() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetCookie.expires)
  return expires_;
}
void CMsgSetCookie::set_expires(::google::protobuf::uint32 value) {
  set_has_expires();
  expires_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetCookie.expires)
}

// optional bool secure = 6;
bool CMsgSetCookie::has_secure() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgSetCookie::set_has_secure() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgSetCookie::clear_has_secure() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgSetCookie::clear_secure() {
  secure_ = false;
  clear_has_secure();
}
bool CMsgSetCookie::secure() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetCookie.secure)
  return secure_;
}
void CMsgSetCookie::set_secure(bool value) {
  set_has_secure();
  secure_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetCookie.secure)
}

// optional bool httponly = 7;
bool CMsgSetCookie::has_httponly() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgSetCookie::set_has_httponly() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgSetCookie::clear_has_httponly() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgSetCookie::clear_httponly() {
  httponly_ = false;
  clear_has_httponly();
}
bool CMsgSetCookie::httponly() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetCookie.httponly)
  return httponly_;
}
void CMsgSetCookie::set_httponly(bool value) {
  set_has_httponly();
  httponly_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetCookie.httponly)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetTargetFrameRate::kBrowserHandleFieldNumber;
const int CMsgSetTargetFrameRate::kNTargetFrameRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetTargetFrameRate::CMsgSetTargetFrameRate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetTargetFrameRate)
}
CMsgSetTargetFrameRate::CMsgSetTargetFrameRate(const CMsgSetTargetFrameRate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&ntargetframerate_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(ntargetframerate_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetTargetFrameRate)
}

void CMsgSetTargetFrameRate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&ntargetframerate_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(ntargetframerate_));
}

CMsgSetTargetFrameRate::~CMsgSetTargetFrameRate() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetTargetFrameRate)
  SharedDtor();
}

void CMsgSetTargetFrameRate::SharedDtor() {
}

void CMsgSetTargetFrameRate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetTargetFrameRate::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSetTargetFrameRate& CMsgSetTargetFrameRate::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSetTargetFrameRate* CMsgSetTargetFrameRate::New(::google::protobuf::Arena* arena) const {
  CMsgSetTargetFrameRate* n = new CMsgSetTargetFrameRate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSetTargetFrameRate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetTargetFrameRate)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&ntargetframerate_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(ntargetframerate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSetTargetFrameRate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetTargetFrameRate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 nTargetFrameRate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ntargetframerate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntargetframerate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetTargetFrameRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetTargetFrameRate)
  return false;
#undef DO_
}

void CMsgSetTargetFrameRate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetTargetFrameRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 nTargetFrameRate = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ntargetframerate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetTargetFrameRate)
}

::google::protobuf::uint8* CMsgSetTargetFrameRate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetTargetFrameRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 nTargetFrameRate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ntargetframerate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetTargetFrameRate)
  return target;
}

size_t CMsgSetTargetFrameRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetTargetFrameRate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 nTargetFrameRate = 2;
    if (has_ntargetframerate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ntargetframerate());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetTargetFrameRate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetTargetFrameRate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetTargetFrameRate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSetTargetFrameRate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetTargetFrameRate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetTargetFrameRate)
    MergeFrom(*source);
  }
}

void CMsgSetTargetFrameRate::MergeFrom(const CMsgSetTargetFrameRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetTargetFrameRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      ntargetframerate_ = from.ntargetframerate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetTargetFrameRate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetTargetFrameRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetTargetFrameRate::CopyFrom(const CMsgSetTargetFrameRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetTargetFrameRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetTargetFrameRate::IsInitialized() const {
  return true;
}

void CMsgSetTargetFrameRate::Swap(CMsgSetTargetFrameRate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetTargetFrameRate::InternalSwap(CMsgSetTargetFrameRate* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(ntargetframerate_, other->ntargetframerate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSetTargetFrameRate::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSetTargetFrameRate

// optional uint32 browser_handle = 1;
bool CMsgSetTargetFrameRate::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSetTargetFrameRate::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSetTargetFrameRate::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSetTargetFrameRate::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgSetTargetFrameRate::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetTargetFrameRate.browser_handle)
  return browser_handle_;
}
void CMsgSetTargetFrameRate::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetTargetFrameRate.browser_handle)
}

// optional uint32 nTargetFrameRate = 2;
bool CMsgSetTargetFrameRate::has_ntargetframerate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSetTargetFrameRate::set_has_ntargetframerate() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSetTargetFrameRate::clear_has_ntargetframerate() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSetTargetFrameRate::clear_ntargetframerate() {
  ntargetframerate_ = 0u;
  clear_has_ntargetframerate();
}
::google::protobuf::uint32 CMsgSetTargetFrameRate::ntargetframerate() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetTargetFrameRate.nTargetFrameRate)
  return ntargetframerate_;
}
void CMsgSetTargetFrameRate::set_ntargetframerate(::google::protobuf::uint32 value) {
  set_has_ntargetframerate();
  ntargetframerate_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetTargetFrameRate.nTargetFrameRate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPauseRepaint::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPauseRepaint::CMsgPauseRepaint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgPauseRepaint)
}
CMsgPauseRepaint::CMsgPauseRepaint(const CMsgPauseRepaint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgPauseRepaint)
}

void CMsgPauseRepaint::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgPauseRepaint::~CMsgPauseRepaint() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgPauseRepaint)
  SharedDtor();
}

void CMsgPauseRepaint::SharedDtor() {
}

void CMsgPauseRepaint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPauseRepaint::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPauseRepaint& CMsgPauseRepaint::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPauseRepaint* CMsgPauseRepaint::New(::google::protobuf::Arena* arena) const {
  CMsgPauseRepaint* n = new CMsgPauseRepaint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPauseRepaint::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgPauseRepaint)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPauseRepaint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgPauseRepaint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgPauseRepaint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgPauseRepaint)
  return false;
#undef DO_
}

void CMsgPauseRepaint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgPauseRepaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgPauseRepaint)
}

::google::protobuf::uint8* CMsgPauseRepaint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgPauseRepaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgPauseRepaint)
  return target;
}

size_t CMsgPauseRepaint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgPauseRepaint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPauseRepaint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgPauseRepaint)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPauseRepaint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPauseRepaint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgPauseRepaint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgPauseRepaint)
    MergeFrom(*source);
  }
}

void CMsgPauseRepaint::MergeFrom(const CMsgPauseRepaint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgPauseRepaint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgPauseRepaint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgPauseRepaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPauseRepaint::CopyFrom(const CMsgPauseRepaint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgPauseRepaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPauseRepaint::IsInitialized() const {
  return true;
}

void CMsgPauseRepaint::Swap(CMsgPauseRepaint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPauseRepaint::InternalSwap(CMsgPauseRepaint* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPauseRepaint::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPauseRepaint

// optional uint32 browser_handle = 1;
bool CMsgPauseRepaint::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPauseRepaint::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPauseRepaint::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPauseRepaint::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgPauseRepaint::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgPauseRepaint.browser_handle)
  return browser_handle_;
}
void CMsgPauseRepaint::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgPauseRepaint.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgFullRepaint::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgFullRepaint::CMsgFullRepaint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgFullRepaint)
}
CMsgFullRepaint::CMsgFullRepaint(const CMsgFullRepaint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgFullRepaint)
}

void CMsgFullRepaint::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgFullRepaint::~CMsgFullRepaint() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgFullRepaint)
  SharedDtor();
}

void CMsgFullRepaint::SharedDtor() {
}

void CMsgFullRepaint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFullRepaint::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgFullRepaint& CMsgFullRepaint::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgFullRepaint* CMsgFullRepaint::New(::google::protobuf::Arena* arena) const {
  CMsgFullRepaint* n = new CMsgFullRepaint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgFullRepaint::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgFullRepaint)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgFullRepaint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgFullRepaint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgFullRepaint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgFullRepaint)
  return false;
#undef DO_
}

void CMsgFullRepaint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgFullRepaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgFullRepaint)
}

::google::protobuf::uint8* CMsgFullRepaint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgFullRepaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgFullRepaint)
  return target;
}

size_t CMsgFullRepaint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgFullRepaint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFullRepaint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgFullRepaint)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFullRepaint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgFullRepaint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgFullRepaint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgFullRepaint)
    MergeFrom(*source);
  }
}

void CMsgFullRepaint::MergeFrom(const CMsgFullRepaint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgFullRepaint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgFullRepaint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgFullRepaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFullRepaint::CopyFrom(const CMsgFullRepaint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgFullRepaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFullRepaint::IsInitialized() const {
  return true;
}

void CMsgFullRepaint::Swap(CMsgFullRepaint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgFullRepaint::InternalSwap(CMsgFullRepaint* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgFullRepaint::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgFullRepaint

// optional uint32 browser_handle = 1;
bool CMsgFullRepaint::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgFullRepaint::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgFullRepaint::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgFullRepaint::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgFullRepaint::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgFullRepaint.browser_handle)
  return browser_handle_;
}
void CMsgFullRepaint::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgFullRepaint.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRequestFullScreen::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRequestFullScreen::CMsgRequestFullScreen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRequestFullScreen)
}
CMsgRequestFullScreen::CMsgRequestFullScreen(const CMsgRequestFullScreen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRequestFullScreen)
}

void CMsgRequestFullScreen::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgRequestFullScreen::~CMsgRequestFullScreen() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRequestFullScreen)
  SharedDtor();
}

void CMsgRequestFullScreen::SharedDtor() {
}

void CMsgRequestFullScreen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestFullScreen::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRequestFullScreen& CMsgRequestFullScreen::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRequestFullScreen* CMsgRequestFullScreen::New(::google::protobuf::Arena* arena) const {
  CMsgRequestFullScreen* n = new CMsgRequestFullScreen;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRequestFullScreen::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRequestFullScreen)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRequestFullScreen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRequestFullScreen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRequestFullScreen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRequestFullScreen)
  return false;
#undef DO_
}

void CMsgRequestFullScreen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRequestFullScreen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRequestFullScreen)
}

::google::protobuf::uint8* CMsgRequestFullScreen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRequestFullScreen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRequestFullScreen)
  return target;
}

size_t CMsgRequestFullScreen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRequestFullScreen)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestFullScreen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRequestFullScreen)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRequestFullScreen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRequestFullScreen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRequestFullScreen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRequestFullScreen)
    MergeFrom(*source);
  }
}

void CMsgRequestFullScreen::MergeFrom(const CMsgRequestFullScreen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRequestFullScreen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgRequestFullScreen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRequestFullScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestFullScreen::CopyFrom(const CMsgRequestFullScreen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRequestFullScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestFullScreen::IsInitialized() const {
  return true;
}

void CMsgRequestFullScreen::Swap(CMsgRequestFullScreen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRequestFullScreen::InternalSwap(CMsgRequestFullScreen* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRequestFullScreen::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRequestFullScreen

// optional uint32 browser_handle = 1;
bool CMsgRequestFullScreen::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRequestFullScreen::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRequestFullScreen::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRequestFullScreen::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgRequestFullScreen::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRequestFullScreen.browser_handle)
  return browser_handle_;
}
void CMsgRequestFullScreen::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRequestFullScreen.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRequestFullScreenResponse::kBrowserHandleFieldNumber;
const int CMsgRequestFullScreenResponse::kBallowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRequestFullScreenResponse::CMsgRequestFullScreenResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRequestFullScreenResponse)
}
CMsgRequestFullScreenResponse::CMsgRequestFullScreenResponse(const CMsgRequestFullScreenResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&ballow_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(ballow_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRequestFullScreenResponse)
}

void CMsgRequestFullScreenResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&ballow_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(ballow_));
}

CMsgRequestFullScreenResponse::~CMsgRequestFullScreenResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRequestFullScreenResponse)
  SharedDtor();
}

void CMsgRequestFullScreenResponse::SharedDtor() {
}

void CMsgRequestFullScreenResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestFullScreenResponse::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRequestFullScreenResponse& CMsgRequestFullScreenResponse::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRequestFullScreenResponse* CMsgRequestFullScreenResponse::New(::google::protobuf::Arena* arena) const {
  CMsgRequestFullScreenResponse* n = new CMsgRequestFullScreenResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRequestFullScreenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRequestFullScreenResponse)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&ballow_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(ballow_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRequestFullScreenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRequestFullScreenResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ballow = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ballow();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ballow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRequestFullScreenResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRequestFullScreenResponse)
  return false;
#undef DO_
}

void CMsgRequestFullScreenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRequestFullScreenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional bool ballow = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ballow(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRequestFullScreenResponse)
}

::google::protobuf::uint8* CMsgRequestFullScreenResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRequestFullScreenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional bool ballow = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ballow(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRequestFullScreenResponse)
  return target;
}

size_t CMsgRequestFullScreenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRequestFullScreenResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional bool ballow = 2;
    if (has_ballow()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestFullScreenResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRequestFullScreenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRequestFullScreenResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRequestFullScreenResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRequestFullScreenResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRequestFullScreenResponse)
    MergeFrom(*source);
  }
}

void CMsgRequestFullScreenResponse::MergeFrom(const CMsgRequestFullScreenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRequestFullScreenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      ballow_ = from.ballow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRequestFullScreenResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRequestFullScreenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestFullScreenResponse::CopyFrom(const CMsgRequestFullScreenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRequestFullScreenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestFullScreenResponse::IsInitialized() const {
  return true;
}

void CMsgRequestFullScreenResponse::Swap(CMsgRequestFullScreenResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRequestFullScreenResponse::InternalSwap(CMsgRequestFullScreenResponse* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(ballow_, other->ballow_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRequestFullScreenResponse::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRequestFullScreenResponse

// optional uint32 browser_handle = 1;
bool CMsgRequestFullScreenResponse::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRequestFullScreenResponse::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRequestFullScreenResponse::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRequestFullScreenResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgRequestFullScreenResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRequestFullScreenResponse.browser_handle)
  return browser_handle_;
}
void CMsgRequestFullScreenResponse::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRequestFullScreenResponse.browser_handle)
}

// optional bool ballow = 2;
bool CMsgRequestFullScreenResponse::has_ballow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgRequestFullScreenResponse::set_has_ballow() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgRequestFullScreenResponse::clear_has_ballow() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgRequestFullScreenResponse::clear_ballow() {
  ballow_ = false;
  clear_has_ballow();
}
bool CMsgRequestFullScreenResponse::ballow() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRequestFullScreenResponse.ballow)
  return ballow_;
}
void CMsgRequestFullScreenResponse::set_ballow(bool value) {
  set_has_ballow();
  ballow_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRequestFullScreenResponse.ballow)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgExitFullScreen::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgExitFullScreen::CMsgExitFullScreen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgExitFullScreen)
}
CMsgExitFullScreen::CMsgExitFullScreen(const CMsgExitFullScreen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgExitFullScreen)
}

void CMsgExitFullScreen::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgExitFullScreen::~CMsgExitFullScreen() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgExitFullScreen)
  SharedDtor();
}

void CMsgExitFullScreen::SharedDtor() {
}

void CMsgExitFullScreen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgExitFullScreen::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgExitFullScreen& CMsgExitFullScreen::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgExitFullScreen* CMsgExitFullScreen::New(::google::protobuf::Arena* arena) const {
  CMsgExitFullScreen* n = new CMsgExitFullScreen;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgExitFullScreen::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgExitFullScreen)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgExitFullScreen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgExitFullScreen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgExitFullScreen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgExitFullScreen)
  return false;
#undef DO_
}

void CMsgExitFullScreen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgExitFullScreen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgExitFullScreen)
}

::google::protobuf::uint8* CMsgExitFullScreen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgExitFullScreen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgExitFullScreen)
  return target;
}

size_t CMsgExitFullScreen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgExitFullScreen)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgExitFullScreen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgExitFullScreen)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgExitFullScreen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgExitFullScreen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgExitFullScreen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgExitFullScreen)
    MergeFrom(*source);
  }
}

void CMsgExitFullScreen::MergeFrom(const CMsgExitFullScreen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgExitFullScreen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgExitFullScreen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgExitFullScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgExitFullScreen::CopyFrom(const CMsgExitFullScreen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgExitFullScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExitFullScreen::IsInitialized() const {
  return true;
}

void CMsgExitFullScreen::Swap(CMsgExitFullScreen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgExitFullScreen::InternalSwap(CMsgExitFullScreen* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgExitFullScreen::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgExitFullScreen

// optional uint32 browser_handle = 1;
bool CMsgExitFullScreen::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgExitFullScreen::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgExitFullScreen::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgExitFullScreen::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgExitFullScreen::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgExitFullScreen.browser_handle)
  return browser_handle_;
}
void CMsgExitFullScreen::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgExitFullScreen.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGetCookiesForURL::kBrowserHandleFieldNumber;
const int CMsgGetCookiesForURL::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGetCookiesForURL::CMsgGetCookiesForURL()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGetCookiesForURL)
}
CMsgGetCookiesForURL::CMsgGetCookiesForURL(const CMsgGetCookiesForURL& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGetCookiesForURL)
}

void CMsgGetCookiesForURL::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgGetCookiesForURL::~CMsgGetCookiesForURL() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGetCookiesForURL)
  SharedDtor();
}

void CMsgGetCookiesForURL::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGetCookiesForURL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGetCookiesForURL::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGetCookiesForURL& CMsgGetCookiesForURL::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGetCookiesForURL* CMsgGetCookiesForURL::New(::google::protobuf::Arena* arena) const {
  CMsgGetCookiesForURL* n = new CMsgGetCookiesForURL;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGetCookiesForURL::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGetCookiesForURL)
  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGetCookiesForURL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGetCookiesForURL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgGetCookiesForURL.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGetCookiesForURL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGetCookiesForURL)
  return false;
#undef DO_
}

void CMsgGetCookiesForURL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGetCookiesForURL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgGetCookiesForURL.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGetCookiesForURL)
}

::google::protobuf::uint8* CMsgGetCookiesForURL::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGetCookiesForURL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgGetCookiesForURL.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGetCookiesForURL)
  return target;
}

size_t CMsgGetCookiesForURL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGetCookiesForURL)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGetCookiesForURL::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGetCookiesForURL)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGetCookiesForURL* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGetCookiesForURL>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGetCookiesForURL)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGetCookiesForURL)
    MergeFrom(*source);
  }
}

void CMsgGetCookiesForURL::MergeFrom(const CMsgGetCookiesForURL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGetCookiesForURL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGetCookiesForURL::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGetCookiesForURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGetCookiesForURL::CopyFrom(const CMsgGetCookiesForURL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGetCookiesForURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGetCookiesForURL::IsInitialized() const {
  return true;
}

void CMsgGetCookiesForURL::Swap(CMsgGetCookiesForURL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGetCookiesForURL::InternalSwap(CMsgGetCookiesForURL* other) {
  url_.Swap(&other->url_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGetCookiesForURL::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGetCookiesForURL

// optional uint32 browser_handle = 1;
bool CMsgGetCookiesForURL::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGetCookiesForURL::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGetCookiesForURL::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGetCookiesForURL::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgGetCookiesForURL::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGetCookiesForURL.browser_handle)
  return browser_handle_;
}
void CMsgGetCookiesForURL::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGetCookiesForURL.browser_handle)
}

// optional string url = 2;
bool CMsgGetCookiesForURL::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGetCookiesForURL::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGetCookiesForURL::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGetCookiesForURL::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CMsgGetCookiesForURL::url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGetCookiesForURL.url)
  return url_.GetNoArena();
}
void CMsgGetCookiesForURL::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGetCookiesForURL.url)
}
#if LANG_CXX11
void CMsgGetCookiesForURL::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgGetCookiesForURL.url)
}
#endif
void CMsgGetCookiesForURL::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgGetCookiesForURL.url)
}
void CMsgGetCookiesForURL::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgGetCookiesForURL.url)
}
::std::string* CMsgGetCookiesForURL::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgGetCookiesForURL.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGetCookiesForURL::release_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgGetCookiesForURL.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGetCookiesForURL::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgGetCookiesForURL.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCookie::kNameFieldNumber;
const int CCookie::kValueFieldNumber;
const int CCookie::kDomainFieldNumber;
const int CCookie::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCookie::CCookie()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCookie)
}
CCookie::CCookie(const CCookie& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_domain()) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCookie)
}

void CCookie::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CCookie::~CCookie() {
  // @@protoc_insertion_point(destructor:proto.steam.CCookie)
  SharedDtor();
}

void CCookie::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCookie::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCookie::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCookie& CCookie::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCookie* CCookie::New(::google::protobuf::Arena* arena) const {
  CCookie* n = new CCookie;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCookie::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCookie)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
    if (has_domain()) {
      GOOGLE_DCHECK(!domain_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*domain_.UnsafeRawStringPointer())->clear();
    }
    if (has_path()) {
      GOOGLE_DCHECK(!path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*path_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCookie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCookie)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCookie.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCookie.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string domain = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCookie.domain");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string path = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCookie.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCookie)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCookie)
  return false;
#undef DO_
}

void CCookie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCookie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCookie.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCookie.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional string domain = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCookie.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->domain(), output);
  }

  // optional string path = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCookie.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCookie)
}

::google::protobuf::uint8* CCookie::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCookie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCookie.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCookie.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional string domain = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCookie.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->domain(), target);
  }

  // optional string path = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCookie.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCookie)
  return target;
}

size_t CCookie::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCookie)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional string domain = 3;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional string path = 4;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCookie::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCookie)
  GOOGLE_DCHECK_NE(&from, this);
  const CCookie* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCookie>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCookie)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCookie)
    MergeFrom(*source);
  }
}

void CCookie::MergeFrom(const CCookie& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCookie)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_domain();
      domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
  }
}

void CCookie::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCookie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCookie::CopyFrom(const CCookie& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCookie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCookie::IsInitialized() const {
  return true;
}

void CCookie::Swap(CCookie* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCookie::InternalSwap(CCookie* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  domain_.Swap(&other->domain_);
  path_.Swap(&other->path_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCookie::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCookie

// optional string name = 1;
bool CCookie::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCookie::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CCookie::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCookie::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CCookie::name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCookie.name)
  return name_.GetNoArena();
}
void CCookie::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCookie.name)
}
#if LANG_CXX11
void CCookie::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCookie.name)
}
#endif
void CCookie::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCookie.name)
}
void CCookie::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCookie.name)
}
::std::string* CCookie::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCookie.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCookie::release_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CCookie.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCookie::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCookie.name)
}

// optional string value = 2;
bool CCookie::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCookie::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CCookie::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCookie::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CCookie::value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCookie.value)
  return value_.GetNoArena();
}
void CCookie::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCookie.value)
}
#if LANG_CXX11
void CCookie::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCookie.value)
}
#endif
void CCookie::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCookie.value)
}
void CCookie::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCookie.value)
}
::std::string* CCookie::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCookie.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCookie::release_value() {
  // @@protoc_insertion_point(field_release:proto.steam.CCookie.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCookie::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCookie.value)
}

// optional string domain = 3;
bool CCookie::has_domain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCookie::set_has_domain() {
  _has_bits_[0] |= 0x00000004u;
}
void CCookie::clear_has_domain() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCookie::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
const ::std::string& CCookie::domain() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCookie.domain)
  return domain_.GetNoArena();
}
void CCookie::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCookie.domain)
}
#if LANG_CXX11
void CCookie::set_domain(::std::string&& value) {
  set_has_domain();
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCookie.domain)
}
#endif
void CCookie::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCookie.domain)
}
void CCookie::set_domain(const char* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCookie.domain)
}
::std::string* CCookie::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCookie.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCookie::release_domain() {
  // @@protoc_insertion_point(field_release:proto.steam.CCookie.domain)
  clear_has_domain();
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCookie::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCookie.domain)
}

// optional string path = 4;
bool CCookie::has_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CCookie::set_has_path() {
  _has_bits_[0] |= 0x00000008u;
}
void CCookie::clear_has_path() {
  _has_bits_[0] &= ~0x00000008u;
}
void CCookie::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
const ::std::string& CCookie::path() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCookie.path)
  return path_.GetNoArena();
}
void CCookie::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCookie.path)
}
#if LANG_CXX11
void CCookie::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCookie.path)
}
#endif
void CCookie::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCookie.path)
}
void CCookie::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCookie.path)
}
::std::string* CCookie::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCookie.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCookie::release_path() {
  // @@protoc_insertion_point(field_release:proto.steam.CCookie.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCookie::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCookie.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGetCookiesForURLResponse::kBrowserHandleFieldNumber;
const int CMsgGetCookiesForURLResponse::kUrlFieldNumber;
const int CMsgGetCookiesForURLResponse::kCookiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGetCookiesForURLResponse::CMsgGetCookiesForURLResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGetCookiesForURLResponse)
}
CMsgGetCookiesForURLResponse::CMsgGetCookiesForURLResponse(const CMsgGetCookiesForURLResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cookies_(from.cookies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGetCookiesForURLResponse)
}

void CMsgGetCookiesForURLResponse::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgGetCookiesForURLResponse::~CMsgGetCookiesForURLResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGetCookiesForURLResponse)
  SharedDtor();
}

void CMsgGetCookiesForURLResponse::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGetCookiesForURLResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGetCookiesForURLResponse::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGetCookiesForURLResponse& CMsgGetCookiesForURLResponse::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGetCookiesForURLResponse* CMsgGetCookiesForURLResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGetCookiesForURLResponse* n = new CMsgGetCookiesForURLResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGetCookiesForURLResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGetCookiesForURLResponse)
  cookies_.Clear();
  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGetCookiesForURLResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGetCookiesForURLResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgGetCookiesForURLResponse.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CCookie cookies = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cookies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGetCookiesForURLResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGetCookiesForURLResponse)
  return false;
#undef DO_
}

void CMsgGetCookiesForURLResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGetCookiesForURLResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgGetCookiesForURLResponse.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // repeated .proto.steam.CCookie cookies = 3;
  for (unsigned int i = 0, n = this->cookies_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cookies(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGetCookiesForURLResponse)
}

::google::protobuf::uint8* CMsgGetCookiesForURLResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGetCookiesForURLResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgGetCookiesForURLResponse.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // repeated .proto.steam.CCookie cookies = 3;
  for (unsigned int i = 0, n = this->cookies_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->cookies(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGetCookiesForURLResponse)
  return target;
}

size_t CMsgGetCookiesForURLResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGetCookiesForURLResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CCookie cookies = 3;
  {
    unsigned int count = this->cookies_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cookies(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGetCookiesForURLResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGetCookiesForURLResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGetCookiesForURLResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGetCookiesForURLResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGetCookiesForURLResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGetCookiesForURLResponse)
    MergeFrom(*source);
  }
}

void CMsgGetCookiesForURLResponse::MergeFrom(const CMsgGetCookiesForURLResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGetCookiesForURLResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cookies_.MergeFrom(from.cookies_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGetCookiesForURLResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGetCookiesForURLResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGetCookiesForURLResponse::CopyFrom(const CMsgGetCookiesForURLResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGetCookiesForURLResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGetCookiesForURLResponse::IsInitialized() const {
  return true;
}

void CMsgGetCookiesForURLResponse::Swap(CMsgGetCookiesForURLResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGetCookiesForURLResponse::InternalSwap(CMsgGetCookiesForURLResponse* other) {
  cookies_.InternalSwap(&other->cookies_);
  url_.Swap(&other->url_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGetCookiesForURLResponse::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGetCookiesForURLResponse

// optional uint32 browser_handle = 1;
bool CMsgGetCookiesForURLResponse::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGetCookiesForURLResponse::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGetCookiesForURLResponse::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGetCookiesForURLResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgGetCookiesForURLResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGetCookiesForURLResponse.browser_handle)
  return browser_handle_;
}
void CMsgGetCookiesForURLResponse::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGetCookiesForURLResponse.browser_handle)
}

// optional string url = 2;
bool CMsgGetCookiesForURLResponse::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGetCookiesForURLResponse::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGetCookiesForURLResponse::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGetCookiesForURLResponse::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CMsgGetCookiesForURLResponse::url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGetCookiesForURLResponse.url)
  return url_.GetNoArena();
}
void CMsgGetCookiesForURLResponse::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGetCookiesForURLResponse.url)
}
#if LANG_CXX11
void CMsgGetCookiesForURLResponse::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgGetCookiesForURLResponse.url)
}
#endif
void CMsgGetCookiesForURLResponse::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgGetCookiesForURLResponse.url)
}
void CMsgGetCookiesForURLResponse::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgGetCookiesForURLResponse.url)
}
::std::string* CMsgGetCookiesForURLResponse::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgGetCookiesForURLResponse.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGetCookiesForURLResponse::release_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgGetCookiesForURLResponse.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGetCookiesForURLResponse::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgGetCookiesForURLResponse.url)
}

// repeated .proto.steam.CCookie cookies = 3;
int CMsgGetCookiesForURLResponse::cookies_size() const {
  return cookies_.size();
}
void CMsgGetCookiesForURLResponse::clear_cookies() {
  cookies_.Clear();
}
const ::proto::steam::CCookie& CMsgGetCookiesForURLResponse::cookies(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGetCookiesForURLResponse.cookies)
  return cookies_.Get(index);
}
::proto::steam::CCookie* CMsgGetCookiesForURLResponse::mutable_cookies(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgGetCookiesForURLResponse.cookies)
  return cookies_.Mutable(index);
}
::proto::steam::CCookie* CMsgGetCookiesForURLResponse::add_cookies() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgGetCookiesForURLResponse.cookies)
  return cookies_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CCookie >*
CMsgGetCookiesForURLResponse::mutable_cookies() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgGetCookiesForURLResponse.cookies)
  return &cookies_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CCookie >&
CMsgGetCookiesForURLResponse::cookies() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgGetCookiesForURLResponse.cookies)
  return cookies_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgNodeHasFocus::kBrowserHandleFieldNumber;
const int CMsgNodeHasFocus::kBInputFieldNumber;
const int CMsgNodeHasFocus::kNameFieldNumber;
const int CMsgNodeHasFocus::kElementtagnameFieldNumber;
const int CMsgNodeHasFocus::kSearchbuttontextFieldNumber;
const int CMsgNodeHasFocus::kBHasMultipleInputsFieldNumber;
const int CMsgNodeHasFocus::kInputTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgNodeHasFocus::CMsgNodeHasFocus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgNodeHasFocus)
}
CMsgNodeHasFocus::CMsgNodeHasFocus(const CMsgNodeHasFocus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  elementtagname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_elementtagname()) {
    elementtagname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.elementtagname_);
  }
  searchbuttontext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_searchbuttontext()) {
    searchbuttontext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.searchbuttontext_);
  }
  input_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_input_type()) {
    input_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_type_);
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&bhasmultipleinputs_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(bhasmultipleinputs_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgNodeHasFocus)
}

void CMsgNodeHasFocus::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  elementtagname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  searchbuttontext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&bhasmultipleinputs_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(bhasmultipleinputs_));
}

CMsgNodeHasFocus::~CMsgNodeHasFocus() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgNodeHasFocus)
  SharedDtor();
}

void CMsgNodeHasFocus::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  elementtagname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  searchbuttontext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgNodeHasFocus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgNodeHasFocus::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgNodeHasFocus& CMsgNodeHasFocus::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgNodeHasFocus* CMsgNodeHasFocus::New(::google::protobuf::Arena* arena) const {
  CMsgNodeHasFocus* n = new CMsgNodeHasFocus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgNodeHasFocus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgNodeHasFocus)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_elementtagname()) {
      GOOGLE_DCHECK(!elementtagname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*elementtagname_.UnsafeRawStringPointer())->clear();
    }
    if (has_searchbuttontext()) {
      GOOGLE_DCHECK(!searchbuttontext_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*searchbuttontext_.UnsafeRawStringPointer())->clear();
    }
    if (has_input_type()) {
      GOOGLE_DCHECK(!input_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*input_type_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 112u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&bhasmultipleinputs_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(bhasmultipleinputs_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgNodeHasFocus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgNodeHasFocus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bInput = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_binput();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binput_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgNodeHasFocus.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string elementtagname = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_elementtagname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->elementtagname().data(), this->elementtagname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgNodeHasFocus.elementtagname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string searchbuttontext = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searchbuttontext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->searchbuttontext().data(), this->searchbuttontext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgNodeHasFocus.searchbuttontext");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bHasMultipleInputs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_bhasmultipleinputs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhasmultipleinputs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string input_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_type().data(), this->input_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgNodeHasFocus.input_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgNodeHasFocus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgNodeHasFocus)
  return false;
#undef DO_
}

void CMsgNodeHasFocus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgNodeHasFocus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional bool bInput = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->binput(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgNodeHasFocus.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string elementtagname = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->elementtagname().data(), this->elementtagname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgNodeHasFocus.elementtagname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->elementtagname(), output);
  }

  // optional string searchbuttontext = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchbuttontext().data(), this->searchbuttontext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgNodeHasFocus.searchbuttontext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->searchbuttontext(), output);
  }

  // optional bool bHasMultipleInputs = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bhasmultipleinputs(), output);
  }

  // optional string input_type = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_type().data(), this->input_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgNodeHasFocus.input_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->input_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgNodeHasFocus)
}

::google::protobuf::uint8* CMsgNodeHasFocus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgNodeHasFocus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional bool bInput = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->binput(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgNodeHasFocus.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string elementtagname = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->elementtagname().data(), this->elementtagname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgNodeHasFocus.elementtagname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->elementtagname(), target);
  }

  // optional string searchbuttontext = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchbuttontext().data(), this->searchbuttontext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgNodeHasFocus.searchbuttontext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->searchbuttontext(), target);
  }

  // optional bool bHasMultipleInputs = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bhasmultipleinputs(), target);
  }

  // optional string input_type = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_type().data(), this->input_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgNodeHasFocus.input_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->input_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgNodeHasFocus)
  return target;
}

size_t CMsgNodeHasFocus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgNodeHasFocus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string elementtagname = 4;
    if (has_elementtagname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->elementtagname());
    }

    // optional string searchbuttontext = 5;
    if (has_searchbuttontext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->searchbuttontext());
    }

    // optional string input_type = 7;
    if (has_input_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_type());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional bool bInput = 2;
    if (has_binput()) {
      total_size += 1 + 1;
    }

    // optional bool bHasMultipleInputs = 6;
    if (has_bhasmultipleinputs()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgNodeHasFocus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgNodeHasFocus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgNodeHasFocus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgNodeHasFocus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgNodeHasFocus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgNodeHasFocus)
    MergeFrom(*source);
  }
}

void CMsgNodeHasFocus::MergeFrom(const CMsgNodeHasFocus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgNodeHasFocus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_elementtagname();
      elementtagname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.elementtagname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_searchbuttontext();
      searchbuttontext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.searchbuttontext_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_input_type();
      input_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_type_);
    }
    if (cached_has_bits & 0x00000010u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000020u) {
      binput_ = from.binput_;
    }
    if (cached_has_bits & 0x00000040u) {
      bhasmultipleinputs_ = from.bhasmultipleinputs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgNodeHasFocus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgNodeHasFocus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNodeHasFocus::CopyFrom(const CMsgNodeHasFocus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgNodeHasFocus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNodeHasFocus::IsInitialized() const {
  return true;
}

void CMsgNodeHasFocus::Swap(CMsgNodeHasFocus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgNodeHasFocus::InternalSwap(CMsgNodeHasFocus* other) {
  name_.Swap(&other->name_);
  elementtagname_.Swap(&other->elementtagname_);
  searchbuttontext_.Swap(&other->searchbuttontext_);
  input_type_.Swap(&other->input_type_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(binput_, other->binput_);
  std::swap(bhasmultipleinputs_, other->bhasmultipleinputs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgNodeHasFocus::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgNodeHasFocus

// optional uint32 browser_handle = 1;
bool CMsgNodeHasFocus::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgNodeHasFocus::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgNodeHasFocus::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgNodeHasFocus::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgNodeHasFocus::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgNodeHasFocus.browser_handle)
  return browser_handle_;
}
void CMsgNodeHasFocus::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgNodeHasFocus.browser_handle)
}

// optional bool bInput = 2;
bool CMsgNodeHasFocus::has_binput() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgNodeHasFocus::set_has_binput() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgNodeHasFocus::clear_has_binput() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgNodeHasFocus::clear_binput() {
  binput_ = false;
  clear_has_binput();
}
bool CMsgNodeHasFocus::binput() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgNodeHasFocus.bInput)
  return binput_;
}
void CMsgNodeHasFocus::set_binput(bool value) {
  set_has_binput();
  binput_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgNodeHasFocus.bInput)
}

// optional string name = 3;
bool CMsgNodeHasFocus::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgNodeHasFocus::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgNodeHasFocus::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgNodeHasFocus::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgNodeHasFocus::name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgNodeHasFocus.name)
  return name_.GetNoArena();
}
void CMsgNodeHasFocus::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgNodeHasFocus.name)
}
#if LANG_CXX11
void CMsgNodeHasFocus::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgNodeHasFocus.name)
}
#endif
void CMsgNodeHasFocus::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgNodeHasFocus.name)
}
void CMsgNodeHasFocus::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgNodeHasFocus.name)
}
::std::string* CMsgNodeHasFocus::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgNodeHasFocus.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgNodeHasFocus::release_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgNodeHasFocus.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgNodeHasFocus::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgNodeHasFocus.name)
}

// optional string elementtagname = 4;
bool CMsgNodeHasFocus::has_elementtagname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgNodeHasFocus::set_has_elementtagname() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgNodeHasFocus::clear_has_elementtagname() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgNodeHasFocus::clear_elementtagname() {
  elementtagname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_elementtagname();
}
const ::std::string& CMsgNodeHasFocus::elementtagname() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgNodeHasFocus.elementtagname)
  return elementtagname_.GetNoArena();
}
void CMsgNodeHasFocus::set_elementtagname(const ::std::string& value) {
  set_has_elementtagname();
  elementtagname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgNodeHasFocus.elementtagname)
}
#if LANG_CXX11
void CMsgNodeHasFocus::set_elementtagname(::std::string&& value) {
  set_has_elementtagname();
  elementtagname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgNodeHasFocus.elementtagname)
}
#endif
void CMsgNodeHasFocus::set_elementtagname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_elementtagname();
  elementtagname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgNodeHasFocus.elementtagname)
}
void CMsgNodeHasFocus::set_elementtagname(const char* value, size_t size) {
  set_has_elementtagname();
  elementtagname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgNodeHasFocus.elementtagname)
}
::std::string* CMsgNodeHasFocus::mutable_elementtagname() {
  set_has_elementtagname();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgNodeHasFocus.elementtagname)
  return elementtagname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgNodeHasFocus::release_elementtagname() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgNodeHasFocus.elementtagname)
  clear_has_elementtagname();
  return elementtagname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgNodeHasFocus::set_allocated_elementtagname(::std::string* elementtagname) {
  if (elementtagname != NULL) {
    set_has_elementtagname();
  } else {
    clear_has_elementtagname();
  }
  elementtagname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), elementtagname);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgNodeHasFocus.elementtagname)
}

// optional string searchbuttontext = 5;
bool CMsgNodeHasFocus::has_searchbuttontext() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgNodeHasFocus::set_has_searchbuttontext() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgNodeHasFocus::clear_has_searchbuttontext() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgNodeHasFocus::clear_searchbuttontext() {
  searchbuttontext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_searchbuttontext();
}
const ::std::string& CMsgNodeHasFocus::searchbuttontext() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgNodeHasFocus.searchbuttontext)
  return searchbuttontext_.GetNoArena();
}
void CMsgNodeHasFocus::set_searchbuttontext(const ::std::string& value) {
  set_has_searchbuttontext();
  searchbuttontext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgNodeHasFocus.searchbuttontext)
}
#if LANG_CXX11
void CMsgNodeHasFocus::set_searchbuttontext(::std::string&& value) {
  set_has_searchbuttontext();
  searchbuttontext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgNodeHasFocus.searchbuttontext)
}
#endif
void CMsgNodeHasFocus::set_searchbuttontext(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_searchbuttontext();
  searchbuttontext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgNodeHasFocus.searchbuttontext)
}
void CMsgNodeHasFocus::set_searchbuttontext(const char* value, size_t size) {
  set_has_searchbuttontext();
  searchbuttontext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgNodeHasFocus.searchbuttontext)
}
::std::string* CMsgNodeHasFocus::mutable_searchbuttontext() {
  set_has_searchbuttontext();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgNodeHasFocus.searchbuttontext)
  return searchbuttontext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgNodeHasFocus::release_searchbuttontext() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgNodeHasFocus.searchbuttontext)
  clear_has_searchbuttontext();
  return searchbuttontext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgNodeHasFocus::set_allocated_searchbuttontext(::std::string* searchbuttontext) {
  if (searchbuttontext != NULL) {
    set_has_searchbuttontext();
  } else {
    clear_has_searchbuttontext();
  }
  searchbuttontext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), searchbuttontext);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgNodeHasFocus.searchbuttontext)
}

// optional bool bHasMultipleInputs = 6;
bool CMsgNodeHasFocus::has_bhasmultipleinputs() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgNodeHasFocus::set_has_bhasmultipleinputs() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgNodeHasFocus::clear_has_bhasmultipleinputs() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgNodeHasFocus::clear_bhasmultipleinputs() {
  bhasmultipleinputs_ = false;
  clear_has_bhasmultipleinputs();
}
bool CMsgNodeHasFocus::bhasmultipleinputs() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgNodeHasFocus.bHasMultipleInputs)
  return bhasmultipleinputs_;
}
void CMsgNodeHasFocus::set_bhasmultipleinputs(bool value) {
  set_has_bhasmultipleinputs();
  bhasmultipleinputs_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgNodeHasFocus.bHasMultipleInputs)
}

// optional string input_type = 7;
bool CMsgNodeHasFocus::has_input_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgNodeHasFocus::set_has_input_type() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgNodeHasFocus::clear_has_input_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgNodeHasFocus::clear_input_type() {
  input_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_input_type();
}
const ::std::string& CMsgNodeHasFocus::input_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgNodeHasFocus.input_type)
  return input_type_.GetNoArena();
}
void CMsgNodeHasFocus::set_input_type(const ::std::string& value) {
  set_has_input_type();
  input_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgNodeHasFocus.input_type)
}
#if LANG_CXX11
void CMsgNodeHasFocus::set_input_type(::std::string&& value) {
  set_has_input_type();
  input_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgNodeHasFocus.input_type)
}
#endif
void CMsgNodeHasFocus::set_input_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_input_type();
  input_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgNodeHasFocus.input_type)
}
void CMsgNodeHasFocus::set_input_type(const char* value, size_t size) {
  set_has_input_type();
  input_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgNodeHasFocus.input_type)
}
::std::string* CMsgNodeHasFocus::mutable_input_type() {
  set_has_input_type();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgNodeHasFocus.input_type)
  return input_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgNodeHasFocus::release_input_type() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgNodeHasFocus.input_type)
  clear_has_input_type();
  return input_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgNodeHasFocus::set_allocated_input_type(::std::string* input_type) {
  if (input_type != NULL) {
    set_has_input_type();
  } else {
    clear_has_input_type();
  }
  input_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_type);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgNodeHasFocus.input_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgZoomToFocusedElement::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgZoomToFocusedElement::CMsgZoomToFocusedElement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgZoomToFocusedElement)
}
CMsgZoomToFocusedElement::CMsgZoomToFocusedElement(const CMsgZoomToFocusedElement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgZoomToFocusedElement)
}

void CMsgZoomToFocusedElement::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgZoomToFocusedElement::~CMsgZoomToFocusedElement() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgZoomToFocusedElement)
  SharedDtor();
}

void CMsgZoomToFocusedElement::SharedDtor() {
}

void CMsgZoomToFocusedElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgZoomToFocusedElement::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgZoomToFocusedElement& CMsgZoomToFocusedElement::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgZoomToFocusedElement* CMsgZoomToFocusedElement::New(::google::protobuf::Arena* arena) const {
  CMsgZoomToFocusedElement* n = new CMsgZoomToFocusedElement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgZoomToFocusedElement::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgZoomToFocusedElement)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgZoomToFocusedElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgZoomToFocusedElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgZoomToFocusedElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgZoomToFocusedElement)
  return false;
#undef DO_
}

void CMsgZoomToFocusedElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgZoomToFocusedElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgZoomToFocusedElement)
}

::google::protobuf::uint8* CMsgZoomToFocusedElement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgZoomToFocusedElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgZoomToFocusedElement)
  return target;
}

size_t CMsgZoomToFocusedElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgZoomToFocusedElement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgZoomToFocusedElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgZoomToFocusedElement)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgZoomToFocusedElement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgZoomToFocusedElement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgZoomToFocusedElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgZoomToFocusedElement)
    MergeFrom(*source);
  }
}

void CMsgZoomToFocusedElement::MergeFrom(const CMsgZoomToFocusedElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgZoomToFocusedElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgZoomToFocusedElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgZoomToFocusedElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgZoomToFocusedElement::CopyFrom(const CMsgZoomToFocusedElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgZoomToFocusedElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgZoomToFocusedElement::IsInitialized() const {
  return true;
}

void CMsgZoomToFocusedElement::Swap(CMsgZoomToFocusedElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgZoomToFocusedElement::InternalSwap(CMsgZoomToFocusedElement* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgZoomToFocusedElement::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgZoomToFocusedElement

// optional uint32 browser_handle = 1;
bool CMsgZoomToFocusedElement::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgZoomToFocusedElement::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgZoomToFocusedElement::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgZoomToFocusedElement::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgZoomToFocusedElement::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgZoomToFocusedElement.browser_handle)
  return browser_handle_;
}
void CMsgZoomToFocusedElement::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgZoomToFocusedElement.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgCloseFullScreenFlashIfOpen::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgCloseFullScreenFlashIfOpen::CMsgCloseFullScreenFlashIfOpen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgCloseFullScreenFlashIfOpen)
}
CMsgCloseFullScreenFlashIfOpen::CMsgCloseFullScreenFlashIfOpen(const CMsgCloseFullScreenFlashIfOpen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgCloseFullScreenFlashIfOpen)
}

void CMsgCloseFullScreenFlashIfOpen::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgCloseFullScreenFlashIfOpen::~CMsgCloseFullScreenFlashIfOpen() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  SharedDtor();
}

void CMsgCloseFullScreenFlashIfOpen::SharedDtor() {
}

void CMsgCloseFullScreenFlashIfOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCloseFullScreenFlashIfOpen::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgCloseFullScreenFlashIfOpen& CMsgCloseFullScreenFlashIfOpen::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgCloseFullScreenFlashIfOpen* CMsgCloseFullScreenFlashIfOpen::New(::google::protobuf::Arena* arena) const {
  CMsgCloseFullScreenFlashIfOpen* n = new CMsgCloseFullScreenFlashIfOpen;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgCloseFullScreenFlashIfOpen::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgCloseFullScreenFlashIfOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  return false;
#undef DO_
}

void CMsgCloseFullScreenFlashIfOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgCloseFullScreenFlashIfOpen)
}

::google::protobuf::uint8* CMsgCloseFullScreenFlashIfOpen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  return target;
}

size_t CMsgCloseFullScreenFlashIfOpen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCloseFullScreenFlashIfOpen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCloseFullScreenFlashIfOpen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgCloseFullScreenFlashIfOpen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgCloseFullScreenFlashIfOpen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgCloseFullScreenFlashIfOpen)
    MergeFrom(*source);
  }
}

void CMsgCloseFullScreenFlashIfOpen::MergeFrom(const CMsgCloseFullScreenFlashIfOpen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgCloseFullScreenFlashIfOpen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCloseFullScreenFlashIfOpen::CopyFrom(const CMsgCloseFullScreenFlashIfOpen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCloseFullScreenFlashIfOpen::IsInitialized() const {
  return true;
}

void CMsgCloseFullScreenFlashIfOpen::Swap(CMsgCloseFullScreenFlashIfOpen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgCloseFullScreenFlashIfOpen::InternalSwap(CMsgCloseFullScreenFlashIfOpen* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgCloseFullScreenFlashIfOpen::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgCloseFullScreenFlashIfOpen

// optional uint32 browser_handle = 1;
bool CMsgCloseFullScreenFlashIfOpen::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgCloseFullScreenFlashIfOpen::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgCloseFullScreenFlashIfOpen::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgCloseFullScreenFlashIfOpen::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgCloseFullScreenFlashIfOpen::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgCloseFullScreenFlashIfOpen.browser_handle)
  return browser_handle_;
}
void CMsgCloseFullScreenFlashIfOpen::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgCloseFullScreenFlashIfOpen.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPauseFullScreenFlashMovieIfOpen::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPauseFullScreenFlashMovieIfOpen::CMsgPauseFullScreenFlashMovieIfOpen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
}
CMsgPauseFullScreenFlashMovieIfOpen::CMsgPauseFullScreenFlashMovieIfOpen(const CMsgPauseFullScreenFlashMovieIfOpen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
}

void CMsgPauseFullScreenFlashMovieIfOpen::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgPauseFullScreenFlashMovieIfOpen::~CMsgPauseFullScreenFlashMovieIfOpen() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  SharedDtor();
}

void CMsgPauseFullScreenFlashMovieIfOpen::SharedDtor() {
}

void CMsgPauseFullScreenFlashMovieIfOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPauseFullScreenFlashMovieIfOpen::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPauseFullScreenFlashMovieIfOpen& CMsgPauseFullScreenFlashMovieIfOpen::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPauseFullScreenFlashMovieIfOpen* CMsgPauseFullScreenFlashMovieIfOpen::New(::google::protobuf::Arena* arena) const {
  CMsgPauseFullScreenFlashMovieIfOpen* n = new CMsgPauseFullScreenFlashMovieIfOpen;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPauseFullScreenFlashMovieIfOpen::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPauseFullScreenFlashMovieIfOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  return false;
#undef DO_
}

void CMsgPauseFullScreenFlashMovieIfOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
}

::google::protobuf::uint8* CMsgPauseFullScreenFlashMovieIfOpen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  return target;
}

size_t CMsgPauseFullScreenFlashMovieIfOpen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPauseFullScreenFlashMovieIfOpen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPauseFullScreenFlashMovieIfOpen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPauseFullScreenFlashMovieIfOpen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
    MergeFrom(*source);
  }
}

void CMsgPauseFullScreenFlashMovieIfOpen::MergeFrom(const CMsgPauseFullScreenFlashMovieIfOpen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgPauseFullScreenFlashMovieIfOpen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPauseFullScreenFlashMovieIfOpen::CopyFrom(const CMsgPauseFullScreenFlashMovieIfOpen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPauseFullScreenFlashMovieIfOpen::IsInitialized() const {
  return true;
}

void CMsgPauseFullScreenFlashMovieIfOpen::Swap(CMsgPauseFullScreenFlashMovieIfOpen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPauseFullScreenFlashMovieIfOpen::InternalSwap(CMsgPauseFullScreenFlashMovieIfOpen* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPauseFullScreenFlashMovieIfOpen::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPauseFullScreenFlashMovieIfOpen

// optional uint32 browser_handle = 1;
bool CMsgPauseFullScreenFlashMovieIfOpen::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPauseFullScreenFlashMovieIfOpen::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPauseFullScreenFlashMovieIfOpen::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPauseFullScreenFlashMovieIfOpen::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgPauseFullScreenFlashMovieIfOpen::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen.browser_handle)
  return browser_handle_;
}
void CMsgPauseFullScreenFlashMovieIfOpen::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgFocusedNodeText::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgFocusedNodeText::CMsgFocusedNodeText()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgFocusedNodeText)
}
CMsgFocusedNodeText::CMsgFocusedNodeText(const CMsgFocusedNodeText& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgFocusedNodeText)
}

void CMsgFocusedNodeText::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgFocusedNodeText::~CMsgFocusedNodeText() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgFocusedNodeText)
  SharedDtor();
}

void CMsgFocusedNodeText::SharedDtor() {
}

void CMsgFocusedNodeText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFocusedNodeText::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgFocusedNodeText& CMsgFocusedNodeText::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgFocusedNodeText* CMsgFocusedNodeText::New(::google::protobuf::Arena* arena) const {
  CMsgFocusedNodeText* n = new CMsgFocusedNodeText;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgFocusedNodeText::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgFocusedNodeText)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgFocusedNodeText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgFocusedNodeText)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgFocusedNodeText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgFocusedNodeText)
  return false;
#undef DO_
}

void CMsgFocusedNodeText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgFocusedNodeText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgFocusedNodeText)
}

::google::protobuf::uint8* CMsgFocusedNodeText::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgFocusedNodeText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgFocusedNodeText)
  return target;
}

size_t CMsgFocusedNodeText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgFocusedNodeText)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFocusedNodeText::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgFocusedNodeText)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFocusedNodeText* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgFocusedNodeText>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgFocusedNodeText)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgFocusedNodeText)
    MergeFrom(*source);
  }
}

void CMsgFocusedNodeText::MergeFrom(const CMsgFocusedNodeText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgFocusedNodeText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgFocusedNodeText::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgFocusedNodeText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFocusedNodeText::CopyFrom(const CMsgFocusedNodeText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgFocusedNodeText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFocusedNodeText::IsInitialized() const {
  return true;
}

void CMsgFocusedNodeText::Swap(CMsgFocusedNodeText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgFocusedNodeText::InternalSwap(CMsgFocusedNodeText* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgFocusedNodeText::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgFocusedNodeText

// optional uint32 browser_handle = 1;
bool CMsgFocusedNodeText::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgFocusedNodeText::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgFocusedNodeText::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgFocusedNodeText::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgFocusedNodeText::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgFocusedNodeText.browser_handle)
  return browser_handle_;
}
void CMsgFocusedNodeText::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgFocusedNodeText.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgFocusedNodeTextResponse::kBrowserHandleFieldNumber;
const int CMsgFocusedNodeTextResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgFocusedNodeTextResponse::CMsgFocusedNodeTextResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgFocusedNodeTextResponse)
}
CMsgFocusedNodeTextResponse::CMsgFocusedNodeTextResponse(const CMsgFocusedNodeTextResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgFocusedNodeTextResponse)
}

void CMsgFocusedNodeTextResponse::SharedCtor() {
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgFocusedNodeTextResponse::~CMsgFocusedNodeTextResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgFocusedNodeTextResponse)
  SharedDtor();
}

void CMsgFocusedNodeTextResponse::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgFocusedNodeTextResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFocusedNodeTextResponse::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgFocusedNodeTextResponse& CMsgFocusedNodeTextResponse::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgFocusedNodeTextResponse* CMsgFocusedNodeTextResponse::New(::google::protobuf::Arena* arena) const {
  CMsgFocusedNodeTextResponse* n = new CMsgFocusedNodeTextResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgFocusedNodeTextResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgFocusedNodeTextResponse)
  if (has_value()) {
    GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*value_.UnsafeRawStringPointer())->clear();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgFocusedNodeTextResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgFocusedNodeTextResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgFocusedNodeTextResponse.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgFocusedNodeTextResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgFocusedNodeTextResponse)
  return false;
#undef DO_
}

void CMsgFocusedNodeTextResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgFocusedNodeTextResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFocusedNodeTextResponse.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgFocusedNodeTextResponse)
}

::google::protobuf::uint8* CMsgFocusedNodeTextResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgFocusedNodeTextResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFocusedNodeTextResponse.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgFocusedNodeTextResponse)
  return target;
}

size_t CMsgFocusedNodeTextResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgFocusedNodeTextResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFocusedNodeTextResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgFocusedNodeTextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFocusedNodeTextResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgFocusedNodeTextResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgFocusedNodeTextResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgFocusedNodeTextResponse)
    MergeFrom(*source);
  }
}

void CMsgFocusedNodeTextResponse::MergeFrom(const CMsgFocusedNodeTextResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgFocusedNodeTextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgFocusedNodeTextResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgFocusedNodeTextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFocusedNodeTextResponse::CopyFrom(const CMsgFocusedNodeTextResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgFocusedNodeTextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFocusedNodeTextResponse::IsInitialized() const {
  return true;
}

void CMsgFocusedNodeTextResponse::Swap(CMsgFocusedNodeTextResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgFocusedNodeTextResponse::InternalSwap(CMsgFocusedNodeTextResponse* other) {
  value_.Swap(&other->value_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgFocusedNodeTextResponse::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgFocusedNodeTextResponse

// optional uint32 browser_handle = 1;
bool CMsgFocusedNodeTextResponse::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgFocusedNodeTextResponse::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgFocusedNodeTextResponse::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgFocusedNodeTextResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgFocusedNodeTextResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgFocusedNodeTextResponse.browser_handle)
  return browser_handle_;
}
void CMsgFocusedNodeTextResponse::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgFocusedNodeTextResponse.browser_handle)
}

// optional string value = 2;
bool CMsgFocusedNodeTextResponse::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgFocusedNodeTextResponse::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgFocusedNodeTextResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgFocusedNodeTextResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CMsgFocusedNodeTextResponse::value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgFocusedNodeTextResponse.value)
  return value_.GetNoArena();
}
void CMsgFocusedNodeTextResponse::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgFocusedNodeTextResponse.value)
}
#if LANG_CXX11
void CMsgFocusedNodeTextResponse::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgFocusedNodeTextResponse.value)
}
#endif
void CMsgFocusedNodeTextResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgFocusedNodeTextResponse.value)
}
void CMsgFocusedNodeTextResponse::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgFocusedNodeTextResponse.value)
}
::std::string* CMsgFocusedNodeTextResponse::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgFocusedNodeTextResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgFocusedNodeTextResponse::release_value() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgFocusedNodeTextResponse.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgFocusedNodeTextResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgFocusedNodeTextResponse.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBuildID::kBuildIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBuildID::CMsgBuildID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgBuildID)
}
CMsgBuildID::CMsgBuildID(const CMsgBuildID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  build_id_ = from.build_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgBuildID)
}

void CMsgBuildID::SharedCtor() {
  _cached_size_ = 0;
  build_id_ = GOOGLE_ULONGLONG(0);
}

CMsgBuildID::~CMsgBuildID() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgBuildID)
  SharedDtor();
}

void CMsgBuildID::SharedDtor() {
}

void CMsgBuildID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBuildID::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBuildID& CMsgBuildID::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBuildID* CMsgBuildID::New(::google::protobuf::Arena* arena) const {
  CMsgBuildID* n = new CMsgBuildID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBuildID::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgBuildID)
  build_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBuildID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgBuildID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 build_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_build_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &build_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgBuildID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgBuildID)
  return false;
#undef DO_
}

void CMsgBuildID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgBuildID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 build_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->build_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgBuildID)
}

::google::protobuf::uint8* CMsgBuildID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgBuildID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 build_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->build_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgBuildID)
  return target;
}

size_t CMsgBuildID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgBuildID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint64 build_id = 1;
  if (has_build_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->build_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBuildID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgBuildID)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBuildID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBuildID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgBuildID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgBuildID)
    MergeFrom(*source);
  }
}

void CMsgBuildID::MergeFrom(const CMsgBuildID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgBuildID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_build_id()) {
    set_build_id(from.build_id());
  }
}

void CMsgBuildID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgBuildID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBuildID::CopyFrom(const CMsgBuildID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgBuildID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBuildID::IsInitialized() const {
  return true;
}

void CMsgBuildID::Swap(CMsgBuildID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBuildID::InternalSwap(CMsgBuildID* other) {
  std::swap(build_id_, other->build_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBuildID::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBuildID

// optional uint64 build_id = 1;
bool CMsgBuildID::has_build_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBuildID::set_has_build_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBuildID::clear_has_build_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBuildID::clear_build_id() {
  build_id_ = GOOGLE_ULONGLONG(0);
  clear_has_build_id();
}
::google::protobuf::uint64 CMsgBuildID::build_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgBuildID.build_id)
  return build_id_;
}
void CMsgBuildID::set_build_id(::google::protobuf::uint64 value) {
  set_has_build_id();
  build_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgBuildID.build_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgOpenDevTools::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgOpenDevTools::CMsgOpenDevTools()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgOpenDevTools)
}
CMsgOpenDevTools::CMsgOpenDevTools(const CMsgOpenDevTools& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgOpenDevTools)
}

void CMsgOpenDevTools::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgOpenDevTools::~CMsgOpenDevTools() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgOpenDevTools)
  SharedDtor();
}

void CMsgOpenDevTools::SharedDtor() {
}

void CMsgOpenDevTools::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgOpenDevTools::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgOpenDevTools& CMsgOpenDevTools::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgOpenDevTools* CMsgOpenDevTools::New(::google::protobuf::Arena* arena) const {
  CMsgOpenDevTools* n = new CMsgOpenDevTools;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgOpenDevTools::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgOpenDevTools)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgOpenDevTools::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgOpenDevTools)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgOpenDevTools)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgOpenDevTools)
  return false;
#undef DO_
}

void CMsgOpenDevTools::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgOpenDevTools)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgOpenDevTools)
}

::google::protobuf::uint8* CMsgOpenDevTools::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgOpenDevTools)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgOpenDevTools)
  return target;
}

size_t CMsgOpenDevTools::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgOpenDevTools)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgOpenDevTools::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgOpenDevTools)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgOpenDevTools* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgOpenDevTools>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgOpenDevTools)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgOpenDevTools)
    MergeFrom(*source);
  }
}

void CMsgOpenDevTools::MergeFrom(const CMsgOpenDevTools& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgOpenDevTools)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgOpenDevTools::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgOpenDevTools)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgOpenDevTools::CopyFrom(const CMsgOpenDevTools& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgOpenDevTools)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgOpenDevTools::IsInitialized() const {
  return true;
}

void CMsgOpenDevTools::Swap(CMsgOpenDevTools* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgOpenDevTools::InternalSwap(CMsgOpenDevTools* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgOpenDevTools::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgOpenDevTools

// optional uint32 browser_handle = 1;
bool CMsgOpenDevTools::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgOpenDevTools::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgOpenDevTools::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgOpenDevTools::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgOpenDevTools::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgOpenDevTools.browser_handle)
  return browser_handle_;
}
void CMsgOpenDevTools::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgOpenDevTools.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgCloseDevTools::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgCloseDevTools::CMsgCloseDevTools()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgCloseDevTools)
}
CMsgCloseDevTools::CMsgCloseDevTools(const CMsgCloseDevTools& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgCloseDevTools)
}

void CMsgCloseDevTools::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgCloseDevTools::~CMsgCloseDevTools() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgCloseDevTools)
  SharedDtor();
}

void CMsgCloseDevTools::SharedDtor() {
}

void CMsgCloseDevTools::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCloseDevTools::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgCloseDevTools& CMsgCloseDevTools::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgCloseDevTools* CMsgCloseDevTools::New(::google::protobuf::Arena* arena) const {
  CMsgCloseDevTools* n = new CMsgCloseDevTools;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgCloseDevTools::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgCloseDevTools)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgCloseDevTools::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgCloseDevTools)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgCloseDevTools)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgCloseDevTools)
  return false;
#undef DO_
}

void CMsgCloseDevTools::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgCloseDevTools)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgCloseDevTools)
}

::google::protobuf::uint8* CMsgCloseDevTools::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgCloseDevTools)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgCloseDevTools)
  return target;
}

size_t CMsgCloseDevTools::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgCloseDevTools)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCloseDevTools::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgCloseDevTools)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCloseDevTools* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgCloseDevTools>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgCloseDevTools)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgCloseDevTools)
    MergeFrom(*source);
  }
}

void CMsgCloseDevTools::MergeFrom(const CMsgCloseDevTools& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgCloseDevTools)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgCloseDevTools::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgCloseDevTools)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCloseDevTools::CopyFrom(const CMsgCloseDevTools& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgCloseDevTools)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCloseDevTools::IsInitialized() const {
  return true;
}

void CMsgCloseDevTools::Swap(CMsgCloseDevTools* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgCloseDevTools::InternalSwap(CMsgCloseDevTools* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgCloseDevTools::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgCloseDevTools

// optional uint32 browser_handle = 1;
bool CMsgCloseDevTools::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgCloseDevTools::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgCloseDevTools::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgCloseDevTools::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgCloseDevTools::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgCloseDevTools.browser_handle)
  return browser_handle_;
}
void CMsgCloseDevTools::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgCloseDevTools.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgUnlockH264::kBrowserHandleFieldNumber;
const int CMsgUnlockH264::kUnlockCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgUnlockH264::CMsgUnlockH264()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgUnlockH264)
}
CMsgUnlockH264::CMsgUnlockH264(const CMsgUnlockH264& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unlock_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_unlock_code()) {
    unlock_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unlock_code_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgUnlockH264)
}

void CMsgUnlockH264::SharedCtor() {
  _cached_size_ = 0;
  unlock_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgUnlockH264::~CMsgUnlockH264() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgUnlockH264)
  SharedDtor();
}

void CMsgUnlockH264::SharedDtor() {
  unlock_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgUnlockH264::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgUnlockH264::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgUnlockH264& CMsgUnlockH264::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgUnlockH264* CMsgUnlockH264::New(::google::protobuf::Arena* arena) const {
  CMsgUnlockH264* n = new CMsgUnlockH264;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgUnlockH264::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgUnlockH264)
  if (has_unlock_code()) {
    GOOGLE_DCHECK(!unlock_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*unlock_code_.UnsafeRawStringPointer())->clear();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgUnlockH264::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgUnlockH264)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string unlock_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unlock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unlock_code().data(), this->unlock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgUnlockH264.unlock_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgUnlockH264)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgUnlockH264)
  return false;
#undef DO_
}

void CMsgUnlockH264::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgUnlockH264)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string unlock_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unlock_code().data(), this->unlock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgUnlockH264.unlock_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->unlock_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgUnlockH264)
}

::google::protobuf::uint8* CMsgUnlockH264::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgUnlockH264)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string unlock_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unlock_code().data(), this->unlock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgUnlockH264.unlock_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->unlock_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgUnlockH264)
  return target;
}

size_t CMsgUnlockH264::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgUnlockH264)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string unlock_code = 2;
    if (has_unlock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unlock_code());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgUnlockH264::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgUnlockH264)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgUnlockH264* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgUnlockH264>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgUnlockH264)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgUnlockH264)
    MergeFrom(*source);
  }
}

void CMsgUnlockH264::MergeFrom(const CMsgUnlockH264& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgUnlockH264)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_unlock_code();
      unlock_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unlock_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgUnlockH264::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgUnlockH264)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUnlockH264::CopyFrom(const CMsgUnlockH264& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgUnlockH264)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUnlockH264::IsInitialized() const {
  return true;
}

void CMsgUnlockH264::Swap(CMsgUnlockH264* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgUnlockH264::InternalSwap(CMsgUnlockH264* other) {
  unlock_code_.Swap(&other->unlock_code_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgUnlockH264::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgUnlockH264

// optional uint32 browser_handle = 1;
bool CMsgUnlockH264::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgUnlockH264::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgUnlockH264::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgUnlockH264::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgUnlockH264::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgUnlockH264.browser_handle)
  return browser_handle_;
}
void CMsgUnlockH264::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgUnlockH264.browser_handle)
}

// optional string unlock_code = 2;
bool CMsgUnlockH264::has_unlock_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgUnlockH264::set_has_unlock_code() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgUnlockH264::clear_has_unlock_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgUnlockH264::clear_unlock_code() {
  unlock_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unlock_code();
}
const ::std::string& CMsgUnlockH264::unlock_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgUnlockH264.unlock_code)
  return unlock_code_.GetNoArena();
}
void CMsgUnlockH264::set_unlock_code(const ::std::string& value) {
  set_has_unlock_code();
  unlock_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgUnlockH264.unlock_code)
}
#if LANG_CXX11
void CMsgUnlockH264::set_unlock_code(::std::string&& value) {
  set_has_unlock_code();
  unlock_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgUnlockH264.unlock_code)
}
#endif
void CMsgUnlockH264::set_unlock_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unlock_code();
  unlock_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgUnlockH264.unlock_code)
}
void CMsgUnlockH264::set_unlock_code(const char* value, size_t size) {
  set_has_unlock_code();
  unlock_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgUnlockH264.unlock_code)
}
::std::string* CMsgUnlockH264::mutable_unlock_code() {
  set_has_unlock_code();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgUnlockH264.unlock_code)
  return unlock_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgUnlockH264::release_unlock_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgUnlockH264.unlock_code)
  clear_has_unlock_code();
  return unlock_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgUnlockH264::set_allocated_unlock_code(::std::string* unlock_code) {
  if (unlock_code != NULL) {
    set_has_unlock_code();
  } else {
    clear_has_unlock_code();
  }
  unlock_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unlock_code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgUnlockH264.unlock_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgScreenInformationChanged::kBrowserHandleFieldNumber;
const int CMsgScreenInformationChanged::kOverrideWidthFieldNumber;
const int CMsgScreenInformationChanged::kOverrideHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgScreenInformationChanged::CMsgScreenInformationChanged()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgScreenInformationChanged)
}
CMsgScreenInformationChanged::CMsgScreenInformationChanged(const CMsgScreenInformationChanged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&override_height_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(override_height_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgScreenInformationChanged)
}

void CMsgScreenInformationChanged::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&override_height_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(override_height_));
}

CMsgScreenInformationChanged::~CMsgScreenInformationChanged() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgScreenInformationChanged)
  SharedDtor();
}

void CMsgScreenInformationChanged::SharedDtor() {
}

void CMsgScreenInformationChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgScreenInformationChanged::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgScreenInformationChanged& CMsgScreenInformationChanged::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgScreenInformationChanged* CMsgScreenInformationChanged::New(::google::protobuf::Arena* arena) const {
  CMsgScreenInformationChanged* n = new CMsgScreenInformationChanged;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgScreenInformationChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgScreenInformationChanged)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&override_height_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(override_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgScreenInformationChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgScreenInformationChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 override_width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_override_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &override_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 override_height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_override_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &override_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgScreenInformationChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgScreenInformationChanged)
  return false;
#undef DO_
}

void CMsgScreenInformationChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgScreenInformationChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 override_width = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->override_width(), output);
  }

  // optional uint32 override_height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->override_height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgScreenInformationChanged)
}

::google::protobuf::uint8* CMsgScreenInformationChanged::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgScreenInformationChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 override_width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->override_width(), target);
  }

  // optional uint32 override_height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->override_height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgScreenInformationChanged)
  return target;
}

size_t CMsgScreenInformationChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgScreenInformationChanged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 override_width = 2;
    if (has_override_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->override_width());
    }

    // optional uint32 override_height = 3;
    if (has_override_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->override_height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgScreenInformationChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgScreenInformationChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgScreenInformationChanged* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgScreenInformationChanged>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgScreenInformationChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgScreenInformationChanged)
    MergeFrom(*source);
  }
}

void CMsgScreenInformationChanged::MergeFrom(const CMsgScreenInformationChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgScreenInformationChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      override_width_ = from.override_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      override_height_ = from.override_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgScreenInformationChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgScreenInformationChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgScreenInformationChanged::CopyFrom(const CMsgScreenInformationChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgScreenInformationChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgScreenInformationChanged::IsInitialized() const {
  return true;
}

void CMsgScreenInformationChanged::Swap(CMsgScreenInformationChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgScreenInformationChanged::InternalSwap(CMsgScreenInformationChanged* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(override_width_, other->override_width_);
  std::swap(override_height_, other->override_height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgScreenInformationChanged::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgScreenInformationChanged

// optional uint32 browser_handle = 1;
bool CMsgScreenInformationChanged::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgScreenInformationChanged::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgScreenInformationChanged::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgScreenInformationChanged::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgScreenInformationChanged::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgScreenInformationChanged.browser_handle)
  return browser_handle_;
}
void CMsgScreenInformationChanged::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgScreenInformationChanged.browser_handle)
}

// optional uint32 override_width = 2;
bool CMsgScreenInformationChanged::has_override_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgScreenInformationChanged::set_has_override_width() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgScreenInformationChanged::clear_has_override_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgScreenInformationChanged::clear_override_width() {
  override_width_ = 0u;
  clear_has_override_width();
}
::google::protobuf::uint32 CMsgScreenInformationChanged::override_width() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgScreenInformationChanged.override_width)
  return override_width_;
}
void CMsgScreenInformationChanged::set_override_width(::google::protobuf::uint32 value) {
  set_has_override_width();
  override_width_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgScreenInformationChanged.override_width)
}

// optional uint32 override_height = 3;
bool CMsgScreenInformationChanged::has_override_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgScreenInformationChanged::set_has_override_height() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgScreenInformationChanged::clear_has_override_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgScreenInformationChanged::clear_override_height() {
  override_height_ = 0u;
  clear_has_override_height();
}
::google::protobuf::uint32 CMsgScreenInformationChanged::override_height() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgScreenInformationChanged.override_height)
  return override_height_;
}
void CMsgScreenInformationChanged::set_override_height(::google::protobuf::uint32 value) {
  set_has_override_height();
  override_height_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgScreenInformationChanged.override_height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClearAllCookies::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClearAllCookies::CMsgClearAllCookies()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClearAllCookies)
}
CMsgClearAllCookies::CMsgClearAllCookies(const CMsgClearAllCookies& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClearAllCookies)
}

void CMsgClearAllCookies::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgClearAllCookies::~CMsgClearAllCookies() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClearAllCookies)
  SharedDtor();
}

void CMsgClearAllCookies::SharedDtor() {
}

void CMsgClearAllCookies::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClearAllCookies::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClearAllCookies& CMsgClearAllCookies::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClearAllCookies* CMsgClearAllCookies::New(::google::protobuf::Arena* arena) const {
  CMsgClearAllCookies* n = new CMsgClearAllCookies;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClearAllCookies::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClearAllCookies)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClearAllCookies::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClearAllCookies)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClearAllCookies)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClearAllCookies)
  return false;
#undef DO_
}

void CMsgClearAllCookies::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClearAllCookies)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClearAllCookies)
}

::google::protobuf::uint8* CMsgClearAllCookies::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClearAllCookies)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClearAllCookies)
  return target;
}

size_t CMsgClearAllCookies::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClearAllCookies)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClearAllCookies::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClearAllCookies)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClearAllCookies* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClearAllCookies>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClearAllCookies)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClearAllCookies)
    MergeFrom(*source);
  }
}

void CMsgClearAllCookies::MergeFrom(const CMsgClearAllCookies& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClearAllCookies)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgClearAllCookies::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClearAllCookies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClearAllCookies::CopyFrom(const CMsgClearAllCookies& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClearAllCookies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClearAllCookies::IsInitialized() const {
  return true;
}

void CMsgClearAllCookies::Swap(CMsgClearAllCookies* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClearAllCookies::InternalSwap(CMsgClearAllCookies* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClearAllCookies::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClearAllCookies

// optional uint32 browser_handle = 1;
bool CMsgClearAllCookies::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClearAllCookies::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClearAllCookies::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClearAllCookies::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgClearAllCookies::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClearAllCookies.browser_handle)
  return browser_handle_;
}
void CMsgClearAllCookies::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClearAllCookies.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgScreenDPI::kBrowserHandleFieldNumber;
const int CMsgScreenDPI::kDpiScalingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgScreenDPI::CMsgScreenDPI()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgScreenDPI)
}
CMsgScreenDPI::CMsgScreenDPI(const CMsgScreenDPI& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&dpi_scaling_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(dpi_scaling_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgScreenDPI)
}

void CMsgScreenDPI::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&dpi_scaling_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(dpi_scaling_));
}

CMsgScreenDPI::~CMsgScreenDPI() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgScreenDPI)
  SharedDtor();
}

void CMsgScreenDPI::SharedDtor() {
}

void CMsgScreenDPI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgScreenDPI::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgScreenDPI& CMsgScreenDPI::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgScreenDPI* CMsgScreenDPI::New(::google::protobuf::Arena* arena) const {
  CMsgScreenDPI* n = new CMsgScreenDPI;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgScreenDPI::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgScreenDPI)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&dpi_scaling_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(dpi_scaling_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgScreenDPI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgScreenDPI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dpi_scaling = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_dpi_scaling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dpi_scaling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgScreenDPI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgScreenDPI)
  return false;
#undef DO_
}

void CMsgScreenDPI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgScreenDPI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional float dpi_scaling = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dpi_scaling(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgScreenDPI)
}

::google::protobuf::uint8* CMsgScreenDPI::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgScreenDPI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional float dpi_scaling = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dpi_scaling(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgScreenDPI)
  return target;
}

size_t CMsgScreenDPI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgScreenDPI)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional float dpi_scaling = 2;
    if (has_dpi_scaling()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgScreenDPI::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgScreenDPI)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgScreenDPI* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgScreenDPI>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgScreenDPI)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgScreenDPI)
    MergeFrom(*source);
  }
}

void CMsgScreenDPI::MergeFrom(const CMsgScreenDPI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgScreenDPI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      dpi_scaling_ = from.dpi_scaling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgScreenDPI::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgScreenDPI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgScreenDPI::CopyFrom(const CMsgScreenDPI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgScreenDPI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgScreenDPI::IsInitialized() const {
  return true;
}

void CMsgScreenDPI::Swap(CMsgScreenDPI* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgScreenDPI::InternalSwap(CMsgScreenDPI* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(dpi_scaling_, other->dpi_scaling_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgScreenDPI::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgScreenDPI

// optional uint32 browser_handle = 1;
bool CMsgScreenDPI::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgScreenDPI::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgScreenDPI::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgScreenDPI::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgScreenDPI::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgScreenDPI.browser_handle)
  return browser_handle_;
}
void CMsgScreenDPI::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgScreenDPI.browser_handle)
}

// optional float dpi_scaling = 2;
bool CMsgScreenDPI::has_dpi_scaling() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgScreenDPI::set_has_dpi_scaling() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgScreenDPI::clear_has_dpi_scaling() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgScreenDPI::clear_dpi_scaling() {
  dpi_scaling_ = 0;
  clear_has_dpi_scaling();
}
float CMsgScreenDPI::dpi_scaling() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgScreenDPI.dpi_scaling)
  return dpi_scaling_;
}
void CMsgScreenDPI::set_dpi_scaling(float value) {
  set_has_dpi_scaling();
  dpi_scaling_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgScreenDPI.dpi_scaling)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAuthedSteamDomains::kDomainsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAuthedSteamDomains::CMsgAuthedSteamDomains()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgAuthedSteamDomains)
}
CMsgAuthedSteamDomains::CMsgAuthedSteamDomains(const CMsgAuthedSteamDomains& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      domains_(from.domains_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgAuthedSteamDomains)
}

void CMsgAuthedSteamDomains::SharedCtor() {
  _cached_size_ = 0;
}

CMsgAuthedSteamDomains::~CMsgAuthedSteamDomains() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgAuthedSteamDomains)
  SharedDtor();
}

void CMsgAuthedSteamDomains::SharedDtor() {
}

void CMsgAuthedSteamDomains::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAuthedSteamDomains::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAuthedSteamDomains& CMsgAuthedSteamDomains::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAuthedSteamDomains* CMsgAuthedSteamDomains::New(::google::protobuf::Arena* arena) const {
  CMsgAuthedSteamDomains* n = new CMsgAuthedSteamDomains;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAuthedSteamDomains::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgAuthedSteamDomains)
  domains_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAuthedSteamDomains::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgAuthedSteamDomains)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string domains = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_domains()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domains(this->domains_size() - 1).data(),
            this->domains(this->domains_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgAuthedSteamDomains.domains");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgAuthedSteamDomains)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgAuthedSteamDomains)
  return false;
#undef DO_
}

void CMsgAuthedSteamDomains::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgAuthedSteamDomains)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string domains = 1;
  for (int i = 0, n = this->domains_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domains(i).data(), this->domains(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgAuthedSteamDomains.domains");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->domains(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgAuthedSteamDomains)
}

::google::protobuf::uint8* CMsgAuthedSteamDomains::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgAuthedSteamDomains)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string domains = 1;
  for (int i = 0, n = this->domains_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domains(i).data(), this->domains(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgAuthedSteamDomains.domains");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->domains(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgAuthedSteamDomains)
  return target;
}

size_t CMsgAuthedSteamDomains::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgAuthedSteamDomains)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string domains = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->domains_size());
  for (int i = 0, n = this->domains_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->domains(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAuthedSteamDomains::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgAuthedSteamDomains)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAuthedSteamDomains* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAuthedSteamDomains>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgAuthedSteamDomains)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgAuthedSteamDomains)
    MergeFrom(*source);
  }
}

void CMsgAuthedSteamDomains::MergeFrom(const CMsgAuthedSteamDomains& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgAuthedSteamDomains)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  domains_.MergeFrom(from.domains_);
}

void CMsgAuthedSteamDomains::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgAuthedSteamDomains)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAuthedSteamDomains::CopyFrom(const CMsgAuthedSteamDomains& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgAuthedSteamDomains)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAuthedSteamDomains::IsInitialized() const {
  return true;
}

void CMsgAuthedSteamDomains::Swap(CMsgAuthedSteamDomains* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAuthedSteamDomains::InternalSwap(CMsgAuthedSteamDomains* other) {
  domains_.InternalSwap(&other->domains_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAuthedSteamDomains::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAuthedSteamDomains

// repeated string domains = 1;
int CMsgAuthedSteamDomains::domains_size() const {
  return domains_.size();
}
void CMsgAuthedSteamDomains::clear_domains() {
  domains_.Clear();
}
const ::std::string& CMsgAuthedSteamDomains::domains(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAuthedSteamDomains.domains)
  return domains_.Get(index);
}
::std::string* CMsgAuthedSteamDomains::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgAuthedSteamDomains.domains)
  return domains_.Mutable(index);
}
void CMsgAuthedSteamDomains::set_domains(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAuthedSteamDomains.domains)
  domains_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CMsgAuthedSteamDomains::set_domains(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAuthedSteamDomains.domains)
  domains_.Mutable(index)->assign(std::move(value));
}
#endif
void CMsgAuthedSteamDomains::set_domains(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  domains_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgAuthedSteamDomains.domains)
}
void CMsgAuthedSteamDomains::set_domains(int index, const char* value, size_t size) {
  domains_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgAuthedSteamDomains.domains)
}
::std::string* CMsgAuthedSteamDomains::add_domains() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CMsgAuthedSteamDomains.domains)
  return domains_.Add();
}
void CMsgAuthedSteamDomains::add_domains(const ::std::string& value) {
  domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgAuthedSteamDomains.domains)
}
#if LANG_CXX11
void CMsgAuthedSteamDomains::add_domains(::std::string&& value) {
  domains_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CMsgAuthedSteamDomains.domains)
}
#endif
void CMsgAuthedSteamDomains::add_domains(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CMsgAuthedSteamDomains.domains)
}
void CMsgAuthedSteamDomains::add_domains(const char* value, size_t size) {
  domains_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CMsgAuthedSteamDomains.domains)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgAuthedSteamDomains::domains() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgAuthedSteamDomains.domains)
  return domains_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgAuthedSteamDomains::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgAuthedSteamDomains.domains)
  return &domains_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamAuthNeeded::kFillerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamAuthNeeded::CMsgSteamAuthNeeded()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamAuthNeeded)
}
CMsgSteamAuthNeeded::CMsgSteamAuthNeeded(const CMsgSteamAuthNeeded& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filler_ = from.filler_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamAuthNeeded)
}

void CMsgSteamAuthNeeded::SharedCtor() {
  _cached_size_ = 0;
  filler_ = false;
}

CMsgSteamAuthNeeded::~CMsgSteamAuthNeeded() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamAuthNeeded)
  SharedDtor();
}

void CMsgSteamAuthNeeded::SharedDtor() {
}

void CMsgSteamAuthNeeded::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamAuthNeeded::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamAuthNeeded& CMsgSteamAuthNeeded::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSteamAuthNeeded* CMsgSteamAuthNeeded::New(::google::protobuf::Arena* arena) const {
  CMsgSteamAuthNeeded* n = new CMsgSteamAuthNeeded;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamAuthNeeded::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamAuthNeeded)
  filler_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamAuthNeeded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamAuthNeeded)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool filler = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_filler();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamAuthNeeded)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamAuthNeeded)
  return false;
#undef DO_
}

void CMsgSteamAuthNeeded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamAuthNeeded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool filler = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->filler(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamAuthNeeded)
}

::google::protobuf::uint8* CMsgSteamAuthNeeded::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamAuthNeeded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool filler = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->filler(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamAuthNeeded)
  return target;
}

size_t CMsgSteamAuthNeeded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamAuthNeeded)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool filler = 1;
  if (has_filler()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamAuthNeeded::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamAuthNeeded)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamAuthNeeded* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamAuthNeeded>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamAuthNeeded)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamAuthNeeded)
    MergeFrom(*source);
  }
}

void CMsgSteamAuthNeeded::MergeFrom(const CMsgSteamAuthNeeded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamAuthNeeded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_filler()) {
    set_filler(from.filler());
  }
}

void CMsgSteamAuthNeeded::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamAuthNeeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamAuthNeeded::CopyFrom(const CMsgSteamAuthNeeded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamAuthNeeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamAuthNeeded::IsInitialized() const {
  return true;
}

void CMsgSteamAuthNeeded::Swap(CMsgSteamAuthNeeded* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamAuthNeeded::InternalSwap(CMsgSteamAuthNeeded* other) {
  std::swap(filler_, other->filler_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamAuthNeeded::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSteamAuthNeeded

// optional bool filler = 1;
bool CMsgSteamAuthNeeded::has_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSteamAuthNeeded::set_has_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSteamAuthNeeded::clear_has_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSteamAuthNeeded::clear_filler() {
  filler_ = false;
  clear_has_filler();
}
bool CMsgSteamAuthNeeded::filler() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamAuthNeeded.filler)
  return filler_;
}
void CMsgSteamAuthNeeded::set_filler(bool value) {
  set_has_filler();
  filler_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamAuthNeeded.filler)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamAuthCookiesSet::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamAuthCookiesSet::CMsgSteamAuthCookiesSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamAuthCookiesSet)
}
CMsgSteamAuthCookiesSet::CMsgSteamAuthCookiesSet(const CMsgSteamAuthCookiesSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamAuthCookiesSet)
}

void CMsgSteamAuthCookiesSet::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
}

CMsgSteamAuthCookiesSet::~CMsgSteamAuthCookiesSet() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamAuthCookiesSet)
  SharedDtor();
}

void CMsgSteamAuthCookiesSet::SharedDtor() {
}

void CMsgSteamAuthCookiesSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamAuthCookiesSet::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamAuthCookiesSet& CMsgSteamAuthCookiesSet::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSteamAuthCookiesSet* CMsgSteamAuthCookiesSet::New(::google::protobuf::Arena* arena) const {
  CMsgSteamAuthCookiesSet* n = new CMsgSteamAuthCookiesSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamAuthCookiesSet::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamAuthCookiesSet)
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamAuthCookiesSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamAuthCookiesSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamAuthCookiesSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamAuthCookiesSet)
  return false;
#undef DO_
}

void CMsgSteamAuthCookiesSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamAuthCookiesSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamAuthCookiesSet)
}

::google::protobuf::uint8* CMsgSteamAuthCookiesSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamAuthCookiesSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamAuthCookiesSet)
  return target;
}

size_t CMsgSteamAuthCookiesSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamAuthCookiesSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool success = 1;
  if (has_success()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamAuthCookiesSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamAuthCookiesSet)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamAuthCookiesSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamAuthCookiesSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamAuthCookiesSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamAuthCookiesSet)
    MergeFrom(*source);
  }
}

void CMsgSteamAuthCookiesSet::MergeFrom(const CMsgSteamAuthCookiesSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamAuthCookiesSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_success()) {
    set_success(from.success());
  }
}

void CMsgSteamAuthCookiesSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamAuthCookiesSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamAuthCookiesSet::CopyFrom(const CMsgSteamAuthCookiesSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamAuthCookiesSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamAuthCookiesSet::IsInitialized() const {
  return true;
}

void CMsgSteamAuthCookiesSet::Swap(CMsgSteamAuthCookiesSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamAuthCookiesSet::InternalSwap(CMsgSteamAuthCookiesSet* other) {
  std::swap(success_, other->success_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamAuthCookiesSet::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSteamAuthCookiesSet

// optional bool success = 1;
bool CMsgSteamAuthCookiesSet::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSteamAuthCookiesSet::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSteamAuthCookiesSet::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSteamAuthCookiesSet::clear_success() {
  success_ = false;
  clear_has_success();
}
bool CMsgSteamAuthCookiesSet::success() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamAuthCookiesSet.success)
  return success_;
}
void CMsgSteamAuthCookiesSet::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamAuthCookiesSet.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJSRegisterMethod::kBrowserHandleFieldNumber;
const int CMsgJSRegisterMethod::kNameFieldNumber;
const int CMsgJSRegisterMethod::kMethodTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJSRegisterMethod::CMsgJSRegisterMethod()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgJSRegisterMethod)
}
CMsgJSRegisterMethod::CMsgJSRegisterMethod(const CMsgJSRegisterMethod& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    reinterpret_cast<char*>(&method_type_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(method_type_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgJSRegisterMethod)
}

void CMsgJSRegisterMethod::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&method_type_) -
    reinterpret_cast<char*>(&browser_handle_) + sizeof(method_type_));
}

CMsgJSRegisterMethod::~CMsgJSRegisterMethod() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgJSRegisterMethod)
  SharedDtor();
}

void CMsgJSRegisterMethod::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgJSRegisterMethod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJSRegisterMethod::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgJSRegisterMethod& CMsgJSRegisterMethod::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgJSRegisterMethod* CMsgJSRegisterMethod::New(::google::protobuf::Arena* arena) const {
  CMsgJSRegisterMethod* n = new CMsgJSRegisterMethod;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgJSRegisterMethod::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgJSRegisterMethod)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&browser_handle_, 0, reinterpret_cast<char*>(&method_type_) -
      reinterpret_cast<char*>(&browser_handle_) + sizeof(method_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgJSRegisterMethod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgJSRegisterMethod)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgJSRegisterMethod.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.EJSRegisterMethodType method_type = 3 [default = k_EJSRegisterMethodType_Invalid];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::EJSRegisterMethodType_IsValid(value)) {
            set_method_type(static_cast< ::proto::steam::EJSRegisterMethodType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgJSRegisterMethod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgJSRegisterMethod)
  return false;
#undef DO_
}

void CMsgJSRegisterMethod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgJSRegisterMethod)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSRegisterMethod.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .proto.steam.EJSRegisterMethodType method_type = 3 [default = k_EJSRegisterMethodType_Invalid];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->method_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgJSRegisterMethod)
}

::google::protobuf::uint8* CMsgJSRegisterMethod::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgJSRegisterMethod)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSRegisterMethod.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .proto.steam.EJSRegisterMethodType method_type = 3 [default = k_EJSRegisterMethodType_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->method_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgJSRegisterMethod)
  return target;
}

size_t CMsgJSRegisterMethod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgJSRegisterMethod)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional .proto.steam.EJSRegisterMethodType method_type = 3 [default = k_EJSRegisterMethodType_Invalid];
    if (has_method_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->method_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJSRegisterMethod::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgJSRegisterMethod)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSRegisterMethod* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgJSRegisterMethod>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgJSRegisterMethod)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgJSRegisterMethod)
    MergeFrom(*source);
  }
}

void CMsgJSRegisterMethod::MergeFrom(const CMsgJSRegisterMethod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgJSRegisterMethod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      method_type_ = from.method_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSRegisterMethod::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgJSRegisterMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSRegisterMethod::CopyFrom(const CMsgJSRegisterMethod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgJSRegisterMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSRegisterMethod::IsInitialized() const {
  return true;
}

void CMsgJSRegisterMethod::Swap(CMsgJSRegisterMethod* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJSRegisterMethod::InternalSwap(CMsgJSRegisterMethod* other) {
  name_.Swap(&other->name_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(method_type_, other->method_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgJSRegisterMethod::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgJSRegisterMethod

// optional uint32 browser_handle = 1;
bool CMsgJSRegisterMethod::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgJSRegisterMethod::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgJSRegisterMethod::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgJSRegisterMethod::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgJSRegisterMethod::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSRegisterMethod.browser_handle)
  return browser_handle_;
}
void CMsgJSRegisterMethod::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSRegisterMethod.browser_handle)
}

// optional string name = 2;
bool CMsgJSRegisterMethod::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgJSRegisterMethod::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgJSRegisterMethod::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgJSRegisterMethod::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgJSRegisterMethod::name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSRegisterMethod.name)
  return name_.GetNoArena();
}
void CMsgJSRegisterMethod::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSRegisterMethod.name)
}
#if LANG_CXX11
void CMsgJSRegisterMethod::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgJSRegisterMethod.name)
}
#endif
void CMsgJSRegisterMethod::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgJSRegisterMethod.name)
}
void CMsgJSRegisterMethod::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgJSRegisterMethod.name)
}
::std::string* CMsgJSRegisterMethod::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgJSRegisterMethod.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgJSRegisterMethod::release_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgJSRegisterMethod.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgJSRegisterMethod::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgJSRegisterMethod.name)
}

// optional .proto.steam.EJSRegisterMethodType method_type = 3 [default = k_EJSRegisterMethodType_Invalid];
bool CMsgJSRegisterMethod::has_method_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgJSRegisterMethod::set_has_method_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgJSRegisterMethod::clear_has_method_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgJSRegisterMethod::clear_method_type() {
  method_type_ = 0;
  clear_has_method_type();
}
::proto::steam::EJSRegisterMethodType CMsgJSRegisterMethod::method_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSRegisterMethod.method_type)
  return static_cast< ::proto::steam::EJSRegisterMethodType >(method_type_);
}
void CMsgJSRegisterMethod::set_method_type(::proto::steam::EJSRegisterMethodType value) {
  assert(::proto::steam::EJSRegisterMethodType_IsValid(value));
  set_has_method_type();
  method_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSRegisterMethod.method_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CJSMethodArgument::kJsonDataFieldNumber;
const int CJSMethodArgument::kFunctionHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CJSMethodArgument::CJSMethodArgument()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CJSMethodArgument)
}
CJSMethodArgument::CJSMethodArgument(const CJSMethodArgument& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  json_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_json_data()) {
    json_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_data_);
  }
  function_handle_ = from.function_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CJSMethodArgument)
}

void CJSMethodArgument::SharedCtor() {
  _cached_size_ = 0;
  json_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_handle_ = GOOGLE_ULONGLONG(0);
}

CJSMethodArgument::~CJSMethodArgument() {
  // @@protoc_insertion_point(destructor:proto.steam.CJSMethodArgument)
  SharedDtor();
}

void CJSMethodArgument::SharedDtor() {
  json_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CJSMethodArgument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CJSMethodArgument::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CJSMethodArgument& CJSMethodArgument::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CJSMethodArgument* CJSMethodArgument::New(::google::protobuf::Arena* arena) const {
  CJSMethodArgument* n = new CJSMethodArgument;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CJSMethodArgument::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CJSMethodArgument)
  if (has_json_data()) {
    GOOGLE_DCHECK(!json_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*json_data_.UnsafeRawStringPointer())->clear();
  }
  function_handle_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CJSMethodArgument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CJSMethodArgument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string json_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->json_data().data(), this->json_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CJSMethodArgument.json_data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 function_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_function_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &function_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CJSMethodArgument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CJSMethodArgument)
  return false;
#undef DO_
}

void CJSMethodArgument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CJSMethodArgument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string json_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_data().data(), this->json_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CJSMethodArgument.json_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->json_data(), output);
  }

  // optional uint64 function_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->function_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CJSMethodArgument)
}

::google::protobuf::uint8* CJSMethodArgument::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CJSMethodArgument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string json_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_data().data(), this->json_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CJSMethodArgument.json_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->json_data(), target);
  }

  // optional uint64 function_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->function_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CJSMethodArgument)
  return target;
}

size_t CJSMethodArgument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CJSMethodArgument)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string json_data = 1;
    if (has_json_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->json_data());
    }

    // optional uint64 function_handle = 2;
    if (has_function_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->function_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CJSMethodArgument::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CJSMethodArgument)
  GOOGLE_DCHECK_NE(&from, this);
  const CJSMethodArgument* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CJSMethodArgument>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CJSMethodArgument)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CJSMethodArgument)
    MergeFrom(*source);
  }
}

void CJSMethodArgument::MergeFrom(const CJSMethodArgument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CJSMethodArgument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_json_data();
      json_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      function_handle_ = from.function_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CJSMethodArgument::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CJSMethodArgument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CJSMethodArgument::CopyFrom(const CJSMethodArgument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CJSMethodArgument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CJSMethodArgument::IsInitialized() const {
  return true;
}

void CJSMethodArgument::Swap(CJSMethodArgument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CJSMethodArgument::InternalSwap(CJSMethodArgument* other) {
  json_data_.Swap(&other->json_data_);
  std::swap(function_handle_, other->function_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CJSMethodArgument::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CJSMethodArgument

// optional string json_data = 1;
bool CJSMethodArgument::has_json_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CJSMethodArgument::set_has_json_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CJSMethodArgument::clear_has_json_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CJSMethodArgument::clear_json_data() {
  json_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_data();
}
const ::std::string& CJSMethodArgument::json_data() const {
  // @@protoc_insertion_point(field_get:proto.steam.CJSMethodArgument.json_data)
  return json_data_.GetNoArena();
}
void CJSMethodArgument::set_json_data(const ::std::string& value) {
  set_has_json_data();
  json_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CJSMethodArgument.json_data)
}
#if LANG_CXX11
void CJSMethodArgument::set_json_data(::std::string&& value) {
  set_has_json_data();
  json_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CJSMethodArgument.json_data)
}
#endif
void CJSMethodArgument::set_json_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_json_data();
  json_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CJSMethodArgument.json_data)
}
void CJSMethodArgument::set_json_data(const char* value, size_t size) {
  set_has_json_data();
  json_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CJSMethodArgument.json_data)
}
::std::string* CJSMethodArgument::mutable_json_data() {
  set_has_json_data();
  // @@protoc_insertion_point(field_mutable:proto.steam.CJSMethodArgument.json_data)
  return json_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CJSMethodArgument::release_json_data() {
  // @@protoc_insertion_point(field_release:proto.steam.CJSMethodArgument.json_data)
  clear_has_json_data();
  return json_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CJSMethodArgument::set_allocated_json_data(::std::string* json_data) {
  if (json_data != NULL) {
    set_has_json_data();
  } else {
    clear_has_json_data();
  }
  json_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_data);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CJSMethodArgument.json_data)
}

// optional uint64 function_handle = 2;
bool CJSMethodArgument::has_function_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CJSMethodArgument::set_has_function_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CJSMethodArgument::clear_has_function_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CJSMethodArgument::clear_function_handle() {
  function_handle_ = GOOGLE_ULONGLONG(0);
  clear_has_function_handle();
}
::google::protobuf::uint64 CJSMethodArgument::function_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CJSMethodArgument.function_handle)
  return function_handle_;
}
void CJSMethodArgument::set_function_handle(::google::protobuf::uint64 value) {
  set_has_function_handle();
  function_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CJSMethodArgument.function_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJSValue_JSObjectProperty::kNameFieldNumber;
const int CMsgJSValue_JSObjectProperty::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJSValue_JSObjectProperty::CMsgJSValue_JSObjectProperty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgJSValue.JSObjectProperty)
}
CMsgJSValue_JSObjectProperty::CMsgJSValue_JSObjectProperty(const CMsgJSValue_JSObjectProperty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_value()) {
    value_ = new ::proto::steam::CMsgJSValue(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgJSValue.JSObjectProperty)
}

void CMsgJSValue_JSObjectProperty::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
}

CMsgJSValue_JSObjectProperty::~CMsgJSValue_JSObjectProperty() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgJSValue.JSObjectProperty)
  SharedDtor();
}

void CMsgJSValue_JSObjectProperty::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete value_;
  }
}

void CMsgJSValue_JSObjectProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJSValue_JSObjectProperty::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgJSValue_JSObjectProperty& CMsgJSValue_JSObjectProperty::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgJSValue_JSObjectProperty* CMsgJSValue_JSObjectProperty::New(::google::protobuf::Arena* arena) const {
  CMsgJSValue_JSObjectProperty* n = new CMsgJSValue_JSObjectProperty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgJSValue_JSObjectProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgJSValue.JSObjectProperty)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(value_ != NULL);
      value_->::proto::steam::CMsgJSValue::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgJSValue_JSObjectProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgJSValue.JSObjectProperty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgJSValue.JSObjectProperty.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgJSValue value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgJSValue.JSObjectProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgJSValue.JSObjectProperty)
  return false;
#undef DO_
}

void CMsgJSValue_JSObjectProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgJSValue.JSObjectProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSValue.JSObjectProperty.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .proto.steam.CMsgJSValue value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgJSValue.JSObjectProperty)
}

::google::protobuf::uint8* CMsgJSValue_JSObjectProperty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgJSValue.JSObjectProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSValue.JSObjectProperty.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .proto.steam.CMsgJSValue value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgJSValue.JSObjectProperty)
  return target;
}

size_t CMsgJSValue_JSObjectProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgJSValue.JSObjectProperty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .proto.steam.CMsgJSValue value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->value_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJSValue_JSObjectProperty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgJSValue.JSObjectProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSValue_JSObjectProperty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgJSValue_JSObjectProperty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgJSValue.JSObjectProperty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgJSValue.JSObjectProperty)
    MergeFrom(*source);
  }
}

void CMsgJSValue_JSObjectProperty::MergeFrom(const CMsgJSValue_JSObjectProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgJSValue.JSObjectProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_value()->::proto::steam::CMsgJSValue::MergeFrom(from.value());
    }
  }
}

void CMsgJSValue_JSObjectProperty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgJSValue.JSObjectProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSValue_JSObjectProperty::CopyFrom(const CMsgJSValue_JSObjectProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgJSValue.JSObjectProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSValue_JSObjectProperty::IsInitialized() const {
  return true;
}

void CMsgJSValue_JSObjectProperty::Swap(CMsgJSValue_JSObjectProperty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJSValue_JSObjectProperty::InternalSwap(CMsgJSValue_JSObjectProperty* other) {
  name_.Swap(&other->name_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgJSValue_JSObjectProperty::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgJSValue_JSObjectProperty

// optional string name = 1;
bool CMsgJSValue_JSObjectProperty::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgJSValue_JSObjectProperty::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgJSValue_JSObjectProperty::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgJSValue_JSObjectProperty::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgJSValue_JSObjectProperty::name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSValue.JSObjectProperty.name)
  return name_.GetNoArena();
}
void CMsgJSValue_JSObjectProperty::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSValue.JSObjectProperty.name)
}
#if LANG_CXX11
void CMsgJSValue_JSObjectProperty::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgJSValue.JSObjectProperty.name)
}
#endif
void CMsgJSValue_JSObjectProperty::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgJSValue.JSObjectProperty.name)
}
void CMsgJSValue_JSObjectProperty::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgJSValue.JSObjectProperty.name)
}
::std::string* CMsgJSValue_JSObjectProperty::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgJSValue.JSObjectProperty.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgJSValue_JSObjectProperty::release_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgJSValue.JSObjectProperty.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgJSValue_JSObjectProperty::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgJSValue.JSObjectProperty.name)
}

// optional .proto.steam.CMsgJSValue value = 2;
bool CMsgJSValue_JSObjectProperty::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgJSValue_JSObjectProperty::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgJSValue_JSObjectProperty::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgJSValue_JSObjectProperty::clear_value() {
  if (value_ != NULL) value_->::proto::steam::CMsgJSValue::Clear();
  clear_has_value();
}
const ::proto::steam::CMsgJSValue& CMsgJSValue_JSObjectProperty::value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSValue.JSObjectProperty.value)
  return value_ != NULL ? *value_
                         : *::proto::steam::CMsgJSValue::internal_default_instance();
}
::proto::steam::CMsgJSValue* CMsgJSValue_JSObjectProperty::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::proto::steam::CMsgJSValue;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgJSValue.JSObjectProperty.value)
  return value_;
}
::proto::steam::CMsgJSValue* CMsgJSValue_JSObjectProperty::release_value() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgJSValue.JSObjectProperty.value)
  clear_has_value();
  ::proto::steam::CMsgJSValue* temp = value_;
  value_ = NULL;
  return temp;
}
void CMsgJSValue_JSObjectProperty::set_allocated_value(::proto::steam::CMsgJSValue* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgJSValue.JSObjectProperty.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJSValue::kBoolValueFieldNumber;
const int CMsgJSValue::kIntValueFieldNumber;
const int CMsgJSValue::kUintValueFieldNumber;
const int CMsgJSValue::kFloatValueFieldNumber;
const int CMsgJSValue::kStringValueFieldNumber;
const int CMsgJSValue::kFunctionHandleFieldNumber;
const int CMsgJSValue::kIsArrayFieldNumber;
const int CMsgJSValue::kArrayValuesFieldNumber;
const int CMsgJSValue::kIsObjectFieldNumber;
const int CMsgJSValue::kObjectPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJSValue::CMsgJSValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgJSValue)
}
CMsgJSValue::CMsgJSValue(const CMsgJSValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      array_values_(from.array_values_),
      object_properties_(from.object_properties_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_string_value()) {
    string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
  }
  ::memcpy(&int_value_, &from.int_value_,
    reinterpret_cast<char*>(&function_handle_) -
    reinterpret_cast<char*>(&int_value_) + sizeof(function_handle_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgJSValue)
}

void CMsgJSValue::SharedCtor() {
  _cached_size_ = 0;
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&int_value_, 0, reinterpret_cast<char*>(&function_handle_) -
    reinterpret_cast<char*>(&int_value_) + sizeof(function_handle_));
}

CMsgJSValue::~CMsgJSValue() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgJSValue)
  SharedDtor();
}

void CMsgJSValue::SharedDtor() {
  string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgJSValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJSValue::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgJSValue& CMsgJSValue::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgJSValue* CMsgJSValue::New(::google::protobuf::Arena* arena) const {
  CMsgJSValue* n = new CMsgJSValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgJSValue::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgJSValue)
  array_values_.Clear();
  object_properties_.Clear();
  if (has_string_value()) {
    GOOGLE_DCHECK(!string_value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*string_value_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&int_value_, 0, reinterpret_cast<char*>(&function_handle_) -
      reinterpret_cast<char*>(&int_value_) + sizeof(function_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgJSValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgJSValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bool_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_bool_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bool_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 int_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_int_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uint_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_uint_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float float_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_float_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string string_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgJSValue.string_value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 function_handle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_function_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &function_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_array = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_is_array();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_array_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgJSValue array_values = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_array_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_object = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_is_object();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_object_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgJSValue.JSObjectProperty object_properties = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_object_properties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgJSValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgJSValue)
  return false;
#undef DO_
}

void CMsgJSValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgJSValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bool_value = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bool_value(), output);
  }

  // optional int32 int_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->int_value(), output);
  }

  // optional uint32 uint_value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uint_value(), output);
  }

  // optional float float_value = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->float_value(), output);
  }

  // optional string string_value = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSValue.string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->string_value(), output);
  }

  // optional uint64 function_handle = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->function_handle(), output);
  }

  // optional bool is_array = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_array(), output);
  }

  // repeated .proto.steam.CMsgJSValue array_values = 9;
  for (unsigned int i = 0, n = this->array_values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->array_values(i), output);
  }

  // optional bool is_object = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_object(), output);
  }

  // repeated .proto.steam.CMsgJSValue.JSObjectProperty object_properties = 11;
  for (unsigned int i = 0, n = this->object_properties_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->object_properties(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgJSValue)
}

::google::protobuf::uint8* CMsgJSValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgJSValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bool_value = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bool_value(), target);
  }

  // optional int32 int_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->int_value(), target);
  }

  // optional uint32 uint_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uint_value(), target);
  }

  // optional float float_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->float_value(), target);
  }

  // optional string string_value = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSValue.string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->string_value(), target);
  }

  // optional uint64 function_handle = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->function_handle(), target);
  }

  // optional bool is_array = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_array(), target);
  }

  // repeated .proto.steam.CMsgJSValue array_values = 9;
  for (unsigned int i = 0, n = this->array_values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->array_values(i), deterministic, target);
  }

  // optional bool is_object = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_object(), target);
  }

  // repeated .proto.steam.CMsgJSValue.JSObjectProperty object_properties = 11;
  for (unsigned int i = 0, n = this->object_properties_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->object_properties(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgJSValue)
  return target;
}

size_t CMsgJSValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgJSValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgJSValue array_values = 9;
  {
    unsigned int count = this->array_values_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->array_values(i));
    }
  }

  // repeated .proto.steam.CMsgJSValue.JSObjectProperty object_properties = 11;
  {
    unsigned int count = this->object_properties_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object_properties(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string string_value = 5;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }

    // optional int32 int_value = 2;
    if (has_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_value());
    }

    // optional uint32 uint_value = 3;
    if (has_uint_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint_value());
    }

    // optional float float_value = 4;
    if (has_float_value()) {
      total_size += 1 + 4;
    }

    // optional bool bool_value = 1;
    if (has_bool_value()) {
      total_size += 1 + 1;
    }

    // optional bool is_array = 8;
    if (has_is_array()) {
      total_size += 1 + 1;
    }

    // optional bool is_object = 10;
    if (has_is_object()) {
      total_size += 1 + 1;
    }

    // optional uint64 function_handle = 6;
    if (has_function_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->function_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJSValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgJSValue)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgJSValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgJSValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgJSValue)
    MergeFrom(*source);
  }
}

void CMsgJSValue::MergeFrom(const CMsgJSValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgJSValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  array_values_.MergeFrom(from.array_values_);
  object_properties_.MergeFrom(from.object_properties_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_string_value();
      string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
    }
    if (cached_has_bits & 0x00000002u) {
      int_value_ = from.int_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      uint_value_ = from.uint_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      float_value_ = from.float_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      bool_value_ = from.bool_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_array_ = from.is_array_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_object_ = from.is_object_;
    }
    if (cached_has_bits & 0x00000080u) {
      function_handle_ = from.function_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgJSValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSValue::CopyFrom(const CMsgJSValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgJSValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSValue::IsInitialized() const {
  return true;
}

void CMsgJSValue::Swap(CMsgJSValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJSValue::InternalSwap(CMsgJSValue* other) {
  array_values_.InternalSwap(&other->array_values_);
  object_properties_.InternalSwap(&other->object_properties_);
  string_value_.Swap(&other->string_value_);
  std::swap(int_value_, other->int_value_);
  std::swap(uint_value_, other->uint_value_);
  std::swap(float_value_, other->float_value_);
  std::swap(bool_value_, other->bool_value_);
  std::swap(is_array_, other->is_array_);
  std::swap(is_object_, other->is_object_);
  std::swap(function_handle_, other->function_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgJSValue::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgJSValue

// optional bool bool_value = 1;
bool CMsgJSValue::has_bool_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgJSValue::set_has_bool_value() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgJSValue::clear_has_bool_value() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgJSValue::clear_bool_value() {
  bool_value_ = false;
  clear_has_bool_value();
}
bool CMsgJSValue::bool_value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSValue.bool_value)
  return bool_value_;
}
void CMsgJSValue::set_bool_value(bool value) {
  set_has_bool_value();
  bool_value_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSValue.bool_value)
}

// optional int32 int_value = 2;
bool CMsgJSValue::has_int_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgJSValue::set_has_int_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgJSValue::clear_has_int_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgJSValue::clear_int_value() {
  int_value_ = 0;
  clear_has_int_value();
}
::google::protobuf::int32 CMsgJSValue::int_value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSValue.int_value)
  return int_value_;
}
void CMsgJSValue::set_int_value(::google::protobuf::int32 value) {
  set_has_int_value();
  int_value_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSValue.int_value)
}

// optional uint32 uint_value = 3;
bool CMsgJSValue::has_uint_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgJSValue::set_has_uint_value() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgJSValue::clear_has_uint_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgJSValue::clear_uint_value() {
  uint_value_ = 0u;
  clear_has_uint_value();
}
::google::protobuf::uint32 CMsgJSValue::uint_value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSValue.uint_value)
  return uint_value_;
}
void CMsgJSValue::set_uint_value(::google::protobuf::uint32 value) {
  set_has_uint_value();
  uint_value_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSValue.uint_value)
}

// optional float float_value = 4;
bool CMsgJSValue::has_float_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgJSValue::set_has_float_value() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgJSValue::clear_has_float_value() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgJSValue::clear_float_value() {
  float_value_ = 0;
  clear_has_float_value();
}
float CMsgJSValue::float_value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSValue.float_value)
  return float_value_;
}
void CMsgJSValue::set_float_value(float value) {
  set_has_float_value();
  float_value_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSValue.float_value)
}

// optional string string_value = 5;
bool CMsgJSValue::has_string_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgJSValue::set_has_string_value() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgJSValue::clear_has_string_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgJSValue::clear_string_value() {
  string_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string_value();
}
const ::std::string& CMsgJSValue::string_value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSValue.string_value)
  return string_value_.GetNoArena();
}
void CMsgJSValue::set_string_value(const ::std::string& value) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSValue.string_value)
}
#if LANG_CXX11
void CMsgJSValue::set_string_value(::std::string&& value) {
  set_has_string_value();
  string_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgJSValue.string_value)
}
#endif
void CMsgJSValue::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgJSValue.string_value)
}
void CMsgJSValue::set_string_value(const char* value, size_t size) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgJSValue.string_value)
}
::std::string* CMsgJSValue::mutable_string_value() {
  set_has_string_value();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgJSValue.string_value)
  return string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgJSValue::release_string_value() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgJSValue.string_value)
  clear_has_string_value();
  return string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgJSValue::set_allocated_string_value(::std::string* string_value) {
  if (string_value != NULL) {
    set_has_string_value();
  } else {
    clear_has_string_value();
  }
  string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgJSValue.string_value)
}

// optional uint64 function_handle = 6;
bool CMsgJSValue::has_function_handle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgJSValue::set_has_function_handle() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgJSValue::clear_has_function_handle() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgJSValue::clear_function_handle() {
  function_handle_ = GOOGLE_ULONGLONG(0);
  clear_has_function_handle();
}
::google::protobuf::uint64 CMsgJSValue::function_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSValue.function_handle)
  return function_handle_;
}
void CMsgJSValue::set_function_handle(::google::protobuf::uint64 value) {
  set_has_function_handle();
  function_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSValue.function_handle)
}

// optional bool is_array = 8;
bool CMsgJSValue::has_is_array() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgJSValue::set_has_is_array() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgJSValue::clear_has_is_array() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgJSValue::clear_is_array() {
  is_array_ = false;
  clear_has_is_array();
}
bool CMsgJSValue::is_array() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSValue.is_array)
  return is_array_;
}
void CMsgJSValue::set_is_array(bool value) {
  set_has_is_array();
  is_array_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSValue.is_array)
}

// repeated .proto.steam.CMsgJSValue array_values = 9;
int CMsgJSValue::array_values_size() const {
  return array_values_.size();
}
void CMsgJSValue::clear_array_values() {
  array_values_.Clear();
}
const ::proto::steam::CMsgJSValue& CMsgJSValue::array_values(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSValue.array_values)
  return array_values_.Get(index);
}
::proto::steam::CMsgJSValue* CMsgJSValue::mutable_array_values(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgJSValue.array_values)
  return array_values_.Mutable(index);
}
::proto::steam::CMsgJSValue* CMsgJSValue::add_array_values() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgJSValue.array_values)
  return array_values_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgJSValue >*
CMsgJSValue::mutable_array_values() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgJSValue.array_values)
  return &array_values_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgJSValue >&
CMsgJSValue::array_values() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgJSValue.array_values)
  return array_values_;
}

// optional bool is_object = 10;
bool CMsgJSValue::has_is_object() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgJSValue::set_has_is_object() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgJSValue::clear_has_is_object() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgJSValue::clear_is_object() {
  is_object_ = false;
  clear_has_is_object();
}
bool CMsgJSValue::is_object() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSValue.is_object)
  return is_object_;
}
void CMsgJSValue::set_is_object(bool value) {
  set_has_is_object();
  is_object_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSValue.is_object)
}

// repeated .proto.steam.CMsgJSValue.JSObjectProperty object_properties = 11;
int CMsgJSValue::object_properties_size() const {
  return object_properties_.size();
}
void CMsgJSValue::clear_object_properties() {
  object_properties_.Clear();
}
const ::proto::steam::CMsgJSValue_JSObjectProperty& CMsgJSValue::object_properties(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSValue.object_properties)
  return object_properties_.Get(index);
}
::proto::steam::CMsgJSValue_JSObjectProperty* CMsgJSValue::mutable_object_properties(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgJSValue.object_properties)
  return object_properties_.Mutable(index);
}
::proto::steam::CMsgJSValue_JSObjectProperty* CMsgJSValue::add_object_properties() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgJSValue.object_properties)
  return object_properties_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgJSValue_JSObjectProperty >*
CMsgJSValue::mutable_object_properties() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgJSValue.object_properties)
  return &object_properties_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgJSValue_JSObjectProperty >&
CMsgJSValue::object_properties() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgJSValue.object_properties)
  return object_properties_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJSMethodCall::kBrowserHandleFieldNumber;
const int CMsgJSMethodCall::kNameFieldNumber;
const int CMsgJSMethodCall::kArgumentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJSMethodCall::CMsgJSMethodCall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgJSMethodCall)
}
CMsgJSMethodCall::CMsgJSMethodCall(const CMsgJSMethodCall& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      arguments_(from.arguments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgJSMethodCall)
}

void CMsgJSMethodCall::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgJSMethodCall::~CMsgJSMethodCall() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgJSMethodCall)
  SharedDtor();
}

void CMsgJSMethodCall::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgJSMethodCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJSMethodCall::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgJSMethodCall& CMsgJSMethodCall::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgJSMethodCall* CMsgJSMethodCall::New(::google::protobuf::Arena* arena) const {
  CMsgJSMethodCall* n = new CMsgJSMethodCall;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgJSMethodCall::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgJSMethodCall)
  arguments_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgJSMethodCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgJSMethodCall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgJSMethodCall.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgJSValue arguments = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arguments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgJSMethodCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgJSMethodCall)
  return false;
#undef DO_
}

void CMsgJSMethodCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgJSMethodCall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSMethodCall.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .proto.steam.CMsgJSValue arguments = 3;
  for (unsigned int i = 0, n = this->arguments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arguments(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgJSMethodCall)
}

::google::protobuf::uint8* CMsgJSMethodCall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgJSMethodCall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSMethodCall.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .proto.steam.CMsgJSValue arguments = 3;
  for (unsigned int i = 0, n = this->arguments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->arguments(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgJSMethodCall)
  return target;
}

size_t CMsgJSMethodCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgJSMethodCall)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgJSValue arguments = 3;
  {
    unsigned int count = this->arguments_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arguments(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJSMethodCall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgJSMethodCall)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSMethodCall* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgJSMethodCall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgJSMethodCall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgJSMethodCall)
    MergeFrom(*source);
  }
}

void CMsgJSMethodCall::MergeFrom(const CMsgJSMethodCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgJSMethodCall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arguments_.MergeFrom(from.arguments_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSMethodCall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgJSMethodCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSMethodCall::CopyFrom(const CMsgJSMethodCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgJSMethodCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSMethodCall::IsInitialized() const {
  return true;
}

void CMsgJSMethodCall::Swap(CMsgJSMethodCall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJSMethodCall::InternalSwap(CMsgJSMethodCall* other) {
  arguments_.InternalSwap(&other->arguments_);
  name_.Swap(&other->name_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgJSMethodCall::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgJSMethodCall

// optional uint32 browser_handle = 1;
bool CMsgJSMethodCall::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgJSMethodCall::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgJSMethodCall::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgJSMethodCall::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgJSMethodCall::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSMethodCall.browser_handle)
  return browser_handle_;
}
void CMsgJSMethodCall::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSMethodCall.browser_handle)
}

// optional string name = 2;
bool CMsgJSMethodCall::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgJSMethodCall::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgJSMethodCall::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgJSMethodCall::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgJSMethodCall::name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSMethodCall.name)
  return name_.GetNoArena();
}
void CMsgJSMethodCall::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSMethodCall.name)
}
#if LANG_CXX11
void CMsgJSMethodCall::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgJSMethodCall.name)
}
#endif
void CMsgJSMethodCall::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgJSMethodCall.name)
}
void CMsgJSMethodCall::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgJSMethodCall.name)
}
::std::string* CMsgJSMethodCall::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgJSMethodCall.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgJSMethodCall::release_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgJSMethodCall.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgJSMethodCall::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgJSMethodCall.name)
}

// repeated .proto.steam.CMsgJSValue arguments = 3;
int CMsgJSMethodCall::arguments_size() const {
  return arguments_.size();
}
void CMsgJSMethodCall::clear_arguments() {
  arguments_.Clear();
}
const ::proto::steam::CMsgJSValue& CMsgJSMethodCall::arguments(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSMethodCall.arguments)
  return arguments_.Get(index);
}
::proto::steam::CMsgJSValue* CMsgJSMethodCall::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgJSMethodCall.arguments)
  return arguments_.Mutable(index);
}
::proto::steam::CMsgJSValue* CMsgJSMethodCall::add_arguments() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgJSMethodCall.arguments)
  return arguments_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgJSValue >*
CMsgJSMethodCall::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgJSMethodCall.arguments)
  return &arguments_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgJSValue >&
CMsgJSMethodCall::arguments() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgJSMethodCall.arguments)
  return arguments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJSExecuteCallback::kBrowserHandleFieldNumber;
const int CMsgJSExecuteCallback::kFunctionHandleFieldNumber;
const int CMsgJSExecuteCallback::kArgumentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJSExecuteCallback::CMsgJSExecuteCallback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgJSExecuteCallback)
}
CMsgJSExecuteCallback::CMsgJSExecuteCallback(const CMsgJSExecuteCallback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      arguments_(from.arguments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&function_handle_, &from.function_handle_,
    reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&function_handle_) + sizeof(browser_handle_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgJSExecuteCallback)
}

void CMsgJSExecuteCallback::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&function_handle_, 0, reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&function_handle_) + sizeof(browser_handle_));
}

CMsgJSExecuteCallback::~CMsgJSExecuteCallback() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgJSExecuteCallback)
  SharedDtor();
}

void CMsgJSExecuteCallback::SharedDtor() {
}

void CMsgJSExecuteCallback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJSExecuteCallback::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgJSExecuteCallback& CMsgJSExecuteCallback::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgJSExecuteCallback* CMsgJSExecuteCallback::New(::google::protobuf::Arena* arena) const {
  CMsgJSExecuteCallback* n = new CMsgJSExecuteCallback;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgJSExecuteCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgJSExecuteCallback)
  arguments_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&function_handle_, 0, reinterpret_cast<char*>(&browser_handle_) -
      reinterpret_cast<char*>(&function_handle_) + sizeof(browser_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgJSExecuteCallback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgJSExecuteCallback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 function_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_function_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &function_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgJSValue arguments = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arguments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgJSExecuteCallback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgJSExecuteCallback)
  return false;
#undef DO_
}

void CMsgJSExecuteCallback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgJSExecuteCallback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint64 function_handle = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->function_handle(), output);
  }

  // repeated .proto.steam.CMsgJSValue arguments = 3;
  for (unsigned int i = 0, n = this->arguments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arguments(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgJSExecuteCallback)
}

::google::protobuf::uint8* CMsgJSExecuteCallback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgJSExecuteCallback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint64 function_handle = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->function_handle(), target);
  }

  // repeated .proto.steam.CMsgJSValue arguments = 3;
  for (unsigned int i = 0, n = this->arguments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->arguments(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgJSExecuteCallback)
  return target;
}

size_t CMsgJSExecuteCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgJSExecuteCallback)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgJSValue arguments = 3;
  {
    unsigned int count = this->arguments_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arguments(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 function_handle = 2;
    if (has_function_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->function_handle());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJSExecuteCallback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgJSExecuteCallback)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSExecuteCallback* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgJSExecuteCallback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgJSExecuteCallback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgJSExecuteCallback)
    MergeFrom(*source);
  }
}

void CMsgJSExecuteCallback::MergeFrom(const CMsgJSExecuteCallback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgJSExecuteCallback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arguments_.MergeFrom(from.arguments_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      function_handle_ = from.function_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSExecuteCallback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgJSExecuteCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSExecuteCallback::CopyFrom(const CMsgJSExecuteCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgJSExecuteCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSExecuteCallback::IsInitialized() const {
  return true;
}

void CMsgJSExecuteCallback::Swap(CMsgJSExecuteCallback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJSExecuteCallback::InternalSwap(CMsgJSExecuteCallback* other) {
  arguments_.InternalSwap(&other->arguments_);
  std::swap(function_handle_, other->function_handle_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgJSExecuteCallback::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgJSExecuteCallback

// optional uint32 browser_handle = 1;
bool CMsgJSExecuteCallback::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgJSExecuteCallback::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgJSExecuteCallback::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgJSExecuteCallback::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgJSExecuteCallback::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSExecuteCallback.browser_handle)
  return browser_handle_;
}
void CMsgJSExecuteCallback::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSExecuteCallback.browser_handle)
}

// optional uint64 function_handle = 2;
bool CMsgJSExecuteCallback::has_function_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgJSExecuteCallback::set_has_function_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgJSExecuteCallback::clear_has_function_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgJSExecuteCallback::clear_function_handle() {
  function_handle_ = GOOGLE_ULONGLONG(0);
  clear_has_function_handle();
}
::google::protobuf::uint64 CMsgJSExecuteCallback::function_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSExecuteCallback.function_handle)
  return function_handle_;
}
void CMsgJSExecuteCallback::set_function_handle(::google::protobuf::uint64 value) {
  set_has_function_handle();
  function_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSExecuteCallback.function_handle)
}

// repeated .proto.steam.CMsgJSValue arguments = 3;
int CMsgJSExecuteCallback::arguments_size() const {
  return arguments_.size();
}
void CMsgJSExecuteCallback::clear_arguments() {
  arguments_.Clear();
}
const ::proto::steam::CMsgJSValue& CMsgJSExecuteCallback::arguments(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSExecuteCallback.arguments)
  return arguments_.Get(index);
}
::proto::steam::CMsgJSValue* CMsgJSExecuteCallback::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgJSExecuteCallback.arguments)
  return arguments_.Mutable(index);
}
::proto::steam::CMsgJSValue* CMsgJSExecuteCallback::add_arguments() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgJSExecuteCallback.arguments)
  return arguments_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgJSValue >*
CMsgJSExecuteCallback::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgJSExecuteCallback.arguments)
  return &arguments_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgJSValue >&
CMsgJSExecuteCallback::arguments() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgJSExecuteCallback.arguments)
  return arguments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJSReleaseCallback::kBrowserHandleFieldNumber;
const int CMsgJSReleaseCallback::kFunctionHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJSReleaseCallback::CMsgJSReleaseCallback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgJSReleaseCallback)
}
CMsgJSReleaseCallback::CMsgJSReleaseCallback(const CMsgJSReleaseCallback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&function_handle_, &from.function_handle_,
    reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&function_handle_) + sizeof(browser_handle_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgJSReleaseCallback)
}

void CMsgJSReleaseCallback::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&function_handle_, 0, reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&function_handle_) + sizeof(browser_handle_));
}

CMsgJSReleaseCallback::~CMsgJSReleaseCallback() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgJSReleaseCallback)
  SharedDtor();
}

void CMsgJSReleaseCallback::SharedDtor() {
}

void CMsgJSReleaseCallback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJSReleaseCallback::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgJSReleaseCallback& CMsgJSReleaseCallback::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgJSReleaseCallback* CMsgJSReleaseCallback::New(::google::protobuf::Arena* arena) const {
  CMsgJSReleaseCallback* n = new CMsgJSReleaseCallback;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgJSReleaseCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgJSReleaseCallback)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&function_handle_, 0, reinterpret_cast<char*>(&browser_handle_) -
      reinterpret_cast<char*>(&function_handle_) + sizeof(browser_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgJSReleaseCallback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgJSReleaseCallback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 function_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_function_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &function_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgJSReleaseCallback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgJSReleaseCallback)
  return false;
#undef DO_
}

void CMsgJSReleaseCallback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgJSReleaseCallback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint64 function_handle = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->function_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgJSReleaseCallback)
}

::google::protobuf::uint8* CMsgJSReleaseCallback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgJSReleaseCallback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint64 function_handle = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->function_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgJSReleaseCallback)
  return target;
}

size_t CMsgJSReleaseCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgJSReleaseCallback)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 function_handle = 2;
    if (has_function_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->function_handle());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJSReleaseCallback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgJSReleaseCallback)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSReleaseCallback* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgJSReleaseCallback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgJSReleaseCallback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgJSReleaseCallback)
    MergeFrom(*source);
  }
}

void CMsgJSReleaseCallback::MergeFrom(const CMsgJSReleaseCallback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgJSReleaseCallback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      function_handle_ = from.function_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSReleaseCallback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgJSReleaseCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSReleaseCallback::CopyFrom(const CMsgJSReleaseCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgJSReleaseCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSReleaseCallback::IsInitialized() const {
  return true;
}

void CMsgJSReleaseCallback::Swap(CMsgJSReleaseCallback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJSReleaseCallback::InternalSwap(CMsgJSReleaseCallback* other) {
  std::swap(function_handle_, other->function_handle_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgJSReleaseCallback::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgJSReleaseCallback

// optional uint32 browser_handle = 1;
bool CMsgJSReleaseCallback::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgJSReleaseCallback::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgJSReleaseCallback::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgJSReleaseCallback::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgJSReleaseCallback::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSReleaseCallback.browser_handle)
  return browser_handle_;
}
void CMsgJSReleaseCallback::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSReleaseCallback.browser_handle)
}

// optional uint64 function_handle = 2;
bool CMsgJSReleaseCallback::has_function_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgJSReleaseCallback::set_has_function_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgJSReleaseCallback::clear_has_function_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgJSReleaseCallback::clear_function_handle() {
  function_handle_ = GOOGLE_ULONGLONG(0);
  clear_has_function_handle();
}
::google::protobuf::uint64 CMsgJSReleaseCallback::function_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSReleaseCallback.function_handle)
  return function_handle_;
}
void CMsgJSReleaseCallback::set_function_handle(::google::protobuf::uint64 value) {
  set_has_function_handle();
  function_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSReleaseCallback.function_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJSRaiseException::kBrowserHandleFieldNumber;
const int CMsgJSRaiseException::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJSRaiseException::CMsgJSRaiseException()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgJSRaiseException)
}
CMsgJSRaiseException::CMsgJSRaiseException(const CMsgJSRaiseException& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exception_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exception()) {
    exception_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exception_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgJSRaiseException)
}

void CMsgJSRaiseException::SharedCtor() {
  _cached_size_ = 0;
  exception_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgJSRaiseException::~CMsgJSRaiseException() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgJSRaiseException)
  SharedDtor();
}

void CMsgJSRaiseException::SharedDtor() {
  exception_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgJSRaiseException::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJSRaiseException::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgJSRaiseException& CMsgJSRaiseException::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgJSRaiseException* CMsgJSRaiseException::New(::google::protobuf::Arena* arena) const {
  CMsgJSRaiseException* n = new CMsgJSRaiseException;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgJSRaiseException::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgJSRaiseException)
  if (has_exception()) {
    GOOGLE_DCHECK(!exception_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*exception_.UnsafeRawStringPointer())->clear();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgJSRaiseException::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgJSRaiseException)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string exception = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exception()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exception().data(), this->exception().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgJSRaiseException.exception");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgJSRaiseException)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgJSRaiseException)
  return false;
#undef DO_
}

void CMsgJSRaiseException::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgJSRaiseException)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string exception = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exception().data(), this->exception().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSRaiseException.exception");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exception(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgJSRaiseException)
}

::google::protobuf::uint8* CMsgJSRaiseException::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgJSRaiseException)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string exception = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exception().data(), this->exception().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSRaiseException.exception");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exception(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgJSRaiseException)
  return target;
}

size_t CMsgJSRaiseException::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgJSRaiseException)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string exception = 2;
    if (has_exception()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exception());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJSRaiseException::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgJSRaiseException)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSRaiseException* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgJSRaiseException>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgJSRaiseException)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgJSRaiseException)
    MergeFrom(*source);
  }
}

void CMsgJSRaiseException::MergeFrom(const CMsgJSRaiseException& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgJSRaiseException)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_exception();
      exception_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exception_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSRaiseException::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgJSRaiseException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSRaiseException::CopyFrom(const CMsgJSRaiseException& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgJSRaiseException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSRaiseException::IsInitialized() const {
  return true;
}

void CMsgJSRaiseException::Swap(CMsgJSRaiseException* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJSRaiseException::InternalSwap(CMsgJSRaiseException* other) {
  exception_.Swap(&other->exception_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgJSRaiseException::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgJSRaiseException

// optional uint32 browser_handle = 1;
bool CMsgJSRaiseException::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgJSRaiseException::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgJSRaiseException::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgJSRaiseException::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgJSRaiseException::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSRaiseException.browser_handle)
  return browser_handle_;
}
void CMsgJSRaiseException::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSRaiseException.browser_handle)
}

// optional string exception = 2;
bool CMsgJSRaiseException::has_exception() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgJSRaiseException::set_has_exception() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgJSRaiseException::clear_has_exception() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgJSRaiseException::clear_exception() {
  exception_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exception();
}
const ::std::string& CMsgJSRaiseException::exception() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJSRaiseException.exception)
  return exception_.GetNoArena();
}
void CMsgJSRaiseException::set_exception(const ::std::string& value) {
  set_has_exception();
  exception_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJSRaiseException.exception)
}
#if LANG_CXX11
void CMsgJSRaiseException::set_exception(::std::string&& value) {
  set_has_exception();
  exception_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgJSRaiseException.exception)
}
#endif
void CMsgJSRaiseException::set_exception(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exception();
  exception_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgJSRaiseException.exception)
}
void CMsgJSRaiseException::set_exception(const char* value, size_t size) {
  set_has_exception();
  exception_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgJSRaiseException.exception)
}
::std::string* CMsgJSRaiseException::mutable_exception() {
  set_has_exception();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgJSRaiseException.exception)
  return exception_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgJSRaiseException::release_exception() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgJSRaiseException.exception)
  clear_has_exception();
  return exception_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgJSRaiseException::set_allocated_exception(::std::string* exception) {
  if (exception != NULL) {
    set_has_exception();
  } else {
    clear_has_exception();
  }
  exception_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exception);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgJSRaiseException.exception)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLoadLocalization::kBrowserHandleFieldNumber;
const int CMsgLoadLocalization::kLocalizationPathFieldNumber;
const int CMsgLoadLocalization::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLoadLocalization::CMsgLoadLocalization()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgLoadLocalization)
}
CMsgLoadLocalization::CMsgLoadLocalization(const CMsgLoadLocalization& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  localization_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_localization_path()) {
    localization_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.localization_path_);
  }
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgLoadLocalization)
}

void CMsgLoadLocalization::SharedCtor() {
  _cached_size_ = 0;
  localization_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgLoadLocalization::~CMsgLoadLocalization() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgLoadLocalization)
  SharedDtor();
}

void CMsgLoadLocalization::SharedDtor() {
  localization_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgLoadLocalization::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLoadLocalization::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgLoadLocalization& CMsgLoadLocalization::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgLoadLocalization* CMsgLoadLocalization::New(::google::protobuf::Arena* arena) const {
  CMsgLoadLocalization* n = new CMsgLoadLocalization;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLoadLocalization::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgLoadLocalization)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_localization_path()) {
      GOOGLE_DCHECK(!localization_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*localization_path_.UnsafeRawStringPointer())->clear();
    }
    if (has_language()) {
      GOOGLE_DCHECK(!language_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*language_.UnsafeRawStringPointer())->clear();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgLoadLocalization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgLoadLocalization)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string localization_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localization_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->localization_path().data(), this->localization_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgLoadLocalization.localization_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string language = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgLoadLocalization.language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgLoadLocalization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgLoadLocalization)
  return false;
#undef DO_
}

void CMsgLoadLocalization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgLoadLocalization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string localization_path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localization_path().data(), this->localization_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLoadLocalization.localization_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->localization_path(), output);
  }

  // optional string language = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLoadLocalization.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->language(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgLoadLocalization)
}

::google::protobuf::uint8* CMsgLoadLocalization::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgLoadLocalization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string localization_path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localization_path().data(), this->localization_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLoadLocalization.localization_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->localization_path(), target);
  }

  // optional string language = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLoadLocalization.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->language(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgLoadLocalization)
  return target;
}

size_t CMsgLoadLocalization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgLoadLocalization)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string localization_path = 2;
    if (has_localization_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->localization_path());
    }

    // optional string language = 3;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLoadLocalization::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgLoadLocalization)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLoadLocalization* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLoadLocalization>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgLoadLocalization)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgLoadLocalization)
    MergeFrom(*source);
  }
}

void CMsgLoadLocalization::MergeFrom(const CMsgLoadLocalization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgLoadLocalization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_localization_path();
      localization_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.localization_path_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_language();
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLoadLocalization::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgLoadLocalization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLoadLocalization::CopyFrom(const CMsgLoadLocalization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgLoadLocalization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLoadLocalization::IsInitialized() const {
  return true;
}

void CMsgLoadLocalization::Swap(CMsgLoadLocalization* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLoadLocalization::InternalSwap(CMsgLoadLocalization* other) {
  localization_path_.Swap(&other->localization_path_);
  language_.Swap(&other->language_);
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLoadLocalization::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgLoadLocalization

// optional uint32 browser_handle = 1;
bool CMsgLoadLocalization::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgLoadLocalization::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgLoadLocalization::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgLoadLocalization::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgLoadLocalization::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgLoadLocalization.browser_handle)
  return browser_handle_;
}
void CMsgLoadLocalization::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgLoadLocalization.browser_handle)
}

// optional string localization_path = 2;
bool CMsgLoadLocalization::has_localization_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgLoadLocalization::set_has_localization_path() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgLoadLocalization::clear_has_localization_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgLoadLocalization::clear_localization_path() {
  localization_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_localization_path();
}
const ::std::string& CMsgLoadLocalization::localization_path() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgLoadLocalization.localization_path)
  return localization_path_.GetNoArena();
}
void CMsgLoadLocalization::set_localization_path(const ::std::string& value) {
  set_has_localization_path();
  localization_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgLoadLocalization.localization_path)
}
#if LANG_CXX11
void CMsgLoadLocalization::set_localization_path(::std::string&& value) {
  set_has_localization_path();
  localization_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgLoadLocalization.localization_path)
}
#endif
void CMsgLoadLocalization::set_localization_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_localization_path();
  localization_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgLoadLocalization.localization_path)
}
void CMsgLoadLocalization::set_localization_path(const char* value, size_t size) {
  set_has_localization_path();
  localization_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgLoadLocalization.localization_path)
}
::std::string* CMsgLoadLocalization::mutable_localization_path() {
  set_has_localization_path();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgLoadLocalization.localization_path)
  return localization_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgLoadLocalization::release_localization_path() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgLoadLocalization.localization_path)
  clear_has_localization_path();
  return localization_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgLoadLocalization::set_allocated_localization_path(::std::string* localization_path) {
  if (localization_path != NULL) {
    set_has_localization_path();
  } else {
    clear_has_localization_path();
  }
  localization_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), localization_path);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgLoadLocalization.localization_path)
}

// optional string language = 3;
bool CMsgLoadLocalization::has_language() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgLoadLocalization::set_has_language() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgLoadLocalization::clear_has_language() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgLoadLocalization::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
const ::std::string& CMsgLoadLocalization::language() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgLoadLocalization.language)
  return language_.GetNoArena();
}
void CMsgLoadLocalization::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgLoadLocalization.language)
}
#if LANG_CXX11
void CMsgLoadLocalization::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgLoadLocalization.language)
}
#endif
void CMsgLoadLocalization::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgLoadLocalization.language)
}
void CMsgLoadLocalization::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgLoadLocalization.language)
}
::std::string* CMsgLoadLocalization::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgLoadLocalization.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgLoadLocalization::release_language() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgLoadLocalization.language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgLoadLocalization::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgLoadLocalization.language)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgEnableSteamClientAPI::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgEnableSteamClientAPI::CMsgEnableSteamClientAPI()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgEnableSteamClientAPI)
}
CMsgEnableSteamClientAPI::CMsgEnableSteamClientAPI(const CMsgEnableSteamClientAPI& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgEnableSteamClientAPI)
}

void CMsgEnableSteamClientAPI::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
}

CMsgEnableSteamClientAPI::~CMsgEnableSteamClientAPI() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgEnableSteamClientAPI)
  SharedDtor();
}

void CMsgEnableSteamClientAPI::SharedDtor() {
}

void CMsgEnableSteamClientAPI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgEnableSteamClientAPI::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgEnableSteamClientAPI& CMsgEnableSteamClientAPI::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgEnableSteamClientAPI* CMsgEnableSteamClientAPI::New(::google::protobuf::Arena* arena) const {
  CMsgEnableSteamClientAPI* n = new CMsgEnableSteamClientAPI;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgEnableSteamClientAPI::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgEnableSteamClientAPI)
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgEnableSteamClientAPI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgEnableSteamClientAPI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_browser_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgEnableSteamClientAPI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgEnableSteamClientAPI)
  return false;
#undef DO_
}

void CMsgEnableSteamClientAPI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgEnableSteamClientAPI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgEnableSteamClientAPI)
}

::google::protobuf::uint8* CMsgEnableSteamClientAPI::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgEnableSteamClientAPI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgEnableSteamClientAPI)
  return target;
}

size_t CMsgEnableSteamClientAPI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgEnableSteamClientAPI)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 browser_handle = 1;
  if (has_browser_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgEnableSteamClientAPI::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgEnableSteamClientAPI)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgEnableSteamClientAPI* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgEnableSteamClientAPI>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgEnableSteamClientAPI)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgEnableSteamClientAPI)
    MergeFrom(*source);
  }
}

void CMsgEnableSteamClientAPI::MergeFrom(const CMsgEnableSteamClientAPI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgEnableSteamClientAPI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgEnableSteamClientAPI::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgEnableSteamClientAPI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgEnableSteamClientAPI::CopyFrom(const CMsgEnableSteamClientAPI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgEnableSteamClientAPI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgEnableSteamClientAPI::IsInitialized() const {
  return true;
}

void CMsgEnableSteamClientAPI::Swap(CMsgEnableSteamClientAPI* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgEnableSteamClientAPI::InternalSwap(CMsgEnableSteamClientAPI* other) {
  std::swap(browser_handle_, other->browser_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgEnableSteamClientAPI::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgEnableSteamClientAPI

// optional uint32 browser_handle = 1;
bool CMsgEnableSteamClientAPI::has_browser_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgEnableSteamClientAPI::set_has_browser_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgEnableSteamClientAPI::clear_has_browser_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgEnableSteamClientAPI::clear_browser_handle() {
  browser_handle_ = 0u;
  clear_has_browser_handle();
}
::google::protobuf::uint32 CMsgEnableSteamClientAPI::browser_handle() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgEnableSteamClientAPI.browser_handle)
  return browser_handle_;
}
void CMsgEnableSteamClientAPI::set_browser_handle(::google::protobuf::uint32 value) {
  set_has_browser_handle();
  browser_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgEnableSteamClientAPI.browser_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJumpListLink::kDisplayNameFieldNumber;
const int CMsgJumpListLink::kUrlLinkFieldNumber;
const int CMsgJumpListLink::kIconPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJumpListLink::CMsgJumpListLink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgJumpListLink)
}
CMsgJumpListLink::CMsgJumpListLink(const CMsgJumpListLink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_display_name()) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  url_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url_link()) {
    url_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_link_);
  }
  icon_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_icon_path()) {
    icon_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_path_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgJumpListLink)
}

void CMsgJumpListLink::SharedCtor() {
  _cached_size_ = 0;
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgJumpListLink::~CMsgJumpListLink() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgJumpListLink)
  SharedDtor();
}

void CMsgJumpListLink::SharedDtor() {
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgJumpListLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJumpListLink::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgJumpListLink& CMsgJumpListLink::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgJumpListLink* CMsgJumpListLink::New(::google::protobuf::Arena* arena) const {
  CMsgJumpListLink* n = new CMsgJumpListLink;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgJumpListLink::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgJumpListLink)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_display_name()) {
      GOOGLE_DCHECK(!display_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*display_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_url_link()) {
      GOOGLE_DCHECK(!url_link_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_link_.UnsafeRawStringPointer())->clear();
    }
    if (has_icon_path()) {
      GOOGLE_DCHECK(!icon_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*icon_path_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgJumpListLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgJumpListLink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string display_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgJumpListLink.display_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url_link = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url_link().data(), this->url_link().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgJumpListLink.url_link");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string icon_path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon_path().data(), this->icon_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgJumpListLink.icon_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgJumpListLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgJumpListLink)
  return false;
#undef DO_
}

void CMsgJumpListLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgJumpListLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string display_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJumpListLink.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->display_name(), output);
  }

  // optional string url_link = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_link().data(), this->url_link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJumpListLink.url_link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url_link(), output);
  }

  // optional string icon_path = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon_path().data(), this->icon_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJumpListLink.icon_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->icon_path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgJumpListLink)
}

::google::protobuf::uint8* CMsgJumpListLink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgJumpListLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string display_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJumpListLink.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->display_name(), target);
  }

  // optional string url_link = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_link().data(), this->url_link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJumpListLink.url_link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url_link(), target);
  }

  // optional string icon_path = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon_path().data(), this->icon_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJumpListLink.icon_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->icon_path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgJumpListLink)
  return target;
}

size_t CMsgJumpListLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgJumpListLink)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string display_name = 1;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

    // optional string url_link = 2;
    if (has_url_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_link());
    }

    // optional string icon_path = 3;
    if (has_icon_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_path());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJumpListLink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgJumpListLink)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJumpListLink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgJumpListLink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgJumpListLink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgJumpListLink)
    MergeFrom(*source);
  }
}

void CMsgJumpListLink::MergeFrom(const CMsgJumpListLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgJumpListLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_display_name();
      display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url_link();
      url_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_link_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_icon_path();
      icon_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_path_);
    }
  }
}

void CMsgJumpListLink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgJumpListLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJumpListLink::CopyFrom(const CMsgJumpListLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgJumpListLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJumpListLink::IsInitialized() const {
  return true;
}

void CMsgJumpListLink::Swap(CMsgJumpListLink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJumpListLink::InternalSwap(CMsgJumpListLink* other) {
  display_name_.Swap(&other->display_name_);
  url_link_.Swap(&other->url_link_);
  icon_path_.Swap(&other->icon_path_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgJumpListLink::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgJumpListLink

// optional string display_name = 1;
bool CMsgJumpListLink::has_display_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgJumpListLink::set_has_display_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgJumpListLink::clear_has_display_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgJumpListLink::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_display_name();
}
const ::std::string& CMsgJumpListLink::display_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJumpListLink.display_name)
  return display_name_.GetNoArena();
}
void CMsgJumpListLink::set_display_name(const ::std::string& value) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJumpListLink.display_name)
}
#if LANG_CXX11
void CMsgJumpListLink::set_display_name(::std::string&& value) {
  set_has_display_name();
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgJumpListLink.display_name)
}
#endif
void CMsgJumpListLink::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgJumpListLink.display_name)
}
void CMsgJumpListLink::set_display_name(const char* value, size_t size) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgJumpListLink.display_name)
}
::std::string* CMsgJumpListLink::mutable_display_name() {
  set_has_display_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgJumpListLink.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgJumpListLink::release_display_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgJumpListLink.display_name)
  clear_has_display_name();
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgJumpListLink::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    set_has_display_name();
  } else {
    clear_has_display_name();
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgJumpListLink.display_name)
}

// optional string url_link = 2;
bool CMsgJumpListLink::has_url_link() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgJumpListLink::set_has_url_link() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgJumpListLink::clear_has_url_link() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgJumpListLink::clear_url_link() {
  url_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url_link();
}
const ::std::string& CMsgJumpListLink::url_link() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJumpListLink.url_link)
  return url_link_.GetNoArena();
}
void CMsgJumpListLink::set_url_link(const ::std::string& value) {
  set_has_url_link();
  url_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJumpListLink.url_link)
}
#if LANG_CXX11
void CMsgJumpListLink::set_url_link(::std::string&& value) {
  set_has_url_link();
  url_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgJumpListLink.url_link)
}
#endif
void CMsgJumpListLink::set_url_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url_link();
  url_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgJumpListLink.url_link)
}
void CMsgJumpListLink::set_url_link(const char* value, size_t size) {
  set_has_url_link();
  url_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgJumpListLink.url_link)
}
::std::string* CMsgJumpListLink::mutable_url_link() {
  set_has_url_link();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgJumpListLink.url_link)
  return url_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgJumpListLink::release_url_link() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgJumpListLink.url_link)
  clear_has_url_link();
  return url_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgJumpListLink::set_allocated_url_link(::std::string* url_link) {
  if (url_link != NULL) {
    set_has_url_link();
  } else {
    clear_has_url_link();
  }
  url_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url_link);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgJumpListLink.url_link)
}

// optional string icon_path = 3;
bool CMsgJumpListLink::has_icon_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgJumpListLink::set_has_icon_path() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgJumpListLink::clear_has_icon_path() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgJumpListLink::clear_icon_path() {
  icon_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_icon_path();
}
const ::std::string& CMsgJumpListLink::icon_path() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgJumpListLink.icon_path)
  return icon_path_.GetNoArena();
}
void CMsgJumpListLink::set_icon_path(const ::std::string& value) {
  set_has_icon_path();
  icon_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgJumpListLink.icon_path)
}
#if LANG_CXX11
void CMsgJumpListLink::set_icon_path(::std::string&& value) {
  set_has_icon_path();
  icon_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgJumpListLink.icon_path)
}
#endif
void CMsgJumpListLink::set_icon_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_icon_path();
  icon_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgJumpListLink.icon_path)
}
void CMsgJumpListLink::set_icon_path(const char* value, size_t size) {
  set_has_icon_path();
  icon_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgJumpListLink.icon_path)
}
::std::string* CMsgJumpListLink::mutable_icon_path() {
  set_has_icon_path();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgJumpListLink.icon_path)
  return icon_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgJumpListLink::release_icon_path() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgJumpListLink.icon_path)
  clear_has_icon_path();
  return icon_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgJumpListLink::set_allocated_icon_path(::std::string* icon_path) {
  if (icon_path != NULL) {
    set_has_icon_path();
  } else {
    clear_has_icon_path();
  }
  icon_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon_path);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgJumpListLink.icon_path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMSgJumpListMRUApp::kAppidFieldNumber;
const int CMSgJumpListMRUApp::kDisplayNameFieldNumber;
const int CMSgJumpListMRUApp::kUrlLinkFieldNumber;
const int CMSgJumpListMRUApp::kIconPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMSgJumpListMRUApp::CMSgJumpListMRUApp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMSgJumpListMRUApp)
}
CMSgJumpListMRUApp::CMSgJumpListMRUApp(const CMSgJumpListMRUApp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_display_name()) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  url_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url_link()) {
    url_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_link_);
  }
  icon_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_icon_path()) {
    icon_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_path_);
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMSgJumpListMRUApp)
}

void CMSgJumpListMRUApp::SharedCtor() {
  _cached_size_ = 0;
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_ = 0u;
}

CMSgJumpListMRUApp::~CMSgJumpListMRUApp() {
  // @@protoc_insertion_point(destructor:proto.steam.CMSgJumpListMRUApp)
  SharedDtor();
}

void CMSgJumpListMRUApp::SharedDtor() {
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMSgJumpListMRUApp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMSgJumpListMRUApp::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMSgJumpListMRUApp& CMSgJumpListMRUApp::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMSgJumpListMRUApp* CMSgJumpListMRUApp::New(::google::protobuf::Arena* arena) const {
  CMSgJumpListMRUApp* n = new CMSgJumpListMRUApp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMSgJumpListMRUApp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMSgJumpListMRUApp)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_display_name()) {
      GOOGLE_DCHECK(!display_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*display_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_url_link()) {
      GOOGLE_DCHECK(!url_link_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_link_.UnsafeRawStringPointer())->clear();
    }
    if (has_icon_path()) {
      GOOGLE_DCHECK(!icon_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*icon_path_.UnsafeRawStringPointer())->clear();
    }
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMSgJumpListMRUApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMSgJumpListMRUApp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string display_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMSgJumpListMRUApp.display_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url_link = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url_link().data(), this->url_link().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMSgJumpListMRUApp.url_link");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string icon_path = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon_path().data(), this->icon_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMSgJumpListMRUApp.icon_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMSgJumpListMRUApp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMSgJumpListMRUApp)
  return false;
#undef DO_
}

void CMSgJumpListMRUApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMSgJumpListMRUApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string display_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMSgJumpListMRUApp.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // optional string url_link = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_link().data(), this->url_link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMSgJumpListMRUApp.url_link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url_link(), output);
  }

  // optional string icon_path = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon_path().data(), this->icon_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMSgJumpListMRUApp.icon_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->icon_path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMSgJumpListMRUApp)
}

::google::protobuf::uint8* CMSgJumpListMRUApp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMSgJumpListMRUApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string display_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMSgJumpListMRUApp.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  // optional string url_link = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_link().data(), this->url_link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMSgJumpListMRUApp.url_link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url_link(), target);
  }

  // optional string icon_path = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon_path().data(), this->icon_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMSgJumpListMRUApp.icon_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->icon_path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMSgJumpListMRUApp)
  return target;
}

size_t CMSgJumpListMRUApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMSgJumpListMRUApp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string display_name = 2;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

    // optional string url_link = 3;
    if (has_url_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_link());
    }

    // optional string icon_path = 4;
    if (has_icon_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_path());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMSgJumpListMRUApp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMSgJumpListMRUApp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMSgJumpListMRUApp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMSgJumpListMRUApp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMSgJumpListMRUApp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMSgJumpListMRUApp)
    MergeFrom(*source);
  }
}

void CMSgJumpListMRUApp::MergeFrom(const CMSgJumpListMRUApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMSgJumpListMRUApp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_display_name();
      display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url_link();
      url_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_link_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_icon_path();
      icon_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_path_);
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMSgJumpListMRUApp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMSgJumpListMRUApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMSgJumpListMRUApp::CopyFrom(const CMSgJumpListMRUApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMSgJumpListMRUApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMSgJumpListMRUApp::IsInitialized() const {
  return true;
}

void CMSgJumpListMRUApp::Swap(CMSgJumpListMRUApp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMSgJumpListMRUApp::InternalSwap(CMSgJumpListMRUApp* other) {
  display_name_.Swap(&other->display_name_);
  url_link_.Swap(&other->url_link_);
  icon_path_.Swap(&other->icon_path_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMSgJumpListMRUApp::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMSgJumpListMRUApp

// optional uint32 appid = 1;
bool CMSgJumpListMRUApp::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMSgJumpListMRUApp::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
void CMSgJumpListMRUApp::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMSgJumpListMRUApp::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CMSgJumpListMRUApp::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMSgJumpListMRUApp.appid)
  return appid_;
}
void CMSgJumpListMRUApp::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMSgJumpListMRUApp.appid)
}

// optional string display_name = 2;
bool CMSgJumpListMRUApp::has_display_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMSgJumpListMRUApp::set_has_display_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMSgJumpListMRUApp::clear_has_display_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMSgJumpListMRUApp::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_display_name();
}
const ::std::string& CMSgJumpListMRUApp::display_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMSgJumpListMRUApp.display_name)
  return display_name_.GetNoArena();
}
void CMSgJumpListMRUApp::set_display_name(const ::std::string& value) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMSgJumpListMRUApp.display_name)
}
#if LANG_CXX11
void CMSgJumpListMRUApp::set_display_name(::std::string&& value) {
  set_has_display_name();
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMSgJumpListMRUApp.display_name)
}
#endif
void CMSgJumpListMRUApp::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMSgJumpListMRUApp.display_name)
}
void CMSgJumpListMRUApp::set_display_name(const char* value, size_t size) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMSgJumpListMRUApp.display_name)
}
::std::string* CMSgJumpListMRUApp::mutable_display_name() {
  set_has_display_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMSgJumpListMRUApp.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMSgJumpListMRUApp::release_display_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMSgJumpListMRUApp.display_name)
  clear_has_display_name();
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMSgJumpListMRUApp::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    set_has_display_name();
  } else {
    clear_has_display_name();
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMSgJumpListMRUApp.display_name)
}

// optional string url_link = 3;
bool CMSgJumpListMRUApp::has_url_link() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMSgJumpListMRUApp::set_has_url_link() {
  _has_bits_[0] |= 0x00000002u;
}
void CMSgJumpListMRUApp::clear_has_url_link() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMSgJumpListMRUApp::clear_url_link() {
  url_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url_link();
}
const ::std::string& CMSgJumpListMRUApp::url_link() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMSgJumpListMRUApp.url_link)
  return url_link_.GetNoArena();
}
void CMSgJumpListMRUApp::set_url_link(const ::std::string& value) {
  set_has_url_link();
  url_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMSgJumpListMRUApp.url_link)
}
#if LANG_CXX11
void CMSgJumpListMRUApp::set_url_link(::std::string&& value) {
  set_has_url_link();
  url_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMSgJumpListMRUApp.url_link)
}
#endif
void CMSgJumpListMRUApp::set_url_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url_link();
  url_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMSgJumpListMRUApp.url_link)
}
void CMSgJumpListMRUApp::set_url_link(const char* value, size_t size) {
  set_has_url_link();
  url_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMSgJumpListMRUApp.url_link)
}
::std::string* CMSgJumpListMRUApp::mutable_url_link() {
  set_has_url_link();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMSgJumpListMRUApp.url_link)
  return url_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMSgJumpListMRUApp::release_url_link() {
  // @@protoc_insertion_point(field_release:proto.steam.CMSgJumpListMRUApp.url_link)
  clear_has_url_link();
  return url_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMSgJumpListMRUApp::set_allocated_url_link(::std::string* url_link) {
  if (url_link != NULL) {
    set_has_url_link();
  } else {
    clear_has_url_link();
  }
  url_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url_link);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMSgJumpListMRUApp.url_link)
}

// optional string icon_path = 4;
bool CMSgJumpListMRUApp::has_icon_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMSgJumpListMRUApp::set_has_icon_path() {
  _has_bits_[0] |= 0x00000004u;
}
void CMSgJumpListMRUApp::clear_has_icon_path() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMSgJumpListMRUApp::clear_icon_path() {
  icon_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_icon_path();
}
const ::std::string& CMSgJumpListMRUApp::icon_path() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMSgJumpListMRUApp.icon_path)
  return icon_path_.GetNoArena();
}
void CMSgJumpListMRUApp::set_icon_path(const ::std::string& value) {
  set_has_icon_path();
  icon_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMSgJumpListMRUApp.icon_path)
}
#if LANG_CXX11
void CMSgJumpListMRUApp::set_icon_path(::std::string&& value) {
  set_has_icon_path();
  icon_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMSgJumpListMRUApp.icon_path)
}
#endif
void CMSgJumpListMRUApp::set_icon_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_icon_path();
  icon_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMSgJumpListMRUApp.icon_path)
}
void CMSgJumpListMRUApp::set_icon_path(const char* value, size_t size) {
  set_has_icon_path();
  icon_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMSgJumpListMRUApp.icon_path)
}
::std::string* CMSgJumpListMRUApp::mutable_icon_path() {
  set_has_icon_path();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMSgJumpListMRUApp.icon_path)
  return icon_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMSgJumpListMRUApp::release_icon_path() {
  // @@protoc_insertion_point(field_release:proto.steam.CMSgJumpListMRUApp.icon_path)
  clear_has_icon_path();
  return icon_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMSgJumpListMRUApp::set_allocated_icon_path(::std::string* icon_path) {
  if (icon_path != NULL) {
    set_has_icon_path();
  } else {
    clear_has_icon_path();
  }
  icon_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon_path);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMSgJumpListMRUApp.icon_path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetJumpList::kSteamPathFieldNumber;
const int CMsgSetJumpList::kMruTitleFieldNumber;
const int CMsgSetJumpList::kAppsFieldNumber;
const int CMsgSetJumpList::kLinksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetJumpList::CMsgSetJumpList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_htmlmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetJumpList)
}
CMsgSetJumpList::CMsgSetJumpList(const CMsgSetJumpList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      apps_(from.apps_),
      links_(from.links_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steam_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_steam_path()) {
    steam_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steam_path_);
  }
  mru_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mru_title()) {
    mru_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mru_title_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetJumpList)
}

void CMsgSetJumpList::SharedCtor() {
  _cached_size_ = 0;
  steam_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mru_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgSetJumpList::~CMsgSetJumpList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetJumpList)
  SharedDtor();
}

void CMsgSetJumpList::SharedDtor() {
  steam_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mru_title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSetJumpList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetJumpList::descriptor() {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSetJumpList& CMsgSetJumpList::default_instance() {
  protobuf_htmlmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSetJumpList* CMsgSetJumpList::New(::google::protobuf::Arena* arena) const {
  CMsgSetJumpList* n = new CMsgSetJumpList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSetJumpList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetJumpList)
  apps_.Clear();
  links_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_steam_path()) {
      GOOGLE_DCHECK(!steam_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*steam_path_.UnsafeRawStringPointer())->clear();
    }
    if (has_mru_title()) {
      GOOGLE_DCHECK(!mru_title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mru_title_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSetJumpList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetJumpList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string steam_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steam_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->steam_path().data(), this->steam_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetJumpList.steam_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mru_title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mru_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mru_title().data(), this->mru_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetJumpList.mru_title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMSgJumpListMRUApp apps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgJumpListLink links = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetJumpList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetJumpList)
  return false;
#undef DO_
}

void CMsgSetJumpList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetJumpList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string steam_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->steam_path().data(), this->steam_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetJumpList.steam_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->steam_path(), output);
  }

  // optional string mru_title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mru_title().data(), this->mru_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetJumpList.mru_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mru_title(), output);
  }

  // repeated .proto.steam.CMSgJumpListMRUApp apps = 3;
  for (unsigned int i = 0, n = this->apps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->apps(i), output);
  }

  // repeated .proto.steam.CMsgJumpListLink links = 4;
  for (unsigned int i = 0, n = this->links_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->links(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetJumpList)
}

::google::protobuf::uint8* CMsgSetJumpList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetJumpList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string steam_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->steam_path().data(), this->steam_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetJumpList.steam_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->steam_path(), target);
  }

  // optional string mru_title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mru_title().data(), this->mru_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetJumpList.mru_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mru_title(), target);
  }

  // repeated .proto.steam.CMSgJumpListMRUApp apps = 3;
  for (unsigned int i = 0, n = this->apps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->apps(i), deterministic, target);
  }

  // repeated .proto.steam.CMsgJumpListLink links = 4;
  for (unsigned int i = 0, n = this->links_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->links(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetJumpList)
  return target;
}

size_t CMsgSetJumpList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetJumpList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMSgJumpListMRUApp apps = 3;
  {
    unsigned int count = this->apps_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->apps(i));
    }
  }

  // repeated .proto.steam.CMsgJumpListLink links = 4;
  {
    unsigned int count = this->links_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->links(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string steam_path = 1;
    if (has_steam_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steam_path());
    }

    // optional string mru_title = 2;
    if (has_mru_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mru_title());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetJumpList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetJumpList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetJumpList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSetJumpList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetJumpList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetJumpList)
    MergeFrom(*source);
  }
}

void CMsgSetJumpList::MergeFrom(const CMsgSetJumpList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetJumpList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  links_.MergeFrom(from.links_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_steam_path();
      steam_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steam_path_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mru_title();
      mru_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mru_title_);
    }
  }
}

void CMsgSetJumpList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetJumpList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetJumpList::CopyFrom(const CMsgSetJumpList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetJumpList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetJumpList::IsInitialized() const {
  return true;
}

void CMsgSetJumpList::Swap(CMsgSetJumpList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetJumpList::InternalSwap(CMsgSetJumpList* other) {
  apps_.InternalSwap(&other->apps_);
  links_.InternalSwap(&other->links_);
  steam_path_.Swap(&other->steam_path_);
  mru_title_.Swap(&other->mru_title_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSetJumpList::GetMetadata() const {
  protobuf_htmlmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_htmlmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSetJumpList

// optional string steam_path = 1;
bool CMsgSetJumpList::has_steam_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSetJumpList::set_has_steam_path() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSetJumpList::clear_has_steam_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSetJumpList::clear_steam_path() {
  steam_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_steam_path();
}
const ::std::string& CMsgSetJumpList::steam_path() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetJumpList.steam_path)
  return steam_path_.GetNoArena();
}
void CMsgSetJumpList::set_steam_path(const ::std::string& value) {
  set_has_steam_path();
  steam_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetJumpList.steam_path)
}
#if LANG_CXX11
void CMsgSetJumpList::set_steam_path(::std::string&& value) {
  set_has_steam_path();
  steam_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSetJumpList.steam_path)
}
#endif
void CMsgSetJumpList::set_steam_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_steam_path();
  steam_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSetJumpList.steam_path)
}
void CMsgSetJumpList::set_steam_path(const char* value, size_t size) {
  set_has_steam_path();
  steam_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSetJumpList.steam_path)
}
::std::string* CMsgSetJumpList::mutable_steam_path() {
  set_has_steam_path();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSetJumpList.steam_path)
  return steam_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSetJumpList::release_steam_path() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSetJumpList.steam_path)
  clear_has_steam_path();
  return steam_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSetJumpList::set_allocated_steam_path(::std::string* steam_path) {
  if (steam_path != NULL) {
    set_has_steam_path();
  } else {
    clear_has_steam_path();
  }
  steam_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), steam_path);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSetJumpList.steam_path)
}

// optional string mru_title = 2;
bool CMsgSetJumpList::has_mru_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSetJumpList::set_has_mru_title() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSetJumpList::clear_has_mru_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSetJumpList::clear_mru_title() {
  mru_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mru_title();
}
const ::std::string& CMsgSetJumpList::mru_title() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetJumpList.mru_title)
  return mru_title_.GetNoArena();
}
void CMsgSetJumpList::set_mru_title(const ::std::string& value) {
  set_has_mru_title();
  mru_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSetJumpList.mru_title)
}
#if LANG_CXX11
void CMsgSetJumpList::set_mru_title(::std::string&& value) {
  set_has_mru_title();
  mru_title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSetJumpList.mru_title)
}
#endif
void CMsgSetJumpList::set_mru_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mru_title();
  mru_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSetJumpList.mru_title)
}
void CMsgSetJumpList::set_mru_title(const char* value, size_t size) {
  set_has_mru_title();
  mru_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSetJumpList.mru_title)
}
::std::string* CMsgSetJumpList::mutable_mru_title() {
  set_has_mru_title();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSetJumpList.mru_title)
  return mru_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSetJumpList::release_mru_title() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSetJumpList.mru_title)
  clear_has_mru_title();
  return mru_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSetJumpList::set_allocated_mru_title(::std::string* mru_title) {
  if (mru_title != NULL) {
    set_has_mru_title();
  } else {
    clear_has_mru_title();
  }
  mru_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mru_title);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSetJumpList.mru_title)
}

// repeated .proto.steam.CMSgJumpListMRUApp apps = 3;
int CMsgSetJumpList::apps_size() const {
  return apps_.size();
}
void CMsgSetJumpList::clear_apps() {
  apps_.Clear();
}
const ::proto::steam::CMSgJumpListMRUApp& CMsgSetJumpList::apps(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetJumpList.apps)
  return apps_.Get(index);
}
::proto::steam::CMSgJumpListMRUApp* CMsgSetJumpList::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSetJumpList.apps)
  return apps_.Mutable(index);
}
::proto::steam::CMSgJumpListMRUApp* CMsgSetJumpList::add_apps() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSetJumpList.apps)
  return apps_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMSgJumpListMRUApp >*
CMsgSetJumpList::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSetJumpList.apps)
  return &apps_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMSgJumpListMRUApp >&
CMsgSetJumpList::apps() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSetJumpList.apps)
  return apps_;
}

// repeated .proto.steam.CMsgJumpListLink links = 4;
int CMsgSetJumpList::links_size() const {
  return links_.size();
}
void CMsgSetJumpList::clear_links() {
  links_.Clear();
}
const ::proto::steam::CMsgJumpListLink& CMsgSetJumpList::links(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSetJumpList.links)
  return links_.Get(index);
}
::proto::steam::CMsgJumpListLink* CMsgSetJumpList::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSetJumpList.links)
  return links_.Mutable(index);
}
::proto::steam::CMsgJumpListLink* CMsgSetJumpList::add_links() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSetJumpList.links)
  return links_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgJumpListLink >*
CMsgSetJumpList::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSetJumpList.links)
  return &links_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgJumpListLink >&
CMsgSetJumpList::links() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSetJumpList.links)
  return links_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
