// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_inventory.steamclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_inventory.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CInventory_GetInventory_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CInventory_GetInventory_Request> {
} _CInventory_GetInventory_Request_default_instance_;
class CInventory_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CInventory_Response> {
} _CInventory_Response_default_instance_;
class CInventory_ExchangeItem_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CInventory_ExchangeItem_Request> {
} _CInventory_ExchangeItem_Request_default_instance_;
class CInventory_GetEligiblePromoItemDefIDs_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CInventory_GetEligiblePromoItemDefIDs_Request> {
} _CInventory_GetEligiblePromoItemDefIDs_Request_default_instance_;
class CInventory_GetEligiblePromoItemDefIDs_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CInventory_GetEligiblePromoItemDefIDs_Response> {
} _CInventory_GetEligiblePromoItemDefIDs_Response_default_instance_;
class CInventory_AddItem_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CInventory_AddItem_Request> {
} _CInventory_AddItem_Request_default_instance_;
class CInventory_SafeModifyItem_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CInventory_SafeModifyItem_Request> {
} _CInventory_SafeModifyItem_Request_default_instance_;
class CInventory_ConsumePlaytime_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CInventory_ConsumePlaytime_Request> {
} _CInventory_ConsumePlaytime_Request_default_instance_;
class CInventory_ConsumeItem_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CInventory_ConsumeItem_Request> {
} _CInventory_ConsumeItem_Request_default_instance_;
class CInventory_DevSetNextDrop_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CInventory_DevSetNextDrop_Request> {
} _CInventory_DevSetNextDrop_Request_default_instance_;
class CInventory_SplitItemStack_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CInventory_SplitItemStack_Request> {
} _CInventory_SplitItemStack_Request_default_instance_;
class CInventory_CombineItemStacks_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CInventory_CombineItemStacks_Request> {
} _CInventory_CombineItemStacks_Request_default_instance_;
class CInventory_GetItemDefMeta_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CInventory_GetItemDefMeta_Request> {
} _CInventory_GetItemDefMeta_Request_default_instance_;
class CInventory_GetItemDefMeta_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CInventory_GetItemDefMeta_Response> {
} _CInventory_GetItemDefMeta_Response_default_instance_;

namespace protobuf_steammessages_5finventory_2esteamclient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[14];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_GetInventory_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_GetInventory_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_GetInventory_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_GetInventory_Request, steamid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_Response, etag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_Response, removeditemids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_Response, item_json_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_Response, itemdef_json_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_Response, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_Response, replayed_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_ExchangeItem_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_ExchangeItem_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_ExchangeItem_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_ExchangeItem_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_ExchangeItem_Request, materialsitemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_ExchangeItem_Request, materialsquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_ExchangeItem_Request, outputitemdefid_),
  2,
  0,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_GetEligiblePromoItemDefIDs_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_GetEligiblePromoItemDefIDs_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_GetEligiblePromoItemDefIDs_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_GetEligiblePromoItemDefIDs_Request, steamid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_GetEligiblePromoItemDefIDs_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_GetEligiblePromoItemDefIDs_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_GetEligiblePromoItemDefIDs_Response, itemdefids_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_AddItem_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_AddItem_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_AddItem_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_AddItem_Request, itemdefid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_AddItem_Request, itempropsjson_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_AddItem_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_AddItem_Request, notify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_AddItem_Request, requestid_),
  0,
  ~0u,
  ~0u,
  2,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_SafeModifyItem_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_SafeModifyItem_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_SafeModifyItem_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_SafeModifyItem_Request, acctid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_SafeModifyItem_Request, itemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_SafeModifyItem_Request, itempropsjson_),
  3,
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_ConsumePlaytime_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_ConsumePlaytime_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_ConsumePlaytime_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_ConsumePlaytime_Request, itemdefid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_ConsumeItem_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_ConsumeItem_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_ConsumeItem_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_ConsumeItem_Request, itemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_ConsumeItem_Request, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_ConsumeItem_Request, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_ConsumeItem_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_ConsumeItem_Request, requestid_),
  2,
  1,
  3,
  0,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_DevSetNextDrop_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_DevSetNextDrop_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_DevSetNextDrop_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_DevSetNextDrop_Request, itemdefid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_DevSetNextDrop_Request, droptime_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_SplitItemStack_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_SplitItemStack_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_SplitItemStack_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_SplitItemStack_Request, itemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_SplitItemStack_Request, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_SplitItemStack_Request, timestamp_),
  2,
  1,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_CombineItemStacks_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_CombineItemStacks_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_CombineItemStacks_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_CombineItemStacks_Request, fromitemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_CombineItemStacks_Request, destitemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_CombineItemStacks_Request, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_CombineItemStacks_Request, fromtimestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_CombineItemStacks_Request, desttimestamp_),
  3,
  2,
  5,
  4,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_GetItemDefMeta_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_GetItemDefMeta_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_GetItemDefMeta_Request, appid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_GetItemDefMeta_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_GetItemDefMeta_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_GetItemDefMeta_Response, modified_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CInventory_GetItemDefMeta_Response, digest_),
  1,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(CInventory_GetInventory_Request)},
  { 9, 20, sizeof(CInventory_Response)},
  { 26, 36, sizeof(CInventory_ExchangeItem_Request)},
  { 41, 48, sizeof(CInventory_GetEligiblePromoItemDefIDs_Request)},
  { 50, 56, sizeof(CInventory_GetEligiblePromoItemDefIDs_Response)},
  { 57, 68, sizeof(CInventory_AddItem_Request)},
  { 74, 83, sizeof(CInventory_SafeModifyItem_Request)},
  { 87, 94, sizeof(CInventory_ConsumePlaytime_Request)},
  { 96, 107, sizeof(CInventory_ConsumeItem_Request)},
  { 113, 121, sizeof(CInventory_DevSetNextDrop_Request)},
  { 124, 133, sizeof(CInventory_SplitItemStack_Request)},
  { 137, 148, sizeof(CInventory_CombineItemStacks_Request)},
  { 154, 160, sizeof(CInventory_GetItemDefMeta_Request)},
  { 161, 168, sizeof(CInventory_GetItemDefMeta_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CInventory_GetInventory_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CInventory_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CInventory_ExchangeItem_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CInventory_GetEligiblePromoItemDefIDs_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CInventory_GetEligiblePromoItemDefIDs_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CInventory_AddItem_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CInventory_SafeModifyItem_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CInventory_ConsumePlaytime_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CInventory_ConsumeItem_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CInventory_DevSetNextDrop_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CInventory_SplitItemStack_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CInventory_CombineItemStacks_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CInventory_GetItemDefMeta_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CInventory_GetItemDefMeta_Response_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_inventory.steamclient.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

}  // namespace

void TableStruct::Shutdown() {
  _CInventory_GetInventory_Request_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CInventory_Response_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CInventory_ExchangeItem_Request_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CInventory_GetEligiblePromoItemDefIDs_Request_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CInventory_GetEligiblePromoItemDefIDs_Response_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CInventory_AddItem_Request_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CInventory_SafeModifyItem_Request_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CInventory_ConsumePlaytime_Request_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CInventory_ConsumeItem_Request_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CInventory_DevSetNextDrop_Request_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CInventory_SplitItemStack_Request_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CInventory_CombineItemStacks_Request_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CInventory_GetItemDefMeta_Request_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CInventory_GetItemDefMeta_Response_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::InitDefaults();
  _CInventory_GetInventory_Request_default_instance_.DefaultConstruct();
  _CInventory_Response_default_instance_.DefaultConstruct();
  _CInventory_ExchangeItem_Request_default_instance_.DefaultConstruct();
  _CInventory_GetEligiblePromoItemDefIDs_Request_default_instance_.DefaultConstruct();
  _CInventory_GetEligiblePromoItemDefIDs_Response_default_instance_.DefaultConstruct();
  _CInventory_AddItem_Request_default_instance_.DefaultConstruct();
  _CInventory_SafeModifyItem_Request_default_instance_.DefaultConstruct();
  _CInventory_ConsumePlaytime_Request_default_instance_.DefaultConstruct();
  _CInventory_ConsumeItem_Request_default_instance_.DefaultConstruct();
  _CInventory_DevSetNextDrop_Request_default_instance_.DefaultConstruct();
  _CInventory_SplitItemStack_Request_default_instance_.DefaultConstruct();
  _CInventory_CombineItemStacks_Request_default_instance_.DefaultConstruct();
  _CInventory_GetItemDefMeta_Request_default_instance_.DefaultConstruct();
  _CInventory_GetItemDefMeta_Response_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n)steammessages_inventory.steamclient.pr"
      "oto\022\013proto.steam\032,steammessages_unified_"
      "base.steamclient.proto\"A\n\037CInventory_Get"
      "Inventory_Request\022\r\n\005appid\030\001 \001(\r\022\017\n\007stea"
      "mid\030\002 \001(\004\"\277\001\n\023CInventory_Response\022\014\n\004eta"
      "g\030\001 \001(\t\022\026\n\016removeditemids\030\002 \003(\004\022\021\n\titem_"
      "json\030\003 \001(\t\022\024\n\014itemdef_json\030\004 \001(\t\022\016\n\006tick"
      "et\030\005 \001(\014\022I\n\010replayed\030\006 \001(\010B7\202\265\0303If true,"
      " the requestid given was processed earli"
      "er.\"\216\001\n\037CInventory_ExchangeItem_Request\022"
      "\r\n\005appid\030\001 \001(\r\022\017\n\007steamid\030\002 \001(\004\022\027\n\017mater"
      "ialsitemid\030\003 \003(\004\022\031\n\021materialsquantity\030\004 "
      "\003(\r\022\027\n\017outputitemdefid\030\005 \001(\004\"O\n-CInvento"
      "ry_GetEligiblePromoItemDefIDs_Request\022\r\n"
      "\005appid\030\001 \001(\r\022\017\n\007steamid\030\002 \001(\004\"D\n.CInvent"
      "ory_GetEligiblePromoItemDefIDs_Response\022"
      "\022\n\nitemdefids\030\001 \003(\004\"\327\001\n\032CInventory_AddIt"
      "em_Request\022\r\n\005appid\030\001 \001(\r\022\021\n\titemdefid\030\002"
      " \003(\004\022\025\n\ritempropsjson\030\003 \003(\t\022\017\n\007steamid\030\004"
      " \001(\004\022\\\n\006notify\030\005 \001(\010BL\202\265\030HShould notify "
      "the user that the item was added to thei"
      "r Steam Inventory.\022\021\n\trequestid\030\006 \001(\004\"i\n"
      "!CInventory_SafeModifyItem_Request\022\r\n\005ap"
      "pid\030\001 \001(\r\022\016\n\006acctid\030\002 \001(\004\022\016\n\006itemid\030\003 \001("
      "\004\022\025\n\ritempropsjson\030\004 \001(\t\"F\n\"CInventory_C"
      "onsumePlaytime_Request\022\r\n\005appid\030\001 \001(\r\022\021\n"
      "\titemdefid\030\002 \001(\004\"\210\001\n\036CInventory_ConsumeI"
      "tem_Request\022\r\n\005appid\030\001 \001(\r\022\016\n\006itemid\030\002 \001"
      "(\004\022\020\n\010quantity\030\003 \001(\r\022\021\n\ttimestamp\030\004 \001(\t\022"
      "\017\n\007steamid\030\005 \001(\004\022\021\n\trequestid\030\006 \001(\004\"W\n!C"
      "Inventory_DevSetNextDrop_Request\022\r\n\005appi"
      "d\030\001 \001(\r\022\021\n\titemdefid\030\002 \001(\004\022\020\n\010droptime\030\003"
      " \001(\t\"g\n!CInventory_SplitItemStack_Reques"
      "t\022\r\n\005appid\030\001 \001(\r\022\016\n\006itemid\030\002 \001(\004\022\020\n\010quan"
      "tity\030\003 \001(\r\022\021\n\ttimestamp\030\004 \001(\t\"\235\001\n$CInven"
      "tory_CombineItemStacks_Request\022\r\n\005appid\030"
      "\001 \001(\r\022\022\n\nfromitemid\030\002 \001(\004\022\022\n\ndestitemid\030"
      "\003 \001(\004\022\020\n\010quantity\030\004 \001(\r\022\025\n\rfromtimestamp"
      "\030\005 \001(\t\022\025\n\rdesttimestamp\030\006 \001(\t\"2\n!CInvent"
      "ory_GetItemDefMeta_Request\022\r\n\005appid\030\001 \001("
      "\r\"F\n\"CInventory_GetItemDefMeta_Response\022"
      "\020\n\010modified\030\001 \001(\r\022\016\n\006digest\030\002 \001(\t2\312\016\n\tIn"
      "ventory\022\222\001\n\014GetInventory\022,.proto.steam.C"
      "Inventory_GetInventory_Request\032 .proto.s"
      "team.CInventory_Response\"2\202\265\030.Retrieves "
      "a users inventory as a big JSON blob\022\207\001\n"
      "\014ExchangeItem\022,.proto.steam.CInventory_E"
      "xchangeItem_Request\032 .proto.steam.CInven"
      "tory_Response\"\'\202\265\030#Craft an item in a us"
      "er\'s inventory\022\325\001\n\032GetEligiblePromoItemD"
      "efIDs\022:.proto.steam.CInventory_GetEligib"
      "lePromoItemDefIDs_Request\032;.proto.steam."
      "CInventory_GetEligiblePromoItemDefIDs_Re"
      "sponse\">\202\265\030:Returns a list of promo item"
      " defs the user is eligible for\022\206\001\n\014AddPr"
      "omoItem\022\'.proto.steam.CInventory_AddItem"
      "_Request\032 .proto.steam.CInventory_Respon"
      "se\"+\202\265\030\'Adds a promo item to a user\'s in"
      "ventory\022\243\001\n\016SafeModifyItem\022..proto.steam"
      ".CInventory_SafeModifyItem_Request\032 .pro"
      "to.steam.CInventory_Response\"\?\202\265\030;Modify"
      " an item in a user\'s inventory (safe pro"
      "perties only)\022\237\001\n\017ConsumePlaytime\022/.prot"
      "o.steam.CInventory_ConsumePlaytime_Reque"
      "st\032 .proto.steam.CInventory_Response\"9\202\265"
      "\0305Consumes playtime and possibly returns"
      " a granted item\022q\n\013ConsumeItem\022+.proto.s"
      "team.CInventory_ConsumeItem_Request\032 .pr"
      "oto.steam.CInventory_Response\"\023\202\265\030\017Consu"
      "me an item\022\206\001\n\017DevGenerateItem\022\'.proto.s"
      "team.CInventory_AddItem_Request\032 .proto."
      "steam.CInventory_Response\"(\202\265\030$Grant an "
      "item when in developer mode\022w\n\016DevSetNex"
      "tDrop\022..proto.steam.CInventory_DevSetNex"
      "tDrop_Request\032 .proto.steam.CInventory_R"
      "esponse\"\023\202\265\030\017Consume an item\022\213\001\n\016SplitIt"
      "emStack\022..proto.steam.CInventory_SplitIt"
      "emStack_Request\032 .proto.steam.CInventory"
      "_Response\"\'\202\265\030#Split an item stack into "
      "two stacks\022\211\001\n\021CombineItemStacks\0221.proto"
      ".steam.CInventory_CombineItemStacks_Requ"
      "est\032 .proto.steam.CInventory_Response\"\037\202"
      "\265\030\033Combine two stacks of items\022\264\001\n\016GetIt"
      "emDefMeta\022..proto.steam.CInventory_GetIt"
      "emDefMeta_Request\032/.proto.steam.CInvento"
      "ry_GetItemDefMeta_Response\"A\202\265\030=Get meta"
      "data about the current item definition f"
      "or this game.\032/\202\265\030+A service that provid"
      "es access to inventoryB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3547);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_inventory.steamclient.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5finventory_2esteamclient_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_GetInventory_Request::kAppidFieldNumber;
const int CInventory_GetInventory_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_GetInventory_Request::CInventory_GetInventory_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_GetInventory_Request)
}
CInventory_GetInventory_Request::CInventory_GetInventory_Request(const CInventory_GetInventory_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_GetInventory_Request)
}

void CInventory_GetInventory_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
}

CInventory_GetInventory_Request::~CInventory_GetInventory_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_GetInventory_Request)
  SharedDtor();
}

void CInventory_GetInventory_Request::SharedDtor() {
}

void CInventory_GetInventory_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CInventory_GetInventory_Request::descriptor() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CInventory_GetInventory_Request& CInventory_GetInventory_Request::default_instance() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CInventory_GetInventory_Request* CInventory_GetInventory_Request::New(::google::protobuf::Arena* arena) const {
  CInventory_GetInventory_Request* n = new CInventory_GetInventory_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CInventory_GetInventory_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_GetInventory_Request)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CInventory_GetInventory_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_GetInventory_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_GetInventory_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_GetInventory_Request)
  return false;
#undef DO_
}

void CInventory_GetInventory_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_GetInventory_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_GetInventory_Request)
}

::google::protobuf::uint8* CInventory_GetInventory_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_GetInventory_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_GetInventory_Request)
  return target;
}

size_t CInventory_GetInventory_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_GetInventory_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 steamid = 2;
    if (has_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steamid());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CInventory_GetInventory_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_GetInventory_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_GetInventory_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CInventory_GetInventory_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_GetInventory_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_GetInventory_Request)
    MergeFrom(*source);
  }
}

void CInventory_GetInventory_Request::MergeFrom(const CInventory_GetInventory_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_GetInventory_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_GetInventory_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_GetInventory_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_GetInventory_Request::CopyFrom(const CInventory_GetInventory_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_GetInventory_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_GetInventory_Request::IsInitialized() const {
  return true;
}

void CInventory_GetInventory_Request::Swap(CInventory_GetInventory_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_GetInventory_Request::InternalSwap(CInventory_GetInventory_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CInventory_GetInventory_Request::GetMetadata() const {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CInventory_GetInventory_Request

// optional uint32 appid = 1;
bool CInventory_GetInventory_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CInventory_GetInventory_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CInventory_GetInventory_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CInventory_GetInventory_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CInventory_GetInventory_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_GetInventory_Request.appid)
  return appid_;
}
void CInventory_GetInventory_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_GetInventory_Request.appid)
}

// optional uint64 steamid = 2;
bool CInventory_GetInventory_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CInventory_GetInventory_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CInventory_GetInventory_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CInventory_GetInventory_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CInventory_GetInventory_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_GetInventory_Request.steamid)
  return steamid_;
}
void CInventory_GetInventory_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_GetInventory_Request.steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_Response::kEtagFieldNumber;
const int CInventory_Response::kRemoveditemidsFieldNumber;
const int CInventory_Response::kItemJsonFieldNumber;
const int CInventory_Response::kItemdefJsonFieldNumber;
const int CInventory_Response::kTicketFieldNumber;
const int CInventory_Response::kReplayedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_Response::CInventory_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_Response)
}
CInventory_Response::CInventory_Response(const CInventory_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      removeditemids_(from.removeditemids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  etag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_etag()) {
    etag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.etag_);
  }
  item_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_item_json()) {
    item_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_json_);
  }
  itemdef_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_itemdef_json()) {
    itemdef_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.itemdef_json_);
  }
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  replayed_ = from.replayed_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_Response)
}

void CInventory_Response::SharedCtor() {
  _cached_size_ = 0;
  etag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itemdef_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  replayed_ = false;
}

CInventory_Response::~CInventory_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_Response)
  SharedDtor();
}

void CInventory_Response::SharedDtor() {
  etag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itemdef_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CInventory_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CInventory_Response::descriptor() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CInventory_Response& CInventory_Response::default_instance() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CInventory_Response* CInventory_Response::New(::google::protobuf::Arena* arena) const {
  CInventory_Response* n = new CInventory_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CInventory_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_Response)
  removeditemids_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_etag()) {
      GOOGLE_DCHECK(!etag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*etag_.UnsafeRawStringPointer())->clear();
    }
    if (has_item_json()) {
      GOOGLE_DCHECK(!item_json_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*item_json_.UnsafeRawStringPointer())->clear();
    }
    if (has_itemdef_json()) {
      GOOGLE_DCHECK(!itemdef_json_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*itemdef_json_.UnsafeRawStringPointer())->clear();
    }
    if (has_ticket()) {
      GOOGLE_DCHECK(!ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ticket_.UnsafeRawStringPointer())->clear();
    }
  }
  replayed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CInventory_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string etag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_etag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->etag().data(), this->etag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CInventory_Response.etag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 removeditemids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_removeditemids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_removeditemids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string item_json = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_json()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->item_json().data(), this->item_json().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CInventory_Response.item_json");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string itemdef_json = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemdef_json()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemdef_json().data(), this->itemdef_json().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CInventory_Response.itemdef_json");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ticket = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool replayed = 6 [(.proto.steam.description) = "If true, the requestid given was processed earlier."];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_replayed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &replayed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_Response)
  return false;
#undef DO_
}

void CInventory_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string etag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->etag().data(), this->etag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_Response.etag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->etag(), output);
  }

  // repeated uint64 removeditemids = 2;
  for (int i = 0, n = this->removeditemids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->removeditemids(i), output);
  }

  // optional string item_json = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_json().data(), this->item_json().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_Response.item_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->item_json(), output);
  }

  // optional string itemdef_json = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemdef_json().data(), this->itemdef_json().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_Response.itemdef_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->itemdef_json(), output);
  }

  // optional bytes ticket = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->ticket(), output);
  }

  // optional bool replayed = 6 [(.proto.steam.description) = "If true, the requestid given was processed earlier."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->replayed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_Response)
}

::google::protobuf::uint8* CInventory_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string etag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->etag().data(), this->etag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_Response.etag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->etag(), target);
  }

  // repeated uint64 removeditemids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->removeditemids_, target);

  // optional string item_json = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_json().data(), this->item_json().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_Response.item_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->item_json(), target);
  }

  // optional string itemdef_json = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemdef_json().data(), this->itemdef_json().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_Response.itemdef_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->itemdef_json(), target);
  }

  // optional bytes ticket = 5;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->ticket(), target);
  }

  // optional bool replayed = 6 [(.proto.steam.description) = "If true, the requestid given was processed earlier."];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->replayed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_Response)
  return target;
}

size_t CInventory_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint64 removeditemids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->removeditemids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->removeditemids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string etag = 1;
    if (has_etag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->etag());
    }

    // optional string item_json = 3;
    if (has_item_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_json());
    }

    // optional string itemdef_json = 4;
    if (has_itemdef_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemdef_json());
    }

    // optional bytes ticket = 5;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ticket());
    }

    // optional bool replayed = 6 [(.proto.steam.description) = "If true, the requestid given was processed earlier."];
    if (has_replayed()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CInventory_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CInventory_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_Response)
    MergeFrom(*source);
  }
}

void CInventory_Response::MergeFrom(const CInventory_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  removeditemids_.MergeFrom(from.removeditemids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_etag();
      etag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.etag_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_item_json();
      item_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_json_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_itemdef_json();
      itemdef_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.itemdef_json_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_ticket();
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000010u) {
      replayed_ = from.replayed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_Response::CopyFrom(const CInventory_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_Response::IsInitialized() const {
  return true;
}

void CInventory_Response::Swap(CInventory_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_Response::InternalSwap(CInventory_Response* other) {
  removeditemids_.InternalSwap(&other->removeditemids_);
  etag_.Swap(&other->etag_);
  item_json_.Swap(&other->item_json_);
  itemdef_json_.Swap(&other->itemdef_json_);
  ticket_.Swap(&other->ticket_);
  std::swap(replayed_, other->replayed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CInventory_Response::GetMetadata() const {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CInventory_Response

// optional string etag = 1;
bool CInventory_Response::has_etag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CInventory_Response::set_has_etag() {
  _has_bits_[0] |= 0x00000001u;
}
void CInventory_Response::clear_has_etag() {
  _has_bits_[0] &= ~0x00000001u;
}
void CInventory_Response::clear_etag() {
  etag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_etag();
}
const ::std::string& CInventory_Response::etag() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_Response.etag)
  return etag_.GetNoArena();
}
void CInventory_Response::set_etag(const ::std::string& value) {
  set_has_etag();
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_Response.etag)
}
#if LANG_CXX11
void CInventory_Response::set_etag(::std::string&& value) {
  set_has_etag();
  etag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CInventory_Response.etag)
}
#endif
void CInventory_Response::set_etag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_etag();
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CInventory_Response.etag)
}
void CInventory_Response::set_etag(const char* value, size_t size) {
  set_has_etag();
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CInventory_Response.etag)
}
::std::string* CInventory_Response::mutable_etag() {
  set_has_etag();
  // @@protoc_insertion_point(field_mutable:proto.steam.CInventory_Response.etag)
  return etag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CInventory_Response::release_etag() {
  // @@protoc_insertion_point(field_release:proto.steam.CInventory_Response.etag)
  clear_has_etag();
  return etag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CInventory_Response::set_allocated_etag(::std::string* etag) {
  if (etag != NULL) {
    set_has_etag();
  } else {
    clear_has_etag();
  }
  etag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), etag);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CInventory_Response.etag)
}

// repeated uint64 removeditemids = 2;
int CInventory_Response::removeditemids_size() const {
  return removeditemids_.size();
}
void CInventory_Response::clear_removeditemids() {
  removeditemids_.Clear();
}
::google::protobuf::uint64 CInventory_Response::removeditemids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_Response.removeditemids)
  return removeditemids_.Get(index);
}
void CInventory_Response::set_removeditemids(int index, ::google::protobuf::uint64 value) {
  removeditemids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_Response.removeditemids)
}
void CInventory_Response::add_removeditemids(::google::protobuf::uint64 value) {
  removeditemids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CInventory_Response.removeditemids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CInventory_Response::removeditemids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CInventory_Response.removeditemids)
  return removeditemids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CInventory_Response::mutable_removeditemids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CInventory_Response.removeditemids)
  return &removeditemids_;
}

// optional string item_json = 3;
bool CInventory_Response::has_item_json() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CInventory_Response::set_has_item_json() {
  _has_bits_[0] |= 0x00000002u;
}
void CInventory_Response::clear_has_item_json() {
  _has_bits_[0] &= ~0x00000002u;
}
void CInventory_Response::clear_item_json() {
  item_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_item_json();
}
const ::std::string& CInventory_Response::item_json() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_Response.item_json)
  return item_json_.GetNoArena();
}
void CInventory_Response::set_item_json(const ::std::string& value) {
  set_has_item_json();
  item_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_Response.item_json)
}
#if LANG_CXX11
void CInventory_Response::set_item_json(::std::string&& value) {
  set_has_item_json();
  item_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CInventory_Response.item_json)
}
#endif
void CInventory_Response::set_item_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_item_json();
  item_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CInventory_Response.item_json)
}
void CInventory_Response::set_item_json(const char* value, size_t size) {
  set_has_item_json();
  item_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CInventory_Response.item_json)
}
::std::string* CInventory_Response::mutable_item_json() {
  set_has_item_json();
  // @@protoc_insertion_point(field_mutable:proto.steam.CInventory_Response.item_json)
  return item_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CInventory_Response::release_item_json() {
  // @@protoc_insertion_point(field_release:proto.steam.CInventory_Response.item_json)
  clear_has_item_json();
  return item_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CInventory_Response::set_allocated_item_json(::std::string* item_json) {
  if (item_json != NULL) {
    set_has_item_json();
  } else {
    clear_has_item_json();
  }
  item_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_json);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CInventory_Response.item_json)
}

// optional string itemdef_json = 4;
bool CInventory_Response::has_itemdef_json() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CInventory_Response::set_has_itemdef_json() {
  _has_bits_[0] |= 0x00000004u;
}
void CInventory_Response::clear_has_itemdef_json() {
  _has_bits_[0] &= ~0x00000004u;
}
void CInventory_Response::clear_itemdef_json() {
  itemdef_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_itemdef_json();
}
const ::std::string& CInventory_Response::itemdef_json() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_Response.itemdef_json)
  return itemdef_json_.GetNoArena();
}
void CInventory_Response::set_itemdef_json(const ::std::string& value) {
  set_has_itemdef_json();
  itemdef_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_Response.itemdef_json)
}
#if LANG_CXX11
void CInventory_Response::set_itemdef_json(::std::string&& value) {
  set_has_itemdef_json();
  itemdef_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CInventory_Response.itemdef_json)
}
#endif
void CInventory_Response::set_itemdef_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_itemdef_json();
  itemdef_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CInventory_Response.itemdef_json)
}
void CInventory_Response::set_itemdef_json(const char* value, size_t size) {
  set_has_itemdef_json();
  itemdef_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CInventory_Response.itemdef_json)
}
::std::string* CInventory_Response::mutable_itemdef_json() {
  set_has_itemdef_json();
  // @@protoc_insertion_point(field_mutable:proto.steam.CInventory_Response.itemdef_json)
  return itemdef_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CInventory_Response::release_itemdef_json() {
  // @@protoc_insertion_point(field_release:proto.steam.CInventory_Response.itemdef_json)
  clear_has_itemdef_json();
  return itemdef_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CInventory_Response::set_allocated_itemdef_json(::std::string* itemdef_json) {
  if (itemdef_json != NULL) {
    set_has_itemdef_json();
  } else {
    clear_has_itemdef_json();
  }
  itemdef_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), itemdef_json);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CInventory_Response.itemdef_json)
}

// optional bytes ticket = 5;
bool CInventory_Response::has_ticket() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CInventory_Response::set_has_ticket() {
  _has_bits_[0] |= 0x00000008u;
}
void CInventory_Response::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000008u;
}
void CInventory_Response::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
const ::std::string& CInventory_Response::ticket() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_Response.ticket)
  return ticket_.GetNoArena();
}
void CInventory_Response::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_Response.ticket)
}
#if LANG_CXX11
void CInventory_Response::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CInventory_Response.ticket)
}
#endif
void CInventory_Response::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CInventory_Response.ticket)
}
void CInventory_Response::set_ticket(const void* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CInventory_Response.ticket)
}
::std::string* CInventory_Response::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:proto.steam.CInventory_Response.ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CInventory_Response::release_ticket() {
  // @@protoc_insertion_point(field_release:proto.steam.CInventory_Response.ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CInventory_Response::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CInventory_Response.ticket)
}

// optional bool replayed = 6 [(.proto.steam.description) = "If true, the requestid given was processed earlier."];
bool CInventory_Response::has_replayed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CInventory_Response::set_has_replayed() {
  _has_bits_[0] |= 0x00000010u;
}
void CInventory_Response::clear_has_replayed() {
  _has_bits_[0] &= ~0x00000010u;
}
void CInventory_Response::clear_replayed() {
  replayed_ = false;
  clear_has_replayed();
}
bool CInventory_Response::replayed() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_Response.replayed)
  return replayed_;
}
void CInventory_Response::set_replayed(bool value) {
  set_has_replayed();
  replayed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_Response.replayed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_ExchangeItem_Request::kAppidFieldNumber;
const int CInventory_ExchangeItem_Request::kSteamidFieldNumber;
const int CInventory_ExchangeItem_Request::kMaterialsitemidFieldNumber;
const int CInventory_ExchangeItem_Request::kMaterialsquantityFieldNumber;
const int CInventory_ExchangeItem_Request::kOutputitemdefidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_ExchangeItem_Request::CInventory_ExchangeItem_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_ExchangeItem_Request)
}
CInventory_ExchangeItem_Request::CInventory_ExchangeItem_Request(const CInventory_ExchangeItem_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      materialsitemid_(from.materialsitemid_),
      materialsquantity_(from.materialsquantity_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_ExchangeItem_Request)
}

void CInventory_ExchangeItem_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
}

CInventory_ExchangeItem_Request::~CInventory_ExchangeItem_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_ExchangeItem_Request)
  SharedDtor();
}

void CInventory_ExchangeItem_Request::SharedDtor() {
}

void CInventory_ExchangeItem_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CInventory_ExchangeItem_Request::descriptor() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CInventory_ExchangeItem_Request& CInventory_ExchangeItem_Request::default_instance() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CInventory_ExchangeItem_Request* CInventory_ExchangeItem_Request::New(::google::protobuf::Arena* arena) const {
  CInventory_ExchangeItem_Request* n = new CInventory_ExchangeItem_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CInventory_ExchangeItem_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_ExchangeItem_Request)
  materialsitemid_.Clear();
  materialsquantity_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CInventory_ExchangeItem_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_ExchangeItem_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 materialsitemid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24u, input, this->mutable_materialsitemid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_materialsitemid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 materialsquantity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_materialsquantity())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_materialsquantity())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 outputitemdefid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_outputitemdefid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &outputitemdefid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_ExchangeItem_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_ExchangeItem_Request)
  return false;
#undef DO_
}

void CInventory_ExchangeItem_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_ExchangeItem_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->steamid(), output);
  }

  // repeated uint64 materialsitemid = 3;
  for (int i = 0, n = this->materialsitemid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->materialsitemid(i), output);
  }

  // repeated uint32 materialsquantity = 4;
  for (int i = 0, n = this->materialsquantity_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->materialsquantity(i), output);
  }

  // optional uint64 outputitemdefid = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->outputitemdefid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_ExchangeItem_Request)
}

::google::protobuf::uint8* CInventory_ExchangeItem_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_ExchangeItem_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->steamid(), target);
  }

  // repeated uint64 materialsitemid = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(3, this->materialsitemid_, target);

  // repeated uint32 materialsquantity = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->materialsquantity_, target);

  // optional uint64 outputitemdefid = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->outputitemdefid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_ExchangeItem_Request)
  return target;
}

size_t CInventory_ExchangeItem_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_ExchangeItem_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint64 materialsitemid = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->materialsitemid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->materialsitemid_size());
    total_size += data_size;
  }

  // repeated uint32 materialsquantity = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->materialsquantity_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->materialsquantity_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 steamid = 2;
    if (has_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steamid());
    }

    // optional uint64 outputitemdefid = 5;
    if (has_outputitemdefid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->outputitemdefid());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CInventory_ExchangeItem_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_ExchangeItem_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_ExchangeItem_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CInventory_ExchangeItem_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_ExchangeItem_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_ExchangeItem_Request)
    MergeFrom(*source);
  }
}

void CInventory_ExchangeItem_Request::MergeFrom(const CInventory_ExchangeItem_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_ExchangeItem_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  materialsitemid_.MergeFrom(from.materialsitemid_);
  materialsquantity_.MergeFrom(from.materialsquantity_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      outputitemdefid_ = from.outputitemdefid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_ExchangeItem_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_ExchangeItem_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_ExchangeItem_Request::CopyFrom(const CInventory_ExchangeItem_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_ExchangeItem_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_ExchangeItem_Request::IsInitialized() const {
  return true;
}

void CInventory_ExchangeItem_Request::Swap(CInventory_ExchangeItem_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_ExchangeItem_Request::InternalSwap(CInventory_ExchangeItem_Request* other) {
  materialsitemid_.InternalSwap(&other->materialsitemid_);
  materialsquantity_.InternalSwap(&other->materialsquantity_);
  std::swap(steamid_, other->steamid_);
  std::swap(outputitemdefid_, other->outputitemdefid_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CInventory_ExchangeItem_Request::GetMetadata() const {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CInventory_ExchangeItem_Request

// optional uint32 appid = 1;
bool CInventory_ExchangeItem_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CInventory_ExchangeItem_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
void CInventory_ExchangeItem_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CInventory_ExchangeItem_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CInventory_ExchangeItem_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_ExchangeItem_Request.appid)
  return appid_;
}
void CInventory_ExchangeItem_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_ExchangeItem_Request.appid)
}

// optional uint64 steamid = 2;
bool CInventory_ExchangeItem_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CInventory_ExchangeItem_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CInventory_ExchangeItem_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CInventory_ExchangeItem_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CInventory_ExchangeItem_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_ExchangeItem_Request.steamid)
  return steamid_;
}
void CInventory_ExchangeItem_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_ExchangeItem_Request.steamid)
}

// repeated uint64 materialsitemid = 3;
int CInventory_ExchangeItem_Request::materialsitemid_size() const {
  return materialsitemid_.size();
}
void CInventory_ExchangeItem_Request::clear_materialsitemid() {
  materialsitemid_.Clear();
}
::google::protobuf::uint64 CInventory_ExchangeItem_Request::materialsitemid(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_ExchangeItem_Request.materialsitemid)
  return materialsitemid_.Get(index);
}
void CInventory_ExchangeItem_Request::set_materialsitemid(int index, ::google::protobuf::uint64 value) {
  materialsitemid_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_ExchangeItem_Request.materialsitemid)
}
void CInventory_ExchangeItem_Request::add_materialsitemid(::google::protobuf::uint64 value) {
  materialsitemid_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CInventory_ExchangeItem_Request.materialsitemid)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CInventory_ExchangeItem_Request::materialsitemid() const {
  // @@protoc_insertion_point(field_list:proto.steam.CInventory_ExchangeItem_Request.materialsitemid)
  return materialsitemid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CInventory_ExchangeItem_Request::mutable_materialsitemid() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CInventory_ExchangeItem_Request.materialsitemid)
  return &materialsitemid_;
}

// repeated uint32 materialsquantity = 4;
int CInventory_ExchangeItem_Request::materialsquantity_size() const {
  return materialsquantity_.size();
}
void CInventory_ExchangeItem_Request::clear_materialsquantity() {
  materialsquantity_.Clear();
}
::google::protobuf::uint32 CInventory_ExchangeItem_Request::materialsquantity(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_ExchangeItem_Request.materialsquantity)
  return materialsquantity_.Get(index);
}
void CInventory_ExchangeItem_Request::set_materialsquantity(int index, ::google::protobuf::uint32 value) {
  materialsquantity_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_ExchangeItem_Request.materialsquantity)
}
void CInventory_ExchangeItem_Request::add_materialsquantity(::google::protobuf::uint32 value) {
  materialsquantity_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CInventory_ExchangeItem_Request.materialsquantity)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CInventory_ExchangeItem_Request::materialsquantity() const {
  // @@protoc_insertion_point(field_list:proto.steam.CInventory_ExchangeItem_Request.materialsquantity)
  return materialsquantity_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CInventory_ExchangeItem_Request::mutable_materialsquantity() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CInventory_ExchangeItem_Request.materialsquantity)
  return &materialsquantity_;
}

// optional uint64 outputitemdefid = 5;
bool CInventory_ExchangeItem_Request::has_outputitemdefid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CInventory_ExchangeItem_Request::set_has_outputitemdefid() {
  _has_bits_[0] |= 0x00000002u;
}
void CInventory_ExchangeItem_Request::clear_has_outputitemdefid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CInventory_ExchangeItem_Request::clear_outputitemdefid() {
  outputitemdefid_ = GOOGLE_ULONGLONG(0);
  clear_has_outputitemdefid();
}
::google::protobuf::uint64 CInventory_ExchangeItem_Request::outputitemdefid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_ExchangeItem_Request.outputitemdefid)
  return outputitemdefid_;
}
void CInventory_ExchangeItem_Request::set_outputitemdefid(::google::protobuf::uint64 value) {
  set_has_outputitemdefid();
  outputitemdefid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_ExchangeItem_Request.outputitemdefid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_GetEligiblePromoItemDefIDs_Request::kAppidFieldNumber;
const int CInventory_GetEligiblePromoItemDefIDs_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_GetEligiblePromoItemDefIDs_Request::CInventory_GetEligiblePromoItemDefIDs_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
}
CInventory_GetEligiblePromoItemDefIDs_Request::CInventory_GetEligiblePromoItemDefIDs_Request(const CInventory_GetEligiblePromoItemDefIDs_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
}

void CInventory_GetEligiblePromoItemDefIDs_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
}

CInventory_GetEligiblePromoItemDefIDs_Request::~CInventory_GetEligiblePromoItemDefIDs_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  SharedDtor();
}

void CInventory_GetEligiblePromoItemDefIDs_Request::SharedDtor() {
}

void CInventory_GetEligiblePromoItemDefIDs_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CInventory_GetEligiblePromoItemDefIDs_Request::descriptor() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CInventory_GetEligiblePromoItemDefIDs_Request& CInventory_GetEligiblePromoItemDefIDs_Request::default_instance() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CInventory_GetEligiblePromoItemDefIDs_Request* CInventory_GetEligiblePromoItemDefIDs_Request::New(::google::protobuf::Arena* arena) const {
  CInventory_GetEligiblePromoItemDefIDs_Request* n = new CInventory_GetEligiblePromoItemDefIDs_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CInventory_GetEligiblePromoItemDefIDs_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CInventory_GetEligiblePromoItemDefIDs_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  return false;
#undef DO_
}

void CInventory_GetEligiblePromoItemDefIDs_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
}

::google::protobuf::uint8* CInventory_GetEligiblePromoItemDefIDs_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  return target;
}

size_t CInventory_GetEligiblePromoItemDefIDs_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 steamid = 2;
    if (has_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steamid());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CInventory_GetEligiblePromoItemDefIDs_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_GetEligiblePromoItemDefIDs_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CInventory_GetEligiblePromoItemDefIDs_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
    MergeFrom(*source);
  }
}

void CInventory_GetEligiblePromoItemDefIDs_Request::MergeFrom(const CInventory_GetEligiblePromoItemDefIDs_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_GetEligiblePromoItemDefIDs_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_GetEligiblePromoItemDefIDs_Request::CopyFrom(const CInventory_GetEligiblePromoItemDefIDs_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_GetEligiblePromoItemDefIDs_Request::IsInitialized() const {
  return true;
}

void CInventory_GetEligiblePromoItemDefIDs_Request::Swap(CInventory_GetEligiblePromoItemDefIDs_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_GetEligiblePromoItemDefIDs_Request::InternalSwap(CInventory_GetEligiblePromoItemDefIDs_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CInventory_GetEligiblePromoItemDefIDs_Request::GetMetadata() const {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CInventory_GetEligiblePromoItemDefIDs_Request

// optional uint32 appid = 1;
bool CInventory_GetEligiblePromoItemDefIDs_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CInventory_GetEligiblePromoItemDefIDs_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CInventory_GetEligiblePromoItemDefIDs_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CInventory_GetEligiblePromoItemDefIDs_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CInventory_GetEligiblePromoItemDefIDs_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request.appid)
  return appid_;
}
void CInventory_GetEligiblePromoItemDefIDs_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request.appid)
}

// optional uint64 steamid = 2;
bool CInventory_GetEligiblePromoItemDefIDs_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CInventory_GetEligiblePromoItemDefIDs_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CInventory_GetEligiblePromoItemDefIDs_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CInventory_GetEligiblePromoItemDefIDs_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CInventory_GetEligiblePromoItemDefIDs_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request.steamid)
  return steamid_;
}
void CInventory_GetEligiblePromoItemDefIDs_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Request.steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_GetEligiblePromoItemDefIDs_Response::kItemdefidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_GetEligiblePromoItemDefIDs_Response::CInventory_GetEligiblePromoItemDefIDs_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
}
CInventory_GetEligiblePromoItemDefIDs_Response::CInventory_GetEligiblePromoItemDefIDs_Response(const CInventory_GetEligiblePromoItemDefIDs_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      itemdefids_(from.itemdefids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
}

void CInventory_GetEligiblePromoItemDefIDs_Response::SharedCtor() {
  _cached_size_ = 0;
}

CInventory_GetEligiblePromoItemDefIDs_Response::~CInventory_GetEligiblePromoItemDefIDs_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  SharedDtor();
}

void CInventory_GetEligiblePromoItemDefIDs_Response::SharedDtor() {
}

void CInventory_GetEligiblePromoItemDefIDs_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CInventory_GetEligiblePromoItemDefIDs_Response::descriptor() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CInventory_GetEligiblePromoItemDefIDs_Response& CInventory_GetEligiblePromoItemDefIDs_Response::default_instance() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CInventory_GetEligiblePromoItemDefIDs_Response* CInventory_GetEligiblePromoItemDefIDs_Response::New(::google::protobuf::Arena* arena) const {
  CInventory_GetEligiblePromoItemDefIDs_Response* n = new CInventory_GetEligiblePromoItemDefIDs_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CInventory_GetEligiblePromoItemDefIDs_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  itemdefids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CInventory_GetEligiblePromoItemDefIDs_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 itemdefids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_itemdefids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_itemdefids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  return false;
#undef DO_
}

void CInventory_GetEligiblePromoItemDefIDs_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 itemdefids = 1;
  for (int i = 0, n = this->itemdefids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->itemdefids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
}

::google::protobuf::uint8* CInventory_GetEligiblePromoItemDefIDs_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 itemdefids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->itemdefids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  return target;
}

size_t CInventory_GetEligiblePromoItemDefIDs_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint64 itemdefids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->itemdefids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->itemdefids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CInventory_GetEligiblePromoItemDefIDs_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_GetEligiblePromoItemDefIDs_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CInventory_GetEligiblePromoItemDefIDs_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
    MergeFrom(*source);
  }
}

void CInventory_GetEligiblePromoItemDefIDs_Response::MergeFrom(const CInventory_GetEligiblePromoItemDefIDs_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  itemdefids_.MergeFrom(from.itemdefids_);
}

void CInventory_GetEligiblePromoItemDefIDs_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_GetEligiblePromoItemDefIDs_Response::CopyFrom(const CInventory_GetEligiblePromoItemDefIDs_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_GetEligiblePromoItemDefIDs_Response::IsInitialized() const {
  return true;
}

void CInventory_GetEligiblePromoItemDefIDs_Response::Swap(CInventory_GetEligiblePromoItemDefIDs_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_GetEligiblePromoItemDefIDs_Response::InternalSwap(CInventory_GetEligiblePromoItemDefIDs_Response* other) {
  itemdefids_.InternalSwap(&other->itemdefids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CInventory_GetEligiblePromoItemDefIDs_Response::GetMetadata() const {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CInventory_GetEligiblePromoItemDefIDs_Response

// repeated uint64 itemdefids = 1;
int CInventory_GetEligiblePromoItemDefIDs_Response::itemdefids_size() const {
  return itemdefids_.size();
}
void CInventory_GetEligiblePromoItemDefIDs_Response::clear_itemdefids() {
  itemdefids_.Clear();
}
::google::protobuf::uint64 CInventory_GetEligiblePromoItemDefIDs_Response::itemdefids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response.itemdefids)
  return itemdefids_.Get(index);
}
void CInventory_GetEligiblePromoItemDefIDs_Response::set_itemdefids(int index, ::google::protobuf::uint64 value) {
  itemdefids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response.itemdefids)
}
void CInventory_GetEligiblePromoItemDefIDs_Response::add_itemdefids(::google::protobuf::uint64 value) {
  itemdefids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response.itemdefids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CInventory_GetEligiblePromoItemDefIDs_Response::itemdefids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response.itemdefids)
  return itemdefids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CInventory_GetEligiblePromoItemDefIDs_Response::mutable_itemdefids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CInventory_GetEligiblePromoItemDefIDs_Response.itemdefids)
  return &itemdefids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_AddItem_Request::kAppidFieldNumber;
const int CInventory_AddItem_Request::kItemdefidFieldNumber;
const int CInventory_AddItem_Request::kItempropsjsonFieldNumber;
const int CInventory_AddItem_Request::kSteamidFieldNumber;
const int CInventory_AddItem_Request::kNotifyFieldNumber;
const int CInventory_AddItem_Request::kRequestidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_AddItem_Request::CInventory_AddItem_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_AddItem_Request)
}
CInventory_AddItem_Request::CInventory_AddItem_Request(const CInventory_AddItem_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      itemdefid_(from.itemdefid_),
      itempropsjson_(from.itempropsjson_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&requestid_) -
    reinterpret_cast<char*>(&appid_) + sizeof(requestid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_AddItem_Request)
}

void CInventory_AddItem_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&appid_, 0, reinterpret_cast<char*>(&requestid_) -
    reinterpret_cast<char*>(&appid_) + sizeof(requestid_));
}

CInventory_AddItem_Request::~CInventory_AddItem_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_AddItem_Request)
  SharedDtor();
}

void CInventory_AddItem_Request::SharedDtor() {
}

void CInventory_AddItem_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CInventory_AddItem_Request::descriptor() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CInventory_AddItem_Request& CInventory_AddItem_Request::default_instance() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CInventory_AddItem_Request* CInventory_AddItem_Request::New(::google::protobuf::Arena* arena) const {
  CInventory_AddItem_Request* n = new CInventory_AddItem_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CInventory_AddItem_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_AddItem_Request)
  itemdefid_.Clear();
  itempropsjson_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&requestid_) -
      reinterpret_cast<char*>(&appid_) + sizeof(requestid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CInventory_AddItem_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_AddItem_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 itemdefid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_itemdefid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_itemdefid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string itempropsjson = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_itempropsjson()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itempropsjson(this->itempropsjson_size() - 1).data(),
            this->itempropsjson(this->itempropsjson_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CInventory_AddItem_Request.itempropsjson");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 steamid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool notify = 5 [(.proto.steam.description) = "Should notify the user that the item was added to their Steam Inventory."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_notify();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notify_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 requestid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_AddItem_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_AddItem_Request)
  return false;
#undef DO_
}

void CInventory_AddItem_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_AddItem_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // repeated uint64 itemdefid = 2;
  for (int i = 0, n = this->itemdefid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->itemdefid(i), output);
  }

  // repeated string itempropsjson = 3;
  for (int i = 0, n = this->itempropsjson_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itempropsjson(i).data(), this->itempropsjson(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_AddItem_Request.itempropsjson");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->itempropsjson(i), output);
  }

  // optional uint64 steamid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->steamid(), output);
  }

  // optional bool notify = 5 [(.proto.steam.description) = "Should notify the user that the item was added to their Steam Inventory."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->notify(), output);
  }

  // optional uint64 requestid = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->requestid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_AddItem_Request)
}

::google::protobuf::uint8* CInventory_AddItem_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_AddItem_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // repeated uint64 itemdefid = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->itemdefid_, target);

  // repeated string itempropsjson = 3;
  for (int i = 0, n = this->itempropsjson_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itempropsjson(i).data(), this->itempropsjson(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_AddItem_Request.itempropsjson");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->itempropsjson(i), target);
  }

  // optional uint64 steamid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->steamid(), target);
  }

  // optional bool notify = 5 [(.proto.steam.description) = "Should notify the user that the item was added to their Steam Inventory."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->notify(), target);
  }

  // optional uint64 requestid = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->requestid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_AddItem_Request)
  return target;
}

size_t CInventory_AddItem_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_AddItem_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint64 itemdefid = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->itemdefid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->itemdefid_size());
    total_size += data_size;
  }

  // repeated string itempropsjson = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->itempropsjson_size());
  for (int i = 0, n = this->itempropsjson_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->itempropsjson(i));
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool notify = 5 [(.proto.steam.description) = "Should notify the user that the item was added to their Steam Inventory."];
    if (has_notify()) {
      total_size += 1 + 1;
    }

    // optional uint64 steamid = 4;
    if (has_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steamid());
    }

    // optional uint64 requestid = 6;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->requestid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CInventory_AddItem_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_AddItem_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_AddItem_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CInventory_AddItem_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_AddItem_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_AddItem_Request)
    MergeFrom(*source);
  }
}

void CInventory_AddItem_Request::MergeFrom(const CInventory_AddItem_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_AddItem_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  itemdefid_.MergeFrom(from.itemdefid_);
  itempropsjson_.MergeFrom(from.itempropsjson_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      notify_ = from.notify_;
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_AddItem_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_AddItem_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_AddItem_Request::CopyFrom(const CInventory_AddItem_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_AddItem_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_AddItem_Request::IsInitialized() const {
  return true;
}

void CInventory_AddItem_Request::Swap(CInventory_AddItem_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_AddItem_Request::InternalSwap(CInventory_AddItem_Request* other) {
  itemdefid_.InternalSwap(&other->itemdefid_);
  itempropsjson_.InternalSwap(&other->itempropsjson_);
  std::swap(appid_, other->appid_);
  std::swap(notify_, other->notify_);
  std::swap(steamid_, other->steamid_);
  std::swap(requestid_, other->requestid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CInventory_AddItem_Request::GetMetadata() const {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CInventory_AddItem_Request

// optional uint32 appid = 1;
bool CInventory_AddItem_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CInventory_AddItem_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CInventory_AddItem_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CInventory_AddItem_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CInventory_AddItem_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_AddItem_Request.appid)
  return appid_;
}
void CInventory_AddItem_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_AddItem_Request.appid)
}

// repeated uint64 itemdefid = 2;
int CInventory_AddItem_Request::itemdefid_size() const {
  return itemdefid_.size();
}
void CInventory_AddItem_Request::clear_itemdefid() {
  itemdefid_.Clear();
}
::google::protobuf::uint64 CInventory_AddItem_Request::itemdefid(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_AddItem_Request.itemdefid)
  return itemdefid_.Get(index);
}
void CInventory_AddItem_Request::set_itemdefid(int index, ::google::protobuf::uint64 value) {
  itemdefid_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_AddItem_Request.itemdefid)
}
void CInventory_AddItem_Request::add_itemdefid(::google::protobuf::uint64 value) {
  itemdefid_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CInventory_AddItem_Request.itemdefid)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CInventory_AddItem_Request::itemdefid() const {
  // @@protoc_insertion_point(field_list:proto.steam.CInventory_AddItem_Request.itemdefid)
  return itemdefid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CInventory_AddItem_Request::mutable_itemdefid() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CInventory_AddItem_Request.itemdefid)
  return &itemdefid_;
}

// repeated string itempropsjson = 3;
int CInventory_AddItem_Request::itempropsjson_size() const {
  return itempropsjson_.size();
}
void CInventory_AddItem_Request::clear_itempropsjson() {
  itempropsjson_.Clear();
}
const ::std::string& CInventory_AddItem_Request::itempropsjson(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_AddItem_Request.itempropsjson)
  return itempropsjson_.Get(index);
}
::std::string* CInventory_AddItem_Request::mutable_itempropsjson(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CInventory_AddItem_Request.itempropsjson)
  return itempropsjson_.Mutable(index);
}
void CInventory_AddItem_Request::set_itempropsjson(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_AddItem_Request.itempropsjson)
  itempropsjson_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CInventory_AddItem_Request::set_itempropsjson(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_AddItem_Request.itempropsjson)
  itempropsjson_.Mutable(index)->assign(std::move(value));
}
#endif
void CInventory_AddItem_Request::set_itempropsjson(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  itempropsjson_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CInventory_AddItem_Request.itempropsjson)
}
void CInventory_AddItem_Request::set_itempropsjson(int index, const char* value, size_t size) {
  itempropsjson_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CInventory_AddItem_Request.itempropsjson)
}
::std::string* CInventory_AddItem_Request::add_itempropsjson() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CInventory_AddItem_Request.itempropsjson)
  return itempropsjson_.Add();
}
void CInventory_AddItem_Request::add_itempropsjson(const ::std::string& value) {
  itempropsjson_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CInventory_AddItem_Request.itempropsjson)
}
#if LANG_CXX11
void CInventory_AddItem_Request::add_itempropsjson(::std::string&& value) {
  itempropsjson_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CInventory_AddItem_Request.itempropsjson)
}
#endif
void CInventory_AddItem_Request::add_itempropsjson(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  itempropsjson_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CInventory_AddItem_Request.itempropsjson)
}
void CInventory_AddItem_Request::add_itempropsjson(const char* value, size_t size) {
  itempropsjson_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CInventory_AddItem_Request.itempropsjson)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CInventory_AddItem_Request::itempropsjson() const {
  // @@protoc_insertion_point(field_list:proto.steam.CInventory_AddItem_Request.itempropsjson)
  return itempropsjson_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CInventory_AddItem_Request::mutable_itempropsjson() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CInventory_AddItem_Request.itempropsjson)
  return &itempropsjson_;
}

// optional uint64 steamid = 4;
bool CInventory_AddItem_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CInventory_AddItem_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000004u;
}
void CInventory_AddItem_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CInventory_AddItem_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CInventory_AddItem_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_AddItem_Request.steamid)
  return steamid_;
}
void CInventory_AddItem_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_AddItem_Request.steamid)
}

// optional bool notify = 5 [(.proto.steam.description) = "Should notify the user that the item was added to their Steam Inventory."];
bool CInventory_AddItem_Request::has_notify() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CInventory_AddItem_Request::set_has_notify() {
  _has_bits_[0] |= 0x00000002u;
}
void CInventory_AddItem_Request::clear_has_notify() {
  _has_bits_[0] &= ~0x00000002u;
}
void CInventory_AddItem_Request::clear_notify() {
  notify_ = false;
  clear_has_notify();
}
bool CInventory_AddItem_Request::notify() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_AddItem_Request.notify)
  return notify_;
}
void CInventory_AddItem_Request::set_notify(bool value) {
  set_has_notify();
  notify_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_AddItem_Request.notify)
}

// optional uint64 requestid = 6;
bool CInventory_AddItem_Request::has_requestid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CInventory_AddItem_Request::set_has_requestid() {
  _has_bits_[0] |= 0x00000008u;
}
void CInventory_AddItem_Request::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CInventory_AddItem_Request::clear_requestid() {
  requestid_ = GOOGLE_ULONGLONG(0);
  clear_has_requestid();
}
::google::protobuf::uint64 CInventory_AddItem_Request::requestid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_AddItem_Request.requestid)
  return requestid_;
}
void CInventory_AddItem_Request::set_requestid(::google::protobuf::uint64 value) {
  set_has_requestid();
  requestid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_AddItem_Request.requestid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_SafeModifyItem_Request::kAppidFieldNumber;
const int CInventory_SafeModifyItem_Request::kAcctidFieldNumber;
const int CInventory_SafeModifyItem_Request::kItemidFieldNumber;
const int CInventory_SafeModifyItem_Request::kItempropsjsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_SafeModifyItem_Request::CInventory_SafeModifyItem_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_SafeModifyItem_Request)
}
CInventory_SafeModifyItem_Request::CInventory_SafeModifyItem_Request(const CInventory_SafeModifyItem_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  itempropsjson_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_itempropsjson()) {
    itempropsjson_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.itempropsjson_);
  }
  ::memcpy(&acctid_, &from.acctid_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&acctid_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_SafeModifyItem_Request)
}

void CInventory_SafeModifyItem_Request::SharedCtor() {
  _cached_size_ = 0;
  itempropsjson_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&acctid_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&acctid_) + sizeof(appid_));
}

CInventory_SafeModifyItem_Request::~CInventory_SafeModifyItem_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_SafeModifyItem_Request)
  SharedDtor();
}

void CInventory_SafeModifyItem_Request::SharedDtor() {
  itempropsjson_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CInventory_SafeModifyItem_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CInventory_SafeModifyItem_Request::descriptor() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CInventory_SafeModifyItem_Request& CInventory_SafeModifyItem_Request::default_instance() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CInventory_SafeModifyItem_Request* CInventory_SafeModifyItem_Request::New(::google::protobuf::Arena* arena) const {
  CInventory_SafeModifyItem_Request* n = new CInventory_SafeModifyItem_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CInventory_SafeModifyItem_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_SafeModifyItem_Request)
  if (has_itempropsjson()) {
    GOOGLE_DCHECK(!itempropsjson_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*itempropsjson_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&acctid_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&acctid_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CInventory_SafeModifyItem_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_SafeModifyItem_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 acctid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_acctid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &acctid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 itemid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string itempropsjson = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itempropsjson()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itempropsjson().data(), this->itempropsjson().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CInventory_SafeModifyItem_Request.itempropsjson");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_SafeModifyItem_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_SafeModifyItem_Request)
  return false;
#undef DO_
}

void CInventory_SafeModifyItem_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_SafeModifyItem_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 acctid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->acctid(), output);
  }

  // optional uint64 itemid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->itemid(), output);
  }

  // optional string itempropsjson = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itempropsjson().data(), this->itempropsjson().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_SafeModifyItem_Request.itempropsjson");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->itempropsjson(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_SafeModifyItem_Request)
}

::google::protobuf::uint8* CInventory_SafeModifyItem_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_SafeModifyItem_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 acctid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->acctid(), target);
  }

  // optional uint64 itemid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->itemid(), target);
  }

  // optional string itempropsjson = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itempropsjson().data(), this->itempropsjson().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_SafeModifyItem_Request.itempropsjson");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->itempropsjson(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_SafeModifyItem_Request)
  return target;
}

size_t CInventory_SafeModifyItem_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_SafeModifyItem_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string itempropsjson = 4;
    if (has_itempropsjson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itempropsjson());
    }

    // optional uint64 acctid = 2;
    if (has_acctid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->acctid());
    }

    // optional uint64 itemid = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CInventory_SafeModifyItem_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_SafeModifyItem_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_SafeModifyItem_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CInventory_SafeModifyItem_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_SafeModifyItem_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_SafeModifyItem_Request)
    MergeFrom(*source);
  }
}

void CInventory_SafeModifyItem_Request::MergeFrom(const CInventory_SafeModifyItem_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_SafeModifyItem_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_itempropsjson();
      itempropsjson_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.itempropsjson_);
    }
    if (cached_has_bits & 0x00000002u) {
      acctid_ = from.acctid_;
    }
    if (cached_has_bits & 0x00000004u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_SafeModifyItem_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_SafeModifyItem_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_SafeModifyItem_Request::CopyFrom(const CInventory_SafeModifyItem_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_SafeModifyItem_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_SafeModifyItem_Request::IsInitialized() const {
  return true;
}

void CInventory_SafeModifyItem_Request::Swap(CInventory_SafeModifyItem_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_SafeModifyItem_Request::InternalSwap(CInventory_SafeModifyItem_Request* other) {
  itempropsjson_.Swap(&other->itempropsjson_);
  std::swap(acctid_, other->acctid_);
  std::swap(itemid_, other->itemid_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CInventory_SafeModifyItem_Request::GetMetadata() const {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CInventory_SafeModifyItem_Request

// optional uint32 appid = 1;
bool CInventory_SafeModifyItem_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CInventory_SafeModifyItem_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
void CInventory_SafeModifyItem_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CInventory_SafeModifyItem_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CInventory_SafeModifyItem_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_SafeModifyItem_Request.appid)
  return appid_;
}
void CInventory_SafeModifyItem_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_SafeModifyItem_Request.appid)
}

// optional uint64 acctid = 2;
bool CInventory_SafeModifyItem_Request::has_acctid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CInventory_SafeModifyItem_Request::set_has_acctid() {
  _has_bits_[0] |= 0x00000002u;
}
void CInventory_SafeModifyItem_Request::clear_has_acctid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CInventory_SafeModifyItem_Request::clear_acctid() {
  acctid_ = GOOGLE_ULONGLONG(0);
  clear_has_acctid();
}
::google::protobuf::uint64 CInventory_SafeModifyItem_Request::acctid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_SafeModifyItem_Request.acctid)
  return acctid_;
}
void CInventory_SafeModifyItem_Request::set_acctid(::google::protobuf::uint64 value) {
  set_has_acctid();
  acctid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_SafeModifyItem_Request.acctid)
}

// optional uint64 itemid = 3;
bool CInventory_SafeModifyItem_Request::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CInventory_SafeModifyItem_Request::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
void CInventory_SafeModifyItem_Request::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CInventory_SafeModifyItem_Request::clear_itemid() {
  itemid_ = GOOGLE_ULONGLONG(0);
  clear_has_itemid();
}
::google::protobuf::uint64 CInventory_SafeModifyItem_Request::itemid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_SafeModifyItem_Request.itemid)
  return itemid_;
}
void CInventory_SafeModifyItem_Request::set_itemid(::google::protobuf::uint64 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_SafeModifyItem_Request.itemid)
}

// optional string itempropsjson = 4;
bool CInventory_SafeModifyItem_Request::has_itempropsjson() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CInventory_SafeModifyItem_Request::set_has_itempropsjson() {
  _has_bits_[0] |= 0x00000001u;
}
void CInventory_SafeModifyItem_Request::clear_has_itempropsjson() {
  _has_bits_[0] &= ~0x00000001u;
}
void CInventory_SafeModifyItem_Request::clear_itempropsjson() {
  itempropsjson_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_itempropsjson();
}
const ::std::string& CInventory_SafeModifyItem_Request::itempropsjson() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_SafeModifyItem_Request.itempropsjson)
  return itempropsjson_.GetNoArena();
}
void CInventory_SafeModifyItem_Request::set_itempropsjson(const ::std::string& value) {
  set_has_itempropsjson();
  itempropsjson_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_SafeModifyItem_Request.itempropsjson)
}
#if LANG_CXX11
void CInventory_SafeModifyItem_Request::set_itempropsjson(::std::string&& value) {
  set_has_itempropsjson();
  itempropsjson_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CInventory_SafeModifyItem_Request.itempropsjson)
}
#endif
void CInventory_SafeModifyItem_Request::set_itempropsjson(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_itempropsjson();
  itempropsjson_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CInventory_SafeModifyItem_Request.itempropsjson)
}
void CInventory_SafeModifyItem_Request::set_itempropsjson(const char* value, size_t size) {
  set_has_itempropsjson();
  itempropsjson_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CInventory_SafeModifyItem_Request.itempropsjson)
}
::std::string* CInventory_SafeModifyItem_Request::mutable_itempropsjson() {
  set_has_itempropsjson();
  // @@protoc_insertion_point(field_mutable:proto.steam.CInventory_SafeModifyItem_Request.itempropsjson)
  return itempropsjson_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CInventory_SafeModifyItem_Request::release_itempropsjson() {
  // @@protoc_insertion_point(field_release:proto.steam.CInventory_SafeModifyItem_Request.itempropsjson)
  clear_has_itempropsjson();
  return itempropsjson_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CInventory_SafeModifyItem_Request::set_allocated_itempropsjson(::std::string* itempropsjson) {
  if (itempropsjson != NULL) {
    set_has_itempropsjson();
  } else {
    clear_has_itempropsjson();
  }
  itempropsjson_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), itempropsjson);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CInventory_SafeModifyItem_Request.itempropsjson)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_ConsumePlaytime_Request::kAppidFieldNumber;
const int CInventory_ConsumePlaytime_Request::kItemdefidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_ConsumePlaytime_Request::CInventory_ConsumePlaytime_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_ConsumePlaytime_Request)
}
CInventory_ConsumePlaytime_Request::CInventory_ConsumePlaytime_Request(const CInventory_ConsumePlaytime_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&itemdefid_, &from.itemdefid_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&itemdefid_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_ConsumePlaytime_Request)
}

void CInventory_ConsumePlaytime_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&itemdefid_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&itemdefid_) + sizeof(appid_));
}

CInventory_ConsumePlaytime_Request::~CInventory_ConsumePlaytime_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_ConsumePlaytime_Request)
  SharedDtor();
}

void CInventory_ConsumePlaytime_Request::SharedDtor() {
}

void CInventory_ConsumePlaytime_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CInventory_ConsumePlaytime_Request::descriptor() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CInventory_ConsumePlaytime_Request& CInventory_ConsumePlaytime_Request::default_instance() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CInventory_ConsumePlaytime_Request* CInventory_ConsumePlaytime_Request::New(::google::protobuf::Arena* arena) const {
  CInventory_ConsumePlaytime_Request* n = new CInventory_ConsumePlaytime_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CInventory_ConsumePlaytime_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_ConsumePlaytime_Request)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&itemdefid_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&itemdefid_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CInventory_ConsumePlaytime_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_ConsumePlaytime_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 itemdefid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_itemdefid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemdefid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_ConsumePlaytime_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_ConsumePlaytime_Request)
  return false;
#undef DO_
}

void CInventory_ConsumePlaytime_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_ConsumePlaytime_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 itemdefid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->itemdefid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_ConsumePlaytime_Request)
}

::google::protobuf::uint8* CInventory_ConsumePlaytime_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_ConsumePlaytime_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 itemdefid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->itemdefid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_ConsumePlaytime_Request)
  return target;
}

size_t CInventory_ConsumePlaytime_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_ConsumePlaytime_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 itemdefid = 2;
    if (has_itemdefid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemdefid());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CInventory_ConsumePlaytime_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_ConsumePlaytime_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_ConsumePlaytime_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CInventory_ConsumePlaytime_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_ConsumePlaytime_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_ConsumePlaytime_Request)
    MergeFrom(*source);
  }
}

void CInventory_ConsumePlaytime_Request::MergeFrom(const CInventory_ConsumePlaytime_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_ConsumePlaytime_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      itemdefid_ = from.itemdefid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_ConsumePlaytime_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_ConsumePlaytime_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_ConsumePlaytime_Request::CopyFrom(const CInventory_ConsumePlaytime_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_ConsumePlaytime_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_ConsumePlaytime_Request::IsInitialized() const {
  return true;
}

void CInventory_ConsumePlaytime_Request::Swap(CInventory_ConsumePlaytime_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_ConsumePlaytime_Request::InternalSwap(CInventory_ConsumePlaytime_Request* other) {
  std::swap(itemdefid_, other->itemdefid_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CInventory_ConsumePlaytime_Request::GetMetadata() const {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CInventory_ConsumePlaytime_Request

// optional uint32 appid = 1;
bool CInventory_ConsumePlaytime_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CInventory_ConsumePlaytime_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CInventory_ConsumePlaytime_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CInventory_ConsumePlaytime_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CInventory_ConsumePlaytime_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_ConsumePlaytime_Request.appid)
  return appid_;
}
void CInventory_ConsumePlaytime_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_ConsumePlaytime_Request.appid)
}

// optional uint64 itemdefid = 2;
bool CInventory_ConsumePlaytime_Request::has_itemdefid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CInventory_ConsumePlaytime_Request::set_has_itemdefid() {
  _has_bits_[0] |= 0x00000001u;
}
void CInventory_ConsumePlaytime_Request::clear_has_itemdefid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CInventory_ConsumePlaytime_Request::clear_itemdefid() {
  itemdefid_ = GOOGLE_ULONGLONG(0);
  clear_has_itemdefid();
}
::google::protobuf::uint64 CInventory_ConsumePlaytime_Request::itemdefid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_ConsumePlaytime_Request.itemdefid)
  return itemdefid_;
}
void CInventory_ConsumePlaytime_Request::set_itemdefid(::google::protobuf::uint64 value) {
  set_has_itemdefid();
  itemdefid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_ConsumePlaytime_Request.itemdefid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_ConsumeItem_Request::kAppidFieldNumber;
const int CInventory_ConsumeItem_Request::kItemidFieldNumber;
const int CInventory_ConsumeItem_Request::kQuantityFieldNumber;
const int CInventory_ConsumeItem_Request::kTimestampFieldNumber;
const int CInventory_ConsumeItem_Request::kSteamidFieldNumber;
const int CInventory_ConsumeItem_Request::kRequestidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_ConsumeItem_Request::CInventory_ConsumeItem_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_ConsumeItem_Request)
}
CInventory_ConsumeItem_Request::CInventory_ConsumeItem_Request(const CInventory_ConsumeItem_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp()) {
    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  ::memcpy(&itemid_, &from.itemid_,
    reinterpret_cast<char*>(&requestid_) -
    reinterpret_cast<char*>(&itemid_) + sizeof(requestid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_ConsumeItem_Request)
}

void CInventory_ConsumeItem_Request::SharedCtor() {
  _cached_size_ = 0;
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&itemid_, 0, reinterpret_cast<char*>(&requestid_) -
    reinterpret_cast<char*>(&itemid_) + sizeof(requestid_));
}

CInventory_ConsumeItem_Request::~CInventory_ConsumeItem_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_ConsumeItem_Request)
  SharedDtor();
}

void CInventory_ConsumeItem_Request::SharedDtor() {
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CInventory_ConsumeItem_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CInventory_ConsumeItem_Request::descriptor() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CInventory_ConsumeItem_Request& CInventory_ConsumeItem_Request::default_instance() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CInventory_ConsumeItem_Request* CInventory_ConsumeItem_Request::New(::google::protobuf::Arena* arena) const {
  CInventory_ConsumeItem_Request* n = new CInventory_ConsumeItem_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CInventory_ConsumeItem_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_ConsumeItem_Request)
  if (has_timestamp()) {
    GOOGLE_DCHECK(!timestamp_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*timestamp_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&itemid_, 0, reinterpret_cast<char*>(&requestid_) -
      reinterpret_cast<char*>(&itemid_) + sizeof(requestid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CInventory_ConsumeItem_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_ConsumeItem_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 itemid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quantity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CInventory_ConsumeItem_Request.timestamp");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 steamid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 requestid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_ConsumeItem_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_ConsumeItem_Request)
  return false;
#undef DO_
}

void CInventory_ConsumeItem_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_ConsumeItem_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->itemid(), output);
  }

  // optional uint32 quantity = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->quantity(), output);
  }

  // optional string timestamp = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_ConsumeItem_Request.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->timestamp(), output);
  }

  // optional uint64 steamid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->steamid(), output);
  }

  // optional uint64 requestid = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->requestid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_ConsumeItem_Request)
}

::google::protobuf::uint8* CInventory_ConsumeItem_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_ConsumeItem_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->itemid(), target);
  }

  // optional uint32 quantity = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->quantity(), target);
  }

  // optional string timestamp = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_ConsumeItem_Request.timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->timestamp(), target);
  }

  // optional uint64 steamid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->steamid(), target);
  }

  // optional uint64 requestid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->requestid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_ConsumeItem_Request)
  return target;
}

size_t CInventory_ConsumeItem_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_ConsumeItem_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional uint64 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 quantity = 3;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }

    // optional uint64 steamid = 5;
    if (has_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steamid());
    }

    // optional uint64 requestid = 6;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->requestid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CInventory_ConsumeItem_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_ConsumeItem_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_ConsumeItem_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CInventory_ConsumeItem_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_ConsumeItem_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_ConsumeItem_Request)
    MergeFrom(*source);
  }
}

void CInventory_ConsumeItem_Request::MergeFrom(const CInventory_ConsumeItem_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_ConsumeItem_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_timestamp();
      timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
    }
    if (cached_has_bits & 0x00000002u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000010u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000020u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_ConsumeItem_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_ConsumeItem_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_ConsumeItem_Request::CopyFrom(const CInventory_ConsumeItem_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_ConsumeItem_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_ConsumeItem_Request::IsInitialized() const {
  return true;
}

void CInventory_ConsumeItem_Request::Swap(CInventory_ConsumeItem_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_ConsumeItem_Request::InternalSwap(CInventory_ConsumeItem_Request* other) {
  timestamp_.Swap(&other->timestamp_);
  std::swap(itemid_, other->itemid_);
  std::swap(appid_, other->appid_);
  std::swap(quantity_, other->quantity_);
  std::swap(steamid_, other->steamid_);
  std::swap(requestid_, other->requestid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CInventory_ConsumeItem_Request::GetMetadata() const {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CInventory_ConsumeItem_Request

// optional uint32 appid = 1;
bool CInventory_ConsumeItem_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CInventory_ConsumeItem_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
void CInventory_ConsumeItem_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CInventory_ConsumeItem_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CInventory_ConsumeItem_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_ConsumeItem_Request.appid)
  return appid_;
}
void CInventory_ConsumeItem_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_ConsumeItem_Request.appid)
}

// optional uint64 itemid = 2;
bool CInventory_ConsumeItem_Request::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CInventory_ConsumeItem_Request::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
void CInventory_ConsumeItem_Request::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CInventory_ConsumeItem_Request::clear_itemid() {
  itemid_ = GOOGLE_ULONGLONG(0);
  clear_has_itemid();
}
::google::protobuf::uint64 CInventory_ConsumeItem_Request::itemid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_ConsumeItem_Request.itemid)
  return itemid_;
}
void CInventory_ConsumeItem_Request::set_itemid(::google::protobuf::uint64 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_ConsumeItem_Request.itemid)
}

// optional uint32 quantity = 3;
bool CInventory_ConsumeItem_Request::has_quantity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CInventory_ConsumeItem_Request::set_has_quantity() {
  _has_bits_[0] |= 0x00000008u;
}
void CInventory_ConsumeItem_Request::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000008u;
}
void CInventory_ConsumeItem_Request::clear_quantity() {
  quantity_ = 0u;
  clear_has_quantity();
}
::google::protobuf::uint32 CInventory_ConsumeItem_Request::quantity() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_ConsumeItem_Request.quantity)
  return quantity_;
}
void CInventory_ConsumeItem_Request::set_quantity(::google::protobuf::uint32 value) {
  set_has_quantity();
  quantity_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_ConsumeItem_Request.quantity)
}

// optional string timestamp = 4;
bool CInventory_ConsumeItem_Request::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CInventory_ConsumeItem_Request::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void CInventory_ConsumeItem_Request::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void CInventory_ConsumeItem_Request::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp();
}
const ::std::string& CInventory_ConsumeItem_Request::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_ConsumeItem_Request.timestamp)
  return timestamp_.GetNoArena();
}
void CInventory_ConsumeItem_Request::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_ConsumeItem_Request.timestamp)
}
#if LANG_CXX11
void CInventory_ConsumeItem_Request::set_timestamp(::std::string&& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CInventory_ConsumeItem_Request.timestamp)
}
#endif
void CInventory_ConsumeItem_Request::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CInventory_ConsumeItem_Request.timestamp)
}
void CInventory_ConsumeItem_Request::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CInventory_ConsumeItem_Request.timestamp)
}
::std::string* CInventory_ConsumeItem_Request::mutable_timestamp() {
  set_has_timestamp();
  // @@protoc_insertion_point(field_mutable:proto.steam.CInventory_ConsumeItem_Request.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CInventory_ConsumeItem_Request::release_timestamp() {
  // @@protoc_insertion_point(field_release:proto.steam.CInventory_ConsumeItem_Request.timestamp)
  clear_has_timestamp();
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CInventory_ConsumeItem_Request::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CInventory_ConsumeItem_Request.timestamp)
}

// optional uint64 steamid = 5;
bool CInventory_ConsumeItem_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CInventory_ConsumeItem_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000010u;
}
void CInventory_ConsumeItem_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000010u;
}
void CInventory_ConsumeItem_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CInventory_ConsumeItem_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_ConsumeItem_Request.steamid)
  return steamid_;
}
void CInventory_ConsumeItem_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_ConsumeItem_Request.steamid)
}

// optional uint64 requestid = 6;
bool CInventory_ConsumeItem_Request::has_requestid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CInventory_ConsumeItem_Request::set_has_requestid() {
  _has_bits_[0] |= 0x00000020u;
}
void CInventory_ConsumeItem_Request::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000020u;
}
void CInventory_ConsumeItem_Request::clear_requestid() {
  requestid_ = GOOGLE_ULONGLONG(0);
  clear_has_requestid();
}
::google::protobuf::uint64 CInventory_ConsumeItem_Request::requestid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_ConsumeItem_Request.requestid)
  return requestid_;
}
void CInventory_ConsumeItem_Request::set_requestid(::google::protobuf::uint64 value) {
  set_has_requestid();
  requestid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_ConsumeItem_Request.requestid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_DevSetNextDrop_Request::kAppidFieldNumber;
const int CInventory_DevSetNextDrop_Request::kItemdefidFieldNumber;
const int CInventory_DevSetNextDrop_Request::kDroptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_DevSetNextDrop_Request::CInventory_DevSetNextDrop_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_DevSetNextDrop_Request)
}
CInventory_DevSetNextDrop_Request::CInventory_DevSetNextDrop_Request(const CInventory_DevSetNextDrop_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  droptime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_droptime()) {
    droptime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.droptime_);
  }
  ::memcpy(&itemdefid_, &from.itemdefid_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&itemdefid_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_DevSetNextDrop_Request)
}

void CInventory_DevSetNextDrop_Request::SharedCtor() {
  _cached_size_ = 0;
  droptime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&itemdefid_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&itemdefid_) + sizeof(appid_));
}

CInventory_DevSetNextDrop_Request::~CInventory_DevSetNextDrop_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_DevSetNextDrop_Request)
  SharedDtor();
}

void CInventory_DevSetNextDrop_Request::SharedDtor() {
  droptime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CInventory_DevSetNextDrop_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CInventory_DevSetNextDrop_Request::descriptor() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CInventory_DevSetNextDrop_Request& CInventory_DevSetNextDrop_Request::default_instance() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CInventory_DevSetNextDrop_Request* CInventory_DevSetNextDrop_Request::New(::google::protobuf::Arena* arena) const {
  CInventory_DevSetNextDrop_Request* n = new CInventory_DevSetNextDrop_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CInventory_DevSetNextDrop_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_DevSetNextDrop_Request)
  if (has_droptime()) {
    GOOGLE_DCHECK(!droptime_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*droptime_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&itemdefid_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&itemdefid_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CInventory_DevSetNextDrop_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_DevSetNextDrop_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 itemdefid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_itemdefid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemdefid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string droptime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_droptime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->droptime().data(), this->droptime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CInventory_DevSetNextDrop_Request.droptime");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_DevSetNextDrop_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_DevSetNextDrop_Request)
  return false;
#undef DO_
}

void CInventory_DevSetNextDrop_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_DevSetNextDrop_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 itemdefid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->itemdefid(), output);
  }

  // optional string droptime = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->droptime().data(), this->droptime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_DevSetNextDrop_Request.droptime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->droptime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_DevSetNextDrop_Request)
}

::google::protobuf::uint8* CInventory_DevSetNextDrop_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_DevSetNextDrop_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 itemdefid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->itemdefid(), target);
  }

  // optional string droptime = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->droptime().data(), this->droptime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_DevSetNextDrop_Request.droptime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->droptime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_DevSetNextDrop_Request)
  return target;
}

size_t CInventory_DevSetNextDrop_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_DevSetNextDrop_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string droptime = 3;
    if (has_droptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->droptime());
    }

    // optional uint64 itemdefid = 2;
    if (has_itemdefid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemdefid());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CInventory_DevSetNextDrop_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_DevSetNextDrop_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_DevSetNextDrop_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CInventory_DevSetNextDrop_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_DevSetNextDrop_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_DevSetNextDrop_Request)
    MergeFrom(*source);
  }
}

void CInventory_DevSetNextDrop_Request::MergeFrom(const CInventory_DevSetNextDrop_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_DevSetNextDrop_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_droptime();
      droptime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.droptime_);
    }
    if (cached_has_bits & 0x00000002u) {
      itemdefid_ = from.itemdefid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_DevSetNextDrop_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_DevSetNextDrop_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_DevSetNextDrop_Request::CopyFrom(const CInventory_DevSetNextDrop_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_DevSetNextDrop_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_DevSetNextDrop_Request::IsInitialized() const {
  return true;
}

void CInventory_DevSetNextDrop_Request::Swap(CInventory_DevSetNextDrop_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_DevSetNextDrop_Request::InternalSwap(CInventory_DevSetNextDrop_Request* other) {
  droptime_.Swap(&other->droptime_);
  std::swap(itemdefid_, other->itemdefid_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CInventory_DevSetNextDrop_Request::GetMetadata() const {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CInventory_DevSetNextDrop_Request

// optional uint32 appid = 1;
bool CInventory_DevSetNextDrop_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CInventory_DevSetNextDrop_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
void CInventory_DevSetNextDrop_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CInventory_DevSetNextDrop_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CInventory_DevSetNextDrop_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_DevSetNextDrop_Request.appid)
  return appid_;
}
void CInventory_DevSetNextDrop_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_DevSetNextDrop_Request.appid)
}

// optional uint64 itemdefid = 2;
bool CInventory_DevSetNextDrop_Request::has_itemdefid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CInventory_DevSetNextDrop_Request::set_has_itemdefid() {
  _has_bits_[0] |= 0x00000002u;
}
void CInventory_DevSetNextDrop_Request::clear_has_itemdefid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CInventory_DevSetNextDrop_Request::clear_itemdefid() {
  itemdefid_ = GOOGLE_ULONGLONG(0);
  clear_has_itemdefid();
}
::google::protobuf::uint64 CInventory_DevSetNextDrop_Request::itemdefid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_DevSetNextDrop_Request.itemdefid)
  return itemdefid_;
}
void CInventory_DevSetNextDrop_Request::set_itemdefid(::google::protobuf::uint64 value) {
  set_has_itemdefid();
  itemdefid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_DevSetNextDrop_Request.itemdefid)
}

// optional string droptime = 3;
bool CInventory_DevSetNextDrop_Request::has_droptime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CInventory_DevSetNextDrop_Request::set_has_droptime() {
  _has_bits_[0] |= 0x00000001u;
}
void CInventory_DevSetNextDrop_Request::clear_has_droptime() {
  _has_bits_[0] &= ~0x00000001u;
}
void CInventory_DevSetNextDrop_Request::clear_droptime() {
  droptime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_droptime();
}
const ::std::string& CInventory_DevSetNextDrop_Request::droptime() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_DevSetNextDrop_Request.droptime)
  return droptime_.GetNoArena();
}
void CInventory_DevSetNextDrop_Request::set_droptime(const ::std::string& value) {
  set_has_droptime();
  droptime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_DevSetNextDrop_Request.droptime)
}
#if LANG_CXX11
void CInventory_DevSetNextDrop_Request::set_droptime(::std::string&& value) {
  set_has_droptime();
  droptime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CInventory_DevSetNextDrop_Request.droptime)
}
#endif
void CInventory_DevSetNextDrop_Request::set_droptime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_droptime();
  droptime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CInventory_DevSetNextDrop_Request.droptime)
}
void CInventory_DevSetNextDrop_Request::set_droptime(const char* value, size_t size) {
  set_has_droptime();
  droptime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CInventory_DevSetNextDrop_Request.droptime)
}
::std::string* CInventory_DevSetNextDrop_Request::mutable_droptime() {
  set_has_droptime();
  // @@protoc_insertion_point(field_mutable:proto.steam.CInventory_DevSetNextDrop_Request.droptime)
  return droptime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CInventory_DevSetNextDrop_Request::release_droptime() {
  // @@protoc_insertion_point(field_release:proto.steam.CInventory_DevSetNextDrop_Request.droptime)
  clear_has_droptime();
  return droptime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CInventory_DevSetNextDrop_Request::set_allocated_droptime(::std::string* droptime) {
  if (droptime != NULL) {
    set_has_droptime();
  } else {
    clear_has_droptime();
  }
  droptime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), droptime);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CInventory_DevSetNextDrop_Request.droptime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_SplitItemStack_Request::kAppidFieldNumber;
const int CInventory_SplitItemStack_Request::kItemidFieldNumber;
const int CInventory_SplitItemStack_Request::kQuantityFieldNumber;
const int CInventory_SplitItemStack_Request::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_SplitItemStack_Request::CInventory_SplitItemStack_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_SplitItemStack_Request)
}
CInventory_SplitItemStack_Request::CInventory_SplitItemStack_Request(const CInventory_SplitItemStack_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp()) {
    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  ::memcpy(&itemid_, &from.itemid_,
    reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&itemid_) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_SplitItemStack_Request)
}

void CInventory_SplitItemStack_Request::SharedCtor() {
  _cached_size_ = 0;
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&itemid_, 0, reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&itemid_) + sizeof(quantity_));
}

CInventory_SplitItemStack_Request::~CInventory_SplitItemStack_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_SplitItemStack_Request)
  SharedDtor();
}

void CInventory_SplitItemStack_Request::SharedDtor() {
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CInventory_SplitItemStack_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CInventory_SplitItemStack_Request::descriptor() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CInventory_SplitItemStack_Request& CInventory_SplitItemStack_Request::default_instance() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CInventory_SplitItemStack_Request* CInventory_SplitItemStack_Request::New(::google::protobuf::Arena* arena) const {
  CInventory_SplitItemStack_Request* n = new CInventory_SplitItemStack_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CInventory_SplitItemStack_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_SplitItemStack_Request)
  if (has_timestamp()) {
    GOOGLE_DCHECK(!timestamp_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*timestamp_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&itemid_, 0, reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&itemid_) + sizeof(quantity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CInventory_SplitItemStack_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_SplitItemStack_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 itemid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quantity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CInventory_SplitItemStack_Request.timestamp");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_SplitItemStack_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_SplitItemStack_Request)
  return false;
#undef DO_
}

void CInventory_SplitItemStack_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_SplitItemStack_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->itemid(), output);
  }

  // optional uint32 quantity = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->quantity(), output);
  }

  // optional string timestamp = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_SplitItemStack_Request.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_SplitItemStack_Request)
}

::google::protobuf::uint8* CInventory_SplitItemStack_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_SplitItemStack_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->itemid(), target);
  }

  // optional uint32 quantity = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->quantity(), target);
  }

  // optional string timestamp = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_SplitItemStack_Request.timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_SplitItemStack_Request)
  return target;
}

size_t CInventory_SplitItemStack_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_SplitItemStack_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional uint64 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 quantity = 3;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CInventory_SplitItemStack_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_SplitItemStack_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_SplitItemStack_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CInventory_SplitItemStack_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_SplitItemStack_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_SplitItemStack_Request)
    MergeFrom(*source);
  }
}

void CInventory_SplitItemStack_Request::MergeFrom(const CInventory_SplitItemStack_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_SplitItemStack_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_timestamp();
      timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
    }
    if (cached_has_bits & 0x00000002u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      quantity_ = from.quantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_SplitItemStack_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_SplitItemStack_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_SplitItemStack_Request::CopyFrom(const CInventory_SplitItemStack_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_SplitItemStack_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_SplitItemStack_Request::IsInitialized() const {
  return true;
}

void CInventory_SplitItemStack_Request::Swap(CInventory_SplitItemStack_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_SplitItemStack_Request::InternalSwap(CInventory_SplitItemStack_Request* other) {
  timestamp_.Swap(&other->timestamp_);
  std::swap(itemid_, other->itemid_);
  std::swap(appid_, other->appid_);
  std::swap(quantity_, other->quantity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CInventory_SplitItemStack_Request::GetMetadata() const {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CInventory_SplitItemStack_Request

// optional uint32 appid = 1;
bool CInventory_SplitItemStack_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CInventory_SplitItemStack_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
void CInventory_SplitItemStack_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CInventory_SplitItemStack_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CInventory_SplitItemStack_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_SplitItemStack_Request.appid)
  return appid_;
}
void CInventory_SplitItemStack_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_SplitItemStack_Request.appid)
}

// optional uint64 itemid = 2;
bool CInventory_SplitItemStack_Request::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CInventory_SplitItemStack_Request::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
void CInventory_SplitItemStack_Request::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CInventory_SplitItemStack_Request::clear_itemid() {
  itemid_ = GOOGLE_ULONGLONG(0);
  clear_has_itemid();
}
::google::protobuf::uint64 CInventory_SplitItemStack_Request::itemid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_SplitItemStack_Request.itemid)
  return itemid_;
}
void CInventory_SplitItemStack_Request::set_itemid(::google::protobuf::uint64 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_SplitItemStack_Request.itemid)
}

// optional uint32 quantity = 3;
bool CInventory_SplitItemStack_Request::has_quantity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CInventory_SplitItemStack_Request::set_has_quantity() {
  _has_bits_[0] |= 0x00000008u;
}
void CInventory_SplitItemStack_Request::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000008u;
}
void CInventory_SplitItemStack_Request::clear_quantity() {
  quantity_ = 0u;
  clear_has_quantity();
}
::google::protobuf::uint32 CInventory_SplitItemStack_Request::quantity() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_SplitItemStack_Request.quantity)
  return quantity_;
}
void CInventory_SplitItemStack_Request::set_quantity(::google::protobuf::uint32 value) {
  set_has_quantity();
  quantity_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_SplitItemStack_Request.quantity)
}

// optional string timestamp = 4;
bool CInventory_SplitItemStack_Request::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CInventory_SplitItemStack_Request::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void CInventory_SplitItemStack_Request::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void CInventory_SplitItemStack_Request::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp();
}
const ::std::string& CInventory_SplitItemStack_Request::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_SplitItemStack_Request.timestamp)
  return timestamp_.GetNoArena();
}
void CInventory_SplitItemStack_Request::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_SplitItemStack_Request.timestamp)
}
#if LANG_CXX11
void CInventory_SplitItemStack_Request::set_timestamp(::std::string&& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CInventory_SplitItemStack_Request.timestamp)
}
#endif
void CInventory_SplitItemStack_Request::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CInventory_SplitItemStack_Request.timestamp)
}
void CInventory_SplitItemStack_Request::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CInventory_SplitItemStack_Request.timestamp)
}
::std::string* CInventory_SplitItemStack_Request::mutable_timestamp() {
  set_has_timestamp();
  // @@protoc_insertion_point(field_mutable:proto.steam.CInventory_SplitItemStack_Request.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CInventory_SplitItemStack_Request::release_timestamp() {
  // @@protoc_insertion_point(field_release:proto.steam.CInventory_SplitItemStack_Request.timestamp)
  clear_has_timestamp();
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CInventory_SplitItemStack_Request::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CInventory_SplitItemStack_Request.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_CombineItemStacks_Request::kAppidFieldNumber;
const int CInventory_CombineItemStacks_Request::kFromitemidFieldNumber;
const int CInventory_CombineItemStacks_Request::kDestitemidFieldNumber;
const int CInventory_CombineItemStacks_Request::kQuantityFieldNumber;
const int CInventory_CombineItemStacks_Request::kFromtimestampFieldNumber;
const int CInventory_CombineItemStacks_Request::kDesttimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_CombineItemStacks_Request::CInventory_CombineItemStacks_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_CombineItemStacks_Request)
}
CInventory_CombineItemStacks_Request::CInventory_CombineItemStacks_Request(const CInventory_CombineItemStacks_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fromtimestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fromtimestamp()) {
    fromtimestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromtimestamp_);
  }
  desttimestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desttimestamp()) {
    desttimestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desttimestamp_);
  }
  ::memcpy(&fromitemid_, &from.fromitemid_,
    reinterpret_cast<char*>(&destitemid_) -
    reinterpret_cast<char*>(&fromitemid_) + sizeof(destitemid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_CombineItemStacks_Request)
}

void CInventory_CombineItemStacks_Request::SharedCtor() {
  _cached_size_ = 0;
  fromtimestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desttimestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fromitemid_, 0, reinterpret_cast<char*>(&destitemid_) -
    reinterpret_cast<char*>(&fromitemid_) + sizeof(destitemid_));
}

CInventory_CombineItemStacks_Request::~CInventory_CombineItemStacks_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_CombineItemStacks_Request)
  SharedDtor();
}

void CInventory_CombineItemStacks_Request::SharedDtor() {
  fromtimestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desttimestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CInventory_CombineItemStacks_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CInventory_CombineItemStacks_Request::descriptor() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CInventory_CombineItemStacks_Request& CInventory_CombineItemStacks_Request::default_instance() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CInventory_CombineItemStacks_Request* CInventory_CombineItemStacks_Request::New(::google::protobuf::Arena* arena) const {
  CInventory_CombineItemStacks_Request* n = new CInventory_CombineItemStacks_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CInventory_CombineItemStacks_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_CombineItemStacks_Request)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_fromtimestamp()) {
      GOOGLE_DCHECK(!fromtimestamp_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fromtimestamp_.UnsafeRawStringPointer())->clear();
    }
    if (has_desttimestamp()) {
      GOOGLE_DCHECK(!desttimestamp_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*desttimestamp_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&fromitemid_, 0, reinterpret_cast<char*>(&destitemid_) -
      reinterpret_cast<char*>(&fromitemid_) + sizeof(destitemid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CInventory_CombineItemStacks_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_CombineItemStacks_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 fromitemid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_fromitemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fromitemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 destitemid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_destitemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &destitemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quantity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fromtimestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromtimestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromtimestamp().data(), this->fromtimestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CInventory_CombineItemStacks_Request.fromtimestamp");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string desttimestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desttimestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desttimestamp().data(), this->desttimestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CInventory_CombineItemStacks_Request.desttimestamp");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_CombineItemStacks_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_CombineItemStacks_Request)
  return false;
#undef DO_
}

void CInventory_CombineItemStacks_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_CombineItemStacks_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 fromitemid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fromitemid(), output);
  }

  // optional uint64 destitemid = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->destitemid(), output);
  }

  // optional uint32 quantity = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->quantity(), output);
  }

  // optional string fromtimestamp = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromtimestamp().data(), this->fromtimestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_CombineItemStacks_Request.fromtimestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->fromtimestamp(), output);
  }

  // optional string desttimestamp = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desttimestamp().data(), this->desttimestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_CombineItemStacks_Request.desttimestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->desttimestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_CombineItemStacks_Request)
}

::google::protobuf::uint8* CInventory_CombineItemStacks_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_CombineItemStacks_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 fromitemid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fromitemid(), target);
  }

  // optional uint64 destitemid = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->destitemid(), target);
  }

  // optional uint32 quantity = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->quantity(), target);
  }

  // optional string fromtimestamp = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromtimestamp().data(), this->fromtimestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_CombineItemStacks_Request.fromtimestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->fromtimestamp(), target);
  }

  // optional string desttimestamp = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desttimestamp().data(), this->desttimestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_CombineItemStacks_Request.desttimestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->desttimestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_CombineItemStacks_Request)
  return target;
}

size_t CInventory_CombineItemStacks_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_CombineItemStacks_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string fromtimestamp = 5;
    if (has_fromtimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromtimestamp());
    }

    // optional string desttimestamp = 6;
    if (has_desttimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desttimestamp());
    }

    // optional uint64 fromitemid = 2;
    if (has_fromitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fromitemid());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 quantity = 4;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }

    // optional uint64 destitemid = 3;
    if (has_destitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->destitemid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CInventory_CombineItemStacks_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_CombineItemStacks_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_CombineItemStacks_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CInventory_CombineItemStacks_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_CombineItemStacks_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_CombineItemStacks_Request)
    MergeFrom(*source);
  }
}

void CInventory_CombineItemStacks_Request::MergeFrom(const CInventory_CombineItemStacks_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_CombineItemStacks_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fromtimestamp();
      fromtimestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromtimestamp_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_desttimestamp();
      desttimestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desttimestamp_);
    }
    if (cached_has_bits & 0x00000004u) {
      fromitemid_ = from.fromitemid_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000010u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000020u) {
      destitemid_ = from.destitemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_CombineItemStacks_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_CombineItemStacks_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_CombineItemStacks_Request::CopyFrom(const CInventory_CombineItemStacks_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_CombineItemStacks_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_CombineItemStacks_Request::IsInitialized() const {
  return true;
}

void CInventory_CombineItemStacks_Request::Swap(CInventory_CombineItemStacks_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_CombineItemStacks_Request::InternalSwap(CInventory_CombineItemStacks_Request* other) {
  fromtimestamp_.Swap(&other->fromtimestamp_);
  desttimestamp_.Swap(&other->desttimestamp_);
  std::swap(fromitemid_, other->fromitemid_);
  std::swap(appid_, other->appid_);
  std::swap(quantity_, other->quantity_);
  std::swap(destitemid_, other->destitemid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CInventory_CombineItemStacks_Request::GetMetadata() const {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CInventory_CombineItemStacks_Request

// optional uint32 appid = 1;
bool CInventory_CombineItemStacks_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CInventory_CombineItemStacks_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
void CInventory_CombineItemStacks_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CInventory_CombineItemStacks_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CInventory_CombineItemStacks_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_CombineItemStacks_Request.appid)
  return appid_;
}
void CInventory_CombineItemStacks_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_CombineItemStacks_Request.appid)
}

// optional uint64 fromitemid = 2;
bool CInventory_CombineItemStacks_Request::has_fromitemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CInventory_CombineItemStacks_Request::set_has_fromitemid() {
  _has_bits_[0] |= 0x00000004u;
}
void CInventory_CombineItemStacks_Request::clear_has_fromitemid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CInventory_CombineItemStacks_Request::clear_fromitemid() {
  fromitemid_ = GOOGLE_ULONGLONG(0);
  clear_has_fromitemid();
}
::google::protobuf::uint64 CInventory_CombineItemStacks_Request::fromitemid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_CombineItemStacks_Request.fromitemid)
  return fromitemid_;
}
void CInventory_CombineItemStacks_Request::set_fromitemid(::google::protobuf::uint64 value) {
  set_has_fromitemid();
  fromitemid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_CombineItemStacks_Request.fromitemid)
}

// optional uint64 destitemid = 3;
bool CInventory_CombineItemStacks_Request::has_destitemid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CInventory_CombineItemStacks_Request::set_has_destitemid() {
  _has_bits_[0] |= 0x00000020u;
}
void CInventory_CombineItemStacks_Request::clear_has_destitemid() {
  _has_bits_[0] &= ~0x00000020u;
}
void CInventory_CombineItemStacks_Request::clear_destitemid() {
  destitemid_ = GOOGLE_ULONGLONG(0);
  clear_has_destitemid();
}
::google::protobuf::uint64 CInventory_CombineItemStacks_Request::destitemid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_CombineItemStacks_Request.destitemid)
  return destitemid_;
}
void CInventory_CombineItemStacks_Request::set_destitemid(::google::protobuf::uint64 value) {
  set_has_destitemid();
  destitemid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_CombineItemStacks_Request.destitemid)
}

// optional uint32 quantity = 4;
bool CInventory_CombineItemStacks_Request::has_quantity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CInventory_CombineItemStacks_Request::set_has_quantity() {
  _has_bits_[0] |= 0x00000010u;
}
void CInventory_CombineItemStacks_Request::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000010u;
}
void CInventory_CombineItemStacks_Request::clear_quantity() {
  quantity_ = 0u;
  clear_has_quantity();
}
::google::protobuf::uint32 CInventory_CombineItemStacks_Request::quantity() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_CombineItemStacks_Request.quantity)
  return quantity_;
}
void CInventory_CombineItemStacks_Request::set_quantity(::google::protobuf::uint32 value) {
  set_has_quantity();
  quantity_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_CombineItemStacks_Request.quantity)
}

// optional string fromtimestamp = 5;
bool CInventory_CombineItemStacks_Request::has_fromtimestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CInventory_CombineItemStacks_Request::set_has_fromtimestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void CInventory_CombineItemStacks_Request::clear_has_fromtimestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void CInventory_CombineItemStacks_Request::clear_fromtimestamp() {
  fromtimestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromtimestamp();
}
const ::std::string& CInventory_CombineItemStacks_Request::fromtimestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_CombineItemStacks_Request.fromtimestamp)
  return fromtimestamp_.GetNoArena();
}
void CInventory_CombineItemStacks_Request::set_fromtimestamp(const ::std::string& value) {
  set_has_fromtimestamp();
  fromtimestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_CombineItemStacks_Request.fromtimestamp)
}
#if LANG_CXX11
void CInventory_CombineItemStacks_Request::set_fromtimestamp(::std::string&& value) {
  set_has_fromtimestamp();
  fromtimestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CInventory_CombineItemStacks_Request.fromtimestamp)
}
#endif
void CInventory_CombineItemStacks_Request::set_fromtimestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromtimestamp();
  fromtimestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CInventory_CombineItemStacks_Request.fromtimestamp)
}
void CInventory_CombineItemStacks_Request::set_fromtimestamp(const char* value, size_t size) {
  set_has_fromtimestamp();
  fromtimestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CInventory_CombineItemStacks_Request.fromtimestamp)
}
::std::string* CInventory_CombineItemStacks_Request::mutable_fromtimestamp() {
  set_has_fromtimestamp();
  // @@protoc_insertion_point(field_mutable:proto.steam.CInventory_CombineItemStacks_Request.fromtimestamp)
  return fromtimestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CInventory_CombineItemStacks_Request::release_fromtimestamp() {
  // @@protoc_insertion_point(field_release:proto.steam.CInventory_CombineItemStacks_Request.fromtimestamp)
  clear_has_fromtimestamp();
  return fromtimestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CInventory_CombineItemStacks_Request::set_allocated_fromtimestamp(::std::string* fromtimestamp) {
  if (fromtimestamp != NULL) {
    set_has_fromtimestamp();
  } else {
    clear_has_fromtimestamp();
  }
  fromtimestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromtimestamp);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CInventory_CombineItemStacks_Request.fromtimestamp)
}

// optional string desttimestamp = 6;
bool CInventory_CombineItemStacks_Request::has_desttimestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CInventory_CombineItemStacks_Request::set_has_desttimestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void CInventory_CombineItemStacks_Request::clear_has_desttimestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void CInventory_CombineItemStacks_Request::clear_desttimestamp() {
  desttimestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desttimestamp();
}
const ::std::string& CInventory_CombineItemStacks_Request::desttimestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_CombineItemStacks_Request.desttimestamp)
  return desttimestamp_.GetNoArena();
}
void CInventory_CombineItemStacks_Request::set_desttimestamp(const ::std::string& value) {
  set_has_desttimestamp();
  desttimestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_CombineItemStacks_Request.desttimestamp)
}
#if LANG_CXX11
void CInventory_CombineItemStacks_Request::set_desttimestamp(::std::string&& value) {
  set_has_desttimestamp();
  desttimestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CInventory_CombineItemStacks_Request.desttimestamp)
}
#endif
void CInventory_CombineItemStacks_Request::set_desttimestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desttimestamp();
  desttimestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CInventory_CombineItemStacks_Request.desttimestamp)
}
void CInventory_CombineItemStacks_Request::set_desttimestamp(const char* value, size_t size) {
  set_has_desttimestamp();
  desttimestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CInventory_CombineItemStacks_Request.desttimestamp)
}
::std::string* CInventory_CombineItemStacks_Request::mutable_desttimestamp() {
  set_has_desttimestamp();
  // @@protoc_insertion_point(field_mutable:proto.steam.CInventory_CombineItemStacks_Request.desttimestamp)
  return desttimestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CInventory_CombineItemStacks_Request::release_desttimestamp() {
  // @@protoc_insertion_point(field_release:proto.steam.CInventory_CombineItemStacks_Request.desttimestamp)
  clear_has_desttimestamp();
  return desttimestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CInventory_CombineItemStacks_Request::set_allocated_desttimestamp(::std::string* desttimestamp) {
  if (desttimestamp != NULL) {
    set_has_desttimestamp();
  } else {
    clear_has_desttimestamp();
  }
  desttimestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desttimestamp);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CInventory_CombineItemStacks_Request.desttimestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_GetItemDefMeta_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_GetItemDefMeta_Request::CInventory_GetItemDefMeta_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_GetItemDefMeta_Request)
}
CInventory_GetItemDefMeta_Request::CInventory_GetItemDefMeta_Request(const CInventory_GetItemDefMeta_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_GetItemDefMeta_Request)
}

void CInventory_GetItemDefMeta_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
}

CInventory_GetItemDefMeta_Request::~CInventory_GetItemDefMeta_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_GetItemDefMeta_Request)
  SharedDtor();
}

void CInventory_GetItemDefMeta_Request::SharedDtor() {
}

void CInventory_GetItemDefMeta_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CInventory_GetItemDefMeta_Request::descriptor() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CInventory_GetItemDefMeta_Request& CInventory_GetItemDefMeta_Request::default_instance() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CInventory_GetItemDefMeta_Request* CInventory_GetItemDefMeta_Request::New(::google::protobuf::Arena* arena) const {
  CInventory_GetItemDefMeta_Request* n = new CInventory_GetItemDefMeta_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CInventory_GetItemDefMeta_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_GetItemDefMeta_Request)
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CInventory_GetItemDefMeta_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_GetItemDefMeta_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_GetItemDefMeta_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_GetItemDefMeta_Request)
  return false;
#undef DO_
}

void CInventory_GetItemDefMeta_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_GetItemDefMeta_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_GetItemDefMeta_Request)
}

::google::protobuf::uint8* CInventory_GetItemDefMeta_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_GetItemDefMeta_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_GetItemDefMeta_Request)
  return target;
}

size_t CInventory_GetItemDefMeta_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_GetItemDefMeta_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 appid = 1;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CInventory_GetItemDefMeta_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_GetItemDefMeta_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_GetItemDefMeta_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CInventory_GetItemDefMeta_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_GetItemDefMeta_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_GetItemDefMeta_Request)
    MergeFrom(*source);
  }
}

void CInventory_GetItemDefMeta_Request::MergeFrom(const CInventory_GetItemDefMeta_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_GetItemDefMeta_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CInventory_GetItemDefMeta_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_GetItemDefMeta_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_GetItemDefMeta_Request::CopyFrom(const CInventory_GetItemDefMeta_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_GetItemDefMeta_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_GetItemDefMeta_Request::IsInitialized() const {
  return true;
}

void CInventory_GetItemDefMeta_Request::Swap(CInventory_GetItemDefMeta_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_GetItemDefMeta_Request::InternalSwap(CInventory_GetItemDefMeta_Request* other) {
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CInventory_GetItemDefMeta_Request::GetMetadata() const {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CInventory_GetItemDefMeta_Request

// optional uint32 appid = 1;
bool CInventory_GetItemDefMeta_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CInventory_GetItemDefMeta_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CInventory_GetItemDefMeta_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CInventory_GetItemDefMeta_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CInventory_GetItemDefMeta_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_GetItemDefMeta_Request.appid)
  return appid_;
}
void CInventory_GetItemDefMeta_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_GetItemDefMeta_Request.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CInventory_GetItemDefMeta_Response::kModifiedFieldNumber;
const int CInventory_GetItemDefMeta_Response::kDigestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CInventory_GetItemDefMeta_Response::CInventory_GetItemDefMeta_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CInventory_GetItemDefMeta_Response)
}
CInventory_GetItemDefMeta_Response::CInventory_GetItemDefMeta_Response(const CInventory_GetItemDefMeta_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  digest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_digest()) {
    digest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.digest_);
  }
  modified_ = from.modified_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CInventory_GetItemDefMeta_Response)
}

void CInventory_GetItemDefMeta_Response::SharedCtor() {
  _cached_size_ = 0;
  digest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modified_ = 0u;
}

CInventory_GetItemDefMeta_Response::~CInventory_GetItemDefMeta_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CInventory_GetItemDefMeta_Response)
  SharedDtor();
}

void CInventory_GetItemDefMeta_Response::SharedDtor() {
  digest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CInventory_GetItemDefMeta_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CInventory_GetItemDefMeta_Response::descriptor() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CInventory_GetItemDefMeta_Response& CInventory_GetItemDefMeta_Response::default_instance() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CInventory_GetItemDefMeta_Response* CInventory_GetItemDefMeta_Response::New(::google::protobuf::Arena* arena) const {
  CInventory_GetItemDefMeta_Response* n = new CInventory_GetItemDefMeta_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CInventory_GetItemDefMeta_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CInventory_GetItemDefMeta_Response)
  if (has_digest()) {
    GOOGLE_DCHECK(!digest_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*digest_.UnsafeRawStringPointer())->clear();
  }
  modified_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CInventory_GetItemDefMeta_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CInventory_GetItemDefMeta_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 modified = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_modified();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string digest = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_digest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->digest().data(), this->digest().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CInventory_GetItemDefMeta_Response.digest");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CInventory_GetItemDefMeta_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CInventory_GetItemDefMeta_Response)
  return false;
#undef DO_
}

void CInventory_GetItemDefMeta_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CInventory_GetItemDefMeta_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 modified = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->modified(), output);
  }

  // optional string digest = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->digest().data(), this->digest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_GetItemDefMeta_Response.digest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->digest(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CInventory_GetItemDefMeta_Response)
}

::google::protobuf::uint8* CInventory_GetItemDefMeta_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CInventory_GetItemDefMeta_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 modified = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->modified(), target);
  }

  // optional string digest = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->digest().data(), this->digest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CInventory_GetItemDefMeta_Response.digest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->digest(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CInventory_GetItemDefMeta_Response)
  return target;
}

size_t CInventory_GetItemDefMeta_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CInventory_GetItemDefMeta_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string digest = 2;
    if (has_digest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->digest());
    }

    // optional uint32 modified = 1;
    if (has_modified()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modified());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CInventory_GetItemDefMeta_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CInventory_GetItemDefMeta_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CInventory_GetItemDefMeta_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CInventory_GetItemDefMeta_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CInventory_GetItemDefMeta_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CInventory_GetItemDefMeta_Response)
    MergeFrom(*source);
  }
}

void CInventory_GetItemDefMeta_Response::MergeFrom(const CInventory_GetItemDefMeta_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CInventory_GetItemDefMeta_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_digest();
      digest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.digest_);
    }
    if (cached_has_bits & 0x00000002u) {
      modified_ = from.modified_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CInventory_GetItemDefMeta_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CInventory_GetItemDefMeta_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CInventory_GetItemDefMeta_Response::CopyFrom(const CInventory_GetItemDefMeta_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CInventory_GetItemDefMeta_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_GetItemDefMeta_Response::IsInitialized() const {
  return true;
}

void CInventory_GetItemDefMeta_Response::Swap(CInventory_GetItemDefMeta_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CInventory_GetItemDefMeta_Response::InternalSwap(CInventory_GetItemDefMeta_Response* other) {
  digest_.Swap(&other->digest_);
  std::swap(modified_, other->modified_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CInventory_GetItemDefMeta_Response::GetMetadata() const {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CInventory_GetItemDefMeta_Response

// optional uint32 modified = 1;
bool CInventory_GetItemDefMeta_Response::has_modified() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CInventory_GetItemDefMeta_Response::set_has_modified() {
  _has_bits_[0] |= 0x00000002u;
}
void CInventory_GetItemDefMeta_Response::clear_has_modified() {
  _has_bits_[0] &= ~0x00000002u;
}
void CInventory_GetItemDefMeta_Response::clear_modified() {
  modified_ = 0u;
  clear_has_modified();
}
::google::protobuf::uint32 CInventory_GetItemDefMeta_Response::modified() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_GetItemDefMeta_Response.modified)
  return modified_;
}
void CInventory_GetItemDefMeta_Response::set_modified(::google::protobuf::uint32 value) {
  set_has_modified();
  modified_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_GetItemDefMeta_Response.modified)
}

// optional string digest = 2;
bool CInventory_GetItemDefMeta_Response::has_digest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CInventory_GetItemDefMeta_Response::set_has_digest() {
  _has_bits_[0] |= 0x00000001u;
}
void CInventory_GetItemDefMeta_Response::clear_has_digest() {
  _has_bits_[0] &= ~0x00000001u;
}
void CInventory_GetItemDefMeta_Response::clear_digest() {
  digest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_digest();
}
const ::std::string& CInventory_GetItemDefMeta_Response::digest() const {
  // @@protoc_insertion_point(field_get:proto.steam.CInventory_GetItemDefMeta_Response.digest)
  return digest_.GetNoArena();
}
void CInventory_GetItemDefMeta_Response::set_digest(const ::std::string& value) {
  set_has_digest();
  digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CInventory_GetItemDefMeta_Response.digest)
}
#if LANG_CXX11
void CInventory_GetItemDefMeta_Response::set_digest(::std::string&& value) {
  set_has_digest();
  digest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CInventory_GetItemDefMeta_Response.digest)
}
#endif
void CInventory_GetItemDefMeta_Response::set_digest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_digest();
  digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CInventory_GetItemDefMeta_Response.digest)
}
void CInventory_GetItemDefMeta_Response::set_digest(const char* value, size_t size) {
  set_has_digest();
  digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CInventory_GetItemDefMeta_Response.digest)
}
::std::string* CInventory_GetItemDefMeta_Response::mutable_digest() {
  set_has_digest();
  // @@protoc_insertion_point(field_mutable:proto.steam.CInventory_GetItemDefMeta_Response.digest)
  return digest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CInventory_GetItemDefMeta_Response::release_digest() {
  // @@protoc_insertion_point(field_release:proto.steam.CInventory_GetItemDefMeta_Response.digest)
  clear_has_digest();
  return digest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CInventory_GetItemDefMeta_Response::set_allocated_digest(::std::string* digest) {
  if (digest != NULL) {
    set_has_digest();
  } else {
    clear_has_digest();
  }
  digest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), digest);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CInventory_GetItemDefMeta_Response.digest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Inventory::~Inventory() {}

const ::google::protobuf::ServiceDescriptor* Inventory::descriptor() {
  protobuf_steammessages_5finventory_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* Inventory::GetDescriptor() {
  return descriptor();
}

void Inventory::GetInventory(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_GetInventory_Request*,
                         ::proto::steam::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetInventory() not implemented.");
  done->Run();
}

void Inventory::ExchangeItem(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_ExchangeItem_Request*,
                         ::proto::steam::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ExchangeItem() not implemented.");
  done->Run();
}

void Inventory::GetEligiblePromoItemDefIDs(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Request*,
                         ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetEligiblePromoItemDefIDs() not implemented.");
  done->Run();
}

void Inventory::AddPromoItem(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_AddItem_Request*,
                         ::proto::steam::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddPromoItem() not implemented.");
  done->Run();
}

void Inventory::SafeModifyItem(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_SafeModifyItem_Request*,
                         ::proto::steam::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SafeModifyItem() not implemented.");
  done->Run();
}

void Inventory::ConsumePlaytime(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_ConsumePlaytime_Request*,
                         ::proto::steam::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ConsumePlaytime() not implemented.");
  done->Run();
}

void Inventory::ConsumeItem(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_ConsumeItem_Request*,
                         ::proto::steam::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ConsumeItem() not implemented.");
  done->Run();
}

void Inventory::DevGenerateItem(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_AddItem_Request*,
                         ::proto::steam::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DevGenerateItem() not implemented.");
  done->Run();
}

void Inventory::DevSetNextDrop(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_DevSetNextDrop_Request*,
                         ::proto::steam::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DevSetNextDrop() not implemented.");
  done->Run();
}

void Inventory::SplitItemStack(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_SplitItemStack_Request*,
                         ::proto::steam::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SplitItemStack() not implemented.");
  done->Run();
}

void Inventory::CombineItemStacks(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_CombineItemStacks_Request*,
                         ::proto::steam::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CombineItemStacks() not implemented.");
  done->Run();
}

void Inventory::GetItemDefMeta(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CInventory_GetItemDefMeta_Request*,
                         ::proto::steam::CInventory_GetItemDefMeta_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetItemDefMeta() not implemented.");
  done->Run();
}

void Inventory::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5finventory_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      GetInventory(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_GetInventory_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_Response*>(response),
             done);
      break;
    case 1:
      ExchangeItem(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_ExchangeItem_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_Response*>(response),
             done);
      break;
    case 2:
      GetEligiblePromoItemDefIDs(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Response*>(response),
             done);
      break;
    case 3:
      AddPromoItem(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_AddItem_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_Response*>(response),
             done);
      break;
    case 4:
      SafeModifyItem(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_SafeModifyItem_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_Response*>(response),
             done);
      break;
    case 5:
      ConsumePlaytime(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_ConsumePlaytime_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_Response*>(response),
             done);
      break;
    case 6:
      ConsumeItem(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_ConsumeItem_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_Response*>(response),
             done);
      break;
    case 7:
      DevGenerateItem(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_AddItem_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_Response*>(response),
             done);
      break;
    case 8:
      DevSetNextDrop(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_DevSetNextDrop_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_Response*>(response),
             done);
      break;
    case 9:
      SplitItemStack(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_SplitItemStack_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_Response*>(response),
             done);
      break;
    case 10:
      CombineItemStacks(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_CombineItemStacks_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_Response*>(response),
             done);
      break;
    case 11:
      GetItemDefMeta(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CInventory_GetItemDefMeta_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CInventory_GetItemDefMeta_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Inventory::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CInventory_GetInventory_Request::default_instance();
    case 1:
      return ::proto::steam::CInventory_ExchangeItem_Request::default_instance();
    case 2:
      return ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Request::default_instance();
    case 3:
      return ::proto::steam::CInventory_AddItem_Request::default_instance();
    case 4:
      return ::proto::steam::CInventory_SafeModifyItem_Request::default_instance();
    case 5:
      return ::proto::steam::CInventory_ConsumePlaytime_Request::default_instance();
    case 6:
      return ::proto::steam::CInventory_ConsumeItem_Request::default_instance();
    case 7:
      return ::proto::steam::CInventory_AddItem_Request::default_instance();
    case 8:
      return ::proto::steam::CInventory_DevSetNextDrop_Request::default_instance();
    case 9:
      return ::proto::steam::CInventory_SplitItemStack_Request::default_instance();
    case 10:
      return ::proto::steam::CInventory_CombineItemStacks_Request::default_instance();
    case 11:
      return ::proto::steam::CInventory_GetItemDefMeta_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& Inventory::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CInventory_Response::default_instance();
    case 1:
      return ::proto::steam::CInventory_Response::default_instance();
    case 2:
      return ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Response::default_instance();
    case 3:
      return ::proto::steam::CInventory_Response::default_instance();
    case 4:
      return ::proto::steam::CInventory_Response::default_instance();
    case 5:
      return ::proto::steam::CInventory_Response::default_instance();
    case 6:
      return ::proto::steam::CInventory_Response::default_instance();
    case 7:
      return ::proto::steam::CInventory_Response::default_instance();
    case 8:
      return ::proto::steam::CInventory_Response::default_instance();
    case 9:
      return ::proto::steam::CInventory_Response::default_instance();
    case 10:
      return ::proto::steam::CInventory_Response::default_instance();
    case 11:
      return ::proto::steam::CInventory_GetItemDefMeta_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Inventory_Stub::Inventory_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Inventory_Stub::Inventory_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Inventory_Stub::~Inventory_Stub() {
  if (owns_channel_) delete channel_;
}

void Inventory_Stub::GetInventory(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_GetInventory_Request* request,
                              ::proto::steam::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Inventory_Stub::ExchangeItem(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_ExchangeItem_Request* request,
                              ::proto::steam::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Inventory_Stub::GetEligiblePromoItemDefIDs(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Request* request,
                              ::proto::steam::CInventory_GetEligiblePromoItemDefIDs_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Inventory_Stub::AddPromoItem(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_AddItem_Request* request,
                              ::proto::steam::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Inventory_Stub::SafeModifyItem(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_SafeModifyItem_Request* request,
                              ::proto::steam::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Inventory_Stub::ConsumePlaytime(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_ConsumePlaytime_Request* request,
                              ::proto::steam::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void Inventory_Stub::ConsumeItem(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_ConsumeItem_Request* request,
                              ::proto::steam::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void Inventory_Stub::DevGenerateItem(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_AddItem_Request* request,
                              ::proto::steam::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void Inventory_Stub::DevSetNextDrop(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_DevSetNextDrop_Request* request,
                              ::proto::steam::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void Inventory_Stub::SplitItemStack(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_SplitItemStack_Request* request,
                              ::proto::steam::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void Inventory_Stub::CombineItemStacks(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_CombineItemStacks_Request* request,
                              ::proto::steam::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void Inventory_Stub::GetItemDefMeta(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CInventory_GetItemDefMeta_Request* request,
                              ::proto::steam::CInventory_GetItemDefMeta_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
