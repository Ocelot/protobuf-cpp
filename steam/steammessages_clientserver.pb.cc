// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_clientserver.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CMsgClientUDSP2PSessionStartedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUDSP2PSessionStarted> {
} _CMsgClientUDSP2PSessionStarted_default_instance_;
class CMsgClientUDSP2PSessionEndedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUDSP2PSessionEnded> {
} _CMsgClientUDSP2PSessionEnded_default_instance_;
class CMsgClientRegisterAuthTicketWithCMDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRegisterAuthTicketWithCM> {
} _CMsgClientRegisterAuthTicketWithCM_default_instance_;
class CMsgClientTicketAuthCompleteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientTicketAuthComplete> {
} _CMsgClientTicketAuthComplete_default_instance_;
class CMsgClientCMListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientCMList> {
} _CMsgClientCMList_default_instance_;
class CMsgClientP2PConnectionInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientP2PConnectionInfo> {
} _CMsgClientP2PConnectionInfo_default_instance_;
class CMsgClientP2PConnectionFailInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientP2PConnectionFailInfo> {
} _CMsgClientP2PConnectionFailInfo_default_instance_;
class CMsgClientGetAppOwnershipTicketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetAppOwnershipTicket> {
} _CMsgClientGetAppOwnershipTicket_default_instance_;
class CMsgClientGetAppOwnershipTicketResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetAppOwnershipTicketResponse> {
} _CMsgClientGetAppOwnershipTicketResponse_default_instance_;
class CMsgClientSessionTokenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSessionToken> {
} _CMsgClientSessionToken_default_instance_;
class CMsgClientGameConnectTokensDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGameConnectTokens> {
} _CMsgClientGameConnectTokens_default_instance_;
class CMsgGSServerTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGSServerType> {
} _CMsgGSServerType_default_instance_;
class CMsgGSStatusReplyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGSStatusReply> {
} _CMsgGSStatusReply_default_instance_;
class CMsgGSPlayerList_PlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGSPlayerList_Player> {
} _CMsgGSPlayerList_Player_default_instance_;
class CMsgGSPlayerListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGSPlayerList> {
} _CMsgGSPlayerList_default_instance_;
class CMsgGSUserPlayingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGSUserPlaying> {
} _CMsgGSUserPlaying_default_instance_;
class CMsgGSDisconnectNoticeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGSDisconnectNotice> {
} _CMsgGSDisconnectNotice_default_instance_;
class CMsgClientGamesPlayed_GamePlayedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGamesPlayed_GamePlayed> {
} _CMsgClientGamesPlayed_GamePlayed_default_instance_;
class CMsgClientGamesPlayedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGamesPlayed> {
} _CMsgClientGamesPlayed_default_instance_;
class CMsgGSApproveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGSApprove> {
} _CMsgGSApprove_default_instance_;
class CMsgGSDenyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGSDeny> {
} _CMsgGSDeny_default_instance_;
class CMsgGSKickDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGSKick> {
} _CMsgGSKick_default_instance_;
class CMsgClientAuthListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAuthList> {
} _CMsgClientAuthList_default_instance_;
class CMsgClientAuthListAckDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAuthListAck> {
} _CMsgClientAuthListAck_default_instance_;
class CMsgClientLicenseList_LicenseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLicenseList_License> {
} _CMsgClientLicenseList_License_default_instance_;
class CMsgClientLicenseListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLicenseList> {
} _CMsgClientLicenseList_default_instance_;
class CMsgClientLBSSetScoreDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLBSSetScore> {
} _CMsgClientLBSSetScore_default_instance_;
class CMsgClientLBSSetScoreResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLBSSetScoreResponse> {
} _CMsgClientLBSSetScoreResponse_default_instance_;
class CMsgClientLBSSetUGCDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLBSSetUGC> {
} _CMsgClientLBSSetUGC_default_instance_;
class CMsgClientLBSSetUGCResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLBSSetUGCResponse> {
} _CMsgClientLBSSetUGCResponse_default_instance_;
class CMsgClientLBSFindOrCreateLBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLBSFindOrCreateLB> {
} _CMsgClientLBSFindOrCreateLB_default_instance_;
class CMsgClientLBSFindOrCreateLBResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLBSFindOrCreateLBResponse> {
} _CMsgClientLBSFindOrCreateLBResponse_default_instance_;
class CMsgClientLBSGetLBEntriesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLBSGetLBEntries> {
} _CMsgClientLBSGetLBEntries_default_instance_;
class CMsgClientLBSGetLBEntriesResponse_EntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLBSGetLBEntriesResponse_Entry> {
} _CMsgClientLBSGetLBEntriesResponse_Entry_default_instance_;
class CMsgClientLBSGetLBEntriesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLBSGetLBEntriesResponse> {
} _CMsgClientLBSGetLBEntriesResponse_default_instance_;
class CMsgClientAppMinutesPlayedData_AppMinutesPlayedDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAppMinutesPlayedData_AppMinutesPlayedData> {
} _CMsgClientAppMinutesPlayedData_AppMinutesPlayedData_default_instance_;
class CMsgClientAppMinutesPlayedDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAppMinutesPlayedData> {
} _CMsgClientAppMinutesPlayedData_default_instance_;
class CMsgClientIsLimitedAccountDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientIsLimitedAccount> {
} _CMsgClientIsLimitedAccount_default_instance_;
class CMsgClientServerList_ServerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientServerList_Server> {
} _CMsgClientServerList_Server_default_instance_;
class CMsgClientServerListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientServerList> {
} _CMsgClientServerList_default_instance_;
class CMsgClientRequestedClientStats_StatsToSendDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRequestedClientStats_StatsToSend> {
} _CMsgClientRequestedClientStats_StatsToSend_default_instance_;
class CMsgClientRequestedClientStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRequestedClientStats> {
} _CMsgClientRequestedClientStats_default_instance_;
class CMsgClientStat2_StatDetailDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientStat2_StatDetail> {
} _CMsgClientStat2_StatDetail_default_instance_;
class CMsgClientStat2DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientStat2> {
} _CMsgClientStat2_default_instance_;
class CMsgClientMMSCreateLobbyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSCreateLobby> {
} _CMsgClientMMSCreateLobby_default_instance_;
class CMsgClientMMSCreateLobbyResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSCreateLobbyResponse> {
} _CMsgClientMMSCreateLobbyResponse_default_instance_;
class CMsgClientMMSJoinLobbyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSJoinLobby> {
} _CMsgClientMMSJoinLobby_default_instance_;
class CMsgClientMMSJoinLobbyResponse_MemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSJoinLobbyResponse_Member> {
} _CMsgClientMMSJoinLobbyResponse_Member_default_instance_;
class CMsgClientMMSJoinLobbyResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSJoinLobbyResponse> {
} _CMsgClientMMSJoinLobbyResponse_default_instance_;
class CMsgClientMMSLeaveLobbyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSLeaveLobby> {
} _CMsgClientMMSLeaveLobby_default_instance_;
class CMsgClientMMSLeaveLobbyResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSLeaveLobbyResponse> {
} _CMsgClientMMSLeaveLobbyResponse_default_instance_;
class CMsgClientMMSGetLobbyList_FilterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSGetLobbyList_Filter> {
} _CMsgClientMMSGetLobbyList_Filter_default_instance_;
class CMsgClientMMSGetLobbyListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSGetLobbyList> {
} _CMsgClientMMSGetLobbyList_default_instance_;
class CMsgClientMMSGetLobbyListResponse_LobbyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSGetLobbyListResponse_Lobby> {
} _CMsgClientMMSGetLobbyListResponse_Lobby_default_instance_;
class CMsgClientMMSGetLobbyListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSGetLobbyListResponse> {
} _CMsgClientMMSGetLobbyListResponse_default_instance_;
class CMsgClientMMSSetLobbyDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSSetLobbyData> {
} _CMsgClientMMSSetLobbyData_default_instance_;
class CMsgClientMMSSetLobbyDataResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSSetLobbyDataResponse> {
} _CMsgClientMMSSetLobbyDataResponse_default_instance_;
class CMsgClientMMSGetLobbyDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSGetLobbyData> {
} _CMsgClientMMSGetLobbyData_default_instance_;
class CMsgClientMMSLobbyData_MemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSLobbyData_Member> {
} _CMsgClientMMSLobbyData_Member_default_instance_;
class CMsgClientMMSLobbyDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSLobbyData> {
} _CMsgClientMMSLobbyData_default_instance_;
class CMsgClientMMSSendLobbyChatMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSSendLobbyChatMsg> {
} _CMsgClientMMSSendLobbyChatMsg_default_instance_;
class CMsgClientMMSLobbyChatMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSLobbyChatMsg> {
} _CMsgClientMMSLobbyChatMsg_default_instance_;
class CMsgClientMMSSetLobbyOwnerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSSetLobbyOwner> {
} _CMsgClientMMSSetLobbyOwner_default_instance_;
class CMsgClientMMSSetLobbyOwnerResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSSetLobbyOwnerResponse> {
} _CMsgClientMMSSetLobbyOwnerResponse_default_instance_;
class CMsgClientMMSSetLobbyLinkedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSSetLobbyLinked> {
} _CMsgClientMMSSetLobbyLinked_default_instance_;
class CMsgClientMMSSetLobbyGameServerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSSetLobbyGameServer> {
} _CMsgClientMMSSetLobbyGameServer_default_instance_;
class CMsgClientMMSLobbyGameServerSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSLobbyGameServerSet> {
} _CMsgClientMMSLobbyGameServerSet_default_instance_;
class CMsgClientMMSUserJoinedLobbyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSUserJoinedLobby> {
} _CMsgClientMMSUserJoinedLobby_default_instance_;
class CMsgClientMMSUserLeftLobbyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSUserLeftLobby> {
} _CMsgClientMMSUserLeftLobby_default_instance_;
class CMsgClientMMSInviteToLobbyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientMMSInviteToLobby> {
} _CMsgClientMMSInviteToLobby_default_instance_;
class CMsgClientUDSInviteToGameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUDSInviteToGame> {
} _CMsgClientUDSInviteToGame_default_instance_;
class CMsgClientChatInviteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientChatInvite> {
} _CMsgClientChatInvite_default_instance_;
class CMsgClientConnectionStats_Stats_LogonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientConnectionStats_Stats_Logon> {
} _CMsgClientConnectionStats_Stats_Logon_default_instance_;
class CMsgClientConnectionStats_Stats_UDPDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientConnectionStats_Stats_UDP> {
} _CMsgClientConnectionStats_Stats_UDP_default_instance_;
class CMsgClientConnectionStats_Stats_VConnDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientConnectionStats_Stats_VConn> {
} _CMsgClientConnectionStats_Stats_VConn_default_instance_;
class CMsgClientConnectionStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientConnectionStats> {
} _CMsgClientConnectionStats_default_instance_;
class CMsgClientServersAvailable_Server_Types_AvailableDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientServersAvailable_Server_Types_Available> {
} _CMsgClientServersAvailable_Server_Types_Available_default_instance_;
class CMsgClientServersAvailableDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientServersAvailable> {
} _CMsgClientServersAvailable_default_instance_;
class CMsgClientGetUserStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetUserStats> {
} _CMsgClientGetUserStats_default_instance_;
class CMsgClientGetUserStatsResponse_StatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetUserStatsResponse_Stats> {
} _CMsgClientGetUserStatsResponse_Stats_default_instance_;
class CMsgClientGetUserStatsResponse_Achievement_BlocksDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetUserStatsResponse_Achievement_Blocks> {
} _CMsgClientGetUserStatsResponse_Achievement_Blocks_default_instance_;
class CMsgClientGetUserStatsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetUserStatsResponse> {
} _CMsgClientGetUserStatsResponse_default_instance_;
class CMsgClientStoreUserStatsResponse_Stats_Failed_ValidationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientStoreUserStatsResponse_Stats_Failed_Validation> {
} _CMsgClientStoreUserStatsResponse_Stats_Failed_Validation_default_instance_;
class CMsgClientStoreUserStatsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientStoreUserStatsResponse> {
} _CMsgClientStoreUserStatsResponse_default_instance_;
class CMsgClientStoreUserStats2_StatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientStoreUserStats2_Stats> {
} _CMsgClientStoreUserStats2_Stats_default_instance_;
class CMsgClientStoreUserStats2DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientStoreUserStats2> {
} _CMsgClientStoreUserStats2_default_instance_;
class CMsgClientStatsUpdated_Updated_StatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientStatsUpdated_Updated_Stats> {
} _CMsgClientStatsUpdated_Updated_Stats_default_instance_;
class CMsgClientStatsUpdatedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientStatsUpdated> {
} _CMsgClientStatsUpdated_default_instance_;
class CMsgClientStoreUserStats_Stats_To_StoreDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientStoreUserStats_Stats_To_Store> {
} _CMsgClientStoreUserStats_Stats_To_Store_default_instance_;
class CMsgClientStoreUserStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientStoreUserStats> {
} _CMsgClientStoreUserStats_default_instance_;
class CMsgClientGetClientDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetClientDetails> {
} _CMsgClientGetClientDetails_default_instance_;
class CMsgClientReportOverlayDetourFailureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientReportOverlayDetourFailure> {
} _CMsgClientReportOverlayDetourFailure_default_instance_;
class CMsgClientGetClientDetailsResponse_GameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetClientDetailsResponse_Game> {
} _CMsgClientGetClientDetailsResponse_Game_default_instance_;
class CMsgClientGetClientDetailsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetClientDetailsResponse> {
} _CMsgClientGetClientDetailsResponse_default_instance_;
class CMsgClientGetClientAppListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetClientAppList> {
} _CMsgClientGetClientAppList_default_instance_;
class CMsgClientGetClientAppListResponse_App_DLCDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetClientAppListResponse_App_DLC> {
} _CMsgClientGetClientAppListResponse_App_DLC_default_instance_;
class CMsgClientGetClientAppListResponse_AppDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetClientAppListResponse_App> {
} _CMsgClientGetClientAppListResponse_App_default_instance_;
class CMsgClientGetClientAppListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetClientAppListResponse> {
} _CMsgClientGetClientAppListResponse_default_instance_;
class CMsgClientInstallClientAppDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientInstallClientApp> {
} _CMsgClientInstallClientApp_default_instance_;
class CMsgClientInstallClientAppResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientInstallClientAppResponse> {
} _CMsgClientInstallClientAppResponse_default_instance_;
class CMsgClientUninstallClientAppDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUninstallClientApp> {
} _CMsgClientUninstallClientApp_default_instance_;
class CMsgClientUninstallClientAppResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUninstallClientAppResponse> {
} _CMsgClientUninstallClientAppResponse_default_instance_;
class CMsgClientSetClientAppUpdateStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSetClientAppUpdateState> {
} _CMsgClientSetClientAppUpdateState_default_instance_;
class CMsgClientSetClientAppUpdateStateResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSetClientAppUpdateStateResponse> {
} _CMsgClientSetClientAppUpdateStateResponse_default_instance_;
class CMsgClientUFSUploadFileRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSUploadFileRequest> {
} _CMsgClientUFSUploadFileRequest_default_instance_;
class CMsgClientUFSUploadFileResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSUploadFileResponse> {
} _CMsgClientUFSUploadFileResponse_default_instance_;
class CMsgClientUFSUploadCommit_FileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSUploadCommit_File> {
} _CMsgClientUFSUploadCommit_File_default_instance_;
class CMsgClientUFSUploadCommitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSUploadCommit> {
} _CMsgClientUFSUploadCommit_default_instance_;
class CMsgClientUFSUploadCommitResponse_FileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSUploadCommitResponse_File> {
} _CMsgClientUFSUploadCommitResponse_File_default_instance_;
class CMsgClientUFSUploadCommitResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSUploadCommitResponse> {
} _CMsgClientUFSUploadCommitResponse_default_instance_;
class CMsgClientUFSFileChunkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSFileChunk> {
} _CMsgClientUFSFileChunk_default_instance_;
class CMsgClientUFSTransferHeartbeatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSTransferHeartbeat> {
} _CMsgClientUFSTransferHeartbeat_default_instance_;
class CMsgClientUFSUploadFileFinishedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSUploadFileFinished> {
} _CMsgClientUFSUploadFileFinished_default_instance_;
class CMsgClientUFSDeleteFileRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSDeleteFileRequest> {
} _CMsgClientUFSDeleteFileRequest_default_instance_;
class CMsgClientUFSDeleteFileResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSDeleteFileResponse> {
} _CMsgClientUFSDeleteFileResponse_default_instance_;
class CMsgClientUFSGetFileListForAppDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSGetFileListForApp> {
} _CMsgClientUFSGetFileListForApp_default_instance_;
class CMsgClientUFSGetFileListForAppResponse_FileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSGetFileListForAppResponse_File> {
} _CMsgClientUFSGetFileListForAppResponse_File_default_instance_;
class CMsgClientUFSGetFileListForAppResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSGetFileListForAppResponse> {
} _CMsgClientUFSGetFileListForAppResponse_default_instance_;
class CMsgClientUFSDownloadRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSDownloadRequest> {
} _CMsgClientUFSDownloadRequest_default_instance_;
class CMsgClientUFSDownloadResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSDownloadResponse> {
} _CMsgClientUFSDownloadResponse_default_instance_;
class CMsgClientUFSLoginRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSLoginRequest> {
} _CMsgClientUFSLoginRequest_default_instance_;
class CMsgClientUFSLoginResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSLoginResponse> {
} _CMsgClientUFSLoginResponse_default_instance_;
class CMsgClientRequestEncryptedAppTicketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRequestEncryptedAppTicket> {
} _CMsgClientRequestEncryptedAppTicket_default_instance_;
class CMsgClientRequestEncryptedAppTicketResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRequestEncryptedAppTicketResponse> {
} _CMsgClientRequestEncryptedAppTicketResponse_default_instance_;
class CMsgClientWalletInfoUpdateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientWalletInfoUpdate> {
} _CMsgClientWalletInfoUpdate_default_instance_;
class CMsgClientAppInfoUpdateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAppInfoUpdate> {
} _CMsgClientAppInfoUpdate_default_instance_;
class CMsgClientAppInfoChangesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAppInfoChanges> {
} _CMsgClientAppInfoChanges_default_instance_;
class CMsgClientAppInfoRequest_AppDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAppInfoRequest_App> {
} _CMsgClientAppInfoRequest_App_default_instance_;
class CMsgClientAppInfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAppInfoRequest> {
} _CMsgClientAppInfoRequest_default_instance_;
class CMsgClientAppInfoResponse_App_SectionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAppInfoResponse_App_Section> {
} _CMsgClientAppInfoResponse_App_Section_default_instance_;
class CMsgClientAppInfoResponse_AppDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAppInfoResponse_App> {
} _CMsgClientAppInfoResponse_App_default_instance_;
class CMsgClientAppInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAppInfoResponse> {
} _CMsgClientAppInfoResponse_default_instance_;
class CMsgClientPackageInfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPackageInfoRequest> {
} _CMsgClientPackageInfoRequest_default_instance_;
class CMsgClientPackageInfoResponse_PackageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPackageInfoResponse_Package> {
} _CMsgClientPackageInfoResponse_Package_default_instance_;
class CMsgClientPackageInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPackageInfoResponse> {
} _CMsgClientPackageInfoResponse_default_instance_;
class CMsgClientPICSChangesSinceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSChangesSinceRequest> {
} _CMsgClientPICSChangesSinceRequest_default_instance_;
class CMsgClientPICSChangesSinceResponse_PackageChangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSChangesSinceResponse_PackageChange> {
} _CMsgClientPICSChangesSinceResponse_PackageChange_default_instance_;
class CMsgClientPICSChangesSinceResponse_AppChangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSChangesSinceResponse_AppChange> {
} _CMsgClientPICSChangesSinceResponse_AppChange_default_instance_;
class CMsgClientPICSChangesSinceResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSChangesSinceResponse> {
} _CMsgClientPICSChangesSinceResponse_default_instance_;
class CMsgClientPICSProductInfoRequest_AppInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSProductInfoRequest_AppInfo> {
} _CMsgClientPICSProductInfoRequest_AppInfo_default_instance_;
class CMsgClientPICSProductInfoRequest_PackageInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSProductInfoRequest_PackageInfo> {
} _CMsgClientPICSProductInfoRequest_PackageInfo_default_instance_;
class CMsgClientPICSProductInfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSProductInfoRequest> {
} _CMsgClientPICSProductInfoRequest_default_instance_;
class CMsgClientPICSProductInfoResponse_AppInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSProductInfoResponse_AppInfo> {
} _CMsgClientPICSProductInfoResponse_AppInfo_default_instance_;
class CMsgClientPICSProductInfoResponse_PackageInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSProductInfoResponse_PackageInfo> {
} _CMsgClientPICSProductInfoResponse_PackageInfo_default_instance_;
class CMsgClientPICSProductInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSProductInfoResponse> {
} _CMsgClientPICSProductInfoResponse_default_instance_;
class CMsgClientPICSAccessTokenRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSAccessTokenRequest> {
} _CMsgClientPICSAccessTokenRequest_default_instance_;
class CMsgClientPICSAccessTokenResponse_PackageTokenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSAccessTokenResponse_PackageToken> {
} _CMsgClientPICSAccessTokenResponse_PackageToken_default_instance_;
class CMsgClientPICSAccessTokenResponse_AppTokenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSAccessTokenResponse_AppToken> {
} _CMsgClientPICSAccessTokenResponse_AppToken_default_instance_;
class CMsgClientPICSAccessTokenResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPICSAccessTokenResponse> {
} _CMsgClientPICSAccessTokenResponse_default_instance_;
class CMsgClientUFSGetUGCDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSGetUGCDetails> {
} _CMsgClientUFSGetUGCDetails_default_instance_;
class CMsgClientUFSGetUGCDetailsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSGetUGCDetailsResponse> {
} _CMsgClientUFSGetUGCDetailsResponse_default_instance_;
class CMsgClientUFSGetSingleFileInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSGetSingleFileInfo> {
} _CMsgClientUFSGetSingleFileInfo_default_instance_;
class CMsgClientUFSGetSingleFileInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSGetSingleFileInfoResponse> {
} _CMsgClientUFSGetSingleFileInfoResponse_default_instance_;
class CMsgClientUFSShareFileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSShareFile> {
} _CMsgClientUFSShareFile_default_instance_;
class CMsgClientUFSShareFileResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientUFSShareFileResponse> {
} _CMsgClientUFSShareFileResponse_default_instance_;
class CMsgClientAMGetClanOfficersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAMGetClanOfficers> {
} _CMsgClientAMGetClanOfficers_default_instance_;
class CMsgClientAMGetClanOfficersResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAMGetClanOfficersResponse> {
} _CMsgClientAMGetClanOfficersResponse_default_instance_;
class CMsgClientAMGetPersonaNameHistory_IdInstanceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAMGetPersonaNameHistory_IdInstance> {
} _CMsgClientAMGetPersonaNameHistory_IdInstance_default_instance_;
class CMsgClientAMGetPersonaNameHistoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAMGetPersonaNameHistory> {
} _CMsgClientAMGetPersonaNameHistory_default_instance_;
class CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstanceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance> {
} _CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_default_instance_;
class CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstanceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance> {
} _CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_default_instance_;
class CMsgClientAMGetPersonaNameHistoryResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAMGetPersonaNameHistoryResponse> {
} _CMsgClientAMGetPersonaNameHistoryResponse_default_instance_;
class CMsgClientDeregisterWithServerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientDeregisterWithServer> {
} _CMsgClientDeregisterWithServer_default_instance_;
class CMsgClientClanState_NameInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientClanState_NameInfo> {
} _CMsgClientClanState_NameInfo_default_instance_;
class CMsgClientClanState_UserCountsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientClanState_UserCounts> {
} _CMsgClientClanState_UserCounts_default_instance_;
class CMsgClientClanState_EventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientClanState_Event> {
} _CMsgClientClanState_Event_default_instance_;
class CMsgClientClanStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientClanState> {
} _CMsgClientClanState_default_instance_;

namespace protobuf_steammessages_5fclientserver_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[167];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUDSP2PSessionStarted, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUDSP2PSessionStarted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUDSP2PSessionStarted, steamid_remote_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUDSP2PSessionStarted, appid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUDSP2PSessionEnded, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUDSP2PSessionEnded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUDSP2PSessionEnded, steamid_remote_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUDSP2PSessionEnded, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUDSP2PSessionEnded, session_length_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUDSP2PSessionEnded, session_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUDSP2PSessionEnded, nattype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUDSP2PSessionEnded, bytes_recv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUDSP2PSessionEnded, bytes_sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUDSP2PSessionEnded, bytes_sent_relay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUDSP2PSessionEnded, bytes_recv_relay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUDSP2PSessionEnded, time_to_connect_ms_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRegisterAuthTicketWithCM, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRegisterAuthTicketWithCM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRegisterAuthTicketWithCM, protocol_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRegisterAuthTicketWithCM, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRegisterAuthTicketWithCM, client_instance_id_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientTicketAuthComplete, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientTicketAuthComplete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientTicketAuthComplete, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientTicketAuthComplete, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientTicketAuthComplete, estate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientTicketAuthComplete, eauth_session_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientTicketAuthComplete, deprecated_ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientTicketAuthComplete, ticket_crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientTicketAuthComplete, ticket_sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientTicketAuthComplete, owner_steam_id_),
  1,
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCMList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCMList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCMList, cm_addresses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCMList, cm_ports_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCMList, cm_websocket_addresses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCMList, percent_default_to_websocket_),
  ~0u,
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionInfo, steam_id_dest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionInfo, steam_id_src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionInfo, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionInfo, candidate_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionFailInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionFailInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionFailInfo, steam_id_dest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionFailInfo, steam_id_src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionFailInfo, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionFailInfo, ep2p_session_error_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAppOwnershipTicket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAppOwnershipTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAppOwnershipTicket, app_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAppOwnershipTicketResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAppOwnershipTicketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAppOwnershipTicketResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAppOwnershipTicketResponse, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAppOwnershipTicketResponse, ticket_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSessionToken, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSessionToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSessionToken, token_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGameConnectTokens, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGameConnectTokens, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGameConnectTokens, max_tokens_to_keep_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGameConnectTokens, tokens_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSServerType, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSServerType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSServerType, app_id_served_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSServerType, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSServerType, game_ip_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSServerType, game_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSServerType, game_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSServerType, game_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSServerType, game_query_port_),
  2,
  3,
  4,
  5,
  0,
  1,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSStatusReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSStatusReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSStatusReply, is_secure_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSPlayerList_Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSPlayerList_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSPlayerList_Player, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSPlayerList_Player, public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSPlayerList_Player, token_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSPlayerList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSPlayerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSPlayerList, players_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSUserPlaying, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSUserPlaying, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSUserPlaying, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSUserPlaying, public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSUserPlaying, token_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSDisconnectNotice, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSDisconnectNotice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSDisconnectNotice, steam_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, steam_id_gs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, game_ip_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, game_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, is_secure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, game_extra_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, game_data_blob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, process_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, streaming_provider_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, game_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, owner_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, vr_hmd_vendor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, vr_hmd_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, launch_option_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, primary_controller_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, primary_steam_controller_serial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, total_steam_controller_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, total_non_steam_controller_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, controller_workshop_file_id_),
  6,
  7,
  8,
  9,
  10,
  0,
  1,
  2,
  11,
  12,
  13,
  14,
  3,
  4,
  15,
  19,
  5,
  16,
  17,
  18,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed, games_played_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed, client_os_type_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSApprove, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSApprove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSApprove, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSApprove, owner_steam_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSDeny, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSDeny, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSDeny, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSDeny, edeny_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSDeny, deny_string_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSKick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSKick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSKick, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSKick, edeny_reason_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthList, tokens_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthList, last_request_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthList, last_request_seq_from_server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthList, tickets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthList, app_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthList, message_sequence_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthListAck, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthListAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthListAck, ticket_crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthListAck, app_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthListAck, message_sequence_),
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, package_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, time_created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, time_next_process_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, minute_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, minutes_used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, payment_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, purchase_country_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, license_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, territory_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, change_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, owner_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, initial_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, initial_time_unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, renewal_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, renewal_time_unit_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList, licenses_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSSetScore, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSSetScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSSetScore, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSSetScore, leaderboard_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSSetScore, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSSetScore, details_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSSetScore, upload_score_method_),
  1,
  2,
  3,
  0,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSSetScoreResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSSetScoreResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSSetScoreResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSSetScoreResponse, leaderboard_entry_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSSetScoreResponse, score_changed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSSetScoreResponse, global_rank_previous_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSSetScoreResponse, global_rank_new_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSSetUGC, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSSetUGC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSSetUGC, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSSetUGC, leaderboard_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSSetUGC, ugc_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSSetUGCResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSSetUGCResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSSetUGCResponse, eresult_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSFindOrCreateLB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSFindOrCreateLB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSFindOrCreateLB, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSFindOrCreateLB, leaderboard_sort_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSFindOrCreateLB, leaderboard_display_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSFindOrCreateLB, create_if_not_found_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSFindOrCreateLB, leaderboard_name_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSFindOrCreateLBResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSFindOrCreateLBResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSFindOrCreateLBResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSFindOrCreateLBResponse, leaderboard_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSFindOrCreateLBResponse, leaderboard_entry_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSFindOrCreateLBResponse, leaderboard_sort_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSFindOrCreateLBResponse, leaderboard_display_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSFindOrCreateLBResponse, leaderboard_name_),
  5,
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSGetLBEntries, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSGetLBEntries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSGetLBEntries, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSGetLBEntries, leaderboard_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSGetLBEntries, range_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSGetLBEntries, range_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSGetLBEntries, leaderboard_data_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSGetLBEntries, steamids_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSGetLBEntriesResponse_Entry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSGetLBEntriesResponse_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSGetLBEntriesResponse_Entry, steam_id_user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSGetLBEntriesResponse_Entry, global_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSGetLBEntriesResponse_Entry, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSGetLBEntriesResponse_Entry, details_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSGetLBEntriesResponse_Entry, ugc_id_),
  1,
  2,
  3,
  0,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSGetLBEntriesResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSGetLBEntriesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSGetLBEntriesResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSGetLBEntriesResponse, leaderboard_entry_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLBSGetLBEntriesResponse, entries_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppMinutesPlayedData_AppMinutesPlayedData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppMinutesPlayedData_AppMinutesPlayedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppMinutesPlayedData_AppMinutesPlayedData, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppMinutesPlayedData_AppMinutesPlayedData, forever_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppMinutesPlayedData_AppMinutesPlayedData, last_two_weeks_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppMinutesPlayedData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppMinutesPlayedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppMinutesPlayedData, minutes_played_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientIsLimitedAccount, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientIsLimitedAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientIsLimitedAccount, bis_limited_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientIsLimitedAccount, bis_community_banned_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientIsLimitedAccount, bis_locked_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientIsLimitedAccount, bis_limited_account_allowed_to_invite_friends_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServerList_Server, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServerList_Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServerList_Server, server_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServerList_Server, server_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServerList_Server, server_port_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServerList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServerList, servers_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestedClientStats_StatsToSend, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestedClientStats_StatsToSend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestedClientStats_StatsToSend, client_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestedClientStats_StatsToSend, stat_aggregate_method_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestedClientStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestedClientStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestedClientStats, stats_to_send_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStat2_StatDetail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStat2_StatDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStat2_StatDetail, client_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStat2_StatDetail, ll_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStat2_StatDetail, time_of_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStat2_StatDetail, cell_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStat2_StatDetail, depot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStat2_StatDetail, app_id_),
  1,
  0,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStat2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStat2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStat2, stat_detail_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSCreateLobby, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSCreateLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSCreateLobby, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSCreateLobby, max_members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSCreateLobby, lobby_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSCreateLobby, lobby_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSCreateLobby, cell_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSCreateLobby, public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSCreateLobby, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSCreateLobby, persona_name_owner_),
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSCreateLobbyResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSCreateLobbyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSCreateLobbyResponse, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSCreateLobbyResponse, steam_id_lobby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSCreateLobbyResponse, eresult_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSJoinLobby, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSJoinLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSJoinLobby, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSJoinLobby, steam_id_lobby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSJoinLobby, persona_name_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSJoinLobbyResponse_Member, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSJoinLobbyResponse_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSJoinLobbyResponse_Member, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSJoinLobbyResponse_Member, persona_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSJoinLobbyResponse_Member, metadata_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSJoinLobbyResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSJoinLobbyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSJoinLobbyResponse, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSJoinLobbyResponse, steam_id_lobby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSJoinLobbyResponse, chat_room_enter_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSJoinLobbyResponse, max_members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSJoinLobbyResponse, lobby_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSJoinLobbyResponse, lobby_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSJoinLobbyResponse, steam_id_owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSJoinLobbyResponse, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSJoinLobbyResponse, members_),
  2,
  1,
  3,
  4,
  5,
  7,
  6,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLeaveLobby, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLeaveLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLeaveLobby, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLeaveLobby, steam_id_lobby_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLeaveLobbyResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLeaveLobbyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLeaveLobbyResponse, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLeaveLobbyResponse, steam_id_lobby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLeaveLobbyResponse, eresult_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyList_Filter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyList_Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyList_Filter, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyList_Filter, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyList_Filter, comparision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyList_Filter, filter_type_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyList, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyList, num_lobbies_requested_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyList, cell_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyList, public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyList, filters_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyListResponse_Lobby, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyListResponse_Lobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyListResponse_Lobby, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyListResponse_Lobby, max_members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyListResponse_Lobby, lobby_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyListResponse_Lobby, lobby_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyListResponse_Lobby, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyListResponse_Lobby, num_members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyListResponse_Lobby, distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyListResponse_Lobby, weight_),
  1,
  2,
  3,
  4,
  0,
  5,
  7,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyListResponse, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyListResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyListResponse, lobbies_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyData, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyData, steam_id_lobby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyData, steam_id_member_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyData, max_members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyData, lobby_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyData, lobby_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyData, metadata_),
  2,
  1,
  4,
  3,
  5,
  6,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyDataResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyDataResponse, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyDataResponse, steam_id_lobby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyDataResponse, eresult_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyData, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSGetLobbyData, steam_id_lobby_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyData_Member, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyData_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyData_Member, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyData_Member, persona_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyData_Member, metadata_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyData, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyData, steam_id_lobby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyData, num_members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyData, max_members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyData, lobby_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyData, lobby_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyData, steam_id_owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyData, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyData, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyData, lobby_cellid_),
  2,
  1,
  3,
  4,
  5,
  7,
  6,
  0,
  ~0u,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSendLobbyChatMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSendLobbyChatMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSendLobbyChatMsg, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSendLobbyChatMsg, steam_id_lobby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSendLobbyChatMsg, steam_id_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSendLobbyChatMsg, lobby_message_),
  3,
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyChatMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyChatMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyChatMsg, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyChatMsg, steam_id_lobby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyChatMsg, steam_id_sender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyChatMsg, lobby_message_),
  3,
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyOwner, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyOwner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyOwner, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyOwner, steam_id_lobby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyOwner, steam_id_new_owner_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyOwnerResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyOwnerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyOwnerResponse, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyOwnerResponse, steam_id_lobby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyOwnerResponse, eresult_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyLinked, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyLinked, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyLinked, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyLinked, steam_id_lobby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyLinked, steam_id_lobby2_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyGameServer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyGameServer, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyGameServer, steam_id_lobby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyGameServer, game_server_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyGameServer, game_server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSSetLobbyGameServer, game_server_steam_id_),
  1,
  0,
  2,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyGameServerSet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyGameServerSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyGameServerSet, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyGameServerSet, steam_id_lobby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyGameServerSet, game_server_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyGameServerSet, game_server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSLobbyGameServerSet, game_server_steam_id_),
  1,
  0,
  2,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSUserJoinedLobby, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSUserJoinedLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSUserJoinedLobby, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSUserJoinedLobby, steam_id_lobby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSUserJoinedLobby, steam_id_user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSUserJoinedLobby, persona_name_),
  3,
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSUserLeftLobby, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSUserLeftLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSUserLeftLobby, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSUserLeftLobby, steam_id_lobby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSUserLeftLobby, steam_id_user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSUserLeftLobby, persona_name_),
  3,
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSInviteToLobby, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSInviteToLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSInviteToLobby, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSInviteToLobby, steam_id_lobby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientMMSInviteToLobby, steam_id_user_invited_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUDSInviteToGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUDSInviteToGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUDSInviteToGame, steam_id_dest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUDSInviteToGame, steam_id_src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUDSInviteToGame, connect_string_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatInvite, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatInvite, steam_id_invited_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatInvite, steam_id_chat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatInvite, steam_id_patron_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatInvite, chatroom_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatInvite, steam_id_friend_chat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatInvite, chat_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatInvite, game_id_),
  1,
  2,
  3,
  6,
  4,
  0,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, connect_attempts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, connect_successes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, connect_failures_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, connections_dropped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, seconds_running_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, msec_tologonthistime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, count_bad_cms_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_UDP, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_UDP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_UDP, pkts_sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_UDP, bytes_sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_UDP, pkts_recv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_UDP, pkts_processed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_UDP, bytes_recv_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, connections_udp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, connections_tcp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, stats_udp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, pkts_abandoned_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, conn_req_received_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, pkts_resent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, msgs_sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, msgs_sent_failed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, msgs_recv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, datagrams_sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, datagrams_recv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, bad_pkts_recv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, unknown_conn_pkts_recv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, missed_pkts_recv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, dup_pkts_recv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, failed_connect_challenges_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, micro_sec_avg_latency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, micro_sec_min_latency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, micro_sec_max_latency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, mem_pool_msg_in_use_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats, stats_logon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats, stats_vconn_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServersAvailable_Server_Types_Available, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServersAvailable_Server_Types_Available, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServersAvailable_Server_Types_Available, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServersAvailable_Server_Types_Available, changed_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServersAvailable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServersAvailable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServersAvailable, server_types_available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServersAvailable, server_type_for_auth_services_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetUserStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetUserStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetUserStats, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetUserStats, crc_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetUserStats, schema_local_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetUserStats, steam_id_for_user_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetUserStatsResponse_Stats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetUserStatsResponse_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetUserStatsResponse_Stats, stat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetUserStatsResponse_Stats, stat_value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetUserStatsResponse_Achievement_Blocks, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetUserStatsResponse_Achievement_Blocks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetUserStatsResponse_Achievement_Blocks, achievement_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetUserStatsResponse_Achievement_Blocks, unlock_time_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetUserStatsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetUserStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetUserStatsResponse, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetUserStatsResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetUserStatsResponse, crc_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetUserStatsResponse, schema_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetUserStatsResponse, stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetUserStatsResponse, achievement_blocks_),
  1,
  3,
  2,
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStatsResponse_Stats_Failed_Validation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStatsResponse_Stats_Failed_Validation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStatsResponse_Stats_Failed_Validation, stat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStatsResponse_Stats_Failed_Validation, reverted_stat_value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStatsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStatsResponse, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStatsResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStatsResponse, crc_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStatsResponse, stats_failed_validation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStatsResponse, stats_out_of_date_),
  0,
  3,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStats2_Stats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStats2_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStats2_Stats, stat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStats2_Stats, stat_value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStats2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStats2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStats2, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStats2, settor_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStats2, settee_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStats2, crc_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStats2, explicit_reset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStats2, stats_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStatsUpdated_Updated_Stats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStatsUpdated_Updated_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStatsUpdated_Updated_Stats, stat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStatsUpdated_Updated_Stats, stat_value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStatsUpdated, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStatsUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStatsUpdated, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStatsUpdated, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStatsUpdated, crc_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStatsUpdated, updated_stats_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStats_Stats_To_Store, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStats_Stats_To_Store, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStats_Stats_To_Store, stat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStats_Stats_To_Store, stat_value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStats, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStats, explicit_reset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStoreUserStats, stats_to_store_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientReportOverlayDetourFailure, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientReportOverlayDetourFailure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientReportOverlayDetourFailure, failure_strings_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientDetailsResponse_Game, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientDetailsResponse_Game, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientDetailsResponse_Game, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientDetailsResponse_Game, extra_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientDetailsResponse_Game, time_running_sec_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientDetailsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientDetailsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientDetailsResponse, package_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientDetailsResponse, protocol_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientDetailsResponse, os_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientDetailsResponse, machine_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientDetailsResponse, ip_public_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientDetailsResponse, ip_private_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientDetailsResponse, bytes_available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientDetailsResponse, games_running_),
  4,
  5,
  0,
  1,
  2,
  3,
  6,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppList, media_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppList, tools_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppList, games_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppList, only_installed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppList, only_changing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppList, comics_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App_DLC, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App_DLC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App_DLC, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App_DLC, installed_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App, app_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App, favorite_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App, installed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App, auto_update_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App, bytes_downloaded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App, bytes_needed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App, bytes_download_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App, download_paused_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App, num_downloading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App, num_paused_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App, changing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App, available_on_platform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App, dlcs_),
  2,
  0,
  1,
  3,
  4,
  5,
  7,
  8,
  9,
  6,
  10,
  11,
  12,
  13,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse, apps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClientAppListResponse, bytes_available_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientInstallClientApp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientInstallClientApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientInstallClientApp, appid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientInstallClientAppResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientInstallClientAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientInstallClientAppResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUninstallClientApp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUninstallClientApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUninstallClientApp, appid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUninstallClientAppResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUninstallClientAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUninstallClientAppResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSetClientAppUpdateState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSetClientAppUpdateState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSetClientAppUpdateState, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSetClientAppUpdateState, update_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSetClientAppUpdateStateResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSetClientAppUpdateStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSetClientAppUpdateStateResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileRequest, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileRequest, file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileRequest, raw_file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileRequest, sha_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileRequest, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileRequest, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileRequest, platforms_to_sync_deprecated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileRequest, platforms_to_sync_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileRequest, cell_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileRequest, can_encrypt_),
  2,
  3,
  5,
  0,
  4,
  1,
  6,
  9,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileResponse, sha_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileResponse, use_http_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileResponse, http_host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileResponse, http_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileResponse, kv_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileResponse, use_https_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileResponse, encrypt_file_),
  7,
  0,
  4,
  1,
  2,
  3,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadCommit_File, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadCommit_File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadCommit_File, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadCommit_File, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadCommit_File, sha_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadCommit_File, cub_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadCommit_File, file_name_),
  4,
  2,
  0,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadCommit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadCommit, files_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadCommitResponse_File, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadCommitResponse_File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadCommitResponse_File, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadCommitResponse_File, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadCommitResponse_File, sha_file_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadCommitResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadCommitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadCommitResponse, files_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSFileChunk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSFileChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSFileChunk, sha_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSFileChunk, file_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSFileChunk, data_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSTransferHeartbeat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSTransferHeartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileFinished, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileFinished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileFinished, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSUploadFileFinished, sha_file_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDeleteFileRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDeleteFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDeleteFileRequest, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDeleteFileRequest, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDeleteFileRequest, is_explicit_delete_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDeleteFileResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDeleteFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDeleteFileResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDeleteFileResponse, file_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetFileListForApp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetFileListForApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetFileListForApp, apps_to_query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetFileListForApp, send_path_prefixes_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetFileListForAppResponse_File, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetFileListForAppResponse_File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetFileListForAppResponse_File, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetFileListForAppResponse_File, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetFileListForAppResponse_File, sha_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetFileListForAppResponse_File, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetFileListForAppResponse_File, raw_file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetFileListForAppResponse_File, is_explicit_delete_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetFileListForAppResponse_File, platforms_to_sync_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetFileListForAppResponse_File, path_prefix_index_),
  2,
  0,
  1,
  4,
  3,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetFileListForAppResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetFileListForAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetFileListForAppResponse, files_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetFileListForAppResponse, path_prefixes_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDownloadRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDownloadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDownloadRequest, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDownloadRequest, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDownloadRequest, can_handle_http_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDownloadResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDownloadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDownloadResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDownloadResponse, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDownloadResponse, file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDownloadResponse, raw_file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDownloadResponse, sha_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDownloadResponse, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDownloadResponse, is_explicit_delete_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDownloadResponse, use_http_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDownloadResponse, http_host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDownloadResponse, http_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDownloadResponse, kv_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDownloadResponse, use_https_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSDownloadResponse, encrypted_),
  12,
  4,
  5,
  7,
  0,
  6,
  8,
  9,
  1,
  2,
  3,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSLoginRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSLoginRequest, protocol_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSLoginRequest, am_session_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSLoginRequest, apps_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSLoginResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSLoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSLoginResponse, eresult_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestEncryptedAppTicket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestEncryptedAppTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestEncryptedAppTicket, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestEncryptedAppTicket, userdata_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestEncryptedAppTicketResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestEncryptedAppTicketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestEncryptedAppTicketResponse, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestEncryptedAppTicketResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestEncryptedAppTicketResponse, encrypted_app_ticket_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWalletInfoUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWalletInfoUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWalletInfoUpdate, has_wallet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWalletInfoUpdate, balance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWalletInfoUpdate, currency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWalletInfoUpdate, balance_delayed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWalletInfoUpdate, balance64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWalletInfoUpdate, balance64_delayed_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoUpdate, last_changenumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoUpdate, send_changelist_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoChanges, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoChanges, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoChanges, current_change_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoChanges, force_full_update_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoChanges, appids_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoRequest_App, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoRequest_App, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoRequest_App, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoRequest_App, section_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoRequest_App, section_crc_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoRequest, apps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoRequest, supports_batches_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoResponse_App_Section, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoResponse_App_Section, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoResponse_App_Section, section_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoResponse_App_Section, section_kv_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoResponse_App, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoResponse_App, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoResponse_App, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoResponse_App, change_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoResponse_App, sections_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoResponse, apps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoResponse, apps_unknown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAppInfoResponse, apps_pending_),
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPackageInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPackageInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPackageInfoRequest, package_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPackageInfoRequest, meta_data_only_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPackageInfoResponse_Package, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPackageInfoResponse_Package, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPackageInfoResponse_Package, package_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPackageInfoResponse_Package, change_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPackageInfoResponse_Package, sha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPackageInfoResponse_Package, buffer_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPackageInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPackageInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPackageInfoResponse, packages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPackageInfoResponse, packages_unknown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPackageInfoResponse, packages_pending_),
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceRequest, since_change_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceRequest, send_app_info_changes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceRequest, send_package_info_changes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceRequest, num_app_info_cached_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceRequest, num_package_info_cached_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse_PackageChange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse_PackageChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse_PackageChange, packageid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse_PackageChange, change_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse_PackageChange, needs_token_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse_AppChange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse_AppChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse_AppChange, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse_AppChange, change_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse_AppChange, needs_token_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse, current_change_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse, since_change_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse, force_full_update_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse, package_changes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse, app_changes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse, force_full_app_update_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse, force_full_package_update_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoRequest_AppInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoRequest_AppInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoRequest_AppInfo, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoRequest_AppInfo, access_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoRequest_AppInfo, only_public_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoRequest_PackageInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoRequest_PackageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoRequest_PackageInfo, packageid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoRequest_PackageInfo, access_token_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoRequest, packages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoRequest, apps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoRequest, meta_data_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoRequest, num_prev_failed_),
  ~0u,
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse_AppInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse_AppInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse_AppInfo, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse_AppInfo, change_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse_AppInfo, missing_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse_AppInfo, sha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse_AppInfo, buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse_AppInfo, only_public_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse_AppInfo, size_),
  2,
  3,
  4,
  0,
  1,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse_PackageInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse_PackageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse_PackageInfo, packageid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse_PackageInfo, change_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse_PackageInfo, missing_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse_PackageInfo, sha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse_PackageInfo, buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse_PackageInfo, size_),
  2,
  3,
  4,
  0,
  1,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse, apps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse, unknown_appids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse, packages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse, unknown_packageids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse, meta_data_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse, response_pending_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse, http_min_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSProductInfoResponse, http_host_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSAccessTokenRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSAccessTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSAccessTokenRequest, packageids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSAccessTokenRequest, appids_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSAccessTokenResponse_PackageToken, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSAccessTokenResponse_PackageToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSAccessTokenResponse_PackageToken, packageid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSAccessTokenResponse_PackageToken, access_token_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSAccessTokenResponse_AppToken, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSAccessTokenResponse_AppToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSAccessTokenResponse_AppToken, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSAccessTokenResponse_AppToken, access_token_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSAccessTokenResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSAccessTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSAccessTokenResponse, package_access_tokens_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSAccessTokenResponse, package_denied_tokens_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSAccessTokenResponse, app_access_tokens_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPICSAccessTokenResponse, app_denied_tokens_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetUGCDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetUGCDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetUGCDetails, hcontent_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetUGCDetailsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetUGCDetailsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetUGCDetailsResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetUGCDetailsResponse, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetUGCDetailsResponse, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetUGCDetailsResponse, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetUGCDetailsResponse, steamid_creator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetUGCDetailsResponse, file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetUGCDetailsResponse, compressed_file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetUGCDetailsResponse, rangecheck_host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetUGCDetailsResponse, file_encoded_sha1_),
  8,
  0,
  4,
  1,
  6,
  5,
  7,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetSingleFileInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetSingleFileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetSingleFileInfo, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetSingleFileInfo, file_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetSingleFileInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetSingleFileInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetSingleFileInfoResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetSingleFileInfoResponse, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetSingleFileInfoResponse, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetSingleFileInfoResponse, sha_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetSingleFileInfoResponse, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetSingleFileInfoResponse, raw_file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSGetSingleFileInfoResponse, is_explicit_delete_),
  6,
  2,
  0,
  1,
  4,
  3,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSShareFile, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSShareFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSShareFile, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSShareFile, file_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSShareFileResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSShareFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSShareFileResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUFSShareFileResponse, hcontent_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetClanOfficers, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetClanOfficers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetClanOfficers, steamid_clan_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetClanOfficersResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetClanOfficersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetClanOfficersResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetClanOfficersResponse, steamid_clan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetClanOfficersResponse, officer_count_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistory_IdInstance, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistory_IdInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistory_IdInstance, steamid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistory, id_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistory, ids_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance, name_since_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance, name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance, names_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse, responses_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeregisterWithServer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeregisterWithServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeregisterWithServer, eservertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeregisterWithServer, app_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_NameInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_NameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_NameInfo, clan_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_NameInfo, sha_avatar_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_UserCounts, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_UserCounts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_UserCounts, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_UserCounts, online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_UserCounts, chatting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_UserCounts, in_game_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_Event, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_Event, gid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_Event, event_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_Event, headline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_Event, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_Event, just_posted_),
  1,
  2,
  0,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState, steamid_clan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState, m_unstatusflags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState, clan_account_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState, name_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState, user_counts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState, events_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState, announcements_),
  2,
  3,
  4,
  0,
  1,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(CMsgClientUDSP2PSessionStarted)},
  { 9, 24, sizeof(CMsgClientUDSP2PSessionEnded)},
  { 34, 42, sizeof(CMsgClientRegisterAuthTicketWithCM)},
  { 45, 58, sizeof(CMsgClientTicketAuthComplete)},
  { 66, 75, sizeof(CMsgClientCMList)},
  { 79, 88, sizeof(CMsgClientP2PConnectionInfo)},
  { 92, 101, sizeof(CMsgClientP2PConnectionFailInfo)},
  { 105, 111, sizeof(CMsgClientGetAppOwnershipTicket)},
  { 112, 120, sizeof(CMsgClientGetAppOwnershipTicketResponse)},
  { 123, 129, sizeof(CMsgClientSessionToken)},
  { 130, 137, sizeof(CMsgClientGameConnectTokens)},
  { 139, 151, sizeof(CMsgGSServerType)},
  { 158, 164, sizeof(CMsgGSStatusReply)},
  { 165, 173, sizeof(CMsgGSPlayerList_Player)},
  { 176, 182, sizeof(CMsgGSPlayerList)},
  { 183, 191, sizeof(CMsgGSUserPlaying)},
  { 194, 200, sizeof(CMsgGSDisconnectNotice)},
  { 201, 226, sizeof(CMsgClientGamesPlayed_GamePlayed)},
  { 246, 253, sizeof(CMsgClientGamesPlayed)},
  { 255, 262, sizeof(CMsgGSApprove)},
  { 264, 272, sizeof(CMsgGSDeny)},
  { 275, 282, sizeof(CMsgGSKick)},
  { 284, 295, sizeof(CMsgClientAuthList)},
  { 301, 309, sizeof(CMsgClientAuthListAck)},
  { 312, 333, sizeof(CMsgClientLicenseList_License)},
  { 349, 356, sizeof(CMsgClientLicenseList)},
  { 358, 368, sizeof(CMsgClientLBSSetScore)},
  { 373, 383, sizeof(CMsgClientLBSSetScoreResponse)},
  { 388, 396, sizeof(CMsgClientLBSSetUGC)},
  { 399, 405, sizeof(CMsgClientLBSSetUGCResponse)},
  { 406, 416, sizeof(CMsgClientLBSFindOrCreateLB)},
  { 421, 432, sizeof(CMsgClientLBSFindOrCreateLBResponse)},
  { 438, 449, sizeof(CMsgClientLBSGetLBEntries)},
  { 455, 465, sizeof(CMsgClientLBSGetLBEntriesResponse_Entry)},
  { 470, 478, sizeof(CMsgClientLBSGetLBEntriesResponse)},
  { 481, 489, sizeof(CMsgClientAppMinutesPlayedData_AppMinutesPlayedData)},
  { 492, 498, sizeof(CMsgClientAppMinutesPlayedData)},
  { 499, 508, sizeof(CMsgClientIsLimitedAccount)},
  { 512, 520, sizeof(CMsgClientServerList_Server)},
  { 523, 529, sizeof(CMsgClientServerList)},
  { 530, 537, sizeof(CMsgClientRequestedClientStats_StatsToSend)},
  { 539, 545, sizeof(CMsgClientRequestedClientStats)},
  { 546, 557, sizeof(CMsgClientStat2_StatDetail)},
  { 563, 569, sizeof(CMsgClientStat2)},
  { 570, 583, sizeof(CMsgClientMMSCreateLobby)},
  { 591, 599, sizeof(CMsgClientMMSCreateLobbyResponse)},
  { 602, 610, sizeof(CMsgClientMMSJoinLobby)},
  { 613, 621, sizeof(CMsgClientMMSJoinLobbyResponse_Member)},
  { 624, 638, sizeof(CMsgClientMMSJoinLobbyResponse)},
  { 647, 654, sizeof(CMsgClientMMSLeaveLobby)},
  { 656, 664, sizeof(CMsgClientMMSLeaveLobbyResponse)},
  { 667, 676, sizeof(CMsgClientMMSGetLobbyList_Filter)},
  { 680, 690, sizeof(CMsgClientMMSGetLobbyList)},
  { 695, 708, sizeof(CMsgClientMMSGetLobbyListResponse_Lobby)},
  { 716, 724, sizeof(CMsgClientMMSGetLobbyListResponse)},
  { 727, 739, sizeof(CMsgClientMMSSetLobbyData)},
  { 746, 754, sizeof(CMsgClientMMSSetLobbyDataResponse)},
  { 757, 764, sizeof(CMsgClientMMSGetLobbyData)},
  { 766, 774, sizeof(CMsgClientMMSLobbyData_Member)},
  { 777, 792, sizeof(CMsgClientMMSLobbyData)},
  { 802, 811, sizeof(CMsgClientMMSSendLobbyChatMsg)},
  { 815, 824, sizeof(CMsgClientMMSLobbyChatMsg)},
  { 828, 836, sizeof(CMsgClientMMSSetLobbyOwner)},
  { 839, 847, sizeof(CMsgClientMMSSetLobbyOwnerResponse)},
  { 850, 858, sizeof(CMsgClientMMSSetLobbyLinked)},
  { 861, 871, sizeof(CMsgClientMMSSetLobbyGameServer)},
  { 876, 886, sizeof(CMsgClientMMSLobbyGameServerSet)},
  { 891, 900, sizeof(CMsgClientMMSUserJoinedLobby)},
  { 904, 913, sizeof(CMsgClientMMSUserLeftLobby)},
  { 917, 925, sizeof(CMsgClientMMSInviteToLobby)},
  { 928, 936, sizeof(CMsgClientUDSInviteToGame)},
  { 939, 951, sizeof(CMsgClientChatInvite)},
  { 958, 970, sizeof(CMsgClientConnectionStats_Stats_Logon)},
  { 977, 987, sizeof(CMsgClientConnectionStats_Stats_UDP)},
  { 992, 1017, sizeof(CMsgClientConnectionStats_Stats_VConn)},
  { 1037, 1044, sizeof(CMsgClientConnectionStats)},
  { 1046, 1053, sizeof(CMsgClientServersAvailable_Server_Types_Available)},
  { 1055, 1062, sizeof(CMsgClientServersAvailable)},
  { 1064, 1073, sizeof(CMsgClientGetUserStats)},
  { 1077, 1084, sizeof(CMsgClientGetUserStatsResponse_Stats)},
  { 1086, 1093, sizeof(CMsgClientGetUserStatsResponse_Achievement_Blocks)},
  { 1095, 1106, sizeof(CMsgClientGetUserStatsResponse)},
  { 1112, 1119, sizeof(CMsgClientStoreUserStatsResponse_Stats_Failed_Validation)},
  { 1121, 1131, sizeof(CMsgClientStoreUserStatsResponse)},
  { 1136, 1143, sizeof(CMsgClientStoreUserStats2_Stats)},
  { 1145, 1156, sizeof(CMsgClientStoreUserStats2)},
  { 1162, 1169, sizeof(CMsgClientStatsUpdated_Updated_Stats)},
  { 1171, 1180, sizeof(CMsgClientStatsUpdated)},
  { 1184, 1191, sizeof(CMsgClientStoreUserStats_Stats_To_Store)},
  { 1193, 1201, sizeof(CMsgClientStoreUserStats)},
  { 1204, 1209, sizeof(CMsgClientGetClientDetails)},
  { 1209, 1215, sizeof(CMsgClientReportOverlayDetourFailure)},
  { 1216, 1224, sizeof(CMsgClientGetClientDetailsResponse_Game)},
  { 1227, 1240, sizeof(CMsgClientGetClientDetailsResponse)},
  { 1248, 1259, sizeof(CMsgClientGetClientAppList)},
  { 1265, 1272, sizeof(CMsgClientGetClientAppListResponse_App_DLC)},
  { 1274, 1294, sizeof(CMsgClientGetClientAppListResponse_App)},
  { 1309, 1316, sizeof(CMsgClientGetClientAppListResponse)},
  { 1318, 1324, sizeof(CMsgClientInstallClientApp)},
  { 1325, 1331, sizeof(CMsgClientInstallClientAppResponse)},
  { 1332, 1338, sizeof(CMsgClientUninstallClientApp)},
  { 1339, 1345, sizeof(CMsgClientUninstallClientAppResponse)},
  { 1346, 1353, sizeof(CMsgClientSetClientAppUpdateState)},
  { 1355, 1361, sizeof(CMsgClientSetClientAppUpdateStateResponse)},
  { 1362, 1377, sizeof(CMsgClientUFSUploadFileRequest)},
  { 1387, 1400, sizeof(CMsgClientUFSUploadFileResponse)},
  { 1408, 1418, sizeof(CMsgClientUFSUploadCommit_File)},
  { 1423, 1429, sizeof(CMsgClientUFSUploadCommit)},
  { 1430, 1438, sizeof(CMsgClientUFSUploadCommitResponse_File)},
  { 1441, 1447, sizeof(CMsgClientUFSUploadCommitResponse)},
  { 1448, 1456, sizeof(CMsgClientUFSFileChunk)},
  { 1459, 1464, sizeof(CMsgClientUFSTransferHeartbeat)},
  { 1464, 1471, sizeof(CMsgClientUFSUploadFileFinished)},
  { 1473, 1481, sizeof(CMsgClientUFSDeleteFileRequest)},
  { 1484, 1491, sizeof(CMsgClientUFSDeleteFileResponse)},
  { 1493, 1500, sizeof(CMsgClientUFSGetFileListForApp)},
  { 1502, 1515, sizeof(CMsgClientUFSGetFileListForAppResponse_File)},
  { 1523, 1530, sizeof(CMsgClientUFSGetFileListForAppResponse)},
  { 1532, 1540, sizeof(CMsgClientUFSDownloadRequest)},
  { 1543, 1561, sizeof(CMsgClientUFSDownloadResponse)},
  { 1574, 1582, sizeof(CMsgClientUFSLoginRequest)},
  { 1585, 1591, sizeof(CMsgClientUFSLoginResponse)},
  { 1592, 1599, sizeof(CMsgClientRequestEncryptedAppTicket)},
  { 1601, 1609, sizeof(CMsgClientRequestEncryptedAppTicketResponse)},
  { 1612, 1623, sizeof(CMsgClientWalletInfoUpdate)},
  { 1629, 1636, sizeof(CMsgClientAppInfoUpdate)},
  { 1638, 1646, sizeof(CMsgClientAppInfoChanges)},
  { 1649, 1657, sizeof(CMsgClientAppInfoRequest_App)},
  { 1660, 1667, sizeof(CMsgClientAppInfoRequest)},
  { 1669, 1676, sizeof(CMsgClientAppInfoResponse_App_Section)},
  { 1678, 1686, sizeof(CMsgClientAppInfoResponse_App)},
  { 1689, 1697, sizeof(CMsgClientAppInfoResponse)},
  { 1700, 1707, sizeof(CMsgClientPackageInfoRequest)},
  { 1709, 1718, sizeof(CMsgClientPackageInfoResponse_Package)},
  { 1722, 1730, sizeof(CMsgClientPackageInfoResponse)},
  { 1733, 1743, sizeof(CMsgClientPICSChangesSinceRequest)},
  { 1748, 1756, sizeof(CMsgClientPICSChangesSinceResponse_PackageChange)},
  { 1759, 1767, sizeof(CMsgClientPICSChangesSinceResponse_AppChange)},
  { 1770, 1782, sizeof(CMsgClientPICSChangesSinceResponse)},
  { 1789, 1797, sizeof(CMsgClientPICSProductInfoRequest_AppInfo)},
  { 1800, 1807, sizeof(CMsgClientPICSProductInfoRequest_PackageInfo)},
  { 1809, 1818, sizeof(CMsgClientPICSProductInfoRequest)},
  { 1822, 1834, sizeof(CMsgClientPICSProductInfoResponse_AppInfo)},
  { 1841, 1852, sizeof(CMsgClientPICSProductInfoResponse_PackageInfo)},
  { 1858, 1871, sizeof(CMsgClientPICSProductInfoResponse)},
  { 1879, 1886, sizeof(CMsgClientPICSAccessTokenRequest)},
  { 1888, 1895, sizeof(CMsgClientPICSAccessTokenResponse_PackageToken)},
  { 1897, 1904, sizeof(CMsgClientPICSAccessTokenResponse_AppToken)},
  { 1906, 1915, sizeof(CMsgClientPICSAccessTokenResponse)},
  { 1919, 1925, sizeof(CMsgClientUFSGetUGCDetails)},
  { 1926, 1940, sizeof(CMsgClientUFSGetUGCDetailsResponse)},
  { 1949, 1956, sizeof(CMsgClientUFSGetSingleFileInfo)},
  { 1958, 1970, sizeof(CMsgClientUFSGetSingleFileInfoResponse)},
  { 1977, 1984, sizeof(CMsgClientUFSShareFile)},
  { 1986, 1993, sizeof(CMsgClientUFSShareFileResponse)},
  { 1995, 2001, sizeof(CMsgClientAMGetClanOfficers)},
  { 2002, 2010, sizeof(CMsgClientAMGetClanOfficersResponse)},
  { 2013, 2019, sizeof(CMsgClientAMGetPersonaNameHistory_IdInstance)},
  { 2020, 2027, sizeof(CMsgClientAMGetPersonaNameHistory)},
  { 2029, 2036, sizeof(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance)},
  { 2038, 2046, sizeof(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance)},
  { 2049, 2055, sizeof(CMsgClientAMGetPersonaNameHistoryResponse)},
  { 2056, 2063, sizeof(CMsgClientDeregisterWithServer)},
  { 2065, 2072, sizeof(CMsgClientClanState_NameInfo)},
  { 2074, 2083, sizeof(CMsgClientClanState_UserCounts)},
  { 2087, 2097, sizeof(CMsgClientClanState_Event)},
  { 2102, 2114, sizeof(CMsgClientClanState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUDSP2PSessionStarted_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUDSP2PSessionEnded_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientRegisterAuthTicketWithCM_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientTicketAuthComplete_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientCMList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientP2PConnectionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientP2PConnectionFailInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientGetAppOwnershipTicket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientGetAppOwnershipTicketResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientSessionToken_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientGameConnectTokens_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGSServerType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGSStatusReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGSPlayerList_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGSPlayerList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGSUserPlaying_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGSDisconnectNotice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientGamesPlayed_GamePlayed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientGamesPlayed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGSApprove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGSDeny_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGSKick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientAuthList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientAuthListAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientLicenseList_License_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientLicenseList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientLBSSetScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientLBSSetScoreResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientLBSSetUGC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientLBSSetUGCResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientLBSFindOrCreateLB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientLBSFindOrCreateLBResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientLBSGetLBEntries_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientLBSGetLBEntriesResponse_Entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientLBSGetLBEntriesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientAppMinutesPlayedData_AppMinutesPlayedData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientAppMinutesPlayedData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientIsLimitedAccount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientServerList_Server_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientServerList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientRequestedClientStats_StatsToSend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientRequestedClientStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientStat2_StatDetail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientStat2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSCreateLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSCreateLobbyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSJoinLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSJoinLobbyResponse_Member_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSJoinLobbyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSLeaveLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSLeaveLobbyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSGetLobbyList_Filter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSGetLobbyList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSGetLobbyListResponse_Lobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSGetLobbyListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSSetLobbyData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSSetLobbyDataResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSGetLobbyData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSLobbyData_Member_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSLobbyData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSSendLobbyChatMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSLobbyChatMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSSetLobbyOwner_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSSetLobbyOwnerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSSetLobbyLinked_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSSetLobbyGameServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSLobbyGameServerSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSUserJoinedLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSUserLeftLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientMMSInviteToLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUDSInviteToGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientChatInvite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientConnectionStats_Stats_Logon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientConnectionStats_Stats_UDP_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientConnectionStats_Stats_VConn_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientConnectionStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientServersAvailable_Server_Types_Available_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientServersAvailable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientGetUserStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientGetUserStatsResponse_Stats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientGetUserStatsResponse_Achievement_Blocks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientGetUserStatsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientStoreUserStatsResponse_Stats_Failed_Validation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientStoreUserStatsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientStoreUserStats2_Stats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientStoreUserStats2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientStatsUpdated_Updated_Stats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientStatsUpdated_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientStoreUserStats_Stats_To_Store_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientStoreUserStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientGetClientDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientReportOverlayDetourFailure_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientGetClientDetailsResponse_Game_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientGetClientDetailsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientGetClientAppList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientGetClientAppListResponse_App_DLC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientGetClientAppListResponse_App_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientGetClientAppListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientInstallClientApp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientInstallClientAppResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUninstallClientApp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUninstallClientAppResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientSetClientAppUpdateState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientSetClientAppUpdateStateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSUploadFileRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSUploadFileResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSUploadCommit_File_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSUploadCommit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSUploadCommitResponse_File_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSUploadCommitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSFileChunk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSTransferHeartbeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSUploadFileFinished_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSDeleteFileRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSDeleteFileResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSGetFileListForApp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSGetFileListForAppResponse_File_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSGetFileListForAppResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSDownloadRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSDownloadResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSLoginRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSLoginResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientRequestEncryptedAppTicket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientRequestEncryptedAppTicketResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientWalletInfoUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientAppInfoUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientAppInfoChanges_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientAppInfoRequest_App_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientAppInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientAppInfoResponse_App_Section_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientAppInfoResponse_App_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientAppInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientPackageInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientPackageInfoResponse_Package_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientPackageInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientPICSChangesSinceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientPICSChangesSinceResponse_PackageChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientPICSChangesSinceResponse_AppChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientPICSChangesSinceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientPICSProductInfoRequest_AppInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientPICSProductInfoRequest_PackageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientPICSProductInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientPICSProductInfoResponse_AppInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientPICSProductInfoResponse_PackageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientPICSProductInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientPICSAccessTokenRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientPICSAccessTokenResponse_PackageToken_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientPICSAccessTokenResponse_AppToken_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientPICSAccessTokenResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSGetUGCDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSGetUGCDetailsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSGetSingleFileInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSGetSingleFileInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSShareFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientUFSShareFileResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientAMGetClanOfficers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientAMGetClanOfficersResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientAMGetPersonaNameHistory_IdInstance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientAMGetPersonaNameHistory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientAMGetPersonaNameHistoryResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientDeregisterWithServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientClanState_NameInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientClanState_UserCounts_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientClanState_Event_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientClanState_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_clientserver.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 167);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgClientUDSP2PSessionStarted_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgClientUDSP2PSessionEnded_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgClientRegisterAuthTicketWithCM_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgClientTicketAuthComplete_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMsgClientCMList_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgClientP2PConnectionInfo_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CMsgClientP2PConnectionFailInfo_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CMsgClientGetAppOwnershipTicket_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CMsgClientGetAppOwnershipTicketResponse_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CMsgClientSessionToken_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CMsgClientGameConnectTokens_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CMsgGSServerType_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CMsgGSStatusReply_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CMsgGSPlayerList_Player_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CMsgGSPlayerList_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CMsgGSUserPlaying_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CMsgGSDisconnectNotice_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CMsgClientGamesPlayed_GamePlayed_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CMsgClientGamesPlayed_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CMsgGSApprove_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CMsgGSDeny_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CMsgGSKick_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CMsgClientAuthList_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CMsgClientAuthListAck_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CMsgClientLicenseList_License_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CMsgClientLicenseList_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CMsgClientLBSSetScore_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CMsgClientLBSSetScoreResponse_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CMsgClientLBSSetUGC_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CMsgClientLBSSetUGCResponse_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _CMsgClientLBSFindOrCreateLB_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _CMsgClientLBSFindOrCreateLBResponse_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _CMsgClientLBSGetLBEntries_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _CMsgClientLBSGetLBEntriesResponse_Entry_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _CMsgClientLBSGetLBEntriesResponse_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _CMsgClientAppMinutesPlayedData_AppMinutesPlayedData_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _CMsgClientAppMinutesPlayedData_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _CMsgClientIsLimitedAccount_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _CMsgClientServerList_Server_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _CMsgClientServerList_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _CMsgClientRequestedClientStats_StatsToSend_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _CMsgClientRequestedClientStats_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _CMsgClientStat2_StatDetail_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _CMsgClientStat2_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _CMsgClientMMSCreateLobby_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _CMsgClientMMSCreateLobbyResponse_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _CMsgClientMMSJoinLobby_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _CMsgClientMMSJoinLobbyResponse_Member_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _CMsgClientMMSJoinLobbyResponse_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _CMsgClientMMSLeaveLobby_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _CMsgClientMMSLeaveLobbyResponse_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _CMsgClientMMSGetLobbyList_Filter_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _CMsgClientMMSGetLobbyList_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _CMsgClientMMSGetLobbyListResponse_Lobby_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _CMsgClientMMSGetLobbyListResponse_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _CMsgClientMMSSetLobbyData_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _CMsgClientMMSSetLobbyDataResponse_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  _CMsgClientMMSGetLobbyData_default_instance_.Shutdown();
  delete file_level_metadata[57].reflection;
  _CMsgClientMMSLobbyData_Member_default_instance_.Shutdown();
  delete file_level_metadata[58].reflection;
  _CMsgClientMMSLobbyData_default_instance_.Shutdown();
  delete file_level_metadata[59].reflection;
  _CMsgClientMMSSendLobbyChatMsg_default_instance_.Shutdown();
  delete file_level_metadata[60].reflection;
  _CMsgClientMMSLobbyChatMsg_default_instance_.Shutdown();
  delete file_level_metadata[61].reflection;
  _CMsgClientMMSSetLobbyOwner_default_instance_.Shutdown();
  delete file_level_metadata[62].reflection;
  _CMsgClientMMSSetLobbyOwnerResponse_default_instance_.Shutdown();
  delete file_level_metadata[63].reflection;
  _CMsgClientMMSSetLobbyLinked_default_instance_.Shutdown();
  delete file_level_metadata[64].reflection;
  _CMsgClientMMSSetLobbyGameServer_default_instance_.Shutdown();
  delete file_level_metadata[65].reflection;
  _CMsgClientMMSLobbyGameServerSet_default_instance_.Shutdown();
  delete file_level_metadata[66].reflection;
  _CMsgClientMMSUserJoinedLobby_default_instance_.Shutdown();
  delete file_level_metadata[67].reflection;
  _CMsgClientMMSUserLeftLobby_default_instance_.Shutdown();
  delete file_level_metadata[68].reflection;
  _CMsgClientMMSInviteToLobby_default_instance_.Shutdown();
  delete file_level_metadata[69].reflection;
  _CMsgClientUDSInviteToGame_default_instance_.Shutdown();
  delete file_level_metadata[70].reflection;
  _CMsgClientChatInvite_default_instance_.Shutdown();
  delete file_level_metadata[71].reflection;
  _CMsgClientConnectionStats_Stats_Logon_default_instance_.Shutdown();
  delete file_level_metadata[72].reflection;
  _CMsgClientConnectionStats_Stats_UDP_default_instance_.Shutdown();
  delete file_level_metadata[73].reflection;
  _CMsgClientConnectionStats_Stats_VConn_default_instance_.Shutdown();
  delete file_level_metadata[74].reflection;
  _CMsgClientConnectionStats_default_instance_.Shutdown();
  delete file_level_metadata[75].reflection;
  _CMsgClientServersAvailable_Server_Types_Available_default_instance_.Shutdown();
  delete file_level_metadata[76].reflection;
  _CMsgClientServersAvailable_default_instance_.Shutdown();
  delete file_level_metadata[77].reflection;
  _CMsgClientGetUserStats_default_instance_.Shutdown();
  delete file_level_metadata[78].reflection;
  _CMsgClientGetUserStatsResponse_Stats_default_instance_.Shutdown();
  delete file_level_metadata[79].reflection;
  _CMsgClientGetUserStatsResponse_Achievement_Blocks_default_instance_.Shutdown();
  delete file_level_metadata[80].reflection;
  _CMsgClientGetUserStatsResponse_default_instance_.Shutdown();
  delete file_level_metadata[81].reflection;
  _CMsgClientStoreUserStatsResponse_Stats_Failed_Validation_default_instance_.Shutdown();
  delete file_level_metadata[82].reflection;
  _CMsgClientStoreUserStatsResponse_default_instance_.Shutdown();
  delete file_level_metadata[83].reflection;
  _CMsgClientStoreUserStats2_Stats_default_instance_.Shutdown();
  delete file_level_metadata[84].reflection;
  _CMsgClientStoreUserStats2_default_instance_.Shutdown();
  delete file_level_metadata[85].reflection;
  _CMsgClientStatsUpdated_Updated_Stats_default_instance_.Shutdown();
  delete file_level_metadata[86].reflection;
  _CMsgClientStatsUpdated_default_instance_.Shutdown();
  delete file_level_metadata[87].reflection;
  _CMsgClientStoreUserStats_Stats_To_Store_default_instance_.Shutdown();
  delete file_level_metadata[88].reflection;
  _CMsgClientStoreUserStats_default_instance_.Shutdown();
  delete file_level_metadata[89].reflection;
  _CMsgClientGetClientDetails_default_instance_.Shutdown();
  delete file_level_metadata[90].reflection;
  _CMsgClientReportOverlayDetourFailure_default_instance_.Shutdown();
  delete file_level_metadata[91].reflection;
  _CMsgClientGetClientDetailsResponse_Game_default_instance_.Shutdown();
  delete file_level_metadata[92].reflection;
  _CMsgClientGetClientDetailsResponse_default_instance_.Shutdown();
  delete file_level_metadata[93].reflection;
  _CMsgClientGetClientAppList_default_instance_.Shutdown();
  delete file_level_metadata[94].reflection;
  _CMsgClientGetClientAppListResponse_App_DLC_default_instance_.Shutdown();
  delete file_level_metadata[95].reflection;
  _CMsgClientGetClientAppListResponse_App_default_instance_.Shutdown();
  delete file_level_metadata[96].reflection;
  _CMsgClientGetClientAppListResponse_default_instance_.Shutdown();
  delete file_level_metadata[97].reflection;
  _CMsgClientInstallClientApp_default_instance_.Shutdown();
  delete file_level_metadata[98].reflection;
  _CMsgClientInstallClientAppResponse_default_instance_.Shutdown();
  delete file_level_metadata[99].reflection;
  _CMsgClientUninstallClientApp_default_instance_.Shutdown();
  delete file_level_metadata[100].reflection;
  _CMsgClientUninstallClientAppResponse_default_instance_.Shutdown();
  delete file_level_metadata[101].reflection;
  _CMsgClientSetClientAppUpdateState_default_instance_.Shutdown();
  delete file_level_metadata[102].reflection;
  _CMsgClientSetClientAppUpdateStateResponse_default_instance_.Shutdown();
  delete file_level_metadata[103].reflection;
  _CMsgClientUFSUploadFileRequest_default_instance_.Shutdown();
  delete file_level_metadata[104].reflection;
  _CMsgClientUFSUploadFileResponse_default_instance_.Shutdown();
  delete file_level_metadata[105].reflection;
  _CMsgClientUFSUploadCommit_File_default_instance_.Shutdown();
  delete file_level_metadata[106].reflection;
  _CMsgClientUFSUploadCommit_default_instance_.Shutdown();
  delete file_level_metadata[107].reflection;
  _CMsgClientUFSUploadCommitResponse_File_default_instance_.Shutdown();
  delete file_level_metadata[108].reflection;
  _CMsgClientUFSUploadCommitResponse_default_instance_.Shutdown();
  delete file_level_metadata[109].reflection;
  _CMsgClientUFSFileChunk_default_instance_.Shutdown();
  delete file_level_metadata[110].reflection;
  _CMsgClientUFSTransferHeartbeat_default_instance_.Shutdown();
  delete file_level_metadata[111].reflection;
  _CMsgClientUFSUploadFileFinished_default_instance_.Shutdown();
  delete file_level_metadata[112].reflection;
  _CMsgClientUFSDeleteFileRequest_default_instance_.Shutdown();
  delete file_level_metadata[113].reflection;
  _CMsgClientUFSDeleteFileResponse_default_instance_.Shutdown();
  delete file_level_metadata[114].reflection;
  _CMsgClientUFSGetFileListForApp_default_instance_.Shutdown();
  delete file_level_metadata[115].reflection;
  _CMsgClientUFSGetFileListForAppResponse_File_default_instance_.Shutdown();
  delete file_level_metadata[116].reflection;
  _CMsgClientUFSGetFileListForAppResponse_default_instance_.Shutdown();
  delete file_level_metadata[117].reflection;
  _CMsgClientUFSDownloadRequest_default_instance_.Shutdown();
  delete file_level_metadata[118].reflection;
  _CMsgClientUFSDownloadResponse_default_instance_.Shutdown();
  delete file_level_metadata[119].reflection;
  _CMsgClientUFSLoginRequest_default_instance_.Shutdown();
  delete file_level_metadata[120].reflection;
  _CMsgClientUFSLoginResponse_default_instance_.Shutdown();
  delete file_level_metadata[121].reflection;
  _CMsgClientRequestEncryptedAppTicket_default_instance_.Shutdown();
  delete file_level_metadata[122].reflection;
  _CMsgClientRequestEncryptedAppTicketResponse_default_instance_.Shutdown();
  delete file_level_metadata[123].reflection;
  _CMsgClientWalletInfoUpdate_default_instance_.Shutdown();
  delete file_level_metadata[124].reflection;
  _CMsgClientAppInfoUpdate_default_instance_.Shutdown();
  delete file_level_metadata[125].reflection;
  _CMsgClientAppInfoChanges_default_instance_.Shutdown();
  delete file_level_metadata[126].reflection;
  _CMsgClientAppInfoRequest_App_default_instance_.Shutdown();
  delete file_level_metadata[127].reflection;
  _CMsgClientAppInfoRequest_default_instance_.Shutdown();
  delete file_level_metadata[128].reflection;
  _CMsgClientAppInfoResponse_App_Section_default_instance_.Shutdown();
  delete file_level_metadata[129].reflection;
  _CMsgClientAppInfoResponse_App_default_instance_.Shutdown();
  delete file_level_metadata[130].reflection;
  _CMsgClientAppInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[131].reflection;
  _CMsgClientPackageInfoRequest_default_instance_.Shutdown();
  delete file_level_metadata[132].reflection;
  _CMsgClientPackageInfoResponse_Package_default_instance_.Shutdown();
  delete file_level_metadata[133].reflection;
  _CMsgClientPackageInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[134].reflection;
  _CMsgClientPICSChangesSinceRequest_default_instance_.Shutdown();
  delete file_level_metadata[135].reflection;
  _CMsgClientPICSChangesSinceResponse_PackageChange_default_instance_.Shutdown();
  delete file_level_metadata[136].reflection;
  _CMsgClientPICSChangesSinceResponse_AppChange_default_instance_.Shutdown();
  delete file_level_metadata[137].reflection;
  _CMsgClientPICSChangesSinceResponse_default_instance_.Shutdown();
  delete file_level_metadata[138].reflection;
  _CMsgClientPICSProductInfoRequest_AppInfo_default_instance_.Shutdown();
  delete file_level_metadata[139].reflection;
  _CMsgClientPICSProductInfoRequest_PackageInfo_default_instance_.Shutdown();
  delete file_level_metadata[140].reflection;
  _CMsgClientPICSProductInfoRequest_default_instance_.Shutdown();
  delete file_level_metadata[141].reflection;
  _CMsgClientPICSProductInfoResponse_AppInfo_default_instance_.Shutdown();
  delete file_level_metadata[142].reflection;
  _CMsgClientPICSProductInfoResponse_PackageInfo_default_instance_.Shutdown();
  delete file_level_metadata[143].reflection;
  _CMsgClientPICSProductInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[144].reflection;
  _CMsgClientPICSAccessTokenRequest_default_instance_.Shutdown();
  delete file_level_metadata[145].reflection;
  _CMsgClientPICSAccessTokenResponse_PackageToken_default_instance_.Shutdown();
  delete file_level_metadata[146].reflection;
  _CMsgClientPICSAccessTokenResponse_AppToken_default_instance_.Shutdown();
  delete file_level_metadata[147].reflection;
  _CMsgClientPICSAccessTokenResponse_default_instance_.Shutdown();
  delete file_level_metadata[148].reflection;
  _CMsgClientUFSGetUGCDetails_default_instance_.Shutdown();
  delete file_level_metadata[149].reflection;
  _CMsgClientUFSGetUGCDetailsResponse_default_instance_.Shutdown();
  delete file_level_metadata[150].reflection;
  _CMsgClientUFSGetSingleFileInfo_default_instance_.Shutdown();
  delete file_level_metadata[151].reflection;
  _CMsgClientUFSGetSingleFileInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[152].reflection;
  _CMsgClientUFSShareFile_default_instance_.Shutdown();
  delete file_level_metadata[153].reflection;
  _CMsgClientUFSShareFileResponse_default_instance_.Shutdown();
  delete file_level_metadata[154].reflection;
  _CMsgClientAMGetClanOfficers_default_instance_.Shutdown();
  delete file_level_metadata[155].reflection;
  _CMsgClientAMGetClanOfficersResponse_default_instance_.Shutdown();
  delete file_level_metadata[156].reflection;
  _CMsgClientAMGetPersonaNameHistory_IdInstance_default_instance_.Shutdown();
  delete file_level_metadata[157].reflection;
  _CMsgClientAMGetPersonaNameHistory_default_instance_.Shutdown();
  delete file_level_metadata[158].reflection;
  _CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_default_instance_.Shutdown();
  delete file_level_metadata[159].reflection;
  _CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_default_instance_.Shutdown();
  delete file_level_metadata[160].reflection;
  _CMsgClientAMGetPersonaNameHistoryResponse_default_instance_.Shutdown();
  delete file_level_metadata[161].reflection;
  _CMsgClientDeregisterWithServer_default_instance_.Shutdown();
  delete file_level_metadata[162].reflection;
  _CMsgClientClanState_NameInfo_default_instance_.Shutdown();
  delete file_level_metadata[163].reflection;
  _CMsgClientClanState_UserCounts_default_instance_.Shutdown();
  delete file_level_metadata[164].reflection;
  _CMsgClientClanState_Event_default_instance_.Shutdown();
  delete file_level_metadata[165].reflection;
  _CMsgClientClanState_default_instance_.Shutdown();
  delete file_level_metadata[166].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5fbase_2eproto::InitDefaults();
  ::proto::steam::protobuf_encrypted_5fapp_5fticket_2eproto::InitDefaults();
  _CMsgClientUDSP2PSessionStarted_default_instance_.DefaultConstruct();
  _CMsgClientUDSP2PSessionEnded_default_instance_.DefaultConstruct();
  _CMsgClientRegisterAuthTicketWithCM_default_instance_.DefaultConstruct();
  _CMsgClientTicketAuthComplete_default_instance_.DefaultConstruct();
  _CMsgClientCMList_default_instance_.DefaultConstruct();
  _CMsgClientP2PConnectionInfo_default_instance_.DefaultConstruct();
  _CMsgClientP2PConnectionFailInfo_default_instance_.DefaultConstruct();
  _CMsgClientGetAppOwnershipTicket_default_instance_.DefaultConstruct();
  _CMsgClientGetAppOwnershipTicketResponse_default_instance_.DefaultConstruct();
  _CMsgClientSessionToken_default_instance_.DefaultConstruct();
  _CMsgClientGameConnectTokens_default_instance_.DefaultConstruct();
  _CMsgGSServerType_default_instance_.DefaultConstruct();
  _CMsgGSStatusReply_default_instance_.DefaultConstruct();
  _CMsgGSPlayerList_Player_default_instance_.DefaultConstruct();
  _CMsgGSPlayerList_default_instance_.DefaultConstruct();
  _CMsgGSUserPlaying_default_instance_.DefaultConstruct();
  _CMsgGSDisconnectNotice_default_instance_.DefaultConstruct();
  _CMsgClientGamesPlayed_GamePlayed_default_instance_.DefaultConstruct();
  _CMsgClientGamesPlayed_default_instance_.DefaultConstruct();
  _CMsgGSApprove_default_instance_.DefaultConstruct();
  _CMsgGSDeny_default_instance_.DefaultConstruct();
  _CMsgGSKick_default_instance_.DefaultConstruct();
  _CMsgClientAuthList_default_instance_.DefaultConstruct();
  _CMsgClientAuthListAck_default_instance_.DefaultConstruct();
  _CMsgClientLicenseList_License_default_instance_.DefaultConstruct();
  _CMsgClientLicenseList_default_instance_.DefaultConstruct();
  _CMsgClientLBSSetScore_default_instance_.DefaultConstruct();
  _CMsgClientLBSSetScoreResponse_default_instance_.DefaultConstruct();
  _CMsgClientLBSSetUGC_default_instance_.DefaultConstruct();
  _CMsgClientLBSSetUGCResponse_default_instance_.DefaultConstruct();
  _CMsgClientLBSFindOrCreateLB_default_instance_.DefaultConstruct();
  _CMsgClientLBSFindOrCreateLBResponse_default_instance_.DefaultConstruct();
  _CMsgClientLBSGetLBEntries_default_instance_.DefaultConstruct();
  _CMsgClientLBSGetLBEntriesResponse_Entry_default_instance_.DefaultConstruct();
  _CMsgClientLBSGetLBEntriesResponse_default_instance_.DefaultConstruct();
  _CMsgClientAppMinutesPlayedData_AppMinutesPlayedData_default_instance_.DefaultConstruct();
  _CMsgClientAppMinutesPlayedData_default_instance_.DefaultConstruct();
  _CMsgClientIsLimitedAccount_default_instance_.DefaultConstruct();
  _CMsgClientServerList_Server_default_instance_.DefaultConstruct();
  _CMsgClientServerList_default_instance_.DefaultConstruct();
  _CMsgClientRequestedClientStats_StatsToSend_default_instance_.DefaultConstruct();
  _CMsgClientRequestedClientStats_default_instance_.DefaultConstruct();
  _CMsgClientStat2_StatDetail_default_instance_.DefaultConstruct();
  _CMsgClientStat2_default_instance_.DefaultConstruct();
  _CMsgClientMMSCreateLobby_default_instance_.DefaultConstruct();
  _CMsgClientMMSCreateLobbyResponse_default_instance_.DefaultConstruct();
  _CMsgClientMMSJoinLobby_default_instance_.DefaultConstruct();
  _CMsgClientMMSJoinLobbyResponse_Member_default_instance_.DefaultConstruct();
  _CMsgClientMMSJoinLobbyResponse_default_instance_.DefaultConstruct();
  _CMsgClientMMSLeaveLobby_default_instance_.DefaultConstruct();
  _CMsgClientMMSLeaveLobbyResponse_default_instance_.DefaultConstruct();
  _CMsgClientMMSGetLobbyList_Filter_default_instance_.DefaultConstruct();
  _CMsgClientMMSGetLobbyList_default_instance_.DefaultConstruct();
  _CMsgClientMMSGetLobbyListResponse_Lobby_default_instance_.DefaultConstruct();
  _CMsgClientMMSGetLobbyListResponse_default_instance_.DefaultConstruct();
  _CMsgClientMMSSetLobbyData_default_instance_.DefaultConstruct();
  _CMsgClientMMSSetLobbyDataResponse_default_instance_.DefaultConstruct();
  _CMsgClientMMSGetLobbyData_default_instance_.DefaultConstruct();
  _CMsgClientMMSLobbyData_Member_default_instance_.DefaultConstruct();
  _CMsgClientMMSLobbyData_default_instance_.DefaultConstruct();
  _CMsgClientMMSSendLobbyChatMsg_default_instance_.DefaultConstruct();
  _CMsgClientMMSLobbyChatMsg_default_instance_.DefaultConstruct();
  _CMsgClientMMSSetLobbyOwner_default_instance_.DefaultConstruct();
  _CMsgClientMMSSetLobbyOwnerResponse_default_instance_.DefaultConstruct();
  _CMsgClientMMSSetLobbyLinked_default_instance_.DefaultConstruct();
  _CMsgClientMMSSetLobbyGameServer_default_instance_.DefaultConstruct();
  _CMsgClientMMSLobbyGameServerSet_default_instance_.DefaultConstruct();
  _CMsgClientMMSUserJoinedLobby_default_instance_.DefaultConstruct();
  _CMsgClientMMSUserLeftLobby_default_instance_.DefaultConstruct();
  _CMsgClientMMSInviteToLobby_default_instance_.DefaultConstruct();
  _CMsgClientUDSInviteToGame_default_instance_.DefaultConstruct();
  _CMsgClientChatInvite_default_instance_.DefaultConstruct();
  _CMsgClientConnectionStats_Stats_Logon_default_instance_.DefaultConstruct();
  _CMsgClientConnectionStats_Stats_UDP_default_instance_.DefaultConstruct();
  _CMsgClientConnectionStats_Stats_VConn_default_instance_.DefaultConstruct();
  _CMsgClientConnectionStats_default_instance_.DefaultConstruct();
  _CMsgClientServersAvailable_Server_Types_Available_default_instance_.DefaultConstruct();
  _CMsgClientServersAvailable_default_instance_.DefaultConstruct();
  _CMsgClientGetUserStats_default_instance_.DefaultConstruct();
  _CMsgClientGetUserStatsResponse_Stats_default_instance_.DefaultConstruct();
  _CMsgClientGetUserStatsResponse_Achievement_Blocks_default_instance_.DefaultConstruct();
  _CMsgClientGetUserStatsResponse_default_instance_.DefaultConstruct();
  _CMsgClientStoreUserStatsResponse_Stats_Failed_Validation_default_instance_.DefaultConstruct();
  _CMsgClientStoreUserStatsResponse_default_instance_.DefaultConstruct();
  _CMsgClientStoreUserStats2_Stats_default_instance_.DefaultConstruct();
  _CMsgClientStoreUserStats2_default_instance_.DefaultConstruct();
  _CMsgClientStatsUpdated_Updated_Stats_default_instance_.DefaultConstruct();
  _CMsgClientStatsUpdated_default_instance_.DefaultConstruct();
  _CMsgClientStoreUserStats_Stats_To_Store_default_instance_.DefaultConstruct();
  _CMsgClientStoreUserStats_default_instance_.DefaultConstruct();
  _CMsgClientGetClientDetails_default_instance_.DefaultConstruct();
  _CMsgClientReportOverlayDetourFailure_default_instance_.DefaultConstruct();
  _CMsgClientGetClientDetailsResponse_Game_default_instance_.DefaultConstruct();
  _CMsgClientGetClientDetailsResponse_default_instance_.DefaultConstruct();
  _CMsgClientGetClientAppList_default_instance_.DefaultConstruct();
  _CMsgClientGetClientAppListResponse_App_DLC_default_instance_.DefaultConstruct();
  _CMsgClientGetClientAppListResponse_App_default_instance_.DefaultConstruct();
  _CMsgClientGetClientAppListResponse_default_instance_.DefaultConstruct();
  _CMsgClientInstallClientApp_default_instance_.DefaultConstruct();
  _CMsgClientInstallClientAppResponse_default_instance_.DefaultConstruct();
  _CMsgClientUninstallClientApp_default_instance_.DefaultConstruct();
  _CMsgClientUninstallClientAppResponse_default_instance_.DefaultConstruct();
  _CMsgClientSetClientAppUpdateState_default_instance_.DefaultConstruct();
  _CMsgClientSetClientAppUpdateStateResponse_default_instance_.DefaultConstruct();
  _CMsgClientUFSUploadFileRequest_default_instance_.DefaultConstruct();
  _CMsgClientUFSUploadFileResponse_default_instance_.DefaultConstruct();
  _CMsgClientUFSUploadCommit_File_default_instance_.DefaultConstruct();
  _CMsgClientUFSUploadCommit_default_instance_.DefaultConstruct();
  _CMsgClientUFSUploadCommitResponse_File_default_instance_.DefaultConstruct();
  _CMsgClientUFSUploadCommitResponse_default_instance_.DefaultConstruct();
  _CMsgClientUFSFileChunk_default_instance_.DefaultConstruct();
  _CMsgClientUFSTransferHeartbeat_default_instance_.DefaultConstruct();
  _CMsgClientUFSUploadFileFinished_default_instance_.DefaultConstruct();
  _CMsgClientUFSDeleteFileRequest_default_instance_.DefaultConstruct();
  _CMsgClientUFSDeleteFileResponse_default_instance_.DefaultConstruct();
  _CMsgClientUFSGetFileListForApp_default_instance_.DefaultConstruct();
  _CMsgClientUFSGetFileListForAppResponse_File_default_instance_.DefaultConstruct();
  _CMsgClientUFSGetFileListForAppResponse_default_instance_.DefaultConstruct();
  _CMsgClientUFSDownloadRequest_default_instance_.DefaultConstruct();
  _CMsgClientUFSDownloadResponse_default_instance_.DefaultConstruct();
  _CMsgClientUFSLoginRequest_default_instance_.DefaultConstruct();
  _CMsgClientUFSLoginResponse_default_instance_.DefaultConstruct();
  _CMsgClientRequestEncryptedAppTicket_default_instance_.DefaultConstruct();
  _CMsgClientRequestEncryptedAppTicketResponse_default_instance_.DefaultConstruct();
  _CMsgClientWalletInfoUpdate_default_instance_.DefaultConstruct();
  _CMsgClientAppInfoUpdate_default_instance_.DefaultConstruct();
  _CMsgClientAppInfoChanges_default_instance_.DefaultConstruct();
  _CMsgClientAppInfoRequest_App_default_instance_.DefaultConstruct();
  _CMsgClientAppInfoRequest_default_instance_.DefaultConstruct();
  _CMsgClientAppInfoResponse_App_Section_default_instance_.DefaultConstruct();
  _CMsgClientAppInfoResponse_App_default_instance_.DefaultConstruct();
  _CMsgClientAppInfoResponse_default_instance_.DefaultConstruct();
  _CMsgClientPackageInfoRequest_default_instance_.DefaultConstruct();
  _CMsgClientPackageInfoResponse_Package_default_instance_.DefaultConstruct();
  _CMsgClientPackageInfoResponse_default_instance_.DefaultConstruct();
  _CMsgClientPICSChangesSinceRequest_default_instance_.DefaultConstruct();
  _CMsgClientPICSChangesSinceResponse_PackageChange_default_instance_.DefaultConstruct();
  _CMsgClientPICSChangesSinceResponse_AppChange_default_instance_.DefaultConstruct();
  _CMsgClientPICSChangesSinceResponse_default_instance_.DefaultConstruct();
  _CMsgClientPICSProductInfoRequest_AppInfo_default_instance_.DefaultConstruct();
  _CMsgClientPICSProductInfoRequest_PackageInfo_default_instance_.DefaultConstruct();
  _CMsgClientPICSProductInfoRequest_default_instance_.DefaultConstruct();
  _CMsgClientPICSProductInfoResponse_AppInfo_default_instance_.DefaultConstruct();
  _CMsgClientPICSProductInfoResponse_PackageInfo_default_instance_.DefaultConstruct();
  _CMsgClientPICSProductInfoResponse_default_instance_.DefaultConstruct();
  _CMsgClientPICSAccessTokenRequest_default_instance_.DefaultConstruct();
  _CMsgClientPICSAccessTokenResponse_PackageToken_default_instance_.DefaultConstruct();
  _CMsgClientPICSAccessTokenResponse_AppToken_default_instance_.DefaultConstruct();
  _CMsgClientPICSAccessTokenResponse_default_instance_.DefaultConstruct();
  _CMsgClientUFSGetUGCDetails_default_instance_.DefaultConstruct();
  _CMsgClientUFSGetUGCDetailsResponse_default_instance_.DefaultConstruct();
  _CMsgClientUFSGetSingleFileInfo_default_instance_.DefaultConstruct();
  _CMsgClientUFSGetSingleFileInfoResponse_default_instance_.DefaultConstruct();
  _CMsgClientUFSShareFile_default_instance_.DefaultConstruct();
  _CMsgClientUFSShareFileResponse_default_instance_.DefaultConstruct();
  _CMsgClientAMGetClanOfficers_default_instance_.DefaultConstruct();
  _CMsgClientAMGetClanOfficersResponse_default_instance_.DefaultConstruct();
  _CMsgClientAMGetPersonaNameHistory_IdInstance_default_instance_.DefaultConstruct();
  _CMsgClientAMGetPersonaNameHistory_default_instance_.DefaultConstruct();
  _CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_default_instance_.DefaultConstruct();
  _CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_default_instance_.DefaultConstruct();
  _CMsgClientAMGetPersonaNameHistoryResponse_default_instance_.DefaultConstruct();
  _CMsgClientDeregisterWithServer_default_instance_.DefaultConstruct();
  _CMsgClientClanState_NameInfo_default_instance_.DefaultConstruct();
  _CMsgClientClanState_UserCounts_default_instance_.DefaultConstruct();
  _CMsgClientClanState_Event_default_instance_.DefaultConstruct();
  _CMsgClientClanState_default_instance_.DefaultConstruct();
  _CMsgClientConnectionStats_Stats_VConn_default_instance_.get_mutable()->stats_udp_ = const_cast< ::proto::steam::CMsgClientConnectionStats_Stats_UDP*>(
      ::proto::steam::CMsgClientConnectionStats_Stats_UDP::internal_default_instance());
  _CMsgClientConnectionStats_default_instance_.get_mutable()->stats_logon_ = const_cast< ::proto::steam::CMsgClientConnectionStats_Stats_Logon*>(
      ::proto::steam::CMsgClientConnectionStats_Stats_Logon::internal_default_instance());
  _CMsgClientConnectionStats_default_instance_.get_mutable()->stats_vconn_ = const_cast< ::proto::steam::CMsgClientConnectionStats_Stats_VConn*>(
      ::proto::steam::CMsgClientConnectionStats_Stats_VConn::internal_default_instance());
  _CMsgClientRequestEncryptedAppTicketResponse_default_instance_.get_mutable()->encrypted_app_ticket_ = const_cast< ::proto::steam::EncryptedAppTicket*>(
      ::proto::steam::EncryptedAppTicket::internal_default_instance());
  _CMsgClientClanState_default_instance_.get_mutable()->name_info_ = const_cast< ::proto::steam::CMsgClientClanState_NameInfo*>(
      ::proto::steam::CMsgClientClanState_NameInfo::internal_default_instance());
  _CMsgClientClanState_default_instance_.get_mutable()->user_counts_ = const_cast< ::proto::steam::CMsgClientClanState_UserCounts*>(
      ::proto::steam::CMsgClientClanState_UserCounts::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n steammessages_clientserver.proto\022\013prot"
      "o.steam\032\030steammessages_base.proto\032\032encry"
      "pted_app_ticket.proto\"G\n\036CMsgClientUDSP2"
      "PSessionStarted\022\026\n\016steamid_remote\030\001 \001(\006\022"
      "\r\n\005appid\030\002 \001(\005\"\201\002\n\034CMsgClientUDSP2PSessi"
      "onEnded\022\026\n\016steamid_remote\030\001 \001(\006\022\r\n\005appid"
      "\030\002 \001(\005\022\032\n\022session_length_sec\030\003 \001(\005\022\025\n\rse"
      "ssion_error\030\004 \001(\005\022\017\n\007nattype\030\005 \001(\005\022\022\n\nby"
      "tes_recv\030\006 \001(\005\022\022\n\nbytes_sent\030\007 \001(\005\022\030\n\020by"
      "tes_sent_relay\030\010 \001(\005\022\030\n\020bytes_recv_relay"
      "\030\t \001(\005\022\032\n\022time_to_connect_ms\030\n \001(\005\"j\n\"CM"
      "sgClientRegisterAuthTicketWithCM\022\030\n\020prot"
      "ocol_version\030\001 \001(\r\022\016\n\006ticket\030\003 \001(\014\022\032\n\022cl"
      "ient_instance_id\030\004 \001(\004\"\321\001\n\034CMsgClientTic"
      "ketAuthComplete\022\020\n\010steam_id\030\001 \001(\006\022\017\n\007gam"
      "e_id\030\002 \001(\006\022\016\n\006estate\030\003 \001(\r\022\036\n\026eauth_sess"
      "ion_response\030\004 \001(\r\022\031\n\021DEPRECATED_ticket\030"
      "\005 \001(\014\022\022\n\nticket_crc\030\006 \001(\r\022\027\n\017ticket_sequ"
      "ence\030\007 \001(\r\022\026\n\016owner_steam_id\030\010 \001(\006\"\200\001\n\020C"
      "MsgClientCMList\022\024\n\014cm_addresses\030\001 \003(\r\022\020\n"
      "\010cm_ports\030\002 \003(\r\022\036\n\026cm_websocket_addresse"
      "s\030\003 \003(\t\022$\n\034percent_default_to_websocket\030"
      "\004 \001(\r\"m\n\033CMsgClientP2PConnectionInfo\022\025\n\r"
      "steam_id_dest\030\001 \001(\006\022\024\n\014steam_id_src\030\002 \001("
      "\006\022\016\n\006app_id\030\003 \001(\r\022\021\n\tcandidate\030\004 \001(\014\"z\n\037"
      "CMsgClientP2PConnectionFailInfo\022\025\n\rsteam"
      "_id_dest\030\001 \001(\006\022\024\n\014steam_id_src\030\002 \001(\006\022\016\n\006"
      "app_id\030\003 \001(\r\022\032\n\022ep2p_session_error\030\004 \001(\r"
      "\"1\n\037CMsgClientGetAppOwnershipTicket\022\016\n\006a"
      "pp_id\030\001 \001(\r\"]\n\'CMsgClientGetAppOwnership"
      "TicketResponse\022\022\n\007eresult\030\001 \001(\r:\0012\022\016\n\006ap"
      "p_id\030\002 \001(\r\022\016\n\006ticket\030\003 \001(\014\"\'\n\026CMsgClient"
      "SessionToken\022\r\n\005token\030\001 \001(\004\"M\n\033CMsgClien"
      "tGameConnectTokens\022\036\n\022max_tokens_to_keep"
      "\030\001 \001(\r:\00210\022\016\n\006tokens\030\002 \003(\014\"\245\001\n\020CMsgGSSer"
      "verType\022\025\n\rapp_id_served\030\001 \001(\r\022\r\n\005flags\030"
      "\002 \001(\r\022\027\n\017game_ip_address\030\003 \001(\r\022\021\n\tgame_p"
      "ort\030\004 \001(\r\022\020\n\010game_dir\030\005 \001(\t\022\024\n\014game_vers"
      "ion\030\006 \001(\t\022\027\n\017game_query_port\030\007 \001(\r\"&\n\021CM"
      "sgGSStatusReply\022\021\n\tis_secure\030\001 \001(\010\"\207\001\n\020C"
      "MsgGSPlayerList\0225\n\007players\030\001 \003(\0132$.proto"
      ".steam.CMsgGSPlayerList.Player\032<\n\006Player"
      "\022\020\n\010steam_id\030\001 \001(\004\022\021\n\tpublic_ip\030\002 \001(\r\022\r\n"
      "\005token\030\003 \001(\014\"G\n\021CMsgGSUserPlaying\022\020\n\010ste"
      "am_id\030\001 \001(\006\022\021\n\tpublic_ip\030\002 \001(\r\022\r\n\005token\030"
      "\003 \001(\014\"*\n\026CMsgGSDisconnectNotice\022\020\n\010steam"
      "_id\030\001 \001(\006\"\231\005\n\025CMsgClientGamesPlayed\022C\n\014g"
      "ames_played\030\001 \003(\0132-.proto.steam.CMsgClie"
      "ntGamesPlayed.GamePlayed\022\026\n\016client_os_ty"
      "pe\030\002 \001(\r\032\242\004\n\nGamePlayed\022\023\n\013steam_id_gs\030\001"
      " \001(\004\022\017\n\007game_id\030\002 \001(\006\022\027\n\017game_ip_address"
      "\030\003 \001(\r\022\021\n\tgame_port\030\004 \001(\r\022\021\n\tis_secure\030\005"
      " \001(\010\022\r\n\005token\030\006 \001(\014\022\027\n\017game_extra_info\030\007"
      " \001(\t\022\026\n\016game_data_blob\030\010 \001(\014\022\022\n\nprocess_"
      "id\030\t \001(\r\022\035\n\025streaming_provider_id\030\n \001(\r\022"
      "\022\n\ngame_flags\030\013 \001(\r\022\020\n\010owner_id\030\014 \001(\r\022\025\n"
      "\rvr_hmd_vendor\030\r \001(\t\022\024\n\014vr_hmd_model\030\016 \001"
      "(\t\022\035\n\022launch_option_type\030\017 \001(\r:\0010\022#\n\027pri"
      "mary_controller_type\030\020 \001(\005:\002-1\022\'\n\037primar"
      "y_steam_controller_serial\030\021 \001(\t\022\'\n\034total"
      "_steam_controller_count\030\022 \001(\r:\0010\022+\n tota"
      "l_non_steam_controller_count\030\023 \001(\r:\0010\022&\n"
      "\033controller_workshop_file_id\030\024 \001(\004:\0010\"9\n"
      "\rCMsgGSApprove\022\020\n\010steam_id\030\001 \001(\006\022\026\n\016owne"
      "r_steam_id\030\002 \001(\006\"I\n\nCMsgGSDeny\022\020\n\010steam_"
      "id\030\001 \001(\006\022\024\n\014edeny_reason\030\002 \001(\005\022\023\n\013deny_s"
      "tring\030\003 \001(\t\"4\n\nCMsgGSKick\022\020\n\010steam_id\030\001 "
      "\001(\006\022\024\n\014edeny_reason\030\002 \001(\005\"\302\001\n\022CMsgClient"
      "AuthList\022\023\n\013tokens_left\030\001 \001(\r\022\030\n\020last_re"
      "quest_seq\030\002 \001(\r\022$\n\034last_request_seq_from"
      "_server\030\003 \001(\r\022,\n\007tickets\030\004 \003(\0132\033.proto.s"
      "team.CMsgAuthTicket\022\017\n\007app_ids\030\005 \003(\r\022\030\n\020"
      "message_sequence\030\006 \001(\r\"V\n\025CMsgClientAuth"
      "ListAck\022\022\n\nticket_crc\030\001 \003(\r\022\017\n\007app_ids\030\002"
      " \003(\r\022\030\n\020message_sequence\030\003 \001(\r\"\351\003\n\025CMsgC"
      "lientLicenseList\022\022\n\007eresult\030\001 \001(\005:\0012\022<\n\010"
      "licenses\030\002 \003(\0132*.proto.steam.CMsgClientL"
      "icenseList.License\032\375\002\n\007License\022\022\n\npackag"
      "e_id\030\001 \001(\r\022\024\n\014time_created\030\002 \001(\007\022\031\n\021time"
      "_next_process\030\003 \001(\007\022\024\n\014minute_limit\030\004 \001("
      "\005\022\024\n\014minutes_used\030\005 \001(\005\022\026\n\016payment_metho"
      "d\030\006 \001(\r\022\r\n\005flags\030\007 \001(\r\022\035\n\025purchase_count"
      "ry_code\030\010 \001(\t\022\024\n\014license_type\030\t \001(\r\022\026\n\016t"
      "erritory_code\030\n \001(\005\022\025\n\rchange_number\030\013 \001"
      "(\005\022\020\n\010owner_id\030\014 \001(\r\022\026\n\016initial_period\030\r"
      " \001(\r\022\031\n\021initial_time_unit\030\016 \001(\r\022\026\n\016renew"
      "al_period\030\017 \001(\r\022\031\n\021renewal_time_unit\030\020 \001"
      "(\r\"|\n\025CMsgClientLBSSetScore\022\016\n\006app_id\030\001 "
      "\001(\r\022\026\n\016leaderboard_id\030\002 \001(\005\022\r\n\005score\030\003 \001"
      "(\005\022\017\n\007details\030\004 \001(\014\022\033\n\023upload_score_meth"
      "od\030\005 \001(\005\"\242\001\n\035CMsgClientLBSSetScoreRespon"
      "se\022\022\n\007eresult\030\001 \001(\005:\0012\022\037\n\027leaderboard_en"
      "try_count\030\002 \001(\005\022\025\n\rscore_changed\030\003 \001(\010\022\034"
      "\n\024global_rank_previous\030\004 \001(\005\022\027\n\017global_r"
      "ank_new\030\005 \001(\005\"M\n\023CMsgClientLBSSetUGC\022\016\n\006"
      "app_id\030\001 \001(\r\022\026\n\016leaderboard_id\030\002 \001(\005\022\016\n\006"
      "ugc_id\030\003 \001(\006\"1\n\033CMsgClientLBSSetUGCRespo"
      "nse\022\022\n\007eresult\030\001 \001(\005:\0012\"\247\001\n\033CMsgClientLB"
      "SFindOrCreateLB\022\016\n\006app_id\030\001 \001(\r\022\037\n\027leade"
      "rboard_sort_method\030\002 \001(\005\022 \n\030leaderboard_"
      "display_type\030\003 \001(\005\022\033\n\023create_if_not_foun"
      "d\030\004 \001(\010\022\030\n\020leaderboard_name\030\005 \001(\t\"\325\001\n#CM"
      "sgClientLBSFindOrCreateLBResponse\022\022\n\007ere"
      "sult\030\001 \001(\005:\0012\022\026\n\016leaderboard_id\030\002 \001(\005\022\037\n"
      "\027leaderboard_entry_count\030\003 \001(\005\022\"\n\027leader"
      "board_sort_method\030\004 \001(\005:\0010\022#\n\030leaderboar"
      "d_display_type\030\005 \001(\005:\0010\022\030\n\020leaderboard_n"
      "ame\030\006 \001(\t\"\237\001\n\031CMsgClientLBSGetLBEntries\022"
      "\016\n\006app_id\030\001 \001(\005\022\026\n\016leaderboard_id\030\002 \001(\005\022"
      "\023\n\013range_start\030\003 \001(\005\022\021\n\trange_end\030\004 \001(\005\022"
      " \n\030leaderboard_data_request\030\005 \001(\005\022\020\n\010ste"
      "amids\030\006 \003(\006\"\204\002\n!CMsgClientLBSGetLBEntrie"
      "sResponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\037\n\027leaderb"
      "oard_entry_count\030\002 \001(\005\022E\n\007entries\030\003 \003(\0132"
      "4.proto.steam.CMsgClientLBSGetLBEntriesR"
      "esponse.Entry\032c\n\005Entry\022\025\n\rsteam_id_user\030"
      "\001 \001(\006\022\023\n\013global_rank\030\002 \001(\005\022\r\n\005score\030\003 \001("
      "\005\022\017\n\007details\030\004 \001(\014\022\016\n\006ugc_id\030\005 \001(\006\"\313\001\n\036C"
      "MsgClientAppMinutesPlayedData\022X\n\016minutes"
      "_played\030\001 \003(\0132@.proto.steam.CMsgClientAp"
      "pMinutesPlayedData.AppMinutesPlayedData\032"
      "O\n\024AppMinutesPlayedData\022\016\n\006app_id\030\001 \001(\r\022"
      "\017\n\007forever\030\002 \001(\005\022\026\n\016last_two_weeks\030\003 \001(\005"
      "\"\252\001\n\032CMsgClientIsLimitedAccount\022\033\n\023bis_l"
      "imited_account\030\001 \001(\010\022\034\n\024bis_community_ba"
      "nned\030\002 \001(\010\022\032\n\022bis_locked_account\030\003 \001(\010\0225"
      "\n-bis_limited_account_allowed_to_invite_"
      "friends\030\004 \001(\010\"\230\001\n\024CMsgClientServerList\0229"
      "\n\007servers\030\001 \003(\0132(.proto.steam.CMsgClient"
      "ServerList.Server\032E\n\006Server\022\023\n\013server_ty"
      "pe\030\001 \001(\r\022\021\n\tserver_ip\030\002 \001(\r\022\023\n\013server_po"
      "rt\030\003 \001(\r\"\263\001\n\036CMsgClientRequestedClientSt"
      "ats\022N\n\rstats_to_send\030\001 \003(\01327.proto.steam"
      ".CMsgClientRequestedClientStats.StatsToS"
      "end\032A\n\013StatsToSend\022\023\n\013client_stat\030\001 \001(\r\022"
      "\035\n\025stat_aggregate_method\030\002 \001(\r\"\314\001\n\017CMsgC"
      "lientStat2\022<\n\013stat_detail\030\001 \003(\0132\'.proto."
      "steam.CMsgClientStat2.StatDetail\032{\n\nStat"
      "Detail\022\023\n\013client_stat\030\001 \001(\r\022\020\n\010ll_value\030"
      "\002 \001(\003\022\023\n\013time_of_day\030\003 \001(\r\022\017\n\007cell_id\030\004 "
      "\001(\r\022\020\n\010depot_id\030\005 \001(\r\022\016\n\006app_id\030\006 \001(\r\"\272\001"
      "\n\030CMsgClientMMSCreateLobby\022\016\n\006app_id\030\001 \001"
      "(\r\022\023\n\013max_members\030\002 \001(\005\022\022\n\nlobby_type\030\003 "
      "\001(\005\022\023\n\013lobby_flags\030\004 \001(\005\022\017\n\007cell_id\030\005 \001("
      "\r\022\021\n\tpublic_ip\030\006 \001(\r\022\020\n\010metadata\030\007 \001(\014\022\032"
      "\n\022persona_name_owner\030\010 \001(\t\"^\n CMsgClient"
      "MMSCreateLobbyResponse\022\016\n\006app_id\030\001 \001(\r\022\026"
      "\n\016steam_id_lobby\030\002 \001(\006\022\022\n\007eresult\030\003 \001(\005:"
      "\0012\"V\n\026CMsgClientMMSJoinLobby\022\016\n\006app_id\030\001"
      " \001(\r\022\026\n\016steam_id_lobby\030\002 \001(\006\022\024\n\014persona_"
      "name\030\003 \001(\t\"\333\002\n\036CMsgClientMMSJoinLobbyRes"
      "ponse\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_id_lobby\030"
      "\002 \001(\006\022 \n\030chat_room_enter_response\030\003 \001(\005\022"
      "\023\n\013max_members\030\004 \001(\005\022\022\n\nlobby_type\030\005 \001(\005"
      "\022\023\n\013lobby_flags\030\006 \001(\005\022\026\n\016steam_id_owner\030"
      "\007 \001(\006\022\020\n\010metadata\030\010 \001(\014\022C\n\007members\030\t \003(\013"
      "22.proto.steam.CMsgClientMMSJoinLobbyRes"
      "ponse.Member\032B\n\006Member\022\020\n\010steam_id\030\001 \001(\006"
      "\022\024\n\014persona_name\030\002 \001(\t\022\020\n\010metadata\030\003 \001(\014"
      "\"A\n\027CMsgClientMMSLeaveLobby\022\016\n\006app_id\030\001 "
      "\001(\r\022\026\n\016steam_id_lobby\030\002 \001(\006\"]\n\037CMsgClien"
      "tMMSLeaveLobbyResponse\022\016\n\006app_id\030\001 \001(\r\022\026"
      "\n\016steam_id_lobby\030\002 \001(\006\022\022\n\007eresult\030\003 \001(\005:"
      "\0012\"\376\001\n\031CMsgClientMMSGetLobbyList\022\016\n\006app_"
      "id\030\001 \001(\r\022\035\n\025num_lobbies_requested\030\003 \001(\005\022"
      "\017\n\007cell_id\030\004 \001(\r\022\021\n\tpublic_ip\030\005 \001(\r\022>\n\007f"
      "ilters\030\006 \003(\0132-.proto.steam.CMsgClientMMS"
      "GetLobbyList.Filter\032N\n\006Filter\022\013\n\003key\030\001 \001"
      "(\t\022\r\n\005value\030\002 \001(\t\022\023\n\013comparision\030\003 \001(\005\022\023"
      "\n\013filter_type\030\004 \001(\005\"\261\002\n!CMsgClientMMSGet"
      "LobbyListResponse\022\016\n\006app_id\030\001 \001(\r\022\022\n\007ere"
      "sult\030\003 \001(\005:\0012\022E\n\007lobbies\030\004 \003(\01324.proto.s"
      "team.CMsgClientMMSGetLobbyListResponse.L"
      "obby\032\240\001\n\005Lobby\022\020\n\010steam_id\030\001 \001(\006\022\023\n\013max_"
      "members\030\002 \001(\005\022\022\n\nlobby_type\030\003 \001(\005\022\023\n\013lob"
      "by_flags\030\004 \001(\005\022\020\n\010metadata\030\005 \001(\014\022\023\n\013num_"
      "members\030\006 \001(\005\022\020\n\010distance\030\007 \001(\002\022\016\n\006weigh"
      "t\030\010 \001(\003\"\254\001\n\031CMsgClientMMSSetLobbyData\022\016\n"
      "\006app_id\030\001 \001(\r\022\026\n\016steam_id_lobby\030\002 \001(\006\022\027\n"
      "\017steam_id_member\030\003 \001(\006\022\023\n\013max_members\030\004 "
      "\001(\005\022\022\n\nlobby_type\030\005 \001(\005\022\023\n\013lobby_flags\030\006"
      " \001(\005\022\020\n\010metadata\030\007 \001(\014\"_\n!CMsgClientMMSS"
      "etLobbyDataResponse\022\016\n\006app_id\030\001 \001(\r\022\026\n\016s"
      "team_id_lobby\030\002 \001(\006\022\022\n\007eresult\030\003 \001(\005:\0012\""
      "C\n\031CMsgClientMMSGetLobbyData\022\016\n\006app_id\030\001"
      " \001(\r\022\026\n\016steam_id_lobby\030\002 \001(\006\"\324\002\n\026CMsgCli"
      "entMMSLobbyData\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam"
      "_id_lobby\030\002 \001(\006\022\023\n\013num_members\030\003 \001(\005\022\023\n\013"
      "max_members\030\004 \001(\005\022\022\n\nlobby_type\030\005 \001(\005\022\023\n"
      "\013lobby_flags\030\006 \001(\005\022\026\n\016steam_id_owner\030\007 \001"
      "(\006\022\020\n\010metadata\030\010 \001(\014\022;\n\007members\030\t \003(\0132*."
      "proto.steam.CMsgClientMMSLobbyData.Membe"
      "r\022\024\n\014lobby_cellid\030\n \001(\r\032B\n\006Member\022\020\n\010ste"
      "am_id\030\001 \001(\006\022\024\n\014persona_name\030\002 \001(\t\022\020\n\010met"
      "adata\030\003 \001(\014\"w\n\035CMsgClientMMSSendLobbyCha"
      "tMsg\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_id_lobby\030\002"
      " \001(\006\022\027\n\017steam_id_target\030\003 \001(\006\022\025\n\rlobby_m"
      "essage\030\004 \001(\014\"s\n\031CMsgClientMMSLobbyChatMs"
      "g\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_id_lobby\030\002 \001("
      "\006\022\027\n\017steam_id_sender\030\003 \001(\006\022\025\n\rlobby_mess"
      "age\030\004 \001(\014\"`\n\032CMsgClientMMSSetLobbyOwner\022"
      "\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_id_lobby\030\002 \001(\006\022"
      "\032\n\022steam_id_new_owner\030\003 \001(\006\"`\n\"CMsgClien"
      "tMMSSetLobbyOwnerResponse\022\016\n\006app_id\030\001 \001("
      "\r\022\026\n\016steam_id_lobby\030\002 \001(\006\022\022\n\007eresult\030\003 \001"
      "(\005:\0012\"^\n\033CMsgClientMMSSetLobbyLinked\022\016\n\006"
      "app_id\030\001 \001(\r\022\026\n\016steam_id_lobby\030\002 \001(\006\022\027\n\017"
      "steam_id_lobby2\030\003 \001(\006\"\231\001\n\037CMsgClientMMSS"
      "etLobbyGameServer\022\016\n\006app_id\030\001 \001(\r\022\026\n\016ste"
      "am_id_lobby\030\002 \001(\006\022\026\n\016game_server_ip\030\003 \001("
      "\r\022\030\n\020game_server_port\030\004 \001(\r\022\034\n\024game_serv"
      "er_steam_id\030\005 \001(\006\"\231\001\n\037CMsgClientMMSLobby"
      "GameServerSet\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_i"
      "d_lobby\030\002 \001(\006\022\026\n\016game_server_ip\030\003 \001(\r\022\030\n"
      "\020game_server_port\030\004 \001(\r\022\034\n\024game_server_s"
      "team_id\030\005 \001(\006\"s\n\034CMsgClientMMSUserJoined"
      "Lobby\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_id_lobby\030"
      "\002 \001(\006\022\025\n\rsteam_id_user\030\003 \001(\006\022\024\n\014persona_"
      "name\030\004 \001(\t\"q\n\032CMsgClientMMSUserLeftLobby"
      "\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_id_lobby\030\002 \001(\006"
      "\022\025\n\rsteam_id_user\030\003 \001(\006\022\024\n\014persona_name\030"
      "\004 \001(\t\"c\n\032CMsgClientMMSInviteToLobby\022\016\n\006a"
      "pp_id\030\001 \001(\r\022\026\n\016steam_id_lobby\030\002 \001(\006\022\035\n\025s"
      "team_id_user_invited\030\003 \001(\006\"`\n\031CMsgClient"
      "UDSInviteToGame\022\025\n\rsteam_id_dest\030\001 \001(\006\022\024"
      "\n\014steam_id_src\030\002 \001(\006\022\026\n\016connect_string\030\003"
      " \001(\t\"\271\001\n\024CMsgClientChatInvite\022\030\n\020steam_i"
      "d_invited\030\001 \001(\006\022\025\n\rsteam_id_chat\030\002 \001(\006\022\027"
      "\n\017steam_id_patron\030\003 \001(\006\022\025\n\rchatroom_type"
      "\030\004 \001(\005\022\034\n\024steam_id_friend_chat\030\005 \001(\006\022\021\n\t"
      "chat_name\030\006 \001(\t\022\017\n\007game_id\030\007 \001(\006\"\256\010\n\031CMs"
      "gClientConnectionStats\022G\n\013stats_logon\030\001 "
      "\001(\01322.proto.steam.CMsgClientConnectionSt"
      "ats.Stats_Logon\022G\n\013stats_vconn\030\002 \001(\01322.p"
      "roto.steam.CMsgClientConnectionStats.Sta"
      "ts_VConn\032\307\001\n\013Stats_Logon\022\030\n\020connect_atte"
      "mpts\030\001 \001(\005\022\031\n\021connect_successes\030\002 \001(\005\022\030\n"
      "\020connect_failures\030\003 \001(\005\022\033\n\023connections_d"
      "ropped\030\004 \001(\005\022\027\n\017seconds_running\030\005 \001(\r\022\034\n"
      "\024msec_tologonthistime\030\006 \001(\r\022\025\n\rcount_bad"
      "_cms\030\007 \001(\r\032q\n\tStats_UDP\022\021\n\tpkts_sent\030\001 \001"
      "(\004\022\022\n\nbytes_sent\030\002 \001(\004\022\021\n\tpkts_recv\030\003 \001("
      "\004\022\026\n\016pkts_processed\030\004 \001(\004\022\022\n\nbytes_recv\030"
      "\005 \001(\004\032\301\004\n\013Stats_VConn\022\027\n\017connections_udp"
      "\030\001 \001(\r\022\027\n\017connections_tcp\030\002 \001(\r\022C\n\tstats"
      "_udp\030\003 \001(\01320.proto.steam.CMsgClientConne"
      "ctionStats.Stats_UDP\022\026\n\016pkts_abandoned\030\004"
      " \001(\004\022\031\n\021conn_req_received\030\005 \001(\004\022\023\n\013pkts_"
      "resent\030\006 \001(\004\022\021\n\tmsgs_sent\030\007 \001(\004\022\030\n\020msgs_"
      "sent_failed\030\010 \001(\004\022\021\n\tmsgs_recv\030\t \001(\004\022\026\n\016"
      "datagrams_sent\030\n \001(\004\022\026\n\016datagrams_recv\030\013"
      " \001(\004\022\025\n\rbad_pkts_recv\030\014 \001(\004\022\036\n\026unknown_c"
      "onn_pkts_recv\030\r \001(\004\022\030\n\020missed_pkts_recv\030"
      "\016 \001(\004\022\025\n\rdup_pkts_recv\030\017 \001(\004\022!\n\031failed_c"
      "onnect_challenges\030\020 \001(\004\022\035\n\025micro_sec_avg"
      "_latency\030\021 \001(\r\022\035\n\025micro_sec_min_latency\030"
      "\022 \001(\r\022\035\n\025micro_sec_max_latency\030\023 \001(\r\022\033\n\023"
      "mem_pool_msg_in_use\030\024 \001(\r\"\336\001\n\032CMsgClient"
      "ServersAvailable\022^\n\026server_types_availab"
      "le\030\001 \003(\0132>.proto.steam.CMsgClientServers"
      "Available.Server_Types_Available\022%\n\035serv"
      "er_type_for_auth_services\030\002 \001(\r\0329\n\026Serve"
      "r_Types_Available\022\016\n\006server\030\001 \001(\r\022\017\n\007cha"
      "nged\030\002 \001(\010\"u\n\026CMsgClientGetUserStats\022\017\n\007"
      "game_id\030\001 \001(\006\022\021\n\tcrc_stats\030\002 \001(\r\022\034\n\024sche"
      "ma_local_version\030\003 \001(\005\022\031\n\021steam_id_for_u"
      "ser\030\004 \001(\006\"\367\002\n\036CMsgClientGetUserStatsResp"
      "onse\022\017\n\007game_id\030\001 \001(\006\022\022\n\007eresult\030\002 \001(\005:\001"
      "2\022\021\n\tcrc_stats\030\003 \001(\r\022\016\n\006schema\030\004 \001(\014\022@\n\005"
      "stats\030\005 \003(\01321.proto.steam.CMsgClientGetU"
      "serStatsResponse.Stats\022Z\n\022achievement_bl"
      "ocks\030\006 \003(\0132>.proto.steam.CMsgClientGetUs"
      "erStatsResponse.Achievement_Blocks\032,\n\005St"
      "ats\022\017\n\007stat_id\030\001 \001(\r\022\022\n\nstat_value\030\002 \001(\r"
      "\032A\n\022Achievement_Blocks\022\026\n\016achievement_id"
      "\030\001 \001(\r\022\023\n\013unlock_time\030\002 \003(\007\"\246\002\n CMsgClie"
      "ntStoreUserStatsResponse\022\017\n\007game_id\030\001 \001("
      "\006\022\022\n\007eresult\030\002 \001(\005:\0012\022\021\n\tcrc_stats\030\003 \001(\r"
      "\022f\n\027stats_failed_validation\030\004 \003(\0132E.prot"
      "o.steam.CMsgClientStoreUserStatsResponse"
      ".Stats_Failed_Validation\022\031\n\021stats_out_of"
      "_date\030\005 \001(\010\032G\n\027Stats_Failed_Validation\022\017"
      "\n\007stat_id\030\001 \001(\r\022\033\n\023reverted_stat_value\030\002"
      " \001(\r\"\364\001\n\031CMsgClientStoreUserStats2\022\017\n\007ga"
      "me_id\030\001 \001(\006\022\027\n\017settor_steam_id\030\002 \001(\006\022\027\n\017"
      "settee_steam_id\030\003 \001(\006\022\021\n\tcrc_stats\030\004 \001(\r"
      "\022\026\n\016explicit_reset\030\005 \001(\010\022;\n\005stats\030\006 \003(\0132"
      ",.proto.steam.CMsgClientStoreUserStats2."
      "Stats\032,\n\005Stats\022\017\n\007stat_id\030\001 \001(\r\022\022\n\nstat_"
      "value\030\002 \001(\r\"\316\001\n\026CMsgClientStatsUpdated\022\020"
      "\n\010steam_id\030\001 \001(\006\022\017\n\007game_id\030\002 \001(\006\022\021\n\tcrc"
      "_stats\030\003 \001(\r\022H\n\rupdated_stats\030\004 \003(\01321.pr"
      "oto.steam.CMsgClientStatsUpdated.Updated"
      "_Stats\0324\n\rUpdated_Stats\022\017\n\007stat_id\030\001 \001(\r"
      "\022\022\n\nstat_value\030\002 \001(\r\"\310\001\n\030CMsgClientStore"
      "UserStats\022\017\n\007game_id\030\001 \001(\006\022\026\n\016explicit_r"
      "eset\030\002 \001(\010\022L\n\016stats_to_store\030\003 \003(\01324.pro"
      "to.steam.CMsgClientStoreUserStats.Stats_"
      "To_Store\0325\n\016Stats_To_Store\022\017\n\007stat_id\030\001 "
      "\001(\r\022\022\n\nstat_value\030\002 \001(\r\"\034\n\032CMsgClientGet"
      "ClientDetails\"\?\n$CMsgClientReportOverlay"
      "DetourFailure\022\027\n\017failure_strings\030\001 \003(\t\"\313"
      "\002\n\"CMsgClientGetClientDetailsResponse\022\027\n"
      "\017package_version\030\001 \001(\r\022\030\n\020protocol_versi"
      "on\030\010 \001(\r\022\n\n\002os\030\002 \001(\t\022\024\n\014machine_name\030\003 \001"
      "(\t\022\021\n\tip_public\030\004 \001(\t\022\022\n\nip_private\030\005 \001("
      "\t\022\027\n\017bytes_available\030\007 \001(\004\022K\n\rgames_runn"
      "ing\030\006 \003(\01324.proto.steam.CMsgClientGetCli"
      "entDetailsResponse.Game\032C\n\004Game\022\r\n\005appid"
      "\030\001 \001(\r\022\022\n\nextra_info\030\002 \001(\t\022\030\n\020time_runni"
      "ng_sec\030\003 \001(\r\"\210\001\n\032CMsgClientGetClientAppL"
      "ist\022\r\n\005media\030\001 \001(\010\022\r\n\005tools\030\002 \001(\010\022\r\n\005gam"
      "es\030\003 \001(\010\022\026\n\016only_installed\030\004 \001(\010\022\025\n\ronly"
      "_changing\030\005 \001(\010\022\016\n\006comics\030\006 \001(\010\"\251\004\n\"CMsg"
      "ClientGetClientAppListResponse\022A\n\004apps\030\001"
      " \003(\01323.proto.steam.CMsgClientGetClientAp"
      "pListResponse.App\022\027\n\017bytes_available\030\002 \001"
      "(\004\032\246\003\n\003App\022\r\n\005appid\030\001 \001(\r\022\020\n\010category\030\002 "
      "\001(\t\022\020\n\010app_type\030\n \001(\t\022\020\n\010favorite\030\003 \001(\010\022"
      "\021\n\tinstalled\030\004 \001(\010\022\023\n\013auto_update\030\005 \001(\010\022"
      "\030\n\020bytes_downloaded\030\006 \001(\004\022\024\n\014bytes_neede"
      "d\030\007 \001(\004\022\033\n\023bytes_download_rate\030\010 \001(\r\022\027\n\017"
      "download_paused\030\013 \001(\010\022\027\n\017num_downloading"
      "\030\014 \001(\r\022\022\n\nnum_paused\030\r \001(\r\022\020\n\010changing\030\016"
      " \001(\010\022\035\n\025available_on_platform\030\017 \001(\010\022E\n\004d"
      "lcs\030\t \003(\01327.proto.steam.CMsgClientGetCli"
      "entAppListResponse.App.DLC\032\'\n\003DLC\022\r\n\005app"
      "id\030\001 \001(\r\022\021\n\tinstalled\030\002 \001(\010\"+\n\032CMsgClien"
      "tInstallClientApp\022\r\n\005appid\030\001 \001(\r\"4\n\"CMsg"
      "ClientInstallClientAppResponse\022\016\n\006result"
      "\030\001 \001(\r\"-\n\034CMsgClientUninstallClientApp\022\r"
      "\n\005appid\030\001 \001(\r\"6\n$CMsgClientUninstallClie"
      "ntAppResponse\022\016\n\006result\030\001 \001(\r\"B\n!CMsgCli"
      "entSetClientAppUpdateState\022\r\n\005appid\030\001 \001("
      "\r\022\016\n\006update\030\002 \001(\010\";\n)CMsgClientSetClient"
      "AppUpdateStateResponse\022\016\n\006result\030\001 \001(\r\"\206"
      "\002\n\036CMsgClientUFSUploadFileRequest\022\016\n\006app"
      "_id\030\001 \001(\r\022\021\n\tfile_size\030\002 \001(\r\022\025\n\rraw_file"
      "_size\030\003 \001(\r\022\020\n\010sha_file\030\004 \001(\014\022\022\n\ntime_st"
      "amp\030\005 \001(\004\022\021\n\tfile_name\030\006 \001(\t\022$\n\034platform"
      "s_to_sync_deprecated\030\007 \001(\r\022%\n\021platforms_"
      "to_sync\030\010 \001(\r:\n4294967295\022\017\n\007cell_id\030\t \001"
      "(\r\022\023\n\013can_encrypt\030\n \001(\010\"\273\001\n\037CMsgClientUF"
      "SUploadFileResponse\022\022\n\007eresult\030\001 \001(\005:\0012\022"
      "\020\n\010sha_file\030\002 \001(\014\022\020\n\010use_http\030\003 \001(\010\022\021\n\th"
      "ttp_host\030\004 \001(\t\022\020\n\010http_url\030\005 \001(\t\022\022\n\nkv_h"
      "eaders\030\006 \001(\014\022\021\n\tuse_https\030\007 \001(\010\022\024\n\014encry"
      "pt_file\030\010 \001(\010\"\272\001\n\031CMsgClientUFSUploadCom"
      "mit\022:\n\005files\030\001 \003(\0132+.proto.steam.CMsgCli"
      "entUFSUploadCommit.File\032a\n\004File\022\022\n\007eresu"
      "lt\030\001 \001(\005:\0012\022\016\n\006app_id\030\002 \001(\r\022\020\n\010sha_file\030"
      "\003 \001(\014\022\020\n\010cub_file\030\004 \001(\r\022\021\n\tfile_name\030\005 \001"
      "(\t\"\245\001\n!CMsgClientUFSUploadCommitResponse"
      "\022B\n\005files\030\001 \003(\01323.proto.steam.CMsgClient"
      "UFSUploadCommitResponse.File\032<\n\004File\022\022\n\007"
      "eresult\030\001 \001(\005:\0012\022\016\n\006app_id\030\002 \001(\r\022\020\n\010sha_"
      "file\030\003 \001(\014\"L\n\026CMsgClientUFSFileChunk\022\020\n\010"
      "sha_file\030\001 \001(\014\022\022\n\nfile_start\030\002 \001(\r\022\014\n\004da"
      "ta\030\003 \001(\014\" \n\036CMsgClientUFSTransferHeartbe"
      "at\"G\n\037CMsgClientUFSUploadFileFinished\022\022\n"
      "\007eresult\030\001 \001(\005:\0012\022\020\n\010sha_file\030\002 \001(\014\"_\n\036C"
      "MsgClientUFSDeleteFileRequest\022\016\n\006app_id\030"
      "\001 \001(\r\022\021\n\tfile_name\030\002 \001(\t\022\032\n\022is_explicit_"
      "delete\030\003 \001(\010\"H\n\037CMsgClientUFSDeleteFileR"
      "esponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\021\n\tfile_name"
      "\030\002 \001(\t\"S\n\036CMsgClientUFSGetFileListForApp"
      "\022\025\n\rapps_to_query\030\001 \003(\r\022\032\n\022send_path_pre"
      "fixes\030\002 \001(\010\"\315\002\n&CMsgClientUFSGetFileList"
      "ForAppResponse\022G\n\005files\030\001 \003(\01328.proto.st"
      "eam.CMsgClientUFSGetFileListForAppRespon"
      "se.File\022\025\n\rpath_prefixes\030\002 \003(\t\032\270\001\n\004File\022"
      "\016\n\006app_id\030\001 \001(\r\022\021\n\tfile_name\030\002 \001(\t\022\020\n\010sh"
      "a_file\030\003 \001(\014\022\022\n\ntime_stamp\030\004 \001(\004\022\025\n\rraw_"
      "file_size\030\005 \001(\r\022\032\n\022is_explicit_delete\030\006 "
      "\001(\010\022\031\n\021platforms_to_sync\030\007 \001(\r\022\031\n\021path_p"
      "refix_index\030\010 \001(\r:\010\200\265\030\010\210\265\030\020\"Z\n\034CMsgClien"
      "tUFSDownloadRequest\022\016\n\006app_id\030\001 \001(\r\022\021\n\tf"
      "ile_name\030\002 \001(\t\022\027\n\017can_handle_http\030\003 \001(\010\""
      "\240\002\n\035CMsgClientUFSDownloadResponse\022\022\n\007ere"
      "sult\030\001 \001(\005:\0012\022\016\n\006app_id\030\002 \001(\r\022\021\n\tfile_si"
      "ze\030\003 \001(\r\022\025\n\rraw_file_size\030\004 \001(\r\022\020\n\010sha_f"
      "ile\030\005 \001(\014\022\022\n\ntime_stamp\030\006 \001(\004\022\032\n\022is_expl"
      "icit_delete\030\007 \001(\010\022\020\n\010use_http\030\010 \001(\010\022\021\n\th"
      "ttp_host\030\t \001(\t\022\020\n\010http_url\030\n \001(\t\022\022\n\nkv_h"
      "eaders\030\013 \001(\014\022\021\n\tuse_https\030\014 \001(\010\022\021\n\tencry"
      "pted\030\r \001(\010\"]\n\031CMsgClientUFSLoginRequest\022"
      "\030\n\020protocol_version\030\001 \001(\r\022\030\n\020am_session_"
      "token\030\002 \001(\004\022\014\n\004apps\030\003 \003(\r\"0\n\032CMsgClientU"
      "FSLoginResponse\022\022\n\007eresult\030\001 \001(\005:\0012\"G\n#C"
      "MsgClientRequestEncryptedAppTicket\022\016\n\006ap"
      "p_id\030\001 \001(\r\022\020\n\010userdata\030\002 \001(\014\"\220\001\n+CMsgCli"
      "entRequestEncryptedAppTicketResponse\022\016\n\006"
      "app_id\030\001 \001(\r\022\022\n\007eresult\030\002 \001(\005:\0012\022=\n\024encr"
      "ypted_app_ticket\030\003 \001(\0132\037.proto.steam.Enc"
      "ryptedAppTicket\"\246\001\n\032CMsgClientWalletInfo"
      "Update\022\022\n\nhas_wallet\030\001 \001(\010\022\017\n\007balance\030\002 "
      "\001(\005\022\020\n\010currency\030\003 \001(\005\022\027\n\017balance_delayed"
      "\030\004 \001(\005\022\027\n\tbalance64\030\005 \001(\003B\004\240\266\030\001\022\037\n\021balan"
      "ce64_delayed\030\006 \001(\003B\004\240\266\030\001\"M\n\027CMsgClientAp"
      "pInfoUpdate\022\031\n\021last_changenumber\030\001 \001(\r\022\027"
      "\n\017send_changelist\030\002 \001(\010\"d\n\030CMsgClientApp"
      "InfoChanges\022\035\n\025current_change_number\030\001 \001"
      "(\r\022\031\n\021force_full_update\030\002 \001(\010\022\016\n\006appIDs\030"
      "\003 \003(\r\"\267\001\n\030CMsgClientAppInfoRequest\0227\n\004ap"
      "ps\030\001 \003(\0132).proto.steam.CMsgClientAppInfo"
      "Request.App\022\037\n\020supports_batches\030\002 \001(\010:\005f"
      "alse\032A\n\003App\022\016\n\006app_id\030\001 \001(\r\022\025\n\rsection_f"
      "lags\030\002 \001(\r\022\023\n\013section_CRC\030\003 \003(\r\"\263\002\n\031CMsg"
      "ClientAppInfoResponse\0228\n\004apps\030\001 \003(\0132*.pr"
      "oto.steam.CMsgClientAppInfoResponse.App\022"
      "\024\n\014apps_unknown\030\002 \003(\r\022\024\n\014apps_pending\030\003 "
      "\001(\r\032\245\001\n\003App\022\016\n\006app_id\030\001 \001(\r\022\025\n\rchange_nu"
      "mber\030\002 \001(\r\022D\n\010sections\030\003 \003(\01322.proto.ste"
      "am.CMsgClientAppInfoResponse.App.Section"
      "\0321\n\007Section\022\022\n\nsection_id\030\001 \001(\r\022\022\n\nsecti"
      "on_kv\030\002 \001(\014:\010\200\265\030\000\210\265\030\000\"K\n\034CMsgClientPacka"
      "geInfoRequest\022\023\n\013package_ids\030\001 \003(\r\022\026\n\016me"
      "ta_data_only\030\002 \001(\010\"\354\001\n\035CMsgClientPackage"
      "InfoResponse\022D\n\010packages\030\001 \003(\01322.proto.s"
      "team.CMsgClientPackageInfoResponse.Packa"
      "ge\022\030\n\020packages_unknown\030\002 \003(\r\022\030\n\020packages"
      "_pending\030\003 \001(\r\032Q\n\007Package\022\022\n\npackage_id\030"
      "\001 \001(\r\022\025\n\rchange_number\030\002 \001(\r\022\013\n\003sha\030\003 \001("
      "\014\022\016\n\006buffer\030\004 \001(\014\"\300\001\n!CMsgClientPICSChan"
      "gesSinceRequest\022\033\n\023since_change_number\030\001"
      " \001(\r\022\035\n\025send_app_info_changes\030\002 \001(\010\022!\n\031s"
      "end_package_info_changes\030\003 \001(\010\022\033\n\023num_ap"
      "p_info_cached\030\004 \001(\r\022\037\n\027num_package_info_"
      "cached\030\005 \001(\r\"\375\003\n\"CMsgClientPICSChangesSi"
      "nceResponse\022\035\n\025current_change_number\030\001 \001"
      "(\r\022\033\n\023since_change_number\030\002 \001(\r\022\031\n\021force"
      "_full_update\030\003 \001(\010\022V\n\017package_changes\030\004 "
      "\003(\0132=.proto.steam.CMsgClientPICSChangesS"
      "inceResponse.PackageChange\022N\n\013app_change"
      "s\030\005 \003(\01329.proto.steam.CMsgClientPICSChan"
      "gesSinceResponse.AppChange\022\035\n\025force_full"
      "_app_update\030\006 \001(\010\022!\n\031force_full_package_"
      "update\030\007 \001(\010\032N\n\rPackageChange\022\021\n\tpackage"
      "id\030\001 \001(\r\022\025\n\rchange_number\030\002 \001(\r\022\023\n\013needs"
      "_token\030\003 \001(\010\032F\n\tAppChange\022\r\n\005appid\030\001 \001(\r"
      "\022\025\n\rchange_number\030\002 \001(\r\022\023\n\013needs_token\030\003"
      " \001(\010\"\342\002\n CMsgClientPICSProductInfoReques"
      "t\022K\n\010packages\030\001 \003(\01329.proto.steam.CMsgCl"
      "ientPICSProductInfoRequest.PackageInfo\022C"
      "\n\004apps\030\002 \003(\01325.proto.steam.CMsgClientPIC"
      "SProductInfoRequest.AppInfo\022\026\n\016meta_data"
      "_only\030\003 \001(\010\022\027\n\017num_prev_failed\030\004 \001(\r\032C\n\007"
      "AppInfo\022\r\n\005appid\030\001 \001(\r\022\024\n\014access_token\030\002"
      " \001(\004\022\023\n\013only_public\030\003 \001(\010\0326\n\013PackageInfo"
      "\022\021\n\tpackageid\030\001 \001(\r\022\024\n\014access_token\030\002 \001("
      "\004\"\325\004\n!CMsgClientPICSProductInfoResponse\022"
      "D\n\004apps\030\001 \003(\01326.proto.steam.CMsgClientPI"
      "CSProductInfoResponse.AppInfo\022\026\n\016unknown"
      "_appids\030\002 \003(\r\022L\n\010packages\030\003 \003(\0132:.proto."
      "steam.CMsgClientPICSProductInfoResponse."
      "PackageInfo\022\032\n\022unknown_packageids\030\004 \003(\r\022"
      "\026\n\016meta_data_only\030\005 \001(\010\022\030\n\020response_pend"
      "ing\030\006 \001(\010\022\025\n\rhttp_min_size\030\007 \001(\r\022\021\n\thttp"
      "_host\030\010 \001(\t\032\206\001\n\007AppInfo\022\r\n\005appid\030\001 \001(\r\022\025"
      "\n\rchange_number\030\002 \001(\r\022\025\n\rmissing_token\030\003"
      " \001(\010\022\013\n\003sha\030\004 \001(\014\022\016\n\006buffer\030\005 \001(\014\022\023\n\013onl"
      "y_public\030\006 \001(\010\022\014\n\004size\030\007 \001(\r\032y\n\013PackageI"
      "nfo\022\021\n\tpackageid\030\001 \001(\r\022\025\n\rchange_number\030"
      "\002 \001(\r\022\025\n\rmissing_token\030\003 \001(\010\022\013\n\003sha\030\004 \001("
      "\014\022\016\n\006buffer\030\005 \001(\014\022\014\n\004size\030\006 \001(\r:\010\200\265\030\000\210\265\030"
      "\000\"F\n CMsgClientPICSAccessTokenRequest\022\022\n"
      "\npackageids\030\001 \003(\r\022\016\n\006appids\030\002 \003(\r\"\367\002\n!CM"
      "sgClientPICSAccessTokenResponse\022Z\n\025packa"
      "ge_access_tokens\030\001 \003(\0132;.proto.steam.CMs"
      "gClientPICSAccessTokenResponse.PackageTo"
      "ken\022\035\n\025package_denied_tokens\030\002 \003(\r\022R\n\021ap"
      "p_access_tokens\030\003 \003(\01327.proto.steam.CMsg"
      "ClientPICSAccessTokenResponse.AppToken\022\031"
      "\n\021app_denied_tokens\030\004 \003(\r\0327\n\014PackageToke"
      "n\022\021\n\tpackageid\030\001 \001(\r\022\024\n\014access_token\030\002 \001"
      "(\004\032/\n\010AppToken\022\r\n\005appid\030\001 \001(\r\022\024\n\014access_"
      "token\030\002 \001(\004\"D\n\032CMsgClientUFSGetUGCDetail"
      "s\022&\n\010hcontent\030\001 \001(\006:\0241844674407370955161"
      "5\"\345\001\n\"CMsgClientUFSGetUGCDetailsResponse"
      "\022\022\n\007eresult\030\001 \001(\005:\0012\022\013\n\003url\030\002 \001(\t\022\016\n\006app"
      "_id\030\003 \001(\r\022\020\n\010filename\030\004 \001(\t\022\027\n\017steamid_c"
      "reator\030\005 \001(\006\022\021\n\tfile_size\030\006 \001(\r\022\034\n\024compr"
      "essed_file_size\030\007 \001(\r\022\027\n\017rangecheck_host"
      "\030\010 \001(\t\022\031\n\021file_encoded_sha1\030\t \001(\t\"C\n\036CMs"
      "gClientUFSGetSingleFileInfo\022\016\n\006app_id\030\001 "
      "\001(\r\022\021\n\tfile_name\030\002 \001(\t\"\270\001\n&CMsgClientUFS"
      "GetSingleFileInfoResponse\022\022\n\007eresult\030\001 \001"
      "(\005:\0012\022\016\n\006app_id\030\002 \001(\r\022\021\n\tfile_name\030\003 \001(\t"
      "\022\020\n\010sha_file\030\004 \001(\014\022\022\n\ntime_stamp\030\005 \001(\004\022\025"
      "\n\rraw_file_size\030\006 \001(\r\022\032\n\022is_explicit_del"
      "ete\030\007 \001(\010\";\n\026CMsgClientUFSShareFile\022\016\n\006a"
      "pp_id\030\001 \001(\r\022\021\n\tfile_name\030\002 \001(\t\"\\\n\036CMsgCl"
      "ientUFSShareFileResponse\022\022\n\007eresult\030\001 \001("
      "\005:\0012\022&\n\010hcontent\030\002 \001(\006:\0241844674407370955"
      "1615\"3\n\033CMsgClientAMGetClanOfficers\022\024\n\014s"
      "teamid_clan\030\001 \001(\006\"f\n#CMsgClientAMGetClan"
      "OfficersResponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\024\n\014"
      "steamid_clan\030\002 \001(\006\022\025\n\rofficer_count\030\003 \001("
      "\005\"\234\001\n!CMsgClientAMGetPersonaNameHistory\022"
      "\020\n\010id_count\030\001 \001(\005\022F\n\003Ids\030\002 \003(\01329.proto.s"
      "team.CMsgClientAMGetPersonaNameHistory.I"
      "dInstance\032\035\n\nIdInstance\022\017\n\007steamid\030\001 \001(\006"
      "\"\333\002\n)CMsgClientAMGetPersonaNameHistoryRe"
      "sponse\022[\n\tresponses\030\002 \003(\0132H.proto.steam."
      "CMsgClientAMGetPersonaNameHistoryRespons"
      "e.NameTableInstance\032\320\001\n\021NameTableInstanc"
      "e\022\022\n\007eresult\030\001 \001(\005:\0012\022\017\n\007steamid\030\002 \001(\006\022d"
      "\n\005names\030\003 \003(\0132U.proto.steam.CMsgClientAM"
      "GetPersonaNameHistoryResponse.NameTableI"
      "nstance.NameInstance\0320\n\014NameInstance\022\022\n\n"
      "name_since\030\001 \001(\007\022\014\n\004name\030\002 \001(\t\"E\n\036CMsgCl"
      "ientDeregisterWithServer\022\023\n\013eservertype\030"
      "\001 \001(\r\022\016\n\006app_id\030\002 \001(\r\"\276\004\n\023CMsgClientClan"
      "State\022\024\n\014steamid_clan\030\001 \001(\006\022\027\n\017m_unStatu"
      "sFlags\030\002 \001(\r\022\032\n\022clan_account_flags\030\003 \001(\r"
      "\022<\n\tname_info\030\004 \001(\0132).proto.steam.CMsgCl"
      "ientClanState.NameInfo\022@\n\013user_counts\030\005 "
      "\001(\0132+.proto.steam.CMsgClientClanState.Us"
      "erCounts\0226\n\006events\030\006 \003(\0132&.proto.steam.C"
      "MsgClientClanState.Event\022=\n\rannouncement"
      "s\030\007 \003(\0132&.proto.steam.CMsgClientClanStat"
      "e.Event\0321\n\010NameInfo\022\021\n\tclan_name\030\001 \001(\t\022\022"
      "\n\nsha_avatar\030\002 \001(\014\032P\n\nUserCounts\022\017\n\007memb"
      "ers\030\001 \001(\r\022\016\n\006online\030\002 \001(\r\022\020\n\010chatting\030\003 "
      "\001(\r\022\017\n\007in_game\030\004 \001(\r\032`\n\005Event\022\013\n\003gid\030\001 \001"
      "(\006\022\022\n\nevent_time\030\002 \001(\r\022\020\n\010headline\030\003 \001(\t"
      "\022\017\n\007game_id\030\004 \001(\006\022\023\n\013just_posted\030\005 \001(\010B\005"
      "H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 21085);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_clientserver.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5fbase_2eproto::AddDescriptors();
  ::proto::steam::protobuf_encrypted_5fapp_5fticket_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fclientserver_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUDSP2PSessionStarted::kSteamidRemoteFieldNumber;
const int CMsgClientUDSP2PSessionStarted::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUDSP2PSessionStarted::CMsgClientUDSP2PSessionStarted()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUDSP2PSessionStarted)
}
CMsgClientUDSP2PSessionStarted::CMsgClientUDSP2PSessionStarted(const CMsgClientUDSP2PSessionStarted& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_remote_, &from.steamid_remote_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_remote_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUDSP2PSessionStarted)
}

void CMsgClientUDSP2PSessionStarted::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_remote_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_remote_) + sizeof(appid_));
}

CMsgClientUDSP2PSessionStarted::~CMsgClientUDSP2PSessionStarted() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUDSP2PSessionStarted)
  SharedDtor();
}

void CMsgClientUDSP2PSessionStarted::SharedDtor() {
}

void CMsgClientUDSP2PSessionStarted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUDSP2PSessionStarted::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUDSP2PSessionStarted& CMsgClientUDSP2PSessionStarted::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUDSP2PSessionStarted* CMsgClientUDSP2PSessionStarted::New(::google::protobuf::Arena* arena) const {
  CMsgClientUDSP2PSessionStarted* n = new CMsgClientUDSP2PSessionStarted;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUDSP2PSessionStarted::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUDSP2PSessionStarted)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steamid_remote_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&steamid_remote_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUDSP2PSessionStarted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUDSP2PSessionStarted)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_remote = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid_remote();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_remote_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 appid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUDSP2PSessionStarted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUDSP2PSessionStarted)
  return false;
#undef DO_
}

void CMsgClientUDSP2PSessionStarted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUDSP2PSessionStarted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_remote = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_remote(), output);
  }

  // optional int32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUDSP2PSessionStarted)
}

::google::protobuf::uint8* CMsgClientUDSP2PSessionStarted::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUDSP2PSessionStarted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_remote = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_remote(), target);
  }

  // optional int32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUDSP2PSessionStarted)
  return target;
}

size_t CMsgClientUDSP2PSessionStarted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUDSP2PSessionStarted)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamid_remote = 1;
    if (has_steamid_remote()) {
      total_size += 1 + 8;
    }

    // optional int32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUDSP2PSessionStarted::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUDSP2PSessionStarted)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUDSP2PSessionStarted* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUDSP2PSessionStarted>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUDSP2PSessionStarted)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUDSP2PSessionStarted)
    MergeFrom(*source);
  }
}

void CMsgClientUDSP2PSessionStarted::MergeFrom(const CMsgClientUDSP2PSessionStarted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUDSP2PSessionStarted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_remote_ = from.steamid_remote_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUDSP2PSessionStarted::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUDSP2PSessionStarted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUDSP2PSessionStarted::CopyFrom(const CMsgClientUDSP2PSessionStarted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUDSP2PSessionStarted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUDSP2PSessionStarted::IsInitialized() const {
  return true;
}

void CMsgClientUDSP2PSessionStarted::Swap(CMsgClientUDSP2PSessionStarted* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUDSP2PSessionStarted::InternalSwap(CMsgClientUDSP2PSessionStarted* other) {
  std::swap(steamid_remote_, other->steamid_remote_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUDSP2PSessionStarted::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUDSP2PSessionStarted

// optional fixed64 steamid_remote = 1;
bool CMsgClientUDSP2PSessionStarted::has_steamid_remote() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUDSP2PSessionStarted::set_has_steamid_remote() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUDSP2PSessionStarted::clear_has_steamid_remote() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUDSP2PSessionStarted::clear_steamid_remote() {
  steamid_remote_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_remote();
}
::google::protobuf::uint64 CMsgClientUDSP2PSessionStarted::steamid_remote() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUDSP2PSessionStarted.steamid_remote)
  return steamid_remote_;
}
void CMsgClientUDSP2PSessionStarted::set_steamid_remote(::google::protobuf::uint64 value) {
  set_has_steamid_remote();
  steamid_remote_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUDSP2PSessionStarted.steamid_remote)
}

// optional int32 appid = 2;
bool CMsgClientUDSP2PSessionStarted::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientUDSP2PSessionStarted::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientUDSP2PSessionStarted::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientUDSP2PSessionStarted::clear_appid() {
  appid_ = 0;
  clear_has_appid();
}
::google::protobuf::int32 CMsgClientUDSP2PSessionStarted::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUDSP2PSessionStarted.appid)
  return appid_;
}
void CMsgClientUDSP2PSessionStarted::set_appid(::google::protobuf::int32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUDSP2PSessionStarted.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUDSP2PSessionEnded::kSteamidRemoteFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kAppidFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kSessionLengthSecFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kSessionErrorFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kNattypeFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kBytesRecvFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kBytesSentFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kBytesSentRelayFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kBytesRecvRelayFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kTimeToConnectMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUDSP2PSessionEnded::CMsgClientUDSP2PSessionEnded()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUDSP2PSessionEnded)
}
CMsgClientUDSP2PSessionEnded::CMsgClientUDSP2PSessionEnded(const CMsgClientUDSP2PSessionEnded& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_remote_, &from.steamid_remote_,
    reinterpret_cast<char*>(&time_to_connect_ms_) -
    reinterpret_cast<char*>(&steamid_remote_) + sizeof(time_to_connect_ms_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUDSP2PSessionEnded)
}

void CMsgClientUDSP2PSessionEnded::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_remote_, 0, reinterpret_cast<char*>(&time_to_connect_ms_) -
    reinterpret_cast<char*>(&steamid_remote_) + sizeof(time_to_connect_ms_));
}

CMsgClientUDSP2PSessionEnded::~CMsgClientUDSP2PSessionEnded() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUDSP2PSessionEnded)
  SharedDtor();
}

void CMsgClientUDSP2PSessionEnded::SharedDtor() {
}

void CMsgClientUDSP2PSessionEnded::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUDSP2PSessionEnded::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUDSP2PSessionEnded& CMsgClientUDSP2PSessionEnded::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUDSP2PSessionEnded* CMsgClientUDSP2PSessionEnded::New(::google::protobuf::Arena* arena) const {
  CMsgClientUDSP2PSessionEnded* n = new CMsgClientUDSP2PSessionEnded;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUDSP2PSessionEnded::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUDSP2PSessionEnded)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&steamid_remote_, 0, reinterpret_cast<char*>(&bytes_sent_relay_) -
      reinterpret_cast<char*>(&steamid_remote_) + sizeof(bytes_sent_relay_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&bytes_recv_relay_, 0, reinterpret_cast<char*>(&time_to_connect_ms_) -
      reinterpret_cast<char*>(&bytes_recv_relay_) + sizeof(time_to_connect_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUDSP2PSessionEnded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUDSP2PSessionEnded)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_remote = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid_remote();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_remote_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 appid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 session_length_sec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_session_length_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_length_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 session_error = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_session_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nattype = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_nattype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nattype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bytes_recv = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_bytes_recv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bytes_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bytes_sent = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_bytes_sent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bytes_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bytes_sent_relay = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_bytes_sent_relay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bytes_sent_relay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bytes_recv_relay = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_bytes_recv_relay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bytes_recv_relay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 time_to_connect_ms = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_time_to_connect_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_to_connect_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUDSP2PSessionEnded)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUDSP2PSessionEnded)
  return false;
#undef DO_
}

void CMsgClientUDSP2PSessionEnded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUDSP2PSessionEnded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_remote = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_remote(), output);
  }

  // optional int32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appid(), output);
  }

  // optional int32 session_length_sec = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->session_length_sec(), output);
  }

  // optional int32 session_error = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->session_error(), output);
  }

  // optional int32 nattype = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nattype(), output);
  }

  // optional int32 bytes_recv = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bytes_recv(), output);
  }

  // optional int32 bytes_sent = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bytes_sent(), output);
  }

  // optional int32 bytes_sent_relay = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bytes_sent_relay(), output);
  }

  // optional int32 bytes_recv_relay = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bytes_recv_relay(), output);
  }

  // optional int32 time_to_connect_ms = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->time_to_connect_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUDSP2PSessionEnded)
}

::google::protobuf::uint8* CMsgClientUDSP2PSessionEnded::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUDSP2PSessionEnded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_remote = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_remote(), target);
  }

  // optional int32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appid(), target);
  }

  // optional int32 session_length_sec = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->session_length_sec(), target);
  }

  // optional int32 session_error = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->session_error(), target);
  }

  // optional int32 nattype = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nattype(), target);
  }

  // optional int32 bytes_recv = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bytes_recv(), target);
  }

  // optional int32 bytes_sent = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bytes_sent(), target);
  }

  // optional int32 bytes_sent_relay = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bytes_sent_relay(), target);
  }

  // optional int32 bytes_recv_relay = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bytes_recv_relay(), target);
  }

  // optional int32 time_to_connect_ms = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->time_to_connect_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUDSP2PSessionEnded)
  return target;
}

size_t CMsgClientUDSP2PSessionEnded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUDSP2PSessionEnded)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional fixed64 steamid_remote = 1;
    if (has_steamid_remote()) {
      total_size += 1 + 8;
    }

    // optional int32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional int32 session_length_sec = 3;
    if (has_session_length_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_length_sec());
    }

    // optional int32 session_error = 4;
    if (has_session_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_error());
    }

    // optional int32 nattype = 5;
    if (has_nattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nattype());
    }

    // optional int32 bytes_recv = 6;
    if (has_bytes_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bytes_recv());
    }

    // optional int32 bytes_sent = 7;
    if (has_bytes_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bytes_sent());
    }

    // optional int32 bytes_sent_relay = 8;
    if (has_bytes_sent_relay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bytes_sent_relay());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 bytes_recv_relay = 9;
    if (has_bytes_recv_relay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bytes_recv_relay());
    }

    // optional int32 time_to_connect_ms = 10;
    if (has_time_to_connect_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_to_connect_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUDSP2PSessionEnded::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUDSP2PSessionEnded)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUDSP2PSessionEnded* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUDSP2PSessionEnded>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUDSP2PSessionEnded)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUDSP2PSessionEnded)
    MergeFrom(*source);
  }
}

void CMsgClientUDSP2PSessionEnded::MergeFrom(const CMsgClientUDSP2PSessionEnded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUDSP2PSessionEnded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_remote_ = from.steamid_remote_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      session_length_sec_ = from.session_length_sec_;
    }
    if (cached_has_bits & 0x00000008u) {
      session_error_ = from.session_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      nattype_ = from.nattype_;
    }
    if (cached_has_bits & 0x00000020u) {
      bytes_recv_ = from.bytes_recv_;
    }
    if (cached_has_bits & 0x00000040u) {
      bytes_sent_ = from.bytes_sent_;
    }
    if (cached_has_bits & 0x00000080u) {
      bytes_sent_relay_ = from.bytes_sent_relay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      bytes_recv_relay_ = from.bytes_recv_relay_;
    }
    if (cached_has_bits & 0x00000200u) {
      time_to_connect_ms_ = from.time_to_connect_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUDSP2PSessionEnded::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUDSP2PSessionEnded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUDSP2PSessionEnded::CopyFrom(const CMsgClientUDSP2PSessionEnded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUDSP2PSessionEnded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUDSP2PSessionEnded::IsInitialized() const {
  return true;
}

void CMsgClientUDSP2PSessionEnded::Swap(CMsgClientUDSP2PSessionEnded* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUDSP2PSessionEnded::InternalSwap(CMsgClientUDSP2PSessionEnded* other) {
  std::swap(steamid_remote_, other->steamid_remote_);
  std::swap(appid_, other->appid_);
  std::swap(session_length_sec_, other->session_length_sec_);
  std::swap(session_error_, other->session_error_);
  std::swap(nattype_, other->nattype_);
  std::swap(bytes_recv_, other->bytes_recv_);
  std::swap(bytes_sent_, other->bytes_sent_);
  std::swap(bytes_sent_relay_, other->bytes_sent_relay_);
  std::swap(bytes_recv_relay_, other->bytes_recv_relay_);
  std::swap(time_to_connect_ms_, other->time_to_connect_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUDSP2PSessionEnded::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUDSP2PSessionEnded

// optional fixed64 steamid_remote = 1;
bool CMsgClientUDSP2PSessionEnded::has_steamid_remote() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUDSP2PSessionEnded::set_has_steamid_remote() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUDSP2PSessionEnded::clear_has_steamid_remote() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUDSP2PSessionEnded::clear_steamid_remote() {
  steamid_remote_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_remote();
}
::google::protobuf::uint64 CMsgClientUDSP2PSessionEnded::steamid_remote() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUDSP2PSessionEnded.steamid_remote)
  return steamid_remote_;
}
void CMsgClientUDSP2PSessionEnded::set_steamid_remote(::google::protobuf::uint64 value) {
  set_has_steamid_remote();
  steamid_remote_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUDSP2PSessionEnded.steamid_remote)
}

// optional int32 appid = 2;
bool CMsgClientUDSP2PSessionEnded::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientUDSP2PSessionEnded::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientUDSP2PSessionEnded::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientUDSP2PSessionEnded::clear_appid() {
  appid_ = 0;
  clear_has_appid();
}
::google::protobuf::int32 CMsgClientUDSP2PSessionEnded::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUDSP2PSessionEnded.appid)
  return appid_;
}
void CMsgClientUDSP2PSessionEnded::set_appid(::google::protobuf::int32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUDSP2PSessionEnded.appid)
}

// optional int32 session_length_sec = 3;
bool CMsgClientUDSP2PSessionEnded::has_session_length_sec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientUDSP2PSessionEnded::set_has_session_length_sec() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientUDSP2PSessionEnded::clear_has_session_length_sec() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientUDSP2PSessionEnded::clear_session_length_sec() {
  session_length_sec_ = 0;
  clear_has_session_length_sec();
}
::google::protobuf::int32 CMsgClientUDSP2PSessionEnded::session_length_sec() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUDSP2PSessionEnded.session_length_sec)
  return session_length_sec_;
}
void CMsgClientUDSP2PSessionEnded::set_session_length_sec(::google::protobuf::int32 value) {
  set_has_session_length_sec();
  session_length_sec_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUDSP2PSessionEnded.session_length_sec)
}

// optional int32 session_error = 4;
bool CMsgClientUDSP2PSessionEnded::has_session_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientUDSP2PSessionEnded::set_has_session_error() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientUDSP2PSessionEnded::clear_has_session_error() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientUDSP2PSessionEnded::clear_session_error() {
  session_error_ = 0;
  clear_has_session_error();
}
::google::protobuf::int32 CMsgClientUDSP2PSessionEnded::session_error() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUDSP2PSessionEnded.session_error)
  return session_error_;
}
void CMsgClientUDSP2PSessionEnded::set_session_error(::google::protobuf::int32 value) {
  set_has_session_error();
  session_error_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUDSP2PSessionEnded.session_error)
}

// optional int32 nattype = 5;
bool CMsgClientUDSP2PSessionEnded::has_nattype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientUDSP2PSessionEnded::set_has_nattype() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientUDSP2PSessionEnded::clear_has_nattype() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientUDSP2PSessionEnded::clear_nattype() {
  nattype_ = 0;
  clear_has_nattype();
}
::google::protobuf::int32 CMsgClientUDSP2PSessionEnded::nattype() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUDSP2PSessionEnded.nattype)
  return nattype_;
}
void CMsgClientUDSP2PSessionEnded::set_nattype(::google::protobuf::int32 value) {
  set_has_nattype();
  nattype_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUDSP2PSessionEnded.nattype)
}

// optional int32 bytes_recv = 6;
bool CMsgClientUDSP2PSessionEnded::has_bytes_recv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientUDSP2PSessionEnded::set_has_bytes_recv() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientUDSP2PSessionEnded::clear_has_bytes_recv() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientUDSP2PSessionEnded::clear_bytes_recv() {
  bytes_recv_ = 0;
  clear_has_bytes_recv();
}
::google::protobuf::int32 CMsgClientUDSP2PSessionEnded::bytes_recv() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUDSP2PSessionEnded.bytes_recv)
  return bytes_recv_;
}
void CMsgClientUDSP2PSessionEnded::set_bytes_recv(::google::protobuf::int32 value) {
  set_has_bytes_recv();
  bytes_recv_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUDSP2PSessionEnded.bytes_recv)
}

// optional int32 bytes_sent = 7;
bool CMsgClientUDSP2PSessionEnded::has_bytes_sent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientUDSP2PSessionEnded::set_has_bytes_sent() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientUDSP2PSessionEnded::clear_has_bytes_sent() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientUDSP2PSessionEnded::clear_bytes_sent() {
  bytes_sent_ = 0;
  clear_has_bytes_sent();
}
::google::protobuf::int32 CMsgClientUDSP2PSessionEnded::bytes_sent() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUDSP2PSessionEnded.bytes_sent)
  return bytes_sent_;
}
void CMsgClientUDSP2PSessionEnded::set_bytes_sent(::google::protobuf::int32 value) {
  set_has_bytes_sent();
  bytes_sent_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUDSP2PSessionEnded.bytes_sent)
}

// optional int32 bytes_sent_relay = 8;
bool CMsgClientUDSP2PSessionEnded::has_bytes_sent_relay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgClientUDSP2PSessionEnded::set_has_bytes_sent_relay() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgClientUDSP2PSessionEnded::clear_has_bytes_sent_relay() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgClientUDSP2PSessionEnded::clear_bytes_sent_relay() {
  bytes_sent_relay_ = 0;
  clear_has_bytes_sent_relay();
}
::google::protobuf::int32 CMsgClientUDSP2PSessionEnded::bytes_sent_relay() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUDSP2PSessionEnded.bytes_sent_relay)
  return bytes_sent_relay_;
}
void CMsgClientUDSP2PSessionEnded::set_bytes_sent_relay(::google::protobuf::int32 value) {
  set_has_bytes_sent_relay();
  bytes_sent_relay_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUDSP2PSessionEnded.bytes_sent_relay)
}

// optional int32 bytes_recv_relay = 9;
bool CMsgClientUDSP2PSessionEnded::has_bytes_recv_relay() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgClientUDSP2PSessionEnded::set_has_bytes_recv_relay() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgClientUDSP2PSessionEnded::clear_has_bytes_recv_relay() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgClientUDSP2PSessionEnded::clear_bytes_recv_relay() {
  bytes_recv_relay_ = 0;
  clear_has_bytes_recv_relay();
}
::google::protobuf::int32 CMsgClientUDSP2PSessionEnded::bytes_recv_relay() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUDSP2PSessionEnded.bytes_recv_relay)
  return bytes_recv_relay_;
}
void CMsgClientUDSP2PSessionEnded::set_bytes_recv_relay(::google::protobuf::int32 value) {
  set_has_bytes_recv_relay();
  bytes_recv_relay_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUDSP2PSessionEnded.bytes_recv_relay)
}

// optional int32 time_to_connect_ms = 10;
bool CMsgClientUDSP2PSessionEnded::has_time_to_connect_ms() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgClientUDSP2PSessionEnded::set_has_time_to_connect_ms() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgClientUDSP2PSessionEnded::clear_has_time_to_connect_ms() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgClientUDSP2PSessionEnded::clear_time_to_connect_ms() {
  time_to_connect_ms_ = 0;
  clear_has_time_to_connect_ms();
}
::google::protobuf::int32 CMsgClientUDSP2PSessionEnded::time_to_connect_ms() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUDSP2PSessionEnded.time_to_connect_ms)
  return time_to_connect_ms_;
}
void CMsgClientUDSP2PSessionEnded::set_time_to_connect_ms(::google::protobuf::int32 value) {
  set_has_time_to_connect_ms();
  time_to_connect_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUDSP2PSessionEnded.time_to_connect_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRegisterAuthTicketWithCM::kProtocolVersionFieldNumber;
const int CMsgClientRegisterAuthTicketWithCM::kTicketFieldNumber;
const int CMsgClientRegisterAuthTicketWithCM::kClientInstanceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRegisterAuthTicketWithCM::CMsgClientRegisterAuthTicketWithCM()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRegisterAuthTicketWithCM)
}
CMsgClientRegisterAuthTicketWithCM::CMsgClientRegisterAuthTicketWithCM(const CMsgClientRegisterAuthTicketWithCM& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  ::memcpy(&client_instance_id_, &from.client_instance_id_,
    reinterpret_cast<char*>(&protocol_version_) -
    reinterpret_cast<char*>(&client_instance_id_) + sizeof(protocol_version_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRegisterAuthTicketWithCM)
}

void CMsgClientRegisterAuthTicketWithCM::SharedCtor() {
  _cached_size_ = 0;
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_instance_id_, 0, reinterpret_cast<char*>(&protocol_version_) -
    reinterpret_cast<char*>(&client_instance_id_) + sizeof(protocol_version_));
}

CMsgClientRegisterAuthTicketWithCM::~CMsgClientRegisterAuthTicketWithCM() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  SharedDtor();
}

void CMsgClientRegisterAuthTicketWithCM::SharedDtor() {
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientRegisterAuthTicketWithCM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRegisterAuthTicketWithCM::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientRegisterAuthTicketWithCM& CMsgClientRegisterAuthTicketWithCM::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientRegisterAuthTicketWithCM* CMsgClientRegisterAuthTicketWithCM::New(::google::protobuf::Arena* arena) const {
  CMsgClientRegisterAuthTicketWithCM* n = new CMsgClientRegisterAuthTicketWithCM;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientRegisterAuthTicketWithCM::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  if (has_ticket()) {
    GOOGLE_DCHECK(!ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*ticket_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&client_instance_id_, 0, reinterpret_cast<char*>(&protocol_version_) -
      reinterpret_cast<char*>(&client_instance_id_) + sizeof(protocol_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientRegisterAuthTicketWithCM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 protocol_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ticket = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 client_instance_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_client_instance_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  return false;
#undef DO_
}

void CMsgClientRegisterAuthTicketWithCM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 protocol_version = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->protocol_version(), output);
  }

  // optional bytes ticket = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->ticket(), output);
  }

  // optional uint64 client_instance_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->client_instance_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRegisterAuthTicketWithCM)
}

::google::protobuf::uint8* CMsgClientRegisterAuthTicketWithCM::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 protocol_version = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->protocol_version(), target);
  }

  // optional bytes ticket = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ticket(), target);
  }

  // optional uint64 client_instance_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->client_instance_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  return target;
}

size_t CMsgClientRegisterAuthTicketWithCM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes ticket = 3;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ticket());
    }

    // optional uint64 client_instance_id = 4;
    if (has_client_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_instance_id());
    }

    // optional uint32 protocol_version = 1;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRegisterAuthTicketWithCM::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRegisterAuthTicketWithCM* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientRegisterAuthTicketWithCM>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRegisterAuthTicketWithCM)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRegisterAuthTicketWithCM)
    MergeFrom(*source);
  }
}

void CMsgClientRegisterAuthTicketWithCM::MergeFrom(const CMsgClientRegisterAuthTicketWithCM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ticket();
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      client_instance_id_ = from.client_instance_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      protocol_version_ = from.protocol_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientRegisterAuthTicketWithCM::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRegisterAuthTicketWithCM::CopyFrom(const CMsgClientRegisterAuthTicketWithCM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRegisterAuthTicketWithCM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRegisterAuthTicketWithCM::IsInitialized() const {
  return true;
}

void CMsgClientRegisterAuthTicketWithCM::Swap(CMsgClientRegisterAuthTicketWithCM* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRegisterAuthTicketWithCM::InternalSwap(CMsgClientRegisterAuthTicketWithCM* other) {
  ticket_.Swap(&other->ticket_);
  std::swap(client_instance_id_, other->client_instance_id_);
  std::swap(protocol_version_, other->protocol_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientRegisterAuthTicketWithCM::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientRegisterAuthTicketWithCM

// optional uint32 protocol_version = 1;
bool CMsgClientRegisterAuthTicketWithCM::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientRegisterAuthTicketWithCM::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientRegisterAuthTicketWithCM::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientRegisterAuthTicketWithCM::clear_protocol_version() {
  protocol_version_ = 0u;
  clear_has_protocol_version();
}
::google::protobuf::uint32 CMsgClientRegisterAuthTicketWithCM::protocol_version() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRegisterAuthTicketWithCM.protocol_version)
  return protocol_version_;
}
void CMsgClientRegisterAuthTicketWithCM::set_protocol_version(::google::protobuf::uint32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientRegisterAuthTicketWithCM.protocol_version)
}

// optional bytes ticket = 3;
bool CMsgClientRegisterAuthTicketWithCM::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientRegisterAuthTicketWithCM::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientRegisterAuthTicketWithCM::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientRegisterAuthTicketWithCM::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
const ::std::string& CMsgClientRegisterAuthTicketWithCM::ticket() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRegisterAuthTicketWithCM.ticket)
  return ticket_.GetNoArena();
}
void CMsgClientRegisterAuthTicketWithCM::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientRegisterAuthTicketWithCM.ticket)
}
#if LANG_CXX11
void CMsgClientRegisterAuthTicketWithCM::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientRegisterAuthTicketWithCM.ticket)
}
#endif
void CMsgClientRegisterAuthTicketWithCM::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientRegisterAuthTicketWithCM.ticket)
}
void CMsgClientRegisterAuthTicketWithCM::set_ticket(const void* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientRegisterAuthTicketWithCM.ticket)
}
::std::string* CMsgClientRegisterAuthTicketWithCM::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientRegisterAuthTicketWithCM.ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientRegisterAuthTicketWithCM::release_ticket() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientRegisterAuthTicketWithCM.ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientRegisterAuthTicketWithCM::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientRegisterAuthTicketWithCM.ticket)
}

// optional uint64 client_instance_id = 4;
bool CMsgClientRegisterAuthTicketWithCM::has_client_instance_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientRegisterAuthTicketWithCM::set_has_client_instance_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientRegisterAuthTicketWithCM::clear_has_client_instance_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientRegisterAuthTicketWithCM::clear_client_instance_id() {
  client_instance_id_ = GOOGLE_ULONGLONG(0);
  clear_has_client_instance_id();
}
::google::protobuf::uint64 CMsgClientRegisterAuthTicketWithCM::client_instance_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRegisterAuthTicketWithCM.client_instance_id)
  return client_instance_id_;
}
void CMsgClientRegisterAuthTicketWithCM::set_client_instance_id(::google::protobuf::uint64 value) {
  set_has_client_instance_id();
  client_instance_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientRegisterAuthTicketWithCM.client_instance_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientTicketAuthComplete::kSteamIdFieldNumber;
const int CMsgClientTicketAuthComplete::kGameIdFieldNumber;
const int CMsgClientTicketAuthComplete::kEstateFieldNumber;
const int CMsgClientTicketAuthComplete::kEauthSessionResponseFieldNumber;
const int CMsgClientTicketAuthComplete::kDEPRECATEDTicketFieldNumber;
const int CMsgClientTicketAuthComplete::kTicketCrcFieldNumber;
const int CMsgClientTicketAuthComplete::kTicketSequenceFieldNumber;
const int CMsgClientTicketAuthComplete::kOwnerSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientTicketAuthComplete::CMsgClientTicketAuthComplete()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientTicketAuthComplete)
}
CMsgClientTicketAuthComplete::CMsgClientTicketAuthComplete(const CMsgClientTicketAuthComplete& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deprecated_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_deprecated_ticket()) {
    deprecated_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_ticket_);
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&owner_steam_id_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(owner_steam_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientTicketAuthComplete)
}

void CMsgClientTicketAuthComplete::SharedCtor() {
  _cached_size_ = 0;
  deprecated_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_, 0, reinterpret_cast<char*>(&owner_steam_id_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(owner_steam_id_));
}

CMsgClientTicketAuthComplete::~CMsgClientTicketAuthComplete() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientTicketAuthComplete)
  SharedDtor();
}

void CMsgClientTicketAuthComplete::SharedDtor() {
  deprecated_ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientTicketAuthComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientTicketAuthComplete::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientTicketAuthComplete& CMsgClientTicketAuthComplete::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientTicketAuthComplete* CMsgClientTicketAuthComplete::New(::google::protobuf::Arena* arena) const {
  CMsgClientTicketAuthComplete* n = new CMsgClientTicketAuthComplete;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientTicketAuthComplete::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientTicketAuthComplete)
  if (has_deprecated_ticket()) {
    GOOGLE_DCHECK(!deprecated_ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*deprecated_ticket_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&owner_steam_id_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(owner_steam_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientTicketAuthComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientTicketAuthComplete)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 game_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 estate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_estate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &estate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 eauth_session_response = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_eauth_session_response();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eauth_session_response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes DEPRECATED_ticket = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deprecated_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ticket_crc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_ticket_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ticket_sequence = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_ticket_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 owner_steam_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_owner_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientTicketAuthComplete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientTicketAuthComplete)
  return false;
#undef DO_
}

void CMsgClientTicketAuthComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientTicketAuthComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->game_id(), output);
  }

  // optional uint32 estate = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->estate(), output);
  }

  // optional uint32 eauth_session_response = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->eauth_session_response(), output);
  }

  // optional bytes DEPRECATED_ticket = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->deprecated_ticket(), output);
  }

  // optional uint32 ticket_crc = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ticket_crc(), output);
  }

  // optional uint32 ticket_sequence = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ticket_sequence(), output);
  }

  // optional fixed64 owner_steam_id = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->owner_steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientTicketAuthComplete)
}

::google::protobuf::uint8* CMsgClientTicketAuthComplete::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientTicketAuthComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->game_id(), target);
  }

  // optional uint32 estate = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->estate(), target);
  }

  // optional uint32 eauth_session_response = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->eauth_session_response(), target);
  }

  // optional bytes DEPRECATED_ticket = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->deprecated_ticket(), target);
  }

  // optional uint32 ticket_crc = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ticket_crc(), target);
  }

  // optional uint32 ticket_sequence = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ticket_sequence(), target);
  }

  // optional fixed64 owner_steam_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->owner_steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientTicketAuthComplete)
  return target;
}

size_t CMsgClientTicketAuthComplete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientTicketAuthComplete)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes DEPRECATED_ticket = 5;
    if (has_deprecated_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->deprecated_ticket());
    }

    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 game_id = 2;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 estate = 3;
    if (has_estate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->estate());
    }

    // optional uint32 eauth_session_response = 4;
    if (has_eauth_session_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eauth_session_response());
    }

    // optional uint32 ticket_crc = 6;
    if (has_ticket_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticket_crc());
    }

    // optional uint32 ticket_sequence = 7;
    if (has_ticket_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticket_sequence());
    }

    // optional fixed64 owner_steam_id = 8;
    if (has_owner_steam_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientTicketAuthComplete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientTicketAuthComplete)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientTicketAuthComplete* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientTicketAuthComplete>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientTicketAuthComplete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientTicketAuthComplete)
    MergeFrom(*source);
  }
}

void CMsgClientTicketAuthComplete::MergeFrom(const CMsgClientTicketAuthComplete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientTicketAuthComplete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_deprecated_ticket();
      deprecated_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      estate_ = from.estate_;
    }
    if (cached_has_bits & 0x00000010u) {
      eauth_session_response_ = from.eauth_session_response_;
    }
    if (cached_has_bits & 0x00000020u) {
      ticket_crc_ = from.ticket_crc_;
    }
    if (cached_has_bits & 0x00000040u) {
      ticket_sequence_ = from.ticket_sequence_;
    }
    if (cached_has_bits & 0x00000080u) {
      owner_steam_id_ = from.owner_steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientTicketAuthComplete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientTicketAuthComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientTicketAuthComplete::CopyFrom(const CMsgClientTicketAuthComplete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientTicketAuthComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientTicketAuthComplete::IsInitialized() const {
  return true;
}

void CMsgClientTicketAuthComplete::Swap(CMsgClientTicketAuthComplete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientTicketAuthComplete::InternalSwap(CMsgClientTicketAuthComplete* other) {
  deprecated_ticket_.Swap(&other->deprecated_ticket_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(game_id_, other->game_id_);
  std::swap(estate_, other->estate_);
  std::swap(eauth_session_response_, other->eauth_session_response_);
  std::swap(ticket_crc_, other->ticket_crc_);
  std::swap(ticket_sequence_, other->ticket_sequence_);
  std::swap(owner_steam_id_, other->owner_steam_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientTicketAuthComplete::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientTicketAuthComplete

// optional fixed64 steam_id = 1;
bool CMsgClientTicketAuthComplete::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientTicketAuthComplete::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientTicketAuthComplete::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientTicketAuthComplete::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgClientTicketAuthComplete::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientTicketAuthComplete.steam_id)
  return steam_id_;
}
void CMsgClientTicketAuthComplete::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientTicketAuthComplete.steam_id)
}

// optional fixed64 game_id = 2;
bool CMsgClientTicketAuthComplete::has_game_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientTicketAuthComplete::set_has_game_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientTicketAuthComplete::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientTicketAuthComplete::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_id();
}
::google::protobuf::uint64 CMsgClientTicketAuthComplete::game_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientTicketAuthComplete.game_id)
  return game_id_;
}
void CMsgClientTicketAuthComplete::set_game_id(::google::protobuf::uint64 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientTicketAuthComplete.game_id)
}

// optional uint32 estate = 3;
bool CMsgClientTicketAuthComplete::has_estate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientTicketAuthComplete::set_has_estate() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientTicketAuthComplete::clear_has_estate() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientTicketAuthComplete::clear_estate() {
  estate_ = 0u;
  clear_has_estate();
}
::google::protobuf::uint32 CMsgClientTicketAuthComplete::estate() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientTicketAuthComplete.estate)
  return estate_;
}
void CMsgClientTicketAuthComplete::set_estate(::google::protobuf::uint32 value) {
  set_has_estate();
  estate_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientTicketAuthComplete.estate)
}

// optional uint32 eauth_session_response = 4;
bool CMsgClientTicketAuthComplete::has_eauth_session_response() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientTicketAuthComplete::set_has_eauth_session_response() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientTicketAuthComplete::clear_has_eauth_session_response() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientTicketAuthComplete::clear_eauth_session_response() {
  eauth_session_response_ = 0u;
  clear_has_eauth_session_response();
}
::google::protobuf::uint32 CMsgClientTicketAuthComplete::eauth_session_response() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientTicketAuthComplete.eauth_session_response)
  return eauth_session_response_;
}
void CMsgClientTicketAuthComplete::set_eauth_session_response(::google::protobuf::uint32 value) {
  set_has_eauth_session_response();
  eauth_session_response_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientTicketAuthComplete.eauth_session_response)
}

// optional bytes DEPRECATED_ticket = 5;
bool CMsgClientTicketAuthComplete::has_deprecated_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientTicketAuthComplete::set_has_deprecated_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientTicketAuthComplete::clear_has_deprecated_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientTicketAuthComplete::clear_deprecated_ticket() {
  deprecated_ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deprecated_ticket();
}
const ::std::string& CMsgClientTicketAuthComplete::deprecated_ticket() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientTicketAuthComplete.DEPRECATED_ticket)
  return deprecated_ticket_.GetNoArena();
}
void CMsgClientTicketAuthComplete::set_deprecated_ticket(const ::std::string& value) {
  set_has_deprecated_ticket();
  deprecated_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientTicketAuthComplete.DEPRECATED_ticket)
}
#if LANG_CXX11
void CMsgClientTicketAuthComplete::set_deprecated_ticket(::std::string&& value) {
  set_has_deprecated_ticket();
  deprecated_ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientTicketAuthComplete.DEPRECATED_ticket)
}
#endif
void CMsgClientTicketAuthComplete::set_deprecated_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_deprecated_ticket();
  deprecated_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientTicketAuthComplete.DEPRECATED_ticket)
}
void CMsgClientTicketAuthComplete::set_deprecated_ticket(const void* value, size_t size) {
  set_has_deprecated_ticket();
  deprecated_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientTicketAuthComplete.DEPRECATED_ticket)
}
::std::string* CMsgClientTicketAuthComplete::mutable_deprecated_ticket() {
  set_has_deprecated_ticket();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientTicketAuthComplete.DEPRECATED_ticket)
  return deprecated_ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientTicketAuthComplete::release_deprecated_ticket() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientTicketAuthComplete.DEPRECATED_ticket)
  clear_has_deprecated_ticket();
  return deprecated_ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientTicketAuthComplete::set_allocated_deprecated_ticket(::std::string* deprecated_ticket) {
  if (deprecated_ticket != NULL) {
    set_has_deprecated_ticket();
  } else {
    clear_has_deprecated_ticket();
  }
  deprecated_ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deprecated_ticket);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientTicketAuthComplete.DEPRECATED_ticket)
}

// optional uint32 ticket_crc = 6;
bool CMsgClientTicketAuthComplete::has_ticket_crc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientTicketAuthComplete::set_has_ticket_crc() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientTicketAuthComplete::clear_has_ticket_crc() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientTicketAuthComplete::clear_ticket_crc() {
  ticket_crc_ = 0u;
  clear_has_ticket_crc();
}
::google::protobuf::uint32 CMsgClientTicketAuthComplete::ticket_crc() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientTicketAuthComplete.ticket_crc)
  return ticket_crc_;
}
void CMsgClientTicketAuthComplete::set_ticket_crc(::google::protobuf::uint32 value) {
  set_has_ticket_crc();
  ticket_crc_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientTicketAuthComplete.ticket_crc)
}

// optional uint32 ticket_sequence = 7;
bool CMsgClientTicketAuthComplete::has_ticket_sequence() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientTicketAuthComplete::set_has_ticket_sequence() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientTicketAuthComplete::clear_has_ticket_sequence() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientTicketAuthComplete::clear_ticket_sequence() {
  ticket_sequence_ = 0u;
  clear_has_ticket_sequence();
}
::google::protobuf::uint32 CMsgClientTicketAuthComplete::ticket_sequence() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientTicketAuthComplete.ticket_sequence)
  return ticket_sequence_;
}
void CMsgClientTicketAuthComplete::set_ticket_sequence(::google::protobuf::uint32 value) {
  set_has_ticket_sequence();
  ticket_sequence_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientTicketAuthComplete.ticket_sequence)
}

// optional fixed64 owner_steam_id = 8;
bool CMsgClientTicketAuthComplete::has_owner_steam_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgClientTicketAuthComplete::set_has_owner_steam_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgClientTicketAuthComplete::clear_has_owner_steam_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgClientTicketAuthComplete::clear_owner_steam_id() {
  owner_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_owner_steam_id();
}
::google::protobuf::uint64 CMsgClientTicketAuthComplete::owner_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientTicketAuthComplete.owner_steam_id)
  return owner_steam_id_;
}
void CMsgClientTicketAuthComplete::set_owner_steam_id(::google::protobuf::uint64 value) {
  set_has_owner_steam_id();
  owner_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientTicketAuthComplete.owner_steam_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientCMList::kCmAddressesFieldNumber;
const int CMsgClientCMList::kCmPortsFieldNumber;
const int CMsgClientCMList::kCmWebsocketAddressesFieldNumber;
const int CMsgClientCMList::kPercentDefaultToWebsocketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientCMList::CMsgClientCMList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientCMList)
}
CMsgClientCMList::CMsgClientCMList(const CMsgClientCMList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cm_addresses_(from.cm_addresses_),
      cm_ports_(from.cm_ports_),
      cm_websocket_addresses_(from.cm_websocket_addresses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  percent_default_to_websocket_ = from.percent_default_to_websocket_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientCMList)
}

void CMsgClientCMList::SharedCtor() {
  _cached_size_ = 0;
  percent_default_to_websocket_ = 0u;
}

CMsgClientCMList::~CMsgClientCMList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientCMList)
  SharedDtor();
}

void CMsgClientCMList::SharedDtor() {
}

void CMsgClientCMList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientCMList::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientCMList& CMsgClientCMList::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientCMList* CMsgClientCMList::New(::google::protobuf::Arena* arena) const {
  CMsgClientCMList* n = new CMsgClientCMList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientCMList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientCMList)
  cm_addresses_.Clear();
  cm_ports_.Clear();
  cm_websocket_addresses_.Clear();
  percent_default_to_websocket_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientCMList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientCMList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 cm_addresses = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_cm_addresses())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cm_addresses())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 cm_ports = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_cm_ports())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cm_ports())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string cm_websocket_addresses = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cm_websocket_addresses()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cm_websocket_addresses(this->cm_websocket_addresses_size() - 1).data(),
            this->cm_websocket_addresses(this->cm_websocket_addresses_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientCMList.cm_websocket_addresses");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 percent_default_to_websocket = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_percent_default_to_websocket();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &percent_default_to_websocket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientCMList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientCMList)
  return false;
#undef DO_
}

void CMsgClientCMList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientCMList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 cm_addresses = 1;
  for (int i = 0, n = this->cm_addresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->cm_addresses(i), output);
  }

  // repeated uint32 cm_ports = 2;
  for (int i = 0, n = this->cm_ports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->cm_ports(i), output);
  }

  // repeated string cm_websocket_addresses = 3;
  for (int i = 0, n = this->cm_websocket_addresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cm_websocket_addresses(i).data(), this->cm_websocket_addresses(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientCMList.cm_websocket_addresses");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cm_websocket_addresses(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 percent_default_to_websocket = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->percent_default_to_websocket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientCMList)
}

::google::protobuf::uint8* CMsgClientCMList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientCMList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 cm_addresses = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->cm_addresses_, target);

  // repeated uint32 cm_ports = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->cm_ports_, target);

  // repeated string cm_websocket_addresses = 3;
  for (int i = 0, n = this->cm_websocket_addresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cm_websocket_addresses(i).data(), this->cm_websocket_addresses(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientCMList.cm_websocket_addresses");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->cm_websocket_addresses(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 percent_default_to_websocket = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->percent_default_to_websocket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientCMList)
  return target;
}

size_t CMsgClientCMList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientCMList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 cm_addresses = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->cm_addresses_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cm_addresses_size());
    total_size += data_size;
  }

  // repeated uint32 cm_ports = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->cm_ports_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cm_ports_size());
    total_size += data_size;
  }

  // repeated string cm_websocket_addresses = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->cm_websocket_addresses_size());
  for (int i = 0, n = this->cm_websocket_addresses_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cm_websocket_addresses(i));
  }

  // optional uint32 percent_default_to_websocket = 4;
  if (has_percent_default_to_websocket()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->percent_default_to_websocket());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientCMList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientCMList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientCMList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientCMList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientCMList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientCMList)
    MergeFrom(*source);
  }
}

void CMsgClientCMList::MergeFrom(const CMsgClientCMList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientCMList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cm_addresses_.MergeFrom(from.cm_addresses_);
  cm_ports_.MergeFrom(from.cm_ports_);
  cm_websocket_addresses_.MergeFrom(from.cm_websocket_addresses_);
  if (from.has_percent_default_to_websocket()) {
    set_percent_default_to_websocket(from.percent_default_to_websocket());
  }
}

void CMsgClientCMList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientCMList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientCMList::CopyFrom(const CMsgClientCMList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientCMList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCMList::IsInitialized() const {
  return true;
}

void CMsgClientCMList::Swap(CMsgClientCMList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientCMList::InternalSwap(CMsgClientCMList* other) {
  cm_addresses_.InternalSwap(&other->cm_addresses_);
  cm_ports_.InternalSwap(&other->cm_ports_);
  cm_websocket_addresses_.InternalSwap(&other->cm_websocket_addresses_);
  std::swap(percent_default_to_websocket_, other->percent_default_to_websocket_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientCMList::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientCMList

// repeated uint32 cm_addresses = 1;
int CMsgClientCMList::cm_addresses_size() const {
  return cm_addresses_.size();
}
void CMsgClientCMList::clear_cm_addresses() {
  cm_addresses_.Clear();
}
::google::protobuf::uint32 CMsgClientCMList::cm_addresses(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientCMList.cm_addresses)
  return cm_addresses_.Get(index);
}
void CMsgClientCMList::set_cm_addresses(int index, ::google::protobuf::uint32 value) {
  cm_addresses_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientCMList.cm_addresses)
}
void CMsgClientCMList::add_cm_addresses(::google::protobuf::uint32 value) {
  cm_addresses_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientCMList.cm_addresses)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientCMList::cm_addresses() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientCMList.cm_addresses)
  return cm_addresses_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientCMList::mutable_cm_addresses() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientCMList.cm_addresses)
  return &cm_addresses_;
}

// repeated uint32 cm_ports = 2;
int CMsgClientCMList::cm_ports_size() const {
  return cm_ports_.size();
}
void CMsgClientCMList::clear_cm_ports() {
  cm_ports_.Clear();
}
::google::protobuf::uint32 CMsgClientCMList::cm_ports(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientCMList.cm_ports)
  return cm_ports_.Get(index);
}
void CMsgClientCMList::set_cm_ports(int index, ::google::protobuf::uint32 value) {
  cm_ports_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientCMList.cm_ports)
}
void CMsgClientCMList::add_cm_ports(::google::protobuf::uint32 value) {
  cm_ports_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientCMList.cm_ports)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientCMList::cm_ports() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientCMList.cm_ports)
  return cm_ports_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientCMList::mutable_cm_ports() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientCMList.cm_ports)
  return &cm_ports_;
}

// repeated string cm_websocket_addresses = 3;
int CMsgClientCMList::cm_websocket_addresses_size() const {
  return cm_websocket_addresses_.size();
}
void CMsgClientCMList::clear_cm_websocket_addresses() {
  cm_websocket_addresses_.Clear();
}
const ::std::string& CMsgClientCMList::cm_websocket_addresses(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientCMList.cm_websocket_addresses)
  return cm_websocket_addresses_.Get(index);
}
::std::string* CMsgClientCMList::mutable_cm_websocket_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientCMList.cm_websocket_addresses)
  return cm_websocket_addresses_.Mutable(index);
}
void CMsgClientCMList::set_cm_websocket_addresses(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientCMList.cm_websocket_addresses)
  cm_websocket_addresses_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CMsgClientCMList::set_cm_websocket_addresses(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientCMList.cm_websocket_addresses)
  cm_websocket_addresses_.Mutable(index)->assign(std::move(value));
}
#endif
void CMsgClientCMList::set_cm_websocket_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cm_websocket_addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientCMList.cm_websocket_addresses)
}
void CMsgClientCMList::set_cm_websocket_addresses(int index, const char* value, size_t size) {
  cm_websocket_addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientCMList.cm_websocket_addresses)
}
::std::string* CMsgClientCMList::add_cm_websocket_addresses() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CMsgClientCMList.cm_websocket_addresses)
  return cm_websocket_addresses_.Add();
}
void CMsgClientCMList::add_cm_websocket_addresses(const ::std::string& value) {
  cm_websocket_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientCMList.cm_websocket_addresses)
}
#if LANG_CXX11
void CMsgClientCMList::add_cm_websocket_addresses(::std::string&& value) {
  cm_websocket_addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientCMList.cm_websocket_addresses)
}
#endif
void CMsgClientCMList::add_cm_websocket_addresses(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cm_websocket_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CMsgClientCMList.cm_websocket_addresses)
}
void CMsgClientCMList::add_cm_websocket_addresses(const char* value, size_t size) {
  cm_websocket_addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CMsgClientCMList.cm_websocket_addresses)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgClientCMList::cm_websocket_addresses() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientCMList.cm_websocket_addresses)
  return cm_websocket_addresses_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgClientCMList::mutable_cm_websocket_addresses() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientCMList.cm_websocket_addresses)
  return &cm_websocket_addresses_;
}

// optional uint32 percent_default_to_websocket = 4;
bool CMsgClientCMList::has_percent_default_to_websocket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientCMList::set_has_percent_default_to_websocket() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientCMList::clear_has_percent_default_to_websocket() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientCMList::clear_percent_default_to_websocket() {
  percent_default_to_websocket_ = 0u;
  clear_has_percent_default_to_websocket();
}
::google::protobuf::uint32 CMsgClientCMList::percent_default_to_websocket() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientCMList.percent_default_to_websocket)
  return percent_default_to_websocket_;
}
void CMsgClientCMList::set_percent_default_to_websocket(::google::protobuf::uint32 value) {
  set_has_percent_default_to_websocket();
  percent_default_to_websocket_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientCMList.percent_default_to_websocket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientP2PConnectionInfo::kSteamIdDestFieldNumber;
const int CMsgClientP2PConnectionInfo::kSteamIdSrcFieldNumber;
const int CMsgClientP2PConnectionInfo::kAppIdFieldNumber;
const int CMsgClientP2PConnectionInfo::kCandidateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientP2PConnectionInfo::CMsgClientP2PConnectionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientP2PConnectionInfo)
}
CMsgClientP2PConnectionInfo::CMsgClientP2PConnectionInfo(const CMsgClientP2PConnectionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  candidate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_candidate()) {
    candidate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.candidate_);
  }
  ::memcpy(&steam_id_dest_, &from.steam_id_dest_,
    reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_dest_) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientP2PConnectionInfo)
}

void CMsgClientP2PConnectionInfo::SharedCtor() {
  _cached_size_ = 0;
  candidate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_dest_, 0, reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_dest_) + sizeof(app_id_));
}

CMsgClientP2PConnectionInfo::~CMsgClientP2PConnectionInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientP2PConnectionInfo)
  SharedDtor();
}

void CMsgClientP2PConnectionInfo::SharedDtor() {
  candidate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientP2PConnectionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientP2PConnectionInfo::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientP2PConnectionInfo& CMsgClientP2PConnectionInfo::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientP2PConnectionInfo* CMsgClientP2PConnectionInfo::New(::google::protobuf::Arena* arena) const {
  CMsgClientP2PConnectionInfo* n = new CMsgClientP2PConnectionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientP2PConnectionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientP2PConnectionInfo)
  if (has_candidate()) {
    GOOGLE_DCHECK(!candidate_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*candidate_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&steam_id_dest_, 0, reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_dest_) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientP2PConnectionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientP2PConnectionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_dest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id_dest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_dest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_src = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_src();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_src_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes candidate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_candidate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientP2PConnectionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientP2PConnectionInfo)
  return false;
#undef DO_
}

void CMsgClientP2PConnectionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientP2PConnectionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_dest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_dest(), output);
  }

  // optional fixed64 steam_id_src = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_src(), output);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->app_id(), output);
  }

  // optional bytes candidate = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->candidate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientP2PConnectionInfo)
}

::google::protobuf::uint8* CMsgClientP2PConnectionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientP2PConnectionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_dest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id_dest(), target);
  }

  // optional fixed64 steam_id_src = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_src(), target);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->app_id(), target);
  }

  // optional bytes candidate = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->candidate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientP2PConnectionInfo)
  return target;
}

size_t CMsgClientP2PConnectionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientP2PConnectionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes candidate = 4;
    if (has_candidate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->candidate());
    }

    // optional fixed64 steam_id_dest = 1;
    if (has_steam_id_dest()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_src = 2;
    if (has_steam_id_src()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 3;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientP2PConnectionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientP2PConnectionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientP2PConnectionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientP2PConnectionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientP2PConnectionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientP2PConnectionInfo)
    MergeFrom(*source);
  }
}

void CMsgClientP2PConnectionInfo::MergeFrom(const CMsgClientP2PConnectionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientP2PConnectionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_candidate();
      candidate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.candidate_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_dest_ = from.steam_id_dest_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_src_ = from.steam_id_src_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientP2PConnectionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientP2PConnectionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientP2PConnectionInfo::CopyFrom(const CMsgClientP2PConnectionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientP2PConnectionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientP2PConnectionInfo::IsInitialized() const {
  return true;
}

void CMsgClientP2PConnectionInfo::Swap(CMsgClientP2PConnectionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientP2PConnectionInfo::InternalSwap(CMsgClientP2PConnectionInfo* other) {
  candidate_.Swap(&other->candidate_);
  std::swap(steam_id_dest_, other->steam_id_dest_);
  std::swap(steam_id_src_, other->steam_id_src_);
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientP2PConnectionInfo::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientP2PConnectionInfo

// optional fixed64 steam_id_dest = 1;
bool CMsgClientP2PConnectionInfo::has_steam_id_dest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientP2PConnectionInfo::set_has_steam_id_dest() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientP2PConnectionInfo::clear_has_steam_id_dest() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientP2PConnectionInfo::clear_steam_id_dest() {
  steam_id_dest_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_dest();
}
::google::protobuf::uint64 CMsgClientP2PConnectionInfo::steam_id_dest() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientP2PConnectionInfo.steam_id_dest)
  return steam_id_dest_;
}
void CMsgClientP2PConnectionInfo::set_steam_id_dest(::google::protobuf::uint64 value) {
  set_has_steam_id_dest();
  steam_id_dest_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientP2PConnectionInfo.steam_id_dest)
}

// optional fixed64 steam_id_src = 2;
bool CMsgClientP2PConnectionInfo::has_steam_id_src() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientP2PConnectionInfo::set_has_steam_id_src() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientP2PConnectionInfo::clear_has_steam_id_src() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientP2PConnectionInfo::clear_steam_id_src() {
  steam_id_src_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_src();
}
::google::protobuf::uint64 CMsgClientP2PConnectionInfo::steam_id_src() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientP2PConnectionInfo.steam_id_src)
  return steam_id_src_;
}
void CMsgClientP2PConnectionInfo::set_steam_id_src(::google::protobuf::uint64 value) {
  set_has_steam_id_src();
  steam_id_src_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientP2PConnectionInfo.steam_id_src)
}

// optional uint32 app_id = 3;
bool CMsgClientP2PConnectionInfo::has_app_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientP2PConnectionInfo::set_has_app_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientP2PConnectionInfo::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientP2PConnectionInfo::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientP2PConnectionInfo::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientP2PConnectionInfo.app_id)
  return app_id_;
}
void CMsgClientP2PConnectionInfo::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientP2PConnectionInfo.app_id)
}

// optional bytes candidate = 4;
bool CMsgClientP2PConnectionInfo::has_candidate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientP2PConnectionInfo::set_has_candidate() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientP2PConnectionInfo::clear_has_candidate() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientP2PConnectionInfo::clear_candidate() {
  candidate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_candidate();
}
const ::std::string& CMsgClientP2PConnectionInfo::candidate() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientP2PConnectionInfo.candidate)
  return candidate_.GetNoArena();
}
void CMsgClientP2PConnectionInfo::set_candidate(const ::std::string& value) {
  set_has_candidate();
  candidate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientP2PConnectionInfo.candidate)
}
#if LANG_CXX11
void CMsgClientP2PConnectionInfo::set_candidate(::std::string&& value) {
  set_has_candidate();
  candidate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientP2PConnectionInfo.candidate)
}
#endif
void CMsgClientP2PConnectionInfo::set_candidate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_candidate();
  candidate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientP2PConnectionInfo.candidate)
}
void CMsgClientP2PConnectionInfo::set_candidate(const void* value, size_t size) {
  set_has_candidate();
  candidate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientP2PConnectionInfo.candidate)
}
::std::string* CMsgClientP2PConnectionInfo::mutable_candidate() {
  set_has_candidate();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientP2PConnectionInfo.candidate)
  return candidate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientP2PConnectionInfo::release_candidate() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientP2PConnectionInfo.candidate)
  clear_has_candidate();
  return candidate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientP2PConnectionInfo::set_allocated_candidate(::std::string* candidate) {
  if (candidate != NULL) {
    set_has_candidate();
  } else {
    clear_has_candidate();
  }
  candidate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), candidate);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientP2PConnectionInfo.candidate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientP2PConnectionFailInfo::kSteamIdDestFieldNumber;
const int CMsgClientP2PConnectionFailInfo::kSteamIdSrcFieldNumber;
const int CMsgClientP2PConnectionFailInfo::kAppIdFieldNumber;
const int CMsgClientP2PConnectionFailInfo::kEp2PSessionErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientP2PConnectionFailInfo::CMsgClientP2PConnectionFailInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientP2PConnectionFailInfo)
}
CMsgClientP2PConnectionFailInfo::CMsgClientP2PConnectionFailInfo(const CMsgClientP2PConnectionFailInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_dest_, &from.steam_id_dest_,
    reinterpret_cast<char*>(&ep2p_session_error_) -
    reinterpret_cast<char*>(&steam_id_dest_) + sizeof(ep2p_session_error_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientP2PConnectionFailInfo)
}

void CMsgClientP2PConnectionFailInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_dest_, 0, reinterpret_cast<char*>(&ep2p_session_error_) -
    reinterpret_cast<char*>(&steam_id_dest_) + sizeof(ep2p_session_error_));
}

CMsgClientP2PConnectionFailInfo::~CMsgClientP2PConnectionFailInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientP2PConnectionFailInfo)
  SharedDtor();
}

void CMsgClientP2PConnectionFailInfo::SharedDtor() {
}

void CMsgClientP2PConnectionFailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientP2PConnectionFailInfo::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientP2PConnectionFailInfo& CMsgClientP2PConnectionFailInfo::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientP2PConnectionFailInfo* CMsgClientP2PConnectionFailInfo::New(::google::protobuf::Arena* arena) const {
  CMsgClientP2PConnectionFailInfo* n = new CMsgClientP2PConnectionFailInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientP2PConnectionFailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientP2PConnectionFailInfo)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&steam_id_dest_, 0, reinterpret_cast<char*>(&ep2p_session_error_) -
      reinterpret_cast<char*>(&steam_id_dest_) + sizeof(ep2p_session_error_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientP2PConnectionFailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientP2PConnectionFailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_dest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id_dest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_dest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_src = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_src();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_src_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ep2p_session_error = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ep2p_session_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ep2p_session_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientP2PConnectionFailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientP2PConnectionFailInfo)
  return false;
#undef DO_
}

void CMsgClientP2PConnectionFailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientP2PConnectionFailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_dest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_dest(), output);
  }

  // optional fixed64 steam_id_src = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_src(), output);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->app_id(), output);
  }

  // optional uint32 ep2p_session_error = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ep2p_session_error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientP2PConnectionFailInfo)
}

::google::protobuf::uint8* CMsgClientP2PConnectionFailInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientP2PConnectionFailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_dest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id_dest(), target);
  }

  // optional fixed64 steam_id_src = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_src(), target);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->app_id(), target);
  }

  // optional uint32 ep2p_session_error = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ep2p_session_error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientP2PConnectionFailInfo)
  return target;
}

size_t CMsgClientP2PConnectionFailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientP2PConnectionFailInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed64 steam_id_dest = 1;
    if (has_steam_id_dest()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_src = 2;
    if (has_steam_id_src()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 3;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 ep2p_session_error = 4;
    if (has_ep2p_session_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ep2p_session_error());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientP2PConnectionFailInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientP2PConnectionFailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientP2PConnectionFailInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientP2PConnectionFailInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientP2PConnectionFailInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientP2PConnectionFailInfo)
    MergeFrom(*source);
  }
}

void CMsgClientP2PConnectionFailInfo::MergeFrom(const CMsgClientP2PConnectionFailInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientP2PConnectionFailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_dest_ = from.steam_id_dest_;
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_src_ = from.steam_id_src_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      ep2p_session_error_ = from.ep2p_session_error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientP2PConnectionFailInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientP2PConnectionFailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientP2PConnectionFailInfo::CopyFrom(const CMsgClientP2PConnectionFailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientP2PConnectionFailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientP2PConnectionFailInfo::IsInitialized() const {
  return true;
}

void CMsgClientP2PConnectionFailInfo::Swap(CMsgClientP2PConnectionFailInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientP2PConnectionFailInfo::InternalSwap(CMsgClientP2PConnectionFailInfo* other) {
  std::swap(steam_id_dest_, other->steam_id_dest_);
  std::swap(steam_id_src_, other->steam_id_src_);
  std::swap(app_id_, other->app_id_);
  std::swap(ep2p_session_error_, other->ep2p_session_error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientP2PConnectionFailInfo::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientP2PConnectionFailInfo

// optional fixed64 steam_id_dest = 1;
bool CMsgClientP2PConnectionFailInfo::has_steam_id_dest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientP2PConnectionFailInfo::set_has_steam_id_dest() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientP2PConnectionFailInfo::clear_has_steam_id_dest() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientP2PConnectionFailInfo::clear_steam_id_dest() {
  steam_id_dest_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_dest();
}
::google::protobuf::uint64 CMsgClientP2PConnectionFailInfo::steam_id_dest() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientP2PConnectionFailInfo.steam_id_dest)
  return steam_id_dest_;
}
void CMsgClientP2PConnectionFailInfo::set_steam_id_dest(::google::protobuf::uint64 value) {
  set_has_steam_id_dest();
  steam_id_dest_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientP2PConnectionFailInfo.steam_id_dest)
}

// optional fixed64 steam_id_src = 2;
bool CMsgClientP2PConnectionFailInfo::has_steam_id_src() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientP2PConnectionFailInfo::set_has_steam_id_src() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientP2PConnectionFailInfo::clear_has_steam_id_src() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientP2PConnectionFailInfo::clear_steam_id_src() {
  steam_id_src_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_src();
}
::google::protobuf::uint64 CMsgClientP2PConnectionFailInfo::steam_id_src() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientP2PConnectionFailInfo.steam_id_src)
  return steam_id_src_;
}
void CMsgClientP2PConnectionFailInfo::set_steam_id_src(::google::protobuf::uint64 value) {
  set_has_steam_id_src();
  steam_id_src_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientP2PConnectionFailInfo.steam_id_src)
}

// optional uint32 app_id = 3;
bool CMsgClientP2PConnectionFailInfo::has_app_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientP2PConnectionFailInfo::set_has_app_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientP2PConnectionFailInfo::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientP2PConnectionFailInfo::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientP2PConnectionFailInfo::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientP2PConnectionFailInfo.app_id)
  return app_id_;
}
void CMsgClientP2PConnectionFailInfo::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientP2PConnectionFailInfo.app_id)
}

// optional uint32 ep2p_session_error = 4;
bool CMsgClientP2PConnectionFailInfo::has_ep2p_session_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientP2PConnectionFailInfo::set_has_ep2p_session_error() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientP2PConnectionFailInfo::clear_has_ep2p_session_error() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientP2PConnectionFailInfo::clear_ep2p_session_error() {
  ep2p_session_error_ = 0u;
  clear_has_ep2p_session_error();
}
::google::protobuf::uint32 CMsgClientP2PConnectionFailInfo::ep2p_session_error() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientP2PConnectionFailInfo.ep2p_session_error)
  return ep2p_session_error_;
}
void CMsgClientP2PConnectionFailInfo::set_ep2p_session_error(::google::protobuf::uint32 value) {
  set_has_ep2p_session_error();
  ep2p_session_error_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientP2PConnectionFailInfo.ep2p_session_error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetAppOwnershipTicket::kAppIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetAppOwnershipTicket::CMsgClientGetAppOwnershipTicket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetAppOwnershipTicket)
}
CMsgClientGetAppOwnershipTicket::CMsgClientGetAppOwnershipTicket(const CMsgClientGetAppOwnershipTicket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetAppOwnershipTicket)
}

void CMsgClientGetAppOwnershipTicket::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
}

CMsgClientGetAppOwnershipTicket::~CMsgClientGetAppOwnershipTicket() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetAppOwnershipTicket)
  SharedDtor();
}

void CMsgClientGetAppOwnershipTicket::SharedDtor() {
}

void CMsgClientGetAppOwnershipTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetAppOwnershipTicket::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientGetAppOwnershipTicket& CMsgClientGetAppOwnershipTicket::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientGetAppOwnershipTicket* CMsgClientGetAppOwnershipTicket::New(::google::protobuf::Arena* arena) const {
  CMsgClientGetAppOwnershipTicket* n = new CMsgClientGetAppOwnershipTicket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientGetAppOwnershipTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetAppOwnershipTicket)
  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientGetAppOwnershipTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetAppOwnershipTicket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetAppOwnershipTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetAppOwnershipTicket)
  return false;
#undef DO_
}

void CMsgClientGetAppOwnershipTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetAppOwnershipTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetAppOwnershipTicket)
}

::google::protobuf::uint8* CMsgClientGetAppOwnershipTicket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetAppOwnershipTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetAppOwnershipTicket)
  return target;
}

size_t CMsgClientGetAppOwnershipTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetAppOwnershipTicket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->app_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetAppOwnershipTicket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetAppOwnershipTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetAppOwnershipTicket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientGetAppOwnershipTicket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetAppOwnershipTicket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetAppOwnershipTicket)
    MergeFrom(*source);
  }
}

void CMsgClientGetAppOwnershipTicket::MergeFrom(const CMsgClientGetAppOwnershipTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetAppOwnershipTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_app_id()) {
    set_app_id(from.app_id());
  }
}

void CMsgClientGetAppOwnershipTicket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetAppOwnershipTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetAppOwnershipTicket::CopyFrom(const CMsgClientGetAppOwnershipTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetAppOwnershipTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetAppOwnershipTicket::IsInitialized() const {
  return true;
}

void CMsgClientGetAppOwnershipTicket::Swap(CMsgClientGetAppOwnershipTicket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetAppOwnershipTicket::InternalSwap(CMsgClientGetAppOwnershipTicket* other) {
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientGetAppOwnershipTicket::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientGetAppOwnershipTicket

// optional uint32 app_id = 1;
bool CMsgClientGetAppOwnershipTicket::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientGetAppOwnershipTicket::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientGetAppOwnershipTicket::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientGetAppOwnershipTicket::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientGetAppOwnershipTicket::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetAppOwnershipTicket.app_id)
  return app_id_;
}
void CMsgClientGetAppOwnershipTicket::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetAppOwnershipTicket.app_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetAppOwnershipTicketResponse::kEresultFieldNumber;
const int CMsgClientGetAppOwnershipTicketResponse::kAppIdFieldNumber;
const int CMsgClientGetAppOwnershipTicketResponse::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetAppOwnershipTicketResponse::CMsgClientGetAppOwnershipTicketResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
}
CMsgClientGetAppOwnershipTicketResponse::CMsgClientGetAppOwnershipTicketResponse(const CMsgClientGetAppOwnershipTicketResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
}

void CMsgClientGetAppOwnershipTicketResponse::SharedCtor() {
  _cached_size_ = 0;
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0u;
  eresult_ = 2u;
}

CMsgClientGetAppOwnershipTicketResponse::~CMsgClientGetAppOwnershipTicketResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  SharedDtor();
}

void CMsgClientGetAppOwnershipTicketResponse::SharedDtor() {
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientGetAppOwnershipTicketResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetAppOwnershipTicketResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientGetAppOwnershipTicketResponse& CMsgClientGetAppOwnershipTicketResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientGetAppOwnershipTicketResponse* CMsgClientGetAppOwnershipTicketResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientGetAppOwnershipTicketResponse* n = new CMsgClientGetAppOwnershipTicketResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientGetAppOwnershipTicketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  if (has_ticket()) {
    GOOGLE_DCHECK(!ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*ticket_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    app_id_ = 0u;
    eresult_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientGetAppOwnershipTicketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ticket = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  return false;
#undef DO_
}

void CMsgClientGetAppOwnershipTicketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional bytes ticket = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->ticket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
}

::google::protobuf::uint8* CMsgClientGetAppOwnershipTicketResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_id(), target);
  }

  // optional bytes ticket = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ticket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  return target;
}

size_t CMsgClientGetAppOwnershipTicketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes ticket = 3;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ticket());
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetAppOwnershipTicketResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetAppOwnershipTicketResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientGetAppOwnershipTicketResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
    MergeFrom(*source);
  }
}

void CMsgClientGetAppOwnershipTicketResponse::MergeFrom(const CMsgClientGetAppOwnershipTicketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ticket();
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGetAppOwnershipTicketResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetAppOwnershipTicketResponse::CopyFrom(const CMsgClientGetAppOwnershipTicketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetAppOwnershipTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetAppOwnershipTicketResponse::IsInitialized() const {
  return true;
}

void CMsgClientGetAppOwnershipTicketResponse::Swap(CMsgClientGetAppOwnershipTicketResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetAppOwnershipTicketResponse::InternalSwap(CMsgClientGetAppOwnershipTicketResponse* other) {
  ticket_.Swap(&other->ticket_);
  std::swap(app_id_, other->app_id_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientGetAppOwnershipTicketResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientGetAppOwnershipTicketResponse

// optional uint32 eresult = 1 [default = 2];
bool CMsgClientGetAppOwnershipTicketResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientGetAppOwnershipTicketResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientGetAppOwnershipTicketResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientGetAppOwnershipTicketResponse::clear_eresult() {
  eresult_ = 2u;
  clear_has_eresult();
}
::google::protobuf::uint32 CMsgClientGetAppOwnershipTicketResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetAppOwnershipTicketResponse.eresult)
  return eresult_;
}
void CMsgClientGetAppOwnershipTicketResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetAppOwnershipTicketResponse.eresult)
}

// optional uint32 app_id = 2;
bool CMsgClientGetAppOwnershipTicketResponse::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientGetAppOwnershipTicketResponse::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientGetAppOwnershipTicketResponse::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientGetAppOwnershipTicketResponse::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientGetAppOwnershipTicketResponse::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetAppOwnershipTicketResponse.app_id)
  return app_id_;
}
void CMsgClientGetAppOwnershipTicketResponse::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetAppOwnershipTicketResponse.app_id)
}

// optional bytes ticket = 3;
bool CMsgClientGetAppOwnershipTicketResponse::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientGetAppOwnershipTicketResponse::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientGetAppOwnershipTicketResponse::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientGetAppOwnershipTicketResponse::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
const ::std::string& CMsgClientGetAppOwnershipTicketResponse::ticket() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetAppOwnershipTicketResponse.ticket)
  return ticket_.GetNoArena();
}
void CMsgClientGetAppOwnershipTicketResponse::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetAppOwnershipTicketResponse.ticket)
}
#if LANG_CXX11
void CMsgClientGetAppOwnershipTicketResponse::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientGetAppOwnershipTicketResponse.ticket)
}
#endif
void CMsgClientGetAppOwnershipTicketResponse::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientGetAppOwnershipTicketResponse.ticket)
}
void CMsgClientGetAppOwnershipTicketResponse::set_ticket(const void* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientGetAppOwnershipTicketResponse.ticket)
}
::std::string* CMsgClientGetAppOwnershipTicketResponse::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientGetAppOwnershipTicketResponse.ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientGetAppOwnershipTicketResponse::release_ticket() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientGetAppOwnershipTicketResponse.ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientGetAppOwnershipTicketResponse::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientGetAppOwnershipTicketResponse.ticket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSessionToken::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSessionToken::CMsgClientSessionToken()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSessionToken)
}
CMsgClientSessionToken::CMsgClientSessionToken(const CMsgClientSessionToken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_ = from.token_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSessionToken)
}

void CMsgClientSessionToken::SharedCtor() {
  _cached_size_ = 0;
  token_ = GOOGLE_ULONGLONG(0);
}

CMsgClientSessionToken::~CMsgClientSessionToken() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSessionToken)
  SharedDtor();
}

void CMsgClientSessionToken::SharedDtor() {
}

void CMsgClientSessionToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientSessionToken::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientSessionToken& CMsgClientSessionToken::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientSessionToken* CMsgClientSessionToken::New(::google::protobuf::Arena* arena) const {
  CMsgClientSessionToken* n = new CMsgClientSessionToken;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientSessionToken::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSessionToken)
  token_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientSessionToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSessionToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSessionToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSessionToken)
  return false;
#undef DO_
}

void CMsgClientSessionToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSessionToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSessionToken)
}

::google::protobuf::uint8* CMsgClientSessionToken::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSessionToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSessionToken)
  return target;
}

size_t CMsgClientSessionToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSessionToken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint64 token = 1;
  if (has_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSessionToken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSessionToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSessionToken* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientSessionToken>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSessionToken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSessionToken)
    MergeFrom(*source);
  }
}

void CMsgClientSessionToken::MergeFrom(const CMsgClientSessionToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSessionToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_token()) {
    set_token(from.token());
  }
}

void CMsgClientSessionToken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSessionToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSessionToken::CopyFrom(const CMsgClientSessionToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSessionToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSessionToken::IsInitialized() const {
  return true;
}

void CMsgClientSessionToken::Swap(CMsgClientSessionToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSessionToken::InternalSwap(CMsgClientSessionToken* other) {
  std::swap(token_, other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientSessionToken::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientSessionToken

// optional uint64 token = 1;
bool CMsgClientSessionToken::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientSessionToken::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientSessionToken::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientSessionToken::clear_token() {
  token_ = GOOGLE_ULONGLONG(0);
  clear_has_token();
}
::google::protobuf::uint64 CMsgClientSessionToken::token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientSessionToken.token)
  return token_;
}
void CMsgClientSessionToken::set_token(::google::protobuf::uint64 value) {
  set_has_token();
  token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientSessionToken.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGameConnectTokens::kMaxTokensToKeepFieldNumber;
const int CMsgClientGameConnectTokens::kTokensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGameConnectTokens::CMsgClientGameConnectTokens()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGameConnectTokens)
}
CMsgClientGameConnectTokens::CMsgClientGameConnectTokens(const CMsgClientGameConnectTokens& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_tokens_to_keep_ = from.max_tokens_to_keep_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGameConnectTokens)
}

void CMsgClientGameConnectTokens::SharedCtor() {
  _cached_size_ = 0;
  max_tokens_to_keep_ = 10u;
}

CMsgClientGameConnectTokens::~CMsgClientGameConnectTokens() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGameConnectTokens)
  SharedDtor();
}

void CMsgClientGameConnectTokens::SharedDtor() {
}

void CMsgClientGameConnectTokens::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGameConnectTokens::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientGameConnectTokens& CMsgClientGameConnectTokens::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientGameConnectTokens* CMsgClientGameConnectTokens::New(::google::protobuf::Arena* arena) const {
  CMsgClientGameConnectTokens* n = new CMsgClientGameConnectTokens;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientGameConnectTokens::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGameConnectTokens)
  tokens_.Clear();
  max_tokens_to_keep_ = 10u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientGameConnectTokens::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGameConnectTokens)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_tokens_to_keep = 1 [default = 10];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_max_tokens_to_keep();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_tokens_to_keep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes tokens = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGameConnectTokens)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGameConnectTokens)
  return false;
#undef DO_
}

void CMsgClientGameConnectTokens::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGameConnectTokens)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_tokens_to_keep = 1 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_tokens_to_keep(), output);
  }

  // repeated bytes tokens = 2;
  for (int i = 0, n = this->tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tokens(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGameConnectTokens)
}

::google::protobuf::uint8* CMsgClientGameConnectTokens::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGameConnectTokens)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_tokens_to_keep = 1 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_tokens_to_keep(), target);
  }

  // repeated bytes tokens = 2;
  for (int i = 0, n = this->tokens_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->tokens(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGameConnectTokens)
  return target;
}

size_t CMsgClientGameConnectTokens::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGameConnectTokens)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated bytes tokens = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tokens_size());
  for (int i = 0, n = this->tokens_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->tokens(i));
  }

  // optional uint32 max_tokens_to_keep = 1 [default = 10];
  if (has_max_tokens_to_keep()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_tokens_to_keep());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGameConnectTokens::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGameConnectTokens)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGameConnectTokens* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientGameConnectTokens>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGameConnectTokens)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGameConnectTokens)
    MergeFrom(*source);
  }
}

void CMsgClientGameConnectTokens::MergeFrom(const CMsgClientGameConnectTokens& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGameConnectTokens)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
  if (from.has_max_tokens_to_keep()) {
    set_max_tokens_to_keep(from.max_tokens_to_keep());
  }
}

void CMsgClientGameConnectTokens::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGameConnectTokens)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGameConnectTokens::CopyFrom(const CMsgClientGameConnectTokens& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGameConnectTokens)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGameConnectTokens::IsInitialized() const {
  return true;
}

void CMsgClientGameConnectTokens::Swap(CMsgClientGameConnectTokens* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGameConnectTokens::InternalSwap(CMsgClientGameConnectTokens* other) {
  tokens_.InternalSwap(&other->tokens_);
  std::swap(max_tokens_to_keep_, other->max_tokens_to_keep_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientGameConnectTokens::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientGameConnectTokens

// optional uint32 max_tokens_to_keep = 1 [default = 10];
bool CMsgClientGameConnectTokens::has_max_tokens_to_keep() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientGameConnectTokens::set_has_max_tokens_to_keep() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientGameConnectTokens::clear_has_max_tokens_to_keep() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientGameConnectTokens::clear_max_tokens_to_keep() {
  max_tokens_to_keep_ = 10u;
  clear_has_max_tokens_to_keep();
}
::google::protobuf::uint32 CMsgClientGameConnectTokens::max_tokens_to_keep() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGameConnectTokens.max_tokens_to_keep)
  return max_tokens_to_keep_;
}
void CMsgClientGameConnectTokens::set_max_tokens_to_keep(::google::protobuf::uint32 value) {
  set_has_max_tokens_to_keep();
  max_tokens_to_keep_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGameConnectTokens.max_tokens_to_keep)
}

// repeated bytes tokens = 2;
int CMsgClientGameConnectTokens::tokens_size() const {
  return tokens_.size();
}
void CMsgClientGameConnectTokens::clear_tokens() {
  tokens_.Clear();
}
const ::std::string& CMsgClientGameConnectTokens::tokens(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGameConnectTokens.tokens)
  return tokens_.Get(index);
}
::std::string* CMsgClientGameConnectTokens::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientGameConnectTokens.tokens)
  return tokens_.Mutable(index);
}
void CMsgClientGameConnectTokens::set_tokens(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGameConnectTokens.tokens)
  tokens_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CMsgClientGameConnectTokens::set_tokens(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGameConnectTokens.tokens)
  tokens_.Mutable(index)->assign(std::move(value));
}
#endif
void CMsgClientGameConnectTokens::set_tokens(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientGameConnectTokens.tokens)
}
void CMsgClientGameConnectTokens::set_tokens(int index, const void* value, size_t size) {
  tokens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientGameConnectTokens.tokens)
}
::std::string* CMsgClientGameConnectTokens::add_tokens() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CMsgClientGameConnectTokens.tokens)
  return tokens_.Add();
}
void CMsgClientGameConnectTokens::add_tokens(const ::std::string& value) {
  tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientGameConnectTokens.tokens)
}
#if LANG_CXX11
void CMsgClientGameConnectTokens::add_tokens(::std::string&& value) {
  tokens_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientGameConnectTokens.tokens)
}
#endif
void CMsgClientGameConnectTokens::add_tokens(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CMsgClientGameConnectTokens.tokens)
}
void CMsgClientGameConnectTokens::add_tokens(const void* value, size_t size) {
  tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CMsgClientGameConnectTokens.tokens)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgClientGameConnectTokens::tokens() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientGameConnectTokens.tokens)
  return tokens_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgClientGameConnectTokens::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientGameConnectTokens.tokens)
  return &tokens_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGSServerType::kAppIdServedFieldNumber;
const int CMsgGSServerType::kFlagsFieldNumber;
const int CMsgGSServerType::kGameIpAddressFieldNumber;
const int CMsgGSServerType::kGamePortFieldNumber;
const int CMsgGSServerType::kGameDirFieldNumber;
const int CMsgGSServerType::kGameVersionFieldNumber;
const int CMsgGSServerType::kGameQueryPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGSServerType::CMsgGSServerType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGSServerType)
}
CMsgGSServerType::CMsgGSServerType(const CMsgGSServerType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_dir()) {
    game_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_dir_);
  }
  game_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_version()) {
    game_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_version_);
  }
  ::memcpy(&app_id_served_, &from.app_id_served_,
    reinterpret_cast<char*>(&game_query_port_) -
    reinterpret_cast<char*>(&app_id_served_) + sizeof(game_query_port_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGSServerType)
}

void CMsgGSServerType::SharedCtor() {
  _cached_size_ = 0;
  game_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_served_, 0, reinterpret_cast<char*>(&game_query_port_) -
    reinterpret_cast<char*>(&app_id_served_) + sizeof(game_query_port_));
}

CMsgGSServerType::~CMsgGSServerType() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGSServerType)
  SharedDtor();
}

void CMsgGSServerType::SharedDtor() {
  game_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGSServerType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGSServerType::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGSServerType& CMsgGSServerType::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGSServerType* CMsgGSServerType::New(::google::protobuf::Arena* arena) const {
  CMsgGSServerType* n = new CMsgGSServerType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGSServerType::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGSServerType)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_game_dir()) {
      GOOGLE_DCHECK(!game_dir_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_dir_.UnsafeRawStringPointer())->clear();
    }
    if (has_game_version()) {
      GOOGLE_DCHECK(!game_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_version_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&app_id_served_, 0, reinterpret_cast<char*>(&game_query_port_) -
      reinterpret_cast<char*>(&app_id_served_) + sizeof(game_query_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGSServerType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGSServerType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id_served = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id_served();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_served_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_ip_address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_game_ip_address();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_ip_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_game_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_dir = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_dir().data(), this->game_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgGSServerType.game_dir");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_version().data(), this->game_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgGSServerType.game_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_query_port = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_game_query_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_query_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGSServerType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGSServerType)
  return false;
#undef DO_
}

void CMsgGSServerType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGSServerType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id_served = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id_served(), output);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  // optional uint32 game_ip_address = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_ip_address(), output);
  }

  // optional uint32 game_port = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_port(), output);
  }

  // optional string game_dir = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_dir().data(), this->game_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgGSServerType.game_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->game_dir(), output);
  }

  // optional string game_version = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_version().data(), this->game_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgGSServerType.game_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->game_version(), output);
  }

  // optional uint32 game_query_port = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->game_query_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGSServerType)
}

::google::protobuf::uint8* CMsgGSServerType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGSServerType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id_served = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id_served(), target);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
  }

  // optional uint32 game_ip_address = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_ip_address(), target);
  }

  // optional uint32 game_port = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_port(), target);
  }

  // optional string game_dir = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_dir().data(), this->game_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgGSServerType.game_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->game_dir(), target);
  }

  // optional string game_version = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_version().data(), this->game_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgGSServerType.game_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->game_version(), target);
  }

  // optional uint32 game_query_port = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->game_query_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGSServerType)
  return target;
}

size_t CMsgGSServerType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGSServerType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string game_dir = 5;
    if (has_game_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_dir());
    }

    // optional string game_version = 6;
    if (has_game_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_version());
    }

    // optional uint32 app_id_served = 1;
    if (has_app_id_served()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id_served());
    }

    // optional uint32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 game_ip_address = 3;
    if (has_game_ip_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_ip_address());
    }

    // optional uint32 game_port = 4;
    if (has_game_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_port());
    }

    // optional uint32 game_query_port = 7;
    if (has_game_query_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_query_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSServerType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGSServerType)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSServerType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGSServerType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGSServerType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGSServerType)
    MergeFrom(*source);
  }
}

void CMsgGSServerType::MergeFrom(const CMsgGSServerType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGSServerType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_game_dir();
      game_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_dir_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_game_version();
      game_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_served_ = from.app_id_served_;
    }
    if (cached_has_bits & 0x00000008u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_ip_address_ = from.game_ip_address_;
    }
    if (cached_has_bits & 0x00000020u) {
      game_port_ = from.game_port_;
    }
    if (cached_has_bits & 0x00000040u) {
      game_query_port_ = from.game_query_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGSServerType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGSServerType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSServerType::CopyFrom(const CMsgGSServerType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGSServerType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSServerType::IsInitialized() const {
  return true;
}

void CMsgGSServerType::Swap(CMsgGSServerType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGSServerType::InternalSwap(CMsgGSServerType* other) {
  game_dir_.Swap(&other->game_dir_);
  game_version_.Swap(&other->game_version_);
  std::swap(app_id_served_, other->app_id_served_);
  std::swap(flags_, other->flags_);
  std::swap(game_ip_address_, other->game_ip_address_);
  std::swap(game_port_, other->game_port_);
  std::swap(game_query_port_, other->game_query_port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGSServerType::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGSServerType

// optional uint32 app_id_served = 1;
bool CMsgGSServerType::has_app_id_served() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGSServerType::set_has_app_id_served() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGSServerType::clear_has_app_id_served() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGSServerType::clear_app_id_served() {
  app_id_served_ = 0u;
  clear_has_app_id_served();
}
::google::protobuf::uint32 CMsgGSServerType::app_id_served() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGSServerType.app_id_served)
  return app_id_served_;
}
void CMsgGSServerType::set_app_id_served(::google::protobuf::uint32 value) {
  set_has_app_id_served();
  app_id_served_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGSServerType.app_id_served)
}

// optional uint32 flags = 2;
bool CMsgGSServerType::has_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGSServerType::set_has_flags() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGSServerType::clear_has_flags() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGSServerType::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 CMsgGSServerType::flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGSServerType.flags)
  return flags_;
}
void CMsgGSServerType::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGSServerType.flags)
}

// optional uint32 game_ip_address = 3;
bool CMsgGSServerType::has_game_ip_address() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgGSServerType::set_has_game_ip_address() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgGSServerType::clear_has_game_ip_address() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgGSServerType::clear_game_ip_address() {
  game_ip_address_ = 0u;
  clear_has_game_ip_address();
}
::google::protobuf::uint32 CMsgGSServerType::game_ip_address() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGSServerType.game_ip_address)
  return game_ip_address_;
}
void CMsgGSServerType::set_game_ip_address(::google::protobuf::uint32 value) {
  set_has_game_ip_address();
  game_ip_address_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGSServerType.game_ip_address)
}

// optional uint32 game_port = 4;
bool CMsgGSServerType::has_game_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgGSServerType::set_has_game_port() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgGSServerType::clear_has_game_port() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgGSServerType::clear_game_port() {
  game_port_ = 0u;
  clear_has_game_port();
}
::google::protobuf::uint32 CMsgGSServerType::game_port() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGSServerType.game_port)
  return game_port_;
}
void CMsgGSServerType::set_game_port(::google::protobuf::uint32 value) {
  set_has_game_port();
  game_port_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGSServerType.game_port)
}

// optional string game_dir = 5;
bool CMsgGSServerType::has_game_dir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGSServerType::set_has_game_dir() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGSServerType::clear_has_game_dir() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGSServerType::clear_game_dir() {
  game_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_dir();
}
const ::std::string& CMsgGSServerType::game_dir() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGSServerType.game_dir)
  return game_dir_.GetNoArena();
}
void CMsgGSServerType::set_game_dir(const ::std::string& value) {
  set_has_game_dir();
  game_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGSServerType.game_dir)
}
#if LANG_CXX11
void CMsgGSServerType::set_game_dir(::std::string&& value) {
  set_has_game_dir();
  game_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgGSServerType.game_dir)
}
#endif
void CMsgGSServerType::set_game_dir(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_dir();
  game_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgGSServerType.game_dir)
}
void CMsgGSServerType::set_game_dir(const char* value, size_t size) {
  set_has_game_dir();
  game_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgGSServerType.game_dir)
}
::std::string* CMsgGSServerType::mutable_game_dir() {
  set_has_game_dir();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgGSServerType.game_dir)
  return game_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGSServerType::release_game_dir() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgGSServerType.game_dir)
  clear_has_game_dir();
  return game_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGSServerType::set_allocated_game_dir(::std::string* game_dir) {
  if (game_dir != NULL) {
    set_has_game_dir();
  } else {
    clear_has_game_dir();
  }
  game_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_dir);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgGSServerType.game_dir)
}

// optional string game_version = 6;
bool CMsgGSServerType::has_game_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGSServerType::set_has_game_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGSServerType::clear_has_game_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGSServerType::clear_game_version() {
  game_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_version();
}
const ::std::string& CMsgGSServerType::game_version() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGSServerType.game_version)
  return game_version_.GetNoArena();
}
void CMsgGSServerType::set_game_version(const ::std::string& value) {
  set_has_game_version();
  game_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGSServerType.game_version)
}
#if LANG_CXX11
void CMsgGSServerType::set_game_version(::std::string&& value) {
  set_has_game_version();
  game_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgGSServerType.game_version)
}
#endif
void CMsgGSServerType::set_game_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_version();
  game_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgGSServerType.game_version)
}
void CMsgGSServerType::set_game_version(const char* value, size_t size) {
  set_has_game_version();
  game_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgGSServerType.game_version)
}
::std::string* CMsgGSServerType::mutable_game_version() {
  set_has_game_version();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgGSServerType.game_version)
  return game_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGSServerType::release_game_version() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgGSServerType.game_version)
  clear_has_game_version();
  return game_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGSServerType::set_allocated_game_version(::std::string* game_version) {
  if (game_version != NULL) {
    set_has_game_version();
  } else {
    clear_has_game_version();
  }
  game_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_version);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgGSServerType.game_version)
}

// optional uint32 game_query_port = 7;
bool CMsgGSServerType::has_game_query_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgGSServerType::set_has_game_query_port() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgGSServerType::clear_has_game_query_port() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgGSServerType::clear_game_query_port() {
  game_query_port_ = 0u;
  clear_has_game_query_port();
}
::google::protobuf::uint32 CMsgGSServerType::game_query_port() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGSServerType.game_query_port)
  return game_query_port_;
}
void CMsgGSServerType::set_game_query_port(::google::protobuf::uint32 value) {
  set_has_game_query_port();
  game_query_port_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGSServerType.game_query_port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGSStatusReply::kIsSecureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGSStatusReply::CMsgGSStatusReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGSStatusReply)
}
CMsgGSStatusReply::CMsgGSStatusReply(const CMsgGSStatusReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_secure_ = from.is_secure_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGSStatusReply)
}

void CMsgGSStatusReply::SharedCtor() {
  _cached_size_ = 0;
  is_secure_ = false;
}

CMsgGSStatusReply::~CMsgGSStatusReply() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGSStatusReply)
  SharedDtor();
}

void CMsgGSStatusReply::SharedDtor() {
}

void CMsgGSStatusReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGSStatusReply::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGSStatusReply& CMsgGSStatusReply::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGSStatusReply* CMsgGSStatusReply::New(::google::protobuf::Arena* arena) const {
  CMsgGSStatusReply* n = new CMsgGSStatusReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGSStatusReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGSStatusReply)
  is_secure_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGSStatusReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGSStatusReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_secure = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_secure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_secure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGSStatusReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGSStatusReply)
  return false;
#undef DO_
}

void CMsgGSStatusReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGSStatusReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_secure = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_secure(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGSStatusReply)
}

::google::protobuf::uint8* CMsgGSStatusReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGSStatusReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_secure = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_secure(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGSStatusReply)
  return target;
}

size_t CMsgGSStatusReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGSStatusReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool is_secure = 1;
  if (has_is_secure()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSStatusReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGSStatusReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSStatusReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGSStatusReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGSStatusReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGSStatusReply)
    MergeFrom(*source);
  }
}

void CMsgGSStatusReply::MergeFrom(const CMsgGSStatusReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGSStatusReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_is_secure()) {
    set_is_secure(from.is_secure());
  }
}

void CMsgGSStatusReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGSStatusReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSStatusReply::CopyFrom(const CMsgGSStatusReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGSStatusReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSStatusReply::IsInitialized() const {
  return true;
}

void CMsgGSStatusReply::Swap(CMsgGSStatusReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGSStatusReply::InternalSwap(CMsgGSStatusReply* other) {
  std::swap(is_secure_, other->is_secure_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGSStatusReply::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGSStatusReply

// optional bool is_secure = 1;
bool CMsgGSStatusReply::has_is_secure() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGSStatusReply::set_has_is_secure() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGSStatusReply::clear_has_is_secure() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGSStatusReply::clear_is_secure() {
  is_secure_ = false;
  clear_has_is_secure();
}
bool CMsgGSStatusReply::is_secure() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGSStatusReply.is_secure)
  return is_secure_;
}
void CMsgGSStatusReply::set_is_secure(bool value) {
  set_has_is_secure();
  is_secure_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGSStatusReply.is_secure)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGSPlayerList_Player::kSteamIdFieldNumber;
const int CMsgGSPlayerList_Player::kPublicIpFieldNumber;
const int CMsgGSPlayerList_Player::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGSPlayerList_Player::CMsgGSPlayerList_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGSPlayerList.Player)
}
CMsgGSPlayerList_Player::CMsgGSPlayerList_Player(const CMsgGSPlayerList_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&public_ip_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(public_ip_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGSPlayerList.Player)
}

void CMsgGSPlayerList_Player::SharedCtor() {
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_, 0, reinterpret_cast<char*>(&public_ip_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(public_ip_));
}

CMsgGSPlayerList_Player::~CMsgGSPlayerList_Player() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGSPlayerList.Player)
  SharedDtor();
}

void CMsgGSPlayerList_Player::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGSPlayerList_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGSPlayerList_Player::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGSPlayerList_Player& CMsgGSPlayerList_Player::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGSPlayerList_Player* CMsgGSPlayerList_Player::New(::google::protobuf::Arena* arena) const {
  CMsgGSPlayerList_Player* n = new CMsgGSPlayerList_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGSPlayerList_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGSPlayerList.Player)
  if (has_token()) {
    GOOGLE_DCHECK(!token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*token_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&public_ip_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(public_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGSPlayerList_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGSPlayerList.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 public_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_public_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGSPlayerList.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGSPlayerList.Player)
  return false;
#undef DO_
}

void CMsgGSPlayerList_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGSPlayerList.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->steam_id(), output);
  }

  // optional uint32 public_ip = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->public_ip(), output);
  }

  // optional bytes token = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGSPlayerList.Player)
}

::google::protobuf::uint8* CMsgGSPlayerList_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGSPlayerList.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 public_ip = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->public_ip(), target);
  }

  // optional bytes token = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGSPlayerList.Player)
  return target;
}

size_t CMsgGSPlayerList_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGSPlayerList.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

    // optional uint64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steam_id());
    }

    // optional uint32 public_ip = 2;
    if (has_public_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_ip());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSPlayerList_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGSPlayerList.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSPlayerList_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGSPlayerList_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGSPlayerList.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGSPlayerList.Player)
    MergeFrom(*source);
  }
}

void CMsgGSPlayerList_Player::MergeFrom(const CMsgGSPlayerList_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGSPlayerList.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      public_ip_ = from.public_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGSPlayerList_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGSPlayerList.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSPlayerList_Player::CopyFrom(const CMsgGSPlayerList_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGSPlayerList.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSPlayerList_Player::IsInitialized() const {
  return true;
}

void CMsgGSPlayerList_Player::Swap(CMsgGSPlayerList_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGSPlayerList_Player::InternalSwap(CMsgGSPlayerList_Player* other) {
  token_.Swap(&other->token_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(public_ip_, other->public_ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGSPlayerList_Player::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGSPlayerList_Player

// optional uint64 steam_id = 1;
bool CMsgGSPlayerList_Player::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGSPlayerList_Player::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGSPlayerList_Player::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGSPlayerList_Player::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgGSPlayerList_Player::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGSPlayerList.Player.steam_id)
  return steam_id_;
}
void CMsgGSPlayerList_Player::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGSPlayerList.Player.steam_id)
}

// optional uint32 public_ip = 2;
bool CMsgGSPlayerList_Player::has_public_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGSPlayerList_Player::set_has_public_ip() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGSPlayerList_Player::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGSPlayerList_Player::clear_public_ip() {
  public_ip_ = 0u;
  clear_has_public_ip();
}
::google::protobuf::uint32 CMsgGSPlayerList_Player::public_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGSPlayerList.Player.public_ip)
  return public_ip_;
}
void CMsgGSPlayerList_Player::set_public_ip(::google::protobuf::uint32 value) {
  set_has_public_ip();
  public_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGSPlayerList.Player.public_ip)
}

// optional bytes token = 3;
bool CMsgGSPlayerList_Player::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGSPlayerList_Player::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGSPlayerList_Player::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGSPlayerList_Player::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& CMsgGSPlayerList_Player::token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGSPlayerList.Player.token)
  return token_.GetNoArena();
}
void CMsgGSPlayerList_Player::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGSPlayerList.Player.token)
}
#if LANG_CXX11
void CMsgGSPlayerList_Player::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgGSPlayerList.Player.token)
}
#endif
void CMsgGSPlayerList_Player::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgGSPlayerList.Player.token)
}
void CMsgGSPlayerList_Player::set_token(const void* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgGSPlayerList.Player.token)
}
::std::string* CMsgGSPlayerList_Player::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgGSPlayerList.Player.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGSPlayerList_Player::release_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgGSPlayerList.Player.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGSPlayerList_Player::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgGSPlayerList.Player.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGSPlayerList::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGSPlayerList::CMsgGSPlayerList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGSPlayerList)
}
CMsgGSPlayerList::CMsgGSPlayerList(const CMsgGSPlayerList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGSPlayerList)
}

void CMsgGSPlayerList::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGSPlayerList::~CMsgGSPlayerList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGSPlayerList)
  SharedDtor();
}

void CMsgGSPlayerList::SharedDtor() {
}

void CMsgGSPlayerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGSPlayerList::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGSPlayerList& CMsgGSPlayerList::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGSPlayerList* CMsgGSPlayerList::New(::google::protobuf::Arena* arena) const {
  CMsgGSPlayerList* n = new CMsgGSPlayerList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGSPlayerList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGSPlayerList)
  players_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGSPlayerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGSPlayerList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgGSPlayerList.Player players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGSPlayerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGSPlayerList)
  return false;
#undef DO_
}

void CMsgGSPlayerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGSPlayerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgGSPlayerList.Player players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGSPlayerList)
}

::google::protobuf::uint8* CMsgGSPlayerList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGSPlayerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgGSPlayerList.Player players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->players(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGSPlayerList)
  return target;
}

size_t CMsgGSPlayerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGSPlayerList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgGSPlayerList.Player players = 1;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSPlayerList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGSPlayerList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSPlayerList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGSPlayerList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGSPlayerList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGSPlayerList)
    MergeFrom(*source);
  }
}

void CMsgGSPlayerList::MergeFrom(const CMsgGSPlayerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGSPlayerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
}

void CMsgGSPlayerList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGSPlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSPlayerList::CopyFrom(const CMsgGSPlayerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGSPlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSPlayerList::IsInitialized() const {
  return true;
}

void CMsgGSPlayerList::Swap(CMsgGSPlayerList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGSPlayerList::InternalSwap(CMsgGSPlayerList* other) {
  players_.InternalSwap(&other->players_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGSPlayerList::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGSPlayerList

// repeated .proto.steam.CMsgGSPlayerList.Player players = 1;
int CMsgGSPlayerList::players_size() const {
  return players_.size();
}
void CMsgGSPlayerList::clear_players() {
  players_.Clear();
}
const ::proto::steam::CMsgGSPlayerList_Player& CMsgGSPlayerList::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGSPlayerList.players)
  return players_.Get(index);
}
::proto::steam::CMsgGSPlayerList_Player* CMsgGSPlayerList::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgGSPlayerList.players)
  return players_.Mutable(index);
}
::proto::steam::CMsgGSPlayerList_Player* CMsgGSPlayerList::add_players() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgGSPlayerList.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgGSPlayerList_Player >*
CMsgGSPlayerList::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgGSPlayerList.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgGSPlayerList_Player >&
CMsgGSPlayerList::players() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgGSPlayerList.players)
  return players_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGSUserPlaying::kSteamIdFieldNumber;
const int CMsgGSUserPlaying::kPublicIpFieldNumber;
const int CMsgGSUserPlaying::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGSUserPlaying::CMsgGSUserPlaying()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGSUserPlaying)
}
CMsgGSUserPlaying::CMsgGSUserPlaying(const CMsgGSUserPlaying& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&public_ip_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(public_ip_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGSUserPlaying)
}

void CMsgGSUserPlaying::SharedCtor() {
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_, 0, reinterpret_cast<char*>(&public_ip_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(public_ip_));
}

CMsgGSUserPlaying::~CMsgGSUserPlaying() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGSUserPlaying)
  SharedDtor();
}

void CMsgGSUserPlaying::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGSUserPlaying::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGSUserPlaying::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGSUserPlaying& CMsgGSUserPlaying::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGSUserPlaying* CMsgGSUserPlaying::New(::google::protobuf::Arena* arena) const {
  CMsgGSUserPlaying* n = new CMsgGSUserPlaying;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGSUserPlaying::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGSUserPlaying)
  if (has_token()) {
    GOOGLE_DCHECK(!token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*token_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&public_ip_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(public_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGSUserPlaying::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGSUserPlaying)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 public_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_public_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGSUserPlaying)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGSUserPlaying)
  return false;
#undef DO_
}

void CMsgGSUserPlaying::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGSUserPlaying)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 public_ip = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->public_ip(), output);
  }

  // optional bytes token = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGSUserPlaying)
}

::google::protobuf::uint8* CMsgGSUserPlaying::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGSUserPlaying)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 public_ip = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->public_ip(), target);
  }

  // optional bytes token = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGSUserPlaying)
  return target;
}

size_t CMsgGSUserPlaying::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGSUserPlaying)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 public_ip = 2;
    if (has_public_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_ip());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSUserPlaying::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGSUserPlaying)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSUserPlaying* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGSUserPlaying>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGSUserPlaying)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGSUserPlaying)
    MergeFrom(*source);
  }
}

void CMsgGSUserPlaying::MergeFrom(const CMsgGSUserPlaying& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGSUserPlaying)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      public_ip_ = from.public_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGSUserPlaying::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGSUserPlaying)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSUserPlaying::CopyFrom(const CMsgGSUserPlaying& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGSUserPlaying)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSUserPlaying::IsInitialized() const {
  return true;
}

void CMsgGSUserPlaying::Swap(CMsgGSUserPlaying* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGSUserPlaying::InternalSwap(CMsgGSUserPlaying* other) {
  token_.Swap(&other->token_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(public_ip_, other->public_ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGSUserPlaying::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGSUserPlaying

// optional fixed64 steam_id = 1;
bool CMsgGSUserPlaying::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGSUserPlaying::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGSUserPlaying::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGSUserPlaying::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgGSUserPlaying::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGSUserPlaying.steam_id)
  return steam_id_;
}
void CMsgGSUserPlaying::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGSUserPlaying.steam_id)
}

// optional uint32 public_ip = 2;
bool CMsgGSUserPlaying::has_public_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGSUserPlaying::set_has_public_ip() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGSUserPlaying::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGSUserPlaying::clear_public_ip() {
  public_ip_ = 0u;
  clear_has_public_ip();
}
::google::protobuf::uint32 CMsgGSUserPlaying::public_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGSUserPlaying.public_ip)
  return public_ip_;
}
void CMsgGSUserPlaying::set_public_ip(::google::protobuf::uint32 value) {
  set_has_public_ip();
  public_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGSUserPlaying.public_ip)
}

// optional bytes token = 3;
bool CMsgGSUserPlaying::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGSUserPlaying::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGSUserPlaying::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGSUserPlaying::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& CMsgGSUserPlaying::token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGSUserPlaying.token)
  return token_.GetNoArena();
}
void CMsgGSUserPlaying::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGSUserPlaying.token)
}
#if LANG_CXX11
void CMsgGSUserPlaying::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgGSUserPlaying.token)
}
#endif
void CMsgGSUserPlaying::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgGSUserPlaying.token)
}
void CMsgGSUserPlaying::set_token(const void* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgGSUserPlaying.token)
}
::std::string* CMsgGSUserPlaying::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgGSUserPlaying.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGSUserPlaying::release_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgGSUserPlaying.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGSUserPlaying::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgGSUserPlaying.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGSDisconnectNotice::kSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGSDisconnectNotice::CMsgGSDisconnectNotice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGSDisconnectNotice)
}
CMsgGSDisconnectNotice::CMsgGSDisconnectNotice(const CMsgGSDisconnectNotice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGSDisconnectNotice)
}

void CMsgGSDisconnectNotice::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
}

CMsgGSDisconnectNotice::~CMsgGSDisconnectNotice() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGSDisconnectNotice)
  SharedDtor();
}

void CMsgGSDisconnectNotice::SharedDtor() {
}

void CMsgGSDisconnectNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGSDisconnectNotice::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGSDisconnectNotice& CMsgGSDisconnectNotice::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGSDisconnectNotice* CMsgGSDisconnectNotice::New(::google::protobuf::Arena* arena) const {
  CMsgGSDisconnectNotice* n = new CMsgGSDisconnectNotice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGSDisconnectNotice::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGSDisconnectNotice)
  steam_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGSDisconnectNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGSDisconnectNotice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGSDisconnectNotice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGSDisconnectNotice)
  return false;
#undef DO_
}

void CMsgGSDisconnectNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGSDisconnectNotice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGSDisconnectNotice)
}

::google::protobuf::uint8* CMsgGSDisconnectNotice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGSDisconnectNotice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGSDisconnectNotice)
  return target;
}

size_t CMsgGSDisconnectNotice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGSDisconnectNotice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSDisconnectNotice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGSDisconnectNotice)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSDisconnectNotice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGSDisconnectNotice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGSDisconnectNotice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGSDisconnectNotice)
    MergeFrom(*source);
  }
}

void CMsgGSDisconnectNotice::MergeFrom(const CMsgGSDisconnectNotice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGSDisconnectNotice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steam_id()) {
    set_steam_id(from.steam_id());
  }
}

void CMsgGSDisconnectNotice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGSDisconnectNotice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSDisconnectNotice::CopyFrom(const CMsgGSDisconnectNotice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGSDisconnectNotice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSDisconnectNotice::IsInitialized() const {
  return true;
}

void CMsgGSDisconnectNotice::Swap(CMsgGSDisconnectNotice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGSDisconnectNotice::InternalSwap(CMsgGSDisconnectNotice* other) {
  std::swap(steam_id_, other->steam_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGSDisconnectNotice::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGSDisconnectNotice

// optional fixed64 steam_id = 1;
bool CMsgGSDisconnectNotice::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGSDisconnectNotice::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGSDisconnectNotice::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGSDisconnectNotice::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgGSDisconnectNotice::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGSDisconnectNotice.steam_id)
  return steam_id_;
}
void CMsgGSDisconnectNotice::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGSDisconnectNotice.steam_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGamesPlayed_GamePlayed::kSteamIdGsFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGameIdFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGameIpAddressFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGamePortFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kIsSecureFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kTokenFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGameExtraInfoFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGameDataBlobFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kProcessIdFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kStreamingProviderIdFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGameFlagsFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kOwnerIdFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kVrHmdVendorFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kVrHmdModelFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kLaunchOptionTypeFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kPrimaryControllerTypeFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kPrimarySteamControllerSerialFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kTotalSteamControllerCountFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kTotalNonSteamControllerCountFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kControllerWorkshopFileIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGamesPlayed_GamePlayed::CMsgClientGamesPlayed_GamePlayed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGamesPlayed.GamePlayed)
}
CMsgClientGamesPlayed_GamePlayed::CMsgClientGamesPlayed_GamePlayed(const CMsgClientGamesPlayed_GamePlayed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  game_extra_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_extra_info()) {
    game_extra_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_extra_info_);
  }
  game_data_blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_data_blob()) {
    game_data_blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_data_blob_);
  }
  vr_hmd_vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vr_hmd_vendor()) {
    vr_hmd_vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vr_hmd_vendor_);
  }
  vr_hmd_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vr_hmd_model()) {
    vr_hmd_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vr_hmd_model_);
  }
  primary_steam_controller_serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_primary_steam_controller_serial()) {
    primary_steam_controller_serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_steam_controller_serial_);
  }
  ::memcpy(&steam_id_gs_, &from.steam_id_gs_,
    reinterpret_cast<char*>(&primary_controller_type_) -
    reinterpret_cast<char*>(&steam_id_gs_) + sizeof(primary_controller_type_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGamesPlayed.GamePlayed)
}

void CMsgClientGamesPlayed_GamePlayed::SharedCtor() {
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_extra_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_data_blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vr_hmd_vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vr_hmd_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_steam_controller_serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_gs_, 0, reinterpret_cast<char*>(&controller_workshop_file_id_) -
    reinterpret_cast<char*>(&steam_id_gs_) + sizeof(controller_workshop_file_id_));
  primary_controller_type_ = -1;
}

CMsgClientGamesPlayed_GamePlayed::~CMsgClientGamesPlayed_GamePlayed() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  SharedDtor();
}

void CMsgClientGamesPlayed_GamePlayed::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_extra_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_data_blob_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vr_hmd_vendor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vr_hmd_model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_steam_controller_serial_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientGamesPlayed_GamePlayed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGamesPlayed_GamePlayed::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientGamesPlayed_GamePlayed& CMsgClientGamesPlayed_GamePlayed::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientGamesPlayed_GamePlayed* CMsgClientGamesPlayed_GamePlayed::New(::google::protobuf::Arena* arena) const {
  CMsgClientGamesPlayed_GamePlayed* n = new CMsgClientGamesPlayed_GamePlayed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientGamesPlayed_GamePlayed::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_token()) {
      GOOGLE_DCHECK(!token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*token_.UnsafeRawStringPointer())->clear();
    }
    if (has_game_extra_info()) {
      GOOGLE_DCHECK(!game_extra_info_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_extra_info_.UnsafeRawStringPointer())->clear();
    }
    if (has_game_data_blob()) {
      GOOGLE_DCHECK(!game_data_blob_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_data_blob_.UnsafeRawStringPointer())->clear();
    }
    if (has_vr_hmd_vendor()) {
      GOOGLE_DCHECK(!vr_hmd_vendor_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vr_hmd_vendor_.UnsafeRawStringPointer())->clear();
    }
    if (has_vr_hmd_model()) {
      GOOGLE_DCHECK(!vr_hmd_model_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vr_hmd_model_.UnsafeRawStringPointer())->clear();
    }
    if (has_primary_steam_controller_serial()) {
      GOOGLE_DCHECK(!primary_steam_controller_serial_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*primary_steam_controller_serial_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&steam_id_gs_, 0, reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&steam_id_gs_) + sizeof(game_id_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&game_ip_address_, 0, reinterpret_cast<char*>(&launch_option_type_) -
      reinterpret_cast<char*>(&game_ip_address_) + sizeof(launch_option_type_));
  }
  if (_has_bits_[16 / 32] & 983040u) {
    ::memset(&total_steam_controller_count_, 0, reinterpret_cast<char*>(&controller_workshop_file_id_) -
      reinterpret_cast<char*>(&total_steam_controller_count_) + sizeof(controller_workshop_file_id_));
    primary_controller_type_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientGamesPlayed_GamePlayed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 steam_id_gs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_steam_id_gs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steam_id_gs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 game_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_ip_address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_game_ip_address();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_ip_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_game_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_secure = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_is_secure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_secure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes token = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_extra_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_extra_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_extra_info().data(), this->game_extra_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientGamesPlayed.GamePlayed.game_extra_info");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes game_data_blob = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_game_data_blob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 process_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_process_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 streaming_provider_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_streaming_provider_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &streaming_provider_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_flags = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_game_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_owner_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vr_hmd_vendor = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vr_hmd_vendor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vr_hmd_vendor().data(), this->vr_hmd_vendor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_vendor");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vr_hmd_model = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vr_hmd_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vr_hmd_model().data(), this->vr_hmd_model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_model");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 launch_option_type = 15 [default = 0];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_launch_option_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &launch_option_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 primary_controller_type = 16 [default = -1];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_primary_controller_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &primary_controller_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string primary_steam_controller_serial = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primary_steam_controller_serial()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->primary_steam_controller_serial().data(), this->primary_steam_controller_serial().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientGamesPlayed.GamePlayed.primary_steam_controller_serial");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_steam_controller_count = 18 [default = 0];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_total_steam_controller_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_steam_controller_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_non_steam_controller_count = 19 [default = 0];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_total_non_steam_controller_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_non_steam_controller_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 controller_workshop_file_id = 20 [default = 0];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_controller_workshop_file_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &controller_workshop_file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  return false;
#undef DO_
}

void CMsgClientGamesPlayed_GamePlayed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steam_id_gs = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->steam_id_gs(), output);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->game_id(), output);
  }

  // optional uint32 game_ip_address = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_ip_address(), output);
  }

  // optional uint32 game_port = 4;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_port(), output);
  }

  // optional bool is_secure = 5;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_secure(), output);
  }

  // optional bytes token = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->token(), output);
  }

  // optional string game_extra_info = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_extra_info().data(), this->game_extra_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGamesPlayed.GamePlayed.game_extra_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->game_extra_info(), output);
  }

  // optional bytes game_data_blob = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->game_data_blob(), output);
  }

  // optional uint32 process_id = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->process_id(), output);
  }

  // optional uint32 streaming_provider_id = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->streaming_provider_id(), output);
  }

  // optional uint32 game_flags = 11;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->game_flags(), output);
  }

  // optional uint32 owner_id = 12;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->owner_id(), output);
  }

  // optional string vr_hmd_vendor = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vr_hmd_vendor().data(), this->vr_hmd_vendor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_vendor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->vr_hmd_vendor(), output);
  }

  // optional string vr_hmd_model = 14;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vr_hmd_model().data(), this->vr_hmd_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->vr_hmd_model(), output);
  }

  // optional uint32 launch_option_type = 15 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->launch_option_type(), output);
  }

  // optional int32 primary_controller_type = 16 [default = -1];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->primary_controller_type(), output);
  }

  // optional string primary_steam_controller_serial = 17;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->primary_steam_controller_serial().data(), this->primary_steam_controller_serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGamesPlayed.GamePlayed.primary_steam_controller_serial");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->primary_steam_controller_serial(), output);
  }

  // optional uint32 total_steam_controller_count = 18 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->total_steam_controller_count(), output);
  }

  // optional uint32 total_non_steam_controller_count = 19 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->total_non_steam_controller_count(), output);
  }

  // optional uint64 controller_workshop_file_id = 20 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->controller_workshop_file_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGamesPlayed.GamePlayed)
}

::google::protobuf::uint8* CMsgClientGamesPlayed_GamePlayed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steam_id_gs = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->steam_id_gs(), target);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->game_id(), target);
  }

  // optional uint32 game_ip_address = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_ip_address(), target);
  }

  // optional uint32 game_port = 4;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_port(), target);
  }

  // optional bool is_secure = 5;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_secure(), target);
  }

  // optional bytes token = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->token(), target);
  }

  // optional string game_extra_info = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_extra_info().data(), this->game_extra_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGamesPlayed.GamePlayed.game_extra_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->game_extra_info(), target);
  }

  // optional bytes game_data_blob = 8;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->game_data_blob(), target);
  }

  // optional uint32 process_id = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->process_id(), target);
  }

  // optional uint32 streaming_provider_id = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->streaming_provider_id(), target);
  }

  // optional uint32 game_flags = 11;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->game_flags(), target);
  }

  // optional uint32 owner_id = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->owner_id(), target);
  }

  // optional string vr_hmd_vendor = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vr_hmd_vendor().data(), this->vr_hmd_vendor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_vendor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->vr_hmd_vendor(), target);
  }

  // optional string vr_hmd_model = 14;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vr_hmd_model().data(), this->vr_hmd_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->vr_hmd_model(), target);
  }

  // optional uint32 launch_option_type = 15 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->launch_option_type(), target);
  }

  // optional int32 primary_controller_type = 16 [default = -1];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->primary_controller_type(), target);
  }

  // optional string primary_steam_controller_serial = 17;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->primary_steam_controller_serial().data(), this->primary_steam_controller_serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGamesPlayed.GamePlayed.primary_steam_controller_serial");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->primary_steam_controller_serial(), target);
  }

  // optional uint32 total_steam_controller_count = 18 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->total_steam_controller_count(), target);
  }

  // optional uint32 total_non_steam_controller_count = 19 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->total_non_steam_controller_count(), target);
  }

  // optional uint64 controller_workshop_file_id = 20 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->controller_workshop_file_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  return target;
}

size_t CMsgClientGamesPlayed_GamePlayed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes token = 6;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

    // optional string game_extra_info = 7;
    if (has_game_extra_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_extra_info());
    }

    // optional bytes game_data_blob = 8;
    if (has_game_data_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->game_data_blob());
    }

    // optional string vr_hmd_vendor = 13;
    if (has_vr_hmd_vendor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vr_hmd_vendor());
    }

    // optional string vr_hmd_model = 14;
    if (has_vr_hmd_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vr_hmd_model());
    }

    // optional string primary_steam_controller_serial = 17;
    if (has_primary_steam_controller_serial()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->primary_steam_controller_serial());
    }

    // optional uint64 steam_id_gs = 1;
    if (has_steam_id_gs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steam_id_gs());
    }

    // optional fixed64 game_id = 2;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 game_ip_address = 3;
    if (has_game_ip_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_ip_address());
    }

    // optional uint32 game_port = 4;
    if (has_game_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_port());
    }

    // optional bool is_secure = 5;
    if (has_is_secure()) {
      total_size += 1 + 1;
    }

    // optional uint32 process_id = 9;
    if (has_process_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process_id());
    }

    // optional uint32 streaming_provider_id = 10;
    if (has_streaming_provider_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->streaming_provider_id());
    }

    // optional uint32 game_flags = 11;
    if (has_game_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_flags());
    }

    // optional uint32 owner_id = 12;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_id());
    }

    // optional uint32 launch_option_type = 15 [default = 0];
    if (has_launch_option_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->launch_option_type());
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional uint32 total_steam_controller_count = 18 [default = 0];
    if (has_total_steam_controller_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_steam_controller_count());
    }

    // optional uint32 total_non_steam_controller_count = 19 [default = 0];
    if (has_total_non_steam_controller_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_non_steam_controller_count());
    }

    // optional uint64 controller_workshop_file_id = 20 [default = 0];
    if (has_controller_workshop_file_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->controller_workshop_file_id());
    }

    // optional int32 primary_controller_type = 16 [default = -1];
    if (has_primary_controller_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->primary_controller_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGamesPlayed_GamePlayed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGamesPlayed_GamePlayed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientGamesPlayed_GamePlayed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGamesPlayed.GamePlayed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGamesPlayed.GamePlayed)
    MergeFrom(*source);
  }
}

void CMsgClientGamesPlayed_GamePlayed::MergeFrom(const CMsgClientGamesPlayed_GamePlayed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_game_extra_info();
      game_extra_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_extra_info_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_game_data_blob();
      game_data_blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_data_blob_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_vr_hmd_vendor();
      vr_hmd_vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vr_hmd_vendor_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_vr_hmd_model();
      vr_hmd_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vr_hmd_model_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_primary_steam_controller_serial();
      primary_steam_controller_serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_steam_controller_serial_);
    }
    if (cached_has_bits & 0x00000040u) {
      steam_id_gs_ = from.steam_id_gs_;
    }
    if (cached_has_bits & 0x00000080u) {
      game_id_ = from.game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      game_ip_address_ = from.game_ip_address_;
    }
    if (cached_has_bits & 0x00000200u) {
      game_port_ = from.game_port_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_secure_ = from.is_secure_;
    }
    if (cached_has_bits & 0x00000800u) {
      process_id_ = from.process_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      streaming_provider_id_ = from.streaming_provider_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      game_flags_ = from.game_flags_;
    }
    if (cached_has_bits & 0x00004000u) {
      owner_id_ = from.owner_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      launch_option_type_ = from.launch_option_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      total_steam_controller_count_ = from.total_steam_controller_count_;
    }
    if (cached_has_bits & 0x00020000u) {
      total_non_steam_controller_count_ = from.total_non_steam_controller_count_;
    }
    if (cached_has_bits & 0x00040000u) {
      controller_workshop_file_id_ = from.controller_workshop_file_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      primary_controller_type_ = from.primary_controller_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGamesPlayed_GamePlayed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGamesPlayed_GamePlayed::CopyFrom(const CMsgClientGamesPlayed_GamePlayed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGamesPlayed.GamePlayed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGamesPlayed_GamePlayed::IsInitialized() const {
  return true;
}

void CMsgClientGamesPlayed_GamePlayed::Swap(CMsgClientGamesPlayed_GamePlayed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGamesPlayed_GamePlayed::InternalSwap(CMsgClientGamesPlayed_GamePlayed* other) {
  token_.Swap(&other->token_);
  game_extra_info_.Swap(&other->game_extra_info_);
  game_data_blob_.Swap(&other->game_data_blob_);
  vr_hmd_vendor_.Swap(&other->vr_hmd_vendor_);
  vr_hmd_model_.Swap(&other->vr_hmd_model_);
  primary_steam_controller_serial_.Swap(&other->primary_steam_controller_serial_);
  std::swap(steam_id_gs_, other->steam_id_gs_);
  std::swap(game_id_, other->game_id_);
  std::swap(game_ip_address_, other->game_ip_address_);
  std::swap(game_port_, other->game_port_);
  std::swap(is_secure_, other->is_secure_);
  std::swap(process_id_, other->process_id_);
  std::swap(streaming_provider_id_, other->streaming_provider_id_);
  std::swap(game_flags_, other->game_flags_);
  std::swap(owner_id_, other->owner_id_);
  std::swap(launch_option_type_, other->launch_option_type_);
  std::swap(total_steam_controller_count_, other->total_steam_controller_count_);
  std::swap(total_non_steam_controller_count_, other->total_non_steam_controller_count_);
  std::swap(controller_workshop_file_id_, other->controller_workshop_file_id_);
  std::swap(primary_controller_type_, other->primary_controller_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientGamesPlayed_GamePlayed::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientGamesPlayed_GamePlayed

// optional uint64 steam_id_gs = 1;
bool CMsgClientGamesPlayed_GamePlayed::has_steam_id_gs() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientGamesPlayed_GamePlayed::set_has_steam_id_gs() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_has_steam_id_gs() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_steam_id_gs() {
  steam_id_gs_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_gs();
}
::google::protobuf::uint64 CMsgClientGamesPlayed_GamePlayed::steam_id_gs() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGamesPlayed.GamePlayed.steam_id_gs)
  return steam_id_gs_;
}
void CMsgClientGamesPlayed_GamePlayed::set_steam_id_gs(::google::protobuf::uint64 value) {
  set_has_steam_id_gs();
  steam_id_gs_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGamesPlayed.GamePlayed.steam_id_gs)
}

// optional fixed64 game_id = 2;
bool CMsgClientGamesPlayed_GamePlayed::has_game_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgClientGamesPlayed_GamePlayed::set_has_game_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_id();
}
::google::protobuf::uint64 CMsgClientGamesPlayed_GamePlayed::game_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_id)
  return game_id_;
}
void CMsgClientGamesPlayed_GamePlayed::set_game_id(::google::protobuf::uint64 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_id)
}

// optional uint32 game_ip_address = 3;
bool CMsgClientGamesPlayed_GamePlayed::has_game_ip_address() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgClientGamesPlayed_GamePlayed::set_has_game_ip_address() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_has_game_ip_address() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_game_ip_address() {
  game_ip_address_ = 0u;
  clear_has_game_ip_address();
}
::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::game_ip_address() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_ip_address)
  return game_ip_address_;
}
void CMsgClientGamesPlayed_GamePlayed::set_game_ip_address(::google::protobuf::uint32 value) {
  set_has_game_ip_address();
  game_ip_address_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_ip_address)
}

// optional uint32 game_port = 4;
bool CMsgClientGamesPlayed_GamePlayed::has_game_port() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgClientGamesPlayed_GamePlayed::set_has_game_port() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_has_game_port() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_game_port() {
  game_port_ = 0u;
  clear_has_game_port();
}
::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::game_port() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_port)
  return game_port_;
}
void CMsgClientGamesPlayed_GamePlayed::set_game_port(::google::protobuf::uint32 value) {
  set_has_game_port();
  game_port_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_port)
}

// optional bool is_secure = 5;
bool CMsgClientGamesPlayed_GamePlayed::has_is_secure() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgClientGamesPlayed_GamePlayed::set_has_is_secure() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_has_is_secure() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_is_secure() {
  is_secure_ = false;
  clear_has_is_secure();
}
bool CMsgClientGamesPlayed_GamePlayed::is_secure() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGamesPlayed.GamePlayed.is_secure)
  return is_secure_;
}
void CMsgClientGamesPlayed_GamePlayed::set_is_secure(bool value) {
  set_has_is_secure();
  is_secure_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGamesPlayed.GamePlayed.is_secure)
}

// optional bytes token = 6;
bool CMsgClientGamesPlayed_GamePlayed::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientGamesPlayed_GamePlayed::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& CMsgClientGamesPlayed_GamePlayed::token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGamesPlayed.GamePlayed.token)
  return token_.GetNoArena();
}
void CMsgClientGamesPlayed_GamePlayed::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGamesPlayed.GamePlayed.token)
}
#if LANG_CXX11
void CMsgClientGamesPlayed_GamePlayed::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientGamesPlayed.GamePlayed.token)
}
#endif
void CMsgClientGamesPlayed_GamePlayed::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientGamesPlayed.GamePlayed.token)
}
void CMsgClientGamesPlayed_GamePlayed::set_token(const void* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientGamesPlayed.GamePlayed.token)
}
::std::string* CMsgClientGamesPlayed_GamePlayed::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientGamesPlayed.GamePlayed.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientGamesPlayed_GamePlayed::release_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientGamesPlayed.GamePlayed.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientGamesPlayed_GamePlayed::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientGamesPlayed.GamePlayed.token)
}

// optional string game_extra_info = 7;
bool CMsgClientGamesPlayed_GamePlayed::has_game_extra_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientGamesPlayed_GamePlayed::set_has_game_extra_info() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_has_game_extra_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_game_extra_info() {
  game_extra_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_extra_info();
}
const ::std::string& CMsgClientGamesPlayed_GamePlayed::game_extra_info() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_extra_info)
  return game_extra_info_.GetNoArena();
}
void CMsgClientGamesPlayed_GamePlayed::set_game_extra_info(const ::std::string& value) {
  set_has_game_extra_info();
  game_extra_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_extra_info)
}
#if LANG_CXX11
void CMsgClientGamesPlayed_GamePlayed::set_game_extra_info(::std::string&& value) {
  set_has_game_extra_info();
  game_extra_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_extra_info)
}
#endif
void CMsgClientGamesPlayed_GamePlayed::set_game_extra_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_extra_info();
  game_extra_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_extra_info)
}
void CMsgClientGamesPlayed_GamePlayed::set_game_extra_info(const char* value, size_t size) {
  set_has_game_extra_info();
  game_extra_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_extra_info)
}
::std::string* CMsgClientGamesPlayed_GamePlayed::mutable_game_extra_info() {
  set_has_game_extra_info();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_extra_info)
  return game_extra_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientGamesPlayed_GamePlayed::release_game_extra_info() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_extra_info)
  clear_has_game_extra_info();
  return game_extra_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientGamesPlayed_GamePlayed::set_allocated_game_extra_info(::std::string* game_extra_info) {
  if (game_extra_info != NULL) {
    set_has_game_extra_info();
  } else {
    clear_has_game_extra_info();
  }
  game_extra_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_extra_info);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_extra_info)
}

// optional bytes game_data_blob = 8;
bool CMsgClientGamesPlayed_GamePlayed::has_game_data_blob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientGamesPlayed_GamePlayed::set_has_game_data_blob() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_has_game_data_blob() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_game_data_blob() {
  game_data_blob_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_data_blob();
}
const ::std::string& CMsgClientGamesPlayed_GamePlayed::game_data_blob() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_data_blob)
  return game_data_blob_.GetNoArena();
}
void CMsgClientGamesPlayed_GamePlayed::set_game_data_blob(const ::std::string& value) {
  set_has_game_data_blob();
  game_data_blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_data_blob)
}
#if LANG_CXX11
void CMsgClientGamesPlayed_GamePlayed::set_game_data_blob(::std::string&& value) {
  set_has_game_data_blob();
  game_data_blob_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_data_blob)
}
#endif
void CMsgClientGamesPlayed_GamePlayed::set_game_data_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_data_blob();
  game_data_blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_data_blob)
}
void CMsgClientGamesPlayed_GamePlayed::set_game_data_blob(const void* value, size_t size) {
  set_has_game_data_blob();
  game_data_blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_data_blob)
}
::std::string* CMsgClientGamesPlayed_GamePlayed::mutable_game_data_blob() {
  set_has_game_data_blob();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_data_blob)
  return game_data_blob_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientGamesPlayed_GamePlayed::release_game_data_blob() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_data_blob)
  clear_has_game_data_blob();
  return game_data_blob_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientGamesPlayed_GamePlayed::set_allocated_game_data_blob(::std::string* game_data_blob) {
  if (game_data_blob != NULL) {
    set_has_game_data_blob();
  } else {
    clear_has_game_data_blob();
  }
  game_data_blob_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_data_blob);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_data_blob)
}

// optional uint32 process_id = 9;
bool CMsgClientGamesPlayed_GamePlayed::has_process_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgClientGamesPlayed_GamePlayed::set_has_process_id() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_has_process_id() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_process_id() {
  process_id_ = 0u;
  clear_has_process_id();
}
::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::process_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGamesPlayed.GamePlayed.process_id)
  return process_id_;
}
void CMsgClientGamesPlayed_GamePlayed::set_process_id(::google::protobuf::uint32 value) {
  set_has_process_id();
  process_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGamesPlayed.GamePlayed.process_id)
}

// optional uint32 streaming_provider_id = 10;
bool CMsgClientGamesPlayed_GamePlayed::has_streaming_provider_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgClientGamesPlayed_GamePlayed::set_has_streaming_provider_id() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_has_streaming_provider_id() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_streaming_provider_id() {
  streaming_provider_id_ = 0u;
  clear_has_streaming_provider_id();
}
::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::streaming_provider_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGamesPlayed.GamePlayed.streaming_provider_id)
  return streaming_provider_id_;
}
void CMsgClientGamesPlayed_GamePlayed::set_streaming_provider_id(::google::protobuf::uint32 value) {
  set_has_streaming_provider_id();
  streaming_provider_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGamesPlayed.GamePlayed.streaming_provider_id)
}

// optional uint32 game_flags = 11;
bool CMsgClientGamesPlayed_GamePlayed::has_game_flags() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgClientGamesPlayed_GamePlayed::set_has_game_flags() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_has_game_flags() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_game_flags() {
  game_flags_ = 0u;
  clear_has_game_flags();
}
::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::game_flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_flags)
  return game_flags_;
}
void CMsgClientGamesPlayed_GamePlayed::set_game_flags(::google::protobuf::uint32 value) {
  set_has_game_flags();
  game_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGamesPlayed.GamePlayed.game_flags)
}

// optional uint32 owner_id = 12;
bool CMsgClientGamesPlayed_GamePlayed::has_owner_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgClientGamesPlayed_GamePlayed::set_has_owner_id() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_owner_id() {
  owner_id_ = 0u;
  clear_has_owner_id();
}
::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::owner_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGamesPlayed.GamePlayed.owner_id)
  return owner_id_;
}
void CMsgClientGamesPlayed_GamePlayed::set_owner_id(::google::protobuf::uint32 value) {
  set_has_owner_id();
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGamesPlayed.GamePlayed.owner_id)
}

// optional string vr_hmd_vendor = 13;
bool CMsgClientGamesPlayed_GamePlayed::has_vr_hmd_vendor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientGamesPlayed_GamePlayed::set_has_vr_hmd_vendor() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_has_vr_hmd_vendor() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_vr_hmd_vendor() {
  vr_hmd_vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vr_hmd_vendor();
}
const ::std::string& CMsgClientGamesPlayed_GamePlayed::vr_hmd_vendor() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_vendor)
  return vr_hmd_vendor_.GetNoArena();
}
void CMsgClientGamesPlayed_GamePlayed::set_vr_hmd_vendor(const ::std::string& value) {
  set_has_vr_hmd_vendor();
  vr_hmd_vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_vendor)
}
#if LANG_CXX11
void CMsgClientGamesPlayed_GamePlayed::set_vr_hmd_vendor(::std::string&& value) {
  set_has_vr_hmd_vendor();
  vr_hmd_vendor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_vendor)
}
#endif
void CMsgClientGamesPlayed_GamePlayed::set_vr_hmd_vendor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vr_hmd_vendor();
  vr_hmd_vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_vendor)
}
void CMsgClientGamesPlayed_GamePlayed::set_vr_hmd_vendor(const char* value, size_t size) {
  set_has_vr_hmd_vendor();
  vr_hmd_vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_vendor)
}
::std::string* CMsgClientGamesPlayed_GamePlayed::mutable_vr_hmd_vendor() {
  set_has_vr_hmd_vendor();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_vendor)
  return vr_hmd_vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientGamesPlayed_GamePlayed::release_vr_hmd_vendor() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_vendor)
  clear_has_vr_hmd_vendor();
  return vr_hmd_vendor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientGamesPlayed_GamePlayed::set_allocated_vr_hmd_vendor(::std::string* vr_hmd_vendor) {
  if (vr_hmd_vendor != NULL) {
    set_has_vr_hmd_vendor();
  } else {
    clear_has_vr_hmd_vendor();
  }
  vr_hmd_vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vr_hmd_vendor);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_vendor)
}

// optional string vr_hmd_model = 14;
bool CMsgClientGamesPlayed_GamePlayed::has_vr_hmd_model() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientGamesPlayed_GamePlayed::set_has_vr_hmd_model() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_has_vr_hmd_model() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_vr_hmd_model() {
  vr_hmd_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vr_hmd_model();
}
const ::std::string& CMsgClientGamesPlayed_GamePlayed::vr_hmd_model() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_model)
  return vr_hmd_model_.GetNoArena();
}
void CMsgClientGamesPlayed_GamePlayed::set_vr_hmd_model(const ::std::string& value) {
  set_has_vr_hmd_model();
  vr_hmd_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_model)
}
#if LANG_CXX11
void CMsgClientGamesPlayed_GamePlayed::set_vr_hmd_model(::std::string&& value) {
  set_has_vr_hmd_model();
  vr_hmd_model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_model)
}
#endif
void CMsgClientGamesPlayed_GamePlayed::set_vr_hmd_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vr_hmd_model();
  vr_hmd_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_model)
}
void CMsgClientGamesPlayed_GamePlayed::set_vr_hmd_model(const char* value, size_t size) {
  set_has_vr_hmd_model();
  vr_hmd_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_model)
}
::std::string* CMsgClientGamesPlayed_GamePlayed::mutable_vr_hmd_model() {
  set_has_vr_hmd_model();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_model)
  return vr_hmd_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientGamesPlayed_GamePlayed::release_vr_hmd_model() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_model)
  clear_has_vr_hmd_model();
  return vr_hmd_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientGamesPlayed_GamePlayed::set_allocated_vr_hmd_model(::std::string* vr_hmd_model) {
  if (vr_hmd_model != NULL) {
    set_has_vr_hmd_model();
  } else {
    clear_has_vr_hmd_model();
  }
  vr_hmd_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vr_hmd_model);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientGamesPlayed.GamePlayed.vr_hmd_model)
}

// optional uint32 launch_option_type = 15 [default = 0];
bool CMsgClientGamesPlayed_GamePlayed::has_launch_option_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgClientGamesPlayed_GamePlayed::set_has_launch_option_type() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_has_launch_option_type() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_launch_option_type() {
  launch_option_type_ = 0u;
  clear_has_launch_option_type();
}
::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::launch_option_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGamesPlayed.GamePlayed.launch_option_type)
  return launch_option_type_;
}
void CMsgClientGamesPlayed_GamePlayed::set_launch_option_type(::google::protobuf::uint32 value) {
  set_has_launch_option_type();
  launch_option_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGamesPlayed.GamePlayed.launch_option_type)
}

// optional int32 primary_controller_type = 16 [default = -1];
bool CMsgClientGamesPlayed_GamePlayed::has_primary_controller_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgClientGamesPlayed_GamePlayed::set_has_primary_controller_type() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_has_primary_controller_type() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_primary_controller_type() {
  primary_controller_type_ = -1;
  clear_has_primary_controller_type();
}
::google::protobuf::int32 CMsgClientGamesPlayed_GamePlayed::primary_controller_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGamesPlayed.GamePlayed.primary_controller_type)
  return primary_controller_type_;
}
void CMsgClientGamesPlayed_GamePlayed::set_primary_controller_type(::google::protobuf::int32 value) {
  set_has_primary_controller_type();
  primary_controller_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGamesPlayed.GamePlayed.primary_controller_type)
}

// optional string primary_steam_controller_serial = 17;
bool CMsgClientGamesPlayed_GamePlayed::has_primary_steam_controller_serial() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientGamesPlayed_GamePlayed::set_has_primary_steam_controller_serial() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_has_primary_steam_controller_serial() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_primary_steam_controller_serial() {
  primary_steam_controller_serial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_primary_steam_controller_serial();
}
const ::std::string& CMsgClientGamesPlayed_GamePlayed::primary_steam_controller_serial() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGamesPlayed.GamePlayed.primary_steam_controller_serial)
  return primary_steam_controller_serial_.GetNoArena();
}
void CMsgClientGamesPlayed_GamePlayed::set_primary_steam_controller_serial(const ::std::string& value) {
  set_has_primary_steam_controller_serial();
  primary_steam_controller_serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGamesPlayed.GamePlayed.primary_steam_controller_serial)
}
#if LANG_CXX11
void CMsgClientGamesPlayed_GamePlayed::set_primary_steam_controller_serial(::std::string&& value) {
  set_has_primary_steam_controller_serial();
  primary_steam_controller_serial_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientGamesPlayed.GamePlayed.primary_steam_controller_serial)
}
#endif
void CMsgClientGamesPlayed_GamePlayed::set_primary_steam_controller_serial(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_primary_steam_controller_serial();
  primary_steam_controller_serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientGamesPlayed.GamePlayed.primary_steam_controller_serial)
}
void CMsgClientGamesPlayed_GamePlayed::set_primary_steam_controller_serial(const char* value, size_t size) {
  set_has_primary_steam_controller_serial();
  primary_steam_controller_serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientGamesPlayed.GamePlayed.primary_steam_controller_serial)
}
::std::string* CMsgClientGamesPlayed_GamePlayed::mutable_primary_steam_controller_serial() {
  set_has_primary_steam_controller_serial();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientGamesPlayed.GamePlayed.primary_steam_controller_serial)
  return primary_steam_controller_serial_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientGamesPlayed_GamePlayed::release_primary_steam_controller_serial() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientGamesPlayed.GamePlayed.primary_steam_controller_serial)
  clear_has_primary_steam_controller_serial();
  return primary_steam_controller_serial_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientGamesPlayed_GamePlayed::set_allocated_primary_steam_controller_serial(::std::string* primary_steam_controller_serial) {
  if (primary_steam_controller_serial != NULL) {
    set_has_primary_steam_controller_serial();
  } else {
    clear_has_primary_steam_controller_serial();
  }
  primary_steam_controller_serial_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_steam_controller_serial);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientGamesPlayed.GamePlayed.primary_steam_controller_serial)
}

// optional uint32 total_steam_controller_count = 18 [default = 0];
bool CMsgClientGamesPlayed_GamePlayed::has_total_steam_controller_count() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgClientGamesPlayed_GamePlayed::set_has_total_steam_controller_count() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_has_total_steam_controller_count() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_total_steam_controller_count() {
  total_steam_controller_count_ = 0u;
  clear_has_total_steam_controller_count();
}
::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::total_steam_controller_count() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGamesPlayed.GamePlayed.total_steam_controller_count)
  return total_steam_controller_count_;
}
void CMsgClientGamesPlayed_GamePlayed::set_total_steam_controller_count(::google::protobuf::uint32 value) {
  set_has_total_steam_controller_count();
  total_steam_controller_count_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGamesPlayed.GamePlayed.total_steam_controller_count)
}

// optional uint32 total_non_steam_controller_count = 19 [default = 0];
bool CMsgClientGamesPlayed_GamePlayed::has_total_non_steam_controller_count() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgClientGamesPlayed_GamePlayed::set_has_total_non_steam_controller_count() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_has_total_non_steam_controller_count() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_total_non_steam_controller_count() {
  total_non_steam_controller_count_ = 0u;
  clear_has_total_non_steam_controller_count();
}
::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::total_non_steam_controller_count() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGamesPlayed.GamePlayed.total_non_steam_controller_count)
  return total_non_steam_controller_count_;
}
void CMsgClientGamesPlayed_GamePlayed::set_total_non_steam_controller_count(::google::protobuf::uint32 value) {
  set_has_total_non_steam_controller_count();
  total_non_steam_controller_count_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGamesPlayed.GamePlayed.total_non_steam_controller_count)
}

// optional uint64 controller_workshop_file_id = 20 [default = 0];
bool CMsgClientGamesPlayed_GamePlayed::has_controller_workshop_file_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgClientGamesPlayed_GamePlayed::set_has_controller_workshop_file_id() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_has_controller_workshop_file_id() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgClientGamesPlayed_GamePlayed::clear_controller_workshop_file_id() {
  controller_workshop_file_id_ = GOOGLE_ULONGLONG(0);
  clear_has_controller_workshop_file_id();
}
::google::protobuf::uint64 CMsgClientGamesPlayed_GamePlayed::controller_workshop_file_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGamesPlayed.GamePlayed.controller_workshop_file_id)
  return controller_workshop_file_id_;
}
void CMsgClientGamesPlayed_GamePlayed::set_controller_workshop_file_id(::google::protobuf::uint64 value) {
  set_has_controller_workshop_file_id();
  controller_workshop_file_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGamesPlayed.GamePlayed.controller_workshop_file_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGamesPlayed::kGamesPlayedFieldNumber;
const int CMsgClientGamesPlayed::kClientOsTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGamesPlayed::CMsgClientGamesPlayed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGamesPlayed)
}
CMsgClientGamesPlayed::CMsgClientGamesPlayed(const CMsgClientGamesPlayed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      games_played_(from.games_played_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_os_type_ = from.client_os_type_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGamesPlayed)
}

void CMsgClientGamesPlayed::SharedCtor() {
  _cached_size_ = 0;
  client_os_type_ = 0u;
}

CMsgClientGamesPlayed::~CMsgClientGamesPlayed() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGamesPlayed)
  SharedDtor();
}

void CMsgClientGamesPlayed::SharedDtor() {
}

void CMsgClientGamesPlayed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGamesPlayed::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientGamesPlayed& CMsgClientGamesPlayed::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientGamesPlayed* CMsgClientGamesPlayed::New(::google::protobuf::Arena* arena) const {
  CMsgClientGamesPlayed* n = new CMsgClientGamesPlayed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientGamesPlayed::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGamesPlayed)
  games_played_.Clear();
  client_os_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientGamesPlayed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGamesPlayed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientGamesPlayed.GamePlayed games_played = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_games_played()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_os_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_client_os_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_os_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGamesPlayed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGamesPlayed)
  return false;
#undef DO_
}

void CMsgClientGamesPlayed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGamesPlayed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientGamesPlayed.GamePlayed games_played = 1;
  for (unsigned int i = 0, n = this->games_played_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->games_played(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_os_type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_os_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGamesPlayed)
}

::google::protobuf::uint8* CMsgClientGamesPlayed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGamesPlayed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientGamesPlayed.GamePlayed games_played = 1;
  for (unsigned int i = 0, n = this->games_played_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->games_played(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_os_type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_os_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGamesPlayed)
  return target;
}

size_t CMsgClientGamesPlayed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGamesPlayed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientGamesPlayed.GamePlayed games_played = 1;
  {
    unsigned int count = this->games_played_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->games_played(i));
    }
  }

  // optional uint32 client_os_type = 2;
  if (has_client_os_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->client_os_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGamesPlayed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGamesPlayed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGamesPlayed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientGamesPlayed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGamesPlayed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGamesPlayed)
    MergeFrom(*source);
  }
}

void CMsgClientGamesPlayed::MergeFrom(const CMsgClientGamesPlayed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGamesPlayed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  games_played_.MergeFrom(from.games_played_);
  if (from.has_client_os_type()) {
    set_client_os_type(from.client_os_type());
  }
}

void CMsgClientGamesPlayed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGamesPlayed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGamesPlayed::CopyFrom(const CMsgClientGamesPlayed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGamesPlayed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGamesPlayed::IsInitialized() const {
  return true;
}

void CMsgClientGamesPlayed::Swap(CMsgClientGamesPlayed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGamesPlayed::InternalSwap(CMsgClientGamesPlayed* other) {
  games_played_.InternalSwap(&other->games_played_);
  std::swap(client_os_type_, other->client_os_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientGamesPlayed::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientGamesPlayed

// repeated .proto.steam.CMsgClientGamesPlayed.GamePlayed games_played = 1;
int CMsgClientGamesPlayed::games_played_size() const {
  return games_played_.size();
}
void CMsgClientGamesPlayed::clear_games_played() {
  games_played_.Clear();
}
const ::proto::steam::CMsgClientGamesPlayed_GamePlayed& CMsgClientGamesPlayed::games_played(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGamesPlayed.games_played)
  return games_played_.Get(index);
}
::proto::steam::CMsgClientGamesPlayed_GamePlayed* CMsgClientGamesPlayed::mutable_games_played(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientGamesPlayed.games_played)
  return games_played_.Mutable(index);
}
::proto::steam::CMsgClientGamesPlayed_GamePlayed* CMsgClientGamesPlayed::add_games_played() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientGamesPlayed.games_played)
  return games_played_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientGamesPlayed_GamePlayed >*
CMsgClientGamesPlayed::mutable_games_played() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientGamesPlayed.games_played)
  return &games_played_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientGamesPlayed_GamePlayed >&
CMsgClientGamesPlayed::games_played() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientGamesPlayed.games_played)
  return games_played_;
}

// optional uint32 client_os_type = 2;
bool CMsgClientGamesPlayed::has_client_os_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientGamesPlayed::set_has_client_os_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientGamesPlayed::clear_has_client_os_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientGamesPlayed::clear_client_os_type() {
  client_os_type_ = 0u;
  clear_has_client_os_type();
}
::google::protobuf::uint32 CMsgClientGamesPlayed::client_os_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGamesPlayed.client_os_type)
  return client_os_type_;
}
void CMsgClientGamesPlayed::set_client_os_type(::google::protobuf::uint32 value) {
  set_has_client_os_type();
  client_os_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGamesPlayed.client_os_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGSApprove::kSteamIdFieldNumber;
const int CMsgGSApprove::kOwnerSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGSApprove::CMsgGSApprove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGSApprove)
}
CMsgGSApprove::CMsgGSApprove(const CMsgGSApprove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&owner_steam_id_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(owner_steam_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGSApprove)
}

void CMsgGSApprove::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_, 0, reinterpret_cast<char*>(&owner_steam_id_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(owner_steam_id_));
}

CMsgGSApprove::~CMsgGSApprove() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGSApprove)
  SharedDtor();
}

void CMsgGSApprove::SharedDtor() {
}

void CMsgGSApprove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGSApprove::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGSApprove& CMsgGSApprove::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGSApprove* CMsgGSApprove::New(::google::protobuf::Arena* arena) const {
  CMsgGSApprove* n = new CMsgGSApprove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGSApprove::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGSApprove)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&owner_steam_id_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(owner_steam_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGSApprove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGSApprove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 owner_steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_owner_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGSApprove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGSApprove)
  return false;
#undef DO_
}

void CMsgGSApprove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGSApprove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional fixed64 owner_steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->owner_steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGSApprove)
}

::google::protobuf::uint8* CMsgGSApprove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGSApprove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional fixed64 owner_steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->owner_steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGSApprove)
  return target;
}

size_t CMsgGSApprove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGSApprove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 owner_steam_id = 2;
    if (has_owner_steam_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSApprove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGSApprove)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSApprove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGSApprove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGSApprove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGSApprove)
    MergeFrom(*source);
  }
}

void CMsgGSApprove::MergeFrom(const CMsgGSApprove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGSApprove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      owner_steam_id_ = from.owner_steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGSApprove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGSApprove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSApprove::CopyFrom(const CMsgGSApprove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGSApprove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSApprove::IsInitialized() const {
  return true;
}

void CMsgGSApprove::Swap(CMsgGSApprove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGSApprove::InternalSwap(CMsgGSApprove* other) {
  std::swap(steam_id_, other->steam_id_);
  std::swap(owner_steam_id_, other->owner_steam_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGSApprove::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGSApprove

// optional fixed64 steam_id = 1;
bool CMsgGSApprove::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGSApprove::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGSApprove::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGSApprove::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgGSApprove::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGSApprove.steam_id)
  return steam_id_;
}
void CMsgGSApprove::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGSApprove.steam_id)
}

// optional fixed64 owner_steam_id = 2;
bool CMsgGSApprove::has_owner_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGSApprove::set_has_owner_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGSApprove::clear_has_owner_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGSApprove::clear_owner_steam_id() {
  owner_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_owner_steam_id();
}
::google::protobuf::uint64 CMsgGSApprove::owner_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGSApprove.owner_steam_id)
  return owner_steam_id_;
}
void CMsgGSApprove::set_owner_steam_id(::google::protobuf::uint64 value) {
  set_has_owner_steam_id();
  owner_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGSApprove.owner_steam_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGSDeny::kSteamIdFieldNumber;
const int CMsgGSDeny::kEdenyReasonFieldNumber;
const int CMsgGSDeny::kDenyStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGSDeny::CMsgGSDeny()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGSDeny)
}
CMsgGSDeny::CMsgGSDeny(const CMsgGSDeny& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deny_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_deny_string()) {
    deny_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deny_string_);
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&edeny_reason_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(edeny_reason_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGSDeny)
}

void CMsgGSDeny::SharedCtor() {
  _cached_size_ = 0;
  deny_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_, 0, reinterpret_cast<char*>(&edeny_reason_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(edeny_reason_));
}

CMsgGSDeny::~CMsgGSDeny() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGSDeny)
  SharedDtor();
}

void CMsgGSDeny::SharedDtor() {
  deny_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGSDeny::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGSDeny::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGSDeny& CMsgGSDeny::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGSDeny* CMsgGSDeny::New(::google::protobuf::Arena* arena) const {
  CMsgGSDeny* n = new CMsgGSDeny;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGSDeny::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGSDeny)
  if (has_deny_string()) {
    GOOGLE_DCHECK(!deny_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*deny_string_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&edeny_reason_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(edeny_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGSDeny::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGSDeny)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 edeny_reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_edeny_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edeny_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string deny_string = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deny_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deny_string().data(), this->deny_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgGSDeny.deny_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGSDeny)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGSDeny)
  return false;
#undef DO_
}

void CMsgGSDeny::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGSDeny)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional int32 edeny_reason = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->edeny_reason(), output);
  }

  // optional string deny_string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deny_string().data(), this->deny_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgGSDeny.deny_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->deny_string(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGSDeny)
}

::google::protobuf::uint8* CMsgGSDeny::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGSDeny)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional int32 edeny_reason = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->edeny_reason(), target);
  }

  // optional string deny_string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deny_string().data(), this->deny_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgGSDeny.deny_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->deny_string(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGSDeny)
  return target;
}

size_t CMsgGSDeny::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGSDeny)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string deny_string = 3;
    if (has_deny_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deny_string());
    }

    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional int32 edeny_reason = 2;
    if (has_edeny_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edeny_reason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSDeny::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGSDeny)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSDeny* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGSDeny>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGSDeny)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGSDeny)
    MergeFrom(*source);
  }
}

void CMsgGSDeny::MergeFrom(const CMsgGSDeny& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGSDeny)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_deny_string();
      deny_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deny_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      edeny_reason_ = from.edeny_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGSDeny::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGSDeny)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSDeny::CopyFrom(const CMsgGSDeny& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGSDeny)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSDeny::IsInitialized() const {
  return true;
}

void CMsgGSDeny::Swap(CMsgGSDeny* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGSDeny::InternalSwap(CMsgGSDeny* other) {
  deny_string_.Swap(&other->deny_string_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(edeny_reason_, other->edeny_reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGSDeny::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGSDeny

// optional fixed64 steam_id = 1;
bool CMsgGSDeny::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGSDeny::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGSDeny::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGSDeny::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgGSDeny::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGSDeny.steam_id)
  return steam_id_;
}
void CMsgGSDeny::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGSDeny.steam_id)
}

// optional int32 edeny_reason = 2;
bool CMsgGSDeny::has_edeny_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGSDeny::set_has_edeny_reason() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGSDeny::clear_has_edeny_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGSDeny::clear_edeny_reason() {
  edeny_reason_ = 0;
  clear_has_edeny_reason();
}
::google::protobuf::int32 CMsgGSDeny::edeny_reason() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGSDeny.edeny_reason)
  return edeny_reason_;
}
void CMsgGSDeny::set_edeny_reason(::google::protobuf::int32 value) {
  set_has_edeny_reason();
  edeny_reason_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGSDeny.edeny_reason)
}

// optional string deny_string = 3;
bool CMsgGSDeny::has_deny_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGSDeny::set_has_deny_string() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGSDeny::clear_has_deny_string() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGSDeny::clear_deny_string() {
  deny_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deny_string();
}
const ::std::string& CMsgGSDeny::deny_string() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGSDeny.deny_string)
  return deny_string_.GetNoArena();
}
void CMsgGSDeny::set_deny_string(const ::std::string& value) {
  set_has_deny_string();
  deny_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGSDeny.deny_string)
}
#if LANG_CXX11
void CMsgGSDeny::set_deny_string(::std::string&& value) {
  set_has_deny_string();
  deny_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgGSDeny.deny_string)
}
#endif
void CMsgGSDeny::set_deny_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_deny_string();
  deny_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgGSDeny.deny_string)
}
void CMsgGSDeny::set_deny_string(const char* value, size_t size) {
  set_has_deny_string();
  deny_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgGSDeny.deny_string)
}
::std::string* CMsgGSDeny::mutable_deny_string() {
  set_has_deny_string();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgGSDeny.deny_string)
  return deny_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGSDeny::release_deny_string() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgGSDeny.deny_string)
  clear_has_deny_string();
  return deny_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGSDeny::set_allocated_deny_string(::std::string* deny_string) {
  if (deny_string != NULL) {
    set_has_deny_string();
  } else {
    clear_has_deny_string();
  }
  deny_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deny_string);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgGSDeny.deny_string)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGSKick::kSteamIdFieldNumber;
const int CMsgGSKick::kEdenyReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGSKick::CMsgGSKick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGSKick)
}
CMsgGSKick::CMsgGSKick(const CMsgGSKick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&edeny_reason_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(edeny_reason_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGSKick)
}

void CMsgGSKick::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_, 0, reinterpret_cast<char*>(&edeny_reason_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(edeny_reason_));
}

CMsgGSKick::~CMsgGSKick() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGSKick)
  SharedDtor();
}

void CMsgGSKick::SharedDtor() {
}

void CMsgGSKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGSKick::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGSKick& CMsgGSKick::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGSKick* CMsgGSKick::New(::google::protobuf::Arena* arena) const {
  CMsgGSKick* n = new CMsgGSKick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGSKick::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGSKick)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&edeny_reason_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(edeny_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGSKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGSKick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 edeny_reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_edeny_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edeny_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGSKick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGSKick)
  return false;
#undef DO_
}

void CMsgGSKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGSKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional int32 edeny_reason = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->edeny_reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGSKick)
}

::google::protobuf::uint8* CMsgGSKick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGSKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional int32 edeny_reason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->edeny_reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGSKick)
  return target;
}

size_t CMsgGSKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGSKick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional int32 edeny_reason = 2;
    if (has_edeny_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edeny_reason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSKick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGSKick)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSKick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGSKick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGSKick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGSKick)
    MergeFrom(*source);
  }
}

void CMsgGSKick::MergeFrom(const CMsgGSKick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGSKick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      edeny_reason_ = from.edeny_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGSKick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGSKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSKick::CopyFrom(const CMsgGSKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGSKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSKick::IsInitialized() const {
  return true;
}

void CMsgGSKick::Swap(CMsgGSKick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGSKick::InternalSwap(CMsgGSKick* other) {
  std::swap(steam_id_, other->steam_id_);
  std::swap(edeny_reason_, other->edeny_reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGSKick::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGSKick

// optional fixed64 steam_id = 1;
bool CMsgGSKick::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGSKick::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGSKick::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGSKick::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgGSKick::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGSKick.steam_id)
  return steam_id_;
}
void CMsgGSKick::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGSKick.steam_id)
}

// optional int32 edeny_reason = 2;
bool CMsgGSKick::has_edeny_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGSKick::set_has_edeny_reason() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGSKick::clear_has_edeny_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGSKick::clear_edeny_reason() {
  edeny_reason_ = 0;
  clear_has_edeny_reason();
}
::google::protobuf::int32 CMsgGSKick::edeny_reason() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgGSKick.edeny_reason)
  return edeny_reason_;
}
void CMsgGSKick::set_edeny_reason(::google::protobuf::int32 value) {
  set_has_edeny_reason();
  edeny_reason_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgGSKick.edeny_reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAuthList::kTokensLeftFieldNumber;
const int CMsgClientAuthList::kLastRequestSeqFieldNumber;
const int CMsgClientAuthList::kLastRequestSeqFromServerFieldNumber;
const int CMsgClientAuthList::kTicketsFieldNumber;
const int CMsgClientAuthList::kAppIdsFieldNumber;
const int CMsgClientAuthList::kMessageSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAuthList::CMsgClientAuthList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAuthList)
}
CMsgClientAuthList::CMsgClientAuthList(const CMsgClientAuthList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tickets_(from.tickets_),
      app_ids_(from.app_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tokens_left_, &from.tokens_left_,
    reinterpret_cast<char*>(&message_sequence_) -
    reinterpret_cast<char*>(&tokens_left_) + sizeof(message_sequence_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAuthList)
}

void CMsgClientAuthList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tokens_left_, 0, reinterpret_cast<char*>(&message_sequence_) -
    reinterpret_cast<char*>(&tokens_left_) + sizeof(message_sequence_));
}

CMsgClientAuthList::~CMsgClientAuthList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAuthList)
  SharedDtor();
}

void CMsgClientAuthList::SharedDtor() {
}

void CMsgClientAuthList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAuthList::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientAuthList& CMsgClientAuthList::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientAuthList* CMsgClientAuthList::New(::google::protobuf::Arena* arena) const {
  CMsgClientAuthList* n = new CMsgClientAuthList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientAuthList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAuthList)
  tickets_.Clear();
  app_ids_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&tokens_left_, 0, reinterpret_cast<char*>(&message_sequence_) -
      reinterpret_cast<char*>(&tokens_left_) + sizeof(message_sequence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientAuthList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAuthList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tokens_left = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tokens_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tokens_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_request_seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_last_request_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_request_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_request_seq_from_server = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_last_request_seq_from_server();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_request_seq_from_server_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgAuthTicket tickets = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tickets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 app_ids = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_app_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_app_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 message_sequence = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_message_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAuthList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAuthList)
  return false;
#undef DO_
}

void CMsgClientAuthList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAuthList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tokens_left = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tokens_left(), output);
  }

  // optional uint32 last_request_seq = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_request_seq(), output);
  }

  // optional uint32 last_request_seq_from_server = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_request_seq_from_server(), output);
  }

  // repeated .proto.steam.CMsgAuthTicket tickets = 4;
  for (unsigned int i = 0, n = this->tickets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tickets(i), output);
  }

  // repeated uint32 app_ids = 5;
  for (int i = 0, n = this->app_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->app_ids(i), output);
  }

  // optional uint32 message_sequence = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->message_sequence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAuthList)
}

::google::protobuf::uint8* CMsgClientAuthList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAuthList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tokens_left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tokens_left(), target);
  }

  // optional uint32 last_request_seq = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_request_seq(), target);
  }

  // optional uint32 last_request_seq_from_server = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_request_seq_from_server(), target);
  }

  // repeated .proto.steam.CMsgAuthTicket tickets = 4;
  for (unsigned int i = 0, n = this->tickets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->tickets(i), deterministic, target);
  }

  // repeated uint32 app_ids = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->app_ids_, target);

  // optional uint32 message_sequence = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->message_sequence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAuthList)
  return target;
}

size_t CMsgClientAuthList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAuthList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgAuthTicket tickets = 4;
  {
    unsigned int count = this->tickets_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tickets(i));
    }
  }

  // repeated uint32 app_ids = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->app_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->app_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 tokens_left = 1;
    if (has_tokens_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tokens_left());
    }

    // optional uint32 last_request_seq = 2;
    if (has_last_request_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_request_seq());
    }

    // optional uint32 last_request_seq_from_server = 3;
    if (has_last_request_seq_from_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_request_seq_from_server());
    }

    // optional uint32 message_sequence = 6;
    if (has_message_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_sequence());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAuthList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAuthList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAuthList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientAuthList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAuthList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAuthList)
    MergeFrom(*source);
  }
}

void CMsgClientAuthList::MergeFrom(const CMsgClientAuthList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAuthList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tickets_.MergeFrom(from.tickets_);
  app_ids_.MergeFrom(from.app_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      tokens_left_ = from.tokens_left_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_request_seq_ = from.last_request_seq_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_request_seq_from_server_ = from.last_request_seq_from_server_;
    }
    if (cached_has_bits & 0x00000008u) {
      message_sequence_ = from.message_sequence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAuthList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAuthList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAuthList::CopyFrom(const CMsgClientAuthList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAuthList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAuthList::IsInitialized() const {
  return true;
}

void CMsgClientAuthList::Swap(CMsgClientAuthList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAuthList::InternalSwap(CMsgClientAuthList* other) {
  tickets_.InternalSwap(&other->tickets_);
  app_ids_.InternalSwap(&other->app_ids_);
  std::swap(tokens_left_, other->tokens_left_);
  std::swap(last_request_seq_, other->last_request_seq_);
  std::swap(last_request_seq_from_server_, other->last_request_seq_from_server_);
  std::swap(message_sequence_, other->message_sequence_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientAuthList::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientAuthList

// optional uint32 tokens_left = 1;
bool CMsgClientAuthList::has_tokens_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientAuthList::set_has_tokens_left() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientAuthList::clear_has_tokens_left() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientAuthList::clear_tokens_left() {
  tokens_left_ = 0u;
  clear_has_tokens_left();
}
::google::protobuf::uint32 CMsgClientAuthList::tokens_left() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAuthList.tokens_left)
  return tokens_left_;
}
void CMsgClientAuthList::set_tokens_left(::google::protobuf::uint32 value) {
  set_has_tokens_left();
  tokens_left_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAuthList.tokens_left)
}

// optional uint32 last_request_seq = 2;
bool CMsgClientAuthList::has_last_request_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientAuthList::set_has_last_request_seq() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientAuthList::clear_has_last_request_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientAuthList::clear_last_request_seq() {
  last_request_seq_ = 0u;
  clear_has_last_request_seq();
}
::google::protobuf::uint32 CMsgClientAuthList::last_request_seq() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAuthList.last_request_seq)
  return last_request_seq_;
}
void CMsgClientAuthList::set_last_request_seq(::google::protobuf::uint32 value) {
  set_has_last_request_seq();
  last_request_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAuthList.last_request_seq)
}

// optional uint32 last_request_seq_from_server = 3;
bool CMsgClientAuthList::has_last_request_seq_from_server() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientAuthList::set_has_last_request_seq_from_server() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientAuthList::clear_has_last_request_seq_from_server() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientAuthList::clear_last_request_seq_from_server() {
  last_request_seq_from_server_ = 0u;
  clear_has_last_request_seq_from_server();
}
::google::protobuf::uint32 CMsgClientAuthList::last_request_seq_from_server() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAuthList.last_request_seq_from_server)
  return last_request_seq_from_server_;
}
void CMsgClientAuthList::set_last_request_seq_from_server(::google::protobuf::uint32 value) {
  set_has_last_request_seq_from_server();
  last_request_seq_from_server_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAuthList.last_request_seq_from_server)
}

// repeated .proto.steam.CMsgAuthTicket tickets = 4;
int CMsgClientAuthList::tickets_size() const {
  return tickets_.size();
}
void CMsgClientAuthList::clear_tickets() {
  tickets_.Clear();
}
const ::proto::steam::CMsgAuthTicket& CMsgClientAuthList::tickets(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAuthList.tickets)
  return tickets_.Get(index);
}
::proto::steam::CMsgAuthTicket* CMsgClientAuthList::mutable_tickets(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientAuthList.tickets)
  return tickets_.Mutable(index);
}
::proto::steam::CMsgAuthTicket* CMsgClientAuthList::add_tickets() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientAuthList.tickets)
  return tickets_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgAuthTicket >*
CMsgClientAuthList::mutable_tickets() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientAuthList.tickets)
  return &tickets_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgAuthTicket >&
CMsgClientAuthList::tickets() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientAuthList.tickets)
  return tickets_;
}

// repeated uint32 app_ids = 5;
int CMsgClientAuthList::app_ids_size() const {
  return app_ids_.size();
}
void CMsgClientAuthList::clear_app_ids() {
  app_ids_.Clear();
}
::google::protobuf::uint32 CMsgClientAuthList::app_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAuthList.app_ids)
  return app_ids_.Get(index);
}
void CMsgClientAuthList::set_app_ids(int index, ::google::protobuf::uint32 value) {
  app_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAuthList.app_ids)
}
void CMsgClientAuthList::add_app_ids(::google::protobuf::uint32 value) {
  app_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientAuthList.app_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientAuthList::app_ids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientAuthList.app_ids)
  return app_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientAuthList::mutable_app_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientAuthList.app_ids)
  return &app_ids_;
}

// optional uint32 message_sequence = 6;
bool CMsgClientAuthList::has_message_sequence() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientAuthList::set_has_message_sequence() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientAuthList::clear_has_message_sequence() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientAuthList::clear_message_sequence() {
  message_sequence_ = 0u;
  clear_has_message_sequence();
}
::google::protobuf::uint32 CMsgClientAuthList::message_sequence() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAuthList.message_sequence)
  return message_sequence_;
}
void CMsgClientAuthList::set_message_sequence(::google::protobuf::uint32 value) {
  set_has_message_sequence();
  message_sequence_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAuthList.message_sequence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAuthListAck::kTicketCrcFieldNumber;
const int CMsgClientAuthListAck::kAppIdsFieldNumber;
const int CMsgClientAuthListAck::kMessageSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAuthListAck::CMsgClientAuthListAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAuthListAck)
}
CMsgClientAuthListAck::CMsgClientAuthListAck(const CMsgClientAuthListAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ticket_crc_(from.ticket_crc_),
      app_ids_(from.app_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_sequence_ = from.message_sequence_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAuthListAck)
}

void CMsgClientAuthListAck::SharedCtor() {
  _cached_size_ = 0;
  message_sequence_ = 0u;
}

CMsgClientAuthListAck::~CMsgClientAuthListAck() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAuthListAck)
  SharedDtor();
}

void CMsgClientAuthListAck::SharedDtor() {
}

void CMsgClientAuthListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAuthListAck::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientAuthListAck& CMsgClientAuthListAck::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientAuthListAck* CMsgClientAuthListAck::New(::google::protobuf::Arena* arena) const {
  CMsgClientAuthListAck* n = new CMsgClientAuthListAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientAuthListAck::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAuthListAck)
  ticket_crc_.Clear();
  app_ids_.Clear();
  message_sequence_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientAuthListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAuthListAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ticket_crc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_ticket_crc())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ticket_crc())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 app_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_app_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_app_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 message_sequence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_message_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAuthListAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAuthListAck)
  return false;
#undef DO_
}

void CMsgClientAuthListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAuthListAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 ticket_crc = 1;
  for (int i = 0, n = this->ticket_crc_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->ticket_crc(i), output);
  }

  // repeated uint32 app_ids = 2;
  for (int i = 0, n = this->app_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->app_ids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 message_sequence = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->message_sequence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAuthListAck)
}

::google::protobuf::uint8* CMsgClientAuthListAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAuthListAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 ticket_crc = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->ticket_crc_, target);

  // repeated uint32 app_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->app_ids_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 message_sequence = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->message_sequence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAuthListAck)
  return target;
}

size_t CMsgClientAuthListAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAuthListAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 ticket_crc = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ticket_crc_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ticket_crc_size());
    total_size += data_size;
  }

  // repeated uint32 app_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->app_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->app_ids_size());
    total_size += data_size;
  }

  // optional uint32 message_sequence = 3;
  if (has_message_sequence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->message_sequence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAuthListAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAuthListAck)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAuthListAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientAuthListAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAuthListAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAuthListAck)
    MergeFrom(*source);
  }
}

void CMsgClientAuthListAck::MergeFrom(const CMsgClientAuthListAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAuthListAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ticket_crc_.MergeFrom(from.ticket_crc_);
  app_ids_.MergeFrom(from.app_ids_);
  if (from.has_message_sequence()) {
    set_message_sequence(from.message_sequence());
  }
}

void CMsgClientAuthListAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAuthListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAuthListAck::CopyFrom(const CMsgClientAuthListAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAuthListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAuthListAck::IsInitialized() const {
  return true;
}

void CMsgClientAuthListAck::Swap(CMsgClientAuthListAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAuthListAck::InternalSwap(CMsgClientAuthListAck* other) {
  ticket_crc_.InternalSwap(&other->ticket_crc_);
  app_ids_.InternalSwap(&other->app_ids_);
  std::swap(message_sequence_, other->message_sequence_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientAuthListAck::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientAuthListAck

// repeated uint32 ticket_crc = 1;
int CMsgClientAuthListAck::ticket_crc_size() const {
  return ticket_crc_.size();
}
void CMsgClientAuthListAck::clear_ticket_crc() {
  ticket_crc_.Clear();
}
::google::protobuf::uint32 CMsgClientAuthListAck::ticket_crc(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAuthListAck.ticket_crc)
  return ticket_crc_.Get(index);
}
void CMsgClientAuthListAck::set_ticket_crc(int index, ::google::protobuf::uint32 value) {
  ticket_crc_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAuthListAck.ticket_crc)
}
void CMsgClientAuthListAck::add_ticket_crc(::google::protobuf::uint32 value) {
  ticket_crc_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientAuthListAck.ticket_crc)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientAuthListAck::ticket_crc() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientAuthListAck.ticket_crc)
  return ticket_crc_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientAuthListAck::mutable_ticket_crc() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientAuthListAck.ticket_crc)
  return &ticket_crc_;
}

// repeated uint32 app_ids = 2;
int CMsgClientAuthListAck::app_ids_size() const {
  return app_ids_.size();
}
void CMsgClientAuthListAck::clear_app_ids() {
  app_ids_.Clear();
}
::google::protobuf::uint32 CMsgClientAuthListAck::app_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAuthListAck.app_ids)
  return app_ids_.Get(index);
}
void CMsgClientAuthListAck::set_app_ids(int index, ::google::protobuf::uint32 value) {
  app_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAuthListAck.app_ids)
}
void CMsgClientAuthListAck::add_app_ids(::google::protobuf::uint32 value) {
  app_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientAuthListAck.app_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientAuthListAck::app_ids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientAuthListAck.app_ids)
  return app_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientAuthListAck::mutable_app_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientAuthListAck.app_ids)
  return &app_ids_;
}

// optional uint32 message_sequence = 3;
bool CMsgClientAuthListAck::has_message_sequence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientAuthListAck::set_has_message_sequence() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientAuthListAck::clear_has_message_sequence() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientAuthListAck::clear_message_sequence() {
  message_sequence_ = 0u;
  clear_has_message_sequence();
}
::google::protobuf::uint32 CMsgClientAuthListAck::message_sequence() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAuthListAck.message_sequence)
  return message_sequence_;
}
void CMsgClientAuthListAck::set_message_sequence(::google::protobuf::uint32 value) {
  set_has_message_sequence();
  message_sequence_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAuthListAck.message_sequence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLicenseList_License::kPackageIdFieldNumber;
const int CMsgClientLicenseList_License::kTimeCreatedFieldNumber;
const int CMsgClientLicenseList_License::kTimeNextProcessFieldNumber;
const int CMsgClientLicenseList_License::kMinuteLimitFieldNumber;
const int CMsgClientLicenseList_License::kMinutesUsedFieldNumber;
const int CMsgClientLicenseList_License::kPaymentMethodFieldNumber;
const int CMsgClientLicenseList_License::kFlagsFieldNumber;
const int CMsgClientLicenseList_License::kPurchaseCountryCodeFieldNumber;
const int CMsgClientLicenseList_License::kLicenseTypeFieldNumber;
const int CMsgClientLicenseList_License::kTerritoryCodeFieldNumber;
const int CMsgClientLicenseList_License::kChangeNumberFieldNumber;
const int CMsgClientLicenseList_License::kOwnerIdFieldNumber;
const int CMsgClientLicenseList_License::kInitialPeriodFieldNumber;
const int CMsgClientLicenseList_License::kInitialTimeUnitFieldNumber;
const int CMsgClientLicenseList_License::kRenewalPeriodFieldNumber;
const int CMsgClientLicenseList_License::kRenewalTimeUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLicenseList_License::CMsgClientLicenseList_License()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLicenseList.License)
}
CMsgClientLicenseList_License::CMsgClientLicenseList_License(const CMsgClientLicenseList_License& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  purchase_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_purchase_country_code()) {
    purchase_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.purchase_country_code_);
  }
  ::memcpy(&package_id_, &from.package_id_,
    reinterpret_cast<char*>(&renewal_time_unit_) -
    reinterpret_cast<char*>(&package_id_) + sizeof(renewal_time_unit_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLicenseList.License)
}

void CMsgClientLicenseList_License::SharedCtor() {
  _cached_size_ = 0;
  purchase_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&package_id_, 0, reinterpret_cast<char*>(&renewal_time_unit_) -
    reinterpret_cast<char*>(&package_id_) + sizeof(renewal_time_unit_));
}

CMsgClientLicenseList_License::~CMsgClientLicenseList_License() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLicenseList.License)
  SharedDtor();
}

void CMsgClientLicenseList_License::SharedDtor() {
  purchase_country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLicenseList_License::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLicenseList_License::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientLicenseList_License& CMsgClientLicenseList_License::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientLicenseList_License* CMsgClientLicenseList_License::New(::google::protobuf::Arena* arena) const {
  CMsgClientLicenseList_License* n = new CMsgClientLicenseList_License;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientLicenseList_License::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLicenseList.License)
  if (has_purchase_country_code()) {
    GOOGLE_DCHECK(!purchase_country_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*purchase_country_code_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&package_id_, 0, reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&package_id_) + sizeof(flags_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&license_type_, 0, reinterpret_cast<char*>(&renewal_time_unit_) -
      reinterpret_cast<char*>(&license_type_) + sizeof(renewal_time_unit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientLicenseList_License::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLicenseList.License)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 package_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_package_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 time_created = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_time_created();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 time_next_process = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_time_next_process();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_next_process_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minute_limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_minute_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minute_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minutes_used = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_minutes_used();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minutes_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 payment_method = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_payment_method();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payment_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string purchase_country_code = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_purchase_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->purchase_country_code().data(), this->purchase_country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLicenseList.License.purchase_country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 license_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_license_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &license_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 territory_code = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_territory_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &territory_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 change_number = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_change_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_owner_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 initial_period = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_initial_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 initial_time_unit = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_initial_time_unit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_time_unit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 renewal_period = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_renewal_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &renewal_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 renewal_time_unit = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_renewal_time_unit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &renewal_time_unit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLicenseList.License)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLicenseList.License)
  return false;
#undef DO_
}

void CMsgClientLicenseList_License::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLicenseList.License)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 package_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->package_id(), output);
  }

  // optional fixed32 time_created = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->time_created(), output);
  }

  // optional fixed32 time_next_process = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->time_next_process(), output);
  }

  // optional int32 minute_limit = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->minute_limit(), output);
  }

  // optional int32 minutes_used = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->minutes_used(), output);
  }

  // optional uint32 payment_method = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->payment_method(), output);
  }

  // optional uint32 flags = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->flags(), output);
  }

  // optional string purchase_country_code = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->purchase_country_code().data(), this->purchase_country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLicenseList.License.purchase_country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->purchase_country_code(), output);
  }

  // optional uint32 license_type = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->license_type(), output);
  }

  // optional int32 territory_code = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->territory_code(), output);
  }

  // optional int32 change_number = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->change_number(), output);
  }

  // optional uint32 owner_id = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->owner_id(), output);
  }

  // optional uint32 initial_period = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->initial_period(), output);
  }

  // optional uint32 initial_time_unit = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->initial_time_unit(), output);
  }

  // optional uint32 renewal_period = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->renewal_period(), output);
  }

  // optional uint32 renewal_time_unit = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->renewal_time_unit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLicenseList.License)
}

::google::protobuf::uint8* CMsgClientLicenseList_License::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLicenseList.License)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 package_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->package_id(), target);
  }

  // optional fixed32 time_created = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->time_created(), target);
  }

  // optional fixed32 time_next_process = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->time_next_process(), target);
  }

  // optional int32 minute_limit = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->minute_limit(), target);
  }

  // optional int32 minutes_used = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->minutes_used(), target);
  }

  // optional uint32 payment_method = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->payment_method(), target);
  }

  // optional uint32 flags = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->flags(), target);
  }

  // optional string purchase_country_code = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->purchase_country_code().data(), this->purchase_country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLicenseList.License.purchase_country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->purchase_country_code(), target);
  }

  // optional uint32 license_type = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->license_type(), target);
  }

  // optional int32 territory_code = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->territory_code(), target);
  }

  // optional int32 change_number = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->change_number(), target);
  }

  // optional uint32 owner_id = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->owner_id(), target);
  }

  // optional uint32 initial_period = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->initial_period(), target);
  }

  // optional uint32 initial_time_unit = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->initial_time_unit(), target);
  }

  // optional uint32 renewal_period = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->renewal_period(), target);
  }

  // optional uint32 renewal_time_unit = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->renewal_time_unit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLicenseList.License)
  return target;
}

size_t CMsgClientLicenseList_License::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLicenseList.License)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string purchase_country_code = 8;
    if (has_purchase_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->purchase_country_code());
    }

    // optional uint32 package_id = 1;
    if (has_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_id());
    }

    // optional fixed32 time_created = 2;
    if (has_time_created()) {
      total_size += 1 + 4;
    }

    // optional fixed32 time_next_process = 3;
    if (has_time_next_process()) {
      total_size += 1 + 4;
    }

    // optional int32 minute_limit = 4;
    if (has_minute_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minute_limit());
    }

    // optional int32 minutes_used = 5;
    if (has_minutes_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minutes_used());
    }

    // optional uint32 payment_method = 6;
    if (has_payment_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->payment_method());
    }

    // optional uint32 flags = 7;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 license_type = 9;
    if (has_license_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->license_type());
    }

    // optional int32 territory_code = 10;
    if (has_territory_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->territory_code());
    }

    // optional int32 change_number = 11;
    if (has_change_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_number());
    }

    // optional uint32 owner_id = 12;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_id());
    }

    // optional uint32 initial_period = 13;
    if (has_initial_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_period());
    }

    // optional uint32 initial_time_unit = 14;
    if (has_initial_time_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_time_unit());
    }

    // optional uint32 renewal_period = 15;
    if (has_renewal_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->renewal_period());
    }

    // optional uint32 renewal_time_unit = 16;
    if (has_renewal_time_unit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->renewal_time_unit());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLicenseList_License::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLicenseList.License)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLicenseList_License* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientLicenseList_License>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLicenseList.License)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLicenseList.License)
    MergeFrom(*source);
  }
}

void CMsgClientLicenseList_License::MergeFrom(const CMsgClientLicenseList_License& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLicenseList.License)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_purchase_country_code();
      purchase_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.purchase_country_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      package_id_ = from.package_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_next_process_ = from.time_next_process_;
    }
    if (cached_has_bits & 0x00000010u) {
      minute_limit_ = from.minute_limit_;
    }
    if (cached_has_bits & 0x00000020u) {
      minutes_used_ = from.minutes_used_;
    }
    if (cached_has_bits & 0x00000040u) {
      payment_method_ = from.payment_method_;
    }
    if (cached_has_bits & 0x00000080u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      license_type_ = from.license_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      territory_code_ = from.territory_code_;
    }
    if (cached_has_bits & 0x00000400u) {
      change_number_ = from.change_number_;
    }
    if (cached_has_bits & 0x00000800u) {
      owner_id_ = from.owner_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      initial_period_ = from.initial_period_;
    }
    if (cached_has_bits & 0x00002000u) {
      initial_time_unit_ = from.initial_time_unit_;
    }
    if (cached_has_bits & 0x00004000u) {
      renewal_period_ = from.renewal_period_;
    }
    if (cached_has_bits & 0x00008000u) {
      renewal_time_unit_ = from.renewal_time_unit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLicenseList_License::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLicenseList.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLicenseList_License::CopyFrom(const CMsgClientLicenseList_License& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLicenseList.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLicenseList_License::IsInitialized() const {
  return true;
}

void CMsgClientLicenseList_License::Swap(CMsgClientLicenseList_License* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLicenseList_License::InternalSwap(CMsgClientLicenseList_License* other) {
  purchase_country_code_.Swap(&other->purchase_country_code_);
  std::swap(package_id_, other->package_id_);
  std::swap(time_created_, other->time_created_);
  std::swap(time_next_process_, other->time_next_process_);
  std::swap(minute_limit_, other->minute_limit_);
  std::swap(minutes_used_, other->minutes_used_);
  std::swap(payment_method_, other->payment_method_);
  std::swap(flags_, other->flags_);
  std::swap(license_type_, other->license_type_);
  std::swap(territory_code_, other->territory_code_);
  std::swap(change_number_, other->change_number_);
  std::swap(owner_id_, other->owner_id_);
  std::swap(initial_period_, other->initial_period_);
  std::swap(initial_time_unit_, other->initial_time_unit_);
  std::swap(renewal_period_, other->renewal_period_);
  std::swap(renewal_time_unit_, other->renewal_time_unit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientLicenseList_License::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientLicenseList_License

// optional uint32 package_id = 1;
bool CMsgClientLicenseList_License::has_package_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientLicenseList_License::set_has_package_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientLicenseList_License::clear_has_package_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientLicenseList_License::clear_package_id() {
  package_id_ = 0u;
  clear_has_package_id();
}
::google::protobuf::uint32 CMsgClientLicenseList_License::package_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLicenseList.License.package_id)
  return package_id_;
}
void CMsgClientLicenseList_License::set_package_id(::google::protobuf::uint32 value) {
  set_has_package_id();
  package_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLicenseList.License.package_id)
}

// optional fixed32 time_created = 2;
bool CMsgClientLicenseList_License::has_time_created() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientLicenseList_License::set_has_time_created() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientLicenseList_License::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientLicenseList_License::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
::google::protobuf::uint32 CMsgClientLicenseList_License::time_created() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLicenseList.License.time_created)
  return time_created_;
}
void CMsgClientLicenseList_License::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLicenseList.License.time_created)
}

// optional fixed32 time_next_process = 3;
bool CMsgClientLicenseList_License::has_time_next_process() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientLicenseList_License::set_has_time_next_process() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientLicenseList_License::clear_has_time_next_process() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientLicenseList_License::clear_time_next_process() {
  time_next_process_ = 0u;
  clear_has_time_next_process();
}
::google::protobuf::uint32 CMsgClientLicenseList_License::time_next_process() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLicenseList.License.time_next_process)
  return time_next_process_;
}
void CMsgClientLicenseList_License::set_time_next_process(::google::protobuf::uint32 value) {
  set_has_time_next_process();
  time_next_process_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLicenseList.License.time_next_process)
}

// optional int32 minute_limit = 4;
bool CMsgClientLicenseList_License::has_minute_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientLicenseList_License::set_has_minute_limit() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientLicenseList_License::clear_has_minute_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientLicenseList_License::clear_minute_limit() {
  minute_limit_ = 0;
  clear_has_minute_limit();
}
::google::protobuf::int32 CMsgClientLicenseList_License::minute_limit() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLicenseList.License.minute_limit)
  return minute_limit_;
}
void CMsgClientLicenseList_License::set_minute_limit(::google::protobuf::int32 value) {
  set_has_minute_limit();
  minute_limit_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLicenseList.License.minute_limit)
}

// optional int32 minutes_used = 5;
bool CMsgClientLicenseList_License::has_minutes_used() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientLicenseList_License::set_has_minutes_used() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientLicenseList_License::clear_has_minutes_used() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientLicenseList_License::clear_minutes_used() {
  minutes_used_ = 0;
  clear_has_minutes_used();
}
::google::protobuf::int32 CMsgClientLicenseList_License::minutes_used() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLicenseList.License.minutes_used)
  return minutes_used_;
}
void CMsgClientLicenseList_License::set_minutes_used(::google::protobuf::int32 value) {
  set_has_minutes_used();
  minutes_used_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLicenseList.License.minutes_used)
}

// optional uint32 payment_method = 6;
bool CMsgClientLicenseList_License::has_payment_method() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientLicenseList_License::set_has_payment_method() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientLicenseList_License::clear_has_payment_method() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientLicenseList_License::clear_payment_method() {
  payment_method_ = 0u;
  clear_has_payment_method();
}
::google::protobuf::uint32 CMsgClientLicenseList_License::payment_method() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLicenseList.License.payment_method)
  return payment_method_;
}
void CMsgClientLicenseList_License::set_payment_method(::google::protobuf::uint32 value) {
  set_has_payment_method();
  payment_method_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLicenseList.License.payment_method)
}

// optional uint32 flags = 7;
bool CMsgClientLicenseList_License::has_flags() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgClientLicenseList_License::set_has_flags() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgClientLicenseList_License::clear_has_flags() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgClientLicenseList_License::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 CMsgClientLicenseList_License::flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLicenseList.License.flags)
  return flags_;
}
void CMsgClientLicenseList_License::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLicenseList.License.flags)
}

// optional string purchase_country_code = 8;
bool CMsgClientLicenseList_License::has_purchase_country_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientLicenseList_License::set_has_purchase_country_code() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientLicenseList_License::clear_has_purchase_country_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientLicenseList_License::clear_purchase_country_code() {
  purchase_country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_purchase_country_code();
}
const ::std::string& CMsgClientLicenseList_License::purchase_country_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLicenseList.License.purchase_country_code)
  return purchase_country_code_.GetNoArena();
}
void CMsgClientLicenseList_License::set_purchase_country_code(const ::std::string& value) {
  set_has_purchase_country_code();
  purchase_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLicenseList.License.purchase_country_code)
}
#if LANG_CXX11
void CMsgClientLicenseList_License::set_purchase_country_code(::std::string&& value) {
  set_has_purchase_country_code();
  purchase_country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLicenseList.License.purchase_country_code)
}
#endif
void CMsgClientLicenseList_License::set_purchase_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_purchase_country_code();
  purchase_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLicenseList.License.purchase_country_code)
}
void CMsgClientLicenseList_License::set_purchase_country_code(const char* value, size_t size) {
  set_has_purchase_country_code();
  purchase_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLicenseList.License.purchase_country_code)
}
::std::string* CMsgClientLicenseList_License::mutable_purchase_country_code() {
  set_has_purchase_country_code();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLicenseList.License.purchase_country_code)
  return purchase_country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLicenseList_License::release_purchase_country_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLicenseList.License.purchase_country_code)
  clear_has_purchase_country_code();
  return purchase_country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLicenseList_License::set_allocated_purchase_country_code(::std::string* purchase_country_code) {
  if (purchase_country_code != NULL) {
    set_has_purchase_country_code();
  } else {
    clear_has_purchase_country_code();
  }
  purchase_country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), purchase_country_code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLicenseList.License.purchase_country_code)
}

// optional uint32 license_type = 9;
bool CMsgClientLicenseList_License::has_license_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgClientLicenseList_License::set_has_license_type() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgClientLicenseList_License::clear_has_license_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgClientLicenseList_License::clear_license_type() {
  license_type_ = 0u;
  clear_has_license_type();
}
::google::protobuf::uint32 CMsgClientLicenseList_License::license_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLicenseList.License.license_type)
  return license_type_;
}
void CMsgClientLicenseList_License::set_license_type(::google::protobuf::uint32 value) {
  set_has_license_type();
  license_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLicenseList.License.license_type)
}

// optional int32 territory_code = 10;
bool CMsgClientLicenseList_License::has_territory_code() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgClientLicenseList_License::set_has_territory_code() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgClientLicenseList_License::clear_has_territory_code() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgClientLicenseList_License::clear_territory_code() {
  territory_code_ = 0;
  clear_has_territory_code();
}
::google::protobuf::int32 CMsgClientLicenseList_License::territory_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLicenseList.License.territory_code)
  return territory_code_;
}
void CMsgClientLicenseList_License::set_territory_code(::google::protobuf::int32 value) {
  set_has_territory_code();
  territory_code_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLicenseList.License.territory_code)
}

// optional int32 change_number = 11;
bool CMsgClientLicenseList_License::has_change_number() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgClientLicenseList_License::set_has_change_number() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgClientLicenseList_License::clear_has_change_number() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgClientLicenseList_License::clear_change_number() {
  change_number_ = 0;
  clear_has_change_number();
}
::google::protobuf::int32 CMsgClientLicenseList_License::change_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLicenseList.License.change_number)
  return change_number_;
}
void CMsgClientLicenseList_License::set_change_number(::google::protobuf::int32 value) {
  set_has_change_number();
  change_number_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLicenseList.License.change_number)
}

// optional uint32 owner_id = 12;
bool CMsgClientLicenseList_License::has_owner_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgClientLicenseList_License::set_has_owner_id() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgClientLicenseList_License::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgClientLicenseList_License::clear_owner_id() {
  owner_id_ = 0u;
  clear_has_owner_id();
}
::google::protobuf::uint32 CMsgClientLicenseList_License::owner_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLicenseList.License.owner_id)
  return owner_id_;
}
void CMsgClientLicenseList_License::set_owner_id(::google::protobuf::uint32 value) {
  set_has_owner_id();
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLicenseList.License.owner_id)
}

// optional uint32 initial_period = 13;
bool CMsgClientLicenseList_License::has_initial_period() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgClientLicenseList_License::set_has_initial_period() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgClientLicenseList_License::clear_has_initial_period() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgClientLicenseList_License::clear_initial_period() {
  initial_period_ = 0u;
  clear_has_initial_period();
}
::google::protobuf::uint32 CMsgClientLicenseList_License::initial_period() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLicenseList.License.initial_period)
  return initial_period_;
}
void CMsgClientLicenseList_License::set_initial_period(::google::protobuf::uint32 value) {
  set_has_initial_period();
  initial_period_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLicenseList.License.initial_period)
}

// optional uint32 initial_time_unit = 14;
bool CMsgClientLicenseList_License::has_initial_time_unit() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgClientLicenseList_License::set_has_initial_time_unit() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgClientLicenseList_License::clear_has_initial_time_unit() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgClientLicenseList_License::clear_initial_time_unit() {
  initial_time_unit_ = 0u;
  clear_has_initial_time_unit();
}
::google::protobuf::uint32 CMsgClientLicenseList_License::initial_time_unit() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLicenseList.License.initial_time_unit)
  return initial_time_unit_;
}
void CMsgClientLicenseList_License::set_initial_time_unit(::google::protobuf::uint32 value) {
  set_has_initial_time_unit();
  initial_time_unit_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLicenseList.License.initial_time_unit)
}

// optional uint32 renewal_period = 15;
bool CMsgClientLicenseList_License::has_renewal_period() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgClientLicenseList_License::set_has_renewal_period() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgClientLicenseList_License::clear_has_renewal_period() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgClientLicenseList_License::clear_renewal_period() {
  renewal_period_ = 0u;
  clear_has_renewal_period();
}
::google::protobuf::uint32 CMsgClientLicenseList_License::renewal_period() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLicenseList.License.renewal_period)
  return renewal_period_;
}
void CMsgClientLicenseList_License::set_renewal_period(::google::protobuf::uint32 value) {
  set_has_renewal_period();
  renewal_period_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLicenseList.License.renewal_period)
}

// optional uint32 renewal_time_unit = 16;
bool CMsgClientLicenseList_License::has_renewal_time_unit() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgClientLicenseList_License::set_has_renewal_time_unit() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgClientLicenseList_License::clear_has_renewal_time_unit() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgClientLicenseList_License::clear_renewal_time_unit() {
  renewal_time_unit_ = 0u;
  clear_has_renewal_time_unit();
}
::google::protobuf::uint32 CMsgClientLicenseList_License::renewal_time_unit() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLicenseList.License.renewal_time_unit)
  return renewal_time_unit_;
}
void CMsgClientLicenseList_License::set_renewal_time_unit(::google::protobuf::uint32 value) {
  set_has_renewal_time_unit();
  renewal_time_unit_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLicenseList.License.renewal_time_unit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLicenseList::kEresultFieldNumber;
const int CMsgClientLicenseList::kLicensesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLicenseList::CMsgClientLicenseList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLicenseList)
}
CMsgClientLicenseList::CMsgClientLicenseList(const CMsgClientLicenseList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      licenses_(from.licenses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLicenseList)
}

void CMsgClientLicenseList::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
}

CMsgClientLicenseList::~CMsgClientLicenseList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLicenseList)
  SharedDtor();
}

void CMsgClientLicenseList::SharedDtor() {
}

void CMsgClientLicenseList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLicenseList::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientLicenseList& CMsgClientLicenseList::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientLicenseList* CMsgClientLicenseList::New(::google::protobuf::Arena* arena) const {
  CMsgClientLicenseList* n = new CMsgClientLicenseList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientLicenseList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLicenseList)
  licenses_.Clear();
  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientLicenseList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLicenseList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientLicenseList.License licenses = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_licenses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLicenseList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLicenseList)
  return false;
#undef DO_
}

void CMsgClientLicenseList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLicenseList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // repeated .proto.steam.CMsgClientLicenseList.License licenses = 2;
  for (unsigned int i = 0, n = this->licenses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->licenses(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLicenseList)
}

::google::protobuf::uint8* CMsgClientLicenseList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLicenseList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // repeated .proto.steam.CMsgClientLicenseList.License licenses = 2;
  for (unsigned int i = 0, n = this->licenses_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->licenses(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLicenseList)
  return target;
}

size_t CMsgClientLicenseList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLicenseList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientLicenseList.License licenses = 2;
  {
    unsigned int count = this->licenses_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->licenses(i));
    }
  }

  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLicenseList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLicenseList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLicenseList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientLicenseList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLicenseList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLicenseList)
    MergeFrom(*source);
  }
}

void CMsgClientLicenseList::MergeFrom(const CMsgClientLicenseList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLicenseList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  licenses_.MergeFrom(from.licenses_);
  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgClientLicenseList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLicenseList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLicenseList::CopyFrom(const CMsgClientLicenseList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLicenseList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLicenseList::IsInitialized() const {
  return true;
}

void CMsgClientLicenseList::Swap(CMsgClientLicenseList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLicenseList::InternalSwap(CMsgClientLicenseList* other) {
  licenses_.InternalSwap(&other->licenses_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientLicenseList::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientLicenseList

// optional int32 eresult = 1 [default = 2];
bool CMsgClientLicenseList::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientLicenseList::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientLicenseList::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientLicenseList::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientLicenseList::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLicenseList.eresult)
  return eresult_;
}
void CMsgClientLicenseList::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLicenseList.eresult)
}

// repeated .proto.steam.CMsgClientLicenseList.License licenses = 2;
int CMsgClientLicenseList::licenses_size() const {
  return licenses_.size();
}
void CMsgClientLicenseList::clear_licenses() {
  licenses_.Clear();
}
const ::proto::steam::CMsgClientLicenseList_License& CMsgClientLicenseList::licenses(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLicenseList.licenses)
  return licenses_.Get(index);
}
::proto::steam::CMsgClientLicenseList_License* CMsgClientLicenseList::mutable_licenses(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLicenseList.licenses)
  return licenses_.Mutable(index);
}
::proto::steam::CMsgClientLicenseList_License* CMsgClientLicenseList::add_licenses() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientLicenseList.licenses)
  return licenses_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientLicenseList_License >*
CMsgClientLicenseList::mutable_licenses() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientLicenseList.licenses)
  return &licenses_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientLicenseList_License >&
CMsgClientLicenseList::licenses() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientLicenseList.licenses)
  return licenses_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLBSSetScore::kAppIdFieldNumber;
const int CMsgClientLBSSetScore::kLeaderboardIdFieldNumber;
const int CMsgClientLBSSetScore::kScoreFieldNumber;
const int CMsgClientLBSSetScore::kDetailsFieldNumber;
const int CMsgClientLBSSetScore::kUploadScoreMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLBSSetScore::CMsgClientLBSSetScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLBSSetScore)
}
CMsgClientLBSSetScore::CMsgClientLBSSetScore(const CMsgClientLBSSetScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_details()) {
    details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.details_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&upload_score_method_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(upload_score_method_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLBSSetScore)
}

void CMsgClientLBSSetScore::SharedCtor() {
  _cached_size_ = 0;
  details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&upload_score_method_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(upload_score_method_));
}

CMsgClientLBSSetScore::~CMsgClientLBSSetScore() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLBSSetScore)
  SharedDtor();
}

void CMsgClientLBSSetScore::SharedDtor() {
  details_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLBSSetScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLBSSetScore::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientLBSSetScore& CMsgClientLBSSetScore::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientLBSSetScore* CMsgClientLBSSetScore::New(::google::protobuf::Arena* arena) const {
  CMsgClientLBSSetScore* n = new CMsgClientLBSSetScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientLBSSetScore::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLBSSetScore)
  if (has_details()) {
    GOOGLE_DCHECK(!details_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*details_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&upload_score_method_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(upload_score_method_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientLBSSetScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLBSSetScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_leaderboard_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes details = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 upload_score_method = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_upload_score_method();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upload_score_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLBSSetScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLBSSetScore)
  return false;
#undef DO_
}

void CMsgClientLBSSetScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLBSSetScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 leaderboard_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderboard_id(), output);
  }

  // optional int32 score = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // optional bytes details = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->details(), output);
  }

  // optional int32 upload_score_method = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->upload_score_method(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLBSSetScore)
}

::google::protobuf::uint8* CMsgClientLBSSetScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLBSSetScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional int32 leaderboard_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leaderboard_id(), target);
  }

  // optional int32 score = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  // optional bytes details = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->details(), target);
  }

  // optional int32 upload_score_method = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->upload_score_method(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLBSSetScore)
  return target;
}

size_t CMsgClientLBSSetScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLBSSetScore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes details = 4;
    if (has_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->details());
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 leaderboard_id = 2;
    if (has_leaderboard_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_id());
    }

    // optional int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 upload_score_method = 5;
    if (has_upload_score_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upload_score_method());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLBSSetScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLBSSetScore)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLBSSetScore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientLBSSetScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLBSSetScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLBSSetScore)
    MergeFrom(*source);
  }
}

void CMsgClientLBSSetScore::MergeFrom(const CMsgClientLBSSetScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLBSSetScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_details();
      details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.details_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      leaderboard_id_ = from.leaderboard_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000010u) {
      upload_score_method_ = from.upload_score_method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLBSSetScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLBSSetScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLBSSetScore::CopyFrom(const CMsgClientLBSSetScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLBSSetScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSSetScore::IsInitialized() const {
  return true;
}

void CMsgClientLBSSetScore::Swap(CMsgClientLBSSetScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLBSSetScore::InternalSwap(CMsgClientLBSSetScore* other) {
  details_.Swap(&other->details_);
  std::swap(app_id_, other->app_id_);
  std::swap(leaderboard_id_, other->leaderboard_id_);
  std::swap(score_, other->score_);
  std::swap(upload_score_method_, other->upload_score_method_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientLBSSetScore::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientLBSSetScore

// optional uint32 app_id = 1;
bool CMsgClientLBSSetScore::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientLBSSetScore::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientLBSSetScore::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientLBSSetScore::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientLBSSetScore::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSSetScore.app_id)
  return app_id_;
}
void CMsgClientLBSSetScore::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSSetScore.app_id)
}

// optional int32 leaderboard_id = 2;
bool CMsgClientLBSSetScore::has_leaderboard_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientLBSSetScore::set_has_leaderboard_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientLBSSetScore::clear_has_leaderboard_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientLBSSetScore::clear_leaderboard_id() {
  leaderboard_id_ = 0;
  clear_has_leaderboard_id();
}
::google::protobuf::int32 CMsgClientLBSSetScore::leaderboard_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSSetScore.leaderboard_id)
  return leaderboard_id_;
}
void CMsgClientLBSSetScore::set_leaderboard_id(::google::protobuf::int32 value) {
  set_has_leaderboard_id();
  leaderboard_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSSetScore.leaderboard_id)
}

// optional int32 score = 3;
bool CMsgClientLBSSetScore::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientLBSSetScore::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientLBSSetScore::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientLBSSetScore::clear_score() {
  score_ = 0;
  clear_has_score();
}
::google::protobuf::int32 CMsgClientLBSSetScore::score() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSSetScore.score)
  return score_;
}
void CMsgClientLBSSetScore::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSSetScore.score)
}

// optional bytes details = 4;
bool CMsgClientLBSSetScore::has_details() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientLBSSetScore::set_has_details() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientLBSSetScore::clear_has_details() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientLBSSetScore::clear_details() {
  details_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_details();
}
const ::std::string& CMsgClientLBSSetScore::details() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSSetScore.details)
  return details_.GetNoArena();
}
void CMsgClientLBSSetScore::set_details(const ::std::string& value) {
  set_has_details();
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSSetScore.details)
}
#if LANG_CXX11
void CMsgClientLBSSetScore::set_details(::std::string&& value) {
  set_has_details();
  details_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLBSSetScore.details)
}
#endif
void CMsgClientLBSSetScore::set_details(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_details();
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLBSSetScore.details)
}
void CMsgClientLBSSetScore::set_details(const void* value, size_t size) {
  set_has_details();
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLBSSetScore.details)
}
::std::string* CMsgClientLBSSetScore::mutable_details() {
  set_has_details();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLBSSetScore.details)
  return details_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLBSSetScore::release_details() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLBSSetScore.details)
  clear_has_details();
  return details_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLBSSetScore::set_allocated_details(::std::string* details) {
  if (details != NULL) {
    set_has_details();
  } else {
    clear_has_details();
  }
  details_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), details);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLBSSetScore.details)
}

// optional int32 upload_score_method = 5;
bool CMsgClientLBSSetScore::has_upload_score_method() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientLBSSetScore::set_has_upload_score_method() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientLBSSetScore::clear_has_upload_score_method() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientLBSSetScore::clear_upload_score_method() {
  upload_score_method_ = 0;
  clear_has_upload_score_method();
}
::google::protobuf::int32 CMsgClientLBSSetScore::upload_score_method() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSSetScore.upload_score_method)
  return upload_score_method_;
}
void CMsgClientLBSSetScore::set_upload_score_method(::google::protobuf::int32 value) {
  set_has_upload_score_method();
  upload_score_method_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSSetScore.upload_score_method)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLBSSetScoreResponse::kEresultFieldNumber;
const int CMsgClientLBSSetScoreResponse::kLeaderboardEntryCountFieldNumber;
const int CMsgClientLBSSetScoreResponse::kScoreChangedFieldNumber;
const int CMsgClientLBSSetScoreResponse::kGlobalRankPreviousFieldNumber;
const int CMsgClientLBSSetScoreResponse::kGlobalRankNewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLBSSetScoreResponse::CMsgClientLBSSetScoreResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLBSSetScoreResponse)
}
CMsgClientLBSSetScoreResponse::CMsgClientLBSSetScoreResponse(const CMsgClientLBSSetScoreResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&leaderboard_entry_count_, &from.leaderboard_entry_count_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&leaderboard_entry_count_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLBSSetScoreResponse)
}

void CMsgClientLBSSetScoreResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&leaderboard_entry_count_, 0, reinterpret_cast<char*>(&global_rank_new_) -
    reinterpret_cast<char*>(&leaderboard_entry_count_) + sizeof(global_rank_new_));
  eresult_ = 2;
}

CMsgClientLBSSetScoreResponse::~CMsgClientLBSSetScoreResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLBSSetScoreResponse)
  SharedDtor();
}

void CMsgClientLBSSetScoreResponse::SharedDtor() {
}

void CMsgClientLBSSetScoreResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLBSSetScoreResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientLBSSetScoreResponse& CMsgClientLBSSetScoreResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientLBSSetScoreResponse* CMsgClientLBSSetScoreResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientLBSSetScoreResponse* n = new CMsgClientLBSSetScoreResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientLBSSetScoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLBSSetScoreResponse)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&leaderboard_entry_count_, 0, reinterpret_cast<char*>(&global_rank_new_) -
      reinterpret_cast<char*>(&leaderboard_entry_count_) + sizeof(global_rank_new_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientLBSSetScoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLBSSetScoreResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_entry_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_leaderboard_entry_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_entry_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool score_changed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_score_changed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &score_changed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 global_rank_previous = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_global_rank_previous();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &global_rank_previous_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 global_rank_new = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_global_rank_new();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &global_rank_new_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLBSSetScoreResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLBSSetScoreResponse)
  return false;
#undef DO_
}

void CMsgClientLBSSetScoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLBSSetScoreResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 leaderboard_entry_count = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderboard_entry_count(), output);
  }

  // optional bool score_changed = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->score_changed(), output);
  }

  // optional int32 global_rank_previous = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->global_rank_previous(), output);
  }

  // optional int32 global_rank_new = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->global_rank_new(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLBSSetScoreResponse)
}

::google::protobuf::uint8* CMsgClientLBSSetScoreResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLBSSetScoreResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 leaderboard_entry_count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leaderboard_entry_count(), target);
  }

  // optional bool score_changed = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->score_changed(), target);
  }

  // optional int32 global_rank_previous = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->global_rank_previous(), target);
  }

  // optional int32 global_rank_new = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->global_rank_new(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLBSSetScoreResponse)
  return target;
}

size_t CMsgClientLBSSetScoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLBSSetScoreResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 leaderboard_entry_count = 2;
    if (has_leaderboard_entry_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_entry_count());
    }

    // optional bool score_changed = 3;
    if (has_score_changed()) {
      total_size += 1 + 1;
    }

    // optional int32 global_rank_previous = 4;
    if (has_global_rank_previous()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->global_rank_previous());
    }

    // optional int32 global_rank_new = 5;
    if (has_global_rank_new()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->global_rank_new());
    }

    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLBSSetScoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLBSSetScoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLBSSetScoreResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientLBSSetScoreResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLBSSetScoreResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLBSSetScoreResponse)
    MergeFrom(*source);
  }
}

void CMsgClientLBSSetScoreResponse::MergeFrom(const CMsgClientLBSSetScoreResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLBSSetScoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      leaderboard_entry_count_ = from.leaderboard_entry_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_changed_ = from.score_changed_;
    }
    if (cached_has_bits & 0x00000004u) {
      global_rank_previous_ = from.global_rank_previous_;
    }
    if (cached_has_bits & 0x00000008u) {
      global_rank_new_ = from.global_rank_new_;
    }
    if (cached_has_bits & 0x00000010u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLBSSetScoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLBSSetScoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLBSSetScoreResponse::CopyFrom(const CMsgClientLBSSetScoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLBSSetScoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSSetScoreResponse::IsInitialized() const {
  return true;
}

void CMsgClientLBSSetScoreResponse::Swap(CMsgClientLBSSetScoreResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLBSSetScoreResponse::InternalSwap(CMsgClientLBSSetScoreResponse* other) {
  std::swap(leaderboard_entry_count_, other->leaderboard_entry_count_);
  std::swap(score_changed_, other->score_changed_);
  std::swap(global_rank_previous_, other->global_rank_previous_);
  std::swap(global_rank_new_, other->global_rank_new_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientLBSSetScoreResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientLBSSetScoreResponse

// optional int32 eresult = 1 [default = 2];
bool CMsgClientLBSSetScoreResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientLBSSetScoreResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientLBSSetScoreResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientLBSSetScoreResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientLBSSetScoreResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSSetScoreResponse.eresult)
  return eresult_;
}
void CMsgClientLBSSetScoreResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSSetScoreResponse.eresult)
}

// optional int32 leaderboard_entry_count = 2;
bool CMsgClientLBSSetScoreResponse::has_leaderboard_entry_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientLBSSetScoreResponse::set_has_leaderboard_entry_count() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientLBSSetScoreResponse::clear_has_leaderboard_entry_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientLBSSetScoreResponse::clear_leaderboard_entry_count() {
  leaderboard_entry_count_ = 0;
  clear_has_leaderboard_entry_count();
}
::google::protobuf::int32 CMsgClientLBSSetScoreResponse::leaderboard_entry_count() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSSetScoreResponse.leaderboard_entry_count)
  return leaderboard_entry_count_;
}
void CMsgClientLBSSetScoreResponse::set_leaderboard_entry_count(::google::protobuf::int32 value) {
  set_has_leaderboard_entry_count();
  leaderboard_entry_count_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSSetScoreResponse.leaderboard_entry_count)
}

// optional bool score_changed = 3;
bool CMsgClientLBSSetScoreResponse::has_score_changed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientLBSSetScoreResponse::set_has_score_changed() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientLBSSetScoreResponse::clear_has_score_changed() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientLBSSetScoreResponse::clear_score_changed() {
  score_changed_ = false;
  clear_has_score_changed();
}
bool CMsgClientLBSSetScoreResponse::score_changed() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSSetScoreResponse.score_changed)
  return score_changed_;
}
void CMsgClientLBSSetScoreResponse::set_score_changed(bool value) {
  set_has_score_changed();
  score_changed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSSetScoreResponse.score_changed)
}

// optional int32 global_rank_previous = 4;
bool CMsgClientLBSSetScoreResponse::has_global_rank_previous() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientLBSSetScoreResponse::set_has_global_rank_previous() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientLBSSetScoreResponse::clear_has_global_rank_previous() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientLBSSetScoreResponse::clear_global_rank_previous() {
  global_rank_previous_ = 0;
  clear_has_global_rank_previous();
}
::google::protobuf::int32 CMsgClientLBSSetScoreResponse::global_rank_previous() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSSetScoreResponse.global_rank_previous)
  return global_rank_previous_;
}
void CMsgClientLBSSetScoreResponse::set_global_rank_previous(::google::protobuf::int32 value) {
  set_has_global_rank_previous();
  global_rank_previous_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSSetScoreResponse.global_rank_previous)
}

// optional int32 global_rank_new = 5;
bool CMsgClientLBSSetScoreResponse::has_global_rank_new() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientLBSSetScoreResponse::set_has_global_rank_new() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientLBSSetScoreResponse::clear_has_global_rank_new() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientLBSSetScoreResponse::clear_global_rank_new() {
  global_rank_new_ = 0;
  clear_has_global_rank_new();
}
::google::protobuf::int32 CMsgClientLBSSetScoreResponse::global_rank_new() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSSetScoreResponse.global_rank_new)
  return global_rank_new_;
}
void CMsgClientLBSSetScoreResponse::set_global_rank_new(::google::protobuf::int32 value) {
  set_has_global_rank_new();
  global_rank_new_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSSetScoreResponse.global_rank_new)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLBSSetUGC::kAppIdFieldNumber;
const int CMsgClientLBSSetUGC::kLeaderboardIdFieldNumber;
const int CMsgClientLBSSetUGC::kUgcIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLBSSetUGC::CMsgClientLBSSetUGC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLBSSetUGC)
}
CMsgClientLBSSetUGC::CMsgClientLBSSetUGC(const CMsgClientLBSSetUGC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&ugc_id_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(ugc_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLBSSetUGC)
}

void CMsgClientLBSSetUGC::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&ugc_id_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(ugc_id_));
}

CMsgClientLBSSetUGC::~CMsgClientLBSSetUGC() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLBSSetUGC)
  SharedDtor();
}

void CMsgClientLBSSetUGC::SharedDtor() {
}

void CMsgClientLBSSetUGC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLBSSetUGC::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientLBSSetUGC& CMsgClientLBSSetUGC::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientLBSSetUGC* CMsgClientLBSSetUGC::New(::google::protobuf::Arena* arena) const {
  CMsgClientLBSSetUGC* n = new CMsgClientLBSSetUGC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientLBSSetUGC::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLBSSetUGC)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&ugc_id_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(ugc_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientLBSSetUGC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLBSSetUGC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_leaderboard_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 ugc_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_ugc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ugc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLBSSetUGC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLBSSetUGC)
  return false;
#undef DO_
}

void CMsgClientLBSSetUGC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLBSSetUGC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 leaderboard_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderboard_id(), output);
  }

  // optional fixed64 ugc_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->ugc_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLBSSetUGC)
}

::google::protobuf::uint8* CMsgClientLBSSetUGC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLBSSetUGC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional int32 leaderboard_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leaderboard_id(), target);
  }

  // optional fixed64 ugc_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->ugc_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLBSSetUGC)
  return target;
}

size_t CMsgClientLBSSetUGC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLBSSetUGC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 leaderboard_id = 2;
    if (has_leaderboard_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_id());
    }

    // optional fixed64 ugc_id = 3;
    if (has_ugc_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLBSSetUGC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLBSSetUGC)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLBSSetUGC* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientLBSSetUGC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLBSSetUGC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLBSSetUGC)
    MergeFrom(*source);
  }
}

void CMsgClientLBSSetUGC::MergeFrom(const CMsgClientLBSSetUGC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLBSSetUGC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      leaderboard_id_ = from.leaderboard_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      ugc_id_ = from.ugc_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLBSSetUGC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLBSSetUGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLBSSetUGC::CopyFrom(const CMsgClientLBSSetUGC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLBSSetUGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSSetUGC::IsInitialized() const {
  return true;
}

void CMsgClientLBSSetUGC::Swap(CMsgClientLBSSetUGC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLBSSetUGC::InternalSwap(CMsgClientLBSSetUGC* other) {
  std::swap(app_id_, other->app_id_);
  std::swap(leaderboard_id_, other->leaderboard_id_);
  std::swap(ugc_id_, other->ugc_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientLBSSetUGC::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientLBSSetUGC

// optional uint32 app_id = 1;
bool CMsgClientLBSSetUGC::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientLBSSetUGC::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientLBSSetUGC::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientLBSSetUGC::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientLBSSetUGC::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSSetUGC.app_id)
  return app_id_;
}
void CMsgClientLBSSetUGC::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSSetUGC.app_id)
}

// optional int32 leaderboard_id = 2;
bool CMsgClientLBSSetUGC::has_leaderboard_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientLBSSetUGC::set_has_leaderboard_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientLBSSetUGC::clear_has_leaderboard_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientLBSSetUGC::clear_leaderboard_id() {
  leaderboard_id_ = 0;
  clear_has_leaderboard_id();
}
::google::protobuf::int32 CMsgClientLBSSetUGC::leaderboard_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSSetUGC.leaderboard_id)
  return leaderboard_id_;
}
void CMsgClientLBSSetUGC::set_leaderboard_id(::google::protobuf::int32 value) {
  set_has_leaderboard_id();
  leaderboard_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSSetUGC.leaderboard_id)
}

// optional fixed64 ugc_id = 3;
bool CMsgClientLBSSetUGC::has_ugc_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientLBSSetUGC::set_has_ugc_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientLBSSetUGC::clear_has_ugc_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientLBSSetUGC::clear_ugc_id() {
  ugc_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ugc_id();
}
::google::protobuf::uint64 CMsgClientLBSSetUGC::ugc_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSSetUGC.ugc_id)
  return ugc_id_;
}
void CMsgClientLBSSetUGC::set_ugc_id(::google::protobuf::uint64 value) {
  set_has_ugc_id();
  ugc_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSSetUGC.ugc_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLBSSetUGCResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLBSSetUGCResponse::CMsgClientLBSSetUGCResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLBSSetUGCResponse)
}
CMsgClientLBSSetUGCResponse::CMsgClientLBSSetUGCResponse(const CMsgClientLBSSetUGCResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLBSSetUGCResponse)
}

void CMsgClientLBSSetUGCResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
}

CMsgClientLBSSetUGCResponse::~CMsgClientLBSSetUGCResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLBSSetUGCResponse)
  SharedDtor();
}

void CMsgClientLBSSetUGCResponse::SharedDtor() {
}

void CMsgClientLBSSetUGCResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLBSSetUGCResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientLBSSetUGCResponse& CMsgClientLBSSetUGCResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientLBSSetUGCResponse* CMsgClientLBSSetUGCResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientLBSSetUGCResponse* n = new CMsgClientLBSSetUGCResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientLBSSetUGCResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLBSSetUGCResponse)
  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientLBSSetUGCResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLBSSetUGCResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLBSSetUGCResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLBSSetUGCResponse)
  return false;
#undef DO_
}

void CMsgClientLBSSetUGCResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLBSSetUGCResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLBSSetUGCResponse)
}

::google::protobuf::uint8* CMsgClientLBSSetUGCResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLBSSetUGCResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLBSSetUGCResponse)
  return target;
}

size_t CMsgClientLBSSetUGCResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLBSSetUGCResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLBSSetUGCResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLBSSetUGCResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLBSSetUGCResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientLBSSetUGCResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLBSSetUGCResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLBSSetUGCResponse)
    MergeFrom(*source);
  }
}

void CMsgClientLBSSetUGCResponse::MergeFrom(const CMsgClientLBSSetUGCResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLBSSetUGCResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgClientLBSSetUGCResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLBSSetUGCResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLBSSetUGCResponse::CopyFrom(const CMsgClientLBSSetUGCResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLBSSetUGCResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSSetUGCResponse::IsInitialized() const {
  return true;
}

void CMsgClientLBSSetUGCResponse::Swap(CMsgClientLBSSetUGCResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLBSSetUGCResponse::InternalSwap(CMsgClientLBSSetUGCResponse* other) {
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientLBSSetUGCResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientLBSSetUGCResponse

// optional int32 eresult = 1 [default = 2];
bool CMsgClientLBSSetUGCResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientLBSSetUGCResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientLBSSetUGCResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientLBSSetUGCResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientLBSSetUGCResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSSetUGCResponse.eresult)
  return eresult_;
}
void CMsgClientLBSSetUGCResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSSetUGCResponse.eresult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLBSFindOrCreateLB::kAppIdFieldNumber;
const int CMsgClientLBSFindOrCreateLB::kLeaderboardSortMethodFieldNumber;
const int CMsgClientLBSFindOrCreateLB::kLeaderboardDisplayTypeFieldNumber;
const int CMsgClientLBSFindOrCreateLB::kCreateIfNotFoundFieldNumber;
const int CMsgClientLBSFindOrCreateLB::kLeaderboardNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLBSFindOrCreateLB::CMsgClientLBSFindOrCreateLB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLBSFindOrCreateLB)
}
CMsgClientLBSFindOrCreateLB::CMsgClientLBSFindOrCreateLB(const CMsgClientLBSFindOrCreateLB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leaderboard_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_leaderboard_name()) {
    leaderboard_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderboard_name_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&create_if_not_found_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(create_if_not_found_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLBSFindOrCreateLB)
}

void CMsgClientLBSFindOrCreateLB::SharedCtor() {
  _cached_size_ = 0;
  leaderboard_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&create_if_not_found_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(create_if_not_found_));
}

CMsgClientLBSFindOrCreateLB::~CMsgClientLBSFindOrCreateLB() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLBSFindOrCreateLB)
  SharedDtor();
}

void CMsgClientLBSFindOrCreateLB::SharedDtor() {
  leaderboard_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLBSFindOrCreateLB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLBSFindOrCreateLB::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientLBSFindOrCreateLB& CMsgClientLBSFindOrCreateLB::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientLBSFindOrCreateLB* CMsgClientLBSFindOrCreateLB::New(::google::protobuf::Arena* arena) const {
  CMsgClientLBSFindOrCreateLB* n = new CMsgClientLBSFindOrCreateLB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientLBSFindOrCreateLB::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLBSFindOrCreateLB)
  if (has_leaderboard_name()) {
    GOOGLE_DCHECK(!leaderboard_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*leaderboard_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&create_if_not_found_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(create_if_not_found_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientLBSFindOrCreateLB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLBSFindOrCreateLB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_sort_method = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_leaderboard_sort_method();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_sort_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_display_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_leaderboard_display_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_display_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool create_if_not_found = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_create_if_not_found();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_if_not_found_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string leaderboard_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leaderboard_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leaderboard_name().data(), this->leaderboard_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLBSFindOrCreateLB.leaderboard_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLBSFindOrCreateLB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLBSFindOrCreateLB)
  return false;
#undef DO_
}

void CMsgClientLBSFindOrCreateLB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLBSFindOrCreateLB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 leaderboard_sort_method = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderboard_sort_method(), output);
  }

  // optional int32 leaderboard_display_type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->leaderboard_display_type(), output);
  }

  // optional bool create_if_not_found = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->create_if_not_found(), output);
  }

  // optional string leaderboard_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leaderboard_name().data(), this->leaderboard_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLBSFindOrCreateLB.leaderboard_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->leaderboard_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLBSFindOrCreateLB)
}

::google::protobuf::uint8* CMsgClientLBSFindOrCreateLB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLBSFindOrCreateLB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional int32 leaderboard_sort_method = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leaderboard_sort_method(), target);
  }

  // optional int32 leaderboard_display_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->leaderboard_display_type(), target);
  }

  // optional bool create_if_not_found = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->create_if_not_found(), target);
  }

  // optional string leaderboard_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leaderboard_name().data(), this->leaderboard_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLBSFindOrCreateLB.leaderboard_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->leaderboard_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLBSFindOrCreateLB)
  return target;
}

size_t CMsgClientLBSFindOrCreateLB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLBSFindOrCreateLB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string leaderboard_name = 5;
    if (has_leaderboard_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leaderboard_name());
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 leaderboard_sort_method = 2;
    if (has_leaderboard_sort_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_sort_method());
    }

    // optional int32 leaderboard_display_type = 3;
    if (has_leaderboard_display_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_display_type());
    }

    // optional bool create_if_not_found = 4;
    if (has_create_if_not_found()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLBSFindOrCreateLB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLBSFindOrCreateLB)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLBSFindOrCreateLB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientLBSFindOrCreateLB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLBSFindOrCreateLB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLBSFindOrCreateLB)
    MergeFrom(*source);
  }
}

void CMsgClientLBSFindOrCreateLB::MergeFrom(const CMsgClientLBSFindOrCreateLB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLBSFindOrCreateLB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_leaderboard_name();
      leaderboard_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderboard_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      leaderboard_sort_method_ = from.leaderboard_sort_method_;
    }
    if (cached_has_bits & 0x00000008u) {
      leaderboard_display_type_ = from.leaderboard_display_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      create_if_not_found_ = from.create_if_not_found_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLBSFindOrCreateLB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLBSFindOrCreateLB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLBSFindOrCreateLB::CopyFrom(const CMsgClientLBSFindOrCreateLB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLBSFindOrCreateLB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSFindOrCreateLB::IsInitialized() const {
  return true;
}

void CMsgClientLBSFindOrCreateLB::Swap(CMsgClientLBSFindOrCreateLB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLBSFindOrCreateLB::InternalSwap(CMsgClientLBSFindOrCreateLB* other) {
  leaderboard_name_.Swap(&other->leaderboard_name_);
  std::swap(app_id_, other->app_id_);
  std::swap(leaderboard_sort_method_, other->leaderboard_sort_method_);
  std::swap(leaderboard_display_type_, other->leaderboard_display_type_);
  std::swap(create_if_not_found_, other->create_if_not_found_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientLBSFindOrCreateLB::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientLBSFindOrCreateLB

// optional uint32 app_id = 1;
bool CMsgClientLBSFindOrCreateLB::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientLBSFindOrCreateLB::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientLBSFindOrCreateLB::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientLBSFindOrCreateLB::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientLBSFindOrCreateLB::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSFindOrCreateLB.app_id)
  return app_id_;
}
void CMsgClientLBSFindOrCreateLB::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSFindOrCreateLB.app_id)
}

// optional int32 leaderboard_sort_method = 2;
bool CMsgClientLBSFindOrCreateLB::has_leaderboard_sort_method() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientLBSFindOrCreateLB::set_has_leaderboard_sort_method() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientLBSFindOrCreateLB::clear_has_leaderboard_sort_method() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientLBSFindOrCreateLB::clear_leaderboard_sort_method() {
  leaderboard_sort_method_ = 0;
  clear_has_leaderboard_sort_method();
}
::google::protobuf::int32 CMsgClientLBSFindOrCreateLB::leaderboard_sort_method() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSFindOrCreateLB.leaderboard_sort_method)
  return leaderboard_sort_method_;
}
void CMsgClientLBSFindOrCreateLB::set_leaderboard_sort_method(::google::protobuf::int32 value) {
  set_has_leaderboard_sort_method();
  leaderboard_sort_method_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSFindOrCreateLB.leaderboard_sort_method)
}

// optional int32 leaderboard_display_type = 3;
bool CMsgClientLBSFindOrCreateLB::has_leaderboard_display_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientLBSFindOrCreateLB::set_has_leaderboard_display_type() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientLBSFindOrCreateLB::clear_has_leaderboard_display_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientLBSFindOrCreateLB::clear_leaderboard_display_type() {
  leaderboard_display_type_ = 0;
  clear_has_leaderboard_display_type();
}
::google::protobuf::int32 CMsgClientLBSFindOrCreateLB::leaderboard_display_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSFindOrCreateLB.leaderboard_display_type)
  return leaderboard_display_type_;
}
void CMsgClientLBSFindOrCreateLB::set_leaderboard_display_type(::google::protobuf::int32 value) {
  set_has_leaderboard_display_type();
  leaderboard_display_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSFindOrCreateLB.leaderboard_display_type)
}

// optional bool create_if_not_found = 4;
bool CMsgClientLBSFindOrCreateLB::has_create_if_not_found() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientLBSFindOrCreateLB::set_has_create_if_not_found() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientLBSFindOrCreateLB::clear_has_create_if_not_found() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientLBSFindOrCreateLB::clear_create_if_not_found() {
  create_if_not_found_ = false;
  clear_has_create_if_not_found();
}
bool CMsgClientLBSFindOrCreateLB::create_if_not_found() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSFindOrCreateLB.create_if_not_found)
  return create_if_not_found_;
}
void CMsgClientLBSFindOrCreateLB::set_create_if_not_found(bool value) {
  set_has_create_if_not_found();
  create_if_not_found_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSFindOrCreateLB.create_if_not_found)
}

// optional string leaderboard_name = 5;
bool CMsgClientLBSFindOrCreateLB::has_leaderboard_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientLBSFindOrCreateLB::set_has_leaderboard_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientLBSFindOrCreateLB::clear_has_leaderboard_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientLBSFindOrCreateLB::clear_leaderboard_name() {
  leaderboard_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leaderboard_name();
}
const ::std::string& CMsgClientLBSFindOrCreateLB::leaderboard_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSFindOrCreateLB.leaderboard_name)
  return leaderboard_name_.GetNoArena();
}
void CMsgClientLBSFindOrCreateLB::set_leaderboard_name(const ::std::string& value) {
  set_has_leaderboard_name();
  leaderboard_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSFindOrCreateLB.leaderboard_name)
}
#if LANG_CXX11
void CMsgClientLBSFindOrCreateLB::set_leaderboard_name(::std::string&& value) {
  set_has_leaderboard_name();
  leaderboard_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLBSFindOrCreateLB.leaderboard_name)
}
#endif
void CMsgClientLBSFindOrCreateLB::set_leaderboard_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_leaderboard_name();
  leaderboard_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLBSFindOrCreateLB.leaderboard_name)
}
void CMsgClientLBSFindOrCreateLB::set_leaderboard_name(const char* value, size_t size) {
  set_has_leaderboard_name();
  leaderboard_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLBSFindOrCreateLB.leaderboard_name)
}
::std::string* CMsgClientLBSFindOrCreateLB::mutable_leaderboard_name() {
  set_has_leaderboard_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLBSFindOrCreateLB.leaderboard_name)
  return leaderboard_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLBSFindOrCreateLB::release_leaderboard_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLBSFindOrCreateLB.leaderboard_name)
  clear_has_leaderboard_name();
  return leaderboard_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLBSFindOrCreateLB::set_allocated_leaderboard_name(::std::string* leaderboard_name) {
  if (leaderboard_name != NULL) {
    set_has_leaderboard_name();
  } else {
    clear_has_leaderboard_name();
  }
  leaderboard_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leaderboard_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLBSFindOrCreateLB.leaderboard_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLBSFindOrCreateLBResponse::kEresultFieldNumber;
const int CMsgClientLBSFindOrCreateLBResponse::kLeaderboardIdFieldNumber;
const int CMsgClientLBSFindOrCreateLBResponse::kLeaderboardEntryCountFieldNumber;
const int CMsgClientLBSFindOrCreateLBResponse::kLeaderboardSortMethodFieldNumber;
const int CMsgClientLBSFindOrCreateLBResponse::kLeaderboardDisplayTypeFieldNumber;
const int CMsgClientLBSFindOrCreateLBResponse::kLeaderboardNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLBSFindOrCreateLBResponse::CMsgClientLBSFindOrCreateLBResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
}
CMsgClientLBSFindOrCreateLBResponse::CMsgClientLBSFindOrCreateLBResponse(const CMsgClientLBSFindOrCreateLBResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leaderboard_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_leaderboard_name()) {
    leaderboard_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderboard_name_);
  }
  ::memcpy(&leaderboard_id_, &from.leaderboard_id_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&leaderboard_id_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
}

void CMsgClientLBSFindOrCreateLBResponse::SharedCtor() {
  _cached_size_ = 0;
  leaderboard_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&leaderboard_id_, 0, reinterpret_cast<char*>(&leaderboard_display_type_) -
    reinterpret_cast<char*>(&leaderboard_id_) + sizeof(leaderboard_display_type_));
  eresult_ = 2;
}

CMsgClientLBSFindOrCreateLBResponse::~CMsgClientLBSFindOrCreateLBResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  SharedDtor();
}

void CMsgClientLBSFindOrCreateLBResponse::SharedDtor() {
  leaderboard_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLBSFindOrCreateLBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLBSFindOrCreateLBResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientLBSFindOrCreateLBResponse& CMsgClientLBSFindOrCreateLBResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientLBSFindOrCreateLBResponse* CMsgClientLBSFindOrCreateLBResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientLBSFindOrCreateLBResponse* n = new CMsgClientLBSFindOrCreateLBResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientLBSFindOrCreateLBResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  if (has_leaderboard_name()) {
    GOOGLE_DCHECK(!leaderboard_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*leaderboard_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&leaderboard_id_, 0, reinterpret_cast<char*>(&leaderboard_display_type_) -
      reinterpret_cast<char*>(&leaderboard_id_) + sizeof(leaderboard_display_type_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientLBSFindOrCreateLBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_leaderboard_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_entry_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_leaderboard_entry_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_entry_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_sort_method = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_leaderboard_sort_method();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_sort_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_display_type = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_leaderboard_display_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_display_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string leaderboard_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leaderboard_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leaderboard_name().data(), this->leaderboard_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientLBSFindOrCreateLBResponse.leaderboard_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  return false;
#undef DO_
}

void CMsgClientLBSFindOrCreateLBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 leaderboard_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderboard_id(), output);
  }

  // optional int32 leaderboard_entry_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->leaderboard_entry_count(), output);
  }

  // optional int32 leaderboard_sort_method = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->leaderboard_sort_method(), output);
  }

  // optional int32 leaderboard_display_type = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->leaderboard_display_type(), output);
  }

  // optional string leaderboard_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leaderboard_name().data(), this->leaderboard_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLBSFindOrCreateLBResponse.leaderboard_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->leaderboard_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
}

::google::protobuf::uint8* CMsgClientLBSFindOrCreateLBResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 leaderboard_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leaderboard_id(), target);
  }

  // optional int32 leaderboard_entry_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->leaderboard_entry_count(), target);
  }

  // optional int32 leaderboard_sort_method = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->leaderboard_sort_method(), target);
  }

  // optional int32 leaderboard_display_type = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->leaderboard_display_type(), target);
  }

  // optional string leaderboard_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leaderboard_name().data(), this->leaderboard_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientLBSFindOrCreateLBResponse.leaderboard_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->leaderboard_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  return target;
}

size_t CMsgClientLBSFindOrCreateLBResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string leaderboard_name = 6;
    if (has_leaderboard_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leaderboard_name());
    }

    // optional int32 leaderboard_id = 2;
    if (has_leaderboard_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_id());
    }

    // optional int32 leaderboard_entry_count = 3;
    if (has_leaderboard_entry_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_entry_count());
    }

    // optional int32 leaderboard_sort_method = 4 [default = 0];
    if (has_leaderboard_sort_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_sort_method());
    }

    // optional int32 leaderboard_display_type = 5 [default = 0];
    if (has_leaderboard_display_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_display_type());
    }

    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLBSFindOrCreateLBResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLBSFindOrCreateLBResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientLBSFindOrCreateLBResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
    MergeFrom(*source);
  }
}

void CMsgClientLBSFindOrCreateLBResponse::MergeFrom(const CMsgClientLBSFindOrCreateLBResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_leaderboard_name();
      leaderboard_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderboard_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      leaderboard_id_ = from.leaderboard_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      leaderboard_entry_count_ = from.leaderboard_entry_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      leaderboard_sort_method_ = from.leaderboard_sort_method_;
    }
    if (cached_has_bits & 0x00000010u) {
      leaderboard_display_type_ = from.leaderboard_display_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLBSFindOrCreateLBResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLBSFindOrCreateLBResponse::CopyFrom(const CMsgClientLBSFindOrCreateLBResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLBSFindOrCreateLBResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSFindOrCreateLBResponse::IsInitialized() const {
  return true;
}

void CMsgClientLBSFindOrCreateLBResponse::Swap(CMsgClientLBSFindOrCreateLBResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLBSFindOrCreateLBResponse::InternalSwap(CMsgClientLBSFindOrCreateLBResponse* other) {
  leaderboard_name_.Swap(&other->leaderboard_name_);
  std::swap(leaderboard_id_, other->leaderboard_id_);
  std::swap(leaderboard_entry_count_, other->leaderboard_entry_count_);
  std::swap(leaderboard_sort_method_, other->leaderboard_sort_method_);
  std::swap(leaderboard_display_type_, other->leaderboard_display_type_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientLBSFindOrCreateLBResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientLBSFindOrCreateLBResponse

// optional int32 eresult = 1 [default = 2];
bool CMsgClientLBSFindOrCreateLBResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientLBSFindOrCreateLBResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientLBSFindOrCreateLBResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientLBSFindOrCreateLBResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientLBSFindOrCreateLBResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSFindOrCreateLBResponse.eresult)
  return eresult_;
}
void CMsgClientLBSFindOrCreateLBResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSFindOrCreateLBResponse.eresult)
}

// optional int32 leaderboard_id = 2;
bool CMsgClientLBSFindOrCreateLBResponse::has_leaderboard_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientLBSFindOrCreateLBResponse::set_has_leaderboard_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientLBSFindOrCreateLBResponse::clear_has_leaderboard_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientLBSFindOrCreateLBResponse::clear_leaderboard_id() {
  leaderboard_id_ = 0;
  clear_has_leaderboard_id();
}
::google::protobuf::int32 CMsgClientLBSFindOrCreateLBResponse::leaderboard_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSFindOrCreateLBResponse.leaderboard_id)
  return leaderboard_id_;
}
void CMsgClientLBSFindOrCreateLBResponse::set_leaderboard_id(::google::protobuf::int32 value) {
  set_has_leaderboard_id();
  leaderboard_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSFindOrCreateLBResponse.leaderboard_id)
}

// optional int32 leaderboard_entry_count = 3;
bool CMsgClientLBSFindOrCreateLBResponse::has_leaderboard_entry_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientLBSFindOrCreateLBResponse::set_has_leaderboard_entry_count() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientLBSFindOrCreateLBResponse::clear_has_leaderboard_entry_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientLBSFindOrCreateLBResponse::clear_leaderboard_entry_count() {
  leaderboard_entry_count_ = 0;
  clear_has_leaderboard_entry_count();
}
::google::protobuf::int32 CMsgClientLBSFindOrCreateLBResponse::leaderboard_entry_count() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSFindOrCreateLBResponse.leaderboard_entry_count)
  return leaderboard_entry_count_;
}
void CMsgClientLBSFindOrCreateLBResponse::set_leaderboard_entry_count(::google::protobuf::int32 value) {
  set_has_leaderboard_entry_count();
  leaderboard_entry_count_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSFindOrCreateLBResponse.leaderboard_entry_count)
}

// optional int32 leaderboard_sort_method = 4 [default = 0];
bool CMsgClientLBSFindOrCreateLBResponse::has_leaderboard_sort_method() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientLBSFindOrCreateLBResponse::set_has_leaderboard_sort_method() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientLBSFindOrCreateLBResponse::clear_has_leaderboard_sort_method() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientLBSFindOrCreateLBResponse::clear_leaderboard_sort_method() {
  leaderboard_sort_method_ = 0;
  clear_has_leaderboard_sort_method();
}
::google::protobuf::int32 CMsgClientLBSFindOrCreateLBResponse::leaderboard_sort_method() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSFindOrCreateLBResponse.leaderboard_sort_method)
  return leaderboard_sort_method_;
}
void CMsgClientLBSFindOrCreateLBResponse::set_leaderboard_sort_method(::google::protobuf::int32 value) {
  set_has_leaderboard_sort_method();
  leaderboard_sort_method_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSFindOrCreateLBResponse.leaderboard_sort_method)
}

// optional int32 leaderboard_display_type = 5 [default = 0];
bool CMsgClientLBSFindOrCreateLBResponse::has_leaderboard_display_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientLBSFindOrCreateLBResponse::set_has_leaderboard_display_type() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientLBSFindOrCreateLBResponse::clear_has_leaderboard_display_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientLBSFindOrCreateLBResponse::clear_leaderboard_display_type() {
  leaderboard_display_type_ = 0;
  clear_has_leaderboard_display_type();
}
::google::protobuf::int32 CMsgClientLBSFindOrCreateLBResponse::leaderboard_display_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSFindOrCreateLBResponse.leaderboard_display_type)
  return leaderboard_display_type_;
}
void CMsgClientLBSFindOrCreateLBResponse::set_leaderboard_display_type(::google::protobuf::int32 value) {
  set_has_leaderboard_display_type();
  leaderboard_display_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSFindOrCreateLBResponse.leaderboard_display_type)
}

// optional string leaderboard_name = 6;
bool CMsgClientLBSFindOrCreateLBResponse::has_leaderboard_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientLBSFindOrCreateLBResponse::set_has_leaderboard_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientLBSFindOrCreateLBResponse::clear_has_leaderboard_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientLBSFindOrCreateLBResponse::clear_leaderboard_name() {
  leaderboard_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leaderboard_name();
}
const ::std::string& CMsgClientLBSFindOrCreateLBResponse::leaderboard_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSFindOrCreateLBResponse.leaderboard_name)
  return leaderboard_name_.GetNoArena();
}
void CMsgClientLBSFindOrCreateLBResponse::set_leaderboard_name(const ::std::string& value) {
  set_has_leaderboard_name();
  leaderboard_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSFindOrCreateLBResponse.leaderboard_name)
}
#if LANG_CXX11
void CMsgClientLBSFindOrCreateLBResponse::set_leaderboard_name(::std::string&& value) {
  set_has_leaderboard_name();
  leaderboard_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLBSFindOrCreateLBResponse.leaderboard_name)
}
#endif
void CMsgClientLBSFindOrCreateLBResponse::set_leaderboard_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_leaderboard_name();
  leaderboard_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLBSFindOrCreateLBResponse.leaderboard_name)
}
void CMsgClientLBSFindOrCreateLBResponse::set_leaderboard_name(const char* value, size_t size) {
  set_has_leaderboard_name();
  leaderboard_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLBSFindOrCreateLBResponse.leaderboard_name)
}
::std::string* CMsgClientLBSFindOrCreateLBResponse::mutable_leaderboard_name() {
  set_has_leaderboard_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLBSFindOrCreateLBResponse.leaderboard_name)
  return leaderboard_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLBSFindOrCreateLBResponse::release_leaderboard_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLBSFindOrCreateLBResponse.leaderboard_name)
  clear_has_leaderboard_name();
  return leaderboard_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLBSFindOrCreateLBResponse::set_allocated_leaderboard_name(::std::string* leaderboard_name) {
  if (leaderboard_name != NULL) {
    set_has_leaderboard_name();
  } else {
    clear_has_leaderboard_name();
  }
  leaderboard_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leaderboard_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLBSFindOrCreateLBResponse.leaderboard_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLBSGetLBEntries::kAppIdFieldNumber;
const int CMsgClientLBSGetLBEntries::kLeaderboardIdFieldNumber;
const int CMsgClientLBSGetLBEntries::kRangeStartFieldNumber;
const int CMsgClientLBSGetLBEntries::kRangeEndFieldNumber;
const int CMsgClientLBSGetLBEntries::kLeaderboardDataRequestFieldNumber;
const int CMsgClientLBSGetLBEntries::kSteamidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLBSGetLBEntries::CMsgClientLBSGetLBEntries()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLBSGetLBEntries)
}
CMsgClientLBSGetLBEntries::CMsgClientLBSGetLBEntries(const CMsgClientLBSGetLBEntries& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      steamids_(from.steamids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&leaderboard_data_request_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(leaderboard_data_request_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLBSGetLBEntries)
}

void CMsgClientLBSGetLBEntries::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&leaderboard_data_request_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(leaderboard_data_request_));
}

CMsgClientLBSGetLBEntries::~CMsgClientLBSGetLBEntries() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLBSGetLBEntries)
  SharedDtor();
}

void CMsgClientLBSGetLBEntries::SharedDtor() {
}

void CMsgClientLBSGetLBEntries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLBSGetLBEntries::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientLBSGetLBEntries& CMsgClientLBSGetLBEntries::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientLBSGetLBEntries* CMsgClientLBSGetLBEntries::New(::google::protobuf::Arena* arena) const {
  CMsgClientLBSGetLBEntries* n = new CMsgClientLBSGetLBEntries;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientLBSGetLBEntries::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLBSGetLBEntries)
  steamids_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&leaderboard_data_request_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(leaderboard_data_request_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientLBSGetLBEntries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLBSGetLBEntries)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_leaderboard_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 range_start = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_range_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 range_end = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_range_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_data_request = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_leaderboard_data_request();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_data_request_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 steamids = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 49u, input, this->mutable_steamids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLBSGetLBEntries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLBSGetLBEntries)
  return false;
#undef DO_
}

void CMsgClientLBSGetLBEntries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLBSGetLBEntries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->app_id(), output);
  }

  // optional int32 leaderboard_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderboard_id(), output);
  }

  // optional int32 range_start = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->range_start(), output);
  }

  // optional int32 range_end = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->range_end(), output);
  }

  // optional int32 leaderboard_data_request = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->leaderboard_data_request(), output);
  }

  // repeated fixed64 steamids = 6;
  for (int i = 0, n = this->steamids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      6, this->steamids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLBSGetLBEntries)
}

::google::protobuf::uint8* CMsgClientLBSGetLBEntries::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLBSGetLBEntries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->app_id(), target);
  }

  // optional int32 leaderboard_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leaderboard_id(), target);
  }

  // optional int32 range_start = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->range_start(), target);
  }

  // optional int32 range_end = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->range_end(), target);
  }

  // optional int32 leaderboard_data_request = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->leaderboard_data_request(), target);
  }

  // repeated fixed64 steamids = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(6, this->steamids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLBSGetLBEntries)
  return target;
}

size_t CMsgClientLBSGetLBEntries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLBSGetLBEntries)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed64 steamids = 6;
  {
    unsigned int count = this->steamids_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steamids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->app_id());
    }

    // optional int32 leaderboard_id = 2;
    if (has_leaderboard_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_id());
    }

    // optional int32 range_start = 3;
    if (has_range_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range_start());
    }

    // optional int32 range_end = 4;
    if (has_range_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range_end());
    }

    // optional int32 leaderboard_data_request = 5;
    if (has_leaderboard_data_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_data_request());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLBSGetLBEntries::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLBSGetLBEntries)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLBSGetLBEntries* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientLBSGetLBEntries>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLBSGetLBEntries)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLBSGetLBEntries)
    MergeFrom(*source);
  }
}

void CMsgClientLBSGetLBEntries::MergeFrom(const CMsgClientLBSGetLBEntries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLBSGetLBEntries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steamids_.MergeFrom(from.steamids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      leaderboard_id_ = from.leaderboard_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      range_start_ = from.range_start_;
    }
    if (cached_has_bits & 0x00000008u) {
      range_end_ = from.range_end_;
    }
    if (cached_has_bits & 0x00000010u) {
      leaderboard_data_request_ = from.leaderboard_data_request_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLBSGetLBEntries::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLBSGetLBEntries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLBSGetLBEntries::CopyFrom(const CMsgClientLBSGetLBEntries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLBSGetLBEntries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSGetLBEntries::IsInitialized() const {
  return true;
}

void CMsgClientLBSGetLBEntries::Swap(CMsgClientLBSGetLBEntries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLBSGetLBEntries::InternalSwap(CMsgClientLBSGetLBEntries* other) {
  steamids_.InternalSwap(&other->steamids_);
  std::swap(app_id_, other->app_id_);
  std::swap(leaderboard_id_, other->leaderboard_id_);
  std::swap(range_start_, other->range_start_);
  std::swap(range_end_, other->range_end_);
  std::swap(leaderboard_data_request_, other->leaderboard_data_request_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientLBSGetLBEntries::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientLBSGetLBEntries

// optional int32 app_id = 1;
bool CMsgClientLBSGetLBEntries::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientLBSGetLBEntries::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientLBSGetLBEntries::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientLBSGetLBEntries::clear_app_id() {
  app_id_ = 0;
  clear_has_app_id();
}
::google::protobuf::int32 CMsgClientLBSGetLBEntries::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSGetLBEntries.app_id)
  return app_id_;
}
void CMsgClientLBSGetLBEntries::set_app_id(::google::protobuf::int32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSGetLBEntries.app_id)
}

// optional int32 leaderboard_id = 2;
bool CMsgClientLBSGetLBEntries::has_leaderboard_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientLBSGetLBEntries::set_has_leaderboard_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientLBSGetLBEntries::clear_has_leaderboard_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientLBSGetLBEntries::clear_leaderboard_id() {
  leaderboard_id_ = 0;
  clear_has_leaderboard_id();
}
::google::protobuf::int32 CMsgClientLBSGetLBEntries::leaderboard_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSGetLBEntries.leaderboard_id)
  return leaderboard_id_;
}
void CMsgClientLBSGetLBEntries::set_leaderboard_id(::google::protobuf::int32 value) {
  set_has_leaderboard_id();
  leaderboard_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSGetLBEntries.leaderboard_id)
}

// optional int32 range_start = 3;
bool CMsgClientLBSGetLBEntries::has_range_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientLBSGetLBEntries::set_has_range_start() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientLBSGetLBEntries::clear_has_range_start() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientLBSGetLBEntries::clear_range_start() {
  range_start_ = 0;
  clear_has_range_start();
}
::google::protobuf::int32 CMsgClientLBSGetLBEntries::range_start() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSGetLBEntries.range_start)
  return range_start_;
}
void CMsgClientLBSGetLBEntries::set_range_start(::google::protobuf::int32 value) {
  set_has_range_start();
  range_start_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSGetLBEntries.range_start)
}

// optional int32 range_end = 4;
bool CMsgClientLBSGetLBEntries::has_range_end() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientLBSGetLBEntries::set_has_range_end() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientLBSGetLBEntries::clear_has_range_end() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientLBSGetLBEntries::clear_range_end() {
  range_end_ = 0;
  clear_has_range_end();
}
::google::protobuf::int32 CMsgClientLBSGetLBEntries::range_end() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSGetLBEntries.range_end)
  return range_end_;
}
void CMsgClientLBSGetLBEntries::set_range_end(::google::protobuf::int32 value) {
  set_has_range_end();
  range_end_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSGetLBEntries.range_end)
}

// optional int32 leaderboard_data_request = 5;
bool CMsgClientLBSGetLBEntries::has_leaderboard_data_request() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientLBSGetLBEntries::set_has_leaderboard_data_request() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientLBSGetLBEntries::clear_has_leaderboard_data_request() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientLBSGetLBEntries::clear_leaderboard_data_request() {
  leaderboard_data_request_ = 0;
  clear_has_leaderboard_data_request();
}
::google::protobuf::int32 CMsgClientLBSGetLBEntries::leaderboard_data_request() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSGetLBEntries.leaderboard_data_request)
  return leaderboard_data_request_;
}
void CMsgClientLBSGetLBEntries::set_leaderboard_data_request(::google::protobuf::int32 value) {
  set_has_leaderboard_data_request();
  leaderboard_data_request_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSGetLBEntries.leaderboard_data_request)
}

// repeated fixed64 steamids = 6;
int CMsgClientLBSGetLBEntries::steamids_size() const {
  return steamids_.size();
}
void CMsgClientLBSGetLBEntries::clear_steamids() {
  steamids_.Clear();
}
::google::protobuf::uint64 CMsgClientLBSGetLBEntries::steamids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSGetLBEntries.steamids)
  return steamids_.Get(index);
}
void CMsgClientLBSGetLBEntries::set_steamids(int index, ::google::protobuf::uint64 value) {
  steamids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSGetLBEntries.steamids)
}
void CMsgClientLBSGetLBEntries::add_steamids(::google::protobuf::uint64 value) {
  steamids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientLBSGetLBEntries.steamids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgClientLBSGetLBEntries::steamids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientLBSGetLBEntries.steamids)
  return steamids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgClientLBSGetLBEntries::mutable_steamids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientLBSGetLBEntries.steamids)
  return &steamids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLBSGetLBEntriesResponse_Entry::kSteamIdUserFieldNumber;
const int CMsgClientLBSGetLBEntriesResponse_Entry::kGlobalRankFieldNumber;
const int CMsgClientLBSGetLBEntriesResponse_Entry::kScoreFieldNumber;
const int CMsgClientLBSGetLBEntriesResponse_Entry::kDetailsFieldNumber;
const int CMsgClientLBSGetLBEntriesResponse_Entry::kUgcIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLBSGetLBEntriesResponse_Entry::CMsgClientLBSGetLBEntriesResponse_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
}
CMsgClientLBSGetLBEntriesResponse_Entry::CMsgClientLBSGetLBEntriesResponse_Entry(const CMsgClientLBSGetLBEntriesResponse_Entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_details()) {
    details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.details_);
  }
  ::memcpy(&steam_id_user_, &from.steam_id_user_,
    reinterpret_cast<char*>(&ugc_id_) -
    reinterpret_cast<char*>(&steam_id_user_) + sizeof(ugc_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
}

void CMsgClientLBSGetLBEntriesResponse_Entry::SharedCtor() {
  _cached_size_ = 0;
  details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_user_, 0, reinterpret_cast<char*>(&ugc_id_) -
    reinterpret_cast<char*>(&steam_id_user_) + sizeof(ugc_id_));
}

CMsgClientLBSGetLBEntriesResponse_Entry::~CMsgClientLBSGetLBEntriesResponse_Entry() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  SharedDtor();
}

void CMsgClientLBSGetLBEntriesResponse_Entry::SharedDtor() {
  details_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLBSGetLBEntriesResponse_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLBSGetLBEntriesResponse_Entry::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientLBSGetLBEntriesResponse_Entry& CMsgClientLBSGetLBEntriesResponse_Entry::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientLBSGetLBEntriesResponse_Entry* CMsgClientLBSGetLBEntriesResponse_Entry::New(::google::protobuf::Arena* arena) const {
  CMsgClientLBSGetLBEntriesResponse_Entry* n = new CMsgClientLBSGetLBEntriesResponse_Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientLBSGetLBEntriesResponse_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  if (has_details()) {
    GOOGLE_DCHECK(!details_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*details_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&steam_id_user_, 0, reinterpret_cast<char*>(&ugc_id_) -
      reinterpret_cast<char*>(&steam_id_user_) + sizeof(ugc_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientLBSGetLBEntriesResponse_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id_user();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 global_rank = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_global_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &global_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes details = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 ugc_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_ugc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ugc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  return false;
#undef DO_
}

void CMsgClientLBSGetLBEntriesResponse_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_user = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_user(), output);
  }

  // optional int32 global_rank = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->global_rank(), output);
  }

  // optional int32 score = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // optional bytes details = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->details(), output);
  }

  // optional fixed64 ugc_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->ugc_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
}

::google::protobuf::uint8* CMsgClientLBSGetLBEntriesResponse_Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_user = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id_user(), target);
  }

  // optional int32 global_rank = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->global_rank(), target);
  }

  // optional int32 score = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  // optional bytes details = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->details(), target);
  }

  // optional fixed64 ugc_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->ugc_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  return target;
}

size_t CMsgClientLBSGetLBEntriesResponse_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes details = 4;
    if (has_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->details());
    }

    // optional fixed64 steam_id_user = 1;
    if (has_steam_id_user()) {
      total_size += 1 + 8;
    }

    // optional int32 global_rank = 2;
    if (has_global_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->global_rank());
    }

    // optional int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional fixed64 ugc_id = 5;
    if (has_ugc_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLBSGetLBEntriesResponse_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLBSGetLBEntriesResponse_Entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientLBSGetLBEntriesResponse_Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
    MergeFrom(*source);
  }
}

void CMsgClientLBSGetLBEntriesResponse_Entry::MergeFrom(const CMsgClientLBSGetLBEntriesResponse_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_details();
      details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.details_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_user_ = from.steam_id_user_;
    }
    if (cached_has_bits & 0x00000004u) {
      global_rank_ = from.global_rank_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000010u) {
      ugc_id_ = from.ugc_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLBSGetLBEntriesResponse_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLBSGetLBEntriesResponse_Entry::CopyFrom(const CMsgClientLBSGetLBEntriesResponse_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSGetLBEntriesResponse_Entry::IsInitialized() const {
  return true;
}

void CMsgClientLBSGetLBEntriesResponse_Entry::Swap(CMsgClientLBSGetLBEntriesResponse_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLBSGetLBEntriesResponse_Entry::InternalSwap(CMsgClientLBSGetLBEntriesResponse_Entry* other) {
  details_.Swap(&other->details_);
  std::swap(steam_id_user_, other->steam_id_user_);
  std::swap(global_rank_, other->global_rank_);
  std::swap(score_, other->score_);
  std::swap(ugc_id_, other->ugc_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientLBSGetLBEntriesResponse_Entry::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientLBSGetLBEntriesResponse_Entry

// optional fixed64 steam_id_user = 1;
bool CMsgClientLBSGetLBEntriesResponse_Entry::has_steam_id_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientLBSGetLBEntriesResponse_Entry::set_has_steam_id_user() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientLBSGetLBEntriesResponse_Entry::clear_has_steam_id_user() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientLBSGetLBEntriesResponse_Entry::clear_steam_id_user() {
  steam_id_user_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_user();
}
::google::protobuf::uint64 CMsgClientLBSGetLBEntriesResponse_Entry::steam_id_user() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry.steam_id_user)
  return steam_id_user_;
}
void CMsgClientLBSGetLBEntriesResponse_Entry::set_steam_id_user(::google::protobuf::uint64 value) {
  set_has_steam_id_user();
  steam_id_user_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry.steam_id_user)
}

// optional int32 global_rank = 2;
bool CMsgClientLBSGetLBEntriesResponse_Entry::has_global_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientLBSGetLBEntriesResponse_Entry::set_has_global_rank() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientLBSGetLBEntriesResponse_Entry::clear_has_global_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientLBSGetLBEntriesResponse_Entry::clear_global_rank() {
  global_rank_ = 0;
  clear_has_global_rank();
}
::google::protobuf::int32 CMsgClientLBSGetLBEntriesResponse_Entry::global_rank() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry.global_rank)
  return global_rank_;
}
void CMsgClientLBSGetLBEntriesResponse_Entry::set_global_rank(::google::protobuf::int32 value) {
  set_has_global_rank();
  global_rank_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry.global_rank)
}

// optional int32 score = 3;
bool CMsgClientLBSGetLBEntriesResponse_Entry::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientLBSGetLBEntriesResponse_Entry::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientLBSGetLBEntriesResponse_Entry::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientLBSGetLBEntriesResponse_Entry::clear_score() {
  score_ = 0;
  clear_has_score();
}
::google::protobuf::int32 CMsgClientLBSGetLBEntriesResponse_Entry::score() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry.score)
  return score_;
}
void CMsgClientLBSGetLBEntriesResponse_Entry::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry.score)
}

// optional bytes details = 4;
bool CMsgClientLBSGetLBEntriesResponse_Entry::has_details() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientLBSGetLBEntriesResponse_Entry::set_has_details() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientLBSGetLBEntriesResponse_Entry::clear_has_details() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientLBSGetLBEntriesResponse_Entry::clear_details() {
  details_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_details();
}
const ::std::string& CMsgClientLBSGetLBEntriesResponse_Entry::details() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry.details)
  return details_.GetNoArena();
}
void CMsgClientLBSGetLBEntriesResponse_Entry::set_details(const ::std::string& value) {
  set_has_details();
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry.details)
}
#if LANG_CXX11
void CMsgClientLBSGetLBEntriesResponse_Entry::set_details(::std::string&& value) {
  set_has_details();
  details_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry.details)
}
#endif
void CMsgClientLBSGetLBEntriesResponse_Entry::set_details(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_details();
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry.details)
}
void CMsgClientLBSGetLBEntriesResponse_Entry::set_details(const void* value, size_t size) {
  set_has_details();
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry.details)
}
::std::string* CMsgClientLBSGetLBEntriesResponse_Entry::mutable_details() {
  set_has_details();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry.details)
  return details_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLBSGetLBEntriesResponse_Entry::release_details() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry.details)
  clear_has_details();
  return details_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLBSGetLBEntriesResponse_Entry::set_allocated_details(::std::string* details) {
  if (details != NULL) {
    set_has_details();
  } else {
    clear_has_details();
  }
  details_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), details);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry.details)
}

// optional fixed64 ugc_id = 5;
bool CMsgClientLBSGetLBEntriesResponse_Entry::has_ugc_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientLBSGetLBEntriesResponse_Entry::set_has_ugc_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientLBSGetLBEntriesResponse_Entry::clear_has_ugc_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientLBSGetLBEntriesResponse_Entry::clear_ugc_id() {
  ugc_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ugc_id();
}
::google::protobuf::uint64 CMsgClientLBSGetLBEntriesResponse_Entry::ugc_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry.ugc_id)
  return ugc_id_;
}
void CMsgClientLBSGetLBEntriesResponse_Entry::set_ugc_id(::google::protobuf::uint64 value) {
  set_has_ugc_id();
  ugc_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry.ugc_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLBSGetLBEntriesResponse::kEresultFieldNumber;
const int CMsgClientLBSGetLBEntriesResponse::kLeaderboardEntryCountFieldNumber;
const int CMsgClientLBSGetLBEntriesResponse::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLBSGetLBEntriesResponse::CMsgClientLBSGetLBEntriesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLBSGetLBEntriesResponse)
}
CMsgClientLBSGetLBEntriesResponse::CMsgClientLBSGetLBEntriesResponse(const CMsgClientLBSGetLBEntriesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&leaderboard_entry_count_, &from.leaderboard_entry_count_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&leaderboard_entry_count_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLBSGetLBEntriesResponse)
}

void CMsgClientLBSGetLBEntriesResponse::SharedCtor() {
  _cached_size_ = 0;
  leaderboard_entry_count_ = 0;
  eresult_ = 2;
}

CMsgClientLBSGetLBEntriesResponse::~CMsgClientLBSGetLBEntriesResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  SharedDtor();
}

void CMsgClientLBSGetLBEntriesResponse::SharedDtor() {
}

void CMsgClientLBSGetLBEntriesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLBSGetLBEntriesResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientLBSGetLBEntriesResponse& CMsgClientLBSGetLBEntriesResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientLBSGetLBEntriesResponse* CMsgClientLBSGetLBEntriesResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientLBSGetLBEntriesResponse* n = new CMsgClientLBSGetLBEntriesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientLBSGetLBEntriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  entries_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    leaderboard_entry_count_ = 0;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientLBSGetLBEntriesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leaderboard_entry_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_leaderboard_entry_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_entry_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry entries = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  return false;
#undef DO_
}

void CMsgClientLBSGetLBEntriesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 leaderboard_entry_count = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderboard_entry_count(), output);
  }

  // repeated .proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry entries = 3;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entries(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLBSGetLBEntriesResponse)
}

::google::protobuf::uint8* CMsgClientLBSGetLBEntriesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 leaderboard_entry_count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leaderboard_entry_count(), target);
  }

  // repeated .proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry entries = 3;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->entries(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  return target;
}

size_t CMsgClientLBSGetLBEntriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry entries = 3;
  {
    unsigned int count = this->entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 leaderboard_entry_count = 2;
    if (has_leaderboard_entry_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_entry_count());
    }

    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLBSGetLBEntriesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLBSGetLBEntriesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientLBSGetLBEntriesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLBSGetLBEntriesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLBSGetLBEntriesResponse)
    MergeFrom(*source);
  }
}

void CMsgClientLBSGetLBEntriesResponse::MergeFrom(const CMsgClientLBSGetLBEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      leaderboard_entry_count_ = from.leaderboard_entry_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLBSGetLBEntriesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLBSGetLBEntriesResponse::CopyFrom(const CMsgClientLBSGetLBEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLBSGetLBEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSGetLBEntriesResponse::IsInitialized() const {
  return true;
}

void CMsgClientLBSGetLBEntriesResponse::Swap(CMsgClientLBSGetLBEntriesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLBSGetLBEntriesResponse::InternalSwap(CMsgClientLBSGetLBEntriesResponse* other) {
  entries_.InternalSwap(&other->entries_);
  std::swap(leaderboard_entry_count_, other->leaderboard_entry_count_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientLBSGetLBEntriesResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientLBSGetLBEntriesResponse

// optional int32 eresult = 1 [default = 2];
bool CMsgClientLBSGetLBEntriesResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientLBSGetLBEntriesResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientLBSGetLBEntriesResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientLBSGetLBEntriesResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientLBSGetLBEntriesResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSGetLBEntriesResponse.eresult)
  return eresult_;
}
void CMsgClientLBSGetLBEntriesResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSGetLBEntriesResponse.eresult)
}

// optional int32 leaderboard_entry_count = 2;
bool CMsgClientLBSGetLBEntriesResponse::has_leaderboard_entry_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientLBSGetLBEntriesResponse::set_has_leaderboard_entry_count() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientLBSGetLBEntriesResponse::clear_has_leaderboard_entry_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientLBSGetLBEntriesResponse::clear_leaderboard_entry_count() {
  leaderboard_entry_count_ = 0;
  clear_has_leaderboard_entry_count();
}
::google::protobuf::int32 CMsgClientLBSGetLBEntriesResponse::leaderboard_entry_count() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSGetLBEntriesResponse.leaderboard_entry_count)
  return leaderboard_entry_count_;
}
void CMsgClientLBSGetLBEntriesResponse::set_leaderboard_entry_count(::google::protobuf::int32 value) {
  set_has_leaderboard_entry_count();
  leaderboard_entry_count_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLBSGetLBEntriesResponse.leaderboard_entry_count)
}

// repeated .proto.steam.CMsgClientLBSGetLBEntriesResponse.Entry entries = 3;
int CMsgClientLBSGetLBEntriesResponse::entries_size() const {
  return entries_.size();
}
void CMsgClientLBSGetLBEntriesResponse::clear_entries() {
  entries_.Clear();
}
const ::proto::steam::CMsgClientLBSGetLBEntriesResponse_Entry& CMsgClientLBSGetLBEntriesResponse::entries(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLBSGetLBEntriesResponse.entries)
  return entries_.Get(index);
}
::proto::steam::CMsgClientLBSGetLBEntriesResponse_Entry* CMsgClientLBSGetLBEntriesResponse::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLBSGetLBEntriesResponse.entries)
  return entries_.Mutable(index);
}
::proto::steam::CMsgClientLBSGetLBEntriesResponse_Entry* CMsgClientLBSGetLBEntriesResponse::add_entries() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientLBSGetLBEntriesResponse.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientLBSGetLBEntriesResponse_Entry >*
CMsgClientLBSGetLBEntriesResponse::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientLBSGetLBEntriesResponse.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientLBSGetLBEntriesResponse_Entry >&
CMsgClientLBSGetLBEntriesResponse::entries() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientLBSGetLBEntriesResponse.entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::kAppIdFieldNumber;
const int CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::kForeverFieldNumber;
const int CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::kLastTwoWeeksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::CMsgClientAppMinutesPlayedData_AppMinutesPlayedData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
}
CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::CMsgClientAppMinutesPlayedData_AppMinutesPlayedData(const CMsgClientAppMinutesPlayedData_AppMinutesPlayedData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&last_two_weeks_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(last_two_weeks_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&last_two_weeks_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(last_two_weeks_));
}

CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::~CMsgClientAppMinutesPlayedData_AppMinutesPlayedData() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  SharedDtor();
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::SharedDtor() {
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientAppMinutesPlayedData_AppMinutesPlayedData& CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientAppMinutesPlayedData_AppMinutesPlayedData* CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::New(::google::protobuf::Arena* arena) const {
  CMsgClientAppMinutesPlayedData_AppMinutesPlayedData* n = new CMsgClientAppMinutesPlayedData_AppMinutesPlayedData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&last_two_weeks_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(last_two_weeks_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 forever = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_forever();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forever_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_two_weeks = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_last_two_weeks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_two_weeks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  return false;
#undef DO_
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 forever = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->forever(), output);
  }

  // optional int32 last_two_weeks = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->last_two_weeks(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
}

::google::protobuf::uint8* CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional int32 forever = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->forever(), target);
  }

  // optional int32 last_two_weeks = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->last_two_weeks(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  return target;
}

size_t CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 forever = 2;
    if (has_forever()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forever());
    }

    // optional int32 last_two_weeks = 3;
    if (has_last_two_weeks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_two_weeks());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAppMinutesPlayedData_AppMinutesPlayedData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientAppMinutesPlayedData_AppMinutesPlayedData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
    MergeFrom(*source);
  }
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::MergeFrom(const CMsgClientAppMinutesPlayedData_AppMinutesPlayedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      forever_ = from.forever_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_two_weeks_ = from.last_two_weeks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::CopyFrom(const CMsgClientAppMinutesPlayedData_AppMinutesPlayedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::IsInitialized() const {
  return true;
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::Swap(CMsgClientAppMinutesPlayedData_AppMinutesPlayedData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::InternalSwap(CMsgClientAppMinutesPlayedData_AppMinutesPlayedData* other) {
  std::swap(app_id_, other->app_id_);
  std::swap(forever_, other->forever_);
  std::swap(last_two_weeks_, other->last_two_weeks_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientAppMinutesPlayedData_AppMinutesPlayedData

// optional uint32 app_id = 1;
bool CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData.app_id)
  return app_id_;
}
void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData.app_id)
}

// optional int32 forever = 2;
bool CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::has_forever() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::set_has_forever() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::clear_has_forever() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::clear_forever() {
  forever_ = 0;
  clear_has_forever();
}
::google::protobuf::int32 CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::forever() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData.forever)
  return forever_;
}
void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::set_forever(::google::protobuf::int32 value) {
  set_has_forever();
  forever_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData.forever)
}

// optional int32 last_two_weeks = 3;
bool CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::has_last_two_weeks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::set_has_last_two_weeks() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::clear_has_last_two_weeks() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::clear_last_two_weeks() {
  last_two_weeks_ = 0;
  clear_has_last_two_weeks();
}
::google::protobuf::int32 CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::last_two_weeks() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData.last_two_weeks)
  return last_two_weeks_;
}
void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::set_last_two_weeks(::google::protobuf::int32 value) {
  set_has_last_two_weeks();
  last_two_weeks_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData.last_two_weeks)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAppMinutesPlayedData::kMinutesPlayedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAppMinutesPlayedData::CMsgClientAppMinutesPlayedData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAppMinutesPlayedData)
}
CMsgClientAppMinutesPlayedData::CMsgClientAppMinutesPlayedData(const CMsgClientAppMinutesPlayedData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      minutes_played_(from.minutes_played_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAppMinutesPlayedData)
}

void CMsgClientAppMinutesPlayedData::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClientAppMinutesPlayedData::~CMsgClientAppMinutesPlayedData() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAppMinutesPlayedData)
  SharedDtor();
}

void CMsgClientAppMinutesPlayedData::SharedDtor() {
}

void CMsgClientAppMinutesPlayedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAppMinutesPlayedData::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientAppMinutesPlayedData& CMsgClientAppMinutesPlayedData::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientAppMinutesPlayedData* CMsgClientAppMinutesPlayedData::New(::google::protobuf::Arena* arena) const {
  CMsgClientAppMinutesPlayedData* n = new CMsgClientAppMinutesPlayedData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientAppMinutesPlayedData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAppMinutesPlayedData)
  minutes_played_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientAppMinutesPlayedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAppMinutesPlayedData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData minutes_played = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_minutes_played()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAppMinutesPlayedData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAppMinutesPlayedData)
  return false;
#undef DO_
}

void CMsgClientAppMinutesPlayedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAppMinutesPlayedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData minutes_played = 1;
  for (unsigned int i = 0, n = this->minutes_played_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->minutes_played(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAppMinutesPlayedData)
}

::google::protobuf::uint8* CMsgClientAppMinutesPlayedData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAppMinutesPlayedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData minutes_played = 1;
  for (unsigned int i = 0, n = this->minutes_played_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->minutes_played(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAppMinutesPlayedData)
  return target;
}

size_t CMsgClientAppMinutesPlayedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAppMinutesPlayedData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData minutes_played = 1;
  {
    unsigned int count = this->minutes_played_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->minutes_played(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAppMinutesPlayedData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAppMinutesPlayedData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAppMinutesPlayedData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientAppMinutesPlayedData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAppMinutesPlayedData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAppMinutesPlayedData)
    MergeFrom(*source);
  }
}

void CMsgClientAppMinutesPlayedData::MergeFrom(const CMsgClientAppMinutesPlayedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAppMinutesPlayedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  minutes_played_.MergeFrom(from.minutes_played_);
}

void CMsgClientAppMinutesPlayedData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAppMinutesPlayedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAppMinutesPlayedData::CopyFrom(const CMsgClientAppMinutesPlayedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAppMinutesPlayedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppMinutesPlayedData::IsInitialized() const {
  return true;
}

void CMsgClientAppMinutesPlayedData::Swap(CMsgClientAppMinutesPlayedData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAppMinutesPlayedData::InternalSwap(CMsgClientAppMinutesPlayedData* other) {
  minutes_played_.InternalSwap(&other->minutes_played_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientAppMinutesPlayedData::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientAppMinutesPlayedData

// repeated .proto.steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData minutes_played = 1;
int CMsgClientAppMinutesPlayedData::minutes_played_size() const {
  return minutes_played_.size();
}
void CMsgClientAppMinutesPlayedData::clear_minutes_played() {
  minutes_played_.Clear();
}
const ::proto::steam::CMsgClientAppMinutesPlayedData_AppMinutesPlayedData& CMsgClientAppMinutesPlayedData::minutes_played(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAppMinutesPlayedData.minutes_played)
  return minutes_played_.Get(index);
}
::proto::steam::CMsgClientAppMinutesPlayedData_AppMinutesPlayedData* CMsgClientAppMinutesPlayedData::mutable_minutes_played(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientAppMinutesPlayedData.minutes_played)
  return minutes_played_.Mutable(index);
}
::proto::steam::CMsgClientAppMinutesPlayedData_AppMinutesPlayedData* CMsgClientAppMinutesPlayedData::add_minutes_played() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientAppMinutesPlayedData.minutes_played)
  return minutes_played_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientAppMinutesPlayedData_AppMinutesPlayedData >*
CMsgClientAppMinutesPlayedData::mutable_minutes_played() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientAppMinutesPlayedData.minutes_played)
  return &minutes_played_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientAppMinutesPlayedData_AppMinutesPlayedData >&
CMsgClientAppMinutesPlayedData::minutes_played() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientAppMinutesPlayedData.minutes_played)
  return minutes_played_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientIsLimitedAccount::kBisLimitedAccountFieldNumber;
const int CMsgClientIsLimitedAccount::kBisCommunityBannedFieldNumber;
const int CMsgClientIsLimitedAccount::kBisLockedAccountFieldNumber;
const int CMsgClientIsLimitedAccount::kBisLimitedAccountAllowedToInviteFriendsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientIsLimitedAccount::CMsgClientIsLimitedAccount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientIsLimitedAccount)
}
CMsgClientIsLimitedAccount::CMsgClientIsLimitedAccount(const CMsgClientIsLimitedAccount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bis_limited_account_, &from.bis_limited_account_,
    reinterpret_cast<char*>(&bis_limited_account_allowed_to_invite_friends_) -
    reinterpret_cast<char*>(&bis_limited_account_) + sizeof(bis_limited_account_allowed_to_invite_friends_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientIsLimitedAccount)
}

void CMsgClientIsLimitedAccount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bis_limited_account_, 0, reinterpret_cast<char*>(&bis_limited_account_allowed_to_invite_friends_) -
    reinterpret_cast<char*>(&bis_limited_account_) + sizeof(bis_limited_account_allowed_to_invite_friends_));
}

CMsgClientIsLimitedAccount::~CMsgClientIsLimitedAccount() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientIsLimitedAccount)
  SharedDtor();
}

void CMsgClientIsLimitedAccount::SharedDtor() {
}

void CMsgClientIsLimitedAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientIsLimitedAccount::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientIsLimitedAccount& CMsgClientIsLimitedAccount::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientIsLimitedAccount* CMsgClientIsLimitedAccount::New(::google::protobuf::Arena* arena) const {
  CMsgClientIsLimitedAccount* n = new CMsgClientIsLimitedAccount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientIsLimitedAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientIsLimitedAccount)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&bis_limited_account_, 0, reinterpret_cast<char*>(&bis_limited_account_allowed_to_invite_friends_) -
      reinterpret_cast<char*>(&bis_limited_account_) + sizeof(bis_limited_account_allowed_to_invite_friends_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientIsLimitedAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientIsLimitedAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bis_limited_account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_bis_limited_account();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bis_limited_account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bis_community_banned = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bis_community_banned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bis_community_banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bis_locked_account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_bis_locked_account();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bis_locked_account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bis_limited_account_allowed_to_invite_friends = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_bis_limited_account_allowed_to_invite_friends();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bis_limited_account_allowed_to_invite_friends_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientIsLimitedAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientIsLimitedAccount)
  return false;
#undef DO_
}

void CMsgClientIsLimitedAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientIsLimitedAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bis_limited_account = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bis_limited_account(), output);
  }

  // optional bool bis_community_banned = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bis_community_banned(), output);
  }

  // optional bool bis_locked_account = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bis_locked_account(), output);
  }

  // optional bool bis_limited_account_allowed_to_invite_friends = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bis_limited_account_allowed_to_invite_friends(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientIsLimitedAccount)
}

::google::protobuf::uint8* CMsgClientIsLimitedAccount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientIsLimitedAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bis_limited_account = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bis_limited_account(), target);
  }

  // optional bool bis_community_banned = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bis_community_banned(), target);
  }

  // optional bool bis_locked_account = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bis_locked_account(), target);
  }

  // optional bool bis_limited_account_allowed_to_invite_friends = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bis_limited_account_allowed_to_invite_friends(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientIsLimitedAccount)
  return target;
}

size_t CMsgClientIsLimitedAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientIsLimitedAccount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bool bis_limited_account = 1;
    if (has_bis_limited_account()) {
      total_size += 1 + 1;
    }

    // optional bool bis_community_banned = 2;
    if (has_bis_community_banned()) {
      total_size += 1 + 1;
    }

    // optional bool bis_locked_account = 3;
    if (has_bis_locked_account()) {
      total_size += 1 + 1;
    }

    // optional bool bis_limited_account_allowed_to_invite_friends = 4;
    if (has_bis_limited_account_allowed_to_invite_friends()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientIsLimitedAccount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientIsLimitedAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientIsLimitedAccount* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientIsLimitedAccount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientIsLimitedAccount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientIsLimitedAccount)
    MergeFrom(*source);
  }
}

void CMsgClientIsLimitedAccount::MergeFrom(const CMsgClientIsLimitedAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientIsLimitedAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      bis_limited_account_ = from.bis_limited_account_;
    }
    if (cached_has_bits & 0x00000002u) {
      bis_community_banned_ = from.bis_community_banned_;
    }
    if (cached_has_bits & 0x00000004u) {
      bis_locked_account_ = from.bis_locked_account_;
    }
    if (cached_has_bits & 0x00000008u) {
      bis_limited_account_allowed_to_invite_friends_ = from.bis_limited_account_allowed_to_invite_friends_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientIsLimitedAccount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientIsLimitedAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientIsLimitedAccount::CopyFrom(const CMsgClientIsLimitedAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientIsLimitedAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientIsLimitedAccount::IsInitialized() const {
  return true;
}

void CMsgClientIsLimitedAccount::Swap(CMsgClientIsLimitedAccount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientIsLimitedAccount::InternalSwap(CMsgClientIsLimitedAccount* other) {
  std::swap(bis_limited_account_, other->bis_limited_account_);
  std::swap(bis_community_banned_, other->bis_community_banned_);
  std::swap(bis_locked_account_, other->bis_locked_account_);
  std::swap(bis_limited_account_allowed_to_invite_friends_, other->bis_limited_account_allowed_to_invite_friends_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientIsLimitedAccount::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientIsLimitedAccount

// optional bool bis_limited_account = 1;
bool CMsgClientIsLimitedAccount::has_bis_limited_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientIsLimitedAccount::set_has_bis_limited_account() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientIsLimitedAccount::clear_has_bis_limited_account() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientIsLimitedAccount::clear_bis_limited_account() {
  bis_limited_account_ = false;
  clear_has_bis_limited_account();
}
bool CMsgClientIsLimitedAccount::bis_limited_account() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientIsLimitedAccount.bis_limited_account)
  return bis_limited_account_;
}
void CMsgClientIsLimitedAccount::set_bis_limited_account(bool value) {
  set_has_bis_limited_account();
  bis_limited_account_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientIsLimitedAccount.bis_limited_account)
}

// optional bool bis_community_banned = 2;
bool CMsgClientIsLimitedAccount::has_bis_community_banned() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientIsLimitedAccount::set_has_bis_community_banned() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientIsLimitedAccount::clear_has_bis_community_banned() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientIsLimitedAccount::clear_bis_community_banned() {
  bis_community_banned_ = false;
  clear_has_bis_community_banned();
}
bool CMsgClientIsLimitedAccount::bis_community_banned() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientIsLimitedAccount.bis_community_banned)
  return bis_community_banned_;
}
void CMsgClientIsLimitedAccount::set_bis_community_banned(bool value) {
  set_has_bis_community_banned();
  bis_community_banned_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientIsLimitedAccount.bis_community_banned)
}

// optional bool bis_locked_account = 3;
bool CMsgClientIsLimitedAccount::has_bis_locked_account() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientIsLimitedAccount::set_has_bis_locked_account() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientIsLimitedAccount::clear_has_bis_locked_account() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientIsLimitedAccount::clear_bis_locked_account() {
  bis_locked_account_ = false;
  clear_has_bis_locked_account();
}
bool CMsgClientIsLimitedAccount::bis_locked_account() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientIsLimitedAccount.bis_locked_account)
  return bis_locked_account_;
}
void CMsgClientIsLimitedAccount::set_bis_locked_account(bool value) {
  set_has_bis_locked_account();
  bis_locked_account_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientIsLimitedAccount.bis_locked_account)
}

// optional bool bis_limited_account_allowed_to_invite_friends = 4;
bool CMsgClientIsLimitedAccount::has_bis_limited_account_allowed_to_invite_friends() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientIsLimitedAccount::set_has_bis_limited_account_allowed_to_invite_friends() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientIsLimitedAccount::clear_has_bis_limited_account_allowed_to_invite_friends() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientIsLimitedAccount::clear_bis_limited_account_allowed_to_invite_friends() {
  bis_limited_account_allowed_to_invite_friends_ = false;
  clear_has_bis_limited_account_allowed_to_invite_friends();
}
bool CMsgClientIsLimitedAccount::bis_limited_account_allowed_to_invite_friends() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientIsLimitedAccount.bis_limited_account_allowed_to_invite_friends)
  return bis_limited_account_allowed_to_invite_friends_;
}
void CMsgClientIsLimitedAccount::set_bis_limited_account_allowed_to_invite_friends(bool value) {
  set_has_bis_limited_account_allowed_to_invite_friends();
  bis_limited_account_allowed_to_invite_friends_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientIsLimitedAccount.bis_limited_account_allowed_to_invite_friends)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientServerList_Server::kServerTypeFieldNumber;
const int CMsgClientServerList_Server::kServerIpFieldNumber;
const int CMsgClientServerList_Server::kServerPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientServerList_Server::CMsgClientServerList_Server()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientServerList.Server)
}
CMsgClientServerList_Server::CMsgClientServerList_Server(const CMsgClientServerList_Server& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_type_, &from.server_type_,
    reinterpret_cast<char*>(&server_port_) -
    reinterpret_cast<char*>(&server_type_) + sizeof(server_port_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientServerList.Server)
}

void CMsgClientServerList_Server::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&server_type_, 0, reinterpret_cast<char*>(&server_port_) -
    reinterpret_cast<char*>(&server_type_) + sizeof(server_port_));
}

CMsgClientServerList_Server::~CMsgClientServerList_Server() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientServerList.Server)
  SharedDtor();
}

void CMsgClientServerList_Server::SharedDtor() {
}

void CMsgClientServerList_Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientServerList_Server::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientServerList_Server& CMsgClientServerList_Server::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientServerList_Server* CMsgClientServerList_Server::New(::google::protobuf::Arena* arena) const {
  CMsgClientServerList_Server* n = new CMsgClientServerList_Server;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientServerList_Server::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientServerList.Server)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&server_type_, 0, reinterpret_cast<char*>(&server_port_) -
      reinterpret_cast<char*>(&server_type_) + sizeof(server_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientServerList_Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientServerList.Server)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_server_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_server_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_server_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientServerList.Server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientServerList.Server)
  return false;
#undef DO_
}

void CMsgClientServerList_Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientServerList.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_type(), output);
  }

  // optional uint32 server_ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_ip(), output);
  }

  // optional uint32 server_port = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientServerList.Server)
}

::google::protobuf::uint8* CMsgClientServerList_Server::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientServerList.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_type(), target);
  }

  // optional uint32 server_ip = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_ip(), target);
  }

  // optional uint32 server_port = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientServerList.Server)
  return target;
}

size_t CMsgClientServerList_Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientServerList.Server)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 server_type = 1;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_type());
    }

    // optional uint32 server_ip = 2;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_ip());
    }

    // optional uint32 server_port = 3;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientServerList_Server::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientServerList.Server)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientServerList_Server* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientServerList_Server>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientServerList.Server)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientServerList.Server)
    MergeFrom(*source);
  }
}

void CMsgClientServerList_Server::MergeFrom(const CMsgClientServerList_Server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientServerList.Server)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      server_type_ = from.server_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_ip_ = from.server_ip_;
    }
    if (cached_has_bits & 0x00000004u) {
      server_port_ = from.server_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientServerList_Server::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientServerList.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientServerList_Server::CopyFrom(const CMsgClientServerList_Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientServerList.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServerList_Server::IsInitialized() const {
  return true;
}

void CMsgClientServerList_Server::Swap(CMsgClientServerList_Server* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientServerList_Server::InternalSwap(CMsgClientServerList_Server* other) {
  std::swap(server_type_, other->server_type_);
  std::swap(server_ip_, other->server_ip_);
  std::swap(server_port_, other->server_port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientServerList_Server::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientServerList_Server

// optional uint32 server_type = 1;
bool CMsgClientServerList_Server::has_server_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientServerList_Server::set_has_server_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientServerList_Server::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientServerList_Server::clear_server_type() {
  server_type_ = 0u;
  clear_has_server_type();
}
::google::protobuf::uint32 CMsgClientServerList_Server::server_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientServerList.Server.server_type)
  return server_type_;
}
void CMsgClientServerList_Server::set_server_type(::google::protobuf::uint32 value) {
  set_has_server_type();
  server_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientServerList.Server.server_type)
}

// optional uint32 server_ip = 2;
bool CMsgClientServerList_Server::has_server_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientServerList_Server::set_has_server_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientServerList_Server::clear_has_server_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientServerList_Server::clear_server_ip() {
  server_ip_ = 0u;
  clear_has_server_ip();
}
::google::protobuf::uint32 CMsgClientServerList_Server::server_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientServerList.Server.server_ip)
  return server_ip_;
}
void CMsgClientServerList_Server::set_server_ip(::google::protobuf::uint32 value) {
  set_has_server_ip();
  server_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientServerList.Server.server_ip)
}

// optional uint32 server_port = 3;
bool CMsgClientServerList_Server::has_server_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientServerList_Server::set_has_server_port() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientServerList_Server::clear_has_server_port() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientServerList_Server::clear_server_port() {
  server_port_ = 0u;
  clear_has_server_port();
}
::google::protobuf::uint32 CMsgClientServerList_Server::server_port() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientServerList.Server.server_port)
  return server_port_;
}
void CMsgClientServerList_Server::set_server_port(::google::protobuf::uint32 value) {
  set_has_server_port();
  server_port_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientServerList.Server.server_port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientServerList::kServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientServerList::CMsgClientServerList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientServerList)
}
CMsgClientServerList::CMsgClientServerList(const CMsgClientServerList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      servers_(from.servers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientServerList)
}

void CMsgClientServerList::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClientServerList::~CMsgClientServerList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientServerList)
  SharedDtor();
}

void CMsgClientServerList::SharedDtor() {
}

void CMsgClientServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientServerList::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientServerList& CMsgClientServerList::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientServerList* CMsgClientServerList::New(::google::protobuf::Arena* arena) const {
  CMsgClientServerList* n = new CMsgClientServerList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientServerList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientServerList)
  servers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientServerList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientServerList.Server servers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientServerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientServerList)
  return false;
#undef DO_
}

void CMsgClientServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientServerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientServerList.Server servers = 1;
  for (unsigned int i = 0, n = this->servers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->servers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientServerList)
}

::google::protobuf::uint8* CMsgClientServerList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientServerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientServerList.Server servers = 1;
  for (unsigned int i = 0, n = this->servers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->servers(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientServerList)
  return target;
}

size_t CMsgClientServerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientServerList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientServerList.Server servers = 1;
  {
    unsigned int count = this->servers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->servers(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientServerList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientServerList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientServerList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientServerList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientServerList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientServerList)
    MergeFrom(*source);
  }
}

void CMsgClientServerList::MergeFrom(const CMsgClientServerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientServerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
}

void CMsgClientServerList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientServerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientServerList::CopyFrom(const CMsgClientServerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientServerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServerList::IsInitialized() const {
  return true;
}

void CMsgClientServerList::Swap(CMsgClientServerList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientServerList::InternalSwap(CMsgClientServerList* other) {
  servers_.InternalSwap(&other->servers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientServerList::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientServerList

// repeated .proto.steam.CMsgClientServerList.Server servers = 1;
int CMsgClientServerList::servers_size() const {
  return servers_.size();
}
void CMsgClientServerList::clear_servers() {
  servers_.Clear();
}
const ::proto::steam::CMsgClientServerList_Server& CMsgClientServerList::servers(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientServerList.servers)
  return servers_.Get(index);
}
::proto::steam::CMsgClientServerList_Server* CMsgClientServerList::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientServerList.servers)
  return servers_.Mutable(index);
}
::proto::steam::CMsgClientServerList_Server* CMsgClientServerList::add_servers() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientServerList.servers)
  return servers_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientServerList_Server >*
CMsgClientServerList::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientServerList.servers)
  return &servers_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientServerList_Server >&
CMsgClientServerList::servers() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientServerList.servers)
  return servers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRequestedClientStats_StatsToSend::kClientStatFieldNumber;
const int CMsgClientRequestedClientStats_StatsToSend::kStatAggregateMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRequestedClientStats_StatsToSend::CMsgClientRequestedClientStats_StatsToSend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
}
CMsgClientRequestedClientStats_StatsToSend::CMsgClientRequestedClientStats_StatsToSend(const CMsgClientRequestedClientStats_StatsToSend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&client_stat_, &from.client_stat_,
    reinterpret_cast<char*>(&stat_aggregate_method_) -
    reinterpret_cast<char*>(&client_stat_) + sizeof(stat_aggregate_method_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
}

void CMsgClientRequestedClientStats_StatsToSend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&client_stat_, 0, reinterpret_cast<char*>(&stat_aggregate_method_) -
    reinterpret_cast<char*>(&client_stat_) + sizeof(stat_aggregate_method_));
}

CMsgClientRequestedClientStats_StatsToSend::~CMsgClientRequestedClientStats_StatsToSend() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  SharedDtor();
}

void CMsgClientRequestedClientStats_StatsToSend::SharedDtor() {
}

void CMsgClientRequestedClientStats_StatsToSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestedClientStats_StatsToSend::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientRequestedClientStats_StatsToSend& CMsgClientRequestedClientStats_StatsToSend::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientRequestedClientStats_StatsToSend* CMsgClientRequestedClientStats_StatsToSend::New(::google::protobuf::Arena* arena) const {
  CMsgClientRequestedClientStats_StatsToSend* n = new CMsgClientRequestedClientStats_StatsToSend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientRequestedClientStats_StatsToSend::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&client_stat_, 0, reinterpret_cast<char*>(&stat_aggregate_method_) -
      reinterpret_cast<char*>(&client_stat_) + sizeof(stat_aggregate_method_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientRequestedClientStats_StatsToSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_stat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_client_stat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_stat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stat_aggregate_method = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_stat_aggregate_method();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_aggregate_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  return false;
#undef DO_
}

void CMsgClientRequestedClientStats_StatsToSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_stat = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_stat(), output);
  }

  // optional uint32 stat_aggregate_method = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_aggregate_method(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
}

::google::protobuf::uint8* CMsgClientRequestedClientStats_StatsToSend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_stat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_stat(), target);
  }

  // optional uint32 stat_aggregate_method = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stat_aggregate_method(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  return target;
}

size_t CMsgClientRequestedClientStats_StatsToSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 client_stat = 1;
    if (has_client_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_stat());
    }

    // optional uint32 stat_aggregate_method = 2;
    if (has_stat_aggregate_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_aggregate_method());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestedClientStats_StatsToSend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRequestedClientStats_StatsToSend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientRequestedClientStats_StatsToSend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
    MergeFrom(*source);
  }
}

void CMsgClientRequestedClientStats_StatsToSend::MergeFrom(const CMsgClientRequestedClientStats_StatsToSend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      client_stat_ = from.client_stat_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_aggregate_method_ = from.stat_aggregate_method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientRequestedClientStats_StatsToSend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestedClientStats_StatsToSend::CopyFrom(const CMsgClientRequestedClientStats_StatsToSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRequestedClientStats.StatsToSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestedClientStats_StatsToSend::IsInitialized() const {
  return true;
}

void CMsgClientRequestedClientStats_StatsToSend::Swap(CMsgClientRequestedClientStats_StatsToSend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRequestedClientStats_StatsToSend::InternalSwap(CMsgClientRequestedClientStats_StatsToSend* other) {
  std::swap(client_stat_, other->client_stat_);
  std::swap(stat_aggregate_method_, other->stat_aggregate_method_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientRequestedClientStats_StatsToSend::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientRequestedClientStats_StatsToSend

// optional uint32 client_stat = 1;
bool CMsgClientRequestedClientStats_StatsToSend::has_client_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientRequestedClientStats_StatsToSend::set_has_client_stat() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientRequestedClientStats_StatsToSend::clear_has_client_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientRequestedClientStats_StatsToSend::clear_client_stat() {
  client_stat_ = 0u;
  clear_has_client_stat();
}
::google::protobuf::uint32 CMsgClientRequestedClientStats_StatsToSend::client_stat() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRequestedClientStats.StatsToSend.client_stat)
  return client_stat_;
}
void CMsgClientRequestedClientStats_StatsToSend::set_client_stat(::google::protobuf::uint32 value) {
  set_has_client_stat();
  client_stat_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientRequestedClientStats.StatsToSend.client_stat)
}

// optional uint32 stat_aggregate_method = 2;
bool CMsgClientRequestedClientStats_StatsToSend::has_stat_aggregate_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientRequestedClientStats_StatsToSend::set_has_stat_aggregate_method() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientRequestedClientStats_StatsToSend::clear_has_stat_aggregate_method() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientRequestedClientStats_StatsToSend::clear_stat_aggregate_method() {
  stat_aggregate_method_ = 0u;
  clear_has_stat_aggregate_method();
}
::google::protobuf::uint32 CMsgClientRequestedClientStats_StatsToSend::stat_aggregate_method() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRequestedClientStats.StatsToSend.stat_aggregate_method)
  return stat_aggregate_method_;
}
void CMsgClientRequestedClientStats_StatsToSend::set_stat_aggregate_method(::google::protobuf::uint32 value) {
  set_has_stat_aggregate_method();
  stat_aggregate_method_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientRequestedClientStats.StatsToSend.stat_aggregate_method)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRequestedClientStats::kStatsToSendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRequestedClientStats::CMsgClientRequestedClientStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRequestedClientStats)
}
CMsgClientRequestedClientStats::CMsgClientRequestedClientStats(const CMsgClientRequestedClientStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stats_to_send_(from.stats_to_send_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRequestedClientStats)
}

void CMsgClientRequestedClientStats::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClientRequestedClientStats::~CMsgClientRequestedClientStats() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRequestedClientStats)
  SharedDtor();
}

void CMsgClientRequestedClientStats::SharedDtor() {
}

void CMsgClientRequestedClientStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestedClientStats::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientRequestedClientStats& CMsgClientRequestedClientStats::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientRequestedClientStats* CMsgClientRequestedClientStats::New(::google::protobuf::Arena* arena) const {
  CMsgClientRequestedClientStats* n = new CMsgClientRequestedClientStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientRequestedClientStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRequestedClientStats)
  stats_to_send_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientRequestedClientStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRequestedClientStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats_to_send()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRequestedClientStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRequestedClientStats)
  return false;
#undef DO_
}

void CMsgClientRequestedClientStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRequestedClientStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
  for (unsigned int i = 0, n = this->stats_to_send_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stats_to_send(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRequestedClientStats)
}

::google::protobuf::uint8* CMsgClientRequestedClientStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRequestedClientStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
  for (unsigned int i = 0, n = this->stats_to_send_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->stats_to_send(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRequestedClientStats)
  return target;
}

size_t CMsgClientRequestedClientStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRequestedClientStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
  {
    unsigned int count = this->stats_to_send_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats_to_send(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestedClientStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRequestedClientStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRequestedClientStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientRequestedClientStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRequestedClientStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRequestedClientStats)
    MergeFrom(*source);
  }
}

void CMsgClientRequestedClientStats::MergeFrom(const CMsgClientRequestedClientStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRequestedClientStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_to_send_.MergeFrom(from.stats_to_send_);
}

void CMsgClientRequestedClientStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRequestedClientStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestedClientStats::CopyFrom(const CMsgClientRequestedClientStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRequestedClientStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestedClientStats::IsInitialized() const {
  return true;
}

void CMsgClientRequestedClientStats::Swap(CMsgClientRequestedClientStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRequestedClientStats::InternalSwap(CMsgClientRequestedClientStats* other) {
  stats_to_send_.InternalSwap(&other->stats_to_send_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientRequestedClientStats::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientRequestedClientStats

// repeated .proto.steam.CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
int CMsgClientRequestedClientStats::stats_to_send_size() const {
  return stats_to_send_.size();
}
void CMsgClientRequestedClientStats::clear_stats_to_send() {
  stats_to_send_.Clear();
}
const ::proto::steam::CMsgClientRequestedClientStats_StatsToSend& CMsgClientRequestedClientStats::stats_to_send(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRequestedClientStats.stats_to_send)
  return stats_to_send_.Get(index);
}
::proto::steam::CMsgClientRequestedClientStats_StatsToSend* CMsgClientRequestedClientStats::mutable_stats_to_send(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientRequestedClientStats.stats_to_send)
  return stats_to_send_.Mutable(index);
}
::proto::steam::CMsgClientRequestedClientStats_StatsToSend* CMsgClientRequestedClientStats::add_stats_to_send() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientRequestedClientStats.stats_to_send)
  return stats_to_send_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientRequestedClientStats_StatsToSend >*
CMsgClientRequestedClientStats::mutable_stats_to_send() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientRequestedClientStats.stats_to_send)
  return &stats_to_send_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientRequestedClientStats_StatsToSend >&
CMsgClientRequestedClientStats::stats_to_send() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientRequestedClientStats.stats_to_send)
  return stats_to_send_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientStat2_StatDetail::kClientStatFieldNumber;
const int CMsgClientStat2_StatDetail::kLlValueFieldNumber;
const int CMsgClientStat2_StatDetail::kTimeOfDayFieldNumber;
const int CMsgClientStat2_StatDetail::kCellIdFieldNumber;
const int CMsgClientStat2_StatDetail::kDepotIdFieldNumber;
const int CMsgClientStat2_StatDetail::kAppIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientStat2_StatDetail::CMsgClientStat2_StatDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientStat2.StatDetail)
}
CMsgClientStat2_StatDetail::CMsgClientStat2_StatDetail(const CMsgClientStat2_StatDetail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ll_value_, &from.ll_value_,
    reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&ll_value_) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientStat2.StatDetail)
}

void CMsgClientStat2_StatDetail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ll_value_, 0, reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&ll_value_) + sizeof(app_id_));
}

CMsgClientStat2_StatDetail::~CMsgClientStat2_StatDetail() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientStat2.StatDetail)
  SharedDtor();
}

void CMsgClientStat2_StatDetail::SharedDtor() {
}

void CMsgClientStat2_StatDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientStat2_StatDetail::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientStat2_StatDetail& CMsgClientStat2_StatDetail::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientStat2_StatDetail* CMsgClientStat2_StatDetail::New(::google::protobuf::Arena* arena) const {
  CMsgClientStat2_StatDetail* n = new CMsgClientStat2_StatDetail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientStat2_StatDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientStat2.StatDetail)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&ll_value_, 0, reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&ll_value_) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientStat2_StatDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientStat2.StatDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_stat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_client_stat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_stat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ll_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ll_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ll_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_of_day = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_time_of_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_of_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cell_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_cell_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 depot_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_depot_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientStat2.StatDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientStat2.StatDetail)
  return false;
#undef DO_
}

void CMsgClientStat2_StatDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientStat2.StatDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_stat = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_stat(), output);
  }

  // optional int64 ll_value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ll_value(), output);
  }

  // optional uint32 time_of_day = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_of_day(), output);
  }

  // optional uint32 cell_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cell_id(), output);
  }

  // optional uint32 depot_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->depot_id(), output);
  }

  // optional uint32 app_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->app_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientStat2.StatDetail)
}

::google::protobuf::uint8* CMsgClientStat2_StatDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientStat2.StatDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_stat = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_stat(), target);
  }

  // optional int64 ll_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ll_value(), target);
  }

  // optional uint32 time_of_day = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_of_day(), target);
  }

  // optional uint32 cell_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cell_id(), target);
  }

  // optional uint32 depot_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->depot_id(), target);
  }

  // optional uint32 app_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->app_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientStat2.StatDetail)
  return target;
}

size_t CMsgClientStat2_StatDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientStat2.StatDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional int64 ll_value = 2;
    if (has_ll_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ll_value());
    }

    // optional uint32 client_stat = 1;
    if (has_client_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_stat());
    }

    // optional uint32 time_of_day = 3;
    if (has_time_of_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_of_day());
    }

    // optional uint32 cell_id = 4;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // optional uint32 depot_id = 5;
    if (has_depot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

    // optional uint32 app_id = 6;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientStat2_StatDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientStat2.StatDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStat2_StatDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientStat2_StatDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientStat2.StatDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientStat2.StatDetail)
    MergeFrom(*source);
  }
}

void CMsgClientStat2_StatDetail::MergeFrom(const CMsgClientStat2_StatDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientStat2.StatDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      ll_value_ = from.ll_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_stat_ = from.client_stat_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_of_day_ = from.time_of_day_;
    }
    if (cached_has_bits & 0x00000008u) {
      cell_id_ = from.cell_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      depot_id_ = from.depot_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStat2_StatDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientStat2.StatDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStat2_StatDetail::CopyFrom(const CMsgClientStat2_StatDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientStat2.StatDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStat2_StatDetail::IsInitialized() const {
  return true;
}

void CMsgClientStat2_StatDetail::Swap(CMsgClientStat2_StatDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientStat2_StatDetail::InternalSwap(CMsgClientStat2_StatDetail* other) {
  std::swap(ll_value_, other->ll_value_);
  std::swap(client_stat_, other->client_stat_);
  std::swap(time_of_day_, other->time_of_day_);
  std::swap(cell_id_, other->cell_id_);
  std::swap(depot_id_, other->depot_id_);
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientStat2_StatDetail::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientStat2_StatDetail

// optional uint32 client_stat = 1;
bool CMsgClientStat2_StatDetail::has_client_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientStat2_StatDetail::set_has_client_stat() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientStat2_StatDetail::clear_has_client_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientStat2_StatDetail::clear_client_stat() {
  client_stat_ = 0u;
  clear_has_client_stat();
}
::google::protobuf::uint32 CMsgClientStat2_StatDetail::client_stat() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStat2.StatDetail.client_stat)
  return client_stat_;
}
void CMsgClientStat2_StatDetail::set_client_stat(::google::protobuf::uint32 value) {
  set_has_client_stat();
  client_stat_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStat2.StatDetail.client_stat)
}

// optional int64 ll_value = 2;
bool CMsgClientStat2_StatDetail::has_ll_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientStat2_StatDetail::set_has_ll_value() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientStat2_StatDetail::clear_has_ll_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientStat2_StatDetail::clear_ll_value() {
  ll_value_ = GOOGLE_LONGLONG(0);
  clear_has_ll_value();
}
::google::protobuf::int64 CMsgClientStat2_StatDetail::ll_value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStat2.StatDetail.ll_value)
  return ll_value_;
}
void CMsgClientStat2_StatDetail::set_ll_value(::google::protobuf::int64 value) {
  set_has_ll_value();
  ll_value_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStat2.StatDetail.ll_value)
}

// optional uint32 time_of_day = 3;
bool CMsgClientStat2_StatDetail::has_time_of_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientStat2_StatDetail::set_has_time_of_day() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientStat2_StatDetail::clear_has_time_of_day() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientStat2_StatDetail::clear_time_of_day() {
  time_of_day_ = 0u;
  clear_has_time_of_day();
}
::google::protobuf::uint32 CMsgClientStat2_StatDetail::time_of_day() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStat2.StatDetail.time_of_day)
  return time_of_day_;
}
void CMsgClientStat2_StatDetail::set_time_of_day(::google::protobuf::uint32 value) {
  set_has_time_of_day();
  time_of_day_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStat2.StatDetail.time_of_day)
}

// optional uint32 cell_id = 4;
bool CMsgClientStat2_StatDetail::has_cell_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientStat2_StatDetail::set_has_cell_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientStat2_StatDetail::clear_has_cell_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientStat2_StatDetail::clear_cell_id() {
  cell_id_ = 0u;
  clear_has_cell_id();
}
::google::protobuf::uint32 CMsgClientStat2_StatDetail::cell_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStat2.StatDetail.cell_id)
  return cell_id_;
}
void CMsgClientStat2_StatDetail::set_cell_id(::google::protobuf::uint32 value) {
  set_has_cell_id();
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStat2.StatDetail.cell_id)
}

// optional uint32 depot_id = 5;
bool CMsgClientStat2_StatDetail::has_depot_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientStat2_StatDetail::set_has_depot_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientStat2_StatDetail::clear_has_depot_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientStat2_StatDetail::clear_depot_id() {
  depot_id_ = 0u;
  clear_has_depot_id();
}
::google::protobuf::uint32 CMsgClientStat2_StatDetail::depot_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStat2.StatDetail.depot_id)
  return depot_id_;
}
void CMsgClientStat2_StatDetail::set_depot_id(::google::protobuf::uint32 value) {
  set_has_depot_id();
  depot_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStat2.StatDetail.depot_id)
}

// optional uint32 app_id = 6;
bool CMsgClientStat2_StatDetail::has_app_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientStat2_StatDetail::set_has_app_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientStat2_StatDetail::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientStat2_StatDetail::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientStat2_StatDetail::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStat2.StatDetail.app_id)
  return app_id_;
}
void CMsgClientStat2_StatDetail::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStat2.StatDetail.app_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientStat2::kStatDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientStat2::CMsgClientStat2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientStat2)
}
CMsgClientStat2::CMsgClientStat2(const CMsgClientStat2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stat_detail_(from.stat_detail_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientStat2)
}

void CMsgClientStat2::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClientStat2::~CMsgClientStat2() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientStat2)
  SharedDtor();
}

void CMsgClientStat2::SharedDtor() {
}

void CMsgClientStat2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientStat2::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientStat2& CMsgClientStat2::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientStat2* CMsgClientStat2::New(::google::protobuf::Arena* arena) const {
  CMsgClientStat2* n = new CMsgClientStat2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientStat2::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientStat2)
  stat_detail_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientStat2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientStat2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientStat2.StatDetail stat_detail = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stat_detail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientStat2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientStat2)
  return false;
#undef DO_
}

void CMsgClientStat2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientStat2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientStat2.StatDetail stat_detail = 1;
  for (unsigned int i = 0, n = this->stat_detail_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stat_detail(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientStat2)
}

::google::protobuf::uint8* CMsgClientStat2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientStat2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientStat2.StatDetail stat_detail = 1;
  for (unsigned int i = 0, n = this->stat_detail_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->stat_detail(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientStat2)
  return target;
}

size_t CMsgClientStat2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientStat2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientStat2.StatDetail stat_detail = 1;
  {
    unsigned int count = this->stat_detail_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stat_detail(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientStat2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientStat2)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStat2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientStat2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientStat2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientStat2)
    MergeFrom(*source);
  }
}

void CMsgClientStat2::MergeFrom(const CMsgClientStat2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientStat2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_detail_.MergeFrom(from.stat_detail_);
}

void CMsgClientStat2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientStat2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStat2::CopyFrom(const CMsgClientStat2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientStat2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStat2::IsInitialized() const {
  return true;
}

void CMsgClientStat2::Swap(CMsgClientStat2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientStat2::InternalSwap(CMsgClientStat2* other) {
  stat_detail_.InternalSwap(&other->stat_detail_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientStat2::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientStat2

// repeated .proto.steam.CMsgClientStat2.StatDetail stat_detail = 1;
int CMsgClientStat2::stat_detail_size() const {
  return stat_detail_.size();
}
void CMsgClientStat2::clear_stat_detail() {
  stat_detail_.Clear();
}
const ::proto::steam::CMsgClientStat2_StatDetail& CMsgClientStat2::stat_detail(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStat2.stat_detail)
  return stat_detail_.Get(index);
}
::proto::steam::CMsgClientStat2_StatDetail* CMsgClientStat2::mutable_stat_detail(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientStat2.stat_detail)
  return stat_detail_.Mutable(index);
}
::proto::steam::CMsgClientStat2_StatDetail* CMsgClientStat2::add_stat_detail() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientStat2.stat_detail)
  return stat_detail_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientStat2_StatDetail >*
CMsgClientStat2::mutable_stat_detail() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientStat2.stat_detail)
  return &stat_detail_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientStat2_StatDetail >&
CMsgClientStat2::stat_detail() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientStat2.stat_detail)
  return stat_detail_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSCreateLobby::kAppIdFieldNumber;
const int CMsgClientMMSCreateLobby::kMaxMembersFieldNumber;
const int CMsgClientMMSCreateLobby::kLobbyTypeFieldNumber;
const int CMsgClientMMSCreateLobby::kLobbyFlagsFieldNumber;
const int CMsgClientMMSCreateLobby::kCellIdFieldNumber;
const int CMsgClientMMSCreateLobby::kPublicIpFieldNumber;
const int CMsgClientMMSCreateLobby::kMetadataFieldNumber;
const int CMsgClientMMSCreateLobby::kPersonaNameOwnerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSCreateLobby::CMsgClientMMSCreateLobby()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSCreateLobby)
}
CMsgClientMMSCreateLobby::CMsgClientMMSCreateLobby(const CMsgClientMMSCreateLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  persona_name_owner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name_owner()) {
    persona_name_owner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_owner_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&public_ip_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(public_ip_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSCreateLobby)
}

void CMsgClientMMSCreateLobby::SharedCtor() {
  _cached_size_ = 0;
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  persona_name_owner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&public_ip_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(public_ip_));
}

CMsgClientMMSCreateLobby::~CMsgClientMMSCreateLobby() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSCreateLobby)
  SharedDtor();
}

void CMsgClientMMSCreateLobby::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  persona_name_owner_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSCreateLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSCreateLobby::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSCreateLobby& CMsgClientMMSCreateLobby::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSCreateLobby* CMsgClientMMSCreateLobby::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSCreateLobby* n = new CMsgClientMMSCreateLobby;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSCreateLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSCreateLobby)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_metadata()) {
      GOOGLE_DCHECK(!metadata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*metadata_.UnsafeRawStringPointer())->clear();
    }
    if (has_persona_name_owner()) {
      GOOGLE_DCHECK(!persona_name_owner_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*persona_name_owner_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&public_ip_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(public_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSCreateLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSCreateLobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_members = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_max_members();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lobby_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_lobby_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lobby_flags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_lobby_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cell_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_cell_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 public_ip = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_public_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name_owner = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name_owner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name_owner().data(), this->persona_name_owner().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientMMSCreateLobby.persona_name_owner");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSCreateLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSCreateLobby)
  return false;
#undef DO_
}

void CMsgClientMMSCreateLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSCreateLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 max_members = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_members(), output);
  }

  // optional int32 lobby_type = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lobby_type(), output);
  }

  // optional int32 lobby_flags = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lobby_flags(), output);
  }

  // optional uint32 cell_id = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cell_id(), output);
  }

  // optional uint32 public_ip = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->public_ip(), output);
  }

  // optional bytes metadata = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->metadata(), output);
  }

  // optional string persona_name_owner = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name_owner().data(), this->persona_name_owner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSCreateLobby.persona_name_owner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->persona_name_owner(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSCreateLobby)
}

::google::protobuf::uint8* CMsgClientMMSCreateLobby::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSCreateLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional int32 max_members = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_members(), target);
  }

  // optional int32 lobby_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lobby_type(), target);
  }

  // optional int32 lobby_flags = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lobby_flags(), target);
  }

  // optional uint32 cell_id = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cell_id(), target);
  }

  // optional uint32 public_ip = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->public_ip(), target);
  }

  // optional bytes metadata = 7;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->metadata(), target);
  }

  // optional string persona_name_owner = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name_owner().data(), this->persona_name_owner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSCreateLobby.persona_name_owner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->persona_name_owner(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSCreateLobby)
  return target;
}

size_t CMsgClientMMSCreateLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSCreateLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes metadata = 7;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

    // optional string persona_name_owner = 8;
    if (has_persona_name_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name_owner());
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 max_members = 2;
    if (has_max_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_members());
    }

    // optional int32 lobby_type = 3;
    if (has_lobby_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_type());
    }

    // optional int32 lobby_flags = 4;
    if (has_lobby_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_flags());
    }

    // optional uint32 cell_id = 5;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // optional uint32 public_ip = 6;
    if (has_public_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_ip());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSCreateLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSCreateLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSCreateLobby* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSCreateLobby>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSCreateLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSCreateLobby)
    MergeFrom(*source);
  }
}

void CMsgClientMMSCreateLobby::MergeFrom(const CMsgClientMMSCreateLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSCreateLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_metadata();
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_persona_name_owner();
      persona_name_owner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_owner_);
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_members_ = from.max_members_;
    }
    if (cached_has_bits & 0x00000010u) {
      lobby_type_ = from.lobby_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      lobby_flags_ = from.lobby_flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      cell_id_ = from.cell_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      public_ip_ = from.public_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSCreateLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSCreateLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSCreateLobby::CopyFrom(const CMsgClientMMSCreateLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSCreateLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSCreateLobby::IsInitialized() const {
  return true;
}

void CMsgClientMMSCreateLobby::Swap(CMsgClientMMSCreateLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSCreateLobby::InternalSwap(CMsgClientMMSCreateLobby* other) {
  metadata_.Swap(&other->metadata_);
  persona_name_owner_.Swap(&other->persona_name_owner_);
  std::swap(app_id_, other->app_id_);
  std::swap(max_members_, other->max_members_);
  std::swap(lobby_type_, other->lobby_type_);
  std::swap(lobby_flags_, other->lobby_flags_);
  std::swap(cell_id_, other->cell_id_);
  std::swap(public_ip_, other->public_ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSCreateLobby::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSCreateLobby

// optional uint32 app_id = 1;
bool CMsgClientMMSCreateLobby::has_app_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientMMSCreateLobby::set_has_app_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientMMSCreateLobby::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientMMSCreateLobby::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientMMSCreateLobby::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSCreateLobby.app_id)
  return app_id_;
}
void CMsgClientMMSCreateLobby::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSCreateLobby.app_id)
}

// optional int32 max_members = 2;
bool CMsgClientMMSCreateLobby::has_max_members() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientMMSCreateLobby::set_has_max_members() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientMMSCreateLobby::clear_has_max_members() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientMMSCreateLobby::clear_max_members() {
  max_members_ = 0;
  clear_has_max_members();
}
::google::protobuf::int32 CMsgClientMMSCreateLobby::max_members() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSCreateLobby.max_members)
  return max_members_;
}
void CMsgClientMMSCreateLobby::set_max_members(::google::protobuf::int32 value) {
  set_has_max_members();
  max_members_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSCreateLobby.max_members)
}

// optional int32 lobby_type = 3;
bool CMsgClientMMSCreateLobby::has_lobby_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientMMSCreateLobby::set_has_lobby_type() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientMMSCreateLobby::clear_has_lobby_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientMMSCreateLobby::clear_lobby_type() {
  lobby_type_ = 0;
  clear_has_lobby_type();
}
::google::protobuf::int32 CMsgClientMMSCreateLobby::lobby_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSCreateLobby.lobby_type)
  return lobby_type_;
}
void CMsgClientMMSCreateLobby::set_lobby_type(::google::protobuf::int32 value) {
  set_has_lobby_type();
  lobby_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSCreateLobby.lobby_type)
}

// optional int32 lobby_flags = 4;
bool CMsgClientMMSCreateLobby::has_lobby_flags() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientMMSCreateLobby::set_has_lobby_flags() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientMMSCreateLobby::clear_has_lobby_flags() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientMMSCreateLobby::clear_lobby_flags() {
  lobby_flags_ = 0;
  clear_has_lobby_flags();
}
::google::protobuf::int32 CMsgClientMMSCreateLobby::lobby_flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSCreateLobby.lobby_flags)
  return lobby_flags_;
}
void CMsgClientMMSCreateLobby::set_lobby_flags(::google::protobuf::int32 value) {
  set_has_lobby_flags();
  lobby_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSCreateLobby.lobby_flags)
}

// optional uint32 cell_id = 5;
bool CMsgClientMMSCreateLobby::has_cell_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientMMSCreateLobby::set_has_cell_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientMMSCreateLobby::clear_has_cell_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientMMSCreateLobby::clear_cell_id() {
  cell_id_ = 0u;
  clear_has_cell_id();
}
::google::protobuf::uint32 CMsgClientMMSCreateLobby::cell_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSCreateLobby.cell_id)
  return cell_id_;
}
void CMsgClientMMSCreateLobby::set_cell_id(::google::protobuf::uint32 value) {
  set_has_cell_id();
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSCreateLobby.cell_id)
}

// optional uint32 public_ip = 6;
bool CMsgClientMMSCreateLobby::has_public_ip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgClientMMSCreateLobby::set_has_public_ip() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgClientMMSCreateLobby::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgClientMMSCreateLobby::clear_public_ip() {
  public_ip_ = 0u;
  clear_has_public_ip();
}
::google::protobuf::uint32 CMsgClientMMSCreateLobby::public_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSCreateLobby.public_ip)
  return public_ip_;
}
void CMsgClientMMSCreateLobby::set_public_ip(::google::protobuf::uint32 value) {
  set_has_public_ip();
  public_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSCreateLobby.public_ip)
}

// optional bytes metadata = 7;
bool CMsgClientMMSCreateLobby::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSCreateLobby::set_has_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSCreateLobby::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSCreateLobby::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
const ::std::string& CMsgClientMMSCreateLobby::metadata() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSCreateLobby.metadata)
  return metadata_.GetNoArena();
}
void CMsgClientMMSCreateLobby::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSCreateLobby.metadata)
}
#if LANG_CXX11
void CMsgClientMMSCreateLobby::set_metadata(::std::string&& value) {
  set_has_metadata();
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientMMSCreateLobby.metadata)
}
#endif
void CMsgClientMMSCreateLobby::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientMMSCreateLobby.metadata)
}
void CMsgClientMMSCreateLobby::set_metadata(const void* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientMMSCreateLobby.metadata)
}
::std::string* CMsgClientMMSCreateLobby::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientMMSCreateLobby.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientMMSCreateLobby::release_metadata() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientMMSCreateLobby.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientMMSCreateLobby::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientMMSCreateLobby.metadata)
}

// optional string persona_name_owner = 8;
bool CMsgClientMMSCreateLobby::has_persona_name_owner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSCreateLobby::set_has_persona_name_owner() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSCreateLobby::clear_has_persona_name_owner() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSCreateLobby::clear_persona_name_owner() {
  persona_name_owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona_name_owner();
}
const ::std::string& CMsgClientMMSCreateLobby::persona_name_owner() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSCreateLobby.persona_name_owner)
  return persona_name_owner_.GetNoArena();
}
void CMsgClientMMSCreateLobby::set_persona_name_owner(const ::std::string& value) {
  set_has_persona_name_owner();
  persona_name_owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSCreateLobby.persona_name_owner)
}
#if LANG_CXX11
void CMsgClientMMSCreateLobby::set_persona_name_owner(::std::string&& value) {
  set_has_persona_name_owner();
  persona_name_owner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientMMSCreateLobby.persona_name_owner)
}
#endif
void CMsgClientMMSCreateLobby::set_persona_name_owner(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona_name_owner();
  persona_name_owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientMMSCreateLobby.persona_name_owner)
}
void CMsgClientMMSCreateLobby::set_persona_name_owner(const char* value, size_t size) {
  set_has_persona_name_owner();
  persona_name_owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientMMSCreateLobby.persona_name_owner)
}
::std::string* CMsgClientMMSCreateLobby::mutable_persona_name_owner() {
  set_has_persona_name_owner();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientMMSCreateLobby.persona_name_owner)
  return persona_name_owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientMMSCreateLobby::release_persona_name_owner() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientMMSCreateLobby.persona_name_owner)
  clear_has_persona_name_owner();
  return persona_name_owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientMMSCreateLobby::set_allocated_persona_name_owner(::std::string* persona_name_owner) {
  if (persona_name_owner != NULL) {
    set_has_persona_name_owner();
  } else {
    clear_has_persona_name_owner();
  }
  persona_name_owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name_owner);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientMMSCreateLobby.persona_name_owner)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSCreateLobbyResponse::kAppIdFieldNumber;
const int CMsgClientMMSCreateLobbyResponse::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSCreateLobbyResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSCreateLobbyResponse::CMsgClientMMSCreateLobbyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSCreateLobbyResponse)
}
CMsgClientMMSCreateLobbyResponse::CMsgClientMMSCreateLobbyResponse(const CMsgClientMMSCreateLobbyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSCreateLobbyResponse)
}

void CMsgClientMMSCreateLobbyResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  eresult_ = 2;
}

CMsgClientMMSCreateLobbyResponse::~CMsgClientMMSCreateLobbyResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSCreateLobbyResponse)
  SharedDtor();
}

void CMsgClientMMSCreateLobbyResponse::SharedDtor() {
}

void CMsgClientMMSCreateLobbyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSCreateLobbyResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSCreateLobbyResponse& CMsgClientMMSCreateLobbyResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSCreateLobbyResponse* CMsgClientMMSCreateLobbyResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSCreateLobbyResponse* n = new CMsgClientMMSCreateLobbyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSCreateLobbyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSCreateLobbyResponse)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSCreateLobbyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSCreateLobbyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSCreateLobbyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSCreateLobbyResponse)
  return false;
#undef DO_
}

void CMsgClientMMSCreateLobbyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSCreateLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSCreateLobbyResponse)
}

::google::protobuf::uint8* CMsgClientMMSCreateLobbyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSCreateLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSCreateLobbyResponse)
  return target;
}

size_t CMsgClientMMSCreateLobbyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSCreateLobbyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 eresult = 3 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSCreateLobbyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSCreateLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSCreateLobbyResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSCreateLobbyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSCreateLobbyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSCreateLobbyResponse)
    MergeFrom(*source);
  }
}

void CMsgClientMMSCreateLobbyResponse::MergeFrom(const CMsgClientMMSCreateLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSCreateLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSCreateLobbyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSCreateLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSCreateLobbyResponse::CopyFrom(const CMsgClientMMSCreateLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSCreateLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSCreateLobbyResponse::IsInitialized() const {
  return true;
}

void CMsgClientMMSCreateLobbyResponse::Swap(CMsgClientMMSCreateLobbyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSCreateLobbyResponse::InternalSwap(CMsgClientMMSCreateLobbyResponse* other) {
  std::swap(steam_id_lobby_, other->steam_id_lobby_);
  std::swap(app_id_, other->app_id_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSCreateLobbyResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSCreateLobbyResponse

// optional uint32 app_id = 1;
bool CMsgClientMMSCreateLobbyResponse::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSCreateLobbyResponse::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSCreateLobbyResponse::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSCreateLobbyResponse::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientMMSCreateLobbyResponse::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSCreateLobbyResponse.app_id)
  return app_id_;
}
void CMsgClientMMSCreateLobbyResponse::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSCreateLobbyResponse.app_id)
}

// optional fixed64 steam_id_lobby = 2;
bool CMsgClientMMSCreateLobbyResponse::has_steam_id_lobby() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSCreateLobbyResponse::set_has_steam_id_lobby() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSCreateLobbyResponse::clear_has_steam_id_lobby() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSCreateLobbyResponse::clear_steam_id_lobby() {
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_lobby();
}
::google::protobuf::uint64 CMsgClientMMSCreateLobbyResponse::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSCreateLobbyResponse.steam_id_lobby)
  return steam_id_lobby_;
}
void CMsgClientMMSCreateLobbyResponse::set_steam_id_lobby(::google::protobuf::uint64 value) {
  set_has_steam_id_lobby();
  steam_id_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSCreateLobbyResponse.steam_id_lobby)
}

// optional int32 eresult = 3 [default = 2];
bool CMsgClientMMSCreateLobbyResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientMMSCreateLobbyResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientMMSCreateLobbyResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientMMSCreateLobbyResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientMMSCreateLobbyResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSCreateLobbyResponse.eresult)
  return eresult_;
}
void CMsgClientMMSCreateLobbyResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSCreateLobbyResponse.eresult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSJoinLobby::kAppIdFieldNumber;
const int CMsgClientMMSJoinLobby::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSJoinLobby::kPersonaNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSJoinLobby::CMsgClientMMSJoinLobby()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSJoinLobby)
}
CMsgClientMMSJoinLobby::CMsgClientMMSJoinLobby(const CMsgClientMMSJoinLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSJoinLobby)
}

void CMsgClientMMSJoinLobby::SharedCtor() {
  _cached_size_ = 0;
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
}

CMsgClientMMSJoinLobby::~CMsgClientMMSJoinLobby() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSJoinLobby)
  SharedDtor();
}

void CMsgClientMMSJoinLobby::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSJoinLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSJoinLobby::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSJoinLobby& CMsgClientMMSJoinLobby::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSJoinLobby* CMsgClientMMSJoinLobby::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSJoinLobby* n = new CMsgClientMMSJoinLobby;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSJoinLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSJoinLobby)
  if (has_persona_name()) {
    GOOGLE_DCHECK(!persona_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*persona_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSJoinLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSJoinLobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), this->persona_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientMMSJoinLobby.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSJoinLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSJoinLobby)
  return false;
#undef DO_
}

void CMsgClientMMSJoinLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSJoinLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional string persona_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSJoinLobby.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->persona_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSJoinLobby)
}

::google::protobuf::uint8* CMsgClientMMSJoinLobby::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSJoinLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional string persona_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSJoinLobby.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->persona_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSJoinLobby)
  return target;
}

size_t CMsgClientMMSJoinLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSJoinLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string persona_name = 3;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSJoinLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSJoinLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSJoinLobby* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSJoinLobby>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSJoinLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSJoinLobby)
    MergeFrom(*source);
  }
}

void CMsgClientMMSJoinLobby::MergeFrom(const CMsgClientMMSJoinLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSJoinLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_persona_name();
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSJoinLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSJoinLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSJoinLobby::CopyFrom(const CMsgClientMMSJoinLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSJoinLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSJoinLobby::IsInitialized() const {
  return true;
}

void CMsgClientMMSJoinLobby::Swap(CMsgClientMMSJoinLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSJoinLobby::InternalSwap(CMsgClientMMSJoinLobby* other) {
  persona_name_.Swap(&other->persona_name_);
  std::swap(steam_id_lobby_, other->steam_id_lobby_);
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSJoinLobby::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSJoinLobby

// optional uint32 app_id = 1;
bool CMsgClientMMSJoinLobby::has_app_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientMMSJoinLobby::set_has_app_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientMMSJoinLobby::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientMMSJoinLobby::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientMMSJoinLobby::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSJoinLobby.app_id)
  return app_id_;
}
void CMsgClientMMSJoinLobby::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSJoinLobby.app_id)
}

// optional fixed64 steam_id_lobby = 2;
bool CMsgClientMMSJoinLobby::has_steam_id_lobby() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSJoinLobby::set_has_steam_id_lobby() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSJoinLobby::clear_has_steam_id_lobby() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSJoinLobby::clear_steam_id_lobby() {
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_lobby();
}
::google::protobuf::uint64 CMsgClientMMSJoinLobby::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSJoinLobby.steam_id_lobby)
  return steam_id_lobby_;
}
void CMsgClientMMSJoinLobby::set_steam_id_lobby(::google::protobuf::uint64 value) {
  set_has_steam_id_lobby();
  steam_id_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSJoinLobby.steam_id_lobby)
}

// optional string persona_name = 3;
bool CMsgClientMMSJoinLobby::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSJoinLobby::set_has_persona_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSJoinLobby::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSJoinLobby::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona_name();
}
const ::std::string& CMsgClientMMSJoinLobby::persona_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSJoinLobby.persona_name)
  return persona_name_.GetNoArena();
}
void CMsgClientMMSJoinLobby::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSJoinLobby.persona_name)
}
#if LANG_CXX11
void CMsgClientMMSJoinLobby::set_persona_name(::std::string&& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientMMSJoinLobby.persona_name)
}
#endif
void CMsgClientMMSJoinLobby::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientMMSJoinLobby.persona_name)
}
void CMsgClientMMSJoinLobby::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientMMSJoinLobby.persona_name)
}
::std::string* CMsgClientMMSJoinLobby::mutable_persona_name() {
  set_has_persona_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientMMSJoinLobby.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientMMSJoinLobby::release_persona_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientMMSJoinLobby.persona_name)
  clear_has_persona_name();
  return persona_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientMMSJoinLobby::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != NULL) {
    set_has_persona_name();
  } else {
    clear_has_persona_name();
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientMMSJoinLobby.persona_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSJoinLobbyResponse_Member::kSteamIdFieldNumber;
const int CMsgClientMMSJoinLobbyResponse_Member::kPersonaNameFieldNumber;
const int CMsgClientMMSJoinLobbyResponse_Member::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSJoinLobbyResponse_Member::CMsgClientMMSJoinLobbyResponse_Member()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
}
CMsgClientMMSJoinLobbyResponse_Member::CMsgClientMMSJoinLobbyResponse_Member(const CMsgClientMMSJoinLobbyResponse_Member& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
}

void CMsgClientMMSJoinLobbyResponse_Member::SharedCtor() {
  _cached_size_ = 0;
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_ = GOOGLE_ULONGLONG(0);
}

CMsgClientMMSJoinLobbyResponse_Member::~CMsgClientMMSJoinLobbyResponse_Member() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  SharedDtor();
}

void CMsgClientMMSJoinLobbyResponse_Member::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSJoinLobbyResponse_Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSJoinLobbyResponse_Member::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSJoinLobbyResponse_Member& CMsgClientMMSJoinLobbyResponse_Member::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSJoinLobbyResponse_Member* CMsgClientMMSJoinLobbyResponse_Member::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSJoinLobbyResponse_Member* n = new CMsgClientMMSJoinLobbyResponse_Member;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSJoinLobbyResponse_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_persona_name()) {
      GOOGLE_DCHECK(!persona_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*persona_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_metadata()) {
      GOOGLE_DCHECK(!metadata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*metadata_.UnsafeRawStringPointer())->clear();
    }
  }
  steam_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSJoinLobbyResponse_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), this->persona_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientMMSJoinLobbyResponse.Member.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  return false;
#undef DO_
}

void CMsgClientMMSJoinLobbyResponse_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSJoinLobbyResponse.Member.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persona_name(), output);
  }

  // optional bytes metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->metadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
}

::google::protobuf::uint8* CMsgClientMMSJoinLobbyResponse_Member::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSJoinLobbyResponse.Member.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona_name(), target);
  }

  // optional bytes metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->metadata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  return target;
}

size_t CMsgClientMMSJoinLobbyResponse_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string persona_name = 2;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional bytes metadata = 3;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSJoinLobbyResponse_Member::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSJoinLobbyResponse_Member* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSJoinLobbyResponse_Member>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
    MergeFrom(*source);
  }
}

void CMsgClientMMSJoinLobbyResponse_Member::MergeFrom(const CMsgClientMMSJoinLobbyResponse_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_persona_name();
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_metadata();
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_ = from.steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSJoinLobbyResponse_Member::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSJoinLobbyResponse_Member::CopyFrom(const CMsgClientMMSJoinLobbyResponse_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSJoinLobbyResponse.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSJoinLobbyResponse_Member::IsInitialized() const {
  return true;
}

void CMsgClientMMSJoinLobbyResponse_Member::Swap(CMsgClientMMSJoinLobbyResponse_Member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSJoinLobbyResponse_Member::InternalSwap(CMsgClientMMSJoinLobbyResponse_Member* other) {
  persona_name_.Swap(&other->persona_name_);
  metadata_.Swap(&other->metadata_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSJoinLobbyResponse_Member::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSJoinLobbyResponse_Member

// optional fixed64 steam_id = 1;
bool CMsgClientMMSJoinLobbyResponse_Member::has_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientMMSJoinLobbyResponse_Member::set_has_steam_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientMMSJoinLobbyResponse_Member::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientMMSJoinLobbyResponse_Member::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgClientMMSJoinLobbyResponse_Member::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSJoinLobbyResponse.Member.steam_id)
  return steam_id_;
}
void CMsgClientMMSJoinLobbyResponse_Member::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSJoinLobbyResponse.Member.steam_id)
}

// optional string persona_name = 2;
bool CMsgClientMMSJoinLobbyResponse_Member::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSJoinLobbyResponse_Member::set_has_persona_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSJoinLobbyResponse_Member::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSJoinLobbyResponse_Member::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona_name();
}
const ::std::string& CMsgClientMMSJoinLobbyResponse_Member::persona_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSJoinLobbyResponse.Member.persona_name)
  return persona_name_.GetNoArena();
}
void CMsgClientMMSJoinLobbyResponse_Member::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSJoinLobbyResponse.Member.persona_name)
}
#if LANG_CXX11
void CMsgClientMMSJoinLobbyResponse_Member::set_persona_name(::std::string&& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientMMSJoinLobbyResponse.Member.persona_name)
}
#endif
void CMsgClientMMSJoinLobbyResponse_Member::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientMMSJoinLobbyResponse.Member.persona_name)
}
void CMsgClientMMSJoinLobbyResponse_Member::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientMMSJoinLobbyResponse.Member.persona_name)
}
::std::string* CMsgClientMMSJoinLobbyResponse_Member::mutable_persona_name() {
  set_has_persona_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientMMSJoinLobbyResponse.Member.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientMMSJoinLobbyResponse_Member::release_persona_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientMMSJoinLobbyResponse.Member.persona_name)
  clear_has_persona_name();
  return persona_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientMMSJoinLobbyResponse_Member::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != NULL) {
    set_has_persona_name();
  } else {
    clear_has_persona_name();
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientMMSJoinLobbyResponse.Member.persona_name)
}

// optional bytes metadata = 3;
bool CMsgClientMMSJoinLobbyResponse_Member::has_metadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSJoinLobbyResponse_Member::set_has_metadata() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSJoinLobbyResponse_Member::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSJoinLobbyResponse_Member::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
const ::std::string& CMsgClientMMSJoinLobbyResponse_Member::metadata() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSJoinLobbyResponse.Member.metadata)
  return metadata_.GetNoArena();
}
void CMsgClientMMSJoinLobbyResponse_Member::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSJoinLobbyResponse.Member.metadata)
}
#if LANG_CXX11
void CMsgClientMMSJoinLobbyResponse_Member::set_metadata(::std::string&& value) {
  set_has_metadata();
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientMMSJoinLobbyResponse.Member.metadata)
}
#endif
void CMsgClientMMSJoinLobbyResponse_Member::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientMMSJoinLobbyResponse.Member.metadata)
}
void CMsgClientMMSJoinLobbyResponse_Member::set_metadata(const void* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientMMSJoinLobbyResponse.Member.metadata)
}
::std::string* CMsgClientMMSJoinLobbyResponse_Member::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientMMSJoinLobbyResponse.Member.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientMMSJoinLobbyResponse_Member::release_metadata() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientMMSJoinLobbyResponse.Member.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientMMSJoinLobbyResponse_Member::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientMMSJoinLobbyResponse.Member.metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSJoinLobbyResponse::kAppIdFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kChatRoomEnterResponseFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kMaxMembersFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kLobbyTypeFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kLobbyFlagsFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kSteamIdOwnerFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kMetadataFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSJoinLobbyResponse::CMsgClientMMSJoinLobbyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSJoinLobbyResponse)
}
CMsgClientMMSJoinLobbyResponse::CMsgClientMMSJoinLobbyResponse(const CMsgClientMMSJoinLobbyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    reinterpret_cast<char*>(&lobby_flags_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(lobby_flags_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSJoinLobbyResponse)
}

void CMsgClientMMSJoinLobbyResponse::SharedCtor() {
  _cached_size_ = 0;
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&lobby_flags_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(lobby_flags_));
}

CMsgClientMMSJoinLobbyResponse::~CMsgClientMMSJoinLobbyResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSJoinLobbyResponse)
  SharedDtor();
}

void CMsgClientMMSJoinLobbyResponse::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSJoinLobbyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSJoinLobbyResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSJoinLobbyResponse& CMsgClientMMSJoinLobbyResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSJoinLobbyResponse* CMsgClientMMSJoinLobbyResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSJoinLobbyResponse* n = new CMsgClientMMSJoinLobbyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSJoinLobbyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSJoinLobbyResponse)
  members_.Clear();
  if (has_metadata()) {
    GOOGLE_DCHECK(!metadata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*metadata_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&lobby_flags_) -
      reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(lobby_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSJoinLobbyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSJoinLobbyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chat_room_enter_response = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_chat_room_enter_response();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_room_enter_response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_members = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_max_members();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lobby_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_lobby_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lobby_flags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_lobby_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_owner = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_steam_id_owner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientMMSJoinLobbyResponse.Member members = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSJoinLobbyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSJoinLobbyResponse)
  return false;
#undef DO_
}

void CMsgClientMMSJoinLobbyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSJoinLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional int32 chat_room_enter_response = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chat_room_enter_response(), output);
  }

  // optional int32 max_members = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_members(), output);
  }

  // optional int32 lobby_type = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lobby_type(), output);
  }

  // optional int32 lobby_flags = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lobby_flags(), output);
  }

  // optional fixed64 steam_id_owner = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->steam_id_owner(), output);
  }

  // optional bytes metadata = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->metadata(), output);
  }

  // repeated .proto.steam.CMsgClientMMSJoinLobbyResponse.Member members = 9;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->members(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSJoinLobbyResponse)
}

::google::protobuf::uint8* CMsgClientMMSJoinLobbyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSJoinLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional int32 chat_room_enter_response = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chat_room_enter_response(), target);
  }

  // optional int32 max_members = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_members(), target);
  }

  // optional int32 lobby_type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lobby_type(), target);
  }

  // optional int32 lobby_flags = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lobby_flags(), target);
  }

  // optional fixed64 steam_id_owner = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->steam_id_owner(), target);
  }

  // optional bytes metadata = 8;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->metadata(), target);
  }

  // repeated .proto.steam.CMsgClientMMSJoinLobbyResponse.Member members = 9;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->members(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSJoinLobbyResponse)
  return target;
}

size_t CMsgClientMMSJoinLobbyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSJoinLobbyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientMMSJoinLobbyResponse.Member members = 9;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes metadata = 8;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 chat_room_enter_response = 3;
    if (has_chat_room_enter_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_room_enter_response());
    }

    // optional int32 max_members = 4;
    if (has_max_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_members());
    }

    // optional int32 lobby_type = 5;
    if (has_lobby_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_type());
    }

    // optional fixed64 steam_id_owner = 7;
    if (has_steam_id_owner()) {
      total_size += 1 + 8;
    }

    // optional int32 lobby_flags = 6;
    if (has_lobby_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSJoinLobbyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSJoinLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSJoinLobbyResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSJoinLobbyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSJoinLobbyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSJoinLobbyResponse)
    MergeFrom(*source);
  }
}

void CMsgClientMMSJoinLobbyResponse::MergeFrom(const CMsgClientMMSJoinLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSJoinLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_metadata();
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      chat_room_enter_response_ = from.chat_room_enter_response_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_members_ = from.max_members_;
    }
    if (cached_has_bits & 0x00000020u) {
      lobby_type_ = from.lobby_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      steam_id_owner_ = from.steam_id_owner_;
    }
    if (cached_has_bits & 0x00000080u) {
      lobby_flags_ = from.lobby_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSJoinLobbyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSJoinLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSJoinLobbyResponse::CopyFrom(const CMsgClientMMSJoinLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSJoinLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSJoinLobbyResponse::IsInitialized() const {
  return true;
}

void CMsgClientMMSJoinLobbyResponse::Swap(CMsgClientMMSJoinLobbyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSJoinLobbyResponse::InternalSwap(CMsgClientMMSJoinLobbyResponse* other) {
  members_.InternalSwap(&other->members_);
  metadata_.Swap(&other->metadata_);
  std::swap(steam_id_lobby_, other->steam_id_lobby_);
  std::swap(app_id_, other->app_id_);
  std::swap(chat_room_enter_response_, other->chat_room_enter_response_);
  std::swap(max_members_, other->max_members_);
  std::swap(lobby_type_, other->lobby_type_);
  std::swap(steam_id_owner_, other->steam_id_owner_);
  std::swap(lobby_flags_, other->lobby_flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSJoinLobbyResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSJoinLobbyResponse

// optional uint32 app_id = 1;
bool CMsgClientMMSJoinLobbyResponse::has_app_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientMMSJoinLobbyResponse::set_has_app_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientMMSJoinLobbyResponse::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientMMSJoinLobbyResponse::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientMMSJoinLobbyResponse::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSJoinLobbyResponse.app_id)
  return app_id_;
}
void CMsgClientMMSJoinLobbyResponse::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSJoinLobbyResponse.app_id)
}

// optional fixed64 steam_id_lobby = 2;
bool CMsgClientMMSJoinLobbyResponse::has_steam_id_lobby() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSJoinLobbyResponse::set_has_steam_id_lobby() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSJoinLobbyResponse::clear_has_steam_id_lobby() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSJoinLobbyResponse::clear_steam_id_lobby() {
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_lobby();
}
::google::protobuf::uint64 CMsgClientMMSJoinLobbyResponse::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSJoinLobbyResponse.steam_id_lobby)
  return steam_id_lobby_;
}
void CMsgClientMMSJoinLobbyResponse::set_steam_id_lobby(::google::protobuf::uint64 value) {
  set_has_steam_id_lobby();
  steam_id_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSJoinLobbyResponse.steam_id_lobby)
}

// optional int32 chat_room_enter_response = 3;
bool CMsgClientMMSJoinLobbyResponse::has_chat_room_enter_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientMMSJoinLobbyResponse::set_has_chat_room_enter_response() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientMMSJoinLobbyResponse::clear_has_chat_room_enter_response() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientMMSJoinLobbyResponse::clear_chat_room_enter_response() {
  chat_room_enter_response_ = 0;
  clear_has_chat_room_enter_response();
}
::google::protobuf::int32 CMsgClientMMSJoinLobbyResponse::chat_room_enter_response() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSJoinLobbyResponse.chat_room_enter_response)
  return chat_room_enter_response_;
}
void CMsgClientMMSJoinLobbyResponse::set_chat_room_enter_response(::google::protobuf::int32 value) {
  set_has_chat_room_enter_response();
  chat_room_enter_response_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSJoinLobbyResponse.chat_room_enter_response)
}

// optional int32 max_members = 4;
bool CMsgClientMMSJoinLobbyResponse::has_max_members() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientMMSJoinLobbyResponse::set_has_max_members() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientMMSJoinLobbyResponse::clear_has_max_members() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientMMSJoinLobbyResponse::clear_max_members() {
  max_members_ = 0;
  clear_has_max_members();
}
::google::protobuf::int32 CMsgClientMMSJoinLobbyResponse::max_members() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSJoinLobbyResponse.max_members)
  return max_members_;
}
void CMsgClientMMSJoinLobbyResponse::set_max_members(::google::protobuf::int32 value) {
  set_has_max_members();
  max_members_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSJoinLobbyResponse.max_members)
}

// optional int32 lobby_type = 5;
bool CMsgClientMMSJoinLobbyResponse::has_lobby_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientMMSJoinLobbyResponse::set_has_lobby_type() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientMMSJoinLobbyResponse::clear_has_lobby_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientMMSJoinLobbyResponse::clear_lobby_type() {
  lobby_type_ = 0;
  clear_has_lobby_type();
}
::google::protobuf::int32 CMsgClientMMSJoinLobbyResponse::lobby_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSJoinLobbyResponse.lobby_type)
  return lobby_type_;
}
void CMsgClientMMSJoinLobbyResponse::set_lobby_type(::google::protobuf::int32 value) {
  set_has_lobby_type();
  lobby_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSJoinLobbyResponse.lobby_type)
}

// optional int32 lobby_flags = 6;
bool CMsgClientMMSJoinLobbyResponse::has_lobby_flags() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgClientMMSJoinLobbyResponse::set_has_lobby_flags() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgClientMMSJoinLobbyResponse::clear_has_lobby_flags() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgClientMMSJoinLobbyResponse::clear_lobby_flags() {
  lobby_flags_ = 0;
  clear_has_lobby_flags();
}
::google::protobuf::int32 CMsgClientMMSJoinLobbyResponse::lobby_flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSJoinLobbyResponse.lobby_flags)
  return lobby_flags_;
}
void CMsgClientMMSJoinLobbyResponse::set_lobby_flags(::google::protobuf::int32 value) {
  set_has_lobby_flags();
  lobby_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSJoinLobbyResponse.lobby_flags)
}

// optional fixed64 steam_id_owner = 7;
bool CMsgClientMMSJoinLobbyResponse::has_steam_id_owner() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientMMSJoinLobbyResponse::set_has_steam_id_owner() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientMMSJoinLobbyResponse::clear_has_steam_id_owner() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientMMSJoinLobbyResponse::clear_steam_id_owner() {
  steam_id_owner_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_owner();
}
::google::protobuf::uint64 CMsgClientMMSJoinLobbyResponse::steam_id_owner() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSJoinLobbyResponse.steam_id_owner)
  return steam_id_owner_;
}
void CMsgClientMMSJoinLobbyResponse::set_steam_id_owner(::google::protobuf::uint64 value) {
  set_has_steam_id_owner();
  steam_id_owner_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSJoinLobbyResponse.steam_id_owner)
}

// optional bytes metadata = 8;
bool CMsgClientMMSJoinLobbyResponse::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSJoinLobbyResponse::set_has_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSJoinLobbyResponse::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSJoinLobbyResponse::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
const ::std::string& CMsgClientMMSJoinLobbyResponse::metadata() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSJoinLobbyResponse.metadata)
  return metadata_.GetNoArena();
}
void CMsgClientMMSJoinLobbyResponse::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSJoinLobbyResponse.metadata)
}
#if LANG_CXX11
void CMsgClientMMSJoinLobbyResponse::set_metadata(::std::string&& value) {
  set_has_metadata();
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientMMSJoinLobbyResponse.metadata)
}
#endif
void CMsgClientMMSJoinLobbyResponse::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientMMSJoinLobbyResponse.metadata)
}
void CMsgClientMMSJoinLobbyResponse::set_metadata(const void* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientMMSJoinLobbyResponse.metadata)
}
::std::string* CMsgClientMMSJoinLobbyResponse::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientMMSJoinLobbyResponse.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientMMSJoinLobbyResponse::release_metadata() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientMMSJoinLobbyResponse.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientMMSJoinLobbyResponse::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientMMSJoinLobbyResponse.metadata)
}

// repeated .proto.steam.CMsgClientMMSJoinLobbyResponse.Member members = 9;
int CMsgClientMMSJoinLobbyResponse::members_size() const {
  return members_.size();
}
void CMsgClientMMSJoinLobbyResponse::clear_members() {
  members_.Clear();
}
const ::proto::steam::CMsgClientMMSJoinLobbyResponse_Member& CMsgClientMMSJoinLobbyResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSJoinLobbyResponse.members)
  return members_.Get(index);
}
::proto::steam::CMsgClientMMSJoinLobbyResponse_Member* CMsgClientMMSJoinLobbyResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientMMSJoinLobbyResponse.members)
  return members_.Mutable(index);
}
::proto::steam::CMsgClientMMSJoinLobbyResponse_Member* CMsgClientMMSJoinLobbyResponse::add_members() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientMMSJoinLobbyResponse.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientMMSJoinLobbyResponse_Member >*
CMsgClientMMSJoinLobbyResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientMMSJoinLobbyResponse.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientMMSJoinLobbyResponse_Member >&
CMsgClientMMSJoinLobbyResponse::members() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientMMSJoinLobbyResponse.members)
  return members_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSLeaveLobby::kAppIdFieldNumber;
const int CMsgClientMMSLeaveLobby::kSteamIdLobbyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSLeaveLobby::CMsgClientMMSLeaveLobby()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSLeaveLobby)
}
CMsgClientMMSLeaveLobby::CMsgClientMMSLeaveLobby(const CMsgClientMMSLeaveLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSLeaveLobby)
}

void CMsgClientMMSLeaveLobby::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
}

CMsgClientMMSLeaveLobby::~CMsgClientMMSLeaveLobby() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSLeaveLobby)
  SharedDtor();
}

void CMsgClientMMSLeaveLobby::SharedDtor() {
}

void CMsgClientMMSLeaveLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSLeaveLobby::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSLeaveLobby& CMsgClientMMSLeaveLobby::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSLeaveLobby* CMsgClientMMSLeaveLobby::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSLeaveLobby* n = new CMsgClientMMSLeaveLobby;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSLeaveLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSLeaveLobby)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSLeaveLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSLeaveLobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSLeaveLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSLeaveLobby)
  return false;
#undef DO_
}

void CMsgClientMMSLeaveLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSLeaveLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSLeaveLobby)
}

::google::protobuf::uint8* CMsgClientMMSLeaveLobby::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSLeaveLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSLeaveLobby)
  return target;
}

size_t CMsgClientMMSLeaveLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSLeaveLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSLeaveLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSLeaveLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSLeaveLobby* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSLeaveLobby>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSLeaveLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSLeaveLobby)
    MergeFrom(*source);
  }
}

void CMsgClientMMSLeaveLobby::MergeFrom(const CMsgClientMMSLeaveLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSLeaveLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSLeaveLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSLeaveLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSLeaveLobby::CopyFrom(const CMsgClientMMSLeaveLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSLeaveLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLeaveLobby::IsInitialized() const {
  return true;
}

void CMsgClientMMSLeaveLobby::Swap(CMsgClientMMSLeaveLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSLeaveLobby::InternalSwap(CMsgClientMMSLeaveLobby* other) {
  std::swap(steam_id_lobby_, other->steam_id_lobby_);
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSLeaveLobby::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSLeaveLobby

// optional uint32 app_id = 1;
bool CMsgClientMMSLeaveLobby::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSLeaveLobby::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSLeaveLobby::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSLeaveLobby::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientMMSLeaveLobby::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLeaveLobby.app_id)
  return app_id_;
}
void CMsgClientMMSLeaveLobby::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLeaveLobby.app_id)
}

// optional fixed64 steam_id_lobby = 2;
bool CMsgClientMMSLeaveLobby::has_steam_id_lobby() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSLeaveLobby::set_has_steam_id_lobby() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSLeaveLobby::clear_has_steam_id_lobby() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSLeaveLobby::clear_steam_id_lobby() {
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_lobby();
}
::google::protobuf::uint64 CMsgClientMMSLeaveLobby::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLeaveLobby.steam_id_lobby)
  return steam_id_lobby_;
}
void CMsgClientMMSLeaveLobby::set_steam_id_lobby(::google::protobuf::uint64 value) {
  set_has_steam_id_lobby();
  steam_id_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLeaveLobby.steam_id_lobby)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSLeaveLobbyResponse::kAppIdFieldNumber;
const int CMsgClientMMSLeaveLobbyResponse::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSLeaveLobbyResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSLeaveLobbyResponse::CMsgClientMMSLeaveLobbyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSLeaveLobbyResponse)
}
CMsgClientMMSLeaveLobbyResponse::CMsgClientMMSLeaveLobbyResponse(const CMsgClientMMSLeaveLobbyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSLeaveLobbyResponse)
}

void CMsgClientMMSLeaveLobbyResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  eresult_ = 2;
}

CMsgClientMMSLeaveLobbyResponse::~CMsgClientMMSLeaveLobbyResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  SharedDtor();
}

void CMsgClientMMSLeaveLobbyResponse::SharedDtor() {
}

void CMsgClientMMSLeaveLobbyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSLeaveLobbyResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSLeaveLobbyResponse& CMsgClientMMSLeaveLobbyResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSLeaveLobbyResponse* CMsgClientMMSLeaveLobbyResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSLeaveLobbyResponse* n = new CMsgClientMMSLeaveLobbyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSLeaveLobbyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSLeaveLobbyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  return false;
#undef DO_
}

void CMsgClientMMSLeaveLobbyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSLeaveLobbyResponse)
}

::google::protobuf::uint8* CMsgClientMMSLeaveLobbyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  return target;
}

size_t CMsgClientMMSLeaveLobbyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 eresult = 3 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSLeaveLobbyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSLeaveLobbyResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSLeaveLobbyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSLeaveLobbyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSLeaveLobbyResponse)
    MergeFrom(*source);
  }
}

void CMsgClientMMSLeaveLobbyResponse::MergeFrom(const CMsgClientMMSLeaveLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSLeaveLobbyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSLeaveLobbyResponse::CopyFrom(const CMsgClientMMSLeaveLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSLeaveLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLeaveLobbyResponse::IsInitialized() const {
  return true;
}

void CMsgClientMMSLeaveLobbyResponse::Swap(CMsgClientMMSLeaveLobbyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSLeaveLobbyResponse::InternalSwap(CMsgClientMMSLeaveLobbyResponse* other) {
  std::swap(steam_id_lobby_, other->steam_id_lobby_);
  std::swap(app_id_, other->app_id_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSLeaveLobbyResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSLeaveLobbyResponse

// optional uint32 app_id = 1;
bool CMsgClientMMSLeaveLobbyResponse::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSLeaveLobbyResponse::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSLeaveLobbyResponse::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSLeaveLobbyResponse::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientMMSLeaveLobbyResponse::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLeaveLobbyResponse.app_id)
  return app_id_;
}
void CMsgClientMMSLeaveLobbyResponse::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLeaveLobbyResponse.app_id)
}

// optional fixed64 steam_id_lobby = 2;
bool CMsgClientMMSLeaveLobbyResponse::has_steam_id_lobby() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSLeaveLobbyResponse::set_has_steam_id_lobby() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSLeaveLobbyResponse::clear_has_steam_id_lobby() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSLeaveLobbyResponse::clear_steam_id_lobby() {
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_lobby();
}
::google::protobuf::uint64 CMsgClientMMSLeaveLobbyResponse::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLeaveLobbyResponse.steam_id_lobby)
  return steam_id_lobby_;
}
void CMsgClientMMSLeaveLobbyResponse::set_steam_id_lobby(::google::protobuf::uint64 value) {
  set_has_steam_id_lobby();
  steam_id_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLeaveLobbyResponse.steam_id_lobby)
}

// optional int32 eresult = 3 [default = 2];
bool CMsgClientMMSLeaveLobbyResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientMMSLeaveLobbyResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientMMSLeaveLobbyResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientMMSLeaveLobbyResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientMMSLeaveLobbyResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLeaveLobbyResponse.eresult)
  return eresult_;
}
void CMsgClientMMSLeaveLobbyResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLeaveLobbyResponse.eresult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSGetLobbyList_Filter::kKeyFieldNumber;
const int CMsgClientMMSGetLobbyList_Filter::kValueFieldNumber;
const int CMsgClientMMSGetLobbyList_Filter::kComparisionFieldNumber;
const int CMsgClientMMSGetLobbyList_Filter::kFilterTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSGetLobbyList_Filter::CMsgClientMMSGetLobbyList_Filter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSGetLobbyList.Filter)
}
CMsgClientMMSGetLobbyList_Filter::CMsgClientMMSGetLobbyList_Filter(const CMsgClientMMSGetLobbyList_Filter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&comparision_, &from.comparision_,
    reinterpret_cast<char*>(&filter_type_) -
    reinterpret_cast<char*>(&comparision_) + sizeof(filter_type_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSGetLobbyList.Filter)
}

void CMsgClientMMSGetLobbyList_Filter::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&comparision_, 0, reinterpret_cast<char*>(&filter_type_) -
    reinterpret_cast<char*>(&comparision_) + sizeof(filter_type_));
}

CMsgClientMMSGetLobbyList_Filter::~CMsgClientMMSGetLobbyList_Filter() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  SharedDtor();
}

void CMsgClientMMSGetLobbyList_Filter::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSGetLobbyList_Filter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSGetLobbyList_Filter::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSGetLobbyList_Filter& CMsgClientMMSGetLobbyList_Filter::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSGetLobbyList_Filter* CMsgClientMMSGetLobbyList_Filter::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSGetLobbyList_Filter* n = new CMsgClientMMSGetLobbyList_Filter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSGetLobbyList_Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&comparision_, 0, reinterpret_cast<char*>(&filter_type_) -
      reinterpret_cast<char*>(&comparision_) + sizeof(filter_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSGetLobbyList_Filter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientMMSGetLobbyList.Filter.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientMMSGetLobbyList.Filter.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 comparision = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_comparision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comparision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 filter_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_filter_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filter_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  return false;
#undef DO_
}

void CMsgClientMMSGetLobbyList_Filter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSGetLobbyList.Filter.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSGetLobbyList.Filter.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional int32 comparision = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->comparision(), output);
  }

  // optional int32 filter_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->filter_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSGetLobbyList.Filter)
}

::google::protobuf::uint8* CMsgClientMMSGetLobbyList_Filter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSGetLobbyList.Filter.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSGetLobbyList.Filter.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional int32 comparision = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->comparision(), target);
  }

  // optional int32 filter_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->filter_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  return target;
}

size_t CMsgClientMMSGetLobbyList_Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional int32 comparision = 3;
    if (has_comparision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comparision());
    }

    // optional int32 filter_type = 4;
    if (has_filter_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filter_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSGetLobbyList_Filter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSGetLobbyList_Filter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSGetLobbyList_Filter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSGetLobbyList.Filter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSGetLobbyList.Filter)
    MergeFrom(*source);
  }
}

void CMsgClientMMSGetLobbyList_Filter::MergeFrom(const CMsgClientMMSGetLobbyList_Filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000004u) {
      comparision_ = from.comparision_;
    }
    if (cached_has_bits & 0x00000008u) {
      filter_type_ = from.filter_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSGetLobbyList_Filter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSGetLobbyList_Filter::CopyFrom(const CMsgClientMMSGetLobbyList_Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSGetLobbyList.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSGetLobbyList_Filter::IsInitialized() const {
  return true;
}

void CMsgClientMMSGetLobbyList_Filter::Swap(CMsgClientMMSGetLobbyList_Filter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSGetLobbyList_Filter::InternalSwap(CMsgClientMMSGetLobbyList_Filter* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(comparision_, other->comparision_);
  std::swap(filter_type_, other->filter_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSGetLobbyList_Filter::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSGetLobbyList_Filter

// optional string key = 1;
bool CMsgClientMMSGetLobbyList_Filter::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSGetLobbyList_Filter::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSGetLobbyList_Filter::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSGetLobbyList_Filter::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& CMsgClientMMSGetLobbyList_Filter::key() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSGetLobbyList.Filter.key)
  return key_.GetNoArena();
}
void CMsgClientMMSGetLobbyList_Filter::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSGetLobbyList.Filter.key)
}
#if LANG_CXX11
void CMsgClientMMSGetLobbyList_Filter::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientMMSGetLobbyList.Filter.key)
}
#endif
void CMsgClientMMSGetLobbyList_Filter::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientMMSGetLobbyList.Filter.key)
}
void CMsgClientMMSGetLobbyList_Filter::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientMMSGetLobbyList.Filter.key)
}
::std::string* CMsgClientMMSGetLobbyList_Filter::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientMMSGetLobbyList.Filter.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientMMSGetLobbyList_Filter::release_key() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientMMSGetLobbyList.Filter.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientMMSGetLobbyList_Filter::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientMMSGetLobbyList.Filter.key)
}

// optional string value = 2;
bool CMsgClientMMSGetLobbyList_Filter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSGetLobbyList_Filter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSGetLobbyList_Filter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSGetLobbyList_Filter::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CMsgClientMMSGetLobbyList_Filter::value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSGetLobbyList.Filter.value)
  return value_.GetNoArena();
}
void CMsgClientMMSGetLobbyList_Filter::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSGetLobbyList.Filter.value)
}
#if LANG_CXX11
void CMsgClientMMSGetLobbyList_Filter::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientMMSGetLobbyList.Filter.value)
}
#endif
void CMsgClientMMSGetLobbyList_Filter::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientMMSGetLobbyList.Filter.value)
}
void CMsgClientMMSGetLobbyList_Filter::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientMMSGetLobbyList.Filter.value)
}
::std::string* CMsgClientMMSGetLobbyList_Filter::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientMMSGetLobbyList.Filter.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientMMSGetLobbyList_Filter::release_value() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientMMSGetLobbyList.Filter.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientMMSGetLobbyList_Filter::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientMMSGetLobbyList.Filter.value)
}

// optional int32 comparision = 3;
bool CMsgClientMMSGetLobbyList_Filter::has_comparision() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientMMSGetLobbyList_Filter::set_has_comparision() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientMMSGetLobbyList_Filter::clear_has_comparision() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientMMSGetLobbyList_Filter::clear_comparision() {
  comparision_ = 0;
  clear_has_comparision();
}
::google::protobuf::int32 CMsgClientMMSGetLobbyList_Filter::comparision() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSGetLobbyList.Filter.comparision)
  return comparision_;
}
void CMsgClientMMSGetLobbyList_Filter::set_comparision(::google::protobuf::int32 value) {
  set_has_comparision();
  comparision_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSGetLobbyList.Filter.comparision)
}

// optional int32 filter_type = 4;
bool CMsgClientMMSGetLobbyList_Filter::has_filter_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientMMSGetLobbyList_Filter::set_has_filter_type() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientMMSGetLobbyList_Filter::clear_has_filter_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientMMSGetLobbyList_Filter::clear_filter_type() {
  filter_type_ = 0;
  clear_has_filter_type();
}
::google::protobuf::int32 CMsgClientMMSGetLobbyList_Filter::filter_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSGetLobbyList.Filter.filter_type)
  return filter_type_;
}
void CMsgClientMMSGetLobbyList_Filter::set_filter_type(::google::protobuf::int32 value) {
  set_has_filter_type();
  filter_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSGetLobbyList.Filter.filter_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSGetLobbyList::kAppIdFieldNumber;
const int CMsgClientMMSGetLobbyList::kNumLobbiesRequestedFieldNumber;
const int CMsgClientMMSGetLobbyList::kCellIdFieldNumber;
const int CMsgClientMMSGetLobbyList::kPublicIpFieldNumber;
const int CMsgClientMMSGetLobbyList::kFiltersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSGetLobbyList::CMsgClientMMSGetLobbyList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSGetLobbyList)
}
CMsgClientMMSGetLobbyList::CMsgClientMMSGetLobbyList(const CMsgClientMMSGetLobbyList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&public_ip_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(public_ip_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSGetLobbyList)
}

void CMsgClientMMSGetLobbyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&public_ip_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(public_ip_));
}

CMsgClientMMSGetLobbyList::~CMsgClientMMSGetLobbyList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSGetLobbyList)
  SharedDtor();
}

void CMsgClientMMSGetLobbyList::SharedDtor() {
}

void CMsgClientMMSGetLobbyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSGetLobbyList::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSGetLobbyList& CMsgClientMMSGetLobbyList::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSGetLobbyList* CMsgClientMMSGetLobbyList::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSGetLobbyList* n = new CMsgClientMMSGetLobbyList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSGetLobbyList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSGetLobbyList)
  filters_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&public_ip_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(public_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSGetLobbyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSGetLobbyList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_lobbies_requested = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_num_lobbies_requested();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_lobbies_requested_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cell_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_cell_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 public_ip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_public_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientMMSGetLobbyList.Filter filters = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSGetLobbyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSGetLobbyList)
  return false;
#undef DO_
}

void CMsgClientMMSGetLobbyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSGetLobbyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 num_lobbies_requested = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_lobbies_requested(), output);
  }

  // optional uint32 cell_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cell_id(), output);
  }

  // optional uint32 public_ip = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->public_ip(), output);
  }

  // repeated .proto.steam.CMsgClientMMSGetLobbyList.Filter filters = 6;
  for (unsigned int i = 0, n = this->filters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->filters(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSGetLobbyList)
}

::google::protobuf::uint8* CMsgClientMMSGetLobbyList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSGetLobbyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional int32 num_lobbies_requested = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_lobbies_requested(), target);
  }

  // optional uint32 cell_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cell_id(), target);
  }

  // optional uint32 public_ip = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->public_ip(), target);
  }

  // repeated .proto.steam.CMsgClientMMSGetLobbyList.Filter filters = 6;
  for (unsigned int i = 0, n = this->filters_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->filters(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSGetLobbyList)
  return target;
}

size_t CMsgClientMMSGetLobbyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSGetLobbyList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientMMSGetLobbyList.Filter filters = 6;
  {
    unsigned int count = this->filters_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filters(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 num_lobbies_requested = 3;
    if (has_num_lobbies_requested()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_lobbies_requested());
    }

    // optional uint32 cell_id = 4;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // optional uint32 public_ip = 5;
    if (has_public_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_ip());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSGetLobbyList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSGetLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSGetLobbyList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSGetLobbyList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSGetLobbyList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSGetLobbyList)
    MergeFrom(*source);
  }
}

void CMsgClientMMSGetLobbyList::MergeFrom(const CMsgClientMMSGetLobbyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSGetLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_lobbies_requested_ = from.num_lobbies_requested_;
    }
    if (cached_has_bits & 0x00000004u) {
      cell_id_ = from.cell_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      public_ip_ = from.public_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSGetLobbyList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSGetLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSGetLobbyList::CopyFrom(const CMsgClientMMSGetLobbyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSGetLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSGetLobbyList::IsInitialized() const {
  return true;
}

void CMsgClientMMSGetLobbyList::Swap(CMsgClientMMSGetLobbyList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSGetLobbyList::InternalSwap(CMsgClientMMSGetLobbyList* other) {
  filters_.InternalSwap(&other->filters_);
  std::swap(app_id_, other->app_id_);
  std::swap(num_lobbies_requested_, other->num_lobbies_requested_);
  std::swap(cell_id_, other->cell_id_);
  std::swap(public_ip_, other->public_ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSGetLobbyList::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSGetLobbyList

// optional uint32 app_id = 1;
bool CMsgClientMMSGetLobbyList::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSGetLobbyList::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSGetLobbyList::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSGetLobbyList::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientMMSGetLobbyList::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSGetLobbyList.app_id)
  return app_id_;
}
void CMsgClientMMSGetLobbyList::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSGetLobbyList.app_id)
}

// optional int32 num_lobbies_requested = 3;
bool CMsgClientMMSGetLobbyList::has_num_lobbies_requested() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSGetLobbyList::set_has_num_lobbies_requested() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSGetLobbyList::clear_has_num_lobbies_requested() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSGetLobbyList::clear_num_lobbies_requested() {
  num_lobbies_requested_ = 0;
  clear_has_num_lobbies_requested();
}
::google::protobuf::int32 CMsgClientMMSGetLobbyList::num_lobbies_requested() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSGetLobbyList.num_lobbies_requested)
  return num_lobbies_requested_;
}
void CMsgClientMMSGetLobbyList::set_num_lobbies_requested(::google::protobuf::int32 value) {
  set_has_num_lobbies_requested();
  num_lobbies_requested_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSGetLobbyList.num_lobbies_requested)
}

// optional uint32 cell_id = 4;
bool CMsgClientMMSGetLobbyList::has_cell_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientMMSGetLobbyList::set_has_cell_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientMMSGetLobbyList::clear_has_cell_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientMMSGetLobbyList::clear_cell_id() {
  cell_id_ = 0u;
  clear_has_cell_id();
}
::google::protobuf::uint32 CMsgClientMMSGetLobbyList::cell_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSGetLobbyList.cell_id)
  return cell_id_;
}
void CMsgClientMMSGetLobbyList::set_cell_id(::google::protobuf::uint32 value) {
  set_has_cell_id();
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSGetLobbyList.cell_id)
}

// optional uint32 public_ip = 5;
bool CMsgClientMMSGetLobbyList::has_public_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientMMSGetLobbyList::set_has_public_ip() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientMMSGetLobbyList::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientMMSGetLobbyList::clear_public_ip() {
  public_ip_ = 0u;
  clear_has_public_ip();
}
::google::protobuf::uint32 CMsgClientMMSGetLobbyList::public_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSGetLobbyList.public_ip)
  return public_ip_;
}
void CMsgClientMMSGetLobbyList::set_public_ip(::google::protobuf::uint32 value) {
  set_has_public_ip();
  public_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSGetLobbyList.public_ip)
}

// repeated .proto.steam.CMsgClientMMSGetLobbyList.Filter filters = 6;
int CMsgClientMMSGetLobbyList::filters_size() const {
  return filters_.size();
}
void CMsgClientMMSGetLobbyList::clear_filters() {
  filters_.Clear();
}
const ::proto::steam::CMsgClientMMSGetLobbyList_Filter& CMsgClientMMSGetLobbyList::filters(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSGetLobbyList.filters)
  return filters_.Get(index);
}
::proto::steam::CMsgClientMMSGetLobbyList_Filter* CMsgClientMMSGetLobbyList::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientMMSGetLobbyList.filters)
  return filters_.Mutable(index);
}
::proto::steam::CMsgClientMMSGetLobbyList_Filter* CMsgClientMMSGetLobbyList::add_filters() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientMMSGetLobbyList.filters)
  return filters_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientMMSGetLobbyList_Filter >*
CMsgClientMMSGetLobbyList::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientMMSGetLobbyList.filters)
  return &filters_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientMMSGetLobbyList_Filter >&
CMsgClientMMSGetLobbyList::filters() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientMMSGetLobbyList.filters)
  return filters_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSGetLobbyListResponse_Lobby::kSteamIdFieldNumber;
const int CMsgClientMMSGetLobbyListResponse_Lobby::kMaxMembersFieldNumber;
const int CMsgClientMMSGetLobbyListResponse_Lobby::kLobbyTypeFieldNumber;
const int CMsgClientMMSGetLobbyListResponse_Lobby::kLobbyFlagsFieldNumber;
const int CMsgClientMMSGetLobbyListResponse_Lobby::kMetadataFieldNumber;
const int CMsgClientMMSGetLobbyListResponse_Lobby::kNumMembersFieldNumber;
const int CMsgClientMMSGetLobbyListResponse_Lobby::kDistanceFieldNumber;
const int CMsgClientMMSGetLobbyListResponse_Lobby::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSGetLobbyListResponse_Lobby::CMsgClientMMSGetLobbyListResponse_Lobby()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
}
CMsgClientMMSGetLobbyListResponse_Lobby::CMsgClientMMSGetLobbyListResponse_Lobby(const CMsgClientMMSGetLobbyListResponse_Lobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
}

void CMsgClientMMSGetLobbyListResponse_Lobby::SharedCtor() {
  _cached_size_ = 0;
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_, 0, reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(distance_));
}

CMsgClientMMSGetLobbyListResponse_Lobby::~CMsgClientMMSGetLobbyListResponse_Lobby() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  SharedDtor();
}

void CMsgClientMMSGetLobbyListResponse_Lobby::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSGetLobbyListResponse_Lobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSGetLobbyListResponse_Lobby::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSGetLobbyListResponse_Lobby& CMsgClientMMSGetLobbyListResponse_Lobby::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSGetLobbyListResponse_Lobby* CMsgClientMMSGetLobbyListResponse_Lobby::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSGetLobbyListResponse_Lobby* n = new CMsgClientMMSGetLobbyListResponse_Lobby;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSGetLobbyListResponse_Lobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  if (has_metadata()) {
    GOOGLE_DCHECK(!metadata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*metadata_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSGetLobbyListResponse_Lobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_members = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_max_members();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lobby_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_lobby_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lobby_flags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_lobby_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_members = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_num_members();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distance = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 weight = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  return false;
#undef DO_
}

void CMsgClientMMSGetLobbyListResponse_Lobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional int32 max_members = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_members(), output);
  }

  // optional int32 lobby_type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lobby_type(), output);
  }

  // optional int32 lobby_flags = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lobby_flags(), output);
  }

  // optional bytes metadata = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->metadata(), output);
  }

  // optional int32 num_members = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_members(), output);
  }

  // optional float distance = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->distance(), output);
  }

  // optional int64 weight = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
}

::google::protobuf::uint8* CMsgClientMMSGetLobbyListResponse_Lobby::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional int32 max_members = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_members(), target);
  }

  // optional int32 lobby_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lobby_type(), target);
  }

  // optional int32 lobby_flags = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lobby_flags(), target);
  }

  // optional bytes metadata = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->metadata(), target);
  }

  // optional int32 num_members = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num_members(), target);
  }

  // optional float distance = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->distance(), target);
  }

  // optional int64 weight = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  return target;
}

size_t CMsgClientMMSGetLobbyListResponse_Lobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes metadata = 5;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional int32 max_members = 2;
    if (has_max_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_members());
    }

    // optional int32 lobby_type = 3;
    if (has_lobby_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_type());
    }

    // optional int32 lobby_flags = 4;
    if (has_lobby_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_flags());
    }

    // optional int32 num_members = 6;
    if (has_num_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_members());
    }

    // optional int64 weight = 8;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->weight());
    }

    // optional float distance = 7;
    if (has_distance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSGetLobbyListResponse_Lobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSGetLobbyListResponse_Lobby* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSGetLobbyListResponse_Lobby>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
    MergeFrom(*source);
  }
}

void CMsgClientMMSGetLobbyListResponse_Lobby::MergeFrom(const CMsgClientMMSGetLobbyListResponse_Lobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_metadata();
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_members_ = from.max_members_;
    }
    if (cached_has_bits & 0x00000008u) {
      lobby_type_ = from.lobby_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      lobby_flags_ = from.lobby_flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_members_ = from.num_members_;
    }
    if (cached_has_bits & 0x00000040u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000080u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSGetLobbyListResponse_Lobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSGetLobbyListResponse_Lobby::CopyFrom(const CMsgClientMMSGetLobbyListResponse_Lobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSGetLobbyListResponse_Lobby::IsInitialized() const {
  return true;
}

void CMsgClientMMSGetLobbyListResponse_Lobby::Swap(CMsgClientMMSGetLobbyListResponse_Lobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSGetLobbyListResponse_Lobby::InternalSwap(CMsgClientMMSGetLobbyListResponse_Lobby* other) {
  metadata_.Swap(&other->metadata_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(max_members_, other->max_members_);
  std::swap(lobby_type_, other->lobby_type_);
  std::swap(lobby_flags_, other->lobby_flags_);
  std::swap(num_members_, other->num_members_);
  std::swap(weight_, other->weight_);
  std::swap(distance_, other->distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSGetLobbyListResponse_Lobby::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSGetLobbyListResponse_Lobby

// optional fixed64 steam_id = 1;
bool CMsgClientMMSGetLobbyListResponse_Lobby::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgClientMMSGetLobbyListResponse_Lobby::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby.steam_id)
  return steam_id_;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby.steam_id)
}

// optional int32 max_members = 2;
bool CMsgClientMMSGetLobbyListResponse_Lobby::has_max_members() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::set_has_max_members() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::clear_has_max_members() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::clear_max_members() {
  max_members_ = 0;
  clear_has_max_members();
}
::google::protobuf::int32 CMsgClientMMSGetLobbyListResponse_Lobby::max_members() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby.max_members)
  return max_members_;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::set_max_members(::google::protobuf::int32 value) {
  set_has_max_members();
  max_members_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby.max_members)
}

// optional int32 lobby_type = 3;
bool CMsgClientMMSGetLobbyListResponse_Lobby::has_lobby_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::set_has_lobby_type() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::clear_has_lobby_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::clear_lobby_type() {
  lobby_type_ = 0;
  clear_has_lobby_type();
}
::google::protobuf::int32 CMsgClientMMSGetLobbyListResponse_Lobby::lobby_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby.lobby_type)
  return lobby_type_;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::set_lobby_type(::google::protobuf::int32 value) {
  set_has_lobby_type();
  lobby_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby.lobby_type)
}

// optional int32 lobby_flags = 4;
bool CMsgClientMMSGetLobbyListResponse_Lobby::has_lobby_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::set_has_lobby_flags() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::clear_has_lobby_flags() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::clear_lobby_flags() {
  lobby_flags_ = 0;
  clear_has_lobby_flags();
}
::google::protobuf::int32 CMsgClientMMSGetLobbyListResponse_Lobby::lobby_flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby.lobby_flags)
  return lobby_flags_;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::set_lobby_flags(::google::protobuf::int32 value) {
  set_has_lobby_flags();
  lobby_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby.lobby_flags)
}

// optional bytes metadata = 5;
bool CMsgClientMMSGetLobbyListResponse_Lobby::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::set_has_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
const ::std::string& CMsgClientMMSGetLobbyListResponse_Lobby::metadata() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby.metadata)
  return metadata_.GetNoArena();
}
void CMsgClientMMSGetLobbyListResponse_Lobby::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby.metadata)
}
#if LANG_CXX11
void CMsgClientMMSGetLobbyListResponse_Lobby::set_metadata(::std::string&& value) {
  set_has_metadata();
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby.metadata)
}
#endif
void CMsgClientMMSGetLobbyListResponse_Lobby::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby.metadata)
}
void CMsgClientMMSGetLobbyListResponse_Lobby::set_metadata(const void* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby.metadata)
}
::std::string* CMsgClientMMSGetLobbyListResponse_Lobby::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientMMSGetLobbyListResponse_Lobby::release_metadata() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientMMSGetLobbyListResponse_Lobby::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby.metadata)
}

// optional int32 num_members = 6;
bool CMsgClientMMSGetLobbyListResponse_Lobby::has_num_members() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::set_has_num_members() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::clear_has_num_members() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::clear_num_members() {
  num_members_ = 0;
  clear_has_num_members();
}
::google::protobuf::int32 CMsgClientMMSGetLobbyListResponse_Lobby::num_members() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby.num_members)
  return num_members_;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::set_num_members(::google::protobuf::int32 value) {
  set_has_num_members();
  num_members_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby.num_members)
}

// optional float distance = 7;
bool CMsgClientMMSGetLobbyListResponse_Lobby::has_distance() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::set_has_distance() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::clear_has_distance() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
float CMsgClientMMSGetLobbyListResponse_Lobby::distance() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby.distance)
  return distance_;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby.distance)
}

// optional int64 weight = 8;
bool CMsgClientMMSGetLobbyListResponse_Lobby::has_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::set_has_weight() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::clear_has_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::clear_weight() {
  weight_ = GOOGLE_LONGLONG(0);
  clear_has_weight();
}
::google::protobuf::int64 CMsgClientMMSGetLobbyListResponse_Lobby::weight() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby.weight)
  return weight_;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::set_weight(::google::protobuf::int64 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby.weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSGetLobbyListResponse::kAppIdFieldNumber;
const int CMsgClientMMSGetLobbyListResponse::kEresultFieldNumber;
const int CMsgClientMMSGetLobbyListResponse::kLobbiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSGetLobbyListResponse::CMsgClientMMSGetLobbyListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSGetLobbyListResponse)
}
CMsgClientMMSGetLobbyListResponse::CMsgClientMMSGetLobbyListResponse(const CMsgClientMMSGetLobbyListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lobbies_(from.lobbies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSGetLobbyListResponse)
}

void CMsgClientMMSGetLobbyListResponse::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  eresult_ = 2;
}

CMsgClientMMSGetLobbyListResponse::~CMsgClientMMSGetLobbyListResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSGetLobbyListResponse)
  SharedDtor();
}

void CMsgClientMMSGetLobbyListResponse::SharedDtor() {
}

void CMsgClientMMSGetLobbyListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSGetLobbyListResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSGetLobbyListResponse& CMsgClientMMSGetLobbyListResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSGetLobbyListResponse* CMsgClientMMSGetLobbyListResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSGetLobbyListResponse* n = new CMsgClientMMSGetLobbyListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSGetLobbyListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSGetLobbyListResponse)
  lobbies_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    app_id_ = 0u;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSGetLobbyListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSGetLobbyListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby lobbies = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lobbies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSGetLobbyListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSGetLobbyListResponse)
  return false;
#undef DO_
}

void CMsgClientMMSGetLobbyListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSGetLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eresult(), output);
  }

  // repeated .proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby lobbies = 4;
  for (unsigned int i = 0, n = this->lobbies_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lobbies(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSGetLobbyListResponse)
}

::google::protobuf::uint8* CMsgClientMMSGetLobbyListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSGetLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->eresult(), target);
  }

  // repeated .proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby lobbies = 4;
  for (unsigned int i = 0, n = this->lobbies_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->lobbies(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSGetLobbyListResponse)
  return target;
}

size_t CMsgClientMMSGetLobbyListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSGetLobbyListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby lobbies = 4;
  {
    unsigned int count = this->lobbies_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lobbies(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 eresult = 3 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSGetLobbyListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSGetLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSGetLobbyListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSGetLobbyListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSGetLobbyListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSGetLobbyListResponse)
    MergeFrom(*source);
  }
}

void CMsgClientMMSGetLobbyListResponse::MergeFrom(const CMsgClientMMSGetLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSGetLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobbies_.MergeFrom(from.lobbies_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSGetLobbyListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSGetLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSGetLobbyListResponse::CopyFrom(const CMsgClientMMSGetLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSGetLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSGetLobbyListResponse::IsInitialized() const {
  return true;
}

void CMsgClientMMSGetLobbyListResponse::Swap(CMsgClientMMSGetLobbyListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSGetLobbyListResponse::InternalSwap(CMsgClientMMSGetLobbyListResponse* other) {
  lobbies_.InternalSwap(&other->lobbies_);
  std::swap(app_id_, other->app_id_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSGetLobbyListResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSGetLobbyListResponse

// optional uint32 app_id = 1;
bool CMsgClientMMSGetLobbyListResponse::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSGetLobbyListResponse::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSGetLobbyListResponse::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSGetLobbyListResponse::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientMMSGetLobbyListResponse::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSGetLobbyListResponse.app_id)
  return app_id_;
}
void CMsgClientMMSGetLobbyListResponse::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSGetLobbyListResponse.app_id)
}

// optional int32 eresult = 3 [default = 2];
bool CMsgClientMMSGetLobbyListResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSGetLobbyListResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSGetLobbyListResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSGetLobbyListResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientMMSGetLobbyListResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSGetLobbyListResponse.eresult)
  return eresult_;
}
void CMsgClientMMSGetLobbyListResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSGetLobbyListResponse.eresult)
}

// repeated .proto.steam.CMsgClientMMSGetLobbyListResponse.Lobby lobbies = 4;
int CMsgClientMMSGetLobbyListResponse::lobbies_size() const {
  return lobbies_.size();
}
void CMsgClientMMSGetLobbyListResponse::clear_lobbies() {
  lobbies_.Clear();
}
const ::proto::steam::CMsgClientMMSGetLobbyListResponse_Lobby& CMsgClientMMSGetLobbyListResponse::lobbies(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSGetLobbyListResponse.lobbies)
  return lobbies_.Get(index);
}
::proto::steam::CMsgClientMMSGetLobbyListResponse_Lobby* CMsgClientMMSGetLobbyListResponse::mutable_lobbies(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientMMSGetLobbyListResponse.lobbies)
  return lobbies_.Mutable(index);
}
::proto::steam::CMsgClientMMSGetLobbyListResponse_Lobby* CMsgClientMMSGetLobbyListResponse::add_lobbies() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientMMSGetLobbyListResponse.lobbies)
  return lobbies_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientMMSGetLobbyListResponse_Lobby >*
CMsgClientMMSGetLobbyListResponse::mutable_lobbies() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientMMSGetLobbyListResponse.lobbies)
  return &lobbies_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientMMSGetLobbyListResponse_Lobby >&
CMsgClientMMSGetLobbyListResponse::lobbies() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientMMSGetLobbyListResponse.lobbies)
  return lobbies_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSSetLobbyData::kAppIdFieldNumber;
const int CMsgClientMMSSetLobbyData::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSSetLobbyData::kSteamIdMemberFieldNumber;
const int CMsgClientMMSSetLobbyData::kMaxMembersFieldNumber;
const int CMsgClientMMSSetLobbyData::kLobbyTypeFieldNumber;
const int CMsgClientMMSSetLobbyData::kLobbyFlagsFieldNumber;
const int CMsgClientMMSSetLobbyData::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSSetLobbyData::CMsgClientMMSSetLobbyData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSSetLobbyData)
}
CMsgClientMMSSetLobbyData::CMsgClientMMSSetLobbyData(const CMsgClientMMSSetLobbyData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    reinterpret_cast<char*>(&lobby_flags_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(lobby_flags_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSSetLobbyData)
}

void CMsgClientMMSSetLobbyData::SharedCtor() {
  _cached_size_ = 0;
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&lobby_flags_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(lobby_flags_));
}

CMsgClientMMSSetLobbyData::~CMsgClientMMSSetLobbyData() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSSetLobbyData)
  SharedDtor();
}

void CMsgClientMMSSetLobbyData::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSSetLobbyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSSetLobbyData::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSSetLobbyData& CMsgClientMMSSetLobbyData::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSSetLobbyData* CMsgClientMMSSetLobbyData::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSSetLobbyData* n = new CMsgClientMMSSetLobbyData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSSetLobbyData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSSetLobbyData)
  if (has_metadata()) {
    GOOGLE_DCHECK(!metadata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*metadata_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&lobby_flags_) -
      reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(lobby_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSSetLobbyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSSetLobbyData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_member = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_steam_id_member();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_member_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_members = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_max_members();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lobby_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_lobby_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lobby_flags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_lobby_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSSetLobbyData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSSetLobbyData)
  return false;
#undef DO_
}

void CMsgClientMMSSetLobbyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSSetLobbyData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_member = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_member(), output);
  }

  // optional int32 max_members = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_members(), output);
  }

  // optional int32 lobby_type = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lobby_type(), output);
  }

  // optional int32 lobby_flags = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lobby_flags(), output);
  }

  // optional bytes metadata = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->metadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSSetLobbyData)
}

::google::protobuf::uint8* CMsgClientMMSSetLobbyData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSSetLobbyData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_member = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id_member(), target);
  }

  // optional int32 max_members = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_members(), target);
  }

  // optional int32 lobby_type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lobby_type(), target);
  }

  // optional int32 lobby_flags = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lobby_flags(), target);
  }

  // optional bytes metadata = 7;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->metadata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSSetLobbyData)
  return target;
}

size_t CMsgClientMMSSetLobbyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSSetLobbyData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes metadata = 7;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 max_members = 4;
    if (has_max_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_members());
    }

    // optional fixed64 steam_id_member = 3;
    if (has_steam_id_member()) {
      total_size += 1 + 8;
    }

    // optional int32 lobby_type = 5;
    if (has_lobby_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_type());
    }

    // optional int32 lobby_flags = 6;
    if (has_lobby_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSSetLobbyData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSSetLobbyData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSSetLobbyData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSSetLobbyData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSSetLobbyData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSSetLobbyData)
    MergeFrom(*source);
  }
}

void CMsgClientMMSSetLobbyData::MergeFrom(const CMsgClientMMSSetLobbyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSSetLobbyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_metadata();
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_members_ = from.max_members_;
    }
    if (cached_has_bits & 0x00000010u) {
      steam_id_member_ = from.steam_id_member_;
    }
    if (cached_has_bits & 0x00000020u) {
      lobby_type_ = from.lobby_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      lobby_flags_ = from.lobby_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSSetLobbyData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSSetLobbyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyData::CopyFrom(const CMsgClientMMSSetLobbyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSSetLobbyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyData::IsInitialized() const {
  return true;
}

void CMsgClientMMSSetLobbyData::Swap(CMsgClientMMSSetLobbyData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSSetLobbyData::InternalSwap(CMsgClientMMSSetLobbyData* other) {
  metadata_.Swap(&other->metadata_);
  std::swap(steam_id_lobby_, other->steam_id_lobby_);
  std::swap(app_id_, other->app_id_);
  std::swap(max_members_, other->max_members_);
  std::swap(steam_id_member_, other->steam_id_member_);
  std::swap(lobby_type_, other->lobby_type_);
  std::swap(lobby_flags_, other->lobby_flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSSetLobbyData::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSSetLobbyData

// optional uint32 app_id = 1;
bool CMsgClientMMSSetLobbyData::has_app_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientMMSSetLobbyData::set_has_app_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientMMSSetLobbyData::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientMMSSetLobbyData::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientMMSSetLobbyData::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyData.app_id)
  return app_id_;
}
void CMsgClientMMSSetLobbyData::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyData.app_id)
}

// optional fixed64 steam_id_lobby = 2;
bool CMsgClientMMSSetLobbyData::has_steam_id_lobby() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSSetLobbyData::set_has_steam_id_lobby() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSSetLobbyData::clear_has_steam_id_lobby() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSSetLobbyData::clear_steam_id_lobby() {
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_lobby();
}
::google::protobuf::uint64 CMsgClientMMSSetLobbyData::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyData.steam_id_lobby)
  return steam_id_lobby_;
}
void CMsgClientMMSSetLobbyData::set_steam_id_lobby(::google::protobuf::uint64 value) {
  set_has_steam_id_lobby();
  steam_id_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyData.steam_id_lobby)
}

// optional fixed64 steam_id_member = 3;
bool CMsgClientMMSSetLobbyData::has_steam_id_member() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientMMSSetLobbyData::set_has_steam_id_member() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientMMSSetLobbyData::clear_has_steam_id_member() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientMMSSetLobbyData::clear_steam_id_member() {
  steam_id_member_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_member();
}
::google::protobuf::uint64 CMsgClientMMSSetLobbyData::steam_id_member() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyData.steam_id_member)
  return steam_id_member_;
}
void CMsgClientMMSSetLobbyData::set_steam_id_member(::google::protobuf::uint64 value) {
  set_has_steam_id_member();
  steam_id_member_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyData.steam_id_member)
}

// optional int32 max_members = 4;
bool CMsgClientMMSSetLobbyData::has_max_members() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientMMSSetLobbyData::set_has_max_members() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientMMSSetLobbyData::clear_has_max_members() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientMMSSetLobbyData::clear_max_members() {
  max_members_ = 0;
  clear_has_max_members();
}
::google::protobuf::int32 CMsgClientMMSSetLobbyData::max_members() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyData.max_members)
  return max_members_;
}
void CMsgClientMMSSetLobbyData::set_max_members(::google::protobuf::int32 value) {
  set_has_max_members();
  max_members_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyData.max_members)
}

// optional int32 lobby_type = 5;
bool CMsgClientMMSSetLobbyData::has_lobby_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientMMSSetLobbyData::set_has_lobby_type() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientMMSSetLobbyData::clear_has_lobby_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientMMSSetLobbyData::clear_lobby_type() {
  lobby_type_ = 0;
  clear_has_lobby_type();
}
::google::protobuf::int32 CMsgClientMMSSetLobbyData::lobby_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyData.lobby_type)
  return lobby_type_;
}
void CMsgClientMMSSetLobbyData::set_lobby_type(::google::protobuf::int32 value) {
  set_has_lobby_type();
  lobby_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyData.lobby_type)
}

// optional int32 lobby_flags = 6;
bool CMsgClientMMSSetLobbyData::has_lobby_flags() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientMMSSetLobbyData::set_has_lobby_flags() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientMMSSetLobbyData::clear_has_lobby_flags() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientMMSSetLobbyData::clear_lobby_flags() {
  lobby_flags_ = 0;
  clear_has_lobby_flags();
}
::google::protobuf::int32 CMsgClientMMSSetLobbyData::lobby_flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyData.lobby_flags)
  return lobby_flags_;
}
void CMsgClientMMSSetLobbyData::set_lobby_flags(::google::protobuf::int32 value) {
  set_has_lobby_flags();
  lobby_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyData.lobby_flags)
}

// optional bytes metadata = 7;
bool CMsgClientMMSSetLobbyData::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSSetLobbyData::set_has_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSSetLobbyData::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSSetLobbyData::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
const ::std::string& CMsgClientMMSSetLobbyData::metadata() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyData.metadata)
  return metadata_.GetNoArena();
}
void CMsgClientMMSSetLobbyData::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyData.metadata)
}
#if LANG_CXX11
void CMsgClientMMSSetLobbyData::set_metadata(::std::string&& value) {
  set_has_metadata();
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientMMSSetLobbyData.metadata)
}
#endif
void CMsgClientMMSSetLobbyData::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientMMSSetLobbyData.metadata)
}
void CMsgClientMMSSetLobbyData::set_metadata(const void* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientMMSSetLobbyData.metadata)
}
::std::string* CMsgClientMMSSetLobbyData::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientMMSSetLobbyData.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientMMSSetLobbyData::release_metadata() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientMMSSetLobbyData.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientMMSSetLobbyData::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientMMSSetLobbyData.metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSSetLobbyDataResponse::kAppIdFieldNumber;
const int CMsgClientMMSSetLobbyDataResponse::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSSetLobbyDataResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSSetLobbyDataResponse::CMsgClientMMSSetLobbyDataResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSSetLobbyDataResponse)
}
CMsgClientMMSSetLobbyDataResponse::CMsgClientMMSSetLobbyDataResponse(const CMsgClientMMSSetLobbyDataResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSSetLobbyDataResponse)
}

void CMsgClientMMSSetLobbyDataResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  eresult_ = 2;
}

CMsgClientMMSSetLobbyDataResponse::~CMsgClientMMSSetLobbyDataResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  SharedDtor();
}

void CMsgClientMMSSetLobbyDataResponse::SharedDtor() {
}

void CMsgClientMMSSetLobbyDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSSetLobbyDataResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSSetLobbyDataResponse& CMsgClientMMSSetLobbyDataResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSSetLobbyDataResponse* CMsgClientMMSSetLobbyDataResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSSetLobbyDataResponse* n = new CMsgClientMMSSetLobbyDataResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSSetLobbyDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSSetLobbyDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  return false;
#undef DO_
}

void CMsgClientMMSSetLobbyDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSSetLobbyDataResponse)
}

::google::protobuf::uint8* CMsgClientMMSSetLobbyDataResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  return target;
}

size_t CMsgClientMMSSetLobbyDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 eresult = 3 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSSetLobbyDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSSetLobbyDataResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSSetLobbyDataResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSSetLobbyDataResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSSetLobbyDataResponse)
    MergeFrom(*source);
  }
}

void CMsgClientMMSSetLobbyDataResponse::MergeFrom(const CMsgClientMMSSetLobbyDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSSetLobbyDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyDataResponse::CopyFrom(const CMsgClientMMSSetLobbyDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSSetLobbyDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyDataResponse::IsInitialized() const {
  return true;
}

void CMsgClientMMSSetLobbyDataResponse::Swap(CMsgClientMMSSetLobbyDataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSSetLobbyDataResponse::InternalSwap(CMsgClientMMSSetLobbyDataResponse* other) {
  std::swap(steam_id_lobby_, other->steam_id_lobby_);
  std::swap(app_id_, other->app_id_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSSetLobbyDataResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSSetLobbyDataResponse

// optional uint32 app_id = 1;
bool CMsgClientMMSSetLobbyDataResponse::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSSetLobbyDataResponse::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSSetLobbyDataResponse::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSSetLobbyDataResponse::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientMMSSetLobbyDataResponse::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyDataResponse.app_id)
  return app_id_;
}
void CMsgClientMMSSetLobbyDataResponse::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyDataResponse.app_id)
}

// optional fixed64 steam_id_lobby = 2;
bool CMsgClientMMSSetLobbyDataResponse::has_steam_id_lobby() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSSetLobbyDataResponse::set_has_steam_id_lobby() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSSetLobbyDataResponse::clear_has_steam_id_lobby() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSSetLobbyDataResponse::clear_steam_id_lobby() {
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_lobby();
}
::google::protobuf::uint64 CMsgClientMMSSetLobbyDataResponse::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyDataResponse.steam_id_lobby)
  return steam_id_lobby_;
}
void CMsgClientMMSSetLobbyDataResponse::set_steam_id_lobby(::google::protobuf::uint64 value) {
  set_has_steam_id_lobby();
  steam_id_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyDataResponse.steam_id_lobby)
}

// optional int32 eresult = 3 [default = 2];
bool CMsgClientMMSSetLobbyDataResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientMMSSetLobbyDataResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientMMSSetLobbyDataResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientMMSSetLobbyDataResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientMMSSetLobbyDataResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyDataResponse.eresult)
  return eresult_;
}
void CMsgClientMMSSetLobbyDataResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyDataResponse.eresult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSGetLobbyData::kAppIdFieldNumber;
const int CMsgClientMMSGetLobbyData::kSteamIdLobbyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSGetLobbyData::CMsgClientMMSGetLobbyData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSGetLobbyData)
}
CMsgClientMMSGetLobbyData::CMsgClientMMSGetLobbyData(const CMsgClientMMSGetLobbyData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSGetLobbyData)
}

void CMsgClientMMSGetLobbyData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
}

CMsgClientMMSGetLobbyData::~CMsgClientMMSGetLobbyData() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSGetLobbyData)
  SharedDtor();
}

void CMsgClientMMSGetLobbyData::SharedDtor() {
}

void CMsgClientMMSGetLobbyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSGetLobbyData::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSGetLobbyData& CMsgClientMMSGetLobbyData::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSGetLobbyData* CMsgClientMMSGetLobbyData::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSGetLobbyData* n = new CMsgClientMMSGetLobbyData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSGetLobbyData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSGetLobbyData)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSGetLobbyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSGetLobbyData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSGetLobbyData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSGetLobbyData)
  return false;
#undef DO_
}

void CMsgClientMMSGetLobbyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSGetLobbyData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSGetLobbyData)
}

::google::protobuf::uint8* CMsgClientMMSGetLobbyData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSGetLobbyData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSGetLobbyData)
  return target;
}

size_t CMsgClientMMSGetLobbyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSGetLobbyData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSGetLobbyData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSGetLobbyData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSGetLobbyData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSGetLobbyData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSGetLobbyData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSGetLobbyData)
    MergeFrom(*source);
  }
}

void CMsgClientMMSGetLobbyData::MergeFrom(const CMsgClientMMSGetLobbyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSGetLobbyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSGetLobbyData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSGetLobbyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSGetLobbyData::CopyFrom(const CMsgClientMMSGetLobbyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSGetLobbyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSGetLobbyData::IsInitialized() const {
  return true;
}

void CMsgClientMMSGetLobbyData::Swap(CMsgClientMMSGetLobbyData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSGetLobbyData::InternalSwap(CMsgClientMMSGetLobbyData* other) {
  std::swap(steam_id_lobby_, other->steam_id_lobby_);
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSGetLobbyData::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSGetLobbyData

// optional uint32 app_id = 1;
bool CMsgClientMMSGetLobbyData::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSGetLobbyData::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSGetLobbyData::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSGetLobbyData::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientMMSGetLobbyData::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSGetLobbyData.app_id)
  return app_id_;
}
void CMsgClientMMSGetLobbyData::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSGetLobbyData.app_id)
}

// optional fixed64 steam_id_lobby = 2;
bool CMsgClientMMSGetLobbyData::has_steam_id_lobby() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSGetLobbyData::set_has_steam_id_lobby() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSGetLobbyData::clear_has_steam_id_lobby() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSGetLobbyData::clear_steam_id_lobby() {
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_lobby();
}
::google::protobuf::uint64 CMsgClientMMSGetLobbyData::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSGetLobbyData.steam_id_lobby)
  return steam_id_lobby_;
}
void CMsgClientMMSGetLobbyData::set_steam_id_lobby(::google::protobuf::uint64 value) {
  set_has_steam_id_lobby();
  steam_id_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSGetLobbyData.steam_id_lobby)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSLobbyData_Member::kSteamIdFieldNumber;
const int CMsgClientMMSLobbyData_Member::kPersonaNameFieldNumber;
const int CMsgClientMMSLobbyData_Member::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSLobbyData_Member::CMsgClientMMSLobbyData_Member()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSLobbyData.Member)
}
CMsgClientMMSLobbyData_Member::CMsgClientMMSLobbyData_Member(const CMsgClientMMSLobbyData_Member& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSLobbyData.Member)
}

void CMsgClientMMSLobbyData_Member::SharedCtor() {
  _cached_size_ = 0;
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_ = GOOGLE_ULONGLONG(0);
}

CMsgClientMMSLobbyData_Member::~CMsgClientMMSLobbyData_Member() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSLobbyData.Member)
  SharedDtor();
}

void CMsgClientMMSLobbyData_Member::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSLobbyData_Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSLobbyData_Member::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSLobbyData_Member& CMsgClientMMSLobbyData_Member::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSLobbyData_Member* CMsgClientMMSLobbyData_Member::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSLobbyData_Member* n = new CMsgClientMMSLobbyData_Member;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSLobbyData_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSLobbyData.Member)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_persona_name()) {
      GOOGLE_DCHECK(!persona_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*persona_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_metadata()) {
      GOOGLE_DCHECK(!metadata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*metadata_.UnsafeRawStringPointer())->clear();
    }
  }
  steam_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSLobbyData_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSLobbyData.Member)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), this->persona_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientMMSLobbyData.Member.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSLobbyData.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSLobbyData.Member)
  return false;
#undef DO_
}

void CMsgClientMMSLobbyData_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSLobbyData.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSLobbyData.Member.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persona_name(), output);
  }

  // optional bytes metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->metadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSLobbyData.Member)
}

::google::protobuf::uint8* CMsgClientMMSLobbyData_Member::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSLobbyData.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSLobbyData.Member.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona_name(), target);
  }

  // optional bytes metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->metadata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSLobbyData.Member)
  return target;
}

size_t CMsgClientMMSLobbyData_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSLobbyData.Member)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string persona_name = 2;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional bytes metadata = 3;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSLobbyData_Member::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSLobbyData.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSLobbyData_Member* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSLobbyData_Member>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSLobbyData.Member)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSLobbyData.Member)
    MergeFrom(*source);
  }
}

void CMsgClientMMSLobbyData_Member::MergeFrom(const CMsgClientMMSLobbyData_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSLobbyData.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_persona_name();
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_metadata();
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_ = from.steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSLobbyData_Member::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSLobbyData.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSLobbyData_Member::CopyFrom(const CMsgClientMMSLobbyData_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSLobbyData.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLobbyData_Member::IsInitialized() const {
  return true;
}

void CMsgClientMMSLobbyData_Member::Swap(CMsgClientMMSLobbyData_Member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSLobbyData_Member::InternalSwap(CMsgClientMMSLobbyData_Member* other) {
  persona_name_.Swap(&other->persona_name_);
  metadata_.Swap(&other->metadata_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSLobbyData_Member::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSLobbyData_Member

// optional fixed64 steam_id = 1;
bool CMsgClientMMSLobbyData_Member::has_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientMMSLobbyData_Member::set_has_steam_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientMMSLobbyData_Member::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientMMSLobbyData_Member::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgClientMMSLobbyData_Member::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLobbyData.Member.steam_id)
  return steam_id_;
}
void CMsgClientMMSLobbyData_Member::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLobbyData.Member.steam_id)
}

// optional string persona_name = 2;
bool CMsgClientMMSLobbyData_Member::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSLobbyData_Member::set_has_persona_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSLobbyData_Member::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSLobbyData_Member::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona_name();
}
const ::std::string& CMsgClientMMSLobbyData_Member::persona_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLobbyData.Member.persona_name)
  return persona_name_.GetNoArena();
}
void CMsgClientMMSLobbyData_Member::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLobbyData.Member.persona_name)
}
#if LANG_CXX11
void CMsgClientMMSLobbyData_Member::set_persona_name(::std::string&& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientMMSLobbyData.Member.persona_name)
}
#endif
void CMsgClientMMSLobbyData_Member::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientMMSLobbyData.Member.persona_name)
}
void CMsgClientMMSLobbyData_Member::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientMMSLobbyData.Member.persona_name)
}
::std::string* CMsgClientMMSLobbyData_Member::mutable_persona_name() {
  set_has_persona_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientMMSLobbyData.Member.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientMMSLobbyData_Member::release_persona_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientMMSLobbyData.Member.persona_name)
  clear_has_persona_name();
  return persona_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientMMSLobbyData_Member::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != NULL) {
    set_has_persona_name();
  } else {
    clear_has_persona_name();
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientMMSLobbyData.Member.persona_name)
}

// optional bytes metadata = 3;
bool CMsgClientMMSLobbyData_Member::has_metadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSLobbyData_Member::set_has_metadata() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSLobbyData_Member::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSLobbyData_Member::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
const ::std::string& CMsgClientMMSLobbyData_Member::metadata() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLobbyData.Member.metadata)
  return metadata_.GetNoArena();
}
void CMsgClientMMSLobbyData_Member::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLobbyData.Member.metadata)
}
#if LANG_CXX11
void CMsgClientMMSLobbyData_Member::set_metadata(::std::string&& value) {
  set_has_metadata();
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientMMSLobbyData.Member.metadata)
}
#endif
void CMsgClientMMSLobbyData_Member::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientMMSLobbyData.Member.metadata)
}
void CMsgClientMMSLobbyData_Member::set_metadata(const void* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientMMSLobbyData.Member.metadata)
}
::std::string* CMsgClientMMSLobbyData_Member::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientMMSLobbyData.Member.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientMMSLobbyData_Member::release_metadata() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientMMSLobbyData.Member.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientMMSLobbyData_Member::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientMMSLobbyData.Member.metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSLobbyData::kAppIdFieldNumber;
const int CMsgClientMMSLobbyData::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSLobbyData::kNumMembersFieldNumber;
const int CMsgClientMMSLobbyData::kMaxMembersFieldNumber;
const int CMsgClientMMSLobbyData::kLobbyTypeFieldNumber;
const int CMsgClientMMSLobbyData::kLobbyFlagsFieldNumber;
const int CMsgClientMMSLobbyData::kSteamIdOwnerFieldNumber;
const int CMsgClientMMSLobbyData::kMetadataFieldNumber;
const int CMsgClientMMSLobbyData::kMembersFieldNumber;
const int CMsgClientMMSLobbyData::kLobbyCellidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSLobbyData::CMsgClientMMSLobbyData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSLobbyData)
}
CMsgClientMMSLobbyData::CMsgClientMMSLobbyData(const CMsgClientMMSLobbyData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    reinterpret_cast<char*>(&lobby_cellid_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(lobby_cellid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSLobbyData)
}

void CMsgClientMMSLobbyData::SharedCtor() {
  _cached_size_ = 0;
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&lobby_cellid_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(lobby_cellid_));
}

CMsgClientMMSLobbyData::~CMsgClientMMSLobbyData() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSLobbyData)
  SharedDtor();
}

void CMsgClientMMSLobbyData::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSLobbyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSLobbyData::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSLobbyData& CMsgClientMMSLobbyData::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSLobbyData* CMsgClientMMSLobbyData::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSLobbyData* n = new CMsgClientMMSLobbyData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSLobbyData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSLobbyData)
  members_.Clear();
  if (has_metadata()) {
    GOOGLE_DCHECK(!metadata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*metadata_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&lobby_flags_) -
      reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(lobby_flags_));
  }
  lobby_cellid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSLobbyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSLobbyData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_members = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_num_members();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_members = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_max_members();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lobby_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_lobby_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lobby_flags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_lobby_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_owner = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_steam_id_owner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientMMSLobbyData.Member members = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lobby_cellid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_lobby_cellid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_cellid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSLobbyData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSLobbyData)
  return false;
#undef DO_
}

void CMsgClientMMSLobbyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSLobbyData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional int32 num_members = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_members(), output);
  }

  // optional int32 max_members = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_members(), output);
  }

  // optional int32 lobby_type = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lobby_type(), output);
  }

  // optional int32 lobby_flags = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lobby_flags(), output);
  }

  // optional fixed64 steam_id_owner = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->steam_id_owner(), output);
  }

  // optional bytes metadata = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->metadata(), output);
  }

  // repeated .proto.steam.CMsgClientMMSLobbyData.Member members = 9;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->members(i), output);
  }

  // optional uint32 lobby_cellid = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->lobby_cellid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSLobbyData)
}

::google::protobuf::uint8* CMsgClientMMSLobbyData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSLobbyData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional int32 num_members = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_members(), target);
  }

  // optional int32 max_members = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_members(), target);
  }

  // optional int32 lobby_type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lobby_type(), target);
  }

  // optional int32 lobby_flags = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lobby_flags(), target);
  }

  // optional fixed64 steam_id_owner = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->steam_id_owner(), target);
  }

  // optional bytes metadata = 8;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->metadata(), target);
  }

  // repeated .proto.steam.CMsgClientMMSLobbyData.Member members = 9;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->members(i), deterministic, target);
  }

  // optional uint32 lobby_cellid = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->lobby_cellid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSLobbyData)
  return target;
}

size_t CMsgClientMMSLobbyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSLobbyData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientMMSLobbyData.Member members = 9;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes metadata = 8;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 num_members = 3;
    if (has_num_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_members());
    }

    // optional int32 max_members = 4;
    if (has_max_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_members());
    }

    // optional int32 lobby_type = 5;
    if (has_lobby_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_type());
    }

    // optional fixed64 steam_id_owner = 7;
    if (has_steam_id_owner()) {
      total_size += 1 + 8;
    }

    // optional int32 lobby_flags = 6;
    if (has_lobby_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_flags());
    }

  }
  // optional uint32 lobby_cellid = 10;
  if (has_lobby_cellid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lobby_cellid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSLobbyData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSLobbyData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSLobbyData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSLobbyData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSLobbyData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSLobbyData)
    MergeFrom(*source);
  }
}

void CMsgClientMMSLobbyData::MergeFrom(const CMsgClientMMSLobbyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSLobbyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_metadata();
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_members_ = from.num_members_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_members_ = from.max_members_;
    }
    if (cached_has_bits & 0x00000020u) {
      lobby_type_ = from.lobby_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      steam_id_owner_ = from.steam_id_owner_;
    }
    if (cached_has_bits & 0x00000080u) {
      lobby_flags_ = from.lobby_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_lobby_cellid(from.lobby_cellid());
  }
}

void CMsgClientMMSLobbyData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSLobbyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSLobbyData::CopyFrom(const CMsgClientMMSLobbyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSLobbyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLobbyData::IsInitialized() const {
  return true;
}

void CMsgClientMMSLobbyData::Swap(CMsgClientMMSLobbyData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSLobbyData::InternalSwap(CMsgClientMMSLobbyData* other) {
  members_.InternalSwap(&other->members_);
  metadata_.Swap(&other->metadata_);
  std::swap(steam_id_lobby_, other->steam_id_lobby_);
  std::swap(app_id_, other->app_id_);
  std::swap(num_members_, other->num_members_);
  std::swap(max_members_, other->max_members_);
  std::swap(lobby_type_, other->lobby_type_);
  std::swap(steam_id_owner_, other->steam_id_owner_);
  std::swap(lobby_flags_, other->lobby_flags_);
  std::swap(lobby_cellid_, other->lobby_cellid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSLobbyData::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSLobbyData

// optional uint32 app_id = 1;
bool CMsgClientMMSLobbyData::has_app_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientMMSLobbyData::set_has_app_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientMMSLobbyData::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientMMSLobbyData::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientMMSLobbyData::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLobbyData.app_id)
  return app_id_;
}
void CMsgClientMMSLobbyData::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLobbyData.app_id)
}

// optional fixed64 steam_id_lobby = 2;
bool CMsgClientMMSLobbyData::has_steam_id_lobby() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSLobbyData::set_has_steam_id_lobby() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSLobbyData::clear_has_steam_id_lobby() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSLobbyData::clear_steam_id_lobby() {
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_lobby();
}
::google::protobuf::uint64 CMsgClientMMSLobbyData::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLobbyData.steam_id_lobby)
  return steam_id_lobby_;
}
void CMsgClientMMSLobbyData::set_steam_id_lobby(::google::protobuf::uint64 value) {
  set_has_steam_id_lobby();
  steam_id_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLobbyData.steam_id_lobby)
}

// optional int32 num_members = 3;
bool CMsgClientMMSLobbyData::has_num_members() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientMMSLobbyData::set_has_num_members() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientMMSLobbyData::clear_has_num_members() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientMMSLobbyData::clear_num_members() {
  num_members_ = 0;
  clear_has_num_members();
}
::google::protobuf::int32 CMsgClientMMSLobbyData::num_members() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLobbyData.num_members)
  return num_members_;
}
void CMsgClientMMSLobbyData::set_num_members(::google::protobuf::int32 value) {
  set_has_num_members();
  num_members_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLobbyData.num_members)
}

// optional int32 max_members = 4;
bool CMsgClientMMSLobbyData::has_max_members() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientMMSLobbyData::set_has_max_members() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientMMSLobbyData::clear_has_max_members() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientMMSLobbyData::clear_max_members() {
  max_members_ = 0;
  clear_has_max_members();
}
::google::protobuf::int32 CMsgClientMMSLobbyData::max_members() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLobbyData.max_members)
  return max_members_;
}
void CMsgClientMMSLobbyData::set_max_members(::google::protobuf::int32 value) {
  set_has_max_members();
  max_members_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLobbyData.max_members)
}

// optional int32 lobby_type = 5;
bool CMsgClientMMSLobbyData::has_lobby_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientMMSLobbyData::set_has_lobby_type() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientMMSLobbyData::clear_has_lobby_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientMMSLobbyData::clear_lobby_type() {
  lobby_type_ = 0;
  clear_has_lobby_type();
}
::google::protobuf::int32 CMsgClientMMSLobbyData::lobby_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLobbyData.lobby_type)
  return lobby_type_;
}
void CMsgClientMMSLobbyData::set_lobby_type(::google::protobuf::int32 value) {
  set_has_lobby_type();
  lobby_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLobbyData.lobby_type)
}

// optional int32 lobby_flags = 6;
bool CMsgClientMMSLobbyData::has_lobby_flags() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgClientMMSLobbyData::set_has_lobby_flags() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgClientMMSLobbyData::clear_has_lobby_flags() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgClientMMSLobbyData::clear_lobby_flags() {
  lobby_flags_ = 0;
  clear_has_lobby_flags();
}
::google::protobuf::int32 CMsgClientMMSLobbyData::lobby_flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLobbyData.lobby_flags)
  return lobby_flags_;
}
void CMsgClientMMSLobbyData::set_lobby_flags(::google::protobuf::int32 value) {
  set_has_lobby_flags();
  lobby_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLobbyData.lobby_flags)
}

// optional fixed64 steam_id_owner = 7;
bool CMsgClientMMSLobbyData::has_steam_id_owner() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientMMSLobbyData::set_has_steam_id_owner() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientMMSLobbyData::clear_has_steam_id_owner() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientMMSLobbyData::clear_steam_id_owner() {
  steam_id_owner_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_owner();
}
::google::protobuf::uint64 CMsgClientMMSLobbyData::steam_id_owner() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLobbyData.steam_id_owner)
  return steam_id_owner_;
}
void CMsgClientMMSLobbyData::set_steam_id_owner(::google::protobuf::uint64 value) {
  set_has_steam_id_owner();
  steam_id_owner_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLobbyData.steam_id_owner)
}

// optional bytes metadata = 8;
bool CMsgClientMMSLobbyData::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSLobbyData::set_has_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSLobbyData::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSLobbyData::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
const ::std::string& CMsgClientMMSLobbyData::metadata() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLobbyData.metadata)
  return metadata_.GetNoArena();
}
void CMsgClientMMSLobbyData::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLobbyData.metadata)
}
#if LANG_CXX11
void CMsgClientMMSLobbyData::set_metadata(::std::string&& value) {
  set_has_metadata();
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientMMSLobbyData.metadata)
}
#endif
void CMsgClientMMSLobbyData::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientMMSLobbyData.metadata)
}
void CMsgClientMMSLobbyData::set_metadata(const void* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientMMSLobbyData.metadata)
}
::std::string* CMsgClientMMSLobbyData::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientMMSLobbyData.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientMMSLobbyData::release_metadata() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientMMSLobbyData.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientMMSLobbyData::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientMMSLobbyData.metadata)
}

// repeated .proto.steam.CMsgClientMMSLobbyData.Member members = 9;
int CMsgClientMMSLobbyData::members_size() const {
  return members_.size();
}
void CMsgClientMMSLobbyData::clear_members() {
  members_.Clear();
}
const ::proto::steam::CMsgClientMMSLobbyData_Member& CMsgClientMMSLobbyData::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLobbyData.members)
  return members_.Get(index);
}
::proto::steam::CMsgClientMMSLobbyData_Member* CMsgClientMMSLobbyData::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientMMSLobbyData.members)
  return members_.Mutable(index);
}
::proto::steam::CMsgClientMMSLobbyData_Member* CMsgClientMMSLobbyData::add_members() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientMMSLobbyData.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientMMSLobbyData_Member >*
CMsgClientMMSLobbyData::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientMMSLobbyData.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientMMSLobbyData_Member >&
CMsgClientMMSLobbyData::members() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientMMSLobbyData.members)
  return members_;
}

// optional uint32 lobby_cellid = 10;
bool CMsgClientMMSLobbyData::has_lobby_cellid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgClientMMSLobbyData::set_has_lobby_cellid() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgClientMMSLobbyData::clear_has_lobby_cellid() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgClientMMSLobbyData::clear_lobby_cellid() {
  lobby_cellid_ = 0u;
  clear_has_lobby_cellid();
}
::google::protobuf::uint32 CMsgClientMMSLobbyData::lobby_cellid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLobbyData.lobby_cellid)
  return lobby_cellid_;
}
void CMsgClientMMSLobbyData::set_lobby_cellid(::google::protobuf::uint32 value) {
  set_has_lobby_cellid();
  lobby_cellid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLobbyData.lobby_cellid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSSendLobbyChatMsg::kAppIdFieldNumber;
const int CMsgClientMMSSendLobbyChatMsg::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSSendLobbyChatMsg::kSteamIdTargetFieldNumber;
const int CMsgClientMMSSendLobbyChatMsg::kLobbyMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSSendLobbyChatMsg::CMsgClientMMSSendLobbyChatMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSSendLobbyChatMsg)
}
CMsgClientMMSSendLobbyChatMsg::CMsgClientMMSSendLobbyChatMsg(const CMsgClientMMSSendLobbyChatMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lobby_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lobby_message()) {
    lobby_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lobby_message_);
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSSendLobbyChatMsg)
}

void CMsgClientMMSSendLobbyChatMsg::SharedCtor() {
  _cached_size_ = 0;
  lobby_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
}

CMsgClientMMSSendLobbyChatMsg::~CMsgClientMMSSendLobbyChatMsg() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  SharedDtor();
}

void CMsgClientMMSSendLobbyChatMsg::SharedDtor() {
  lobby_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSSendLobbyChatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSSendLobbyChatMsg::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSSendLobbyChatMsg& CMsgClientMMSSendLobbyChatMsg::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSSendLobbyChatMsg* CMsgClientMMSSendLobbyChatMsg::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSSendLobbyChatMsg* n = new CMsgClientMMSSendLobbyChatMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSSendLobbyChatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  if (has_lobby_message()) {
    GOOGLE_DCHECK(!lobby_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*lobby_message_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSSendLobbyChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_target = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_steam_id_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes lobby_message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lobby_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  return false;
#undef DO_
}

void CMsgClientMMSSendLobbyChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_target = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_target(), output);
  }

  // optional bytes lobby_message = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->lobby_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSSendLobbyChatMsg)
}

::google::protobuf::uint8* CMsgClientMMSSendLobbyChatMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_target = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id_target(), target);
  }

  // optional bytes lobby_message = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->lobby_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  return target;
}

size_t CMsgClientMMSSendLobbyChatMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes lobby_message = 4;
    if (has_lobby_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lobby_message());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_target = 3;
    if (has_steam_id_target()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSSendLobbyChatMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSSendLobbyChatMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSSendLobbyChatMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSSendLobbyChatMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSSendLobbyChatMsg)
    MergeFrom(*source);
  }
}

void CMsgClientMMSSendLobbyChatMsg::MergeFrom(const CMsgClientMMSSendLobbyChatMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_lobby_message();
      lobby_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lobby_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_target_ = from.steam_id_target_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSSendLobbyChatMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSSendLobbyChatMsg::CopyFrom(const CMsgClientMMSSendLobbyChatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSSendLobbyChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSendLobbyChatMsg::IsInitialized() const {
  return true;
}

void CMsgClientMMSSendLobbyChatMsg::Swap(CMsgClientMMSSendLobbyChatMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSSendLobbyChatMsg::InternalSwap(CMsgClientMMSSendLobbyChatMsg* other) {
  lobby_message_.Swap(&other->lobby_message_);
  std::swap(steam_id_lobby_, other->steam_id_lobby_);
  std::swap(steam_id_target_, other->steam_id_target_);
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSSendLobbyChatMsg::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSSendLobbyChatMsg

// optional uint32 app_id = 1;
bool CMsgClientMMSSendLobbyChatMsg::has_app_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientMMSSendLobbyChatMsg::set_has_app_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientMMSSendLobbyChatMsg::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientMMSSendLobbyChatMsg::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientMMSSendLobbyChatMsg::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSendLobbyChatMsg.app_id)
  return app_id_;
}
void CMsgClientMMSSendLobbyChatMsg::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSendLobbyChatMsg.app_id)
}

// optional fixed64 steam_id_lobby = 2;
bool CMsgClientMMSSendLobbyChatMsg::has_steam_id_lobby() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSSendLobbyChatMsg::set_has_steam_id_lobby() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSSendLobbyChatMsg::clear_has_steam_id_lobby() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSSendLobbyChatMsg::clear_steam_id_lobby() {
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_lobby();
}
::google::protobuf::uint64 CMsgClientMMSSendLobbyChatMsg::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSendLobbyChatMsg.steam_id_lobby)
  return steam_id_lobby_;
}
void CMsgClientMMSSendLobbyChatMsg::set_steam_id_lobby(::google::protobuf::uint64 value) {
  set_has_steam_id_lobby();
  steam_id_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSendLobbyChatMsg.steam_id_lobby)
}

// optional fixed64 steam_id_target = 3;
bool CMsgClientMMSSendLobbyChatMsg::has_steam_id_target() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientMMSSendLobbyChatMsg::set_has_steam_id_target() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientMMSSendLobbyChatMsg::clear_has_steam_id_target() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientMMSSendLobbyChatMsg::clear_steam_id_target() {
  steam_id_target_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_target();
}
::google::protobuf::uint64 CMsgClientMMSSendLobbyChatMsg::steam_id_target() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSendLobbyChatMsg.steam_id_target)
  return steam_id_target_;
}
void CMsgClientMMSSendLobbyChatMsg::set_steam_id_target(::google::protobuf::uint64 value) {
  set_has_steam_id_target();
  steam_id_target_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSendLobbyChatMsg.steam_id_target)
}

// optional bytes lobby_message = 4;
bool CMsgClientMMSSendLobbyChatMsg::has_lobby_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSSendLobbyChatMsg::set_has_lobby_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSSendLobbyChatMsg::clear_has_lobby_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSSendLobbyChatMsg::clear_lobby_message() {
  lobby_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lobby_message();
}
const ::std::string& CMsgClientMMSSendLobbyChatMsg::lobby_message() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSendLobbyChatMsg.lobby_message)
  return lobby_message_.GetNoArena();
}
void CMsgClientMMSSendLobbyChatMsg::set_lobby_message(const ::std::string& value) {
  set_has_lobby_message();
  lobby_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSendLobbyChatMsg.lobby_message)
}
#if LANG_CXX11
void CMsgClientMMSSendLobbyChatMsg::set_lobby_message(::std::string&& value) {
  set_has_lobby_message();
  lobby_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientMMSSendLobbyChatMsg.lobby_message)
}
#endif
void CMsgClientMMSSendLobbyChatMsg::set_lobby_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lobby_message();
  lobby_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientMMSSendLobbyChatMsg.lobby_message)
}
void CMsgClientMMSSendLobbyChatMsg::set_lobby_message(const void* value, size_t size) {
  set_has_lobby_message();
  lobby_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientMMSSendLobbyChatMsg.lobby_message)
}
::std::string* CMsgClientMMSSendLobbyChatMsg::mutable_lobby_message() {
  set_has_lobby_message();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientMMSSendLobbyChatMsg.lobby_message)
  return lobby_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientMMSSendLobbyChatMsg::release_lobby_message() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientMMSSendLobbyChatMsg.lobby_message)
  clear_has_lobby_message();
  return lobby_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientMMSSendLobbyChatMsg::set_allocated_lobby_message(::std::string* lobby_message) {
  if (lobby_message != NULL) {
    set_has_lobby_message();
  } else {
    clear_has_lobby_message();
  }
  lobby_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lobby_message);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientMMSSendLobbyChatMsg.lobby_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSLobbyChatMsg::kAppIdFieldNumber;
const int CMsgClientMMSLobbyChatMsg::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSLobbyChatMsg::kSteamIdSenderFieldNumber;
const int CMsgClientMMSLobbyChatMsg::kLobbyMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSLobbyChatMsg::CMsgClientMMSLobbyChatMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSLobbyChatMsg)
}
CMsgClientMMSLobbyChatMsg::CMsgClientMMSLobbyChatMsg(const CMsgClientMMSLobbyChatMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lobby_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lobby_message()) {
    lobby_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lobby_message_);
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSLobbyChatMsg)
}

void CMsgClientMMSLobbyChatMsg::SharedCtor() {
  _cached_size_ = 0;
  lobby_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
}

CMsgClientMMSLobbyChatMsg::~CMsgClientMMSLobbyChatMsg() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSLobbyChatMsg)
  SharedDtor();
}

void CMsgClientMMSLobbyChatMsg::SharedDtor() {
  lobby_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSLobbyChatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSLobbyChatMsg::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSLobbyChatMsg& CMsgClientMMSLobbyChatMsg::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSLobbyChatMsg* CMsgClientMMSLobbyChatMsg::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSLobbyChatMsg* n = new CMsgClientMMSLobbyChatMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSLobbyChatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSLobbyChatMsg)
  if (has_lobby_message()) {
    GOOGLE_DCHECK(!lobby_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*lobby_message_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSLobbyChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSLobbyChatMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_sender = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_steam_id_sender();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_sender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes lobby_message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lobby_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSLobbyChatMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSLobbyChatMsg)
  return false;
#undef DO_
}

void CMsgClientMMSLobbyChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSLobbyChatMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_sender = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_sender(), output);
  }

  // optional bytes lobby_message = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->lobby_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSLobbyChatMsg)
}

::google::protobuf::uint8* CMsgClientMMSLobbyChatMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSLobbyChatMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_sender = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id_sender(), target);
  }

  // optional bytes lobby_message = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->lobby_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSLobbyChatMsg)
  return target;
}

size_t CMsgClientMMSLobbyChatMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSLobbyChatMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes lobby_message = 4;
    if (has_lobby_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lobby_message());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_sender = 3;
    if (has_steam_id_sender()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSLobbyChatMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSLobbyChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSLobbyChatMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSLobbyChatMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSLobbyChatMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSLobbyChatMsg)
    MergeFrom(*source);
  }
}

void CMsgClientMMSLobbyChatMsg::MergeFrom(const CMsgClientMMSLobbyChatMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSLobbyChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_lobby_message();
      lobby_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lobby_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_sender_ = from.steam_id_sender_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSLobbyChatMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSLobbyChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSLobbyChatMsg::CopyFrom(const CMsgClientMMSLobbyChatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSLobbyChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLobbyChatMsg::IsInitialized() const {
  return true;
}

void CMsgClientMMSLobbyChatMsg::Swap(CMsgClientMMSLobbyChatMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSLobbyChatMsg::InternalSwap(CMsgClientMMSLobbyChatMsg* other) {
  lobby_message_.Swap(&other->lobby_message_);
  std::swap(steam_id_lobby_, other->steam_id_lobby_);
  std::swap(steam_id_sender_, other->steam_id_sender_);
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSLobbyChatMsg::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSLobbyChatMsg

// optional uint32 app_id = 1;
bool CMsgClientMMSLobbyChatMsg::has_app_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientMMSLobbyChatMsg::set_has_app_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientMMSLobbyChatMsg::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientMMSLobbyChatMsg::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientMMSLobbyChatMsg::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLobbyChatMsg.app_id)
  return app_id_;
}
void CMsgClientMMSLobbyChatMsg::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLobbyChatMsg.app_id)
}

// optional fixed64 steam_id_lobby = 2;
bool CMsgClientMMSLobbyChatMsg::has_steam_id_lobby() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSLobbyChatMsg::set_has_steam_id_lobby() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSLobbyChatMsg::clear_has_steam_id_lobby() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSLobbyChatMsg::clear_steam_id_lobby() {
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_lobby();
}
::google::protobuf::uint64 CMsgClientMMSLobbyChatMsg::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLobbyChatMsg.steam_id_lobby)
  return steam_id_lobby_;
}
void CMsgClientMMSLobbyChatMsg::set_steam_id_lobby(::google::protobuf::uint64 value) {
  set_has_steam_id_lobby();
  steam_id_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLobbyChatMsg.steam_id_lobby)
}

// optional fixed64 steam_id_sender = 3;
bool CMsgClientMMSLobbyChatMsg::has_steam_id_sender() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientMMSLobbyChatMsg::set_has_steam_id_sender() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientMMSLobbyChatMsg::clear_has_steam_id_sender() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientMMSLobbyChatMsg::clear_steam_id_sender() {
  steam_id_sender_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_sender();
}
::google::protobuf::uint64 CMsgClientMMSLobbyChatMsg::steam_id_sender() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLobbyChatMsg.steam_id_sender)
  return steam_id_sender_;
}
void CMsgClientMMSLobbyChatMsg::set_steam_id_sender(::google::protobuf::uint64 value) {
  set_has_steam_id_sender();
  steam_id_sender_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLobbyChatMsg.steam_id_sender)
}

// optional bytes lobby_message = 4;
bool CMsgClientMMSLobbyChatMsg::has_lobby_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSLobbyChatMsg::set_has_lobby_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSLobbyChatMsg::clear_has_lobby_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSLobbyChatMsg::clear_lobby_message() {
  lobby_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lobby_message();
}
const ::std::string& CMsgClientMMSLobbyChatMsg::lobby_message() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLobbyChatMsg.lobby_message)
  return lobby_message_.GetNoArena();
}
void CMsgClientMMSLobbyChatMsg::set_lobby_message(const ::std::string& value) {
  set_has_lobby_message();
  lobby_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLobbyChatMsg.lobby_message)
}
#if LANG_CXX11
void CMsgClientMMSLobbyChatMsg::set_lobby_message(::std::string&& value) {
  set_has_lobby_message();
  lobby_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientMMSLobbyChatMsg.lobby_message)
}
#endif
void CMsgClientMMSLobbyChatMsg::set_lobby_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lobby_message();
  lobby_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientMMSLobbyChatMsg.lobby_message)
}
void CMsgClientMMSLobbyChatMsg::set_lobby_message(const void* value, size_t size) {
  set_has_lobby_message();
  lobby_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientMMSLobbyChatMsg.lobby_message)
}
::std::string* CMsgClientMMSLobbyChatMsg::mutable_lobby_message() {
  set_has_lobby_message();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientMMSLobbyChatMsg.lobby_message)
  return lobby_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientMMSLobbyChatMsg::release_lobby_message() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientMMSLobbyChatMsg.lobby_message)
  clear_has_lobby_message();
  return lobby_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientMMSLobbyChatMsg::set_allocated_lobby_message(::std::string* lobby_message) {
  if (lobby_message != NULL) {
    set_has_lobby_message();
  } else {
    clear_has_lobby_message();
  }
  lobby_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lobby_message);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientMMSLobbyChatMsg.lobby_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSSetLobbyOwner::kAppIdFieldNumber;
const int CMsgClientMMSSetLobbyOwner::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSSetLobbyOwner::kSteamIdNewOwnerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSSetLobbyOwner::CMsgClientMMSSetLobbyOwner()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSSetLobbyOwner)
}
CMsgClientMMSSetLobbyOwner::CMsgClientMMSSetLobbyOwner(const CMsgClientMMSSetLobbyOwner& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSSetLobbyOwner)
}

void CMsgClientMMSSetLobbyOwner::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
}

CMsgClientMMSSetLobbyOwner::~CMsgClientMMSSetLobbyOwner() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSSetLobbyOwner)
  SharedDtor();
}

void CMsgClientMMSSetLobbyOwner::SharedDtor() {
}

void CMsgClientMMSSetLobbyOwner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSSetLobbyOwner::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSSetLobbyOwner& CMsgClientMMSSetLobbyOwner::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSSetLobbyOwner* CMsgClientMMSSetLobbyOwner::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSSetLobbyOwner* n = new CMsgClientMMSSetLobbyOwner;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSSetLobbyOwner::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSSetLobbyOwner)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSSetLobbyOwner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSSetLobbyOwner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_new_owner = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_steam_id_new_owner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_new_owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSSetLobbyOwner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSSetLobbyOwner)
  return false;
#undef DO_
}

void CMsgClientMMSSetLobbyOwner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSSetLobbyOwner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_new_owner = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_new_owner(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSSetLobbyOwner)
}

::google::protobuf::uint8* CMsgClientMMSSetLobbyOwner::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSSetLobbyOwner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_new_owner = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id_new_owner(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSSetLobbyOwner)
  return target;
}

size_t CMsgClientMMSSetLobbyOwner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSSetLobbyOwner)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_new_owner = 3;
    if (has_steam_id_new_owner()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSSetLobbyOwner::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSSetLobbyOwner)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSSetLobbyOwner* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSSetLobbyOwner>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSSetLobbyOwner)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSSetLobbyOwner)
    MergeFrom(*source);
  }
}

void CMsgClientMMSSetLobbyOwner::MergeFrom(const CMsgClientMMSSetLobbyOwner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSSetLobbyOwner)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_new_owner_ = from.steam_id_new_owner_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSSetLobbyOwner::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSSetLobbyOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyOwner::CopyFrom(const CMsgClientMMSSetLobbyOwner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSSetLobbyOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyOwner::IsInitialized() const {
  return true;
}

void CMsgClientMMSSetLobbyOwner::Swap(CMsgClientMMSSetLobbyOwner* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSSetLobbyOwner::InternalSwap(CMsgClientMMSSetLobbyOwner* other) {
  std::swap(steam_id_lobby_, other->steam_id_lobby_);
  std::swap(steam_id_new_owner_, other->steam_id_new_owner_);
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSSetLobbyOwner::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSSetLobbyOwner

// optional uint32 app_id = 1;
bool CMsgClientMMSSetLobbyOwner::has_app_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientMMSSetLobbyOwner::set_has_app_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientMMSSetLobbyOwner::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientMMSSetLobbyOwner::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientMMSSetLobbyOwner::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyOwner.app_id)
  return app_id_;
}
void CMsgClientMMSSetLobbyOwner::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyOwner.app_id)
}

// optional fixed64 steam_id_lobby = 2;
bool CMsgClientMMSSetLobbyOwner::has_steam_id_lobby() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSSetLobbyOwner::set_has_steam_id_lobby() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSSetLobbyOwner::clear_has_steam_id_lobby() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSSetLobbyOwner::clear_steam_id_lobby() {
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_lobby();
}
::google::protobuf::uint64 CMsgClientMMSSetLobbyOwner::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyOwner.steam_id_lobby)
  return steam_id_lobby_;
}
void CMsgClientMMSSetLobbyOwner::set_steam_id_lobby(::google::protobuf::uint64 value) {
  set_has_steam_id_lobby();
  steam_id_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyOwner.steam_id_lobby)
}

// optional fixed64 steam_id_new_owner = 3;
bool CMsgClientMMSSetLobbyOwner::has_steam_id_new_owner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSSetLobbyOwner::set_has_steam_id_new_owner() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSSetLobbyOwner::clear_has_steam_id_new_owner() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSSetLobbyOwner::clear_steam_id_new_owner() {
  steam_id_new_owner_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_new_owner();
}
::google::protobuf::uint64 CMsgClientMMSSetLobbyOwner::steam_id_new_owner() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyOwner.steam_id_new_owner)
  return steam_id_new_owner_;
}
void CMsgClientMMSSetLobbyOwner::set_steam_id_new_owner(::google::protobuf::uint64 value) {
  set_has_steam_id_new_owner();
  steam_id_new_owner_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyOwner.steam_id_new_owner)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSSetLobbyOwnerResponse::kAppIdFieldNumber;
const int CMsgClientMMSSetLobbyOwnerResponse::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSSetLobbyOwnerResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSSetLobbyOwnerResponse::CMsgClientMMSSetLobbyOwnerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
}
CMsgClientMMSSetLobbyOwnerResponse::CMsgClientMMSSetLobbyOwnerResponse(const CMsgClientMMSSetLobbyOwnerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
}

void CMsgClientMMSSetLobbyOwnerResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  eresult_ = 2;
}

CMsgClientMMSSetLobbyOwnerResponse::~CMsgClientMMSSetLobbyOwnerResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  SharedDtor();
}

void CMsgClientMMSSetLobbyOwnerResponse::SharedDtor() {
}

void CMsgClientMMSSetLobbyOwnerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSSetLobbyOwnerResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSSetLobbyOwnerResponse& CMsgClientMMSSetLobbyOwnerResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSSetLobbyOwnerResponse* CMsgClientMMSSetLobbyOwnerResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSSetLobbyOwnerResponse* n = new CMsgClientMMSSetLobbyOwnerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSSetLobbyOwnerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSSetLobbyOwnerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  return false;
#undef DO_
}

void CMsgClientMMSSetLobbyOwnerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
}

::google::protobuf::uint8* CMsgClientMMSSetLobbyOwnerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  return target;
}

size_t CMsgClientMMSSetLobbyOwnerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 eresult = 3 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSSetLobbyOwnerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSSetLobbyOwnerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSSetLobbyOwnerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
    MergeFrom(*source);
  }
}

void CMsgClientMMSSetLobbyOwnerResponse::MergeFrom(const CMsgClientMMSSetLobbyOwnerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSSetLobbyOwnerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyOwnerResponse::CopyFrom(const CMsgClientMMSSetLobbyOwnerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSSetLobbyOwnerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyOwnerResponse::IsInitialized() const {
  return true;
}

void CMsgClientMMSSetLobbyOwnerResponse::Swap(CMsgClientMMSSetLobbyOwnerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSSetLobbyOwnerResponse::InternalSwap(CMsgClientMMSSetLobbyOwnerResponse* other) {
  std::swap(steam_id_lobby_, other->steam_id_lobby_);
  std::swap(app_id_, other->app_id_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSSetLobbyOwnerResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSSetLobbyOwnerResponse

// optional uint32 app_id = 1;
bool CMsgClientMMSSetLobbyOwnerResponse::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSSetLobbyOwnerResponse::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSSetLobbyOwnerResponse::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSSetLobbyOwnerResponse::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientMMSSetLobbyOwnerResponse::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyOwnerResponse.app_id)
  return app_id_;
}
void CMsgClientMMSSetLobbyOwnerResponse::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyOwnerResponse.app_id)
}

// optional fixed64 steam_id_lobby = 2;
bool CMsgClientMMSSetLobbyOwnerResponse::has_steam_id_lobby() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSSetLobbyOwnerResponse::set_has_steam_id_lobby() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSSetLobbyOwnerResponse::clear_has_steam_id_lobby() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSSetLobbyOwnerResponse::clear_steam_id_lobby() {
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_lobby();
}
::google::protobuf::uint64 CMsgClientMMSSetLobbyOwnerResponse::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyOwnerResponse.steam_id_lobby)
  return steam_id_lobby_;
}
void CMsgClientMMSSetLobbyOwnerResponse::set_steam_id_lobby(::google::protobuf::uint64 value) {
  set_has_steam_id_lobby();
  steam_id_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyOwnerResponse.steam_id_lobby)
}

// optional int32 eresult = 3 [default = 2];
bool CMsgClientMMSSetLobbyOwnerResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientMMSSetLobbyOwnerResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientMMSSetLobbyOwnerResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientMMSSetLobbyOwnerResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientMMSSetLobbyOwnerResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyOwnerResponse.eresult)
  return eresult_;
}
void CMsgClientMMSSetLobbyOwnerResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyOwnerResponse.eresult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSSetLobbyLinked::kAppIdFieldNumber;
const int CMsgClientMMSSetLobbyLinked::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSSetLobbyLinked::kSteamIdLobby2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSSetLobbyLinked::CMsgClientMMSSetLobbyLinked()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSSetLobbyLinked)
}
CMsgClientMMSSetLobbyLinked::CMsgClientMMSSetLobbyLinked(const CMsgClientMMSSetLobbyLinked& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSSetLobbyLinked)
}

void CMsgClientMMSSetLobbyLinked::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
}

CMsgClientMMSSetLobbyLinked::~CMsgClientMMSSetLobbyLinked() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSSetLobbyLinked)
  SharedDtor();
}

void CMsgClientMMSSetLobbyLinked::SharedDtor() {
}

void CMsgClientMMSSetLobbyLinked::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSSetLobbyLinked::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSSetLobbyLinked& CMsgClientMMSSetLobbyLinked::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSSetLobbyLinked* CMsgClientMMSSetLobbyLinked::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSSetLobbyLinked* n = new CMsgClientMMSSetLobbyLinked;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSSetLobbyLinked::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSSetLobbyLinked)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSSetLobbyLinked::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSSetLobbyLinked)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_steam_id_lobby2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSSetLobbyLinked)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSSetLobbyLinked)
  return false;
#undef DO_
}

void CMsgClientMMSSetLobbyLinked::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSSetLobbyLinked)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_lobby2 = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_lobby2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSSetLobbyLinked)
}

::google::protobuf::uint8* CMsgClientMMSSetLobbyLinked::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSSetLobbyLinked)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_lobby2 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id_lobby2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSSetLobbyLinked)
  return target;
}

size_t CMsgClientMMSSetLobbyLinked::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSSetLobbyLinked)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_lobby2 = 3;
    if (has_steam_id_lobby2()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSSetLobbyLinked::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSSetLobbyLinked)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSSetLobbyLinked* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSSetLobbyLinked>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSSetLobbyLinked)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSSetLobbyLinked)
    MergeFrom(*source);
  }
}

void CMsgClientMMSSetLobbyLinked::MergeFrom(const CMsgClientMMSSetLobbyLinked& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSSetLobbyLinked)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby2_ = from.steam_id_lobby2_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSSetLobbyLinked::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSSetLobbyLinked)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyLinked::CopyFrom(const CMsgClientMMSSetLobbyLinked& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSSetLobbyLinked)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyLinked::IsInitialized() const {
  return true;
}

void CMsgClientMMSSetLobbyLinked::Swap(CMsgClientMMSSetLobbyLinked* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSSetLobbyLinked::InternalSwap(CMsgClientMMSSetLobbyLinked* other) {
  std::swap(steam_id_lobby_, other->steam_id_lobby_);
  std::swap(steam_id_lobby2_, other->steam_id_lobby2_);
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSSetLobbyLinked::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSSetLobbyLinked

// optional uint32 app_id = 1;
bool CMsgClientMMSSetLobbyLinked::has_app_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientMMSSetLobbyLinked::set_has_app_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientMMSSetLobbyLinked::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientMMSSetLobbyLinked::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientMMSSetLobbyLinked::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyLinked.app_id)
  return app_id_;
}
void CMsgClientMMSSetLobbyLinked::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyLinked.app_id)
}

// optional fixed64 steam_id_lobby = 2;
bool CMsgClientMMSSetLobbyLinked::has_steam_id_lobby() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSSetLobbyLinked::set_has_steam_id_lobby() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSSetLobbyLinked::clear_has_steam_id_lobby() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSSetLobbyLinked::clear_steam_id_lobby() {
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_lobby();
}
::google::protobuf::uint64 CMsgClientMMSSetLobbyLinked::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyLinked.steam_id_lobby)
  return steam_id_lobby_;
}
void CMsgClientMMSSetLobbyLinked::set_steam_id_lobby(::google::protobuf::uint64 value) {
  set_has_steam_id_lobby();
  steam_id_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyLinked.steam_id_lobby)
}

// optional fixed64 steam_id_lobby2 = 3;
bool CMsgClientMMSSetLobbyLinked::has_steam_id_lobby2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSSetLobbyLinked::set_has_steam_id_lobby2() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSSetLobbyLinked::clear_has_steam_id_lobby2() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSSetLobbyLinked::clear_steam_id_lobby2() {
  steam_id_lobby2_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_lobby2();
}
::google::protobuf::uint64 CMsgClientMMSSetLobbyLinked::steam_id_lobby2() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyLinked.steam_id_lobby2)
  return steam_id_lobby2_;
}
void CMsgClientMMSSetLobbyLinked::set_steam_id_lobby2(::google::protobuf::uint64 value) {
  set_has_steam_id_lobby2();
  steam_id_lobby2_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyLinked.steam_id_lobby2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSSetLobbyGameServer::kAppIdFieldNumber;
const int CMsgClientMMSSetLobbyGameServer::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSSetLobbyGameServer::kGameServerIpFieldNumber;
const int CMsgClientMMSSetLobbyGameServer::kGameServerPortFieldNumber;
const int CMsgClientMMSSetLobbyGameServer::kGameServerSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSSetLobbyGameServer::CMsgClientMMSSetLobbyGameServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSSetLobbyGameServer)
}
CMsgClientMMSSetLobbyGameServer::CMsgClientMMSSetLobbyGameServer(const CMsgClientMMSSetLobbyGameServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    reinterpret_cast<char*>(&game_server_port_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(game_server_port_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSSetLobbyGameServer)
}

void CMsgClientMMSSetLobbyGameServer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&game_server_port_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(game_server_port_));
}

CMsgClientMMSSetLobbyGameServer::~CMsgClientMMSSetLobbyGameServer() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSSetLobbyGameServer)
  SharedDtor();
}

void CMsgClientMMSSetLobbyGameServer::SharedDtor() {
}

void CMsgClientMMSSetLobbyGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSSetLobbyGameServer::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSSetLobbyGameServer& CMsgClientMMSSetLobbyGameServer::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSSetLobbyGameServer* CMsgClientMMSSetLobbyGameServer::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSSetLobbyGameServer* n = new CMsgClientMMSSetLobbyGameServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSSetLobbyGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSSetLobbyGameServer)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&game_server_port_) -
      reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(game_server_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSSetLobbyGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSSetLobbyGameServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_server_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_game_server_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_server_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_game_server_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 game_server_steam_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_game_server_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSSetLobbyGameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSSetLobbyGameServer)
  return false;
#undef DO_
}

void CMsgClientMMSSetLobbyGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSSetLobbyGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional uint32 game_server_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_server_ip(), output);
  }

  // optional uint32 game_server_port = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_server_port(), output);
  }

  // optional fixed64 game_server_steam_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->game_server_steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSSetLobbyGameServer)
}

::google::protobuf::uint8* CMsgClientMMSSetLobbyGameServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSSetLobbyGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional uint32 game_server_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_server_ip(), target);
  }

  // optional uint32 game_server_port = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_server_port(), target);
  }

  // optional fixed64 game_server_steam_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->game_server_steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSSetLobbyGameServer)
  return target;
}

size_t CMsgClientMMSSetLobbyGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSSetLobbyGameServer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 game_server_ip = 3;
    if (has_game_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_ip());
    }

    // optional fixed64 game_server_steam_id = 5;
    if (has_game_server_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 game_server_port = 4;
    if (has_game_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSSetLobbyGameServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSSetLobbyGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSSetLobbyGameServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSSetLobbyGameServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSSetLobbyGameServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSSetLobbyGameServer)
    MergeFrom(*source);
  }
}

void CMsgClientMMSSetLobbyGameServer::MergeFrom(const CMsgClientMMSSetLobbyGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSSetLobbyGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_server_ip_ = from.game_server_ip_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_server_steam_id_ = from.game_server_steam_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_server_port_ = from.game_server_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSSetLobbyGameServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSSetLobbyGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyGameServer::CopyFrom(const CMsgClientMMSSetLobbyGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSSetLobbyGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyGameServer::IsInitialized() const {
  return true;
}

void CMsgClientMMSSetLobbyGameServer::Swap(CMsgClientMMSSetLobbyGameServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSSetLobbyGameServer::InternalSwap(CMsgClientMMSSetLobbyGameServer* other) {
  std::swap(steam_id_lobby_, other->steam_id_lobby_);
  std::swap(app_id_, other->app_id_);
  std::swap(game_server_ip_, other->game_server_ip_);
  std::swap(game_server_steam_id_, other->game_server_steam_id_);
  std::swap(game_server_port_, other->game_server_port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSSetLobbyGameServer::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSSetLobbyGameServer

// optional uint32 app_id = 1;
bool CMsgClientMMSSetLobbyGameServer::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSSetLobbyGameServer::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSSetLobbyGameServer::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSSetLobbyGameServer::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientMMSSetLobbyGameServer::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyGameServer.app_id)
  return app_id_;
}
void CMsgClientMMSSetLobbyGameServer::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyGameServer.app_id)
}

// optional fixed64 steam_id_lobby = 2;
bool CMsgClientMMSSetLobbyGameServer::has_steam_id_lobby() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSSetLobbyGameServer::set_has_steam_id_lobby() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSSetLobbyGameServer::clear_has_steam_id_lobby() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSSetLobbyGameServer::clear_steam_id_lobby() {
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_lobby();
}
::google::protobuf::uint64 CMsgClientMMSSetLobbyGameServer::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyGameServer.steam_id_lobby)
  return steam_id_lobby_;
}
void CMsgClientMMSSetLobbyGameServer::set_steam_id_lobby(::google::protobuf::uint64 value) {
  set_has_steam_id_lobby();
  steam_id_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyGameServer.steam_id_lobby)
}

// optional uint32 game_server_ip = 3;
bool CMsgClientMMSSetLobbyGameServer::has_game_server_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientMMSSetLobbyGameServer::set_has_game_server_ip() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientMMSSetLobbyGameServer::clear_has_game_server_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientMMSSetLobbyGameServer::clear_game_server_ip() {
  game_server_ip_ = 0u;
  clear_has_game_server_ip();
}
::google::protobuf::uint32 CMsgClientMMSSetLobbyGameServer::game_server_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyGameServer.game_server_ip)
  return game_server_ip_;
}
void CMsgClientMMSSetLobbyGameServer::set_game_server_ip(::google::protobuf::uint32 value) {
  set_has_game_server_ip();
  game_server_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyGameServer.game_server_ip)
}

// optional uint32 game_server_port = 4;
bool CMsgClientMMSSetLobbyGameServer::has_game_server_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientMMSSetLobbyGameServer::set_has_game_server_port() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientMMSSetLobbyGameServer::clear_has_game_server_port() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientMMSSetLobbyGameServer::clear_game_server_port() {
  game_server_port_ = 0u;
  clear_has_game_server_port();
}
::google::protobuf::uint32 CMsgClientMMSSetLobbyGameServer::game_server_port() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyGameServer.game_server_port)
  return game_server_port_;
}
void CMsgClientMMSSetLobbyGameServer::set_game_server_port(::google::protobuf::uint32 value) {
  set_has_game_server_port();
  game_server_port_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyGameServer.game_server_port)
}

// optional fixed64 game_server_steam_id = 5;
bool CMsgClientMMSSetLobbyGameServer::has_game_server_steam_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientMMSSetLobbyGameServer::set_has_game_server_steam_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientMMSSetLobbyGameServer::clear_has_game_server_steam_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientMMSSetLobbyGameServer::clear_game_server_steam_id() {
  game_server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_server_steam_id();
}
::google::protobuf::uint64 CMsgClientMMSSetLobbyGameServer::game_server_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSSetLobbyGameServer.game_server_steam_id)
  return game_server_steam_id_;
}
void CMsgClientMMSSetLobbyGameServer::set_game_server_steam_id(::google::protobuf::uint64 value) {
  set_has_game_server_steam_id();
  game_server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSSetLobbyGameServer.game_server_steam_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSLobbyGameServerSet::kAppIdFieldNumber;
const int CMsgClientMMSLobbyGameServerSet::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSLobbyGameServerSet::kGameServerIpFieldNumber;
const int CMsgClientMMSLobbyGameServerSet::kGameServerPortFieldNumber;
const int CMsgClientMMSLobbyGameServerSet::kGameServerSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSLobbyGameServerSet::CMsgClientMMSLobbyGameServerSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSLobbyGameServerSet)
}
CMsgClientMMSLobbyGameServerSet::CMsgClientMMSLobbyGameServerSet(const CMsgClientMMSLobbyGameServerSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    reinterpret_cast<char*>(&game_server_port_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(game_server_port_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSLobbyGameServerSet)
}

void CMsgClientMMSLobbyGameServerSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&game_server_port_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(game_server_port_));
}

CMsgClientMMSLobbyGameServerSet::~CMsgClientMMSLobbyGameServerSet() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSLobbyGameServerSet)
  SharedDtor();
}

void CMsgClientMMSLobbyGameServerSet::SharedDtor() {
}

void CMsgClientMMSLobbyGameServerSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSLobbyGameServerSet::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSLobbyGameServerSet& CMsgClientMMSLobbyGameServerSet::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSLobbyGameServerSet* CMsgClientMMSLobbyGameServerSet::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSLobbyGameServerSet* n = new CMsgClientMMSLobbyGameServerSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSLobbyGameServerSet::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSLobbyGameServerSet)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&game_server_port_) -
      reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(game_server_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSLobbyGameServerSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSLobbyGameServerSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_server_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_game_server_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_server_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_game_server_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 game_server_steam_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_game_server_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSLobbyGameServerSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSLobbyGameServerSet)
  return false;
#undef DO_
}

void CMsgClientMMSLobbyGameServerSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSLobbyGameServerSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional uint32 game_server_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_server_ip(), output);
  }

  // optional uint32 game_server_port = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_server_port(), output);
  }

  // optional fixed64 game_server_steam_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->game_server_steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSLobbyGameServerSet)
}

::google::protobuf::uint8* CMsgClientMMSLobbyGameServerSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSLobbyGameServerSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional uint32 game_server_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_server_ip(), target);
  }

  // optional uint32 game_server_port = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_server_port(), target);
  }

  // optional fixed64 game_server_steam_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->game_server_steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSLobbyGameServerSet)
  return target;
}

size_t CMsgClientMMSLobbyGameServerSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSLobbyGameServerSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 game_server_ip = 3;
    if (has_game_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_ip());
    }

    // optional fixed64 game_server_steam_id = 5;
    if (has_game_server_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 game_server_port = 4;
    if (has_game_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSLobbyGameServerSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSLobbyGameServerSet)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSLobbyGameServerSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSLobbyGameServerSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSLobbyGameServerSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSLobbyGameServerSet)
    MergeFrom(*source);
  }
}

void CMsgClientMMSLobbyGameServerSet::MergeFrom(const CMsgClientMMSLobbyGameServerSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSLobbyGameServerSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_server_ip_ = from.game_server_ip_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_server_steam_id_ = from.game_server_steam_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_server_port_ = from.game_server_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSLobbyGameServerSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSLobbyGameServerSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSLobbyGameServerSet::CopyFrom(const CMsgClientMMSLobbyGameServerSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSLobbyGameServerSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLobbyGameServerSet::IsInitialized() const {
  return true;
}

void CMsgClientMMSLobbyGameServerSet::Swap(CMsgClientMMSLobbyGameServerSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSLobbyGameServerSet::InternalSwap(CMsgClientMMSLobbyGameServerSet* other) {
  std::swap(steam_id_lobby_, other->steam_id_lobby_);
  std::swap(app_id_, other->app_id_);
  std::swap(game_server_ip_, other->game_server_ip_);
  std::swap(game_server_steam_id_, other->game_server_steam_id_);
  std::swap(game_server_port_, other->game_server_port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSLobbyGameServerSet::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSLobbyGameServerSet

// optional uint32 app_id = 1;
bool CMsgClientMMSLobbyGameServerSet::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSLobbyGameServerSet::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSLobbyGameServerSet::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSLobbyGameServerSet::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientMMSLobbyGameServerSet::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLobbyGameServerSet.app_id)
  return app_id_;
}
void CMsgClientMMSLobbyGameServerSet::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLobbyGameServerSet.app_id)
}

// optional fixed64 steam_id_lobby = 2;
bool CMsgClientMMSLobbyGameServerSet::has_steam_id_lobby() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSLobbyGameServerSet::set_has_steam_id_lobby() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSLobbyGameServerSet::clear_has_steam_id_lobby() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSLobbyGameServerSet::clear_steam_id_lobby() {
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_lobby();
}
::google::protobuf::uint64 CMsgClientMMSLobbyGameServerSet::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLobbyGameServerSet.steam_id_lobby)
  return steam_id_lobby_;
}
void CMsgClientMMSLobbyGameServerSet::set_steam_id_lobby(::google::protobuf::uint64 value) {
  set_has_steam_id_lobby();
  steam_id_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLobbyGameServerSet.steam_id_lobby)
}

// optional uint32 game_server_ip = 3;
bool CMsgClientMMSLobbyGameServerSet::has_game_server_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientMMSLobbyGameServerSet::set_has_game_server_ip() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientMMSLobbyGameServerSet::clear_has_game_server_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientMMSLobbyGameServerSet::clear_game_server_ip() {
  game_server_ip_ = 0u;
  clear_has_game_server_ip();
}
::google::protobuf::uint32 CMsgClientMMSLobbyGameServerSet::game_server_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLobbyGameServerSet.game_server_ip)
  return game_server_ip_;
}
void CMsgClientMMSLobbyGameServerSet::set_game_server_ip(::google::protobuf::uint32 value) {
  set_has_game_server_ip();
  game_server_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLobbyGameServerSet.game_server_ip)
}

// optional uint32 game_server_port = 4;
bool CMsgClientMMSLobbyGameServerSet::has_game_server_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientMMSLobbyGameServerSet::set_has_game_server_port() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientMMSLobbyGameServerSet::clear_has_game_server_port() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientMMSLobbyGameServerSet::clear_game_server_port() {
  game_server_port_ = 0u;
  clear_has_game_server_port();
}
::google::protobuf::uint32 CMsgClientMMSLobbyGameServerSet::game_server_port() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLobbyGameServerSet.game_server_port)
  return game_server_port_;
}
void CMsgClientMMSLobbyGameServerSet::set_game_server_port(::google::protobuf::uint32 value) {
  set_has_game_server_port();
  game_server_port_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLobbyGameServerSet.game_server_port)
}

// optional fixed64 game_server_steam_id = 5;
bool CMsgClientMMSLobbyGameServerSet::has_game_server_steam_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientMMSLobbyGameServerSet::set_has_game_server_steam_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientMMSLobbyGameServerSet::clear_has_game_server_steam_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientMMSLobbyGameServerSet::clear_game_server_steam_id() {
  game_server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_server_steam_id();
}
::google::protobuf::uint64 CMsgClientMMSLobbyGameServerSet::game_server_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSLobbyGameServerSet.game_server_steam_id)
  return game_server_steam_id_;
}
void CMsgClientMMSLobbyGameServerSet::set_game_server_steam_id(::google::protobuf::uint64 value) {
  set_has_game_server_steam_id();
  game_server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSLobbyGameServerSet.game_server_steam_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSUserJoinedLobby::kAppIdFieldNumber;
const int CMsgClientMMSUserJoinedLobby::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSUserJoinedLobby::kSteamIdUserFieldNumber;
const int CMsgClientMMSUserJoinedLobby::kPersonaNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSUserJoinedLobby::CMsgClientMMSUserJoinedLobby()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSUserJoinedLobby)
}
CMsgClientMMSUserJoinedLobby::CMsgClientMMSUserJoinedLobby(const CMsgClientMMSUserJoinedLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSUserJoinedLobby)
}

void CMsgClientMMSUserJoinedLobby::SharedCtor() {
  _cached_size_ = 0;
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
}

CMsgClientMMSUserJoinedLobby::~CMsgClientMMSUserJoinedLobby() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSUserJoinedLobby)
  SharedDtor();
}

void CMsgClientMMSUserJoinedLobby::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSUserJoinedLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSUserJoinedLobby::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSUserJoinedLobby& CMsgClientMMSUserJoinedLobby::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSUserJoinedLobby* CMsgClientMMSUserJoinedLobby::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSUserJoinedLobby* n = new CMsgClientMMSUserJoinedLobby;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSUserJoinedLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSUserJoinedLobby)
  if (has_persona_name()) {
    GOOGLE_DCHECK(!persona_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*persona_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSUserJoinedLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSUserJoinedLobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_user = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_steam_id_user();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), this->persona_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientMMSUserJoinedLobby.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSUserJoinedLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSUserJoinedLobby)
  return false;
#undef DO_
}

void CMsgClientMMSUserJoinedLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSUserJoinedLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_user = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_user(), output);
  }

  // optional string persona_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSUserJoinedLobby.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->persona_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSUserJoinedLobby)
}

::google::protobuf::uint8* CMsgClientMMSUserJoinedLobby::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSUserJoinedLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_user = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id_user(), target);
  }

  // optional string persona_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSUserJoinedLobby.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->persona_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSUserJoinedLobby)
  return target;
}

size_t CMsgClientMMSUserJoinedLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSUserJoinedLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string persona_name = 4;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_user = 3;
    if (has_steam_id_user()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSUserJoinedLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSUserJoinedLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSUserJoinedLobby* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSUserJoinedLobby>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSUserJoinedLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSUserJoinedLobby)
    MergeFrom(*source);
  }
}

void CMsgClientMMSUserJoinedLobby::MergeFrom(const CMsgClientMMSUserJoinedLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSUserJoinedLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_persona_name();
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_user_ = from.steam_id_user_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSUserJoinedLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSUserJoinedLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSUserJoinedLobby::CopyFrom(const CMsgClientMMSUserJoinedLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSUserJoinedLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSUserJoinedLobby::IsInitialized() const {
  return true;
}

void CMsgClientMMSUserJoinedLobby::Swap(CMsgClientMMSUserJoinedLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSUserJoinedLobby::InternalSwap(CMsgClientMMSUserJoinedLobby* other) {
  persona_name_.Swap(&other->persona_name_);
  std::swap(steam_id_lobby_, other->steam_id_lobby_);
  std::swap(steam_id_user_, other->steam_id_user_);
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSUserJoinedLobby::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSUserJoinedLobby

// optional uint32 app_id = 1;
bool CMsgClientMMSUserJoinedLobby::has_app_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientMMSUserJoinedLobby::set_has_app_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientMMSUserJoinedLobby::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientMMSUserJoinedLobby::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientMMSUserJoinedLobby::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSUserJoinedLobby.app_id)
  return app_id_;
}
void CMsgClientMMSUserJoinedLobby::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSUserJoinedLobby.app_id)
}

// optional fixed64 steam_id_lobby = 2;
bool CMsgClientMMSUserJoinedLobby::has_steam_id_lobby() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSUserJoinedLobby::set_has_steam_id_lobby() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSUserJoinedLobby::clear_has_steam_id_lobby() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSUserJoinedLobby::clear_steam_id_lobby() {
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_lobby();
}
::google::protobuf::uint64 CMsgClientMMSUserJoinedLobby::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSUserJoinedLobby.steam_id_lobby)
  return steam_id_lobby_;
}
void CMsgClientMMSUserJoinedLobby::set_steam_id_lobby(::google::protobuf::uint64 value) {
  set_has_steam_id_lobby();
  steam_id_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSUserJoinedLobby.steam_id_lobby)
}

// optional fixed64 steam_id_user = 3;
bool CMsgClientMMSUserJoinedLobby::has_steam_id_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientMMSUserJoinedLobby::set_has_steam_id_user() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientMMSUserJoinedLobby::clear_has_steam_id_user() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientMMSUserJoinedLobby::clear_steam_id_user() {
  steam_id_user_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_user();
}
::google::protobuf::uint64 CMsgClientMMSUserJoinedLobby::steam_id_user() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSUserJoinedLobby.steam_id_user)
  return steam_id_user_;
}
void CMsgClientMMSUserJoinedLobby::set_steam_id_user(::google::protobuf::uint64 value) {
  set_has_steam_id_user();
  steam_id_user_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSUserJoinedLobby.steam_id_user)
}

// optional string persona_name = 4;
bool CMsgClientMMSUserJoinedLobby::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSUserJoinedLobby::set_has_persona_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSUserJoinedLobby::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSUserJoinedLobby::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona_name();
}
const ::std::string& CMsgClientMMSUserJoinedLobby::persona_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSUserJoinedLobby.persona_name)
  return persona_name_.GetNoArena();
}
void CMsgClientMMSUserJoinedLobby::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSUserJoinedLobby.persona_name)
}
#if LANG_CXX11
void CMsgClientMMSUserJoinedLobby::set_persona_name(::std::string&& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientMMSUserJoinedLobby.persona_name)
}
#endif
void CMsgClientMMSUserJoinedLobby::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientMMSUserJoinedLobby.persona_name)
}
void CMsgClientMMSUserJoinedLobby::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientMMSUserJoinedLobby.persona_name)
}
::std::string* CMsgClientMMSUserJoinedLobby::mutable_persona_name() {
  set_has_persona_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientMMSUserJoinedLobby.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientMMSUserJoinedLobby::release_persona_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientMMSUserJoinedLobby.persona_name)
  clear_has_persona_name();
  return persona_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientMMSUserJoinedLobby::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != NULL) {
    set_has_persona_name();
  } else {
    clear_has_persona_name();
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientMMSUserJoinedLobby.persona_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSUserLeftLobby::kAppIdFieldNumber;
const int CMsgClientMMSUserLeftLobby::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSUserLeftLobby::kSteamIdUserFieldNumber;
const int CMsgClientMMSUserLeftLobby::kPersonaNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSUserLeftLobby::CMsgClientMMSUserLeftLobby()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSUserLeftLobby)
}
CMsgClientMMSUserLeftLobby::CMsgClientMMSUserLeftLobby(const CMsgClientMMSUserLeftLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSUserLeftLobby)
}

void CMsgClientMMSUserLeftLobby::SharedCtor() {
  _cached_size_ = 0;
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
}

CMsgClientMMSUserLeftLobby::~CMsgClientMMSUserLeftLobby() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSUserLeftLobby)
  SharedDtor();
}

void CMsgClientMMSUserLeftLobby::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSUserLeftLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSUserLeftLobby::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSUserLeftLobby& CMsgClientMMSUserLeftLobby::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSUserLeftLobby* CMsgClientMMSUserLeftLobby::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSUserLeftLobby* n = new CMsgClientMMSUserLeftLobby;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSUserLeftLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSUserLeftLobby)
  if (has_persona_name()) {
    GOOGLE_DCHECK(!persona_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*persona_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSUserLeftLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSUserLeftLobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_user = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_steam_id_user();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), this->persona_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientMMSUserLeftLobby.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSUserLeftLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSUserLeftLobby)
  return false;
#undef DO_
}

void CMsgClientMMSUserLeftLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSUserLeftLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_user = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_user(), output);
  }

  // optional string persona_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSUserLeftLobby.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->persona_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSUserLeftLobby)
}

::google::protobuf::uint8* CMsgClientMMSUserLeftLobby::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSUserLeftLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_user = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id_user(), target);
  }

  // optional string persona_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientMMSUserLeftLobby.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->persona_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSUserLeftLobby)
  return target;
}

size_t CMsgClientMMSUserLeftLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSUserLeftLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string persona_name = 4;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_user = 3;
    if (has_steam_id_user()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSUserLeftLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSUserLeftLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSUserLeftLobby* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSUserLeftLobby>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSUserLeftLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSUserLeftLobby)
    MergeFrom(*source);
  }
}

void CMsgClientMMSUserLeftLobby::MergeFrom(const CMsgClientMMSUserLeftLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSUserLeftLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_persona_name();
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_user_ = from.steam_id_user_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSUserLeftLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSUserLeftLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSUserLeftLobby::CopyFrom(const CMsgClientMMSUserLeftLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSUserLeftLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSUserLeftLobby::IsInitialized() const {
  return true;
}

void CMsgClientMMSUserLeftLobby::Swap(CMsgClientMMSUserLeftLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSUserLeftLobby::InternalSwap(CMsgClientMMSUserLeftLobby* other) {
  persona_name_.Swap(&other->persona_name_);
  std::swap(steam_id_lobby_, other->steam_id_lobby_);
  std::swap(steam_id_user_, other->steam_id_user_);
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSUserLeftLobby::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSUserLeftLobby

// optional uint32 app_id = 1;
bool CMsgClientMMSUserLeftLobby::has_app_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientMMSUserLeftLobby::set_has_app_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientMMSUserLeftLobby::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientMMSUserLeftLobby::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientMMSUserLeftLobby::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSUserLeftLobby.app_id)
  return app_id_;
}
void CMsgClientMMSUserLeftLobby::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSUserLeftLobby.app_id)
}

// optional fixed64 steam_id_lobby = 2;
bool CMsgClientMMSUserLeftLobby::has_steam_id_lobby() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSUserLeftLobby::set_has_steam_id_lobby() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSUserLeftLobby::clear_has_steam_id_lobby() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSUserLeftLobby::clear_steam_id_lobby() {
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_lobby();
}
::google::protobuf::uint64 CMsgClientMMSUserLeftLobby::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSUserLeftLobby.steam_id_lobby)
  return steam_id_lobby_;
}
void CMsgClientMMSUserLeftLobby::set_steam_id_lobby(::google::protobuf::uint64 value) {
  set_has_steam_id_lobby();
  steam_id_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSUserLeftLobby.steam_id_lobby)
}

// optional fixed64 steam_id_user = 3;
bool CMsgClientMMSUserLeftLobby::has_steam_id_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientMMSUserLeftLobby::set_has_steam_id_user() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientMMSUserLeftLobby::clear_has_steam_id_user() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientMMSUserLeftLobby::clear_steam_id_user() {
  steam_id_user_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_user();
}
::google::protobuf::uint64 CMsgClientMMSUserLeftLobby::steam_id_user() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSUserLeftLobby.steam_id_user)
  return steam_id_user_;
}
void CMsgClientMMSUserLeftLobby::set_steam_id_user(::google::protobuf::uint64 value) {
  set_has_steam_id_user();
  steam_id_user_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSUserLeftLobby.steam_id_user)
}

// optional string persona_name = 4;
bool CMsgClientMMSUserLeftLobby::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSUserLeftLobby::set_has_persona_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSUserLeftLobby::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSUserLeftLobby::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona_name();
}
const ::std::string& CMsgClientMMSUserLeftLobby::persona_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSUserLeftLobby.persona_name)
  return persona_name_.GetNoArena();
}
void CMsgClientMMSUserLeftLobby::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSUserLeftLobby.persona_name)
}
#if LANG_CXX11
void CMsgClientMMSUserLeftLobby::set_persona_name(::std::string&& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientMMSUserLeftLobby.persona_name)
}
#endif
void CMsgClientMMSUserLeftLobby::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientMMSUserLeftLobby.persona_name)
}
void CMsgClientMMSUserLeftLobby::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientMMSUserLeftLobby.persona_name)
}
::std::string* CMsgClientMMSUserLeftLobby::mutable_persona_name() {
  set_has_persona_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientMMSUserLeftLobby.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientMMSUserLeftLobby::release_persona_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientMMSUserLeftLobby.persona_name)
  clear_has_persona_name();
  return persona_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientMMSUserLeftLobby::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != NULL) {
    set_has_persona_name();
  } else {
    clear_has_persona_name();
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientMMSUserLeftLobby.persona_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientMMSInviteToLobby::kAppIdFieldNumber;
const int CMsgClientMMSInviteToLobby::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSInviteToLobby::kSteamIdUserInvitedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientMMSInviteToLobby::CMsgClientMMSInviteToLobby()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientMMSInviteToLobby)
}
CMsgClientMMSInviteToLobby::CMsgClientMMSInviteToLobby(const CMsgClientMMSInviteToLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientMMSInviteToLobby)
}

void CMsgClientMMSInviteToLobby::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
}

CMsgClientMMSInviteToLobby::~CMsgClientMMSInviteToLobby() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientMMSInviteToLobby)
  SharedDtor();
}

void CMsgClientMMSInviteToLobby::SharedDtor() {
}

void CMsgClientMMSInviteToLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientMMSInviteToLobby::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientMMSInviteToLobby& CMsgClientMMSInviteToLobby::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientMMSInviteToLobby* CMsgClientMMSInviteToLobby::New(::google::protobuf::Arena* arena) const {
  CMsgClientMMSInviteToLobby* n = new CMsgClientMMSInviteToLobby;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientMMSInviteToLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientMMSInviteToLobby)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&steam_id_lobby_, 0, reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&steam_id_lobby_) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientMMSInviteToLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientMMSInviteToLobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_user_invited = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_steam_id_user_invited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_user_invited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientMMSInviteToLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientMMSInviteToLobby)
  return false;
#undef DO_
}

void CMsgClientMMSInviteToLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientMMSInviteToLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_user_invited = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_user_invited(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientMMSInviteToLobby)
}

::google::protobuf::uint8* CMsgClientMMSInviteToLobby::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientMMSInviteToLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_user_invited = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id_user_invited(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientMMSInviteToLobby)
  return target;
}

size_t CMsgClientMMSInviteToLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientMMSInviteToLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_user_invited = 3;
    if (has_steam_id_user_invited()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSInviteToLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientMMSInviteToLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSInviteToLobby* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientMMSInviteToLobby>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientMMSInviteToLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientMMSInviteToLobby)
    MergeFrom(*source);
  }
}

void CMsgClientMMSInviteToLobby::MergeFrom(const CMsgClientMMSInviteToLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientMMSInviteToLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_user_invited_ = from.steam_id_user_invited_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSInviteToLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientMMSInviteToLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSInviteToLobby::CopyFrom(const CMsgClientMMSInviteToLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientMMSInviteToLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSInviteToLobby::IsInitialized() const {
  return true;
}

void CMsgClientMMSInviteToLobby::Swap(CMsgClientMMSInviteToLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientMMSInviteToLobby::InternalSwap(CMsgClientMMSInviteToLobby* other) {
  std::swap(steam_id_lobby_, other->steam_id_lobby_);
  std::swap(steam_id_user_invited_, other->steam_id_user_invited_);
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientMMSInviteToLobby::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientMMSInviteToLobby

// optional uint32 app_id = 1;
bool CMsgClientMMSInviteToLobby::has_app_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientMMSInviteToLobby::set_has_app_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientMMSInviteToLobby::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientMMSInviteToLobby::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientMMSInviteToLobby::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSInviteToLobby.app_id)
  return app_id_;
}
void CMsgClientMMSInviteToLobby::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSInviteToLobby.app_id)
}

// optional fixed64 steam_id_lobby = 2;
bool CMsgClientMMSInviteToLobby::has_steam_id_lobby() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientMMSInviteToLobby::set_has_steam_id_lobby() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientMMSInviteToLobby::clear_has_steam_id_lobby() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientMMSInviteToLobby::clear_steam_id_lobby() {
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_lobby();
}
::google::protobuf::uint64 CMsgClientMMSInviteToLobby::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSInviteToLobby.steam_id_lobby)
  return steam_id_lobby_;
}
void CMsgClientMMSInviteToLobby::set_steam_id_lobby(::google::protobuf::uint64 value) {
  set_has_steam_id_lobby();
  steam_id_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSInviteToLobby.steam_id_lobby)
}

// optional fixed64 steam_id_user_invited = 3;
bool CMsgClientMMSInviteToLobby::has_steam_id_user_invited() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientMMSInviteToLobby::set_has_steam_id_user_invited() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientMMSInviteToLobby::clear_has_steam_id_user_invited() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientMMSInviteToLobby::clear_steam_id_user_invited() {
  steam_id_user_invited_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_user_invited();
}
::google::protobuf::uint64 CMsgClientMMSInviteToLobby::steam_id_user_invited() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientMMSInviteToLobby.steam_id_user_invited)
  return steam_id_user_invited_;
}
void CMsgClientMMSInviteToLobby::set_steam_id_user_invited(::google::protobuf::uint64 value) {
  set_has_steam_id_user_invited();
  steam_id_user_invited_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientMMSInviteToLobby.steam_id_user_invited)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUDSInviteToGame::kSteamIdDestFieldNumber;
const int CMsgClientUDSInviteToGame::kSteamIdSrcFieldNumber;
const int CMsgClientUDSInviteToGame::kConnectStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUDSInviteToGame::CMsgClientUDSInviteToGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUDSInviteToGame)
}
CMsgClientUDSInviteToGame::CMsgClientUDSInviteToGame(const CMsgClientUDSInviteToGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connect_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_connect_string()) {
    connect_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_string_);
  }
  ::memcpy(&steam_id_dest_, &from.steam_id_dest_,
    reinterpret_cast<char*>(&steam_id_src_) -
    reinterpret_cast<char*>(&steam_id_dest_) + sizeof(steam_id_src_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUDSInviteToGame)
}

void CMsgClientUDSInviteToGame::SharedCtor() {
  _cached_size_ = 0;
  connect_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_dest_, 0, reinterpret_cast<char*>(&steam_id_src_) -
    reinterpret_cast<char*>(&steam_id_dest_) + sizeof(steam_id_src_));
}

CMsgClientUDSInviteToGame::~CMsgClientUDSInviteToGame() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUDSInviteToGame)
  SharedDtor();
}

void CMsgClientUDSInviteToGame::SharedDtor() {
  connect_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUDSInviteToGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUDSInviteToGame::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUDSInviteToGame& CMsgClientUDSInviteToGame::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUDSInviteToGame* CMsgClientUDSInviteToGame::New(::google::protobuf::Arena* arena) const {
  CMsgClientUDSInviteToGame* n = new CMsgClientUDSInviteToGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUDSInviteToGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUDSInviteToGame)
  if (has_connect_string()) {
    GOOGLE_DCHECK(!connect_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*connect_string_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&steam_id_dest_, 0, reinterpret_cast<char*>(&steam_id_src_) -
      reinterpret_cast<char*>(&steam_id_dest_) + sizeof(steam_id_src_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUDSInviteToGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUDSInviteToGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_dest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id_dest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_dest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_src = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_src();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_src_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string connect_string = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->connect_string().data(), this->connect_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUDSInviteToGame.connect_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUDSInviteToGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUDSInviteToGame)
  return false;
#undef DO_
}

void CMsgClientUDSInviteToGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUDSInviteToGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_dest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_dest(), output);
  }

  // optional fixed64 steam_id_src = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_src(), output);
  }

  // optional string connect_string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connect_string().data(), this->connect_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUDSInviteToGame.connect_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->connect_string(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUDSInviteToGame)
}

::google::protobuf::uint8* CMsgClientUDSInviteToGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUDSInviteToGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_dest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id_dest(), target);
  }

  // optional fixed64 steam_id_src = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_src(), target);
  }

  // optional string connect_string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connect_string().data(), this->connect_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUDSInviteToGame.connect_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->connect_string(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUDSInviteToGame)
  return target;
}

size_t CMsgClientUDSInviteToGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUDSInviteToGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string connect_string = 3;
    if (has_connect_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connect_string());
    }

    // optional fixed64 steam_id_dest = 1;
    if (has_steam_id_dest()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_src = 2;
    if (has_steam_id_src()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUDSInviteToGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUDSInviteToGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUDSInviteToGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUDSInviteToGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUDSInviteToGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUDSInviteToGame)
    MergeFrom(*source);
  }
}

void CMsgClientUDSInviteToGame::MergeFrom(const CMsgClientUDSInviteToGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUDSInviteToGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_connect_string();
      connect_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_dest_ = from.steam_id_dest_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_src_ = from.steam_id_src_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUDSInviteToGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUDSInviteToGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUDSInviteToGame::CopyFrom(const CMsgClientUDSInviteToGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUDSInviteToGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUDSInviteToGame::IsInitialized() const {
  return true;
}

void CMsgClientUDSInviteToGame::Swap(CMsgClientUDSInviteToGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUDSInviteToGame::InternalSwap(CMsgClientUDSInviteToGame* other) {
  connect_string_.Swap(&other->connect_string_);
  std::swap(steam_id_dest_, other->steam_id_dest_);
  std::swap(steam_id_src_, other->steam_id_src_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUDSInviteToGame::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUDSInviteToGame

// optional fixed64 steam_id_dest = 1;
bool CMsgClientUDSInviteToGame::has_steam_id_dest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientUDSInviteToGame::set_has_steam_id_dest() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientUDSInviteToGame::clear_has_steam_id_dest() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientUDSInviteToGame::clear_steam_id_dest() {
  steam_id_dest_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_dest();
}
::google::protobuf::uint64 CMsgClientUDSInviteToGame::steam_id_dest() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUDSInviteToGame.steam_id_dest)
  return steam_id_dest_;
}
void CMsgClientUDSInviteToGame::set_steam_id_dest(::google::protobuf::uint64 value) {
  set_has_steam_id_dest();
  steam_id_dest_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUDSInviteToGame.steam_id_dest)
}

// optional fixed64 steam_id_src = 2;
bool CMsgClientUDSInviteToGame::has_steam_id_src() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientUDSInviteToGame::set_has_steam_id_src() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientUDSInviteToGame::clear_has_steam_id_src() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientUDSInviteToGame::clear_steam_id_src() {
  steam_id_src_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_src();
}
::google::protobuf::uint64 CMsgClientUDSInviteToGame::steam_id_src() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUDSInviteToGame.steam_id_src)
  return steam_id_src_;
}
void CMsgClientUDSInviteToGame::set_steam_id_src(::google::protobuf::uint64 value) {
  set_has_steam_id_src();
  steam_id_src_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUDSInviteToGame.steam_id_src)
}

// optional string connect_string = 3;
bool CMsgClientUDSInviteToGame::has_connect_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUDSInviteToGame::set_has_connect_string() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUDSInviteToGame::clear_has_connect_string() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUDSInviteToGame::clear_connect_string() {
  connect_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_connect_string();
}
const ::std::string& CMsgClientUDSInviteToGame::connect_string() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUDSInviteToGame.connect_string)
  return connect_string_.GetNoArena();
}
void CMsgClientUDSInviteToGame::set_connect_string(const ::std::string& value) {
  set_has_connect_string();
  connect_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUDSInviteToGame.connect_string)
}
#if LANG_CXX11
void CMsgClientUDSInviteToGame::set_connect_string(::std::string&& value) {
  set_has_connect_string();
  connect_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUDSInviteToGame.connect_string)
}
#endif
void CMsgClientUDSInviteToGame::set_connect_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_connect_string();
  connect_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUDSInviteToGame.connect_string)
}
void CMsgClientUDSInviteToGame::set_connect_string(const char* value, size_t size) {
  set_has_connect_string();
  connect_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUDSInviteToGame.connect_string)
}
::std::string* CMsgClientUDSInviteToGame::mutable_connect_string() {
  set_has_connect_string();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUDSInviteToGame.connect_string)
  return connect_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUDSInviteToGame::release_connect_string() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUDSInviteToGame.connect_string)
  clear_has_connect_string();
  return connect_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUDSInviteToGame::set_allocated_connect_string(::std::string* connect_string) {
  if (connect_string != NULL) {
    set_has_connect_string();
  } else {
    clear_has_connect_string();
  }
  connect_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connect_string);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUDSInviteToGame.connect_string)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientChatInvite::kSteamIdInvitedFieldNumber;
const int CMsgClientChatInvite::kSteamIdChatFieldNumber;
const int CMsgClientChatInvite::kSteamIdPatronFieldNumber;
const int CMsgClientChatInvite::kChatroomTypeFieldNumber;
const int CMsgClientChatInvite::kSteamIdFriendChatFieldNumber;
const int CMsgClientChatInvite::kChatNameFieldNumber;
const int CMsgClientChatInvite::kGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientChatInvite::CMsgClientChatInvite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientChatInvite)
}
CMsgClientChatInvite::CMsgClientChatInvite(const CMsgClientChatInvite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chat_name()) {
    chat_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_name_);
  }
  ::memcpy(&steam_id_invited_, &from.steam_id_invited_,
    reinterpret_cast<char*>(&chatroom_type_) -
    reinterpret_cast<char*>(&steam_id_invited_) + sizeof(chatroom_type_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientChatInvite)
}

void CMsgClientChatInvite::SharedCtor() {
  _cached_size_ = 0;
  chat_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_invited_, 0, reinterpret_cast<char*>(&chatroom_type_) -
    reinterpret_cast<char*>(&steam_id_invited_) + sizeof(chatroom_type_));
}

CMsgClientChatInvite::~CMsgClientChatInvite() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientChatInvite)
  SharedDtor();
}

void CMsgClientChatInvite::SharedDtor() {
  chat_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientChatInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientChatInvite::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientChatInvite& CMsgClientChatInvite::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientChatInvite* CMsgClientChatInvite::New(::google::protobuf::Arena* arena) const {
  CMsgClientChatInvite* n = new CMsgClientChatInvite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientChatInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientChatInvite)
  if (has_chat_name()) {
    GOOGLE_DCHECK(!chat_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*chat_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&steam_id_invited_, 0, reinterpret_cast<char*>(&chatroom_type_) -
      reinterpret_cast<char*>(&steam_id_invited_) + sizeof(chatroom_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientChatInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientChatInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_invited = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id_invited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_invited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_chat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id_chat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_chat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_patron = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_steam_id_patron();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_patron_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chatroom_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_chatroom_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chatroom_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_friend_chat = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_steam_id_friend_chat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_friend_chat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string chat_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chat_name().data(), this->chat_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientChatInvite.chat_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 game_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientChatInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientChatInvite)
  return false;
#undef DO_
}

void CMsgClientChatInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientChatInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_invited = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_invited(), output);
  }

  // optional fixed64 steam_id_chat = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_chat(), output);
  }

  // optional fixed64 steam_id_patron = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_patron(), output);
  }

  // optional int32 chatroom_type = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chatroom_type(), output);
  }

  // optional fixed64 steam_id_friend_chat = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->steam_id_friend_chat(), output);
  }

  // optional string chat_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_name().data(), this->chat_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientChatInvite.chat_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->chat_name(), output);
  }

  // optional fixed64 game_id = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->game_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientChatInvite)
}

::google::protobuf::uint8* CMsgClientChatInvite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientChatInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_invited = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id_invited(), target);
  }

  // optional fixed64 steam_id_chat = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_chat(), target);
  }

  // optional fixed64 steam_id_patron = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id_patron(), target);
  }

  // optional int32 chatroom_type = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chatroom_type(), target);
  }

  // optional fixed64 steam_id_friend_chat = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->steam_id_friend_chat(), target);
  }

  // optional string chat_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_name().data(), this->chat_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientChatInvite.chat_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->chat_name(), target);
  }

  // optional fixed64 game_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->game_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientChatInvite)
  return target;
}

size_t CMsgClientChatInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientChatInvite)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string chat_name = 6;
    if (has_chat_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat_name());
    }

    // optional fixed64 steam_id_invited = 1;
    if (has_steam_id_invited()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_chat = 2;
    if (has_steam_id_chat()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_patron = 3;
    if (has_steam_id_patron()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_friend_chat = 5;
    if (has_steam_id_friend_chat()) {
      total_size += 1 + 8;
    }

    // optional fixed64 game_id = 7;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

    // optional int32 chatroom_type = 4;
    if (has_chatroom_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chatroom_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientChatInvite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientChatInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientChatInvite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientChatInvite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientChatInvite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientChatInvite)
    MergeFrom(*source);
  }
}

void CMsgClientChatInvite::MergeFrom(const CMsgClientChatInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientChatInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chat_name();
      chat_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_invited_ = from.steam_id_invited_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_chat_ = from.steam_id_chat_;
    }
    if (cached_has_bits & 0x00000008u) {
      steam_id_patron_ = from.steam_id_patron_;
    }
    if (cached_has_bits & 0x00000010u) {
      steam_id_friend_chat_ = from.steam_id_friend_chat_;
    }
    if (cached_has_bits & 0x00000020u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      chatroom_type_ = from.chatroom_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientChatInvite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientChatInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientChatInvite::CopyFrom(const CMsgClientChatInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientChatInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChatInvite::IsInitialized() const {
  return true;
}

void CMsgClientChatInvite::Swap(CMsgClientChatInvite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientChatInvite::InternalSwap(CMsgClientChatInvite* other) {
  chat_name_.Swap(&other->chat_name_);
  std::swap(steam_id_invited_, other->steam_id_invited_);
  std::swap(steam_id_chat_, other->steam_id_chat_);
  std::swap(steam_id_patron_, other->steam_id_patron_);
  std::swap(steam_id_friend_chat_, other->steam_id_friend_chat_);
  std::swap(game_id_, other->game_id_);
  std::swap(chatroom_type_, other->chatroom_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientChatInvite::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientChatInvite

// optional fixed64 steam_id_invited = 1;
bool CMsgClientChatInvite::has_steam_id_invited() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientChatInvite::set_has_steam_id_invited() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientChatInvite::clear_has_steam_id_invited() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientChatInvite::clear_steam_id_invited() {
  steam_id_invited_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_invited();
}
::google::protobuf::uint64 CMsgClientChatInvite::steam_id_invited() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientChatInvite.steam_id_invited)
  return steam_id_invited_;
}
void CMsgClientChatInvite::set_steam_id_invited(::google::protobuf::uint64 value) {
  set_has_steam_id_invited();
  steam_id_invited_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientChatInvite.steam_id_invited)
}

// optional fixed64 steam_id_chat = 2;
bool CMsgClientChatInvite::has_steam_id_chat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientChatInvite::set_has_steam_id_chat() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientChatInvite::clear_has_steam_id_chat() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientChatInvite::clear_steam_id_chat() {
  steam_id_chat_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_chat();
}
::google::protobuf::uint64 CMsgClientChatInvite::steam_id_chat() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientChatInvite.steam_id_chat)
  return steam_id_chat_;
}
void CMsgClientChatInvite::set_steam_id_chat(::google::protobuf::uint64 value) {
  set_has_steam_id_chat();
  steam_id_chat_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientChatInvite.steam_id_chat)
}

// optional fixed64 steam_id_patron = 3;
bool CMsgClientChatInvite::has_steam_id_patron() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientChatInvite::set_has_steam_id_patron() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientChatInvite::clear_has_steam_id_patron() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientChatInvite::clear_steam_id_patron() {
  steam_id_patron_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_patron();
}
::google::protobuf::uint64 CMsgClientChatInvite::steam_id_patron() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientChatInvite.steam_id_patron)
  return steam_id_patron_;
}
void CMsgClientChatInvite::set_steam_id_patron(::google::protobuf::uint64 value) {
  set_has_steam_id_patron();
  steam_id_patron_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientChatInvite.steam_id_patron)
}

// optional int32 chatroom_type = 4;
bool CMsgClientChatInvite::has_chatroom_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientChatInvite::set_has_chatroom_type() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientChatInvite::clear_has_chatroom_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientChatInvite::clear_chatroom_type() {
  chatroom_type_ = 0;
  clear_has_chatroom_type();
}
::google::protobuf::int32 CMsgClientChatInvite::chatroom_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientChatInvite.chatroom_type)
  return chatroom_type_;
}
void CMsgClientChatInvite::set_chatroom_type(::google::protobuf::int32 value) {
  set_has_chatroom_type();
  chatroom_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientChatInvite.chatroom_type)
}

// optional fixed64 steam_id_friend_chat = 5;
bool CMsgClientChatInvite::has_steam_id_friend_chat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientChatInvite::set_has_steam_id_friend_chat() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientChatInvite::clear_has_steam_id_friend_chat() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientChatInvite::clear_steam_id_friend_chat() {
  steam_id_friend_chat_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_friend_chat();
}
::google::protobuf::uint64 CMsgClientChatInvite::steam_id_friend_chat() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientChatInvite.steam_id_friend_chat)
  return steam_id_friend_chat_;
}
void CMsgClientChatInvite::set_steam_id_friend_chat(::google::protobuf::uint64 value) {
  set_has_steam_id_friend_chat();
  steam_id_friend_chat_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientChatInvite.steam_id_friend_chat)
}

// optional string chat_name = 6;
bool CMsgClientChatInvite::has_chat_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientChatInvite::set_has_chat_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientChatInvite::clear_has_chat_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientChatInvite::clear_chat_name() {
  chat_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chat_name();
}
const ::std::string& CMsgClientChatInvite::chat_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientChatInvite.chat_name)
  return chat_name_.GetNoArena();
}
void CMsgClientChatInvite::set_chat_name(const ::std::string& value) {
  set_has_chat_name();
  chat_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientChatInvite.chat_name)
}
#if LANG_CXX11
void CMsgClientChatInvite::set_chat_name(::std::string&& value) {
  set_has_chat_name();
  chat_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientChatInvite.chat_name)
}
#endif
void CMsgClientChatInvite::set_chat_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chat_name();
  chat_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientChatInvite.chat_name)
}
void CMsgClientChatInvite::set_chat_name(const char* value, size_t size) {
  set_has_chat_name();
  chat_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientChatInvite.chat_name)
}
::std::string* CMsgClientChatInvite::mutable_chat_name() {
  set_has_chat_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientChatInvite.chat_name)
  return chat_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientChatInvite::release_chat_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientChatInvite.chat_name)
  clear_has_chat_name();
  return chat_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientChatInvite::set_allocated_chat_name(::std::string* chat_name) {
  if (chat_name != NULL) {
    set_has_chat_name();
  } else {
    clear_has_chat_name();
  }
  chat_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientChatInvite.chat_name)
}

// optional fixed64 game_id = 7;
bool CMsgClientChatInvite::has_game_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientChatInvite::set_has_game_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientChatInvite::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientChatInvite::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_id();
}
::google::protobuf::uint64 CMsgClientChatInvite::game_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientChatInvite.game_id)
  return game_id_;
}
void CMsgClientChatInvite::set_game_id(::google::protobuf::uint64 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientChatInvite.game_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientConnectionStats_Stats_Logon::kConnectAttemptsFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kConnectSuccessesFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kConnectFailuresFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kConnectionsDroppedFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kSecondsRunningFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kMsecTologonthistimeFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kCountBadCmsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientConnectionStats_Stats_Logon::CMsgClientConnectionStats_Stats_Logon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientConnectionStats.Stats_Logon)
}
CMsgClientConnectionStats_Stats_Logon::CMsgClientConnectionStats_Stats_Logon(const CMsgClientConnectionStats_Stats_Logon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&connect_attempts_, &from.connect_attempts_,
    reinterpret_cast<char*>(&count_bad_cms_) -
    reinterpret_cast<char*>(&connect_attempts_) + sizeof(count_bad_cms_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientConnectionStats.Stats_Logon)
}

void CMsgClientConnectionStats_Stats_Logon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&connect_attempts_, 0, reinterpret_cast<char*>(&count_bad_cms_) -
    reinterpret_cast<char*>(&connect_attempts_) + sizeof(count_bad_cms_));
}

CMsgClientConnectionStats_Stats_Logon::~CMsgClientConnectionStats_Stats_Logon() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  SharedDtor();
}

void CMsgClientConnectionStats_Stats_Logon::SharedDtor() {
}

void CMsgClientConnectionStats_Stats_Logon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientConnectionStats_Stats_Logon::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientConnectionStats_Stats_Logon& CMsgClientConnectionStats_Stats_Logon::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientConnectionStats_Stats_Logon* CMsgClientConnectionStats_Stats_Logon::New(::google::protobuf::Arena* arena) const {
  CMsgClientConnectionStats_Stats_Logon* n = new CMsgClientConnectionStats_Stats_Logon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientConnectionStats_Stats_Logon::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&connect_attempts_, 0, reinterpret_cast<char*>(&count_bad_cms_) -
      reinterpret_cast<char*>(&connect_attempts_) + sizeof(count_bad_cms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientConnectionStats_Stats_Logon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 connect_attempts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_connect_attempts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connect_attempts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 connect_successes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_connect_successes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connect_successes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 connect_failures = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_connect_failures();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connect_failures_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 connections_dropped = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_connections_dropped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connections_dropped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_running = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_seconds_running();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_running_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 msec_tologonthistime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_msec_tologonthistime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msec_tologonthistime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count_bad_cms = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_count_bad_cms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_bad_cms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  return false;
#undef DO_
}

void CMsgClientConnectionStats_Stats_Logon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 connect_attempts = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->connect_attempts(), output);
  }

  // optional int32 connect_successes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->connect_successes(), output);
  }

  // optional int32 connect_failures = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->connect_failures(), output);
  }

  // optional int32 connections_dropped = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->connections_dropped(), output);
  }

  // optional uint32 seconds_running = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seconds_running(), output);
  }

  // optional uint32 msec_tologonthistime = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->msec_tologonthistime(), output);
  }

  // optional uint32 count_bad_cms = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->count_bad_cms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientConnectionStats.Stats_Logon)
}

::google::protobuf::uint8* CMsgClientConnectionStats_Stats_Logon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 connect_attempts = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->connect_attempts(), target);
  }

  // optional int32 connect_successes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->connect_successes(), target);
  }

  // optional int32 connect_failures = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->connect_failures(), target);
  }

  // optional int32 connections_dropped = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->connections_dropped(), target);
  }

  // optional uint32 seconds_running = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seconds_running(), target);
  }

  // optional uint32 msec_tologonthistime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->msec_tologonthistime(), target);
  }

  // optional uint32 count_bad_cms = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->count_bad_cms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  return target;
}

size_t CMsgClientConnectionStats_Stats_Logon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 connect_attempts = 1;
    if (has_connect_attempts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connect_attempts());
    }

    // optional int32 connect_successes = 2;
    if (has_connect_successes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connect_successes());
    }

    // optional int32 connect_failures = 3;
    if (has_connect_failures()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connect_failures());
    }

    // optional int32 connections_dropped = 4;
    if (has_connections_dropped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connections_dropped());
    }

    // optional uint32 seconds_running = 5;
    if (has_seconds_running()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_running());
    }

    // optional uint32 msec_tologonthistime = 6;
    if (has_msec_tologonthistime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msec_tologonthistime());
    }

    // optional uint32 count_bad_cms = 7;
    if (has_count_bad_cms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_bad_cms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientConnectionStats_Stats_Logon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientConnectionStats_Stats_Logon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientConnectionStats_Stats_Logon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientConnectionStats.Stats_Logon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientConnectionStats.Stats_Logon)
    MergeFrom(*source);
  }
}

void CMsgClientConnectionStats_Stats_Logon::MergeFrom(const CMsgClientConnectionStats_Stats_Logon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      connect_attempts_ = from.connect_attempts_;
    }
    if (cached_has_bits & 0x00000002u) {
      connect_successes_ = from.connect_successes_;
    }
    if (cached_has_bits & 0x00000004u) {
      connect_failures_ = from.connect_failures_;
    }
    if (cached_has_bits & 0x00000008u) {
      connections_dropped_ = from.connections_dropped_;
    }
    if (cached_has_bits & 0x00000010u) {
      seconds_running_ = from.seconds_running_;
    }
    if (cached_has_bits & 0x00000020u) {
      msec_tologonthistime_ = from.msec_tologonthistime_;
    }
    if (cached_has_bits & 0x00000040u) {
      count_bad_cms_ = from.count_bad_cms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientConnectionStats_Stats_Logon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientConnectionStats_Stats_Logon::CopyFrom(const CMsgClientConnectionStats_Stats_Logon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientConnectionStats.Stats_Logon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientConnectionStats_Stats_Logon::IsInitialized() const {
  return true;
}

void CMsgClientConnectionStats_Stats_Logon::Swap(CMsgClientConnectionStats_Stats_Logon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientConnectionStats_Stats_Logon::InternalSwap(CMsgClientConnectionStats_Stats_Logon* other) {
  std::swap(connect_attempts_, other->connect_attempts_);
  std::swap(connect_successes_, other->connect_successes_);
  std::swap(connect_failures_, other->connect_failures_);
  std::swap(connections_dropped_, other->connections_dropped_);
  std::swap(seconds_running_, other->seconds_running_);
  std::swap(msec_tologonthistime_, other->msec_tologonthistime_);
  std::swap(count_bad_cms_, other->count_bad_cms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientConnectionStats_Stats_Logon::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientConnectionStats_Stats_Logon

// optional int32 connect_attempts = 1;
bool CMsgClientConnectionStats_Stats_Logon::has_connect_attempts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientConnectionStats_Stats_Logon::set_has_connect_attempts() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientConnectionStats_Stats_Logon::clear_has_connect_attempts() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientConnectionStats_Stats_Logon::clear_connect_attempts() {
  connect_attempts_ = 0;
  clear_has_connect_attempts();
}
::google::protobuf::int32 CMsgClientConnectionStats_Stats_Logon::connect_attempts() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_Logon.connect_attempts)
  return connect_attempts_;
}
void CMsgClientConnectionStats_Stats_Logon::set_connect_attempts(::google::protobuf::int32 value) {
  set_has_connect_attempts();
  connect_attempts_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_Logon.connect_attempts)
}

// optional int32 connect_successes = 2;
bool CMsgClientConnectionStats_Stats_Logon::has_connect_successes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientConnectionStats_Stats_Logon::set_has_connect_successes() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientConnectionStats_Stats_Logon::clear_has_connect_successes() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientConnectionStats_Stats_Logon::clear_connect_successes() {
  connect_successes_ = 0;
  clear_has_connect_successes();
}
::google::protobuf::int32 CMsgClientConnectionStats_Stats_Logon::connect_successes() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_Logon.connect_successes)
  return connect_successes_;
}
void CMsgClientConnectionStats_Stats_Logon::set_connect_successes(::google::protobuf::int32 value) {
  set_has_connect_successes();
  connect_successes_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_Logon.connect_successes)
}

// optional int32 connect_failures = 3;
bool CMsgClientConnectionStats_Stats_Logon::has_connect_failures() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientConnectionStats_Stats_Logon::set_has_connect_failures() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientConnectionStats_Stats_Logon::clear_has_connect_failures() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientConnectionStats_Stats_Logon::clear_connect_failures() {
  connect_failures_ = 0;
  clear_has_connect_failures();
}
::google::protobuf::int32 CMsgClientConnectionStats_Stats_Logon::connect_failures() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_Logon.connect_failures)
  return connect_failures_;
}
void CMsgClientConnectionStats_Stats_Logon::set_connect_failures(::google::protobuf::int32 value) {
  set_has_connect_failures();
  connect_failures_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_Logon.connect_failures)
}

// optional int32 connections_dropped = 4;
bool CMsgClientConnectionStats_Stats_Logon::has_connections_dropped() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientConnectionStats_Stats_Logon::set_has_connections_dropped() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientConnectionStats_Stats_Logon::clear_has_connections_dropped() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientConnectionStats_Stats_Logon::clear_connections_dropped() {
  connections_dropped_ = 0;
  clear_has_connections_dropped();
}
::google::protobuf::int32 CMsgClientConnectionStats_Stats_Logon::connections_dropped() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_Logon.connections_dropped)
  return connections_dropped_;
}
void CMsgClientConnectionStats_Stats_Logon::set_connections_dropped(::google::protobuf::int32 value) {
  set_has_connections_dropped();
  connections_dropped_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_Logon.connections_dropped)
}

// optional uint32 seconds_running = 5;
bool CMsgClientConnectionStats_Stats_Logon::has_seconds_running() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientConnectionStats_Stats_Logon::set_has_seconds_running() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientConnectionStats_Stats_Logon::clear_has_seconds_running() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientConnectionStats_Stats_Logon::clear_seconds_running() {
  seconds_running_ = 0u;
  clear_has_seconds_running();
}
::google::protobuf::uint32 CMsgClientConnectionStats_Stats_Logon::seconds_running() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_Logon.seconds_running)
  return seconds_running_;
}
void CMsgClientConnectionStats_Stats_Logon::set_seconds_running(::google::protobuf::uint32 value) {
  set_has_seconds_running();
  seconds_running_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_Logon.seconds_running)
}

// optional uint32 msec_tologonthistime = 6;
bool CMsgClientConnectionStats_Stats_Logon::has_msec_tologonthistime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientConnectionStats_Stats_Logon::set_has_msec_tologonthistime() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientConnectionStats_Stats_Logon::clear_has_msec_tologonthistime() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientConnectionStats_Stats_Logon::clear_msec_tologonthistime() {
  msec_tologonthistime_ = 0u;
  clear_has_msec_tologonthistime();
}
::google::protobuf::uint32 CMsgClientConnectionStats_Stats_Logon::msec_tologonthistime() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_Logon.msec_tologonthistime)
  return msec_tologonthistime_;
}
void CMsgClientConnectionStats_Stats_Logon::set_msec_tologonthistime(::google::protobuf::uint32 value) {
  set_has_msec_tologonthistime();
  msec_tologonthistime_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_Logon.msec_tologonthistime)
}

// optional uint32 count_bad_cms = 7;
bool CMsgClientConnectionStats_Stats_Logon::has_count_bad_cms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientConnectionStats_Stats_Logon::set_has_count_bad_cms() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientConnectionStats_Stats_Logon::clear_has_count_bad_cms() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientConnectionStats_Stats_Logon::clear_count_bad_cms() {
  count_bad_cms_ = 0u;
  clear_has_count_bad_cms();
}
::google::protobuf::uint32 CMsgClientConnectionStats_Stats_Logon::count_bad_cms() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_Logon.count_bad_cms)
  return count_bad_cms_;
}
void CMsgClientConnectionStats_Stats_Logon::set_count_bad_cms(::google::protobuf::uint32 value) {
  set_has_count_bad_cms();
  count_bad_cms_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_Logon.count_bad_cms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientConnectionStats_Stats_UDP::kPktsSentFieldNumber;
const int CMsgClientConnectionStats_Stats_UDP::kBytesSentFieldNumber;
const int CMsgClientConnectionStats_Stats_UDP::kPktsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_UDP::kPktsProcessedFieldNumber;
const int CMsgClientConnectionStats_Stats_UDP::kBytesRecvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientConnectionStats_Stats_UDP::CMsgClientConnectionStats_Stats_UDP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientConnectionStats.Stats_UDP)
}
CMsgClientConnectionStats_Stats_UDP::CMsgClientConnectionStats_Stats_UDP(const CMsgClientConnectionStats_Stats_UDP& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pkts_sent_, &from.pkts_sent_,
    reinterpret_cast<char*>(&bytes_recv_) -
    reinterpret_cast<char*>(&pkts_sent_) + sizeof(bytes_recv_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientConnectionStats.Stats_UDP)
}

void CMsgClientConnectionStats_Stats_UDP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pkts_sent_, 0, reinterpret_cast<char*>(&bytes_recv_) -
    reinterpret_cast<char*>(&pkts_sent_) + sizeof(bytes_recv_));
}

CMsgClientConnectionStats_Stats_UDP::~CMsgClientConnectionStats_Stats_UDP() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  SharedDtor();
}

void CMsgClientConnectionStats_Stats_UDP::SharedDtor() {
}

void CMsgClientConnectionStats_Stats_UDP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientConnectionStats_Stats_UDP::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientConnectionStats_Stats_UDP& CMsgClientConnectionStats_Stats_UDP::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientConnectionStats_Stats_UDP* CMsgClientConnectionStats_Stats_UDP::New(::google::protobuf::Arena* arena) const {
  CMsgClientConnectionStats_Stats_UDP* n = new CMsgClientConnectionStats_Stats_UDP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientConnectionStats_Stats_UDP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&pkts_sent_, 0, reinterpret_cast<char*>(&bytes_recv_) -
      reinterpret_cast<char*>(&pkts_sent_) + sizeof(bytes_recv_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientConnectionStats_Stats_UDP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pkts_sent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_pkts_sent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkts_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_sent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bytes_sent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 pkts_recv = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_pkts_recv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkts_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 pkts_processed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_pkts_processed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkts_processed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_recv = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_bytes_recv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  return false;
#undef DO_
}

void CMsgClientConnectionStats_Stats_UDP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 pkts_sent = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pkts_sent(), output);
  }

  // optional uint64 bytes_sent = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bytes_sent(), output);
  }

  // optional uint64 pkts_recv = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->pkts_recv(), output);
  }

  // optional uint64 pkts_processed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->pkts_processed(), output);
  }

  // optional uint64 bytes_recv = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->bytes_recv(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientConnectionStats.Stats_UDP)
}

::google::protobuf::uint8* CMsgClientConnectionStats_Stats_UDP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 pkts_sent = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pkts_sent(), target);
  }

  // optional uint64 bytes_sent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->bytes_sent(), target);
  }

  // optional uint64 pkts_recv = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->pkts_recv(), target);
  }

  // optional uint64 pkts_processed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->pkts_processed(), target);
  }

  // optional uint64 bytes_recv = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->bytes_recv(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  return target;
}

size_t CMsgClientConnectionStats_Stats_UDP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint64 pkts_sent = 1;
    if (has_pkts_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pkts_sent());
    }

    // optional uint64 bytes_sent = 2;
    if (has_bytes_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_sent());
    }

    // optional uint64 pkts_recv = 3;
    if (has_pkts_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pkts_recv());
    }

    // optional uint64 pkts_processed = 4;
    if (has_pkts_processed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pkts_processed());
    }

    // optional uint64 bytes_recv = 5;
    if (has_bytes_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_recv());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientConnectionStats_Stats_UDP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientConnectionStats_Stats_UDP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientConnectionStats_Stats_UDP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientConnectionStats.Stats_UDP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientConnectionStats.Stats_UDP)
    MergeFrom(*source);
  }
}

void CMsgClientConnectionStats_Stats_UDP::MergeFrom(const CMsgClientConnectionStats_Stats_UDP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      pkts_sent_ = from.pkts_sent_;
    }
    if (cached_has_bits & 0x00000002u) {
      bytes_sent_ = from.bytes_sent_;
    }
    if (cached_has_bits & 0x00000004u) {
      pkts_recv_ = from.pkts_recv_;
    }
    if (cached_has_bits & 0x00000008u) {
      pkts_processed_ = from.pkts_processed_;
    }
    if (cached_has_bits & 0x00000010u) {
      bytes_recv_ = from.bytes_recv_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientConnectionStats_Stats_UDP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientConnectionStats_Stats_UDP::CopyFrom(const CMsgClientConnectionStats_Stats_UDP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientConnectionStats.Stats_UDP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientConnectionStats_Stats_UDP::IsInitialized() const {
  return true;
}

void CMsgClientConnectionStats_Stats_UDP::Swap(CMsgClientConnectionStats_Stats_UDP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientConnectionStats_Stats_UDP::InternalSwap(CMsgClientConnectionStats_Stats_UDP* other) {
  std::swap(pkts_sent_, other->pkts_sent_);
  std::swap(bytes_sent_, other->bytes_sent_);
  std::swap(pkts_recv_, other->pkts_recv_);
  std::swap(pkts_processed_, other->pkts_processed_);
  std::swap(bytes_recv_, other->bytes_recv_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientConnectionStats_Stats_UDP::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientConnectionStats_Stats_UDP

// optional uint64 pkts_sent = 1;
bool CMsgClientConnectionStats_Stats_UDP::has_pkts_sent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientConnectionStats_Stats_UDP::set_has_pkts_sent() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientConnectionStats_Stats_UDP::clear_has_pkts_sent() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientConnectionStats_Stats_UDP::clear_pkts_sent() {
  pkts_sent_ = GOOGLE_ULONGLONG(0);
  clear_has_pkts_sent();
}
::google::protobuf::uint64 CMsgClientConnectionStats_Stats_UDP::pkts_sent() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_UDP.pkts_sent)
  return pkts_sent_;
}
void CMsgClientConnectionStats_Stats_UDP::set_pkts_sent(::google::protobuf::uint64 value) {
  set_has_pkts_sent();
  pkts_sent_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_UDP.pkts_sent)
}

// optional uint64 bytes_sent = 2;
bool CMsgClientConnectionStats_Stats_UDP::has_bytes_sent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientConnectionStats_Stats_UDP::set_has_bytes_sent() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientConnectionStats_Stats_UDP::clear_has_bytes_sent() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientConnectionStats_Stats_UDP::clear_bytes_sent() {
  bytes_sent_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_sent();
}
::google::protobuf::uint64 CMsgClientConnectionStats_Stats_UDP::bytes_sent() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_UDP.bytes_sent)
  return bytes_sent_;
}
void CMsgClientConnectionStats_Stats_UDP::set_bytes_sent(::google::protobuf::uint64 value) {
  set_has_bytes_sent();
  bytes_sent_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_UDP.bytes_sent)
}

// optional uint64 pkts_recv = 3;
bool CMsgClientConnectionStats_Stats_UDP::has_pkts_recv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientConnectionStats_Stats_UDP::set_has_pkts_recv() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientConnectionStats_Stats_UDP::clear_has_pkts_recv() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientConnectionStats_Stats_UDP::clear_pkts_recv() {
  pkts_recv_ = GOOGLE_ULONGLONG(0);
  clear_has_pkts_recv();
}
::google::protobuf::uint64 CMsgClientConnectionStats_Stats_UDP::pkts_recv() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_UDP.pkts_recv)
  return pkts_recv_;
}
void CMsgClientConnectionStats_Stats_UDP::set_pkts_recv(::google::protobuf::uint64 value) {
  set_has_pkts_recv();
  pkts_recv_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_UDP.pkts_recv)
}

// optional uint64 pkts_processed = 4;
bool CMsgClientConnectionStats_Stats_UDP::has_pkts_processed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientConnectionStats_Stats_UDP::set_has_pkts_processed() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientConnectionStats_Stats_UDP::clear_has_pkts_processed() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientConnectionStats_Stats_UDP::clear_pkts_processed() {
  pkts_processed_ = GOOGLE_ULONGLONG(0);
  clear_has_pkts_processed();
}
::google::protobuf::uint64 CMsgClientConnectionStats_Stats_UDP::pkts_processed() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_UDP.pkts_processed)
  return pkts_processed_;
}
void CMsgClientConnectionStats_Stats_UDP::set_pkts_processed(::google::protobuf::uint64 value) {
  set_has_pkts_processed();
  pkts_processed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_UDP.pkts_processed)
}

// optional uint64 bytes_recv = 5;
bool CMsgClientConnectionStats_Stats_UDP::has_bytes_recv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientConnectionStats_Stats_UDP::set_has_bytes_recv() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientConnectionStats_Stats_UDP::clear_has_bytes_recv() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientConnectionStats_Stats_UDP::clear_bytes_recv() {
  bytes_recv_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_recv();
}
::google::protobuf::uint64 CMsgClientConnectionStats_Stats_UDP::bytes_recv() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_UDP.bytes_recv)
  return bytes_recv_;
}
void CMsgClientConnectionStats_Stats_UDP::set_bytes_recv(::google::protobuf::uint64 value) {
  set_has_bytes_recv();
  bytes_recv_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_UDP.bytes_recv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientConnectionStats_Stats_VConn::kConnectionsUdpFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kConnectionsTcpFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kStatsUdpFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kPktsAbandonedFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kConnReqReceivedFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kPktsResentFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMsgsSentFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMsgsSentFailedFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMsgsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kDatagramsSentFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kDatagramsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kBadPktsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kUnknownConnPktsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMissedPktsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kDupPktsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kFailedConnectChallengesFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMicroSecAvgLatencyFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMicroSecMinLatencyFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMicroSecMaxLatencyFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMemPoolMsgInUseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientConnectionStats_Stats_VConn::CMsgClientConnectionStats_Stats_VConn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientConnectionStats.Stats_VConn)
}
CMsgClientConnectionStats_Stats_VConn::CMsgClientConnectionStats_Stats_VConn(const CMsgClientConnectionStats_Stats_VConn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stats_udp()) {
    stats_udp_ = new ::proto::steam::CMsgClientConnectionStats_Stats_UDP(*from.stats_udp_);
  } else {
    stats_udp_ = NULL;
  }
  ::memcpy(&connections_udp_, &from.connections_udp_,
    reinterpret_cast<char*>(&mem_pool_msg_in_use_) -
    reinterpret_cast<char*>(&connections_udp_) + sizeof(mem_pool_msg_in_use_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientConnectionStats.Stats_VConn)
}

void CMsgClientConnectionStats_Stats_VConn::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stats_udp_, 0, reinterpret_cast<char*>(&mem_pool_msg_in_use_) -
    reinterpret_cast<char*>(&stats_udp_) + sizeof(mem_pool_msg_in_use_));
}

CMsgClientConnectionStats_Stats_VConn::~CMsgClientConnectionStats_Stats_VConn() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  SharedDtor();
}

void CMsgClientConnectionStats_Stats_VConn::SharedDtor() {
  if (this != internal_default_instance()) {
    delete stats_udp_;
  }
}

void CMsgClientConnectionStats_Stats_VConn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientConnectionStats_Stats_VConn::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientConnectionStats_Stats_VConn& CMsgClientConnectionStats_Stats_VConn::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientConnectionStats_Stats_VConn* CMsgClientConnectionStats_Stats_VConn::New(::google::protobuf::Arena* arena) const {
  CMsgClientConnectionStats_Stats_VConn* n = new CMsgClientConnectionStats_Stats_VConn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientConnectionStats_Stats_VConn::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  if (has_stats_udp()) {
    GOOGLE_DCHECK(stats_udp_ != NULL);
    stats_udp_->::proto::steam::CMsgClientConnectionStats_Stats_UDP::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&connections_udp_, 0, reinterpret_cast<char*>(&msgs_sent_failed_) -
      reinterpret_cast<char*>(&connections_udp_) + sizeof(msgs_sent_failed_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&msgs_recv_, 0, reinterpret_cast<char*>(&failed_connect_challenges_) -
      reinterpret_cast<char*>(&msgs_recv_) + sizeof(failed_connect_challenges_));
  }
  if (_has_bits_[16 / 32] & 983040u) {
    ::memset(&micro_sec_avg_latency_, 0, reinterpret_cast<char*>(&mem_pool_msg_in_use_) -
      reinterpret_cast<char*>(&micro_sec_avg_latency_) + sizeof(mem_pool_msg_in_use_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientConnectionStats_Stats_VConn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 connections_udp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_connections_udp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connections_udp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 connections_tcp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_connections_tcp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connections_tcp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats_udp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 pkts_abandoned = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_pkts_abandoned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkts_abandoned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 conn_req_received = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_conn_req_received();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &conn_req_received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 pkts_resent = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_pkts_resent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkts_resent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 msgs_sent = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_msgs_sent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgs_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 msgs_sent_failed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_msgs_sent_failed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgs_sent_failed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 msgs_recv = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_msgs_recv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgs_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 datagrams_sent = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_datagrams_sent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &datagrams_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 datagrams_recv = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_datagrams_recv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &datagrams_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bad_pkts_recv = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_bad_pkts_recv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bad_pkts_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 unknown_conn_pkts_recv = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_unknown_conn_pkts_recv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unknown_conn_pkts_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 missed_pkts_recv = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_missed_pkts_recv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &missed_pkts_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dup_pkts_recv = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_dup_pkts_recv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dup_pkts_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 failed_connect_challenges = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_failed_connect_challenges();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &failed_connect_challenges_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 micro_sec_avg_latency = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_micro_sec_avg_latency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &micro_sec_avg_latency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 micro_sec_min_latency = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_micro_sec_min_latency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &micro_sec_min_latency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 micro_sec_max_latency = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_micro_sec_max_latency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &micro_sec_max_latency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mem_pool_msg_in_use = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_mem_pool_msg_in_use();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mem_pool_msg_in_use_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  return false;
#undef DO_
}

void CMsgClientConnectionStats_Stats_VConn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 connections_udp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->connections_udp(), output);
  }

  // optional uint32 connections_tcp = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->connections_tcp(), output);
  }

  // optional .proto.steam.CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stats_udp_, output);
  }

  // optional uint64 pkts_abandoned = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->pkts_abandoned(), output);
  }

  // optional uint64 conn_req_received = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->conn_req_received(), output);
  }

  // optional uint64 pkts_resent = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->pkts_resent(), output);
  }

  // optional uint64 msgs_sent = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->msgs_sent(), output);
  }

  // optional uint64 msgs_sent_failed = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->msgs_sent_failed(), output);
  }

  // optional uint64 msgs_recv = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->msgs_recv(), output);
  }

  // optional uint64 datagrams_sent = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->datagrams_sent(), output);
  }

  // optional uint64 datagrams_recv = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->datagrams_recv(), output);
  }

  // optional uint64 bad_pkts_recv = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->bad_pkts_recv(), output);
  }

  // optional uint64 unknown_conn_pkts_recv = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->unknown_conn_pkts_recv(), output);
  }

  // optional uint64 missed_pkts_recv = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->missed_pkts_recv(), output);
  }

  // optional uint64 dup_pkts_recv = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->dup_pkts_recv(), output);
  }

  // optional uint64 failed_connect_challenges = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->failed_connect_challenges(), output);
  }

  // optional uint32 micro_sec_avg_latency = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->micro_sec_avg_latency(), output);
  }

  // optional uint32 micro_sec_min_latency = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->micro_sec_min_latency(), output);
  }

  // optional uint32 micro_sec_max_latency = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->micro_sec_max_latency(), output);
  }

  // optional uint32 mem_pool_msg_in_use = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->mem_pool_msg_in_use(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientConnectionStats.Stats_VConn)
}

::google::protobuf::uint8* CMsgClientConnectionStats_Stats_VConn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 connections_udp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->connections_udp(), target);
  }

  // optional uint32 connections_tcp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->connections_tcp(), target);
  }

  // optional .proto.steam.CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->stats_udp_, deterministic, target);
  }

  // optional uint64 pkts_abandoned = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->pkts_abandoned(), target);
  }

  // optional uint64 conn_req_received = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->conn_req_received(), target);
  }

  // optional uint64 pkts_resent = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->pkts_resent(), target);
  }

  // optional uint64 msgs_sent = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->msgs_sent(), target);
  }

  // optional uint64 msgs_sent_failed = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->msgs_sent_failed(), target);
  }

  // optional uint64 msgs_recv = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->msgs_recv(), target);
  }

  // optional uint64 datagrams_sent = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->datagrams_sent(), target);
  }

  // optional uint64 datagrams_recv = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->datagrams_recv(), target);
  }

  // optional uint64 bad_pkts_recv = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->bad_pkts_recv(), target);
  }

  // optional uint64 unknown_conn_pkts_recv = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->unknown_conn_pkts_recv(), target);
  }

  // optional uint64 missed_pkts_recv = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->missed_pkts_recv(), target);
  }

  // optional uint64 dup_pkts_recv = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->dup_pkts_recv(), target);
  }

  // optional uint64 failed_connect_challenges = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->failed_connect_challenges(), target);
  }

  // optional uint32 micro_sec_avg_latency = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->micro_sec_avg_latency(), target);
  }

  // optional uint32 micro_sec_min_latency = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->micro_sec_min_latency(), target);
  }

  // optional uint32 micro_sec_max_latency = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->micro_sec_max_latency(), target);
  }

  // optional uint32 mem_pool_msg_in_use = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->mem_pool_msg_in_use(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  return target;
}

size_t CMsgClientConnectionStats_Stats_VConn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .proto.steam.CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
    if (has_stats_udp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stats_udp_);
    }

    // optional uint32 connections_udp = 1;
    if (has_connections_udp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connections_udp());
    }

    // optional uint32 connections_tcp = 2;
    if (has_connections_tcp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connections_tcp());
    }

    // optional uint64 pkts_abandoned = 4;
    if (has_pkts_abandoned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pkts_abandoned());
    }

    // optional uint64 conn_req_received = 5;
    if (has_conn_req_received()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->conn_req_received());
    }

    // optional uint64 pkts_resent = 6;
    if (has_pkts_resent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pkts_resent());
    }

    // optional uint64 msgs_sent = 7;
    if (has_msgs_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgs_sent());
    }

    // optional uint64 msgs_sent_failed = 8;
    if (has_msgs_sent_failed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgs_sent_failed());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint64 msgs_recv = 9;
    if (has_msgs_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgs_recv());
    }

    // optional uint64 datagrams_sent = 10;
    if (has_datagrams_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->datagrams_sent());
    }

    // optional uint64 datagrams_recv = 11;
    if (has_datagrams_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->datagrams_recv());
    }

    // optional uint64 bad_pkts_recv = 12;
    if (has_bad_pkts_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bad_pkts_recv());
    }

    // optional uint64 unknown_conn_pkts_recv = 13;
    if (has_unknown_conn_pkts_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unknown_conn_pkts_recv());
    }

    // optional uint64 missed_pkts_recv = 14;
    if (has_missed_pkts_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->missed_pkts_recv());
    }

    // optional uint64 dup_pkts_recv = 15;
    if (has_dup_pkts_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dup_pkts_recv());
    }

    // optional uint64 failed_connect_challenges = 16;
    if (has_failed_connect_challenges()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->failed_connect_challenges());
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional uint32 micro_sec_avg_latency = 17;
    if (has_micro_sec_avg_latency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->micro_sec_avg_latency());
    }

    // optional uint32 micro_sec_min_latency = 18;
    if (has_micro_sec_min_latency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->micro_sec_min_latency());
    }

    // optional uint32 micro_sec_max_latency = 19;
    if (has_micro_sec_max_latency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->micro_sec_max_latency());
    }

    // optional uint32 mem_pool_msg_in_use = 20;
    if (has_mem_pool_msg_in_use()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mem_pool_msg_in_use());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientConnectionStats_Stats_VConn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientConnectionStats_Stats_VConn* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientConnectionStats_Stats_VConn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientConnectionStats.Stats_VConn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientConnectionStats.Stats_VConn)
    MergeFrom(*source);
  }
}

void CMsgClientConnectionStats_Stats_VConn::MergeFrom(const CMsgClientConnectionStats_Stats_VConn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stats_udp()->::proto::steam::CMsgClientConnectionStats_Stats_UDP::MergeFrom(from.stats_udp());
    }
    if (cached_has_bits & 0x00000002u) {
      connections_udp_ = from.connections_udp_;
    }
    if (cached_has_bits & 0x00000004u) {
      connections_tcp_ = from.connections_tcp_;
    }
    if (cached_has_bits & 0x00000008u) {
      pkts_abandoned_ = from.pkts_abandoned_;
    }
    if (cached_has_bits & 0x00000010u) {
      conn_req_received_ = from.conn_req_received_;
    }
    if (cached_has_bits & 0x00000020u) {
      pkts_resent_ = from.pkts_resent_;
    }
    if (cached_has_bits & 0x00000040u) {
      msgs_sent_ = from.msgs_sent_;
    }
    if (cached_has_bits & 0x00000080u) {
      msgs_sent_failed_ = from.msgs_sent_failed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      msgs_recv_ = from.msgs_recv_;
    }
    if (cached_has_bits & 0x00000200u) {
      datagrams_sent_ = from.datagrams_sent_;
    }
    if (cached_has_bits & 0x00000400u) {
      datagrams_recv_ = from.datagrams_recv_;
    }
    if (cached_has_bits & 0x00000800u) {
      bad_pkts_recv_ = from.bad_pkts_recv_;
    }
    if (cached_has_bits & 0x00001000u) {
      unknown_conn_pkts_recv_ = from.unknown_conn_pkts_recv_;
    }
    if (cached_has_bits & 0x00002000u) {
      missed_pkts_recv_ = from.missed_pkts_recv_;
    }
    if (cached_has_bits & 0x00004000u) {
      dup_pkts_recv_ = from.dup_pkts_recv_;
    }
    if (cached_has_bits & 0x00008000u) {
      failed_connect_challenges_ = from.failed_connect_challenges_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      micro_sec_avg_latency_ = from.micro_sec_avg_latency_;
    }
    if (cached_has_bits & 0x00020000u) {
      micro_sec_min_latency_ = from.micro_sec_min_latency_;
    }
    if (cached_has_bits & 0x00040000u) {
      micro_sec_max_latency_ = from.micro_sec_max_latency_;
    }
    if (cached_has_bits & 0x00080000u) {
      mem_pool_msg_in_use_ = from.mem_pool_msg_in_use_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientConnectionStats_Stats_VConn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientConnectionStats_Stats_VConn::CopyFrom(const CMsgClientConnectionStats_Stats_VConn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientConnectionStats.Stats_VConn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientConnectionStats_Stats_VConn::IsInitialized() const {
  return true;
}

void CMsgClientConnectionStats_Stats_VConn::Swap(CMsgClientConnectionStats_Stats_VConn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientConnectionStats_Stats_VConn::InternalSwap(CMsgClientConnectionStats_Stats_VConn* other) {
  std::swap(stats_udp_, other->stats_udp_);
  std::swap(connections_udp_, other->connections_udp_);
  std::swap(connections_tcp_, other->connections_tcp_);
  std::swap(pkts_abandoned_, other->pkts_abandoned_);
  std::swap(conn_req_received_, other->conn_req_received_);
  std::swap(pkts_resent_, other->pkts_resent_);
  std::swap(msgs_sent_, other->msgs_sent_);
  std::swap(msgs_sent_failed_, other->msgs_sent_failed_);
  std::swap(msgs_recv_, other->msgs_recv_);
  std::swap(datagrams_sent_, other->datagrams_sent_);
  std::swap(datagrams_recv_, other->datagrams_recv_);
  std::swap(bad_pkts_recv_, other->bad_pkts_recv_);
  std::swap(unknown_conn_pkts_recv_, other->unknown_conn_pkts_recv_);
  std::swap(missed_pkts_recv_, other->missed_pkts_recv_);
  std::swap(dup_pkts_recv_, other->dup_pkts_recv_);
  std::swap(failed_connect_challenges_, other->failed_connect_challenges_);
  std::swap(micro_sec_avg_latency_, other->micro_sec_avg_latency_);
  std::swap(micro_sec_min_latency_, other->micro_sec_min_latency_);
  std::swap(micro_sec_max_latency_, other->micro_sec_max_latency_);
  std::swap(mem_pool_msg_in_use_, other->mem_pool_msg_in_use_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientConnectionStats_Stats_VConn::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientConnectionStats_Stats_VConn

// optional uint32 connections_udp = 1;
bool CMsgClientConnectionStats_Stats_VConn::has_connections_udp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientConnectionStats_Stats_VConn::set_has_connections_udp() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_has_connections_udp() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_connections_udp() {
  connections_udp_ = 0u;
  clear_has_connections_udp();
}
::google::protobuf::uint32 CMsgClientConnectionStats_Stats_VConn::connections_udp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_VConn.connections_udp)
  return connections_udp_;
}
void CMsgClientConnectionStats_Stats_VConn::set_connections_udp(::google::protobuf::uint32 value) {
  set_has_connections_udp();
  connections_udp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_VConn.connections_udp)
}

// optional uint32 connections_tcp = 2;
bool CMsgClientConnectionStats_Stats_VConn::has_connections_tcp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientConnectionStats_Stats_VConn::set_has_connections_tcp() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_has_connections_tcp() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_connections_tcp() {
  connections_tcp_ = 0u;
  clear_has_connections_tcp();
}
::google::protobuf::uint32 CMsgClientConnectionStats_Stats_VConn::connections_tcp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_VConn.connections_tcp)
  return connections_tcp_;
}
void CMsgClientConnectionStats_Stats_VConn::set_connections_tcp(::google::protobuf::uint32 value) {
  set_has_connections_tcp();
  connections_tcp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_VConn.connections_tcp)
}

// optional .proto.steam.CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
bool CMsgClientConnectionStats_Stats_VConn::has_stats_udp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientConnectionStats_Stats_VConn::set_has_stats_udp() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_has_stats_udp() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_stats_udp() {
  if (stats_udp_ != NULL) stats_udp_->::proto::steam::CMsgClientConnectionStats_Stats_UDP::Clear();
  clear_has_stats_udp();
}
const ::proto::steam::CMsgClientConnectionStats_Stats_UDP& CMsgClientConnectionStats_Stats_VConn::stats_udp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_VConn.stats_udp)
  return stats_udp_ != NULL ? *stats_udp_
                         : *::proto::steam::CMsgClientConnectionStats_Stats_UDP::internal_default_instance();
}
::proto::steam::CMsgClientConnectionStats_Stats_UDP* CMsgClientConnectionStats_Stats_VConn::mutable_stats_udp() {
  set_has_stats_udp();
  if (stats_udp_ == NULL) {
    stats_udp_ = new ::proto::steam::CMsgClientConnectionStats_Stats_UDP;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientConnectionStats.Stats_VConn.stats_udp)
  return stats_udp_;
}
::proto::steam::CMsgClientConnectionStats_Stats_UDP* CMsgClientConnectionStats_Stats_VConn::release_stats_udp() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientConnectionStats.Stats_VConn.stats_udp)
  clear_has_stats_udp();
  ::proto::steam::CMsgClientConnectionStats_Stats_UDP* temp = stats_udp_;
  stats_udp_ = NULL;
  return temp;
}
void CMsgClientConnectionStats_Stats_VConn::set_allocated_stats_udp(::proto::steam::CMsgClientConnectionStats_Stats_UDP* stats_udp) {
  delete stats_udp_;
  stats_udp_ = stats_udp;
  if (stats_udp) {
    set_has_stats_udp();
  } else {
    clear_has_stats_udp();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientConnectionStats.Stats_VConn.stats_udp)
}

// optional uint64 pkts_abandoned = 4;
bool CMsgClientConnectionStats_Stats_VConn::has_pkts_abandoned() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientConnectionStats_Stats_VConn::set_has_pkts_abandoned() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_has_pkts_abandoned() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_pkts_abandoned() {
  pkts_abandoned_ = GOOGLE_ULONGLONG(0);
  clear_has_pkts_abandoned();
}
::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::pkts_abandoned() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_VConn.pkts_abandoned)
  return pkts_abandoned_;
}
void CMsgClientConnectionStats_Stats_VConn::set_pkts_abandoned(::google::protobuf::uint64 value) {
  set_has_pkts_abandoned();
  pkts_abandoned_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_VConn.pkts_abandoned)
}

// optional uint64 conn_req_received = 5;
bool CMsgClientConnectionStats_Stats_VConn::has_conn_req_received() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientConnectionStats_Stats_VConn::set_has_conn_req_received() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_has_conn_req_received() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_conn_req_received() {
  conn_req_received_ = GOOGLE_ULONGLONG(0);
  clear_has_conn_req_received();
}
::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::conn_req_received() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_VConn.conn_req_received)
  return conn_req_received_;
}
void CMsgClientConnectionStats_Stats_VConn::set_conn_req_received(::google::protobuf::uint64 value) {
  set_has_conn_req_received();
  conn_req_received_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_VConn.conn_req_received)
}

// optional uint64 pkts_resent = 6;
bool CMsgClientConnectionStats_Stats_VConn::has_pkts_resent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientConnectionStats_Stats_VConn::set_has_pkts_resent() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_has_pkts_resent() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_pkts_resent() {
  pkts_resent_ = GOOGLE_ULONGLONG(0);
  clear_has_pkts_resent();
}
::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::pkts_resent() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_VConn.pkts_resent)
  return pkts_resent_;
}
void CMsgClientConnectionStats_Stats_VConn::set_pkts_resent(::google::protobuf::uint64 value) {
  set_has_pkts_resent();
  pkts_resent_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_VConn.pkts_resent)
}

// optional uint64 msgs_sent = 7;
bool CMsgClientConnectionStats_Stats_VConn::has_msgs_sent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientConnectionStats_Stats_VConn::set_has_msgs_sent() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_has_msgs_sent() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_msgs_sent() {
  msgs_sent_ = GOOGLE_ULONGLONG(0);
  clear_has_msgs_sent();
}
::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::msgs_sent() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_VConn.msgs_sent)
  return msgs_sent_;
}
void CMsgClientConnectionStats_Stats_VConn::set_msgs_sent(::google::protobuf::uint64 value) {
  set_has_msgs_sent();
  msgs_sent_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_VConn.msgs_sent)
}

// optional uint64 msgs_sent_failed = 8;
bool CMsgClientConnectionStats_Stats_VConn::has_msgs_sent_failed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgClientConnectionStats_Stats_VConn::set_has_msgs_sent_failed() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_has_msgs_sent_failed() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_msgs_sent_failed() {
  msgs_sent_failed_ = GOOGLE_ULONGLONG(0);
  clear_has_msgs_sent_failed();
}
::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::msgs_sent_failed() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_VConn.msgs_sent_failed)
  return msgs_sent_failed_;
}
void CMsgClientConnectionStats_Stats_VConn::set_msgs_sent_failed(::google::protobuf::uint64 value) {
  set_has_msgs_sent_failed();
  msgs_sent_failed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_VConn.msgs_sent_failed)
}

// optional uint64 msgs_recv = 9;
bool CMsgClientConnectionStats_Stats_VConn::has_msgs_recv() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgClientConnectionStats_Stats_VConn::set_has_msgs_recv() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_has_msgs_recv() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_msgs_recv() {
  msgs_recv_ = GOOGLE_ULONGLONG(0);
  clear_has_msgs_recv();
}
::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::msgs_recv() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_VConn.msgs_recv)
  return msgs_recv_;
}
void CMsgClientConnectionStats_Stats_VConn::set_msgs_recv(::google::protobuf::uint64 value) {
  set_has_msgs_recv();
  msgs_recv_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_VConn.msgs_recv)
}

// optional uint64 datagrams_sent = 10;
bool CMsgClientConnectionStats_Stats_VConn::has_datagrams_sent() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgClientConnectionStats_Stats_VConn::set_has_datagrams_sent() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_has_datagrams_sent() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_datagrams_sent() {
  datagrams_sent_ = GOOGLE_ULONGLONG(0);
  clear_has_datagrams_sent();
}
::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::datagrams_sent() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_VConn.datagrams_sent)
  return datagrams_sent_;
}
void CMsgClientConnectionStats_Stats_VConn::set_datagrams_sent(::google::protobuf::uint64 value) {
  set_has_datagrams_sent();
  datagrams_sent_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_VConn.datagrams_sent)
}

// optional uint64 datagrams_recv = 11;
bool CMsgClientConnectionStats_Stats_VConn::has_datagrams_recv() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgClientConnectionStats_Stats_VConn::set_has_datagrams_recv() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_has_datagrams_recv() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_datagrams_recv() {
  datagrams_recv_ = GOOGLE_ULONGLONG(0);
  clear_has_datagrams_recv();
}
::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::datagrams_recv() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_VConn.datagrams_recv)
  return datagrams_recv_;
}
void CMsgClientConnectionStats_Stats_VConn::set_datagrams_recv(::google::protobuf::uint64 value) {
  set_has_datagrams_recv();
  datagrams_recv_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_VConn.datagrams_recv)
}

// optional uint64 bad_pkts_recv = 12;
bool CMsgClientConnectionStats_Stats_VConn::has_bad_pkts_recv() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgClientConnectionStats_Stats_VConn::set_has_bad_pkts_recv() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_has_bad_pkts_recv() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_bad_pkts_recv() {
  bad_pkts_recv_ = GOOGLE_ULONGLONG(0);
  clear_has_bad_pkts_recv();
}
::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::bad_pkts_recv() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_VConn.bad_pkts_recv)
  return bad_pkts_recv_;
}
void CMsgClientConnectionStats_Stats_VConn::set_bad_pkts_recv(::google::protobuf::uint64 value) {
  set_has_bad_pkts_recv();
  bad_pkts_recv_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_VConn.bad_pkts_recv)
}

// optional uint64 unknown_conn_pkts_recv = 13;
bool CMsgClientConnectionStats_Stats_VConn::has_unknown_conn_pkts_recv() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgClientConnectionStats_Stats_VConn::set_has_unknown_conn_pkts_recv() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_has_unknown_conn_pkts_recv() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_unknown_conn_pkts_recv() {
  unknown_conn_pkts_recv_ = GOOGLE_ULONGLONG(0);
  clear_has_unknown_conn_pkts_recv();
}
::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::unknown_conn_pkts_recv() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_VConn.unknown_conn_pkts_recv)
  return unknown_conn_pkts_recv_;
}
void CMsgClientConnectionStats_Stats_VConn::set_unknown_conn_pkts_recv(::google::protobuf::uint64 value) {
  set_has_unknown_conn_pkts_recv();
  unknown_conn_pkts_recv_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_VConn.unknown_conn_pkts_recv)
}

// optional uint64 missed_pkts_recv = 14;
bool CMsgClientConnectionStats_Stats_VConn::has_missed_pkts_recv() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgClientConnectionStats_Stats_VConn::set_has_missed_pkts_recv() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_has_missed_pkts_recv() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_missed_pkts_recv() {
  missed_pkts_recv_ = GOOGLE_ULONGLONG(0);
  clear_has_missed_pkts_recv();
}
::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::missed_pkts_recv() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_VConn.missed_pkts_recv)
  return missed_pkts_recv_;
}
void CMsgClientConnectionStats_Stats_VConn::set_missed_pkts_recv(::google::protobuf::uint64 value) {
  set_has_missed_pkts_recv();
  missed_pkts_recv_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_VConn.missed_pkts_recv)
}

// optional uint64 dup_pkts_recv = 15;
bool CMsgClientConnectionStats_Stats_VConn::has_dup_pkts_recv() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgClientConnectionStats_Stats_VConn::set_has_dup_pkts_recv() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_has_dup_pkts_recv() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_dup_pkts_recv() {
  dup_pkts_recv_ = GOOGLE_ULONGLONG(0);
  clear_has_dup_pkts_recv();
}
::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::dup_pkts_recv() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_VConn.dup_pkts_recv)
  return dup_pkts_recv_;
}
void CMsgClientConnectionStats_Stats_VConn::set_dup_pkts_recv(::google::protobuf::uint64 value) {
  set_has_dup_pkts_recv();
  dup_pkts_recv_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_VConn.dup_pkts_recv)
}

// optional uint64 failed_connect_challenges = 16;
bool CMsgClientConnectionStats_Stats_VConn::has_failed_connect_challenges() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgClientConnectionStats_Stats_VConn::set_has_failed_connect_challenges() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_has_failed_connect_challenges() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_failed_connect_challenges() {
  failed_connect_challenges_ = GOOGLE_ULONGLONG(0);
  clear_has_failed_connect_challenges();
}
::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::failed_connect_challenges() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_VConn.failed_connect_challenges)
  return failed_connect_challenges_;
}
void CMsgClientConnectionStats_Stats_VConn::set_failed_connect_challenges(::google::protobuf::uint64 value) {
  set_has_failed_connect_challenges();
  failed_connect_challenges_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_VConn.failed_connect_challenges)
}

// optional uint32 micro_sec_avg_latency = 17;
bool CMsgClientConnectionStats_Stats_VConn::has_micro_sec_avg_latency() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgClientConnectionStats_Stats_VConn::set_has_micro_sec_avg_latency() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_has_micro_sec_avg_latency() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_micro_sec_avg_latency() {
  micro_sec_avg_latency_ = 0u;
  clear_has_micro_sec_avg_latency();
}
::google::protobuf::uint32 CMsgClientConnectionStats_Stats_VConn::micro_sec_avg_latency() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_VConn.micro_sec_avg_latency)
  return micro_sec_avg_latency_;
}
void CMsgClientConnectionStats_Stats_VConn::set_micro_sec_avg_latency(::google::protobuf::uint32 value) {
  set_has_micro_sec_avg_latency();
  micro_sec_avg_latency_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_VConn.micro_sec_avg_latency)
}

// optional uint32 micro_sec_min_latency = 18;
bool CMsgClientConnectionStats_Stats_VConn::has_micro_sec_min_latency() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgClientConnectionStats_Stats_VConn::set_has_micro_sec_min_latency() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_has_micro_sec_min_latency() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_micro_sec_min_latency() {
  micro_sec_min_latency_ = 0u;
  clear_has_micro_sec_min_latency();
}
::google::protobuf::uint32 CMsgClientConnectionStats_Stats_VConn::micro_sec_min_latency() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_VConn.micro_sec_min_latency)
  return micro_sec_min_latency_;
}
void CMsgClientConnectionStats_Stats_VConn::set_micro_sec_min_latency(::google::protobuf::uint32 value) {
  set_has_micro_sec_min_latency();
  micro_sec_min_latency_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_VConn.micro_sec_min_latency)
}

// optional uint32 micro_sec_max_latency = 19;
bool CMsgClientConnectionStats_Stats_VConn::has_micro_sec_max_latency() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgClientConnectionStats_Stats_VConn::set_has_micro_sec_max_latency() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_has_micro_sec_max_latency() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_micro_sec_max_latency() {
  micro_sec_max_latency_ = 0u;
  clear_has_micro_sec_max_latency();
}
::google::protobuf::uint32 CMsgClientConnectionStats_Stats_VConn::micro_sec_max_latency() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_VConn.micro_sec_max_latency)
  return micro_sec_max_latency_;
}
void CMsgClientConnectionStats_Stats_VConn::set_micro_sec_max_latency(::google::protobuf::uint32 value) {
  set_has_micro_sec_max_latency();
  micro_sec_max_latency_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_VConn.micro_sec_max_latency)
}

// optional uint32 mem_pool_msg_in_use = 20;
bool CMsgClientConnectionStats_Stats_VConn::has_mem_pool_msg_in_use() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgClientConnectionStats_Stats_VConn::set_has_mem_pool_msg_in_use() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_has_mem_pool_msg_in_use() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgClientConnectionStats_Stats_VConn::clear_mem_pool_msg_in_use() {
  mem_pool_msg_in_use_ = 0u;
  clear_has_mem_pool_msg_in_use();
}
::google::protobuf::uint32 CMsgClientConnectionStats_Stats_VConn::mem_pool_msg_in_use() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.Stats_VConn.mem_pool_msg_in_use)
  return mem_pool_msg_in_use_;
}
void CMsgClientConnectionStats_Stats_VConn::set_mem_pool_msg_in_use(::google::protobuf::uint32 value) {
  set_has_mem_pool_msg_in_use();
  mem_pool_msg_in_use_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientConnectionStats.Stats_VConn.mem_pool_msg_in_use)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientConnectionStats::kStatsLogonFieldNumber;
const int CMsgClientConnectionStats::kStatsVconnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientConnectionStats::CMsgClientConnectionStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientConnectionStats)
}
CMsgClientConnectionStats::CMsgClientConnectionStats(const CMsgClientConnectionStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stats_logon()) {
    stats_logon_ = new ::proto::steam::CMsgClientConnectionStats_Stats_Logon(*from.stats_logon_);
  } else {
    stats_logon_ = NULL;
  }
  if (from.has_stats_vconn()) {
    stats_vconn_ = new ::proto::steam::CMsgClientConnectionStats_Stats_VConn(*from.stats_vconn_);
  } else {
    stats_vconn_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientConnectionStats)
}

void CMsgClientConnectionStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stats_logon_, 0, reinterpret_cast<char*>(&stats_vconn_) -
    reinterpret_cast<char*>(&stats_logon_) + sizeof(stats_vconn_));
}

CMsgClientConnectionStats::~CMsgClientConnectionStats() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientConnectionStats)
  SharedDtor();
}

void CMsgClientConnectionStats::SharedDtor() {
  if (this != internal_default_instance()) {
    delete stats_logon_;
  }
  if (this != internal_default_instance()) {
    delete stats_vconn_;
  }
}

void CMsgClientConnectionStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientConnectionStats::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientConnectionStats& CMsgClientConnectionStats::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientConnectionStats* CMsgClientConnectionStats::New(::google::protobuf::Arena* arena) const {
  CMsgClientConnectionStats* n = new CMsgClientConnectionStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientConnectionStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientConnectionStats)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_stats_logon()) {
      GOOGLE_DCHECK(stats_logon_ != NULL);
      stats_logon_->::proto::steam::CMsgClientConnectionStats_Stats_Logon::Clear();
    }
    if (has_stats_vconn()) {
      GOOGLE_DCHECK(stats_vconn_ != NULL);
      stats_vconn_->::proto::steam::CMsgClientConnectionStats_Stats_VConn::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientConnectionStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientConnectionStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats_logon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats_vconn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientConnectionStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientConnectionStats)
  return false;
#undef DO_
}

void CMsgClientConnectionStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientConnectionStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stats_logon_, output);
  }

  // optional .proto.steam.CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stats_vconn_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientConnectionStats)
}

::google::protobuf::uint8* CMsgClientConnectionStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientConnectionStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->stats_logon_, deterministic, target);
  }

  // optional .proto.steam.CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->stats_vconn_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientConnectionStats)
  return target;
}

size_t CMsgClientConnectionStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientConnectionStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.steam.CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
    if (has_stats_logon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stats_logon_);
    }

    // optional .proto.steam.CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
    if (has_stats_vconn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stats_vconn_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientConnectionStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientConnectionStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientConnectionStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientConnectionStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientConnectionStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientConnectionStats)
    MergeFrom(*source);
  }
}

void CMsgClientConnectionStats::MergeFrom(const CMsgClientConnectionStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientConnectionStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stats_logon()->::proto::steam::CMsgClientConnectionStats_Stats_Logon::MergeFrom(from.stats_logon());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_stats_vconn()->::proto::steam::CMsgClientConnectionStats_Stats_VConn::MergeFrom(from.stats_vconn());
    }
  }
}

void CMsgClientConnectionStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientConnectionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientConnectionStats::CopyFrom(const CMsgClientConnectionStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientConnectionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientConnectionStats::IsInitialized() const {
  return true;
}

void CMsgClientConnectionStats::Swap(CMsgClientConnectionStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientConnectionStats::InternalSwap(CMsgClientConnectionStats* other) {
  std::swap(stats_logon_, other->stats_logon_);
  std::swap(stats_vconn_, other->stats_vconn_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientConnectionStats::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientConnectionStats

// optional .proto.steam.CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
bool CMsgClientConnectionStats::has_stats_logon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientConnectionStats::set_has_stats_logon() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientConnectionStats::clear_has_stats_logon() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientConnectionStats::clear_stats_logon() {
  if (stats_logon_ != NULL) stats_logon_->::proto::steam::CMsgClientConnectionStats_Stats_Logon::Clear();
  clear_has_stats_logon();
}
const ::proto::steam::CMsgClientConnectionStats_Stats_Logon& CMsgClientConnectionStats::stats_logon() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.stats_logon)
  return stats_logon_ != NULL ? *stats_logon_
                         : *::proto::steam::CMsgClientConnectionStats_Stats_Logon::internal_default_instance();
}
::proto::steam::CMsgClientConnectionStats_Stats_Logon* CMsgClientConnectionStats::mutable_stats_logon() {
  set_has_stats_logon();
  if (stats_logon_ == NULL) {
    stats_logon_ = new ::proto::steam::CMsgClientConnectionStats_Stats_Logon;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientConnectionStats.stats_logon)
  return stats_logon_;
}
::proto::steam::CMsgClientConnectionStats_Stats_Logon* CMsgClientConnectionStats::release_stats_logon() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientConnectionStats.stats_logon)
  clear_has_stats_logon();
  ::proto::steam::CMsgClientConnectionStats_Stats_Logon* temp = stats_logon_;
  stats_logon_ = NULL;
  return temp;
}
void CMsgClientConnectionStats::set_allocated_stats_logon(::proto::steam::CMsgClientConnectionStats_Stats_Logon* stats_logon) {
  delete stats_logon_;
  stats_logon_ = stats_logon;
  if (stats_logon) {
    set_has_stats_logon();
  } else {
    clear_has_stats_logon();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientConnectionStats.stats_logon)
}

// optional .proto.steam.CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
bool CMsgClientConnectionStats::has_stats_vconn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientConnectionStats::set_has_stats_vconn() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientConnectionStats::clear_has_stats_vconn() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientConnectionStats::clear_stats_vconn() {
  if (stats_vconn_ != NULL) stats_vconn_->::proto::steam::CMsgClientConnectionStats_Stats_VConn::Clear();
  clear_has_stats_vconn();
}
const ::proto::steam::CMsgClientConnectionStats_Stats_VConn& CMsgClientConnectionStats::stats_vconn() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientConnectionStats.stats_vconn)
  return stats_vconn_ != NULL ? *stats_vconn_
                         : *::proto::steam::CMsgClientConnectionStats_Stats_VConn::internal_default_instance();
}
::proto::steam::CMsgClientConnectionStats_Stats_VConn* CMsgClientConnectionStats::mutable_stats_vconn() {
  set_has_stats_vconn();
  if (stats_vconn_ == NULL) {
    stats_vconn_ = new ::proto::steam::CMsgClientConnectionStats_Stats_VConn;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientConnectionStats.stats_vconn)
  return stats_vconn_;
}
::proto::steam::CMsgClientConnectionStats_Stats_VConn* CMsgClientConnectionStats::release_stats_vconn() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientConnectionStats.stats_vconn)
  clear_has_stats_vconn();
  ::proto::steam::CMsgClientConnectionStats_Stats_VConn* temp = stats_vconn_;
  stats_vconn_ = NULL;
  return temp;
}
void CMsgClientConnectionStats::set_allocated_stats_vconn(::proto::steam::CMsgClientConnectionStats_Stats_VConn* stats_vconn) {
  delete stats_vconn_;
  stats_vconn_ = stats_vconn;
  if (stats_vconn) {
    set_has_stats_vconn();
  } else {
    clear_has_stats_vconn();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientConnectionStats.stats_vconn)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientServersAvailable_Server_Types_Available::kServerFieldNumber;
const int CMsgClientServersAvailable_Server_Types_Available::kChangedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientServersAvailable_Server_Types_Available::CMsgClientServersAvailable_Server_Types_Available()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
}
CMsgClientServersAvailable_Server_Types_Available::CMsgClientServersAvailable_Server_Types_Available(const CMsgClientServersAvailable_Server_Types_Available& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_, &from.server_,
    reinterpret_cast<char*>(&changed_) -
    reinterpret_cast<char*>(&server_) + sizeof(changed_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
}

void CMsgClientServersAvailable_Server_Types_Available::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&server_, 0, reinterpret_cast<char*>(&changed_) -
    reinterpret_cast<char*>(&server_) + sizeof(changed_));
}

CMsgClientServersAvailable_Server_Types_Available::~CMsgClientServersAvailable_Server_Types_Available() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  SharedDtor();
}

void CMsgClientServersAvailable_Server_Types_Available::SharedDtor() {
}

void CMsgClientServersAvailable_Server_Types_Available::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientServersAvailable_Server_Types_Available::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientServersAvailable_Server_Types_Available& CMsgClientServersAvailable_Server_Types_Available::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientServersAvailable_Server_Types_Available* CMsgClientServersAvailable_Server_Types_Available::New(::google::protobuf::Arena* arena) const {
  CMsgClientServersAvailable_Server_Types_Available* n = new CMsgClientServersAvailable_Server_Types_Available;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientServersAvailable_Server_Types_Available::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&server_, 0, reinterpret_cast<char*>(&changed_) -
      reinterpret_cast<char*>(&server_) + sizeof(changed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientServersAvailable_Server_Types_Available::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_server();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool changed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_changed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &changed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  return false;
#undef DO_
}

void CMsgClientServersAvailable_Server_Types_Available::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server(), output);
  }

  // optional bool changed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->changed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
}

::google::protobuf::uint8* CMsgClientServersAvailable_Server_Types_Available::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server(), target);
  }

  // optional bool changed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->changed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  return target;
}

size_t CMsgClientServersAvailable_Server_Types_Available::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server());
    }

    // optional bool changed = 2;
    if (has_changed()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientServersAvailable_Server_Types_Available::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientServersAvailable_Server_Types_Available* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientServersAvailable_Server_Types_Available>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
    MergeFrom(*source);
  }
}

void CMsgClientServersAvailable_Server_Types_Available::MergeFrom(const CMsgClientServersAvailable_Server_Types_Available& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      server_ = from.server_;
    }
    if (cached_has_bits & 0x00000002u) {
      changed_ = from.changed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientServersAvailable_Server_Types_Available::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientServersAvailable_Server_Types_Available::CopyFrom(const CMsgClientServersAvailable_Server_Types_Available& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientServersAvailable.Server_Types_Available)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServersAvailable_Server_Types_Available::IsInitialized() const {
  return true;
}

void CMsgClientServersAvailable_Server_Types_Available::Swap(CMsgClientServersAvailable_Server_Types_Available* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientServersAvailable_Server_Types_Available::InternalSwap(CMsgClientServersAvailable_Server_Types_Available* other) {
  std::swap(server_, other->server_);
  std::swap(changed_, other->changed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientServersAvailable_Server_Types_Available::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientServersAvailable_Server_Types_Available

// optional uint32 server = 1;
bool CMsgClientServersAvailable_Server_Types_Available::has_server() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientServersAvailable_Server_Types_Available::set_has_server() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientServersAvailable_Server_Types_Available::clear_has_server() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientServersAvailable_Server_Types_Available::clear_server() {
  server_ = 0u;
  clear_has_server();
}
::google::protobuf::uint32 CMsgClientServersAvailable_Server_Types_Available::server() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientServersAvailable.Server_Types_Available.server)
  return server_;
}
void CMsgClientServersAvailable_Server_Types_Available::set_server(::google::protobuf::uint32 value) {
  set_has_server();
  server_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientServersAvailable.Server_Types_Available.server)
}

// optional bool changed = 2;
bool CMsgClientServersAvailable_Server_Types_Available::has_changed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientServersAvailable_Server_Types_Available::set_has_changed() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientServersAvailable_Server_Types_Available::clear_has_changed() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientServersAvailable_Server_Types_Available::clear_changed() {
  changed_ = false;
  clear_has_changed();
}
bool CMsgClientServersAvailable_Server_Types_Available::changed() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientServersAvailable.Server_Types_Available.changed)
  return changed_;
}
void CMsgClientServersAvailable_Server_Types_Available::set_changed(bool value) {
  set_has_changed();
  changed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientServersAvailable.Server_Types_Available.changed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientServersAvailable::kServerTypesAvailableFieldNumber;
const int CMsgClientServersAvailable::kServerTypeForAuthServicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientServersAvailable::CMsgClientServersAvailable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientServersAvailable)
}
CMsgClientServersAvailable::CMsgClientServersAvailable(const CMsgClientServersAvailable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      server_types_available_(from.server_types_available_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_type_for_auth_services_ = from.server_type_for_auth_services_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientServersAvailable)
}

void CMsgClientServersAvailable::SharedCtor() {
  _cached_size_ = 0;
  server_type_for_auth_services_ = 0u;
}

CMsgClientServersAvailable::~CMsgClientServersAvailable() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientServersAvailable)
  SharedDtor();
}

void CMsgClientServersAvailable::SharedDtor() {
}

void CMsgClientServersAvailable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientServersAvailable::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientServersAvailable& CMsgClientServersAvailable::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientServersAvailable* CMsgClientServersAvailable::New(::google::protobuf::Arena* arena) const {
  CMsgClientServersAvailable* n = new CMsgClientServersAvailable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientServersAvailable::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientServersAvailable)
  server_types_available_.Clear();
  server_type_for_auth_services_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientServersAvailable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientServersAvailable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_types_available()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_type_for_auth_services = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_server_type_for_auth_services();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_type_for_auth_services_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientServersAvailable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientServersAvailable)
  return false;
#undef DO_
}

void CMsgClientServersAvailable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientServersAvailable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
  for (unsigned int i = 0, n = this->server_types_available_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server_types_available(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_type_for_auth_services = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_type_for_auth_services(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientServersAvailable)
}

::google::protobuf::uint8* CMsgClientServersAvailable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientServersAvailable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
  for (unsigned int i = 0, n = this->server_types_available_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->server_types_available(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_type_for_auth_services = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_type_for_auth_services(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientServersAvailable)
  return target;
}

size_t CMsgClientServersAvailable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientServersAvailable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
  {
    unsigned int count = this->server_types_available_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_types_available(i));
    }
  }

  // optional uint32 server_type_for_auth_services = 2;
  if (has_server_type_for_auth_services()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_type_for_auth_services());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientServersAvailable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientServersAvailable)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientServersAvailable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientServersAvailable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientServersAvailable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientServersAvailable)
    MergeFrom(*source);
  }
}

void CMsgClientServersAvailable::MergeFrom(const CMsgClientServersAvailable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientServersAvailable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_types_available_.MergeFrom(from.server_types_available_);
  if (from.has_server_type_for_auth_services()) {
    set_server_type_for_auth_services(from.server_type_for_auth_services());
  }
}

void CMsgClientServersAvailable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientServersAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientServersAvailable::CopyFrom(const CMsgClientServersAvailable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientServersAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServersAvailable::IsInitialized() const {
  return true;
}

void CMsgClientServersAvailable::Swap(CMsgClientServersAvailable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientServersAvailable::InternalSwap(CMsgClientServersAvailable* other) {
  server_types_available_.InternalSwap(&other->server_types_available_);
  std::swap(server_type_for_auth_services_, other->server_type_for_auth_services_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientServersAvailable::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientServersAvailable

// repeated .proto.steam.CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
int CMsgClientServersAvailable::server_types_available_size() const {
  return server_types_available_.size();
}
void CMsgClientServersAvailable::clear_server_types_available() {
  server_types_available_.Clear();
}
const ::proto::steam::CMsgClientServersAvailable_Server_Types_Available& CMsgClientServersAvailable::server_types_available(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientServersAvailable.server_types_available)
  return server_types_available_.Get(index);
}
::proto::steam::CMsgClientServersAvailable_Server_Types_Available* CMsgClientServersAvailable::mutable_server_types_available(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientServersAvailable.server_types_available)
  return server_types_available_.Mutable(index);
}
::proto::steam::CMsgClientServersAvailable_Server_Types_Available* CMsgClientServersAvailable::add_server_types_available() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientServersAvailable.server_types_available)
  return server_types_available_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientServersAvailable_Server_Types_Available >*
CMsgClientServersAvailable::mutable_server_types_available() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientServersAvailable.server_types_available)
  return &server_types_available_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientServersAvailable_Server_Types_Available >&
CMsgClientServersAvailable::server_types_available() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientServersAvailable.server_types_available)
  return server_types_available_;
}

// optional uint32 server_type_for_auth_services = 2;
bool CMsgClientServersAvailable::has_server_type_for_auth_services() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientServersAvailable::set_has_server_type_for_auth_services() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientServersAvailable::clear_has_server_type_for_auth_services() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientServersAvailable::clear_server_type_for_auth_services() {
  server_type_for_auth_services_ = 0u;
  clear_has_server_type_for_auth_services();
}
::google::protobuf::uint32 CMsgClientServersAvailable::server_type_for_auth_services() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientServersAvailable.server_type_for_auth_services)
  return server_type_for_auth_services_;
}
void CMsgClientServersAvailable::set_server_type_for_auth_services(::google::protobuf::uint32 value) {
  set_has_server_type_for_auth_services();
  server_type_for_auth_services_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientServersAvailable.server_type_for_auth_services)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetUserStats::kGameIdFieldNumber;
const int CMsgClientGetUserStats::kCrcStatsFieldNumber;
const int CMsgClientGetUserStats::kSchemaLocalVersionFieldNumber;
const int CMsgClientGetUserStats::kSteamIdForUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetUserStats::CMsgClientGetUserStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetUserStats)
}
CMsgClientGetUserStats::CMsgClientGetUserStats(const CMsgClientGetUserStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    reinterpret_cast<char*>(&steam_id_for_user_) -
    reinterpret_cast<char*>(&game_id_) + sizeof(steam_id_for_user_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetUserStats)
}

void CMsgClientGetUserStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&game_id_, 0, reinterpret_cast<char*>(&steam_id_for_user_) -
    reinterpret_cast<char*>(&game_id_) + sizeof(steam_id_for_user_));
}

CMsgClientGetUserStats::~CMsgClientGetUserStats() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetUserStats)
  SharedDtor();
}

void CMsgClientGetUserStats::SharedDtor() {
}

void CMsgClientGetUserStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetUserStats::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientGetUserStats& CMsgClientGetUserStats::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientGetUserStats* CMsgClientGetUserStats::New(::google::protobuf::Arena* arena) const {
  CMsgClientGetUserStats* n = new CMsgClientGetUserStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientGetUserStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetUserStats)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&game_id_, 0, reinterpret_cast<char*>(&steam_id_for_user_) -
      reinterpret_cast<char*>(&game_id_) + sizeof(steam_id_for_user_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientGetUserStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetUserStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 game_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crc_stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_crc_stats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_stats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 schema_local_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_schema_local_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &schema_local_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_for_user = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_steam_id_for_user();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_for_user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetUserStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetUserStats)
  return false;
#undef DO_
}

void CMsgClientGetUserStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetUserStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->game_id(), output);
  }

  // optional uint32 crc_stats = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->crc_stats(), output);
  }

  // optional int32 schema_local_version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->schema_local_version(), output);
  }

  // optional fixed64 steam_id_for_user = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->steam_id_for_user(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetUserStats)
}

::google::protobuf::uint8* CMsgClientGetUserStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetUserStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->game_id(), target);
  }

  // optional uint32 crc_stats = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->crc_stats(), target);
  }

  // optional int32 schema_local_version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->schema_local_version(), target);
  }

  // optional fixed64 steam_id_for_user = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->steam_id_for_user(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetUserStats)
  return target;
}

size_t CMsgClientGetUserStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetUserStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed64 game_id = 1;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 crc_stats = 2;
    if (has_crc_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc_stats());
    }

    // optional int32 schema_local_version = 3;
    if (has_schema_local_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->schema_local_version());
    }

    // optional fixed64 steam_id_for_user = 4;
    if (has_steam_id_for_user()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetUserStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetUserStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetUserStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientGetUserStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetUserStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetUserStats)
    MergeFrom(*source);
  }
}

void CMsgClientGetUserStats::MergeFrom(const CMsgClientGetUserStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetUserStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      crc_stats_ = from.crc_stats_;
    }
    if (cached_has_bits & 0x00000004u) {
      schema_local_version_ = from.schema_local_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      steam_id_for_user_ = from.steam_id_for_user_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGetUserStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetUserStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetUserStats::CopyFrom(const CMsgClientGetUserStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetUserStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetUserStats::IsInitialized() const {
  return true;
}

void CMsgClientGetUserStats::Swap(CMsgClientGetUserStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetUserStats::InternalSwap(CMsgClientGetUserStats* other) {
  std::swap(game_id_, other->game_id_);
  std::swap(crc_stats_, other->crc_stats_);
  std::swap(schema_local_version_, other->schema_local_version_);
  std::swap(steam_id_for_user_, other->steam_id_for_user_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientGetUserStats::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientGetUserStats

// optional fixed64 game_id = 1;
bool CMsgClientGetUserStats::has_game_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientGetUserStats::set_has_game_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientGetUserStats::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientGetUserStats::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_id();
}
::google::protobuf::uint64 CMsgClientGetUserStats::game_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetUserStats.game_id)
  return game_id_;
}
void CMsgClientGetUserStats::set_game_id(::google::protobuf::uint64 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetUserStats.game_id)
}

// optional uint32 crc_stats = 2;
bool CMsgClientGetUserStats::has_crc_stats() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientGetUserStats::set_has_crc_stats() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientGetUserStats::clear_has_crc_stats() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientGetUserStats::clear_crc_stats() {
  crc_stats_ = 0u;
  clear_has_crc_stats();
}
::google::protobuf::uint32 CMsgClientGetUserStats::crc_stats() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetUserStats.crc_stats)
  return crc_stats_;
}
void CMsgClientGetUserStats::set_crc_stats(::google::protobuf::uint32 value) {
  set_has_crc_stats();
  crc_stats_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetUserStats.crc_stats)
}

// optional int32 schema_local_version = 3;
bool CMsgClientGetUserStats::has_schema_local_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientGetUserStats::set_has_schema_local_version() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientGetUserStats::clear_has_schema_local_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientGetUserStats::clear_schema_local_version() {
  schema_local_version_ = 0;
  clear_has_schema_local_version();
}
::google::protobuf::int32 CMsgClientGetUserStats::schema_local_version() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetUserStats.schema_local_version)
  return schema_local_version_;
}
void CMsgClientGetUserStats::set_schema_local_version(::google::protobuf::int32 value) {
  set_has_schema_local_version();
  schema_local_version_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetUserStats.schema_local_version)
}

// optional fixed64 steam_id_for_user = 4;
bool CMsgClientGetUserStats::has_steam_id_for_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientGetUserStats::set_has_steam_id_for_user() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientGetUserStats::clear_has_steam_id_for_user() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientGetUserStats::clear_steam_id_for_user() {
  steam_id_for_user_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_for_user();
}
::google::protobuf::uint64 CMsgClientGetUserStats::steam_id_for_user() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetUserStats.steam_id_for_user)
  return steam_id_for_user_;
}
void CMsgClientGetUserStats::set_steam_id_for_user(::google::protobuf::uint64 value) {
  set_has_steam_id_for_user();
  steam_id_for_user_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetUserStats.steam_id_for_user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetUserStatsResponse_Stats::kStatIdFieldNumber;
const int CMsgClientGetUserStatsResponse_Stats::kStatValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetUserStatsResponse_Stats::CMsgClientGetUserStatsResponse_Stats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetUserStatsResponse.Stats)
}
CMsgClientGetUserStatsResponse_Stats::CMsgClientGetUserStatsResponse_Stats(const CMsgClientGetUserStatsResponse_Stats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stat_id_, &from.stat_id_,
    reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_) + sizeof(stat_value_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetUserStatsResponse.Stats)
}

void CMsgClientGetUserStatsResponse_Stats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stat_id_, 0, reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_) + sizeof(stat_value_));
}

CMsgClientGetUserStatsResponse_Stats::~CMsgClientGetUserStatsResponse_Stats() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  SharedDtor();
}

void CMsgClientGetUserStatsResponse_Stats::SharedDtor() {
}

void CMsgClientGetUserStatsResponse_Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetUserStatsResponse_Stats::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientGetUserStatsResponse_Stats& CMsgClientGetUserStatsResponse_Stats::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientGetUserStatsResponse_Stats* CMsgClientGetUserStatsResponse_Stats::New(::google::protobuf::Arena* arena) const {
  CMsgClientGetUserStatsResponse_Stats* n = new CMsgClientGetUserStatsResponse_Stats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientGetUserStatsResponse_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&stat_id_, 0, reinterpret_cast<char*>(&stat_value_) -
      reinterpret_cast<char*>(&stat_id_) + sizeof(stat_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientGetUserStatsResponse_Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_stat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stat_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_stat_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  return false;
#undef DO_
}

void CMsgClientGetUserStatsResponse_Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stat_id(), output);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetUserStatsResponse.Stats)
}

::google::protobuf::uint8* CMsgClientGetUserStatsResponse_Stats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stat_id(), target);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stat_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  return target;
}

size_t CMsgClientGetUserStatsResponse_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 stat_id = 1;
    if (has_stat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_id());
    }

    // optional uint32 stat_value = 2;
    if (has_stat_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetUserStatsResponse_Stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetUserStatsResponse_Stats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientGetUserStatsResponse_Stats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetUserStatsResponse.Stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetUserStatsResponse.Stats)
    MergeFrom(*source);
  }
}

void CMsgClientGetUserStatsResponse_Stats::MergeFrom(const CMsgClientGetUserStatsResponse_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      stat_id_ = from.stat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_value_ = from.stat_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGetUserStatsResponse_Stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetUserStatsResponse_Stats::CopyFrom(const CMsgClientGetUserStatsResponse_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetUserStatsResponse.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetUserStatsResponse_Stats::IsInitialized() const {
  return true;
}

void CMsgClientGetUserStatsResponse_Stats::Swap(CMsgClientGetUserStatsResponse_Stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetUserStatsResponse_Stats::InternalSwap(CMsgClientGetUserStatsResponse_Stats* other) {
  std::swap(stat_id_, other->stat_id_);
  std::swap(stat_value_, other->stat_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientGetUserStatsResponse_Stats::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientGetUserStatsResponse_Stats

// optional uint32 stat_id = 1;
bool CMsgClientGetUserStatsResponse_Stats::has_stat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientGetUserStatsResponse_Stats::set_has_stat_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientGetUserStatsResponse_Stats::clear_has_stat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientGetUserStatsResponse_Stats::clear_stat_id() {
  stat_id_ = 0u;
  clear_has_stat_id();
}
::google::protobuf::uint32 CMsgClientGetUserStatsResponse_Stats::stat_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetUserStatsResponse.Stats.stat_id)
  return stat_id_;
}
void CMsgClientGetUserStatsResponse_Stats::set_stat_id(::google::protobuf::uint32 value) {
  set_has_stat_id();
  stat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetUserStatsResponse.Stats.stat_id)
}

// optional uint32 stat_value = 2;
bool CMsgClientGetUserStatsResponse_Stats::has_stat_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientGetUserStatsResponse_Stats::set_has_stat_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientGetUserStatsResponse_Stats::clear_has_stat_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientGetUserStatsResponse_Stats::clear_stat_value() {
  stat_value_ = 0u;
  clear_has_stat_value();
}
::google::protobuf::uint32 CMsgClientGetUserStatsResponse_Stats::stat_value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetUserStatsResponse.Stats.stat_value)
  return stat_value_;
}
void CMsgClientGetUserStatsResponse_Stats::set_stat_value(::google::protobuf::uint32 value) {
  set_has_stat_value();
  stat_value_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetUserStatsResponse.Stats.stat_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetUserStatsResponse_Achievement_Blocks::kAchievementIdFieldNumber;
const int CMsgClientGetUserStatsResponse_Achievement_Blocks::kUnlockTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetUserStatsResponse_Achievement_Blocks::CMsgClientGetUserStatsResponse_Achievement_Blocks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
}
CMsgClientGetUserStatsResponse_Achievement_Blocks::CMsgClientGetUserStatsResponse_Achievement_Blocks(const CMsgClientGetUserStatsResponse_Achievement_Blocks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      unlock_time_(from.unlock_time_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  achievement_id_ = from.achievement_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::SharedCtor() {
  _cached_size_ = 0;
  achievement_id_ = 0u;
}

CMsgClientGetUserStatsResponse_Achievement_Blocks::~CMsgClientGetUserStatsResponse_Achievement_Blocks() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  SharedDtor();
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::SharedDtor() {
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetUserStatsResponse_Achievement_Blocks::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientGetUserStatsResponse_Achievement_Blocks& CMsgClientGetUserStatsResponse_Achievement_Blocks::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientGetUserStatsResponse_Achievement_Blocks* CMsgClientGetUserStatsResponse_Achievement_Blocks::New(::google::protobuf::Arena* arena) const {
  CMsgClientGetUserStatsResponse_Achievement_Blocks* n = new CMsgClientGetUserStatsResponse_Achievement_Blocks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  unlock_time_.Clear();
  achievement_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientGetUserStatsResponse_Achievement_Blocks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 achievement_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_achievement_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 unlock_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 21u, input, this->mutable_unlock_time())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_unlock_time())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  return false;
#undef DO_
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 achievement_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->achievement_id(), output);
  }

  // repeated fixed32 unlock_time = 2;
  for (int i = 0, n = this->unlock_time_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      2, this->unlock_time(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
}

::google::protobuf::uint8* CMsgClientGetUserStatsResponse_Achievement_Blocks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 achievement_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->achievement_id(), target);
  }

  // repeated fixed32 unlock_time = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(2, this->unlock_time_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  return target;
}

size_t CMsgClientGetUserStatsResponse_Achievement_Blocks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed32 unlock_time = 2;
  {
    unsigned int count = this->unlock_time_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->unlock_time_size());
    total_size += data_size;
  }

  // optional uint32 achievement_id = 1;
  if (has_achievement_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->achievement_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetUserStatsResponse_Achievement_Blocks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientGetUserStatsResponse_Achievement_Blocks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
    MergeFrom(*source);
  }
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::MergeFrom(const CMsgClientGetUserStatsResponse_Achievement_Blocks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unlock_time_.MergeFrom(from.unlock_time_);
  if (from.has_achievement_id()) {
    set_achievement_id(from.achievement_id());
  }
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::CopyFrom(const CMsgClientGetUserStatsResponse_Achievement_Blocks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetUserStatsResponse_Achievement_Blocks::IsInitialized() const {
  return true;
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::Swap(CMsgClientGetUserStatsResponse_Achievement_Blocks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetUserStatsResponse_Achievement_Blocks::InternalSwap(CMsgClientGetUserStatsResponse_Achievement_Blocks* other) {
  unlock_time_.InternalSwap(&other->unlock_time_);
  std::swap(achievement_id_, other->achievement_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientGetUserStatsResponse_Achievement_Blocks::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientGetUserStatsResponse_Achievement_Blocks

// optional uint32 achievement_id = 1;
bool CMsgClientGetUserStatsResponse_Achievement_Blocks::has_achievement_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientGetUserStatsResponse_Achievement_Blocks::set_has_achievement_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientGetUserStatsResponse_Achievement_Blocks::clear_has_achievement_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientGetUserStatsResponse_Achievement_Blocks::clear_achievement_id() {
  achievement_id_ = 0u;
  clear_has_achievement_id();
}
::google::protobuf::uint32 CMsgClientGetUserStatsResponse_Achievement_Blocks::achievement_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks.achievement_id)
  return achievement_id_;
}
void CMsgClientGetUserStatsResponse_Achievement_Blocks::set_achievement_id(::google::protobuf::uint32 value) {
  set_has_achievement_id();
  achievement_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks.achievement_id)
}

// repeated fixed32 unlock_time = 2;
int CMsgClientGetUserStatsResponse_Achievement_Blocks::unlock_time_size() const {
  return unlock_time_.size();
}
void CMsgClientGetUserStatsResponse_Achievement_Blocks::clear_unlock_time() {
  unlock_time_.Clear();
}
::google::protobuf::uint32 CMsgClientGetUserStatsResponse_Achievement_Blocks::unlock_time(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks.unlock_time)
  return unlock_time_.Get(index);
}
void CMsgClientGetUserStatsResponse_Achievement_Blocks::set_unlock_time(int index, ::google::protobuf::uint32 value) {
  unlock_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks.unlock_time)
}
void CMsgClientGetUserStatsResponse_Achievement_Blocks::add_unlock_time(::google::protobuf::uint32 value) {
  unlock_time_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks.unlock_time)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientGetUserStatsResponse_Achievement_Blocks::unlock_time() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks.unlock_time)
  return unlock_time_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientGetUserStatsResponse_Achievement_Blocks::mutable_unlock_time() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks.unlock_time)
  return &unlock_time_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetUserStatsResponse::kGameIdFieldNumber;
const int CMsgClientGetUserStatsResponse::kEresultFieldNumber;
const int CMsgClientGetUserStatsResponse::kCrcStatsFieldNumber;
const int CMsgClientGetUserStatsResponse::kSchemaFieldNumber;
const int CMsgClientGetUserStatsResponse::kStatsFieldNumber;
const int CMsgClientGetUserStatsResponse::kAchievementBlocksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetUserStatsResponse::CMsgClientGetUserStatsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetUserStatsResponse)
}
CMsgClientGetUserStatsResponse::CMsgClientGetUserStatsResponse(const CMsgClientGetUserStatsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stats_(from.stats_),
      achievement_blocks_(from.achievement_blocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  schema_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_schema()) {
    schema_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_);
  }
  ::memcpy(&game_id_, &from.game_id_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&game_id_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetUserStatsResponse)
}

void CMsgClientGetUserStatsResponse::SharedCtor() {
  _cached_size_ = 0;
  schema_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&game_id_, 0, reinterpret_cast<char*>(&crc_stats_) -
    reinterpret_cast<char*>(&game_id_) + sizeof(crc_stats_));
  eresult_ = 2;
}

CMsgClientGetUserStatsResponse::~CMsgClientGetUserStatsResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetUserStatsResponse)
  SharedDtor();
}

void CMsgClientGetUserStatsResponse::SharedDtor() {
  schema_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientGetUserStatsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetUserStatsResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientGetUserStatsResponse& CMsgClientGetUserStatsResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientGetUserStatsResponse* CMsgClientGetUserStatsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientGetUserStatsResponse* n = new CMsgClientGetUserStatsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientGetUserStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetUserStatsResponse)
  stats_.Clear();
  achievement_blocks_.Clear();
  if (has_schema()) {
    GOOGLE_DCHECK(!schema_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*schema_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&game_id_, 0, reinterpret_cast<char*>(&crc_stats_) -
      reinterpret_cast<char*>(&game_id_) + sizeof(crc_stats_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientGetUserStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetUserStatsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 game_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult = 2 [default = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crc_stats = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_crc_stats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_stats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes schema = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_schema()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientGetUserStatsResponse.Stats stats = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks achievement_blocks = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievement_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetUserStatsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetUserStatsResponse)
  return false;
#undef DO_
}

void CMsgClientGetUserStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetUserStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->game_id(), output);
  }

  // optional int32 eresult = 2 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eresult(), output);
  }

  // optional uint32 crc_stats = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crc_stats(), output);
  }

  // optional bytes schema = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->schema(), output);
  }

  // repeated .proto.steam.CMsgClientGetUserStatsResponse.Stats stats = 5;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stats(i), output);
  }

  // repeated .proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks achievement_blocks = 6;
  for (unsigned int i = 0, n = this->achievement_blocks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->achievement_blocks(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetUserStatsResponse)
}

::google::protobuf::uint8* CMsgClientGetUserStatsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetUserStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->game_id(), target);
  }

  // optional int32 eresult = 2 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->eresult(), target);
  }

  // optional uint32 crc_stats = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crc_stats(), target);
  }

  // optional bytes schema = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->schema(), target);
  }

  // repeated .proto.steam.CMsgClientGetUserStatsResponse.Stats stats = 5;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->stats(i), deterministic, target);
  }

  // repeated .proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks achievement_blocks = 6;
  for (unsigned int i = 0, n = this->achievement_blocks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->achievement_blocks(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetUserStatsResponse)
  return target;
}

size_t CMsgClientGetUserStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetUserStatsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientGetUserStatsResponse.Stats stats = 5;
  {
    unsigned int count = this->stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats(i));
    }
  }

  // repeated .proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks achievement_blocks = 6;
  {
    unsigned int count = this->achievement_blocks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achievement_blocks(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes schema = 4;
    if (has_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->schema());
    }

    // optional fixed64 game_id = 1;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 crc_stats = 3;
    if (has_crc_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc_stats());
    }

    // optional int32 eresult = 2 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetUserStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetUserStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetUserStatsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientGetUserStatsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetUserStatsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetUserStatsResponse)
    MergeFrom(*source);
  }
}

void CMsgClientGetUserStatsResponse::MergeFrom(const CMsgClientGetUserStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetUserStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  achievement_blocks_.MergeFrom(from.achievement_blocks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_schema();
      schema_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_);
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      crc_stats_ = from.crc_stats_;
    }
    if (cached_has_bits & 0x00000008u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGetUserStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetUserStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetUserStatsResponse::CopyFrom(const CMsgClientGetUserStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetUserStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetUserStatsResponse::IsInitialized() const {
  return true;
}

void CMsgClientGetUserStatsResponse::Swap(CMsgClientGetUserStatsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetUserStatsResponse::InternalSwap(CMsgClientGetUserStatsResponse* other) {
  stats_.InternalSwap(&other->stats_);
  achievement_blocks_.InternalSwap(&other->achievement_blocks_);
  schema_.Swap(&other->schema_);
  std::swap(game_id_, other->game_id_);
  std::swap(crc_stats_, other->crc_stats_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientGetUserStatsResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientGetUserStatsResponse

// optional fixed64 game_id = 1;
bool CMsgClientGetUserStatsResponse::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientGetUserStatsResponse::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientGetUserStatsResponse::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientGetUserStatsResponse::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_id();
}
::google::protobuf::uint64 CMsgClientGetUserStatsResponse::game_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetUserStatsResponse.game_id)
  return game_id_;
}
void CMsgClientGetUserStatsResponse::set_game_id(::google::protobuf::uint64 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetUserStatsResponse.game_id)
}

// optional int32 eresult = 2 [default = 2];
bool CMsgClientGetUserStatsResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientGetUserStatsResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientGetUserStatsResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientGetUserStatsResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientGetUserStatsResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetUserStatsResponse.eresult)
  return eresult_;
}
void CMsgClientGetUserStatsResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetUserStatsResponse.eresult)
}

// optional uint32 crc_stats = 3;
bool CMsgClientGetUserStatsResponse::has_crc_stats() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientGetUserStatsResponse::set_has_crc_stats() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientGetUserStatsResponse::clear_has_crc_stats() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientGetUserStatsResponse::clear_crc_stats() {
  crc_stats_ = 0u;
  clear_has_crc_stats();
}
::google::protobuf::uint32 CMsgClientGetUserStatsResponse::crc_stats() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetUserStatsResponse.crc_stats)
  return crc_stats_;
}
void CMsgClientGetUserStatsResponse::set_crc_stats(::google::protobuf::uint32 value) {
  set_has_crc_stats();
  crc_stats_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetUserStatsResponse.crc_stats)
}

// optional bytes schema = 4;
bool CMsgClientGetUserStatsResponse::has_schema() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientGetUserStatsResponse::set_has_schema() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientGetUserStatsResponse::clear_has_schema() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientGetUserStatsResponse::clear_schema() {
  schema_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_schema();
}
const ::std::string& CMsgClientGetUserStatsResponse::schema() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetUserStatsResponse.schema)
  return schema_.GetNoArena();
}
void CMsgClientGetUserStatsResponse::set_schema(const ::std::string& value) {
  set_has_schema();
  schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetUserStatsResponse.schema)
}
#if LANG_CXX11
void CMsgClientGetUserStatsResponse::set_schema(::std::string&& value) {
  set_has_schema();
  schema_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientGetUserStatsResponse.schema)
}
#endif
void CMsgClientGetUserStatsResponse::set_schema(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_schema();
  schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientGetUserStatsResponse.schema)
}
void CMsgClientGetUserStatsResponse::set_schema(const void* value, size_t size) {
  set_has_schema();
  schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientGetUserStatsResponse.schema)
}
::std::string* CMsgClientGetUserStatsResponse::mutable_schema() {
  set_has_schema();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientGetUserStatsResponse.schema)
  return schema_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientGetUserStatsResponse::release_schema() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientGetUserStatsResponse.schema)
  clear_has_schema();
  return schema_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientGetUserStatsResponse::set_allocated_schema(::std::string* schema) {
  if (schema != NULL) {
    set_has_schema();
  } else {
    clear_has_schema();
  }
  schema_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schema);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientGetUserStatsResponse.schema)
}

// repeated .proto.steam.CMsgClientGetUserStatsResponse.Stats stats = 5;
int CMsgClientGetUserStatsResponse::stats_size() const {
  return stats_.size();
}
void CMsgClientGetUserStatsResponse::clear_stats() {
  stats_.Clear();
}
const ::proto::steam::CMsgClientGetUserStatsResponse_Stats& CMsgClientGetUserStatsResponse::stats(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetUserStatsResponse.stats)
  return stats_.Get(index);
}
::proto::steam::CMsgClientGetUserStatsResponse_Stats* CMsgClientGetUserStatsResponse::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientGetUserStatsResponse.stats)
  return stats_.Mutable(index);
}
::proto::steam::CMsgClientGetUserStatsResponse_Stats* CMsgClientGetUserStatsResponse::add_stats() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientGetUserStatsResponse.stats)
  return stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientGetUserStatsResponse_Stats >*
CMsgClientGetUserStatsResponse::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientGetUserStatsResponse.stats)
  return &stats_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientGetUserStatsResponse_Stats >&
CMsgClientGetUserStatsResponse::stats() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientGetUserStatsResponse.stats)
  return stats_;
}

// repeated .proto.steam.CMsgClientGetUserStatsResponse.Achievement_Blocks achievement_blocks = 6;
int CMsgClientGetUserStatsResponse::achievement_blocks_size() const {
  return achievement_blocks_.size();
}
void CMsgClientGetUserStatsResponse::clear_achievement_blocks() {
  achievement_blocks_.Clear();
}
const ::proto::steam::CMsgClientGetUserStatsResponse_Achievement_Blocks& CMsgClientGetUserStatsResponse::achievement_blocks(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetUserStatsResponse.achievement_blocks)
  return achievement_blocks_.Get(index);
}
::proto::steam::CMsgClientGetUserStatsResponse_Achievement_Blocks* CMsgClientGetUserStatsResponse::mutable_achievement_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientGetUserStatsResponse.achievement_blocks)
  return achievement_blocks_.Mutable(index);
}
::proto::steam::CMsgClientGetUserStatsResponse_Achievement_Blocks* CMsgClientGetUserStatsResponse::add_achievement_blocks() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientGetUserStatsResponse.achievement_blocks)
  return achievement_blocks_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientGetUserStatsResponse_Achievement_Blocks >*
CMsgClientGetUserStatsResponse::mutable_achievement_blocks() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientGetUserStatsResponse.achievement_blocks)
  return &achievement_blocks_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientGetUserStatsResponse_Achievement_Blocks >&
CMsgClientGetUserStatsResponse::achievement_blocks() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientGetUserStatsResponse.achievement_blocks)
  return achievement_blocks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::kStatIdFieldNumber;
const int CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::kRevertedStatValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
}
CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation(const CMsgClientStoreUserStatsResponse_Stats_Failed_Validation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stat_id_, &from.stat_id_,
    reinterpret_cast<char*>(&reverted_stat_value_) -
    reinterpret_cast<char*>(&stat_id_) + sizeof(reverted_stat_value_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stat_id_, 0, reinterpret_cast<char*>(&reverted_stat_value_) -
    reinterpret_cast<char*>(&stat_id_) + sizeof(reverted_stat_value_));
}

CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::~CMsgClientStoreUserStatsResponse_Stats_Failed_Validation() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  SharedDtor();
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::SharedDtor() {
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientStoreUserStatsResponse_Stats_Failed_Validation& CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientStoreUserStatsResponse_Stats_Failed_Validation* CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::New(::google::protobuf::Arena* arena) const {
  CMsgClientStoreUserStatsResponse_Stats_Failed_Validation* n = new CMsgClientStoreUserStatsResponse_Stats_Failed_Validation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&stat_id_, 0, reinterpret_cast<char*>(&reverted_stat_value_) -
      reinterpret_cast<char*>(&stat_id_) + sizeof(reverted_stat_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_stat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reverted_stat_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_reverted_stat_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reverted_stat_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  return false;
#undef DO_
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stat_id(), output);
  }

  // optional uint32 reverted_stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reverted_stat_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
}

::google::protobuf::uint8* CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stat_id(), target);
  }

  // optional uint32 reverted_stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reverted_stat_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  return target;
}

size_t CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 stat_id = 1;
    if (has_stat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_id());
    }

    // optional uint32 reverted_stat_value = 2;
    if (has_reverted_stat_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reverted_stat_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStoreUserStatsResponse_Stats_Failed_Validation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientStoreUserStatsResponse_Stats_Failed_Validation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
    MergeFrom(*source);
  }
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::MergeFrom(const CMsgClientStoreUserStatsResponse_Stats_Failed_Validation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      stat_id_ = from.stat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      reverted_stat_value_ = from.reverted_stat_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::CopyFrom(const CMsgClientStoreUserStatsResponse_Stats_Failed_Validation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::IsInitialized() const {
  return true;
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::Swap(CMsgClientStoreUserStatsResponse_Stats_Failed_Validation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::InternalSwap(CMsgClientStoreUserStatsResponse_Stats_Failed_Validation* other) {
  std::swap(stat_id_, other->stat_id_);
  std::swap(reverted_stat_value_, other->reverted_stat_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientStoreUserStatsResponse_Stats_Failed_Validation

// optional uint32 stat_id = 1;
bool CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::has_stat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::set_has_stat_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::clear_has_stat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::clear_stat_id() {
  stat_id_ = 0u;
  clear_has_stat_id();
}
::google::protobuf::uint32 CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::stat_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation.stat_id)
  return stat_id_;
}
void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::set_stat_id(::google::protobuf::uint32 value) {
  set_has_stat_id();
  stat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation.stat_id)
}

// optional uint32 reverted_stat_value = 2;
bool CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::has_reverted_stat_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::set_has_reverted_stat_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::clear_has_reverted_stat_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::clear_reverted_stat_value() {
  reverted_stat_value_ = 0u;
  clear_has_reverted_stat_value();
}
::google::protobuf::uint32 CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::reverted_stat_value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation.reverted_stat_value)
  return reverted_stat_value_;
}
void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::set_reverted_stat_value(::google::protobuf::uint32 value) {
  set_has_reverted_stat_value();
  reverted_stat_value_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation.reverted_stat_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientStoreUserStatsResponse::kGameIdFieldNumber;
const int CMsgClientStoreUserStatsResponse::kEresultFieldNumber;
const int CMsgClientStoreUserStatsResponse::kCrcStatsFieldNumber;
const int CMsgClientStoreUserStatsResponse::kStatsFailedValidationFieldNumber;
const int CMsgClientStoreUserStatsResponse::kStatsOutOfDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientStoreUserStatsResponse::CMsgClientStoreUserStatsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientStoreUserStatsResponse)
}
CMsgClientStoreUserStatsResponse::CMsgClientStoreUserStatsResponse(const CMsgClientStoreUserStatsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stats_failed_validation_(from.stats_failed_validation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&game_id_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientStoreUserStatsResponse)
}

void CMsgClientStoreUserStatsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&game_id_, 0, reinterpret_cast<char*>(&stats_out_of_date_) -
    reinterpret_cast<char*>(&game_id_) + sizeof(stats_out_of_date_));
  eresult_ = 2;
}

CMsgClientStoreUserStatsResponse::~CMsgClientStoreUserStatsResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientStoreUserStatsResponse)
  SharedDtor();
}

void CMsgClientStoreUserStatsResponse::SharedDtor() {
}

void CMsgClientStoreUserStatsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientStoreUserStatsResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientStoreUserStatsResponse& CMsgClientStoreUserStatsResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientStoreUserStatsResponse* CMsgClientStoreUserStatsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientStoreUserStatsResponse* n = new CMsgClientStoreUserStatsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientStoreUserStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientStoreUserStatsResponse)
  stats_failed_validation_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&game_id_, 0, reinterpret_cast<char*>(&stats_out_of_date_) -
      reinterpret_cast<char*>(&game_id_) + sizeof(stats_out_of_date_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientStoreUserStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientStoreUserStatsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 game_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult = 2 [default = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crc_stats = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_crc_stats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_stats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation stats_failed_validation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats_failed_validation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool stats_out_of_date = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_stats_out_of_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stats_out_of_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientStoreUserStatsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientStoreUserStatsResponse)
  return false;
#undef DO_
}

void CMsgClientStoreUserStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientStoreUserStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->game_id(), output);
  }

  // optional int32 eresult = 2 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eresult(), output);
  }

  // optional uint32 crc_stats = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crc_stats(), output);
  }

  // repeated .proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation stats_failed_validation = 4;
  for (unsigned int i = 0, n = this->stats_failed_validation_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stats_failed_validation(i), output);
  }

  // optional bool stats_out_of_date = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->stats_out_of_date(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientStoreUserStatsResponse)
}

::google::protobuf::uint8* CMsgClientStoreUserStatsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientStoreUserStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->game_id(), target);
  }

  // optional int32 eresult = 2 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->eresult(), target);
  }

  // optional uint32 crc_stats = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crc_stats(), target);
  }

  // repeated .proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation stats_failed_validation = 4;
  for (unsigned int i = 0, n = this->stats_failed_validation_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->stats_failed_validation(i), deterministic, target);
  }

  // optional bool stats_out_of_date = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->stats_out_of_date(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientStoreUserStatsResponse)
  return target;
}

size_t CMsgClientStoreUserStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientStoreUserStatsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation stats_failed_validation = 4;
  {
    unsigned int count = this->stats_failed_validation_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats_failed_validation(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed64 game_id = 1;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 crc_stats = 3;
    if (has_crc_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc_stats());
    }

    // optional bool stats_out_of_date = 5;
    if (has_stats_out_of_date()) {
      total_size += 1 + 1;
    }

    // optional int32 eresult = 2 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientStoreUserStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientStoreUserStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStoreUserStatsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientStoreUserStatsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientStoreUserStatsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientStoreUserStatsResponse)
    MergeFrom(*source);
  }
}

void CMsgClientStoreUserStatsResponse::MergeFrom(const CMsgClientStoreUserStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientStoreUserStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_failed_validation_.MergeFrom(from.stats_failed_validation_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      crc_stats_ = from.crc_stats_;
    }
    if (cached_has_bits & 0x00000004u) {
      stats_out_of_date_ = from.stats_out_of_date_;
    }
    if (cached_has_bits & 0x00000008u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStoreUserStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientStoreUserStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStoreUserStatsResponse::CopyFrom(const CMsgClientStoreUserStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientStoreUserStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStatsResponse::IsInitialized() const {
  return true;
}

void CMsgClientStoreUserStatsResponse::Swap(CMsgClientStoreUserStatsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientStoreUserStatsResponse::InternalSwap(CMsgClientStoreUserStatsResponse* other) {
  stats_failed_validation_.InternalSwap(&other->stats_failed_validation_);
  std::swap(game_id_, other->game_id_);
  std::swap(crc_stats_, other->crc_stats_);
  std::swap(stats_out_of_date_, other->stats_out_of_date_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientStoreUserStatsResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientStoreUserStatsResponse

// optional fixed64 game_id = 1;
bool CMsgClientStoreUserStatsResponse::has_game_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientStoreUserStatsResponse::set_has_game_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientStoreUserStatsResponse::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientStoreUserStatsResponse::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_id();
}
::google::protobuf::uint64 CMsgClientStoreUserStatsResponse::game_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStoreUserStatsResponse.game_id)
  return game_id_;
}
void CMsgClientStoreUserStatsResponse::set_game_id(::google::protobuf::uint64 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStoreUserStatsResponse.game_id)
}

// optional int32 eresult = 2 [default = 2];
bool CMsgClientStoreUserStatsResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientStoreUserStatsResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientStoreUserStatsResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientStoreUserStatsResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientStoreUserStatsResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStoreUserStatsResponse.eresult)
  return eresult_;
}
void CMsgClientStoreUserStatsResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStoreUserStatsResponse.eresult)
}

// optional uint32 crc_stats = 3;
bool CMsgClientStoreUserStatsResponse::has_crc_stats() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientStoreUserStatsResponse::set_has_crc_stats() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientStoreUserStatsResponse::clear_has_crc_stats() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientStoreUserStatsResponse::clear_crc_stats() {
  crc_stats_ = 0u;
  clear_has_crc_stats();
}
::google::protobuf::uint32 CMsgClientStoreUserStatsResponse::crc_stats() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStoreUserStatsResponse.crc_stats)
  return crc_stats_;
}
void CMsgClientStoreUserStatsResponse::set_crc_stats(::google::protobuf::uint32 value) {
  set_has_crc_stats();
  crc_stats_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStoreUserStatsResponse.crc_stats)
}

// repeated .proto.steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation stats_failed_validation = 4;
int CMsgClientStoreUserStatsResponse::stats_failed_validation_size() const {
  return stats_failed_validation_.size();
}
void CMsgClientStoreUserStatsResponse::clear_stats_failed_validation() {
  stats_failed_validation_.Clear();
}
const ::proto::steam::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation& CMsgClientStoreUserStatsResponse::stats_failed_validation(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStoreUserStatsResponse.stats_failed_validation)
  return stats_failed_validation_.Get(index);
}
::proto::steam::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation* CMsgClientStoreUserStatsResponse::mutable_stats_failed_validation(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientStoreUserStatsResponse.stats_failed_validation)
  return stats_failed_validation_.Mutable(index);
}
::proto::steam::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation* CMsgClientStoreUserStatsResponse::add_stats_failed_validation() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientStoreUserStatsResponse.stats_failed_validation)
  return stats_failed_validation_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation >*
CMsgClientStoreUserStatsResponse::mutable_stats_failed_validation() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientStoreUserStatsResponse.stats_failed_validation)
  return &stats_failed_validation_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation >&
CMsgClientStoreUserStatsResponse::stats_failed_validation() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientStoreUserStatsResponse.stats_failed_validation)
  return stats_failed_validation_;
}

// optional bool stats_out_of_date = 5;
bool CMsgClientStoreUserStatsResponse::has_stats_out_of_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientStoreUserStatsResponse::set_has_stats_out_of_date() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientStoreUserStatsResponse::clear_has_stats_out_of_date() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientStoreUserStatsResponse::clear_stats_out_of_date() {
  stats_out_of_date_ = false;
  clear_has_stats_out_of_date();
}
bool CMsgClientStoreUserStatsResponse::stats_out_of_date() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStoreUserStatsResponse.stats_out_of_date)
  return stats_out_of_date_;
}
void CMsgClientStoreUserStatsResponse::set_stats_out_of_date(bool value) {
  set_has_stats_out_of_date();
  stats_out_of_date_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStoreUserStatsResponse.stats_out_of_date)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientStoreUserStats2_Stats::kStatIdFieldNumber;
const int CMsgClientStoreUserStats2_Stats::kStatValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientStoreUserStats2_Stats::CMsgClientStoreUserStats2_Stats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientStoreUserStats2.Stats)
}
CMsgClientStoreUserStats2_Stats::CMsgClientStoreUserStats2_Stats(const CMsgClientStoreUserStats2_Stats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stat_id_, &from.stat_id_,
    reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_) + sizeof(stat_value_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientStoreUserStats2.Stats)
}

void CMsgClientStoreUserStats2_Stats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stat_id_, 0, reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_) + sizeof(stat_value_));
}

CMsgClientStoreUserStats2_Stats::~CMsgClientStoreUserStats2_Stats() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientStoreUserStats2.Stats)
  SharedDtor();
}

void CMsgClientStoreUserStats2_Stats::SharedDtor() {
}

void CMsgClientStoreUserStats2_Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientStoreUserStats2_Stats::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientStoreUserStats2_Stats& CMsgClientStoreUserStats2_Stats::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientStoreUserStats2_Stats* CMsgClientStoreUserStats2_Stats::New(::google::protobuf::Arena* arena) const {
  CMsgClientStoreUserStats2_Stats* n = new CMsgClientStoreUserStats2_Stats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientStoreUserStats2_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientStoreUserStats2.Stats)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&stat_id_, 0, reinterpret_cast<char*>(&stat_value_) -
      reinterpret_cast<char*>(&stat_id_) + sizeof(stat_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientStoreUserStats2_Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientStoreUserStats2.Stats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_stat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stat_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_stat_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientStoreUserStats2.Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientStoreUserStats2.Stats)
  return false;
#undef DO_
}

void CMsgClientStoreUserStats2_Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientStoreUserStats2.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stat_id(), output);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientStoreUserStats2.Stats)
}

::google::protobuf::uint8* CMsgClientStoreUserStats2_Stats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientStoreUserStats2.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stat_id(), target);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stat_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientStoreUserStats2.Stats)
  return target;
}

size_t CMsgClientStoreUserStats2_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientStoreUserStats2.Stats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 stat_id = 1;
    if (has_stat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_id());
    }

    // optional uint32 stat_value = 2;
    if (has_stat_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientStoreUserStats2_Stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientStoreUserStats2.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStoreUserStats2_Stats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientStoreUserStats2_Stats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientStoreUserStats2.Stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientStoreUserStats2.Stats)
    MergeFrom(*source);
  }
}

void CMsgClientStoreUserStats2_Stats::MergeFrom(const CMsgClientStoreUserStats2_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientStoreUserStats2.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      stat_id_ = from.stat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_value_ = from.stat_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStoreUserStats2_Stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientStoreUserStats2.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStoreUserStats2_Stats::CopyFrom(const CMsgClientStoreUserStats2_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientStoreUserStats2.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStats2_Stats::IsInitialized() const {
  return true;
}

void CMsgClientStoreUserStats2_Stats::Swap(CMsgClientStoreUserStats2_Stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientStoreUserStats2_Stats::InternalSwap(CMsgClientStoreUserStats2_Stats* other) {
  std::swap(stat_id_, other->stat_id_);
  std::swap(stat_value_, other->stat_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientStoreUserStats2_Stats::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientStoreUserStats2_Stats

// optional uint32 stat_id = 1;
bool CMsgClientStoreUserStats2_Stats::has_stat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientStoreUserStats2_Stats::set_has_stat_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientStoreUserStats2_Stats::clear_has_stat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientStoreUserStats2_Stats::clear_stat_id() {
  stat_id_ = 0u;
  clear_has_stat_id();
}
::google::protobuf::uint32 CMsgClientStoreUserStats2_Stats::stat_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStoreUserStats2.Stats.stat_id)
  return stat_id_;
}
void CMsgClientStoreUserStats2_Stats::set_stat_id(::google::protobuf::uint32 value) {
  set_has_stat_id();
  stat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStoreUserStats2.Stats.stat_id)
}

// optional uint32 stat_value = 2;
bool CMsgClientStoreUserStats2_Stats::has_stat_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientStoreUserStats2_Stats::set_has_stat_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientStoreUserStats2_Stats::clear_has_stat_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientStoreUserStats2_Stats::clear_stat_value() {
  stat_value_ = 0u;
  clear_has_stat_value();
}
::google::protobuf::uint32 CMsgClientStoreUserStats2_Stats::stat_value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStoreUserStats2.Stats.stat_value)
  return stat_value_;
}
void CMsgClientStoreUserStats2_Stats::set_stat_value(::google::protobuf::uint32 value) {
  set_has_stat_value();
  stat_value_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStoreUserStats2.Stats.stat_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientStoreUserStats2::kGameIdFieldNumber;
const int CMsgClientStoreUserStats2::kSettorSteamIdFieldNumber;
const int CMsgClientStoreUserStats2::kSetteeSteamIdFieldNumber;
const int CMsgClientStoreUserStats2::kCrcStatsFieldNumber;
const int CMsgClientStoreUserStats2::kExplicitResetFieldNumber;
const int CMsgClientStoreUserStats2::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientStoreUserStats2::CMsgClientStoreUserStats2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientStoreUserStats2)
}
CMsgClientStoreUserStats2::CMsgClientStoreUserStats2(const CMsgClientStoreUserStats2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    reinterpret_cast<char*>(&explicit_reset_) -
    reinterpret_cast<char*>(&game_id_) + sizeof(explicit_reset_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientStoreUserStats2)
}

void CMsgClientStoreUserStats2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&game_id_, 0, reinterpret_cast<char*>(&explicit_reset_) -
    reinterpret_cast<char*>(&game_id_) + sizeof(explicit_reset_));
}

CMsgClientStoreUserStats2::~CMsgClientStoreUserStats2() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientStoreUserStats2)
  SharedDtor();
}

void CMsgClientStoreUserStats2::SharedDtor() {
}

void CMsgClientStoreUserStats2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientStoreUserStats2::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientStoreUserStats2& CMsgClientStoreUserStats2::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientStoreUserStats2* CMsgClientStoreUserStats2::New(::google::protobuf::Arena* arena) const {
  CMsgClientStoreUserStats2* n = new CMsgClientStoreUserStats2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientStoreUserStats2::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientStoreUserStats2)
  stats_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&game_id_, 0, reinterpret_cast<char*>(&explicit_reset_) -
      reinterpret_cast<char*>(&game_id_) + sizeof(explicit_reset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientStoreUserStats2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientStoreUserStats2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 game_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 settor_steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_settor_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &settor_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 settee_steam_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_settee_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &settee_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crc_stats = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_crc_stats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_stats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool explicit_reset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_explicit_reset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &explicit_reset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientStoreUserStats2.Stats stats = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientStoreUserStats2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientStoreUserStats2)
  return false;
#undef DO_
}

void CMsgClientStoreUserStats2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientStoreUserStats2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->game_id(), output);
  }

  // optional fixed64 settor_steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->settor_steam_id(), output);
  }

  // optional fixed64 settee_steam_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->settee_steam_id(), output);
  }

  // optional uint32 crc_stats = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crc_stats(), output);
  }

  // optional bool explicit_reset = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->explicit_reset(), output);
  }

  // repeated .proto.steam.CMsgClientStoreUserStats2.Stats stats = 6;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientStoreUserStats2)
}

::google::protobuf::uint8* CMsgClientStoreUserStats2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientStoreUserStats2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->game_id(), target);
  }

  // optional fixed64 settor_steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->settor_steam_id(), target);
  }

  // optional fixed64 settee_steam_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->settee_steam_id(), target);
  }

  // optional uint32 crc_stats = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crc_stats(), target);
  }

  // optional bool explicit_reset = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->explicit_reset(), target);
  }

  // repeated .proto.steam.CMsgClientStoreUserStats2.Stats stats = 6;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->stats(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientStoreUserStats2)
  return target;
}

size_t CMsgClientStoreUserStats2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientStoreUserStats2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientStoreUserStats2.Stats stats = 6;
  {
    unsigned int count = this->stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional fixed64 game_id = 1;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 settor_steam_id = 2;
    if (has_settor_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 settee_steam_id = 3;
    if (has_settee_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 crc_stats = 4;
    if (has_crc_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc_stats());
    }

    // optional bool explicit_reset = 5;
    if (has_explicit_reset()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientStoreUserStats2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientStoreUserStats2)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStoreUserStats2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientStoreUserStats2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientStoreUserStats2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientStoreUserStats2)
    MergeFrom(*source);
  }
}

void CMsgClientStoreUserStats2::MergeFrom(const CMsgClientStoreUserStats2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientStoreUserStats2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      settor_steam_id_ = from.settor_steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      settee_steam_id_ = from.settee_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      crc_stats_ = from.crc_stats_;
    }
    if (cached_has_bits & 0x00000010u) {
      explicit_reset_ = from.explicit_reset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStoreUserStats2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientStoreUserStats2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStoreUserStats2::CopyFrom(const CMsgClientStoreUserStats2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientStoreUserStats2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStats2::IsInitialized() const {
  return true;
}

void CMsgClientStoreUserStats2::Swap(CMsgClientStoreUserStats2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientStoreUserStats2::InternalSwap(CMsgClientStoreUserStats2* other) {
  stats_.InternalSwap(&other->stats_);
  std::swap(game_id_, other->game_id_);
  std::swap(settor_steam_id_, other->settor_steam_id_);
  std::swap(settee_steam_id_, other->settee_steam_id_);
  std::swap(crc_stats_, other->crc_stats_);
  std::swap(explicit_reset_, other->explicit_reset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientStoreUserStats2::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientStoreUserStats2

// optional fixed64 game_id = 1;
bool CMsgClientStoreUserStats2::has_game_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientStoreUserStats2::set_has_game_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientStoreUserStats2::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientStoreUserStats2::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_id();
}
::google::protobuf::uint64 CMsgClientStoreUserStats2::game_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStoreUserStats2.game_id)
  return game_id_;
}
void CMsgClientStoreUserStats2::set_game_id(::google::protobuf::uint64 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStoreUserStats2.game_id)
}

// optional fixed64 settor_steam_id = 2;
bool CMsgClientStoreUserStats2::has_settor_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientStoreUserStats2::set_has_settor_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientStoreUserStats2::clear_has_settor_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientStoreUserStats2::clear_settor_steam_id() {
  settor_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_settor_steam_id();
}
::google::protobuf::uint64 CMsgClientStoreUserStats2::settor_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStoreUserStats2.settor_steam_id)
  return settor_steam_id_;
}
void CMsgClientStoreUserStats2::set_settor_steam_id(::google::protobuf::uint64 value) {
  set_has_settor_steam_id();
  settor_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStoreUserStats2.settor_steam_id)
}

// optional fixed64 settee_steam_id = 3;
bool CMsgClientStoreUserStats2::has_settee_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientStoreUserStats2::set_has_settee_steam_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientStoreUserStats2::clear_has_settee_steam_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientStoreUserStats2::clear_settee_steam_id() {
  settee_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_settee_steam_id();
}
::google::protobuf::uint64 CMsgClientStoreUserStats2::settee_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStoreUserStats2.settee_steam_id)
  return settee_steam_id_;
}
void CMsgClientStoreUserStats2::set_settee_steam_id(::google::protobuf::uint64 value) {
  set_has_settee_steam_id();
  settee_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStoreUserStats2.settee_steam_id)
}

// optional uint32 crc_stats = 4;
bool CMsgClientStoreUserStats2::has_crc_stats() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientStoreUserStats2::set_has_crc_stats() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientStoreUserStats2::clear_has_crc_stats() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientStoreUserStats2::clear_crc_stats() {
  crc_stats_ = 0u;
  clear_has_crc_stats();
}
::google::protobuf::uint32 CMsgClientStoreUserStats2::crc_stats() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStoreUserStats2.crc_stats)
  return crc_stats_;
}
void CMsgClientStoreUserStats2::set_crc_stats(::google::protobuf::uint32 value) {
  set_has_crc_stats();
  crc_stats_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStoreUserStats2.crc_stats)
}

// optional bool explicit_reset = 5;
bool CMsgClientStoreUserStats2::has_explicit_reset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientStoreUserStats2::set_has_explicit_reset() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientStoreUserStats2::clear_has_explicit_reset() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientStoreUserStats2::clear_explicit_reset() {
  explicit_reset_ = false;
  clear_has_explicit_reset();
}
bool CMsgClientStoreUserStats2::explicit_reset() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStoreUserStats2.explicit_reset)
  return explicit_reset_;
}
void CMsgClientStoreUserStats2::set_explicit_reset(bool value) {
  set_has_explicit_reset();
  explicit_reset_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStoreUserStats2.explicit_reset)
}

// repeated .proto.steam.CMsgClientStoreUserStats2.Stats stats = 6;
int CMsgClientStoreUserStats2::stats_size() const {
  return stats_.size();
}
void CMsgClientStoreUserStats2::clear_stats() {
  stats_.Clear();
}
const ::proto::steam::CMsgClientStoreUserStats2_Stats& CMsgClientStoreUserStats2::stats(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStoreUserStats2.stats)
  return stats_.Get(index);
}
::proto::steam::CMsgClientStoreUserStats2_Stats* CMsgClientStoreUserStats2::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientStoreUserStats2.stats)
  return stats_.Mutable(index);
}
::proto::steam::CMsgClientStoreUserStats2_Stats* CMsgClientStoreUserStats2::add_stats() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientStoreUserStats2.stats)
  return stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientStoreUserStats2_Stats >*
CMsgClientStoreUserStats2::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientStoreUserStats2.stats)
  return &stats_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientStoreUserStats2_Stats >&
CMsgClientStoreUserStats2::stats() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientStoreUserStats2.stats)
  return stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientStatsUpdated_Updated_Stats::kStatIdFieldNumber;
const int CMsgClientStatsUpdated_Updated_Stats::kStatValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientStatsUpdated_Updated_Stats::CMsgClientStatsUpdated_Updated_Stats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
}
CMsgClientStatsUpdated_Updated_Stats::CMsgClientStatsUpdated_Updated_Stats(const CMsgClientStatsUpdated_Updated_Stats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stat_id_, &from.stat_id_,
    reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_) + sizeof(stat_value_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
}

void CMsgClientStatsUpdated_Updated_Stats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stat_id_, 0, reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_) + sizeof(stat_value_));
}

CMsgClientStatsUpdated_Updated_Stats::~CMsgClientStatsUpdated_Updated_Stats() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  SharedDtor();
}

void CMsgClientStatsUpdated_Updated_Stats::SharedDtor() {
}

void CMsgClientStatsUpdated_Updated_Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientStatsUpdated_Updated_Stats::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientStatsUpdated_Updated_Stats& CMsgClientStatsUpdated_Updated_Stats::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientStatsUpdated_Updated_Stats* CMsgClientStatsUpdated_Updated_Stats::New(::google::protobuf::Arena* arena) const {
  CMsgClientStatsUpdated_Updated_Stats* n = new CMsgClientStatsUpdated_Updated_Stats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientStatsUpdated_Updated_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&stat_id_, 0, reinterpret_cast<char*>(&stat_value_) -
      reinterpret_cast<char*>(&stat_id_) + sizeof(stat_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientStatsUpdated_Updated_Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_stat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stat_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_stat_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  return false;
#undef DO_
}

void CMsgClientStatsUpdated_Updated_Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stat_id(), output);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
}

::google::protobuf::uint8* CMsgClientStatsUpdated_Updated_Stats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stat_id(), target);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stat_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  return target;
}

size_t CMsgClientStatsUpdated_Updated_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 stat_id = 1;
    if (has_stat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_id());
    }

    // optional uint32 stat_value = 2;
    if (has_stat_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientStatsUpdated_Updated_Stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStatsUpdated_Updated_Stats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientStatsUpdated_Updated_Stats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
    MergeFrom(*source);
  }
}

void CMsgClientStatsUpdated_Updated_Stats::MergeFrom(const CMsgClientStatsUpdated_Updated_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      stat_id_ = from.stat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_value_ = from.stat_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStatsUpdated_Updated_Stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStatsUpdated_Updated_Stats::CopyFrom(const CMsgClientStatsUpdated_Updated_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientStatsUpdated.Updated_Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStatsUpdated_Updated_Stats::IsInitialized() const {
  return true;
}

void CMsgClientStatsUpdated_Updated_Stats::Swap(CMsgClientStatsUpdated_Updated_Stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientStatsUpdated_Updated_Stats::InternalSwap(CMsgClientStatsUpdated_Updated_Stats* other) {
  std::swap(stat_id_, other->stat_id_);
  std::swap(stat_value_, other->stat_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientStatsUpdated_Updated_Stats::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientStatsUpdated_Updated_Stats

// optional uint32 stat_id = 1;
bool CMsgClientStatsUpdated_Updated_Stats::has_stat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientStatsUpdated_Updated_Stats::set_has_stat_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientStatsUpdated_Updated_Stats::clear_has_stat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientStatsUpdated_Updated_Stats::clear_stat_id() {
  stat_id_ = 0u;
  clear_has_stat_id();
}
::google::protobuf::uint32 CMsgClientStatsUpdated_Updated_Stats::stat_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStatsUpdated.Updated_Stats.stat_id)
  return stat_id_;
}
void CMsgClientStatsUpdated_Updated_Stats::set_stat_id(::google::protobuf::uint32 value) {
  set_has_stat_id();
  stat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStatsUpdated.Updated_Stats.stat_id)
}

// optional uint32 stat_value = 2;
bool CMsgClientStatsUpdated_Updated_Stats::has_stat_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientStatsUpdated_Updated_Stats::set_has_stat_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientStatsUpdated_Updated_Stats::clear_has_stat_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientStatsUpdated_Updated_Stats::clear_stat_value() {
  stat_value_ = 0u;
  clear_has_stat_value();
}
::google::protobuf::uint32 CMsgClientStatsUpdated_Updated_Stats::stat_value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStatsUpdated.Updated_Stats.stat_value)
  return stat_value_;
}
void CMsgClientStatsUpdated_Updated_Stats::set_stat_value(::google::protobuf::uint32 value) {
  set_has_stat_value();
  stat_value_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStatsUpdated.Updated_Stats.stat_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientStatsUpdated::kSteamIdFieldNumber;
const int CMsgClientStatsUpdated::kGameIdFieldNumber;
const int CMsgClientStatsUpdated::kCrcStatsFieldNumber;
const int CMsgClientStatsUpdated::kUpdatedStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientStatsUpdated::CMsgClientStatsUpdated()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientStatsUpdated)
}
CMsgClientStatsUpdated::CMsgClientStatsUpdated(const CMsgClientStatsUpdated& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      updated_stats_(from.updated_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&crc_stats_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(crc_stats_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientStatsUpdated)
}

void CMsgClientStatsUpdated::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_, 0, reinterpret_cast<char*>(&crc_stats_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(crc_stats_));
}

CMsgClientStatsUpdated::~CMsgClientStatsUpdated() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientStatsUpdated)
  SharedDtor();
}

void CMsgClientStatsUpdated::SharedDtor() {
}

void CMsgClientStatsUpdated::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientStatsUpdated::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientStatsUpdated& CMsgClientStatsUpdated::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientStatsUpdated* CMsgClientStatsUpdated::New(::google::protobuf::Arena* arena) const {
  CMsgClientStatsUpdated* n = new CMsgClientStatsUpdated;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientStatsUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientStatsUpdated)
  updated_stats_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&crc_stats_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(crc_stats_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientStatsUpdated::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientStatsUpdated)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 game_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crc_stats = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_crc_stats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_stats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientStatsUpdated.Updated_Stats updated_stats = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updated_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientStatsUpdated)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientStatsUpdated)
  return false;
#undef DO_
}

void CMsgClientStatsUpdated::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientStatsUpdated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->game_id(), output);
  }

  // optional uint32 crc_stats = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crc_stats(), output);
  }

  // repeated .proto.steam.CMsgClientStatsUpdated.Updated_Stats updated_stats = 4;
  for (unsigned int i = 0, n = this->updated_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->updated_stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientStatsUpdated)
}

::google::protobuf::uint8* CMsgClientStatsUpdated::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientStatsUpdated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->game_id(), target);
  }

  // optional uint32 crc_stats = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crc_stats(), target);
  }

  // repeated .proto.steam.CMsgClientStatsUpdated.Updated_Stats updated_stats = 4;
  for (unsigned int i = 0, n = this->updated_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->updated_stats(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientStatsUpdated)
  return target;
}

size_t CMsgClientStatsUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientStatsUpdated)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientStatsUpdated.Updated_Stats updated_stats = 4;
  {
    unsigned int count = this->updated_stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updated_stats(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 game_id = 2;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 crc_stats = 3;
    if (has_crc_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc_stats());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientStatsUpdated::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientStatsUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStatsUpdated* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientStatsUpdated>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientStatsUpdated)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientStatsUpdated)
    MergeFrom(*source);
  }
}

void CMsgClientStatsUpdated::MergeFrom(const CMsgClientStatsUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientStatsUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updated_stats_.MergeFrom(from.updated_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      crc_stats_ = from.crc_stats_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStatsUpdated::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientStatsUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStatsUpdated::CopyFrom(const CMsgClientStatsUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientStatsUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStatsUpdated::IsInitialized() const {
  return true;
}

void CMsgClientStatsUpdated::Swap(CMsgClientStatsUpdated* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientStatsUpdated::InternalSwap(CMsgClientStatsUpdated* other) {
  updated_stats_.InternalSwap(&other->updated_stats_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(game_id_, other->game_id_);
  std::swap(crc_stats_, other->crc_stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientStatsUpdated::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientStatsUpdated

// optional fixed64 steam_id = 1;
bool CMsgClientStatsUpdated::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientStatsUpdated::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientStatsUpdated::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientStatsUpdated::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgClientStatsUpdated::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStatsUpdated.steam_id)
  return steam_id_;
}
void CMsgClientStatsUpdated::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStatsUpdated.steam_id)
}

// optional fixed64 game_id = 2;
bool CMsgClientStatsUpdated::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientStatsUpdated::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientStatsUpdated::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientStatsUpdated::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_id();
}
::google::protobuf::uint64 CMsgClientStatsUpdated::game_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStatsUpdated.game_id)
  return game_id_;
}
void CMsgClientStatsUpdated::set_game_id(::google::protobuf::uint64 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStatsUpdated.game_id)
}

// optional uint32 crc_stats = 3;
bool CMsgClientStatsUpdated::has_crc_stats() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientStatsUpdated::set_has_crc_stats() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientStatsUpdated::clear_has_crc_stats() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientStatsUpdated::clear_crc_stats() {
  crc_stats_ = 0u;
  clear_has_crc_stats();
}
::google::protobuf::uint32 CMsgClientStatsUpdated::crc_stats() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStatsUpdated.crc_stats)
  return crc_stats_;
}
void CMsgClientStatsUpdated::set_crc_stats(::google::protobuf::uint32 value) {
  set_has_crc_stats();
  crc_stats_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStatsUpdated.crc_stats)
}

// repeated .proto.steam.CMsgClientStatsUpdated.Updated_Stats updated_stats = 4;
int CMsgClientStatsUpdated::updated_stats_size() const {
  return updated_stats_.size();
}
void CMsgClientStatsUpdated::clear_updated_stats() {
  updated_stats_.Clear();
}
const ::proto::steam::CMsgClientStatsUpdated_Updated_Stats& CMsgClientStatsUpdated::updated_stats(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStatsUpdated.updated_stats)
  return updated_stats_.Get(index);
}
::proto::steam::CMsgClientStatsUpdated_Updated_Stats* CMsgClientStatsUpdated::mutable_updated_stats(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientStatsUpdated.updated_stats)
  return updated_stats_.Mutable(index);
}
::proto::steam::CMsgClientStatsUpdated_Updated_Stats* CMsgClientStatsUpdated::add_updated_stats() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientStatsUpdated.updated_stats)
  return updated_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientStatsUpdated_Updated_Stats >*
CMsgClientStatsUpdated::mutable_updated_stats() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientStatsUpdated.updated_stats)
  return &updated_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientStatsUpdated_Updated_Stats >&
CMsgClientStatsUpdated::updated_stats() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientStatsUpdated.updated_stats)
  return updated_stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientStoreUserStats_Stats_To_Store::kStatIdFieldNumber;
const int CMsgClientStoreUserStats_Stats_To_Store::kStatValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientStoreUserStats_Stats_To_Store::CMsgClientStoreUserStats_Stats_To_Store()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
}
CMsgClientStoreUserStats_Stats_To_Store::CMsgClientStoreUserStats_Stats_To_Store(const CMsgClientStoreUserStats_Stats_To_Store& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stat_id_, &from.stat_id_,
    reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_) + sizeof(stat_value_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
}

void CMsgClientStoreUserStats_Stats_To_Store::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stat_id_, 0, reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_) + sizeof(stat_value_));
}

CMsgClientStoreUserStats_Stats_To_Store::~CMsgClientStoreUserStats_Stats_To_Store() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  SharedDtor();
}

void CMsgClientStoreUserStats_Stats_To_Store::SharedDtor() {
}

void CMsgClientStoreUserStats_Stats_To_Store::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientStoreUserStats_Stats_To_Store::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientStoreUserStats_Stats_To_Store& CMsgClientStoreUserStats_Stats_To_Store::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientStoreUserStats_Stats_To_Store* CMsgClientStoreUserStats_Stats_To_Store::New(::google::protobuf::Arena* arena) const {
  CMsgClientStoreUserStats_Stats_To_Store* n = new CMsgClientStoreUserStats_Stats_To_Store;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientStoreUserStats_Stats_To_Store::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&stat_id_, 0, reinterpret_cast<char*>(&stat_value_) -
      reinterpret_cast<char*>(&stat_id_) + sizeof(stat_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientStoreUserStats_Stats_To_Store::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_stat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stat_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_stat_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  return false;
#undef DO_
}

void CMsgClientStoreUserStats_Stats_To_Store::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stat_id(), output);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
}

::google::protobuf::uint8* CMsgClientStoreUserStats_Stats_To_Store::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stat_id(), target);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stat_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  return target;
}

size_t CMsgClientStoreUserStats_Stats_To_Store::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 stat_id = 1;
    if (has_stat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_id());
    }

    // optional uint32 stat_value = 2;
    if (has_stat_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientStoreUserStats_Stats_To_Store::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStoreUserStats_Stats_To_Store* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientStoreUserStats_Stats_To_Store>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
    MergeFrom(*source);
  }
}

void CMsgClientStoreUserStats_Stats_To_Store::MergeFrom(const CMsgClientStoreUserStats_Stats_To_Store& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      stat_id_ = from.stat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_value_ = from.stat_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStoreUserStats_Stats_To_Store::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStoreUserStats_Stats_To_Store::CopyFrom(const CMsgClientStoreUserStats_Stats_To_Store& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientStoreUserStats.Stats_To_Store)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStats_Stats_To_Store::IsInitialized() const {
  return true;
}

void CMsgClientStoreUserStats_Stats_To_Store::Swap(CMsgClientStoreUserStats_Stats_To_Store* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientStoreUserStats_Stats_To_Store::InternalSwap(CMsgClientStoreUserStats_Stats_To_Store* other) {
  std::swap(stat_id_, other->stat_id_);
  std::swap(stat_value_, other->stat_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientStoreUserStats_Stats_To_Store::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientStoreUserStats_Stats_To_Store

// optional uint32 stat_id = 1;
bool CMsgClientStoreUserStats_Stats_To_Store::has_stat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientStoreUserStats_Stats_To_Store::set_has_stat_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientStoreUserStats_Stats_To_Store::clear_has_stat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientStoreUserStats_Stats_To_Store::clear_stat_id() {
  stat_id_ = 0u;
  clear_has_stat_id();
}
::google::protobuf::uint32 CMsgClientStoreUserStats_Stats_To_Store::stat_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStoreUserStats.Stats_To_Store.stat_id)
  return stat_id_;
}
void CMsgClientStoreUserStats_Stats_To_Store::set_stat_id(::google::protobuf::uint32 value) {
  set_has_stat_id();
  stat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStoreUserStats.Stats_To_Store.stat_id)
}

// optional uint32 stat_value = 2;
bool CMsgClientStoreUserStats_Stats_To_Store::has_stat_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientStoreUserStats_Stats_To_Store::set_has_stat_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientStoreUserStats_Stats_To_Store::clear_has_stat_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientStoreUserStats_Stats_To_Store::clear_stat_value() {
  stat_value_ = 0u;
  clear_has_stat_value();
}
::google::protobuf::uint32 CMsgClientStoreUserStats_Stats_To_Store::stat_value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStoreUserStats.Stats_To_Store.stat_value)
  return stat_value_;
}
void CMsgClientStoreUserStats_Stats_To_Store::set_stat_value(::google::protobuf::uint32 value) {
  set_has_stat_value();
  stat_value_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStoreUserStats.Stats_To_Store.stat_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientStoreUserStats::kGameIdFieldNumber;
const int CMsgClientStoreUserStats::kExplicitResetFieldNumber;
const int CMsgClientStoreUserStats::kStatsToStoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientStoreUserStats::CMsgClientStoreUserStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientStoreUserStats)
}
CMsgClientStoreUserStats::CMsgClientStoreUserStats(const CMsgClientStoreUserStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stats_to_store_(from.stats_to_store_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    reinterpret_cast<char*>(&explicit_reset_) -
    reinterpret_cast<char*>(&game_id_) + sizeof(explicit_reset_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientStoreUserStats)
}

void CMsgClientStoreUserStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&game_id_, 0, reinterpret_cast<char*>(&explicit_reset_) -
    reinterpret_cast<char*>(&game_id_) + sizeof(explicit_reset_));
}

CMsgClientStoreUserStats::~CMsgClientStoreUserStats() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientStoreUserStats)
  SharedDtor();
}

void CMsgClientStoreUserStats::SharedDtor() {
}

void CMsgClientStoreUserStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientStoreUserStats::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientStoreUserStats& CMsgClientStoreUserStats::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientStoreUserStats* CMsgClientStoreUserStats::New(::google::protobuf::Arena* arena) const {
  CMsgClientStoreUserStats* n = new CMsgClientStoreUserStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientStoreUserStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientStoreUserStats)
  stats_to_store_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&game_id_, 0, reinterpret_cast<char*>(&explicit_reset_) -
      reinterpret_cast<char*>(&game_id_) + sizeof(explicit_reset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientStoreUserStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientStoreUserStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 game_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool explicit_reset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_explicit_reset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &explicit_reset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientStoreUserStats.Stats_To_Store stats_to_store = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats_to_store()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientStoreUserStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientStoreUserStats)
  return false;
#undef DO_
}

void CMsgClientStoreUserStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientStoreUserStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->game_id(), output);
  }

  // optional bool explicit_reset = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->explicit_reset(), output);
  }

  // repeated .proto.steam.CMsgClientStoreUserStats.Stats_To_Store stats_to_store = 3;
  for (unsigned int i = 0, n = this->stats_to_store_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stats_to_store(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientStoreUserStats)
}

::google::protobuf::uint8* CMsgClientStoreUserStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientStoreUserStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->game_id(), target);
  }

  // optional bool explicit_reset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->explicit_reset(), target);
  }

  // repeated .proto.steam.CMsgClientStoreUserStats.Stats_To_Store stats_to_store = 3;
  for (unsigned int i = 0, n = this->stats_to_store_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->stats_to_store(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientStoreUserStats)
  return target;
}

size_t CMsgClientStoreUserStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientStoreUserStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientStoreUserStats.Stats_To_Store stats_to_store = 3;
  {
    unsigned int count = this->stats_to_store_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats_to_store(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 game_id = 1;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

    // optional bool explicit_reset = 2;
    if (has_explicit_reset()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientStoreUserStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientStoreUserStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStoreUserStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientStoreUserStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientStoreUserStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientStoreUserStats)
    MergeFrom(*source);
  }
}

void CMsgClientStoreUserStats::MergeFrom(const CMsgClientStoreUserStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientStoreUserStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_to_store_.MergeFrom(from.stats_to_store_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      explicit_reset_ = from.explicit_reset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStoreUserStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientStoreUserStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStoreUserStats::CopyFrom(const CMsgClientStoreUserStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientStoreUserStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStats::IsInitialized() const {
  return true;
}

void CMsgClientStoreUserStats::Swap(CMsgClientStoreUserStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientStoreUserStats::InternalSwap(CMsgClientStoreUserStats* other) {
  stats_to_store_.InternalSwap(&other->stats_to_store_);
  std::swap(game_id_, other->game_id_);
  std::swap(explicit_reset_, other->explicit_reset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientStoreUserStats::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientStoreUserStats

// optional fixed64 game_id = 1;
bool CMsgClientStoreUserStats::has_game_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientStoreUserStats::set_has_game_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientStoreUserStats::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientStoreUserStats::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_id();
}
::google::protobuf::uint64 CMsgClientStoreUserStats::game_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStoreUserStats.game_id)
  return game_id_;
}
void CMsgClientStoreUserStats::set_game_id(::google::protobuf::uint64 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStoreUserStats.game_id)
}

// optional bool explicit_reset = 2;
bool CMsgClientStoreUserStats::has_explicit_reset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientStoreUserStats::set_has_explicit_reset() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientStoreUserStats::clear_has_explicit_reset() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientStoreUserStats::clear_explicit_reset() {
  explicit_reset_ = false;
  clear_has_explicit_reset();
}
bool CMsgClientStoreUserStats::explicit_reset() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStoreUserStats.explicit_reset)
  return explicit_reset_;
}
void CMsgClientStoreUserStats::set_explicit_reset(bool value) {
  set_has_explicit_reset();
  explicit_reset_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientStoreUserStats.explicit_reset)
}

// repeated .proto.steam.CMsgClientStoreUserStats.Stats_To_Store stats_to_store = 3;
int CMsgClientStoreUserStats::stats_to_store_size() const {
  return stats_to_store_.size();
}
void CMsgClientStoreUserStats::clear_stats_to_store() {
  stats_to_store_.Clear();
}
const ::proto::steam::CMsgClientStoreUserStats_Stats_To_Store& CMsgClientStoreUserStats::stats_to_store(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientStoreUserStats.stats_to_store)
  return stats_to_store_.Get(index);
}
::proto::steam::CMsgClientStoreUserStats_Stats_To_Store* CMsgClientStoreUserStats::mutable_stats_to_store(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientStoreUserStats.stats_to_store)
  return stats_to_store_.Mutable(index);
}
::proto::steam::CMsgClientStoreUserStats_Stats_To_Store* CMsgClientStoreUserStats::add_stats_to_store() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientStoreUserStats.stats_to_store)
  return stats_to_store_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientStoreUserStats_Stats_To_Store >*
CMsgClientStoreUserStats::mutable_stats_to_store() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientStoreUserStats.stats_to_store)
  return &stats_to_store_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientStoreUserStats_Stats_To_Store >&
CMsgClientStoreUserStats::stats_to_store() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientStoreUserStats.stats_to_store)
  return stats_to_store_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetClientDetails::CMsgClientGetClientDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetClientDetails)
}
CMsgClientGetClientDetails::CMsgClientGetClientDetails(const CMsgClientGetClientDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetClientDetails)
}

void CMsgClientGetClientDetails::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClientGetClientDetails::~CMsgClientGetClientDetails() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetClientDetails)
  SharedDtor();
}

void CMsgClientGetClientDetails::SharedDtor() {
}

void CMsgClientGetClientDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetClientDetails::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientGetClientDetails& CMsgClientGetClientDetails::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientGetClientDetails* CMsgClientGetClientDetails::New(::google::protobuf::Arena* arena) const {
  CMsgClientGetClientDetails* n = new CMsgClientGetClientDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientGetClientDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetClientDetails)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientGetClientDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetClientDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetClientDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetClientDetails)
  return false;
#undef DO_
}

void CMsgClientGetClientDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetClientDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetClientDetails)
}

::google::protobuf::uint8* CMsgClientGetClientDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetClientDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetClientDetails)
  return target;
}

size_t CMsgClientGetClientDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetClientDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetClientDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetClientDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetClientDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientGetClientDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetClientDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetClientDetails)
    MergeFrom(*source);
  }
}

void CMsgClientGetClientDetails::MergeFrom(const CMsgClientGetClientDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetClientDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClientGetClientDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetClientDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetClientDetails::CopyFrom(const CMsgClientGetClientDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetClientDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientDetails::IsInitialized() const {
  return true;
}

void CMsgClientGetClientDetails::Swap(CMsgClientGetClientDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetClientDetails::InternalSwap(CMsgClientGetClientDetails* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientGetClientDetails::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientGetClientDetails

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientReportOverlayDetourFailure::kFailureStringsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientReportOverlayDetourFailure::CMsgClientReportOverlayDetourFailure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientReportOverlayDetourFailure)
}
CMsgClientReportOverlayDetourFailure::CMsgClientReportOverlayDetourFailure(const CMsgClientReportOverlayDetourFailure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      failure_strings_(from.failure_strings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientReportOverlayDetourFailure)
}

void CMsgClientReportOverlayDetourFailure::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClientReportOverlayDetourFailure::~CMsgClientReportOverlayDetourFailure() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientReportOverlayDetourFailure)
  SharedDtor();
}

void CMsgClientReportOverlayDetourFailure::SharedDtor() {
}

void CMsgClientReportOverlayDetourFailure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientReportOverlayDetourFailure::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientReportOverlayDetourFailure& CMsgClientReportOverlayDetourFailure::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientReportOverlayDetourFailure* CMsgClientReportOverlayDetourFailure::New(::google::protobuf::Arena* arena) const {
  CMsgClientReportOverlayDetourFailure* n = new CMsgClientReportOverlayDetourFailure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientReportOverlayDetourFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientReportOverlayDetourFailure)
  failure_strings_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientReportOverlayDetourFailure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientReportOverlayDetourFailure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string failure_strings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_failure_strings()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->failure_strings(this->failure_strings_size() - 1).data(),
            this->failure_strings(this->failure_strings_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientReportOverlayDetourFailure.failure_strings");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientReportOverlayDetourFailure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientReportOverlayDetourFailure)
  return false;
#undef DO_
}

void CMsgClientReportOverlayDetourFailure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientReportOverlayDetourFailure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string failure_strings = 1;
  for (int i = 0, n = this->failure_strings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failure_strings(i).data(), this->failure_strings(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientReportOverlayDetourFailure.failure_strings");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->failure_strings(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientReportOverlayDetourFailure)
}

::google::protobuf::uint8* CMsgClientReportOverlayDetourFailure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientReportOverlayDetourFailure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string failure_strings = 1;
  for (int i = 0, n = this->failure_strings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failure_strings(i).data(), this->failure_strings(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientReportOverlayDetourFailure.failure_strings");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->failure_strings(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientReportOverlayDetourFailure)
  return target;
}

size_t CMsgClientReportOverlayDetourFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientReportOverlayDetourFailure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string failure_strings = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->failure_strings_size());
  for (int i = 0, n = this->failure_strings_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->failure_strings(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientReportOverlayDetourFailure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientReportOverlayDetourFailure)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientReportOverlayDetourFailure* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientReportOverlayDetourFailure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientReportOverlayDetourFailure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientReportOverlayDetourFailure)
    MergeFrom(*source);
  }
}

void CMsgClientReportOverlayDetourFailure::MergeFrom(const CMsgClientReportOverlayDetourFailure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientReportOverlayDetourFailure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  failure_strings_.MergeFrom(from.failure_strings_);
}

void CMsgClientReportOverlayDetourFailure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientReportOverlayDetourFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientReportOverlayDetourFailure::CopyFrom(const CMsgClientReportOverlayDetourFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientReportOverlayDetourFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientReportOverlayDetourFailure::IsInitialized() const {
  return true;
}

void CMsgClientReportOverlayDetourFailure::Swap(CMsgClientReportOverlayDetourFailure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientReportOverlayDetourFailure::InternalSwap(CMsgClientReportOverlayDetourFailure* other) {
  failure_strings_.InternalSwap(&other->failure_strings_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientReportOverlayDetourFailure::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientReportOverlayDetourFailure

// repeated string failure_strings = 1;
int CMsgClientReportOverlayDetourFailure::failure_strings_size() const {
  return failure_strings_.size();
}
void CMsgClientReportOverlayDetourFailure::clear_failure_strings() {
  failure_strings_.Clear();
}
const ::std::string& CMsgClientReportOverlayDetourFailure::failure_strings(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientReportOverlayDetourFailure.failure_strings)
  return failure_strings_.Get(index);
}
::std::string* CMsgClientReportOverlayDetourFailure::mutable_failure_strings(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientReportOverlayDetourFailure.failure_strings)
  return failure_strings_.Mutable(index);
}
void CMsgClientReportOverlayDetourFailure::set_failure_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientReportOverlayDetourFailure.failure_strings)
  failure_strings_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CMsgClientReportOverlayDetourFailure::set_failure_strings(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientReportOverlayDetourFailure.failure_strings)
  failure_strings_.Mutable(index)->assign(std::move(value));
}
#endif
void CMsgClientReportOverlayDetourFailure::set_failure_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  failure_strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientReportOverlayDetourFailure.failure_strings)
}
void CMsgClientReportOverlayDetourFailure::set_failure_strings(int index, const char* value, size_t size) {
  failure_strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientReportOverlayDetourFailure.failure_strings)
}
::std::string* CMsgClientReportOverlayDetourFailure::add_failure_strings() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CMsgClientReportOverlayDetourFailure.failure_strings)
  return failure_strings_.Add();
}
void CMsgClientReportOverlayDetourFailure::add_failure_strings(const ::std::string& value) {
  failure_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientReportOverlayDetourFailure.failure_strings)
}
#if LANG_CXX11
void CMsgClientReportOverlayDetourFailure::add_failure_strings(::std::string&& value) {
  failure_strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientReportOverlayDetourFailure.failure_strings)
}
#endif
void CMsgClientReportOverlayDetourFailure::add_failure_strings(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  failure_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CMsgClientReportOverlayDetourFailure.failure_strings)
}
void CMsgClientReportOverlayDetourFailure::add_failure_strings(const char* value, size_t size) {
  failure_strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CMsgClientReportOverlayDetourFailure.failure_strings)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgClientReportOverlayDetourFailure::failure_strings() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientReportOverlayDetourFailure.failure_strings)
  return failure_strings_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgClientReportOverlayDetourFailure::mutable_failure_strings() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientReportOverlayDetourFailure.failure_strings)
  return &failure_strings_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetClientDetailsResponse_Game::kAppidFieldNumber;
const int CMsgClientGetClientDetailsResponse_Game::kExtraInfoFieldNumber;
const int CMsgClientGetClientDetailsResponse_Game::kTimeRunningSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetClientDetailsResponse_Game::CMsgClientGetClientDetailsResponse_Game()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetClientDetailsResponse.Game)
}
CMsgClientGetClientDetailsResponse_Game::CMsgClientGetClientDetailsResponse_Game(const CMsgClientGetClientDetailsResponse_Game& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extra_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extra_info()) {
    extra_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_info_);
  }
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&time_running_sec_) -
    reinterpret_cast<char*>(&appid_) + sizeof(time_running_sec_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetClientDetailsResponse.Game)
}

void CMsgClientGetClientDetailsResponse_Game::SharedCtor() {
  _cached_size_ = 0;
  extra_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, reinterpret_cast<char*>(&time_running_sec_) -
    reinterpret_cast<char*>(&appid_) + sizeof(time_running_sec_));
}

CMsgClientGetClientDetailsResponse_Game::~CMsgClientGetClientDetailsResponse_Game() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  SharedDtor();
}

void CMsgClientGetClientDetailsResponse_Game::SharedDtor() {
  extra_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientGetClientDetailsResponse_Game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetClientDetailsResponse_Game::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientGetClientDetailsResponse_Game& CMsgClientGetClientDetailsResponse_Game::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientGetClientDetailsResponse_Game* CMsgClientGetClientDetailsResponse_Game::New(::google::protobuf::Arena* arena) const {
  CMsgClientGetClientDetailsResponse_Game* n = new CMsgClientGetClientDetailsResponse_Game;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientGetClientDetailsResponse_Game::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  if (has_extra_info()) {
    GOOGLE_DCHECK(!extra_info_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*extra_info_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&time_running_sec_) -
      reinterpret_cast<char*>(&appid_) + sizeof(time_running_sec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientGetClientDetailsResponse_Game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string extra_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extra_info().data(), this->extra_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientGetClientDetailsResponse.Game.extra_info");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_running_sec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_time_running_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_running_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  return false;
#undef DO_
}

void CMsgClientGetClientDetailsResponse_Game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string extra_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra_info().data(), this->extra_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientDetailsResponse.Game.extra_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->extra_info(), output);
  }

  // optional uint32 time_running_sec = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_running_sec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetClientDetailsResponse.Game)
}

::google::protobuf::uint8* CMsgClientGetClientDetailsResponse_Game::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string extra_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra_info().data(), this->extra_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientDetailsResponse.Game.extra_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->extra_info(), target);
  }

  // optional uint32 time_running_sec = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_running_sec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  return target;
}

size_t CMsgClientGetClientDetailsResponse_Game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string extra_info = 2;
    if (has_extra_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra_info());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 time_running_sec = 3;
    if (has_time_running_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_running_sec());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetClientDetailsResponse_Game::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetClientDetailsResponse_Game* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientGetClientDetailsResponse_Game>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetClientDetailsResponse.Game)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetClientDetailsResponse.Game)
    MergeFrom(*source);
  }
}

void CMsgClientGetClientDetailsResponse_Game::MergeFrom(const CMsgClientGetClientDetailsResponse_Game& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_extra_info();
      extra_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_info_);
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_running_sec_ = from.time_running_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGetClientDetailsResponse_Game::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetClientDetailsResponse_Game::CopyFrom(const CMsgClientGetClientDetailsResponse_Game& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetClientDetailsResponse.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientDetailsResponse_Game::IsInitialized() const {
  return true;
}

void CMsgClientGetClientDetailsResponse_Game::Swap(CMsgClientGetClientDetailsResponse_Game* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetClientDetailsResponse_Game::InternalSwap(CMsgClientGetClientDetailsResponse_Game* other) {
  extra_info_.Swap(&other->extra_info_);
  std::swap(appid_, other->appid_);
  std::swap(time_running_sec_, other->time_running_sec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientGetClientDetailsResponse_Game::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientGetClientDetailsResponse_Game

// optional uint32 appid = 1;
bool CMsgClientGetClientDetailsResponse_Game::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientGetClientDetailsResponse_Game::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientGetClientDetailsResponse_Game::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientGetClientDetailsResponse_Game::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CMsgClientGetClientDetailsResponse_Game::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientDetailsResponse.Game.appid)
  return appid_;
}
void CMsgClientGetClientDetailsResponse_Game::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientDetailsResponse.Game.appid)
}

// optional string extra_info = 2;
bool CMsgClientGetClientDetailsResponse_Game::has_extra_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientGetClientDetailsResponse_Game::set_has_extra_info() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientGetClientDetailsResponse_Game::clear_has_extra_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientGetClientDetailsResponse_Game::clear_extra_info() {
  extra_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extra_info();
}
const ::std::string& CMsgClientGetClientDetailsResponse_Game::extra_info() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientDetailsResponse.Game.extra_info)
  return extra_info_.GetNoArena();
}
void CMsgClientGetClientDetailsResponse_Game::set_extra_info(const ::std::string& value) {
  set_has_extra_info();
  extra_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientDetailsResponse.Game.extra_info)
}
#if LANG_CXX11
void CMsgClientGetClientDetailsResponse_Game::set_extra_info(::std::string&& value) {
  set_has_extra_info();
  extra_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientGetClientDetailsResponse.Game.extra_info)
}
#endif
void CMsgClientGetClientDetailsResponse_Game::set_extra_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extra_info();
  extra_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientGetClientDetailsResponse.Game.extra_info)
}
void CMsgClientGetClientDetailsResponse_Game::set_extra_info(const char* value, size_t size) {
  set_has_extra_info();
  extra_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientGetClientDetailsResponse.Game.extra_info)
}
::std::string* CMsgClientGetClientDetailsResponse_Game::mutable_extra_info() {
  set_has_extra_info();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientGetClientDetailsResponse.Game.extra_info)
  return extra_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientGetClientDetailsResponse_Game::release_extra_info() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientGetClientDetailsResponse.Game.extra_info)
  clear_has_extra_info();
  return extra_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientGetClientDetailsResponse_Game::set_allocated_extra_info(::std::string* extra_info) {
  if (extra_info != NULL) {
    set_has_extra_info();
  } else {
    clear_has_extra_info();
  }
  extra_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra_info);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientGetClientDetailsResponse.Game.extra_info)
}

// optional uint32 time_running_sec = 3;
bool CMsgClientGetClientDetailsResponse_Game::has_time_running_sec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientGetClientDetailsResponse_Game::set_has_time_running_sec() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientGetClientDetailsResponse_Game::clear_has_time_running_sec() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientGetClientDetailsResponse_Game::clear_time_running_sec() {
  time_running_sec_ = 0u;
  clear_has_time_running_sec();
}
::google::protobuf::uint32 CMsgClientGetClientDetailsResponse_Game::time_running_sec() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientDetailsResponse.Game.time_running_sec)
  return time_running_sec_;
}
void CMsgClientGetClientDetailsResponse_Game::set_time_running_sec(::google::protobuf::uint32 value) {
  set_has_time_running_sec();
  time_running_sec_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientDetailsResponse.Game.time_running_sec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetClientDetailsResponse::kPackageVersionFieldNumber;
const int CMsgClientGetClientDetailsResponse::kProtocolVersionFieldNumber;
const int CMsgClientGetClientDetailsResponse::kOsFieldNumber;
const int CMsgClientGetClientDetailsResponse::kMachineNameFieldNumber;
const int CMsgClientGetClientDetailsResponse::kIpPublicFieldNumber;
const int CMsgClientGetClientDetailsResponse::kIpPrivateFieldNumber;
const int CMsgClientGetClientDetailsResponse::kBytesAvailableFieldNumber;
const int CMsgClientGetClientDetailsResponse::kGamesRunningFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetClientDetailsResponse::CMsgClientGetClientDetailsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetClientDetailsResponse)
}
CMsgClientGetClientDetailsResponse::CMsgClientGetClientDetailsResponse(const CMsgClientGetClientDetailsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      games_running_(from.games_running_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  os_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_os()) {
    os_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_);
  }
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_name()) {
    machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
  }
  ip_public_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip_public()) {
    ip_public_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_public_);
  }
  ip_private_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip_private()) {
    ip_private_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_private_);
  }
  ::memcpy(&package_version_, &from.package_version_,
    reinterpret_cast<char*>(&bytes_available_) -
    reinterpret_cast<char*>(&package_version_) + sizeof(bytes_available_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetClientDetailsResponse)
}

void CMsgClientGetClientDetailsResponse::SharedCtor() {
  _cached_size_ = 0;
  os_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_public_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_private_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&package_version_, 0, reinterpret_cast<char*>(&bytes_available_) -
    reinterpret_cast<char*>(&package_version_) + sizeof(bytes_available_));
}

CMsgClientGetClientDetailsResponse::~CMsgClientGetClientDetailsResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetClientDetailsResponse)
  SharedDtor();
}

void CMsgClientGetClientDetailsResponse::SharedDtor() {
  os_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_public_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_private_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientGetClientDetailsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetClientDetailsResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientGetClientDetailsResponse& CMsgClientGetClientDetailsResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientGetClientDetailsResponse* CMsgClientGetClientDetailsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientGetClientDetailsResponse* n = new CMsgClientGetClientDetailsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientGetClientDetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetClientDetailsResponse)
  games_running_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_os()) {
      GOOGLE_DCHECK(!os_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*os_.UnsafeRawStringPointer())->clear();
    }
    if (has_machine_name()) {
      GOOGLE_DCHECK(!machine_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*machine_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_ip_public()) {
      GOOGLE_DCHECK(!ip_public_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_public_.UnsafeRawStringPointer())->clear();
    }
    if (has_ip_private()) {
      GOOGLE_DCHECK(!ip_private_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_private_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 112u) {
    ::memset(&package_version_, 0, reinterpret_cast<char*>(&bytes_available_) -
      reinterpret_cast<char*>(&package_version_) + sizeof(bytes_available_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientGetClientDetailsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetClientDetailsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 package_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_package_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string os = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientGetClientDetailsResponse.os");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string machine_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_name().data(), this->machine_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientGetClientDetailsResponse.machine_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip_public = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_public()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_public().data(), this->ip_public().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientGetClientDetailsResponse.ip_public");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip_private = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_private()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_private().data(), this->ip_private().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientGetClientDetailsResponse.ip_private");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientGetClientDetailsResponse.Game games_running = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_games_running()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_available = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_bytes_available();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 protocol_version = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetClientDetailsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetClientDetailsResponse)
  return false;
#undef DO_
}

void CMsgClientGetClientDetailsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetClientDetailsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 package_version = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->package_version(), output);
  }

  // optional string os = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientDetailsResponse.os");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->os(), output);
  }

  // optional string machine_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), this->machine_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientDetailsResponse.machine_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->machine_name(), output);
  }

  // optional string ip_public = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_public().data(), this->ip_public().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientDetailsResponse.ip_public");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ip_public(), output);
  }

  // optional string ip_private = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_private().data(), this->ip_private().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientDetailsResponse.ip_private");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ip_private(), output);
  }

  // repeated .proto.steam.CMsgClientGetClientDetailsResponse.Game games_running = 6;
  for (unsigned int i = 0, n = this->games_running_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->games_running(i), output);
  }

  // optional uint64 bytes_available = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->bytes_available(), output);
  }

  // optional uint32 protocol_version = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->protocol_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetClientDetailsResponse)
}

::google::protobuf::uint8* CMsgClientGetClientDetailsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetClientDetailsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 package_version = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->package_version(), target);
  }

  // optional string os = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientDetailsResponse.os");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->os(), target);
  }

  // optional string machine_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), this->machine_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientDetailsResponse.machine_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->machine_name(), target);
  }

  // optional string ip_public = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_public().data(), this->ip_public().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientDetailsResponse.ip_public");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip_public(), target);
  }

  // optional string ip_private = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_private().data(), this->ip_private().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientDetailsResponse.ip_private");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip_private(), target);
  }

  // repeated .proto.steam.CMsgClientGetClientDetailsResponse.Game games_running = 6;
  for (unsigned int i = 0, n = this->games_running_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->games_running(i), deterministic, target);
  }

  // optional uint64 bytes_available = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->bytes_available(), target);
  }

  // optional uint32 protocol_version = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->protocol_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetClientDetailsResponse)
  return target;
}

size_t CMsgClientGetClientDetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetClientDetailsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientGetClientDetailsResponse.Game games_running = 6;
  {
    unsigned int count = this->games_running_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->games_running(i));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional string os = 2;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string machine_name = 3;
    if (has_machine_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

    // optional string ip_public = 4;
    if (has_ip_public()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_public());
    }

    // optional string ip_private = 5;
    if (has_ip_private()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_private());
    }

    // optional uint32 package_version = 1;
    if (has_package_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_version());
    }

    // optional uint32 protocol_version = 8;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

    // optional uint64 bytes_available = 7;
    if (has_bytes_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_available());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetClientDetailsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetClientDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetClientDetailsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientGetClientDetailsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetClientDetailsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetClientDetailsResponse)
    MergeFrom(*source);
  }
}

void CMsgClientGetClientDetailsResponse::MergeFrom(const CMsgClientGetClientDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetClientDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  games_running_.MergeFrom(from.games_running_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_os();
      os_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_machine_name();
      machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_ip_public();
      ip_public_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_public_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_ip_private();
      ip_private_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_private_);
    }
    if (cached_has_bits & 0x00000010u) {
      package_version_ = from.package_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      protocol_version_ = from.protocol_version_;
    }
    if (cached_has_bits & 0x00000040u) {
      bytes_available_ = from.bytes_available_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGetClientDetailsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetClientDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetClientDetailsResponse::CopyFrom(const CMsgClientGetClientDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetClientDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientDetailsResponse::IsInitialized() const {
  return true;
}

void CMsgClientGetClientDetailsResponse::Swap(CMsgClientGetClientDetailsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetClientDetailsResponse::InternalSwap(CMsgClientGetClientDetailsResponse* other) {
  games_running_.InternalSwap(&other->games_running_);
  os_.Swap(&other->os_);
  machine_name_.Swap(&other->machine_name_);
  ip_public_.Swap(&other->ip_public_);
  ip_private_.Swap(&other->ip_private_);
  std::swap(package_version_, other->package_version_);
  std::swap(protocol_version_, other->protocol_version_);
  std::swap(bytes_available_, other->bytes_available_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientGetClientDetailsResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientGetClientDetailsResponse

// optional uint32 package_version = 1;
bool CMsgClientGetClientDetailsResponse::has_package_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientGetClientDetailsResponse::set_has_package_version() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientGetClientDetailsResponse::clear_has_package_version() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientGetClientDetailsResponse::clear_package_version() {
  package_version_ = 0u;
  clear_has_package_version();
}
::google::protobuf::uint32 CMsgClientGetClientDetailsResponse::package_version() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientDetailsResponse.package_version)
  return package_version_;
}
void CMsgClientGetClientDetailsResponse::set_package_version(::google::protobuf::uint32 value) {
  set_has_package_version();
  package_version_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientDetailsResponse.package_version)
}

// optional uint32 protocol_version = 8;
bool CMsgClientGetClientDetailsResponse::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientGetClientDetailsResponse::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientGetClientDetailsResponse::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientGetClientDetailsResponse::clear_protocol_version() {
  protocol_version_ = 0u;
  clear_has_protocol_version();
}
::google::protobuf::uint32 CMsgClientGetClientDetailsResponse::protocol_version() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientDetailsResponse.protocol_version)
  return protocol_version_;
}
void CMsgClientGetClientDetailsResponse::set_protocol_version(::google::protobuf::uint32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientDetailsResponse.protocol_version)
}

// optional string os = 2;
bool CMsgClientGetClientDetailsResponse::has_os() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientGetClientDetailsResponse::set_has_os() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientGetClientDetailsResponse::clear_has_os() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientGetClientDetailsResponse::clear_os() {
  os_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_os();
}
const ::std::string& CMsgClientGetClientDetailsResponse::os() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientDetailsResponse.os)
  return os_.GetNoArena();
}
void CMsgClientGetClientDetailsResponse::set_os(const ::std::string& value) {
  set_has_os();
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientDetailsResponse.os)
}
#if LANG_CXX11
void CMsgClientGetClientDetailsResponse::set_os(::std::string&& value) {
  set_has_os();
  os_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientGetClientDetailsResponse.os)
}
#endif
void CMsgClientGetClientDetailsResponse::set_os(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_os();
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientGetClientDetailsResponse.os)
}
void CMsgClientGetClientDetailsResponse::set_os(const char* value, size_t size) {
  set_has_os();
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientGetClientDetailsResponse.os)
}
::std::string* CMsgClientGetClientDetailsResponse::mutable_os() {
  set_has_os();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientGetClientDetailsResponse.os)
  return os_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientGetClientDetailsResponse::release_os() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientGetClientDetailsResponse.os)
  clear_has_os();
  return os_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientGetClientDetailsResponse::set_allocated_os(::std::string* os) {
  if (os != NULL) {
    set_has_os();
  } else {
    clear_has_os();
  }
  os_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientGetClientDetailsResponse.os)
}

// optional string machine_name = 3;
bool CMsgClientGetClientDetailsResponse::has_machine_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientGetClientDetailsResponse::set_has_machine_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientGetClientDetailsResponse::clear_has_machine_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientGetClientDetailsResponse::clear_machine_name() {
  machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_name();
}
const ::std::string& CMsgClientGetClientDetailsResponse::machine_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientDetailsResponse.machine_name)
  return machine_name_.GetNoArena();
}
void CMsgClientGetClientDetailsResponse::set_machine_name(const ::std::string& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientDetailsResponse.machine_name)
}
#if LANG_CXX11
void CMsgClientGetClientDetailsResponse::set_machine_name(::std::string&& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientGetClientDetailsResponse.machine_name)
}
#endif
void CMsgClientGetClientDetailsResponse::set_machine_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientGetClientDetailsResponse.machine_name)
}
void CMsgClientGetClientDetailsResponse::set_machine_name(const char* value, size_t size) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientGetClientDetailsResponse.machine_name)
}
::std::string* CMsgClientGetClientDetailsResponse::mutable_machine_name() {
  set_has_machine_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientGetClientDetailsResponse.machine_name)
  return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientGetClientDetailsResponse::release_machine_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientGetClientDetailsResponse.machine_name)
  clear_has_machine_name();
  return machine_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientGetClientDetailsResponse::set_allocated_machine_name(::std::string* machine_name) {
  if (machine_name != NULL) {
    set_has_machine_name();
  } else {
    clear_has_machine_name();
  }
  machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientGetClientDetailsResponse.machine_name)
}

// optional string ip_public = 4;
bool CMsgClientGetClientDetailsResponse::has_ip_public() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientGetClientDetailsResponse::set_has_ip_public() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientGetClientDetailsResponse::clear_has_ip_public() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientGetClientDetailsResponse::clear_ip_public() {
  ip_public_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip_public();
}
const ::std::string& CMsgClientGetClientDetailsResponse::ip_public() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientDetailsResponse.ip_public)
  return ip_public_.GetNoArena();
}
void CMsgClientGetClientDetailsResponse::set_ip_public(const ::std::string& value) {
  set_has_ip_public();
  ip_public_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientDetailsResponse.ip_public)
}
#if LANG_CXX11
void CMsgClientGetClientDetailsResponse::set_ip_public(::std::string&& value) {
  set_has_ip_public();
  ip_public_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientGetClientDetailsResponse.ip_public)
}
#endif
void CMsgClientGetClientDetailsResponse::set_ip_public(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip_public();
  ip_public_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientGetClientDetailsResponse.ip_public)
}
void CMsgClientGetClientDetailsResponse::set_ip_public(const char* value, size_t size) {
  set_has_ip_public();
  ip_public_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientGetClientDetailsResponse.ip_public)
}
::std::string* CMsgClientGetClientDetailsResponse::mutable_ip_public() {
  set_has_ip_public();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientGetClientDetailsResponse.ip_public)
  return ip_public_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientGetClientDetailsResponse::release_ip_public() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientGetClientDetailsResponse.ip_public)
  clear_has_ip_public();
  return ip_public_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientGetClientDetailsResponse::set_allocated_ip_public(::std::string* ip_public) {
  if (ip_public != NULL) {
    set_has_ip_public();
  } else {
    clear_has_ip_public();
  }
  ip_public_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_public);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientGetClientDetailsResponse.ip_public)
}

// optional string ip_private = 5;
bool CMsgClientGetClientDetailsResponse::has_ip_private() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientGetClientDetailsResponse::set_has_ip_private() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientGetClientDetailsResponse::clear_has_ip_private() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientGetClientDetailsResponse::clear_ip_private() {
  ip_private_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip_private();
}
const ::std::string& CMsgClientGetClientDetailsResponse::ip_private() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientDetailsResponse.ip_private)
  return ip_private_.GetNoArena();
}
void CMsgClientGetClientDetailsResponse::set_ip_private(const ::std::string& value) {
  set_has_ip_private();
  ip_private_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientDetailsResponse.ip_private)
}
#if LANG_CXX11
void CMsgClientGetClientDetailsResponse::set_ip_private(::std::string&& value) {
  set_has_ip_private();
  ip_private_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientGetClientDetailsResponse.ip_private)
}
#endif
void CMsgClientGetClientDetailsResponse::set_ip_private(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip_private();
  ip_private_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientGetClientDetailsResponse.ip_private)
}
void CMsgClientGetClientDetailsResponse::set_ip_private(const char* value, size_t size) {
  set_has_ip_private();
  ip_private_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientGetClientDetailsResponse.ip_private)
}
::std::string* CMsgClientGetClientDetailsResponse::mutable_ip_private() {
  set_has_ip_private();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientGetClientDetailsResponse.ip_private)
  return ip_private_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientGetClientDetailsResponse::release_ip_private() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientGetClientDetailsResponse.ip_private)
  clear_has_ip_private();
  return ip_private_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientGetClientDetailsResponse::set_allocated_ip_private(::std::string* ip_private) {
  if (ip_private != NULL) {
    set_has_ip_private();
  } else {
    clear_has_ip_private();
  }
  ip_private_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_private);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientGetClientDetailsResponse.ip_private)
}

// optional uint64 bytes_available = 7;
bool CMsgClientGetClientDetailsResponse::has_bytes_available() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientGetClientDetailsResponse::set_has_bytes_available() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientGetClientDetailsResponse::clear_has_bytes_available() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientGetClientDetailsResponse::clear_bytes_available() {
  bytes_available_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_available();
}
::google::protobuf::uint64 CMsgClientGetClientDetailsResponse::bytes_available() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientDetailsResponse.bytes_available)
  return bytes_available_;
}
void CMsgClientGetClientDetailsResponse::set_bytes_available(::google::protobuf::uint64 value) {
  set_has_bytes_available();
  bytes_available_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientDetailsResponse.bytes_available)
}

// repeated .proto.steam.CMsgClientGetClientDetailsResponse.Game games_running = 6;
int CMsgClientGetClientDetailsResponse::games_running_size() const {
  return games_running_.size();
}
void CMsgClientGetClientDetailsResponse::clear_games_running() {
  games_running_.Clear();
}
const ::proto::steam::CMsgClientGetClientDetailsResponse_Game& CMsgClientGetClientDetailsResponse::games_running(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientDetailsResponse.games_running)
  return games_running_.Get(index);
}
::proto::steam::CMsgClientGetClientDetailsResponse_Game* CMsgClientGetClientDetailsResponse::mutable_games_running(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientGetClientDetailsResponse.games_running)
  return games_running_.Mutable(index);
}
::proto::steam::CMsgClientGetClientDetailsResponse_Game* CMsgClientGetClientDetailsResponse::add_games_running() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientGetClientDetailsResponse.games_running)
  return games_running_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientGetClientDetailsResponse_Game >*
CMsgClientGetClientDetailsResponse::mutable_games_running() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientGetClientDetailsResponse.games_running)
  return &games_running_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientGetClientDetailsResponse_Game >&
CMsgClientGetClientDetailsResponse::games_running() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientGetClientDetailsResponse.games_running)
  return games_running_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetClientAppList::kMediaFieldNumber;
const int CMsgClientGetClientAppList::kToolsFieldNumber;
const int CMsgClientGetClientAppList::kGamesFieldNumber;
const int CMsgClientGetClientAppList::kOnlyInstalledFieldNumber;
const int CMsgClientGetClientAppList::kOnlyChangingFieldNumber;
const int CMsgClientGetClientAppList::kComicsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetClientAppList::CMsgClientGetClientAppList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetClientAppList)
}
CMsgClientGetClientAppList::CMsgClientGetClientAppList(const CMsgClientGetClientAppList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&media_, &from.media_,
    reinterpret_cast<char*>(&comics_) -
    reinterpret_cast<char*>(&media_) + sizeof(comics_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetClientAppList)
}

void CMsgClientGetClientAppList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&media_, 0, reinterpret_cast<char*>(&comics_) -
    reinterpret_cast<char*>(&media_) + sizeof(comics_));
}

CMsgClientGetClientAppList::~CMsgClientGetClientAppList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetClientAppList)
  SharedDtor();
}

void CMsgClientGetClientAppList::SharedDtor() {
}

void CMsgClientGetClientAppList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetClientAppList::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientGetClientAppList& CMsgClientGetClientAppList::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientGetClientAppList* CMsgClientGetClientAppList::New(::google::protobuf::Arena* arena) const {
  CMsgClientGetClientAppList* n = new CMsgClientGetClientAppList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientGetClientAppList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetClientAppList)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&media_, 0, reinterpret_cast<char*>(&comics_) -
      reinterpret_cast<char*>(&media_) + sizeof(comics_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientGetClientAppList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetClientAppList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool media = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_media();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &media_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool tools = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_tools();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tools_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool games = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_games();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &games_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool only_installed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_only_installed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_installed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool only_changing = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_only_changing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_changing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool comics = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_comics();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &comics_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetClientAppList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetClientAppList)
  return false;
#undef DO_
}

void CMsgClientGetClientAppList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetClientAppList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool media = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->media(), output);
  }

  // optional bool tools = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->tools(), output);
  }

  // optional bool games = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->games(), output);
  }

  // optional bool only_installed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->only_installed(), output);
  }

  // optional bool only_changing = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->only_changing(), output);
  }

  // optional bool comics = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->comics(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetClientAppList)
}

::google::protobuf::uint8* CMsgClientGetClientAppList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetClientAppList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool media = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->media(), target);
  }

  // optional bool tools = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->tools(), target);
  }

  // optional bool games = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->games(), target);
  }

  // optional bool only_installed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->only_installed(), target);
  }

  // optional bool only_changing = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->only_changing(), target);
  }

  // optional bool comics = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->comics(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetClientAppList)
  return target;
}

size_t CMsgClientGetClientAppList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetClientAppList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bool media = 1;
    if (has_media()) {
      total_size += 1 + 1;
    }

    // optional bool tools = 2;
    if (has_tools()) {
      total_size += 1 + 1;
    }

    // optional bool games = 3;
    if (has_games()) {
      total_size += 1 + 1;
    }

    // optional bool only_installed = 4;
    if (has_only_installed()) {
      total_size += 1 + 1;
    }

    // optional bool only_changing = 5;
    if (has_only_changing()) {
      total_size += 1 + 1;
    }

    // optional bool comics = 6;
    if (has_comics()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetClientAppList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetClientAppList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetClientAppList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientGetClientAppList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetClientAppList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetClientAppList)
    MergeFrom(*source);
  }
}

void CMsgClientGetClientAppList::MergeFrom(const CMsgClientGetClientAppList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetClientAppList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      media_ = from.media_;
    }
    if (cached_has_bits & 0x00000002u) {
      tools_ = from.tools_;
    }
    if (cached_has_bits & 0x00000004u) {
      games_ = from.games_;
    }
    if (cached_has_bits & 0x00000008u) {
      only_installed_ = from.only_installed_;
    }
    if (cached_has_bits & 0x00000010u) {
      only_changing_ = from.only_changing_;
    }
    if (cached_has_bits & 0x00000020u) {
      comics_ = from.comics_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGetClientAppList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetClientAppList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetClientAppList::CopyFrom(const CMsgClientGetClientAppList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetClientAppList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientAppList::IsInitialized() const {
  return true;
}

void CMsgClientGetClientAppList::Swap(CMsgClientGetClientAppList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetClientAppList::InternalSwap(CMsgClientGetClientAppList* other) {
  std::swap(media_, other->media_);
  std::swap(tools_, other->tools_);
  std::swap(games_, other->games_);
  std::swap(only_installed_, other->only_installed_);
  std::swap(only_changing_, other->only_changing_);
  std::swap(comics_, other->comics_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientGetClientAppList::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientGetClientAppList

// optional bool media = 1;
bool CMsgClientGetClientAppList::has_media() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientGetClientAppList::set_has_media() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientGetClientAppList::clear_has_media() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientGetClientAppList::clear_media() {
  media_ = false;
  clear_has_media();
}
bool CMsgClientGetClientAppList::media() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppList.media)
  return media_;
}
void CMsgClientGetClientAppList::set_media(bool value) {
  set_has_media();
  media_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientAppList.media)
}

// optional bool tools = 2;
bool CMsgClientGetClientAppList::has_tools() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientGetClientAppList::set_has_tools() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientGetClientAppList::clear_has_tools() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientGetClientAppList::clear_tools() {
  tools_ = false;
  clear_has_tools();
}
bool CMsgClientGetClientAppList::tools() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppList.tools)
  return tools_;
}
void CMsgClientGetClientAppList::set_tools(bool value) {
  set_has_tools();
  tools_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientAppList.tools)
}

// optional bool games = 3;
bool CMsgClientGetClientAppList::has_games() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientGetClientAppList::set_has_games() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientGetClientAppList::clear_has_games() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientGetClientAppList::clear_games() {
  games_ = false;
  clear_has_games();
}
bool CMsgClientGetClientAppList::games() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppList.games)
  return games_;
}
void CMsgClientGetClientAppList::set_games(bool value) {
  set_has_games();
  games_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientAppList.games)
}

// optional bool only_installed = 4;
bool CMsgClientGetClientAppList::has_only_installed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientGetClientAppList::set_has_only_installed() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientGetClientAppList::clear_has_only_installed() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientGetClientAppList::clear_only_installed() {
  only_installed_ = false;
  clear_has_only_installed();
}
bool CMsgClientGetClientAppList::only_installed() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppList.only_installed)
  return only_installed_;
}
void CMsgClientGetClientAppList::set_only_installed(bool value) {
  set_has_only_installed();
  only_installed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientAppList.only_installed)
}

// optional bool only_changing = 5;
bool CMsgClientGetClientAppList::has_only_changing() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientGetClientAppList::set_has_only_changing() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientGetClientAppList::clear_has_only_changing() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientGetClientAppList::clear_only_changing() {
  only_changing_ = false;
  clear_has_only_changing();
}
bool CMsgClientGetClientAppList::only_changing() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppList.only_changing)
  return only_changing_;
}
void CMsgClientGetClientAppList::set_only_changing(bool value) {
  set_has_only_changing();
  only_changing_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientAppList.only_changing)
}

// optional bool comics = 6;
bool CMsgClientGetClientAppList::has_comics() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientGetClientAppList::set_has_comics() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientGetClientAppList::clear_has_comics() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientGetClientAppList::clear_comics() {
  comics_ = false;
  clear_has_comics();
}
bool CMsgClientGetClientAppList::comics() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppList.comics)
  return comics_;
}
void CMsgClientGetClientAppList::set_comics(bool value) {
  set_has_comics();
  comics_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientAppList.comics)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetClientAppListResponse_App_DLC::kAppidFieldNumber;
const int CMsgClientGetClientAppListResponse_App_DLC::kInstalledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetClientAppListResponse_App_DLC::CMsgClientGetClientAppListResponse_App_DLC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
}
CMsgClientGetClientAppListResponse_App_DLC::CMsgClientGetClientAppListResponse_App_DLC(const CMsgClientGetClientAppListResponse_App_DLC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&installed_) -
    reinterpret_cast<char*>(&appid_) + sizeof(installed_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
}

void CMsgClientGetClientAppListResponse_App_DLC::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&appid_, 0, reinterpret_cast<char*>(&installed_) -
    reinterpret_cast<char*>(&appid_) + sizeof(installed_));
}

CMsgClientGetClientAppListResponse_App_DLC::~CMsgClientGetClientAppListResponse_App_DLC() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  SharedDtor();
}

void CMsgClientGetClientAppListResponse_App_DLC::SharedDtor() {
}

void CMsgClientGetClientAppListResponse_App_DLC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetClientAppListResponse_App_DLC::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientGetClientAppListResponse_App_DLC& CMsgClientGetClientAppListResponse_App_DLC::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientGetClientAppListResponse_App_DLC* CMsgClientGetClientAppListResponse_App_DLC::New(::google::protobuf::Arena* arena) const {
  CMsgClientGetClientAppListResponse_App_DLC* n = new CMsgClientGetClientAppListResponse_App_DLC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientGetClientAppListResponse_App_DLC::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&installed_) -
      reinterpret_cast<char*>(&appid_) + sizeof(installed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientGetClientAppListResponse_App_DLC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool installed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_installed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &installed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  return false;
#undef DO_
}

void CMsgClientGetClientAppListResponse_App_DLC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional bool installed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->installed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
}

::google::protobuf::uint8* CMsgClientGetClientAppListResponse_App_DLC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional bool installed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->installed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  return target;
}

size_t CMsgClientGetClientAppListResponse_App_DLC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool installed = 2;
    if (has_installed()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetClientAppListResponse_App_DLC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetClientAppListResponse_App_DLC* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientGetClientAppListResponse_App_DLC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
    MergeFrom(*source);
  }
}

void CMsgClientGetClientAppListResponse_App_DLC::MergeFrom(const CMsgClientGetClientAppListResponse_App_DLC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      installed_ = from.installed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGetClientAppListResponse_App_DLC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetClientAppListResponse_App_DLC::CopyFrom(const CMsgClientGetClientAppListResponse_App_DLC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetClientAppListResponse.App.DLC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientAppListResponse_App_DLC::IsInitialized() const {
  return true;
}

void CMsgClientGetClientAppListResponse_App_DLC::Swap(CMsgClientGetClientAppListResponse_App_DLC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetClientAppListResponse_App_DLC::InternalSwap(CMsgClientGetClientAppListResponse_App_DLC* other) {
  std::swap(appid_, other->appid_);
  std::swap(installed_, other->installed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientGetClientAppListResponse_App_DLC::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientGetClientAppListResponse_App_DLC

// optional uint32 appid = 1;
bool CMsgClientGetClientAppListResponse_App_DLC::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientGetClientAppListResponse_App_DLC::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientGetClientAppListResponse_App_DLC::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientGetClientAppListResponse_App_DLC::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CMsgClientGetClientAppListResponse_App_DLC::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppListResponse.App.DLC.appid)
  return appid_;
}
void CMsgClientGetClientAppListResponse_App_DLC::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientAppListResponse.App.DLC.appid)
}

// optional bool installed = 2;
bool CMsgClientGetClientAppListResponse_App_DLC::has_installed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientGetClientAppListResponse_App_DLC::set_has_installed() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientGetClientAppListResponse_App_DLC::clear_has_installed() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientGetClientAppListResponse_App_DLC::clear_installed() {
  installed_ = false;
  clear_has_installed();
}
bool CMsgClientGetClientAppListResponse_App_DLC::installed() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppListResponse.App.DLC.installed)
  return installed_;
}
void CMsgClientGetClientAppListResponse_App_DLC::set_installed(bool value) {
  set_has_installed();
  installed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientAppListResponse.App.DLC.installed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetClientAppListResponse_App::kAppidFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kCategoryFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kAppTypeFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kFavoriteFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kInstalledFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kAutoUpdateFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kBytesDownloadedFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kBytesNeededFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kBytesDownloadRateFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kDownloadPausedFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kNumDownloadingFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kNumPausedFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kChangingFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kAvailableOnPlatformFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kDlcsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetClientAppListResponse_App::CMsgClientGetClientAppListResponse_App()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetClientAppListResponse.App)
}
CMsgClientGetClientAppListResponse_App::CMsgClientGetClientAppListResponse_App(const CMsgClientGetClientAppListResponse_App& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dlcs_(from.dlcs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_category()) {
    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  app_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_type()) {
    app_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_type_);
  }
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&available_on_platform_) -
    reinterpret_cast<char*>(&appid_) + sizeof(available_on_platform_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetClientAppListResponse.App)
}

void CMsgClientGetClientAppListResponse_App::SharedCtor() {
  _cached_size_ = 0;
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, reinterpret_cast<char*>(&available_on_platform_) -
    reinterpret_cast<char*>(&appid_) + sizeof(available_on_platform_));
}

CMsgClientGetClientAppListResponse_App::~CMsgClientGetClientAppListResponse_App() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetClientAppListResponse.App)
  SharedDtor();
}

void CMsgClientGetClientAppListResponse_App::SharedDtor() {
  category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientGetClientAppListResponse_App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetClientAppListResponse_App::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientGetClientAppListResponse_App& CMsgClientGetClientAppListResponse_App::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientGetClientAppListResponse_App* CMsgClientGetClientAppListResponse_App::New(::google::protobuf::Arena* arena) const {
  CMsgClientGetClientAppListResponse_App* n = new CMsgClientGetClientAppListResponse_App;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientGetClientAppListResponse_App::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetClientAppListResponse.App)
  dlcs_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_category()) {
      GOOGLE_DCHECK(!category_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*category_.UnsafeRawStringPointer())->clear();
    }
    if (has_app_type()) {
      GOOGLE_DCHECK(!app_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*app_type_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&bytes_downloaded_) -
      reinterpret_cast<char*>(&appid_) + sizeof(bytes_downloaded_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&bytes_needed_, 0, reinterpret_cast<char*>(&available_on_platform_) -
      reinterpret_cast<char*>(&bytes_needed_) + sizeof(available_on_platform_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientGetClientAppListResponse_App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetClientAppListResponse.App)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string category = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->category().data(), this->category().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientGetClientAppListResponse.App.category");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool favorite = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_favorite();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &favorite_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool installed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_installed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &installed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool auto_update = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_auto_update();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_downloaded = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_bytes_downloaded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_downloaded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_needed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_bytes_needed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_needed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bytes_download_rate = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_bytes_download_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_download_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientGetClientAppListResponse.App.DLC dlcs = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dlcs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string app_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_type().data(), this->app_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientGetClientAppListResponse.App.app_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool download_paused = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_download_paused();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &download_paused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_downloading = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_num_downloading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_downloading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_paused = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_num_paused();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_paused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool changing = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_changing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &changing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool available_on_platform = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_available_on_platform();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &available_on_platform_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetClientAppListResponse.App)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetClientAppListResponse.App)
  return false;
#undef DO_
}

void CMsgClientGetClientAppListResponse_App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetClientAppListResponse.App)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string category = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientAppListResponse.App.category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->category(), output);
  }

  // optional bool favorite = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->favorite(), output);
  }

  // optional bool installed = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->installed(), output);
  }

  // optional bool auto_update = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->auto_update(), output);
  }

  // optional uint64 bytes_downloaded = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->bytes_downloaded(), output);
  }

  // optional uint64 bytes_needed = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->bytes_needed(), output);
  }

  // optional uint32 bytes_download_rate = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bytes_download_rate(), output);
  }

  // repeated .proto.steam.CMsgClientGetClientAppListResponse.App.DLC dlcs = 9;
  for (unsigned int i = 0, n = this->dlcs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->dlcs(i), output);
  }

  // optional string app_type = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_type().data(), this->app_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientAppListResponse.App.app_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->app_type(), output);
  }

  // optional bool download_paused = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->download_paused(), output);
  }

  // optional uint32 num_downloading = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->num_downloading(), output);
  }

  // optional uint32 num_paused = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->num_paused(), output);
  }

  // optional bool changing = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->changing(), output);
  }

  // optional bool available_on_platform = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->available_on_platform(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetClientAppListResponse.App)
}

::google::protobuf::uint8* CMsgClientGetClientAppListResponse_App::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetClientAppListResponse.App)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string category = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientAppListResponse.App.category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->category(), target);
  }

  // optional bool favorite = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->favorite(), target);
  }

  // optional bool installed = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->installed(), target);
  }

  // optional bool auto_update = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->auto_update(), target);
  }

  // optional uint64 bytes_downloaded = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->bytes_downloaded(), target);
  }

  // optional uint64 bytes_needed = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->bytes_needed(), target);
  }

  // optional uint32 bytes_download_rate = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bytes_download_rate(), target);
  }

  // repeated .proto.steam.CMsgClientGetClientAppListResponse.App.DLC dlcs = 9;
  for (unsigned int i = 0, n = this->dlcs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->dlcs(i), deterministic, target);
  }

  // optional string app_type = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_type().data(), this->app_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientGetClientAppListResponse.App.app_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->app_type(), target);
  }

  // optional bool download_paused = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->download_paused(), target);
  }

  // optional uint32 num_downloading = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->num_downloading(), target);
  }

  // optional uint32 num_paused = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->num_paused(), target);
  }

  // optional bool changing = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->changing(), target);
  }

  // optional bool available_on_platform = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->available_on_platform(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetClientAppListResponse.App)
  return target;
}

size_t CMsgClientGetClientAppListResponse_App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetClientAppListResponse.App)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientGetClientAppListResponse.App.DLC dlcs = 9;
  {
    unsigned int count = this->dlcs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dlcs(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string category = 2;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category());
    }

    // optional string app_type = 10;
    if (has_app_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_type());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool favorite = 3;
    if (has_favorite()) {
      total_size += 1 + 1;
    }

    // optional bool installed = 4;
    if (has_installed()) {
      total_size += 1 + 1;
    }

    // optional bool auto_update = 5;
    if (has_auto_update()) {
      total_size += 1 + 1;
    }

    // optional bool download_paused = 11;
    if (has_download_paused()) {
      total_size += 1 + 1;
    }

    // optional uint64 bytes_downloaded = 6;
    if (has_bytes_downloaded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_downloaded());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional uint64 bytes_needed = 7;
    if (has_bytes_needed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_needed());
    }

    // optional uint32 bytes_download_rate = 8;
    if (has_bytes_download_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bytes_download_rate());
    }

    // optional uint32 num_downloading = 12;
    if (has_num_downloading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_downloading());
    }

    // optional uint32 num_paused = 13;
    if (has_num_paused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_paused());
    }

    // optional bool changing = 14;
    if (has_changing()) {
      total_size += 1 + 1;
    }

    // optional bool available_on_platform = 15;
    if (has_available_on_platform()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetClientAppListResponse_App::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetClientAppListResponse.App)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetClientAppListResponse_App* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientGetClientAppListResponse_App>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetClientAppListResponse.App)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetClientAppListResponse.App)
    MergeFrom(*source);
  }
}

void CMsgClientGetClientAppListResponse_App::MergeFrom(const CMsgClientGetClientAppListResponse_App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetClientAppListResponse.App)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dlcs_.MergeFrom(from.dlcs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_category();
      category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_app_type();
      app_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      favorite_ = from.favorite_;
    }
    if (cached_has_bits & 0x00000010u) {
      installed_ = from.installed_;
    }
    if (cached_has_bits & 0x00000020u) {
      auto_update_ = from.auto_update_;
    }
    if (cached_has_bits & 0x00000040u) {
      download_paused_ = from.download_paused_;
    }
    if (cached_has_bits & 0x00000080u) {
      bytes_downloaded_ = from.bytes_downloaded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      bytes_needed_ = from.bytes_needed_;
    }
    if (cached_has_bits & 0x00000200u) {
      bytes_download_rate_ = from.bytes_download_rate_;
    }
    if (cached_has_bits & 0x00000400u) {
      num_downloading_ = from.num_downloading_;
    }
    if (cached_has_bits & 0x00000800u) {
      num_paused_ = from.num_paused_;
    }
    if (cached_has_bits & 0x00001000u) {
      changing_ = from.changing_;
    }
    if (cached_has_bits & 0x00002000u) {
      available_on_platform_ = from.available_on_platform_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGetClientAppListResponse_App::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetClientAppListResponse.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetClientAppListResponse_App::CopyFrom(const CMsgClientGetClientAppListResponse_App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetClientAppListResponse.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientAppListResponse_App::IsInitialized() const {
  return true;
}

void CMsgClientGetClientAppListResponse_App::Swap(CMsgClientGetClientAppListResponse_App* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetClientAppListResponse_App::InternalSwap(CMsgClientGetClientAppListResponse_App* other) {
  dlcs_.InternalSwap(&other->dlcs_);
  category_.Swap(&other->category_);
  app_type_.Swap(&other->app_type_);
  std::swap(appid_, other->appid_);
  std::swap(favorite_, other->favorite_);
  std::swap(installed_, other->installed_);
  std::swap(auto_update_, other->auto_update_);
  std::swap(download_paused_, other->download_paused_);
  std::swap(bytes_downloaded_, other->bytes_downloaded_);
  std::swap(bytes_needed_, other->bytes_needed_);
  std::swap(bytes_download_rate_, other->bytes_download_rate_);
  std::swap(num_downloading_, other->num_downloading_);
  std::swap(num_paused_, other->num_paused_);
  std::swap(changing_, other->changing_);
  std::swap(available_on_platform_, other->available_on_platform_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientGetClientAppListResponse_App::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientGetClientAppListResponse_App

// optional uint32 appid = 1;
bool CMsgClientGetClientAppListResponse_App::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientGetClientAppListResponse_App::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientGetClientAppListResponse_App::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientGetClientAppListResponse_App::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CMsgClientGetClientAppListResponse_App::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppListResponse.App.appid)
  return appid_;
}
void CMsgClientGetClientAppListResponse_App::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientAppListResponse.App.appid)
}

// optional string category = 2;
bool CMsgClientGetClientAppListResponse_App::has_category() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientGetClientAppListResponse_App::set_has_category() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientGetClientAppListResponse_App::clear_has_category() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientGetClientAppListResponse_App::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_category();
}
const ::std::string& CMsgClientGetClientAppListResponse_App::category() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppListResponse.App.category)
  return category_.GetNoArena();
}
void CMsgClientGetClientAppListResponse_App::set_category(const ::std::string& value) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientAppListResponse.App.category)
}
#if LANG_CXX11
void CMsgClientGetClientAppListResponse_App::set_category(::std::string&& value) {
  set_has_category();
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientGetClientAppListResponse.App.category)
}
#endif
void CMsgClientGetClientAppListResponse_App::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientGetClientAppListResponse.App.category)
}
void CMsgClientGetClientAppListResponse_App::set_category(const char* value, size_t size) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientGetClientAppListResponse.App.category)
}
::std::string* CMsgClientGetClientAppListResponse_App::mutable_category() {
  set_has_category();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientGetClientAppListResponse.App.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientGetClientAppListResponse_App::release_category() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientGetClientAppListResponse.App.category)
  clear_has_category();
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientGetClientAppListResponse_App::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    set_has_category();
  } else {
    clear_has_category();
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientGetClientAppListResponse.App.category)
}

// optional string app_type = 10;
bool CMsgClientGetClientAppListResponse_App::has_app_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientGetClientAppListResponse_App::set_has_app_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientGetClientAppListResponse_App::clear_has_app_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientGetClientAppListResponse_App::clear_app_type() {
  app_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_type();
}
const ::std::string& CMsgClientGetClientAppListResponse_App::app_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppListResponse.App.app_type)
  return app_type_.GetNoArena();
}
void CMsgClientGetClientAppListResponse_App::set_app_type(const ::std::string& value) {
  set_has_app_type();
  app_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientAppListResponse.App.app_type)
}
#if LANG_CXX11
void CMsgClientGetClientAppListResponse_App::set_app_type(::std::string&& value) {
  set_has_app_type();
  app_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientGetClientAppListResponse.App.app_type)
}
#endif
void CMsgClientGetClientAppListResponse_App::set_app_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_app_type();
  app_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientGetClientAppListResponse.App.app_type)
}
void CMsgClientGetClientAppListResponse_App::set_app_type(const char* value, size_t size) {
  set_has_app_type();
  app_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientGetClientAppListResponse.App.app_type)
}
::std::string* CMsgClientGetClientAppListResponse_App::mutable_app_type() {
  set_has_app_type();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientGetClientAppListResponse.App.app_type)
  return app_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientGetClientAppListResponse_App::release_app_type() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientGetClientAppListResponse.App.app_type)
  clear_has_app_type();
  return app_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientGetClientAppListResponse_App::set_allocated_app_type(::std::string* app_type) {
  if (app_type != NULL) {
    set_has_app_type();
  } else {
    clear_has_app_type();
  }
  app_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_type);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientGetClientAppListResponse.App.app_type)
}

// optional bool favorite = 3;
bool CMsgClientGetClientAppListResponse_App::has_favorite() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientGetClientAppListResponse_App::set_has_favorite() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientGetClientAppListResponse_App::clear_has_favorite() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientGetClientAppListResponse_App::clear_favorite() {
  favorite_ = false;
  clear_has_favorite();
}
bool CMsgClientGetClientAppListResponse_App::favorite() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppListResponse.App.favorite)
  return favorite_;
}
void CMsgClientGetClientAppListResponse_App::set_favorite(bool value) {
  set_has_favorite();
  favorite_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientAppListResponse.App.favorite)
}

// optional bool installed = 4;
bool CMsgClientGetClientAppListResponse_App::has_installed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientGetClientAppListResponse_App::set_has_installed() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientGetClientAppListResponse_App::clear_has_installed() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientGetClientAppListResponse_App::clear_installed() {
  installed_ = false;
  clear_has_installed();
}
bool CMsgClientGetClientAppListResponse_App::installed() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppListResponse.App.installed)
  return installed_;
}
void CMsgClientGetClientAppListResponse_App::set_installed(bool value) {
  set_has_installed();
  installed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientAppListResponse.App.installed)
}

// optional bool auto_update = 5;
bool CMsgClientGetClientAppListResponse_App::has_auto_update() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientGetClientAppListResponse_App::set_has_auto_update() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientGetClientAppListResponse_App::clear_has_auto_update() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientGetClientAppListResponse_App::clear_auto_update() {
  auto_update_ = false;
  clear_has_auto_update();
}
bool CMsgClientGetClientAppListResponse_App::auto_update() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppListResponse.App.auto_update)
  return auto_update_;
}
void CMsgClientGetClientAppListResponse_App::set_auto_update(bool value) {
  set_has_auto_update();
  auto_update_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientAppListResponse.App.auto_update)
}

// optional uint64 bytes_downloaded = 6;
bool CMsgClientGetClientAppListResponse_App::has_bytes_downloaded() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgClientGetClientAppListResponse_App::set_has_bytes_downloaded() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgClientGetClientAppListResponse_App::clear_has_bytes_downloaded() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgClientGetClientAppListResponse_App::clear_bytes_downloaded() {
  bytes_downloaded_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_downloaded();
}
::google::protobuf::uint64 CMsgClientGetClientAppListResponse_App::bytes_downloaded() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppListResponse.App.bytes_downloaded)
  return bytes_downloaded_;
}
void CMsgClientGetClientAppListResponse_App::set_bytes_downloaded(::google::protobuf::uint64 value) {
  set_has_bytes_downloaded();
  bytes_downloaded_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientAppListResponse.App.bytes_downloaded)
}

// optional uint64 bytes_needed = 7;
bool CMsgClientGetClientAppListResponse_App::has_bytes_needed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgClientGetClientAppListResponse_App::set_has_bytes_needed() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgClientGetClientAppListResponse_App::clear_has_bytes_needed() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgClientGetClientAppListResponse_App::clear_bytes_needed() {
  bytes_needed_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_needed();
}
::google::protobuf::uint64 CMsgClientGetClientAppListResponse_App::bytes_needed() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppListResponse.App.bytes_needed)
  return bytes_needed_;
}
void CMsgClientGetClientAppListResponse_App::set_bytes_needed(::google::protobuf::uint64 value) {
  set_has_bytes_needed();
  bytes_needed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientAppListResponse.App.bytes_needed)
}

// optional uint32 bytes_download_rate = 8;
bool CMsgClientGetClientAppListResponse_App::has_bytes_download_rate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgClientGetClientAppListResponse_App::set_has_bytes_download_rate() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgClientGetClientAppListResponse_App::clear_has_bytes_download_rate() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgClientGetClientAppListResponse_App::clear_bytes_download_rate() {
  bytes_download_rate_ = 0u;
  clear_has_bytes_download_rate();
}
::google::protobuf::uint32 CMsgClientGetClientAppListResponse_App::bytes_download_rate() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppListResponse.App.bytes_download_rate)
  return bytes_download_rate_;
}
void CMsgClientGetClientAppListResponse_App::set_bytes_download_rate(::google::protobuf::uint32 value) {
  set_has_bytes_download_rate();
  bytes_download_rate_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientAppListResponse.App.bytes_download_rate)
}

// optional bool download_paused = 11;
bool CMsgClientGetClientAppListResponse_App::has_download_paused() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientGetClientAppListResponse_App::set_has_download_paused() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientGetClientAppListResponse_App::clear_has_download_paused() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientGetClientAppListResponse_App::clear_download_paused() {
  download_paused_ = false;
  clear_has_download_paused();
}
bool CMsgClientGetClientAppListResponse_App::download_paused() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppListResponse.App.download_paused)
  return download_paused_;
}
void CMsgClientGetClientAppListResponse_App::set_download_paused(bool value) {
  set_has_download_paused();
  download_paused_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientAppListResponse.App.download_paused)
}

// optional uint32 num_downloading = 12;
bool CMsgClientGetClientAppListResponse_App::has_num_downloading() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgClientGetClientAppListResponse_App::set_has_num_downloading() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgClientGetClientAppListResponse_App::clear_has_num_downloading() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgClientGetClientAppListResponse_App::clear_num_downloading() {
  num_downloading_ = 0u;
  clear_has_num_downloading();
}
::google::protobuf::uint32 CMsgClientGetClientAppListResponse_App::num_downloading() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppListResponse.App.num_downloading)
  return num_downloading_;
}
void CMsgClientGetClientAppListResponse_App::set_num_downloading(::google::protobuf::uint32 value) {
  set_has_num_downloading();
  num_downloading_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientAppListResponse.App.num_downloading)
}

// optional uint32 num_paused = 13;
bool CMsgClientGetClientAppListResponse_App::has_num_paused() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgClientGetClientAppListResponse_App::set_has_num_paused() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgClientGetClientAppListResponse_App::clear_has_num_paused() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgClientGetClientAppListResponse_App::clear_num_paused() {
  num_paused_ = 0u;
  clear_has_num_paused();
}
::google::protobuf::uint32 CMsgClientGetClientAppListResponse_App::num_paused() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppListResponse.App.num_paused)
  return num_paused_;
}
void CMsgClientGetClientAppListResponse_App::set_num_paused(::google::protobuf::uint32 value) {
  set_has_num_paused();
  num_paused_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientAppListResponse.App.num_paused)
}

// optional bool changing = 14;
bool CMsgClientGetClientAppListResponse_App::has_changing() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgClientGetClientAppListResponse_App::set_has_changing() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgClientGetClientAppListResponse_App::clear_has_changing() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgClientGetClientAppListResponse_App::clear_changing() {
  changing_ = false;
  clear_has_changing();
}
bool CMsgClientGetClientAppListResponse_App::changing() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppListResponse.App.changing)
  return changing_;
}
void CMsgClientGetClientAppListResponse_App::set_changing(bool value) {
  set_has_changing();
  changing_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientAppListResponse.App.changing)
}

// optional bool available_on_platform = 15;
bool CMsgClientGetClientAppListResponse_App::has_available_on_platform() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgClientGetClientAppListResponse_App::set_has_available_on_platform() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgClientGetClientAppListResponse_App::clear_has_available_on_platform() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgClientGetClientAppListResponse_App::clear_available_on_platform() {
  available_on_platform_ = false;
  clear_has_available_on_platform();
}
bool CMsgClientGetClientAppListResponse_App::available_on_platform() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppListResponse.App.available_on_platform)
  return available_on_platform_;
}
void CMsgClientGetClientAppListResponse_App::set_available_on_platform(bool value) {
  set_has_available_on_platform();
  available_on_platform_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientAppListResponse.App.available_on_platform)
}

// repeated .proto.steam.CMsgClientGetClientAppListResponse.App.DLC dlcs = 9;
int CMsgClientGetClientAppListResponse_App::dlcs_size() const {
  return dlcs_.size();
}
void CMsgClientGetClientAppListResponse_App::clear_dlcs() {
  dlcs_.Clear();
}
const ::proto::steam::CMsgClientGetClientAppListResponse_App_DLC& CMsgClientGetClientAppListResponse_App::dlcs(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppListResponse.App.dlcs)
  return dlcs_.Get(index);
}
::proto::steam::CMsgClientGetClientAppListResponse_App_DLC* CMsgClientGetClientAppListResponse_App::mutable_dlcs(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientGetClientAppListResponse.App.dlcs)
  return dlcs_.Mutable(index);
}
::proto::steam::CMsgClientGetClientAppListResponse_App_DLC* CMsgClientGetClientAppListResponse_App::add_dlcs() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientGetClientAppListResponse.App.dlcs)
  return dlcs_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientGetClientAppListResponse_App_DLC >*
CMsgClientGetClientAppListResponse_App::mutable_dlcs() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientGetClientAppListResponse.App.dlcs)
  return &dlcs_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientGetClientAppListResponse_App_DLC >&
CMsgClientGetClientAppListResponse_App::dlcs() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientGetClientAppListResponse.App.dlcs)
  return dlcs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientGetClientAppListResponse::kAppsFieldNumber;
const int CMsgClientGetClientAppListResponse::kBytesAvailableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetClientAppListResponse::CMsgClientGetClientAppListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetClientAppListResponse)
}
CMsgClientGetClientAppListResponse::CMsgClientGetClientAppListResponse(const CMsgClientGetClientAppListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bytes_available_ = from.bytes_available_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetClientAppListResponse)
}

void CMsgClientGetClientAppListResponse::SharedCtor() {
  _cached_size_ = 0;
  bytes_available_ = GOOGLE_ULONGLONG(0);
}

CMsgClientGetClientAppListResponse::~CMsgClientGetClientAppListResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetClientAppListResponse)
  SharedDtor();
}

void CMsgClientGetClientAppListResponse::SharedDtor() {
}

void CMsgClientGetClientAppListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetClientAppListResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientGetClientAppListResponse& CMsgClientGetClientAppListResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientGetClientAppListResponse* CMsgClientGetClientAppListResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientGetClientAppListResponse* n = new CMsgClientGetClientAppListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientGetClientAppListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetClientAppListResponse)
  apps_.Clear();
  bytes_available_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientGetClientAppListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetClientAppListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientGetClientAppListResponse.App apps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_available = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bytes_available();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetClientAppListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetClientAppListResponse)
  return false;
#undef DO_
}

void CMsgClientGetClientAppListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetClientAppListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientGetClientAppListResponse.App apps = 1;
  for (unsigned int i = 0, n = this->apps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->apps(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 bytes_available = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bytes_available(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetClientAppListResponse)
}

::google::protobuf::uint8* CMsgClientGetClientAppListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetClientAppListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientGetClientAppListResponse.App apps = 1;
  for (unsigned int i = 0, n = this->apps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->apps(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 bytes_available = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->bytes_available(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetClientAppListResponse)
  return target;
}

size_t CMsgClientGetClientAppListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetClientAppListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientGetClientAppListResponse.App apps = 1;
  {
    unsigned int count = this->apps_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->apps(i));
    }
  }

  // optional uint64 bytes_available = 2;
  if (has_bytes_available()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_available());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetClientAppListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetClientAppListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetClientAppListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientGetClientAppListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetClientAppListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetClientAppListResponse)
    MergeFrom(*source);
  }
}

void CMsgClientGetClientAppListResponse::MergeFrom(const CMsgClientGetClientAppListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetClientAppListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  if (from.has_bytes_available()) {
    set_bytes_available(from.bytes_available());
  }
}

void CMsgClientGetClientAppListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetClientAppListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetClientAppListResponse::CopyFrom(const CMsgClientGetClientAppListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetClientAppListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientAppListResponse::IsInitialized() const {
  return true;
}

void CMsgClientGetClientAppListResponse::Swap(CMsgClientGetClientAppListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetClientAppListResponse::InternalSwap(CMsgClientGetClientAppListResponse* other) {
  apps_.InternalSwap(&other->apps_);
  std::swap(bytes_available_, other->bytes_available_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientGetClientAppListResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientGetClientAppListResponse

// repeated .proto.steam.CMsgClientGetClientAppListResponse.App apps = 1;
int CMsgClientGetClientAppListResponse::apps_size() const {
  return apps_.size();
}
void CMsgClientGetClientAppListResponse::clear_apps() {
  apps_.Clear();
}
const ::proto::steam::CMsgClientGetClientAppListResponse_App& CMsgClientGetClientAppListResponse::apps(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppListResponse.apps)
  return apps_.Get(index);
}
::proto::steam::CMsgClientGetClientAppListResponse_App* CMsgClientGetClientAppListResponse::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientGetClientAppListResponse.apps)
  return apps_.Mutable(index);
}
::proto::steam::CMsgClientGetClientAppListResponse_App* CMsgClientGetClientAppListResponse::add_apps() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientGetClientAppListResponse.apps)
  return apps_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientGetClientAppListResponse_App >*
CMsgClientGetClientAppListResponse::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientGetClientAppListResponse.apps)
  return &apps_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientGetClientAppListResponse_App >&
CMsgClientGetClientAppListResponse::apps() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientGetClientAppListResponse.apps)
  return apps_;
}

// optional uint64 bytes_available = 2;
bool CMsgClientGetClientAppListResponse::has_bytes_available() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientGetClientAppListResponse::set_has_bytes_available() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientGetClientAppListResponse::clear_has_bytes_available() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientGetClientAppListResponse::clear_bytes_available() {
  bytes_available_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_available();
}
::google::protobuf::uint64 CMsgClientGetClientAppListResponse::bytes_available() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientGetClientAppListResponse.bytes_available)
  return bytes_available_;
}
void CMsgClientGetClientAppListResponse::set_bytes_available(::google::protobuf::uint64 value) {
  set_has_bytes_available();
  bytes_available_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientGetClientAppListResponse.bytes_available)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientInstallClientApp::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientInstallClientApp::CMsgClientInstallClientApp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientInstallClientApp)
}
CMsgClientInstallClientApp::CMsgClientInstallClientApp(const CMsgClientInstallClientApp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientInstallClientApp)
}

void CMsgClientInstallClientApp::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
}

CMsgClientInstallClientApp::~CMsgClientInstallClientApp() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientInstallClientApp)
  SharedDtor();
}

void CMsgClientInstallClientApp::SharedDtor() {
}

void CMsgClientInstallClientApp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientInstallClientApp::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientInstallClientApp& CMsgClientInstallClientApp::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientInstallClientApp* CMsgClientInstallClientApp::New(::google::protobuf::Arena* arena) const {
  CMsgClientInstallClientApp* n = new CMsgClientInstallClientApp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientInstallClientApp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientInstallClientApp)
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientInstallClientApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientInstallClientApp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientInstallClientApp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientInstallClientApp)
  return false;
#undef DO_
}

void CMsgClientInstallClientApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientInstallClientApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientInstallClientApp)
}

::google::protobuf::uint8* CMsgClientInstallClientApp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientInstallClientApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientInstallClientApp)
  return target;
}

size_t CMsgClientInstallClientApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientInstallClientApp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 appid = 1;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientInstallClientApp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientInstallClientApp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientInstallClientApp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientInstallClientApp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientInstallClientApp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientInstallClientApp)
    MergeFrom(*source);
  }
}

void CMsgClientInstallClientApp::MergeFrom(const CMsgClientInstallClientApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientInstallClientApp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CMsgClientInstallClientApp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientInstallClientApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientInstallClientApp::CopyFrom(const CMsgClientInstallClientApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientInstallClientApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientInstallClientApp::IsInitialized() const {
  return true;
}

void CMsgClientInstallClientApp::Swap(CMsgClientInstallClientApp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientInstallClientApp::InternalSwap(CMsgClientInstallClientApp* other) {
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientInstallClientApp::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientInstallClientApp

// optional uint32 appid = 1;
bool CMsgClientInstallClientApp::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientInstallClientApp::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientInstallClientApp::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientInstallClientApp::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CMsgClientInstallClientApp::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientInstallClientApp.appid)
  return appid_;
}
void CMsgClientInstallClientApp::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientInstallClientApp.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientInstallClientAppResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientInstallClientAppResponse::CMsgClientInstallClientAppResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientInstallClientAppResponse)
}
CMsgClientInstallClientAppResponse::CMsgClientInstallClientAppResponse(const CMsgClientInstallClientAppResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientInstallClientAppResponse)
}

void CMsgClientInstallClientAppResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
}

CMsgClientInstallClientAppResponse::~CMsgClientInstallClientAppResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientInstallClientAppResponse)
  SharedDtor();
}

void CMsgClientInstallClientAppResponse::SharedDtor() {
}

void CMsgClientInstallClientAppResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientInstallClientAppResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientInstallClientAppResponse& CMsgClientInstallClientAppResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientInstallClientAppResponse* CMsgClientInstallClientAppResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientInstallClientAppResponse* n = new CMsgClientInstallClientAppResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientInstallClientAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientInstallClientAppResponse)
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientInstallClientAppResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientInstallClientAppResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientInstallClientAppResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientInstallClientAppResponse)
  return false;
#undef DO_
}

void CMsgClientInstallClientAppResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientInstallClientAppResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientInstallClientAppResponse)
}

::google::protobuf::uint8* CMsgClientInstallClientAppResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientInstallClientAppResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientInstallClientAppResponse)
  return target;
}

size_t CMsgClientInstallClientAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientInstallClientAppResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientInstallClientAppResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientInstallClientAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientInstallClientAppResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientInstallClientAppResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientInstallClientAppResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientInstallClientAppResponse)
    MergeFrom(*source);
  }
}

void CMsgClientInstallClientAppResponse::MergeFrom(const CMsgClientInstallClientAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientInstallClientAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgClientInstallClientAppResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientInstallClientAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientInstallClientAppResponse::CopyFrom(const CMsgClientInstallClientAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientInstallClientAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientInstallClientAppResponse::IsInitialized() const {
  return true;
}

void CMsgClientInstallClientAppResponse::Swap(CMsgClientInstallClientAppResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientInstallClientAppResponse::InternalSwap(CMsgClientInstallClientAppResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientInstallClientAppResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientInstallClientAppResponse

// optional uint32 result = 1;
bool CMsgClientInstallClientAppResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientInstallClientAppResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientInstallClientAppResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientInstallClientAppResponse::clear_result() {
  result_ = 0u;
  clear_has_result();
}
::google::protobuf::uint32 CMsgClientInstallClientAppResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientInstallClientAppResponse.result)
  return result_;
}
void CMsgClientInstallClientAppResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientInstallClientAppResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUninstallClientApp::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUninstallClientApp::CMsgClientUninstallClientApp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUninstallClientApp)
}
CMsgClientUninstallClientApp::CMsgClientUninstallClientApp(const CMsgClientUninstallClientApp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUninstallClientApp)
}

void CMsgClientUninstallClientApp::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
}

CMsgClientUninstallClientApp::~CMsgClientUninstallClientApp() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUninstallClientApp)
  SharedDtor();
}

void CMsgClientUninstallClientApp::SharedDtor() {
}

void CMsgClientUninstallClientApp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUninstallClientApp::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUninstallClientApp& CMsgClientUninstallClientApp::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUninstallClientApp* CMsgClientUninstallClientApp::New(::google::protobuf::Arena* arena) const {
  CMsgClientUninstallClientApp* n = new CMsgClientUninstallClientApp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUninstallClientApp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUninstallClientApp)
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUninstallClientApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUninstallClientApp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUninstallClientApp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUninstallClientApp)
  return false;
#undef DO_
}

void CMsgClientUninstallClientApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUninstallClientApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUninstallClientApp)
}

::google::protobuf::uint8* CMsgClientUninstallClientApp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUninstallClientApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUninstallClientApp)
  return target;
}

size_t CMsgClientUninstallClientApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUninstallClientApp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 appid = 1;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUninstallClientApp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUninstallClientApp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUninstallClientApp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUninstallClientApp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUninstallClientApp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUninstallClientApp)
    MergeFrom(*source);
  }
}

void CMsgClientUninstallClientApp::MergeFrom(const CMsgClientUninstallClientApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUninstallClientApp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CMsgClientUninstallClientApp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUninstallClientApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUninstallClientApp::CopyFrom(const CMsgClientUninstallClientApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUninstallClientApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUninstallClientApp::IsInitialized() const {
  return true;
}

void CMsgClientUninstallClientApp::Swap(CMsgClientUninstallClientApp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUninstallClientApp::InternalSwap(CMsgClientUninstallClientApp* other) {
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUninstallClientApp::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUninstallClientApp

// optional uint32 appid = 1;
bool CMsgClientUninstallClientApp::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUninstallClientApp::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUninstallClientApp::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUninstallClientApp::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CMsgClientUninstallClientApp::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUninstallClientApp.appid)
  return appid_;
}
void CMsgClientUninstallClientApp::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUninstallClientApp.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUninstallClientAppResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUninstallClientAppResponse::CMsgClientUninstallClientAppResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUninstallClientAppResponse)
}
CMsgClientUninstallClientAppResponse::CMsgClientUninstallClientAppResponse(const CMsgClientUninstallClientAppResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUninstallClientAppResponse)
}

void CMsgClientUninstallClientAppResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
}

CMsgClientUninstallClientAppResponse::~CMsgClientUninstallClientAppResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUninstallClientAppResponse)
  SharedDtor();
}

void CMsgClientUninstallClientAppResponse::SharedDtor() {
}

void CMsgClientUninstallClientAppResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUninstallClientAppResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUninstallClientAppResponse& CMsgClientUninstallClientAppResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUninstallClientAppResponse* CMsgClientUninstallClientAppResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientUninstallClientAppResponse* n = new CMsgClientUninstallClientAppResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUninstallClientAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUninstallClientAppResponse)
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUninstallClientAppResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUninstallClientAppResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUninstallClientAppResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUninstallClientAppResponse)
  return false;
#undef DO_
}

void CMsgClientUninstallClientAppResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUninstallClientAppResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUninstallClientAppResponse)
}

::google::protobuf::uint8* CMsgClientUninstallClientAppResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUninstallClientAppResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUninstallClientAppResponse)
  return target;
}

size_t CMsgClientUninstallClientAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUninstallClientAppResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUninstallClientAppResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUninstallClientAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUninstallClientAppResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUninstallClientAppResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUninstallClientAppResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUninstallClientAppResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUninstallClientAppResponse::MergeFrom(const CMsgClientUninstallClientAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUninstallClientAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgClientUninstallClientAppResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUninstallClientAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUninstallClientAppResponse::CopyFrom(const CMsgClientUninstallClientAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUninstallClientAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUninstallClientAppResponse::IsInitialized() const {
  return true;
}

void CMsgClientUninstallClientAppResponse::Swap(CMsgClientUninstallClientAppResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUninstallClientAppResponse::InternalSwap(CMsgClientUninstallClientAppResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUninstallClientAppResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUninstallClientAppResponse

// optional uint32 result = 1;
bool CMsgClientUninstallClientAppResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUninstallClientAppResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUninstallClientAppResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUninstallClientAppResponse::clear_result() {
  result_ = 0u;
  clear_has_result();
}
::google::protobuf::uint32 CMsgClientUninstallClientAppResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUninstallClientAppResponse.result)
  return result_;
}
void CMsgClientUninstallClientAppResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUninstallClientAppResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSetClientAppUpdateState::kAppidFieldNumber;
const int CMsgClientSetClientAppUpdateState::kUpdateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSetClientAppUpdateState::CMsgClientSetClientAppUpdateState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSetClientAppUpdateState)
}
CMsgClientSetClientAppUpdateState::CMsgClientSetClientAppUpdateState(const CMsgClientSetClientAppUpdateState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&update_) -
    reinterpret_cast<char*>(&appid_) + sizeof(update_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSetClientAppUpdateState)
}

void CMsgClientSetClientAppUpdateState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&appid_, 0, reinterpret_cast<char*>(&update_) -
    reinterpret_cast<char*>(&appid_) + sizeof(update_));
}

CMsgClientSetClientAppUpdateState::~CMsgClientSetClientAppUpdateState() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSetClientAppUpdateState)
  SharedDtor();
}

void CMsgClientSetClientAppUpdateState::SharedDtor() {
}

void CMsgClientSetClientAppUpdateState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientSetClientAppUpdateState::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientSetClientAppUpdateState& CMsgClientSetClientAppUpdateState::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientSetClientAppUpdateState* CMsgClientSetClientAppUpdateState::New(::google::protobuf::Arena* arena) const {
  CMsgClientSetClientAppUpdateState* n = new CMsgClientSetClientAppUpdateState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientSetClientAppUpdateState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSetClientAppUpdateState)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&update_) -
      reinterpret_cast<char*>(&appid_) + sizeof(update_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientSetClientAppUpdateState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSetClientAppUpdateState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool update = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_update();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSetClientAppUpdateState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSetClientAppUpdateState)
  return false;
#undef DO_
}

void CMsgClientSetClientAppUpdateState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSetClientAppUpdateState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional bool update = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->update(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSetClientAppUpdateState)
}

::google::protobuf::uint8* CMsgClientSetClientAppUpdateState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSetClientAppUpdateState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional bool update = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->update(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSetClientAppUpdateState)
  return target;
}

size_t CMsgClientSetClientAppUpdateState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSetClientAppUpdateState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool update = 2;
    if (has_update()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSetClientAppUpdateState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSetClientAppUpdateState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSetClientAppUpdateState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientSetClientAppUpdateState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSetClientAppUpdateState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSetClientAppUpdateState)
    MergeFrom(*source);
  }
}

void CMsgClientSetClientAppUpdateState::MergeFrom(const CMsgClientSetClientAppUpdateState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSetClientAppUpdateState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      update_ = from.update_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientSetClientAppUpdateState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSetClientAppUpdateState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSetClientAppUpdateState::CopyFrom(const CMsgClientSetClientAppUpdateState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSetClientAppUpdateState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSetClientAppUpdateState::IsInitialized() const {
  return true;
}

void CMsgClientSetClientAppUpdateState::Swap(CMsgClientSetClientAppUpdateState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSetClientAppUpdateState::InternalSwap(CMsgClientSetClientAppUpdateState* other) {
  std::swap(appid_, other->appid_);
  std::swap(update_, other->update_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientSetClientAppUpdateState::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientSetClientAppUpdateState

// optional uint32 appid = 1;
bool CMsgClientSetClientAppUpdateState::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientSetClientAppUpdateState::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientSetClientAppUpdateState::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientSetClientAppUpdateState::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CMsgClientSetClientAppUpdateState::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientSetClientAppUpdateState.appid)
  return appid_;
}
void CMsgClientSetClientAppUpdateState::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientSetClientAppUpdateState.appid)
}

// optional bool update = 2;
bool CMsgClientSetClientAppUpdateState::has_update() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientSetClientAppUpdateState::set_has_update() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientSetClientAppUpdateState::clear_has_update() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientSetClientAppUpdateState::clear_update() {
  update_ = false;
  clear_has_update();
}
bool CMsgClientSetClientAppUpdateState::update() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientSetClientAppUpdateState.update)
  return update_;
}
void CMsgClientSetClientAppUpdateState::set_update(bool value) {
  set_has_update();
  update_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientSetClientAppUpdateState.update)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSetClientAppUpdateStateResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSetClientAppUpdateStateResponse::CMsgClientSetClientAppUpdateStateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
}
CMsgClientSetClientAppUpdateStateResponse::CMsgClientSetClientAppUpdateStateResponse(const CMsgClientSetClientAppUpdateStateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
}

void CMsgClientSetClientAppUpdateStateResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
}

CMsgClientSetClientAppUpdateStateResponse::~CMsgClientSetClientAppUpdateStateResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  SharedDtor();
}

void CMsgClientSetClientAppUpdateStateResponse::SharedDtor() {
}

void CMsgClientSetClientAppUpdateStateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientSetClientAppUpdateStateResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientSetClientAppUpdateStateResponse& CMsgClientSetClientAppUpdateStateResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientSetClientAppUpdateStateResponse* CMsgClientSetClientAppUpdateStateResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientSetClientAppUpdateStateResponse* n = new CMsgClientSetClientAppUpdateStateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientSetClientAppUpdateStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientSetClientAppUpdateStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  return false;
#undef DO_
}

void CMsgClientSetClientAppUpdateStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
}

::google::protobuf::uint8* CMsgClientSetClientAppUpdateStateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  return target;
}

size_t CMsgClientSetClientAppUpdateStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSetClientAppUpdateStateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSetClientAppUpdateStateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientSetClientAppUpdateStateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
    MergeFrom(*source);
  }
}

void CMsgClientSetClientAppUpdateStateResponse::MergeFrom(const CMsgClientSetClientAppUpdateStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgClientSetClientAppUpdateStateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSetClientAppUpdateStateResponse::CopyFrom(const CMsgClientSetClientAppUpdateStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSetClientAppUpdateStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSetClientAppUpdateStateResponse::IsInitialized() const {
  return true;
}

void CMsgClientSetClientAppUpdateStateResponse::Swap(CMsgClientSetClientAppUpdateStateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSetClientAppUpdateStateResponse::InternalSwap(CMsgClientSetClientAppUpdateStateResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientSetClientAppUpdateStateResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientSetClientAppUpdateStateResponse

// optional uint32 result = 1;
bool CMsgClientSetClientAppUpdateStateResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientSetClientAppUpdateStateResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientSetClientAppUpdateStateResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientSetClientAppUpdateStateResponse::clear_result() {
  result_ = 0u;
  clear_has_result();
}
::google::protobuf::uint32 CMsgClientSetClientAppUpdateStateResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientSetClientAppUpdateStateResponse.result)
  return result_;
}
void CMsgClientSetClientAppUpdateStateResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientSetClientAppUpdateStateResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSUploadFileRequest::kAppIdFieldNumber;
const int CMsgClientUFSUploadFileRequest::kFileSizeFieldNumber;
const int CMsgClientUFSUploadFileRequest::kRawFileSizeFieldNumber;
const int CMsgClientUFSUploadFileRequest::kShaFileFieldNumber;
const int CMsgClientUFSUploadFileRequest::kTimeStampFieldNumber;
const int CMsgClientUFSUploadFileRequest::kFileNameFieldNumber;
const int CMsgClientUFSUploadFileRequest::kPlatformsToSyncDeprecatedFieldNumber;
const int CMsgClientUFSUploadFileRequest::kPlatformsToSyncFieldNumber;
const int CMsgClientUFSUploadFileRequest::kCellIdFieldNumber;
const int CMsgClientUFSUploadFileRequest::kCanEncryptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSUploadFileRequest::CMsgClientUFSUploadFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSUploadFileRequest)
}
CMsgClientUFSUploadFileRequest::CMsgClientUFSUploadFileRequest(const CMsgClientUFSUploadFileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_file()) {
    sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
  }
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&platforms_to_sync_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(platforms_to_sync_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSUploadFileRequest)
}

void CMsgClientUFSUploadFileRequest::SharedCtor() {
  _cached_size_ = 0;
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&can_encrypt_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(can_encrypt_));
  platforms_to_sync_ = 4294967295u;
}

CMsgClientUFSUploadFileRequest::~CMsgClientUFSUploadFileRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSUploadFileRequest)
  SharedDtor();
}

void CMsgClientUFSUploadFileRequest::SharedDtor() {
  sha_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSUploadFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSUploadFileRequest::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSUploadFileRequest& CMsgClientUFSUploadFileRequest::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSUploadFileRequest* CMsgClientUFSUploadFileRequest::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSUploadFileRequest* n = new CMsgClientUFSUploadFileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSUploadFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSUploadFileRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_sha_file()) {
      GOOGLE_DCHECK(!sha_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sha_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_file_name()) {
      GOOGLE_DCHECK(!file_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&cell_id_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(cell_id_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    can_encrypt_ = false;
    platforms_to_sync_ = 4294967295u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSUploadFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSUploadFileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_file_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_file_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_raw_file_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_file = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 time_stamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_time_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSUploadFileRequest.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 platforms_to_sync_deprecated = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_platforms_to_sync_deprecated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platforms_to_sync_deprecated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 platforms_to_sync = 8 [default = 4294967295];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_platforms_to_sync();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platforms_to_sync_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cell_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_cell_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_encrypt = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_can_encrypt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_encrypt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSUploadFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSUploadFileRequest)
  return false;
#undef DO_
}

void CMsgClientUFSUploadFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSUploadFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 file_size = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->file_size(), output);
  }

  // optional uint32 raw_file_size = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->raw_file_size(), output);
  }

  // optional bytes sha_file = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->sha_file(), output);
  }

  // optional uint64 time_stamp = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time_stamp(), output);
  }

  // optional string file_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSUploadFileRequest.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->file_name(), output);
  }

  // optional uint32 platforms_to_sync_deprecated = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->platforms_to_sync_deprecated(), output);
  }

  // optional uint32 platforms_to_sync = 8 [default = 4294967295];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->platforms_to_sync(), output);
  }

  // optional uint32 cell_id = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cell_id(), output);
  }

  // optional bool can_encrypt = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->can_encrypt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSUploadFileRequest)
}

::google::protobuf::uint8* CMsgClientUFSUploadFileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSUploadFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional uint32 file_size = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->file_size(), target);
  }

  // optional uint32 raw_file_size = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->raw_file_size(), target);
  }

  // optional bytes sha_file = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sha_file(), target);
  }

  // optional uint64 time_stamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->time_stamp(), target);
  }

  // optional string file_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSUploadFileRequest.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->file_name(), target);
  }

  // optional uint32 platforms_to_sync_deprecated = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->platforms_to_sync_deprecated(), target);
  }

  // optional uint32 platforms_to_sync = 8 [default = 4294967295];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->platforms_to_sync(), target);
  }

  // optional uint32 cell_id = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->cell_id(), target);
  }

  // optional bool can_encrypt = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->can_encrypt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSUploadFileRequest)
  return target;
}

size_t CMsgClientUFSUploadFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSUploadFileRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes sha_file = 4;
    if (has_sha_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional string file_name = 6;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 file_size = 2;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional uint64 time_stamp = 5;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_stamp());
    }

    // optional uint32 raw_file_size = 3;
    if (has_raw_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_file_size());
    }

    // optional uint32 platforms_to_sync_deprecated = 7;
    if (has_platforms_to_sync_deprecated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platforms_to_sync_deprecated());
    }

    // optional uint32 cell_id = 9;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool can_encrypt = 10;
    if (has_can_encrypt()) {
      total_size += 1 + 1;
    }

    // optional uint32 platforms_to_sync = 8 [default = 4294967295];
    if (has_platforms_to_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platforms_to_sync());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSUploadFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSUploadFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSUploadFileRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSUploadFileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSUploadFileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSUploadFileRequest)
    MergeFrom(*source);
  }
}

void CMsgClientUFSUploadFileRequest::MergeFrom(const CMsgClientUFSUploadFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSUploadFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sha_file();
      sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      raw_file_size_ = from.raw_file_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      platforms_to_sync_deprecated_ = from.platforms_to_sync_deprecated_;
    }
    if (cached_has_bits & 0x00000080u) {
      cell_id_ = from.cell_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      can_encrypt_ = from.can_encrypt_;
    }
    if (cached_has_bits & 0x00000200u) {
      platforms_to_sync_ = from.platforms_to_sync_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSUploadFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSUploadFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSUploadFileRequest::CopyFrom(const CMsgClientUFSUploadFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSUploadFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadFileRequest::IsInitialized() const {
  return true;
}

void CMsgClientUFSUploadFileRequest::Swap(CMsgClientUFSUploadFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSUploadFileRequest::InternalSwap(CMsgClientUFSUploadFileRequest* other) {
  sha_file_.Swap(&other->sha_file_);
  file_name_.Swap(&other->file_name_);
  std::swap(app_id_, other->app_id_);
  std::swap(file_size_, other->file_size_);
  std::swap(time_stamp_, other->time_stamp_);
  std::swap(raw_file_size_, other->raw_file_size_);
  std::swap(platforms_to_sync_deprecated_, other->platforms_to_sync_deprecated_);
  std::swap(cell_id_, other->cell_id_);
  std::swap(can_encrypt_, other->can_encrypt_);
  std::swap(platforms_to_sync_, other->platforms_to_sync_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSUploadFileRequest::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSUploadFileRequest

// optional uint32 app_id = 1;
bool CMsgClientUFSUploadFileRequest::has_app_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientUFSUploadFileRequest::set_has_app_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientUFSUploadFileRequest::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientUFSUploadFileRequest::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientUFSUploadFileRequest::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadFileRequest.app_id)
  return app_id_;
}
void CMsgClientUFSUploadFileRequest::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadFileRequest.app_id)
}

// optional uint32 file_size = 2;
bool CMsgClientUFSUploadFileRequest::has_file_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientUFSUploadFileRequest::set_has_file_size() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientUFSUploadFileRequest::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientUFSUploadFileRequest::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
::google::protobuf::uint32 CMsgClientUFSUploadFileRequest::file_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadFileRequest.file_size)
  return file_size_;
}
void CMsgClientUFSUploadFileRequest::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadFileRequest.file_size)
}

// optional uint32 raw_file_size = 3;
bool CMsgClientUFSUploadFileRequest::has_raw_file_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientUFSUploadFileRequest::set_has_raw_file_size() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientUFSUploadFileRequest::clear_has_raw_file_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientUFSUploadFileRequest::clear_raw_file_size() {
  raw_file_size_ = 0u;
  clear_has_raw_file_size();
}
::google::protobuf::uint32 CMsgClientUFSUploadFileRequest::raw_file_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadFileRequest.raw_file_size)
  return raw_file_size_;
}
void CMsgClientUFSUploadFileRequest::set_raw_file_size(::google::protobuf::uint32 value) {
  set_has_raw_file_size();
  raw_file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadFileRequest.raw_file_size)
}

// optional bytes sha_file = 4;
bool CMsgClientUFSUploadFileRequest::has_sha_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUFSUploadFileRequest::set_has_sha_file() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUFSUploadFileRequest::clear_has_sha_file() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUFSUploadFileRequest::clear_sha_file() {
  sha_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha_file();
}
const ::std::string& CMsgClientUFSUploadFileRequest::sha_file() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadFileRequest.sha_file)
  return sha_file_.GetNoArena();
}
void CMsgClientUFSUploadFileRequest::set_sha_file(const ::std::string& value) {
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadFileRequest.sha_file)
}
#if LANG_CXX11
void CMsgClientUFSUploadFileRequest::set_sha_file(::std::string&& value) {
  set_has_sha_file();
  sha_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSUploadFileRequest.sha_file)
}
#endif
void CMsgClientUFSUploadFileRequest::set_sha_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSUploadFileRequest.sha_file)
}
void CMsgClientUFSUploadFileRequest::set_sha_file(const void* value, size_t size) {
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSUploadFileRequest.sha_file)
}
::std::string* CMsgClientUFSUploadFileRequest::mutable_sha_file() {
  set_has_sha_file();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSUploadFileRequest.sha_file)
  return sha_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSUploadFileRequest::release_sha_file() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSUploadFileRequest.sha_file)
  clear_has_sha_file();
  return sha_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSUploadFileRequest::set_allocated_sha_file(::std::string* sha_file) {
  if (sha_file != NULL) {
    set_has_sha_file();
  } else {
    clear_has_sha_file();
  }
  sha_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha_file);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSUploadFileRequest.sha_file)
}

// optional uint64 time_stamp = 5;
bool CMsgClientUFSUploadFileRequest::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientUFSUploadFileRequest::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientUFSUploadFileRequest::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientUFSUploadFileRequest::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_time_stamp();
}
::google::protobuf::uint64 CMsgClientUFSUploadFileRequest::time_stamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadFileRequest.time_stamp)
  return time_stamp_;
}
void CMsgClientUFSUploadFileRequest::set_time_stamp(::google::protobuf::uint64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadFileRequest.time_stamp)
}

// optional string file_name = 6;
bool CMsgClientUFSUploadFileRequest::has_file_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientUFSUploadFileRequest::set_has_file_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientUFSUploadFileRequest::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientUFSUploadFileRequest::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
const ::std::string& CMsgClientUFSUploadFileRequest::file_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadFileRequest.file_name)
  return file_name_.GetNoArena();
}
void CMsgClientUFSUploadFileRequest::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadFileRequest.file_name)
}
#if LANG_CXX11
void CMsgClientUFSUploadFileRequest::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSUploadFileRequest.file_name)
}
#endif
void CMsgClientUFSUploadFileRequest::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSUploadFileRequest.file_name)
}
void CMsgClientUFSUploadFileRequest::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSUploadFileRequest.file_name)
}
::std::string* CMsgClientUFSUploadFileRequest::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSUploadFileRequest.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSUploadFileRequest::release_file_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSUploadFileRequest.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSUploadFileRequest::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSUploadFileRequest.file_name)
}

// optional uint32 platforms_to_sync_deprecated = 7;
bool CMsgClientUFSUploadFileRequest::has_platforms_to_sync_deprecated() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientUFSUploadFileRequest::set_has_platforms_to_sync_deprecated() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientUFSUploadFileRequest::clear_has_platforms_to_sync_deprecated() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientUFSUploadFileRequest::clear_platforms_to_sync_deprecated() {
  platforms_to_sync_deprecated_ = 0u;
  clear_has_platforms_to_sync_deprecated();
}
::google::protobuf::uint32 CMsgClientUFSUploadFileRequest::platforms_to_sync_deprecated() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadFileRequest.platforms_to_sync_deprecated)
  return platforms_to_sync_deprecated_;
}
void CMsgClientUFSUploadFileRequest::set_platforms_to_sync_deprecated(::google::protobuf::uint32 value) {
  set_has_platforms_to_sync_deprecated();
  platforms_to_sync_deprecated_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadFileRequest.platforms_to_sync_deprecated)
}

// optional uint32 platforms_to_sync = 8 [default = 4294967295];
bool CMsgClientUFSUploadFileRequest::has_platforms_to_sync() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgClientUFSUploadFileRequest::set_has_platforms_to_sync() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgClientUFSUploadFileRequest::clear_has_platforms_to_sync() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgClientUFSUploadFileRequest::clear_platforms_to_sync() {
  platforms_to_sync_ = 4294967295u;
  clear_has_platforms_to_sync();
}
::google::protobuf::uint32 CMsgClientUFSUploadFileRequest::platforms_to_sync() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadFileRequest.platforms_to_sync)
  return platforms_to_sync_;
}
void CMsgClientUFSUploadFileRequest::set_platforms_to_sync(::google::protobuf::uint32 value) {
  set_has_platforms_to_sync();
  platforms_to_sync_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadFileRequest.platforms_to_sync)
}

// optional uint32 cell_id = 9;
bool CMsgClientUFSUploadFileRequest::has_cell_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgClientUFSUploadFileRequest::set_has_cell_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgClientUFSUploadFileRequest::clear_has_cell_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgClientUFSUploadFileRequest::clear_cell_id() {
  cell_id_ = 0u;
  clear_has_cell_id();
}
::google::protobuf::uint32 CMsgClientUFSUploadFileRequest::cell_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadFileRequest.cell_id)
  return cell_id_;
}
void CMsgClientUFSUploadFileRequest::set_cell_id(::google::protobuf::uint32 value) {
  set_has_cell_id();
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadFileRequest.cell_id)
}

// optional bool can_encrypt = 10;
bool CMsgClientUFSUploadFileRequest::has_can_encrypt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgClientUFSUploadFileRequest::set_has_can_encrypt() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgClientUFSUploadFileRequest::clear_has_can_encrypt() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgClientUFSUploadFileRequest::clear_can_encrypt() {
  can_encrypt_ = false;
  clear_has_can_encrypt();
}
bool CMsgClientUFSUploadFileRequest::can_encrypt() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadFileRequest.can_encrypt)
  return can_encrypt_;
}
void CMsgClientUFSUploadFileRequest::set_can_encrypt(bool value) {
  set_has_can_encrypt();
  can_encrypt_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadFileRequest.can_encrypt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSUploadFileResponse::kEresultFieldNumber;
const int CMsgClientUFSUploadFileResponse::kShaFileFieldNumber;
const int CMsgClientUFSUploadFileResponse::kUseHttpFieldNumber;
const int CMsgClientUFSUploadFileResponse::kHttpHostFieldNumber;
const int CMsgClientUFSUploadFileResponse::kHttpUrlFieldNumber;
const int CMsgClientUFSUploadFileResponse::kKvHeadersFieldNumber;
const int CMsgClientUFSUploadFileResponse::kUseHttpsFieldNumber;
const int CMsgClientUFSUploadFileResponse::kEncryptFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSUploadFileResponse::CMsgClientUFSUploadFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSUploadFileResponse)
}
CMsgClientUFSUploadFileResponse::CMsgClientUFSUploadFileResponse(const CMsgClientUFSUploadFileResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_file()) {
    sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
  }
  http_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_http_host()) {
    http_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_host_);
  }
  http_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_http_url()) {
    http_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_url_);
  }
  kv_headers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_kv_headers()) {
    kv_headers_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kv_headers_);
  }
  ::memcpy(&use_http_, &from.use_http_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&use_http_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSUploadFileResponse)
}

void CMsgClientUFSUploadFileResponse::SharedCtor() {
  _cached_size_ = 0;
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kv_headers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&use_http_, 0, reinterpret_cast<char*>(&encrypt_file_) -
    reinterpret_cast<char*>(&use_http_) + sizeof(encrypt_file_));
  eresult_ = 2;
}

CMsgClientUFSUploadFileResponse::~CMsgClientUFSUploadFileResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSUploadFileResponse)
  SharedDtor();
}

void CMsgClientUFSUploadFileResponse::SharedDtor() {
  sha_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kv_headers_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSUploadFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSUploadFileResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSUploadFileResponse& CMsgClientUFSUploadFileResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSUploadFileResponse* CMsgClientUFSUploadFileResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSUploadFileResponse* n = new CMsgClientUFSUploadFileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSUploadFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSUploadFileResponse)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_sha_file()) {
      GOOGLE_DCHECK(!sha_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sha_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_http_host()) {
      GOOGLE_DCHECK(!http_host_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*http_host_.UnsafeRawStringPointer())->clear();
    }
    if (has_http_url()) {
      GOOGLE_DCHECK(!http_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*http_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_kv_headers()) {
      GOOGLE_DCHECK(!kv_headers_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*kv_headers_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&use_http_, 0, reinterpret_cast<char*>(&encrypt_file_) -
      reinterpret_cast<char*>(&use_http_) + sizeof(encrypt_file_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSUploadFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSUploadFileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_file = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_http = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_use_http();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_http_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string http_host = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->http_host().data(), this->http_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSUploadFileResponse.http_host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string http_url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->http_url().data(), this->http_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSUploadFileResponse.http_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes kv_headers = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_kv_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_https = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_use_https();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_https_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_file = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_encrypt_file();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_file_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSUploadFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSUploadFileResponse)
  return false;
#undef DO_
}

void CMsgClientUFSUploadFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSUploadFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional bytes sha_file = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sha_file(), output);
  }

  // optional bool use_http = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_http(), output);
  }

  // optional string http_host = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_host().data(), this->http_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSUploadFileResponse.http_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->http_host(), output);
  }

  // optional string http_url = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_url().data(), this->http_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSUploadFileResponse.http_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->http_url(), output);
  }

  // optional bytes kv_headers = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->kv_headers(), output);
  }

  // optional bool use_https = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->use_https(), output);
  }

  // optional bool encrypt_file = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->encrypt_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSUploadFileResponse)
}

::google::protobuf::uint8* CMsgClientUFSUploadFileResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSUploadFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional bytes sha_file = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sha_file(), target);
  }

  // optional bool use_http = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_http(), target);
  }

  // optional string http_host = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_host().data(), this->http_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSUploadFileResponse.http_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->http_host(), target);
  }

  // optional string http_url = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_url().data(), this->http_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSUploadFileResponse.http_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->http_url(), target);
  }

  // optional bytes kv_headers = 6;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->kv_headers(), target);
  }

  // optional bool use_https = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->use_https(), target);
  }

  // optional bool encrypt_file = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->encrypt_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSUploadFileResponse)
  return target;
}

size_t CMsgClientUFSUploadFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSUploadFileResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes sha_file = 2;
    if (has_sha_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional string http_host = 4;
    if (has_http_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->http_host());
    }

    // optional string http_url = 5;
    if (has_http_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->http_url());
    }

    // optional bytes kv_headers = 6;
    if (has_kv_headers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->kv_headers());
    }

    // optional bool use_http = 3;
    if (has_use_http()) {
      total_size += 1 + 1;
    }

    // optional bool use_https = 7;
    if (has_use_https()) {
      total_size += 1 + 1;
    }

    // optional bool encrypt_file = 8;
    if (has_encrypt_file()) {
      total_size += 1 + 1;
    }

    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSUploadFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSUploadFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSUploadFileResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSUploadFileResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSUploadFileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSUploadFileResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSUploadFileResponse::MergeFrom(const CMsgClientUFSUploadFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSUploadFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sha_file();
      sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_http_host();
      http_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_host_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_http_url();
      http_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_kv_headers();
      kv_headers_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kv_headers_);
    }
    if (cached_has_bits & 0x00000010u) {
      use_http_ = from.use_http_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_https_ = from.use_https_;
    }
    if (cached_has_bits & 0x00000040u) {
      encrypt_file_ = from.encrypt_file_;
    }
    if (cached_has_bits & 0x00000080u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSUploadFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSUploadFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSUploadFileResponse::CopyFrom(const CMsgClientUFSUploadFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSUploadFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadFileResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSUploadFileResponse::Swap(CMsgClientUFSUploadFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSUploadFileResponse::InternalSwap(CMsgClientUFSUploadFileResponse* other) {
  sha_file_.Swap(&other->sha_file_);
  http_host_.Swap(&other->http_host_);
  http_url_.Swap(&other->http_url_);
  kv_headers_.Swap(&other->kv_headers_);
  std::swap(use_http_, other->use_http_);
  std::swap(use_https_, other->use_https_);
  std::swap(encrypt_file_, other->encrypt_file_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSUploadFileResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSUploadFileResponse

// optional int32 eresult = 1 [default = 2];
bool CMsgClientUFSUploadFileResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgClientUFSUploadFileResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgClientUFSUploadFileResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgClientUFSUploadFileResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientUFSUploadFileResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadFileResponse.eresult)
  return eresult_;
}
void CMsgClientUFSUploadFileResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadFileResponse.eresult)
}

// optional bytes sha_file = 2;
bool CMsgClientUFSUploadFileResponse::has_sha_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUFSUploadFileResponse::set_has_sha_file() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUFSUploadFileResponse::clear_has_sha_file() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUFSUploadFileResponse::clear_sha_file() {
  sha_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha_file();
}
const ::std::string& CMsgClientUFSUploadFileResponse::sha_file() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadFileResponse.sha_file)
  return sha_file_.GetNoArena();
}
void CMsgClientUFSUploadFileResponse::set_sha_file(const ::std::string& value) {
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadFileResponse.sha_file)
}
#if LANG_CXX11
void CMsgClientUFSUploadFileResponse::set_sha_file(::std::string&& value) {
  set_has_sha_file();
  sha_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSUploadFileResponse.sha_file)
}
#endif
void CMsgClientUFSUploadFileResponse::set_sha_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSUploadFileResponse.sha_file)
}
void CMsgClientUFSUploadFileResponse::set_sha_file(const void* value, size_t size) {
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSUploadFileResponse.sha_file)
}
::std::string* CMsgClientUFSUploadFileResponse::mutable_sha_file() {
  set_has_sha_file();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSUploadFileResponse.sha_file)
  return sha_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSUploadFileResponse::release_sha_file() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSUploadFileResponse.sha_file)
  clear_has_sha_file();
  return sha_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSUploadFileResponse::set_allocated_sha_file(::std::string* sha_file) {
  if (sha_file != NULL) {
    set_has_sha_file();
  } else {
    clear_has_sha_file();
  }
  sha_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha_file);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSUploadFileResponse.sha_file)
}

// optional bool use_http = 3;
bool CMsgClientUFSUploadFileResponse::has_use_http() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientUFSUploadFileResponse::set_has_use_http() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientUFSUploadFileResponse::clear_has_use_http() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientUFSUploadFileResponse::clear_use_http() {
  use_http_ = false;
  clear_has_use_http();
}
bool CMsgClientUFSUploadFileResponse::use_http() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadFileResponse.use_http)
  return use_http_;
}
void CMsgClientUFSUploadFileResponse::set_use_http(bool value) {
  set_has_use_http();
  use_http_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadFileResponse.use_http)
}

// optional string http_host = 4;
bool CMsgClientUFSUploadFileResponse::has_http_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientUFSUploadFileResponse::set_has_http_host() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientUFSUploadFileResponse::clear_has_http_host() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientUFSUploadFileResponse::clear_http_host() {
  http_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_http_host();
}
const ::std::string& CMsgClientUFSUploadFileResponse::http_host() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadFileResponse.http_host)
  return http_host_.GetNoArena();
}
void CMsgClientUFSUploadFileResponse::set_http_host(const ::std::string& value) {
  set_has_http_host();
  http_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadFileResponse.http_host)
}
#if LANG_CXX11
void CMsgClientUFSUploadFileResponse::set_http_host(::std::string&& value) {
  set_has_http_host();
  http_host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSUploadFileResponse.http_host)
}
#endif
void CMsgClientUFSUploadFileResponse::set_http_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_http_host();
  http_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSUploadFileResponse.http_host)
}
void CMsgClientUFSUploadFileResponse::set_http_host(const char* value, size_t size) {
  set_has_http_host();
  http_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSUploadFileResponse.http_host)
}
::std::string* CMsgClientUFSUploadFileResponse::mutable_http_host() {
  set_has_http_host();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSUploadFileResponse.http_host)
  return http_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSUploadFileResponse::release_http_host() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSUploadFileResponse.http_host)
  clear_has_http_host();
  return http_host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSUploadFileResponse::set_allocated_http_host(::std::string* http_host) {
  if (http_host != NULL) {
    set_has_http_host();
  } else {
    clear_has_http_host();
  }
  http_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), http_host);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSUploadFileResponse.http_host)
}

// optional string http_url = 5;
bool CMsgClientUFSUploadFileResponse::has_http_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientUFSUploadFileResponse::set_has_http_url() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientUFSUploadFileResponse::clear_has_http_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientUFSUploadFileResponse::clear_http_url() {
  http_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_http_url();
}
const ::std::string& CMsgClientUFSUploadFileResponse::http_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadFileResponse.http_url)
  return http_url_.GetNoArena();
}
void CMsgClientUFSUploadFileResponse::set_http_url(const ::std::string& value) {
  set_has_http_url();
  http_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadFileResponse.http_url)
}
#if LANG_CXX11
void CMsgClientUFSUploadFileResponse::set_http_url(::std::string&& value) {
  set_has_http_url();
  http_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSUploadFileResponse.http_url)
}
#endif
void CMsgClientUFSUploadFileResponse::set_http_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_http_url();
  http_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSUploadFileResponse.http_url)
}
void CMsgClientUFSUploadFileResponse::set_http_url(const char* value, size_t size) {
  set_has_http_url();
  http_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSUploadFileResponse.http_url)
}
::std::string* CMsgClientUFSUploadFileResponse::mutable_http_url() {
  set_has_http_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSUploadFileResponse.http_url)
  return http_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSUploadFileResponse::release_http_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSUploadFileResponse.http_url)
  clear_has_http_url();
  return http_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSUploadFileResponse::set_allocated_http_url(::std::string* http_url) {
  if (http_url != NULL) {
    set_has_http_url();
  } else {
    clear_has_http_url();
  }
  http_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), http_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSUploadFileResponse.http_url)
}

// optional bytes kv_headers = 6;
bool CMsgClientUFSUploadFileResponse::has_kv_headers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientUFSUploadFileResponse::set_has_kv_headers() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientUFSUploadFileResponse::clear_has_kv_headers() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientUFSUploadFileResponse::clear_kv_headers() {
  kv_headers_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_kv_headers();
}
const ::std::string& CMsgClientUFSUploadFileResponse::kv_headers() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadFileResponse.kv_headers)
  return kv_headers_.GetNoArena();
}
void CMsgClientUFSUploadFileResponse::set_kv_headers(const ::std::string& value) {
  set_has_kv_headers();
  kv_headers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadFileResponse.kv_headers)
}
#if LANG_CXX11
void CMsgClientUFSUploadFileResponse::set_kv_headers(::std::string&& value) {
  set_has_kv_headers();
  kv_headers_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSUploadFileResponse.kv_headers)
}
#endif
void CMsgClientUFSUploadFileResponse::set_kv_headers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_kv_headers();
  kv_headers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSUploadFileResponse.kv_headers)
}
void CMsgClientUFSUploadFileResponse::set_kv_headers(const void* value, size_t size) {
  set_has_kv_headers();
  kv_headers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSUploadFileResponse.kv_headers)
}
::std::string* CMsgClientUFSUploadFileResponse::mutable_kv_headers() {
  set_has_kv_headers();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSUploadFileResponse.kv_headers)
  return kv_headers_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSUploadFileResponse::release_kv_headers() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSUploadFileResponse.kv_headers)
  clear_has_kv_headers();
  return kv_headers_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSUploadFileResponse::set_allocated_kv_headers(::std::string* kv_headers) {
  if (kv_headers != NULL) {
    set_has_kv_headers();
  } else {
    clear_has_kv_headers();
  }
  kv_headers_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kv_headers);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSUploadFileResponse.kv_headers)
}

// optional bool use_https = 7;
bool CMsgClientUFSUploadFileResponse::has_use_https() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientUFSUploadFileResponse::set_has_use_https() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientUFSUploadFileResponse::clear_has_use_https() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientUFSUploadFileResponse::clear_use_https() {
  use_https_ = false;
  clear_has_use_https();
}
bool CMsgClientUFSUploadFileResponse::use_https() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadFileResponse.use_https)
  return use_https_;
}
void CMsgClientUFSUploadFileResponse::set_use_https(bool value) {
  set_has_use_https();
  use_https_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadFileResponse.use_https)
}

// optional bool encrypt_file = 8;
bool CMsgClientUFSUploadFileResponse::has_encrypt_file() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientUFSUploadFileResponse::set_has_encrypt_file() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientUFSUploadFileResponse::clear_has_encrypt_file() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientUFSUploadFileResponse::clear_encrypt_file() {
  encrypt_file_ = false;
  clear_has_encrypt_file();
}
bool CMsgClientUFSUploadFileResponse::encrypt_file() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadFileResponse.encrypt_file)
  return encrypt_file_;
}
void CMsgClientUFSUploadFileResponse::set_encrypt_file(bool value) {
  set_has_encrypt_file();
  encrypt_file_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadFileResponse.encrypt_file)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSUploadCommit_File::kEresultFieldNumber;
const int CMsgClientUFSUploadCommit_File::kAppIdFieldNumber;
const int CMsgClientUFSUploadCommit_File::kShaFileFieldNumber;
const int CMsgClientUFSUploadCommit_File::kCubFileFieldNumber;
const int CMsgClientUFSUploadCommit_File::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSUploadCommit_File::CMsgClientUFSUploadCommit_File()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSUploadCommit.File)
}
CMsgClientUFSUploadCommit_File::CMsgClientUFSUploadCommit_File(const CMsgClientUFSUploadCommit_File& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_file()) {
    sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
  }
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSUploadCommit.File)
}

void CMsgClientUFSUploadCommit_File::SharedCtor() {
  _cached_size_ = 0;
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&cub_file_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(cub_file_));
  eresult_ = 2;
}

CMsgClientUFSUploadCommit_File::~CMsgClientUFSUploadCommit_File() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSUploadCommit.File)
  SharedDtor();
}

void CMsgClientUFSUploadCommit_File::SharedDtor() {
  sha_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSUploadCommit_File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSUploadCommit_File::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSUploadCommit_File& CMsgClientUFSUploadCommit_File::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSUploadCommit_File* CMsgClientUFSUploadCommit_File::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSUploadCommit_File* n = new CMsgClientUFSUploadCommit_File;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSUploadCommit_File::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSUploadCommit.File)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_sha_file()) {
      GOOGLE_DCHECK(!sha_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sha_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_file_name()) {
      GOOGLE_DCHECK(!file_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&cub_file_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(cub_file_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSUploadCommit_File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSUploadCommit.File)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cub_file = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_cub_file();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cub_file_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSUploadCommit.File.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSUploadCommit.File)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSUploadCommit.File)
  return false;
#undef DO_
}

void CMsgClientUFSUploadCommit_File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSUploadCommit.File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional bytes sha_file = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sha_file(), output);
  }

  // optional uint32 cub_file = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cub_file(), output);
  }

  // optional string file_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSUploadCommit.File.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->file_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSUploadCommit.File)
}

::google::protobuf::uint8* CMsgClientUFSUploadCommit_File::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSUploadCommit.File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_id(), target);
  }

  // optional bytes sha_file = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sha_file(), target);
  }

  // optional uint32 cub_file = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cub_file(), target);
  }

  // optional string file_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSUploadCommit.File.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->file_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSUploadCommit.File)
  return target;
}

size_t CMsgClientUFSUploadCommit_File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSUploadCommit.File)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes sha_file = 3;
    if (has_sha_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional string file_name = 5;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 cub_file = 4;
    if (has_cub_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cub_file());
    }

    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSUploadCommit_File::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSUploadCommit.File)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSUploadCommit_File* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSUploadCommit_File>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSUploadCommit.File)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSUploadCommit.File)
    MergeFrom(*source);
  }
}

void CMsgClientUFSUploadCommit_File::MergeFrom(const CMsgClientUFSUploadCommit_File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSUploadCommit.File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sha_file();
      sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      cub_file_ = from.cub_file_;
    }
    if (cached_has_bits & 0x00000010u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSUploadCommit_File::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSUploadCommit.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSUploadCommit_File::CopyFrom(const CMsgClientUFSUploadCommit_File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSUploadCommit.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadCommit_File::IsInitialized() const {
  return true;
}

void CMsgClientUFSUploadCommit_File::Swap(CMsgClientUFSUploadCommit_File* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSUploadCommit_File::InternalSwap(CMsgClientUFSUploadCommit_File* other) {
  sha_file_.Swap(&other->sha_file_);
  file_name_.Swap(&other->file_name_);
  std::swap(app_id_, other->app_id_);
  std::swap(cub_file_, other->cub_file_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSUploadCommit_File::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSUploadCommit_File

// optional int32 eresult = 1 [default = 2];
bool CMsgClientUFSUploadCommit_File::has_eresult() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientUFSUploadCommit_File::set_has_eresult() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientUFSUploadCommit_File::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientUFSUploadCommit_File::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientUFSUploadCommit_File::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadCommit.File.eresult)
  return eresult_;
}
void CMsgClientUFSUploadCommit_File::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadCommit.File.eresult)
}

// optional uint32 app_id = 2;
bool CMsgClientUFSUploadCommit_File::has_app_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientUFSUploadCommit_File::set_has_app_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientUFSUploadCommit_File::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientUFSUploadCommit_File::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientUFSUploadCommit_File::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadCommit.File.app_id)
  return app_id_;
}
void CMsgClientUFSUploadCommit_File::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadCommit.File.app_id)
}

// optional bytes sha_file = 3;
bool CMsgClientUFSUploadCommit_File::has_sha_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUFSUploadCommit_File::set_has_sha_file() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUFSUploadCommit_File::clear_has_sha_file() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUFSUploadCommit_File::clear_sha_file() {
  sha_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha_file();
}
const ::std::string& CMsgClientUFSUploadCommit_File::sha_file() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadCommit.File.sha_file)
  return sha_file_.GetNoArena();
}
void CMsgClientUFSUploadCommit_File::set_sha_file(const ::std::string& value) {
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadCommit.File.sha_file)
}
#if LANG_CXX11
void CMsgClientUFSUploadCommit_File::set_sha_file(::std::string&& value) {
  set_has_sha_file();
  sha_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSUploadCommit.File.sha_file)
}
#endif
void CMsgClientUFSUploadCommit_File::set_sha_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSUploadCommit.File.sha_file)
}
void CMsgClientUFSUploadCommit_File::set_sha_file(const void* value, size_t size) {
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSUploadCommit.File.sha_file)
}
::std::string* CMsgClientUFSUploadCommit_File::mutable_sha_file() {
  set_has_sha_file();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSUploadCommit.File.sha_file)
  return sha_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSUploadCommit_File::release_sha_file() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSUploadCommit.File.sha_file)
  clear_has_sha_file();
  return sha_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSUploadCommit_File::set_allocated_sha_file(::std::string* sha_file) {
  if (sha_file != NULL) {
    set_has_sha_file();
  } else {
    clear_has_sha_file();
  }
  sha_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha_file);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSUploadCommit.File.sha_file)
}

// optional uint32 cub_file = 4;
bool CMsgClientUFSUploadCommit_File::has_cub_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientUFSUploadCommit_File::set_has_cub_file() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientUFSUploadCommit_File::clear_has_cub_file() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientUFSUploadCommit_File::clear_cub_file() {
  cub_file_ = 0u;
  clear_has_cub_file();
}
::google::protobuf::uint32 CMsgClientUFSUploadCommit_File::cub_file() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadCommit.File.cub_file)
  return cub_file_;
}
void CMsgClientUFSUploadCommit_File::set_cub_file(::google::protobuf::uint32 value) {
  set_has_cub_file();
  cub_file_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadCommit.File.cub_file)
}

// optional string file_name = 5;
bool CMsgClientUFSUploadCommit_File::has_file_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientUFSUploadCommit_File::set_has_file_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientUFSUploadCommit_File::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientUFSUploadCommit_File::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
const ::std::string& CMsgClientUFSUploadCommit_File::file_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadCommit.File.file_name)
  return file_name_.GetNoArena();
}
void CMsgClientUFSUploadCommit_File::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadCommit.File.file_name)
}
#if LANG_CXX11
void CMsgClientUFSUploadCommit_File::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSUploadCommit.File.file_name)
}
#endif
void CMsgClientUFSUploadCommit_File::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSUploadCommit.File.file_name)
}
void CMsgClientUFSUploadCommit_File::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSUploadCommit.File.file_name)
}
::std::string* CMsgClientUFSUploadCommit_File::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSUploadCommit.File.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSUploadCommit_File::release_file_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSUploadCommit.File.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSUploadCommit_File::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSUploadCommit.File.file_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSUploadCommit::kFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSUploadCommit::CMsgClientUFSUploadCommit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSUploadCommit)
}
CMsgClientUFSUploadCommit::CMsgClientUFSUploadCommit(const CMsgClientUFSUploadCommit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      files_(from.files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSUploadCommit)
}

void CMsgClientUFSUploadCommit::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClientUFSUploadCommit::~CMsgClientUFSUploadCommit() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSUploadCommit)
  SharedDtor();
}

void CMsgClientUFSUploadCommit::SharedDtor() {
}

void CMsgClientUFSUploadCommit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSUploadCommit::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSUploadCommit& CMsgClientUFSUploadCommit::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSUploadCommit* CMsgClientUFSUploadCommit::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSUploadCommit* n = new CMsgClientUFSUploadCommit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSUploadCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSUploadCommit)
  files_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSUploadCommit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSUploadCommit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientUFSUploadCommit.File files = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSUploadCommit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSUploadCommit)
  return false;
#undef DO_
}

void CMsgClientUFSUploadCommit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSUploadCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientUFSUploadCommit.File files = 1;
  for (unsigned int i = 0, n = this->files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->files(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSUploadCommit)
}

::google::protobuf::uint8* CMsgClientUFSUploadCommit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSUploadCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientUFSUploadCommit.File files = 1;
  for (unsigned int i = 0, n = this->files_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->files(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSUploadCommit)
  return target;
}

size_t CMsgClientUFSUploadCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSUploadCommit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientUFSUploadCommit.File files = 1;
  {
    unsigned int count = this->files_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->files(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSUploadCommit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSUploadCommit)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSUploadCommit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSUploadCommit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSUploadCommit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSUploadCommit)
    MergeFrom(*source);
  }
}

void CMsgClientUFSUploadCommit::MergeFrom(const CMsgClientUFSUploadCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSUploadCommit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
}

void CMsgClientUFSUploadCommit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSUploadCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSUploadCommit::CopyFrom(const CMsgClientUFSUploadCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSUploadCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadCommit::IsInitialized() const {
  return true;
}

void CMsgClientUFSUploadCommit::Swap(CMsgClientUFSUploadCommit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSUploadCommit::InternalSwap(CMsgClientUFSUploadCommit* other) {
  files_.InternalSwap(&other->files_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSUploadCommit::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSUploadCommit

// repeated .proto.steam.CMsgClientUFSUploadCommit.File files = 1;
int CMsgClientUFSUploadCommit::files_size() const {
  return files_.size();
}
void CMsgClientUFSUploadCommit::clear_files() {
  files_.Clear();
}
const ::proto::steam::CMsgClientUFSUploadCommit_File& CMsgClientUFSUploadCommit::files(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadCommit.files)
  return files_.Get(index);
}
::proto::steam::CMsgClientUFSUploadCommit_File* CMsgClientUFSUploadCommit::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSUploadCommit.files)
  return files_.Mutable(index);
}
::proto::steam::CMsgClientUFSUploadCommit_File* CMsgClientUFSUploadCommit::add_files() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientUFSUploadCommit.files)
  return files_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientUFSUploadCommit_File >*
CMsgClientUFSUploadCommit::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientUFSUploadCommit.files)
  return &files_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientUFSUploadCommit_File >&
CMsgClientUFSUploadCommit::files() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientUFSUploadCommit.files)
  return files_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSUploadCommitResponse_File::kEresultFieldNumber;
const int CMsgClientUFSUploadCommitResponse_File::kAppIdFieldNumber;
const int CMsgClientUFSUploadCommitResponse_File::kShaFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSUploadCommitResponse_File::CMsgClientUFSUploadCommitResponse_File()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSUploadCommitResponse.File)
}
CMsgClientUFSUploadCommitResponse_File::CMsgClientUFSUploadCommitResponse_File(const CMsgClientUFSUploadCommitResponse_File& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_file()) {
    sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSUploadCommitResponse.File)
}

void CMsgClientUFSUploadCommitResponse_File::SharedCtor() {
  _cached_size_ = 0;
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0u;
  eresult_ = 2;
}

CMsgClientUFSUploadCommitResponse_File::~CMsgClientUFSUploadCommitResponse_File() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  SharedDtor();
}

void CMsgClientUFSUploadCommitResponse_File::SharedDtor() {
  sha_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSUploadCommitResponse_File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSUploadCommitResponse_File::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSUploadCommitResponse_File& CMsgClientUFSUploadCommitResponse_File::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSUploadCommitResponse_File* CMsgClientUFSUploadCommitResponse_File::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSUploadCommitResponse_File* n = new CMsgClientUFSUploadCommitResponse_File;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSUploadCommitResponse_File::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  if (has_sha_file()) {
    GOOGLE_DCHECK(!sha_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*sha_file_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    app_id_ = 0u;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSUploadCommitResponse_File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  return false;
#undef DO_
}

void CMsgClientUFSUploadCommitResponse_File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional bytes sha_file = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sha_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSUploadCommitResponse.File)
}

::google::protobuf::uint8* CMsgClientUFSUploadCommitResponse_File::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_id(), target);
  }

  // optional bytes sha_file = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sha_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  return target;
}

size_t CMsgClientUFSUploadCommitResponse_File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes sha_file = 3;
    if (has_sha_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSUploadCommitResponse_File::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSUploadCommitResponse_File* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSUploadCommitResponse_File>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSUploadCommitResponse.File)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSUploadCommitResponse.File)
    MergeFrom(*source);
  }
}

void CMsgClientUFSUploadCommitResponse_File::MergeFrom(const CMsgClientUFSUploadCommitResponse_File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sha_file();
      sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSUploadCommitResponse_File::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSUploadCommitResponse_File::CopyFrom(const CMsgClientUFSUploadCommitResponse_File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSUploadCommitResponse.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadCommitResponse_File::IsInitialized() const {
  return true;
}

void CMsgClientUFSUploadCommitResponse_File::Swap(CMsgClientUFSUploadCommitResponse_File* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSUploadCommitResponse_File::InternalSwap(CMsgClientUFSUploadCommitResponse_File* other) {
  sha_file_.Swap(&other->sha_file_);
  std::swap(app_id_, other->app_id_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSUploadCommitResponse_File::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSUploadCommitResponse_File

// optional int32 eresult = 1 [default = 2];
bool CMsgClientUFSUploadCommitResponse_File::has_eresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientUFSUploadCommitResponse_File::set_has_eresult() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientUFSUploadCommitResponse_File::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientUFSUploadCommitResponse_File::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientUFSUploadCommitResponse_File::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadCommitResponse.File.eresult)
  return eresult_;
}
void CMsgClientUFSUploadCommitResponse_File::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadCommitResponse.File.eresult)
}

// optional uint32 app_id = 2;
bool CMsgClientUFSUploadCommitResponse_File::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientUFSUploadCommitResponse_File::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientUFSUploadCommitResponse_File::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientUFSUploadCommitResponse_File::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientUFSUploadCommitResponse_File::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadCommitResponse.File.app_id)
  return app_id_;
}
void CMsgClientUFSUploadCommitResponse_File::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadCommitResponse.File.app_id)
}

// optional bytes sha_file = 3;
bool CMsgClientUFSUploadCommitResponse_File::has_sha_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUFSUploadCommitResponse_File::set_has_sha_file() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUFSUploadCommitResponse_File::clear_has_sha_file() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUFSUploadCommitResponse_File::clear_sha_file() {
  sha_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha_file();
}
const ::std::string& CMsgClientUFSUploadCommitResponse_File::sha_file() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadCommitResponse.File.sha_file)
  return sha_file_.GetNoArena();
}
void CMsgClientUFSUploadCommitResponse_File::set_sha_file(const ::std::string& value) {
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadCommitResponse.File.sha_file)
}
#if LANG_CXX11
void CMsgClientUFSUploadCommitResponse_File::set_sha_file(::std::string&& value) {
  set_has_sha_file();
  sha_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSUploadCommitResponse.File.sha_file)
}
#endif
void CMsgClientUFSUploadCommitResponse_File::set_sha_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSUploadCommitResponse.File.sha_file)
}
void CMsgClientUFSUploadCommitResponse_File::set_sha_file(const void* value, size_t size) {
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSUploadCommitResponse.File.sha_file)
}
::std::string* CMsgClientUFSUploadCommitResponse_File::mutable_sha_file() {
  set_has_sha_file();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSUploadCommitResponse.File.sha_file)
  return sha_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSUploadCommitResponse_File::release_sha_file() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSUploadCommitResponse.File.sha_file)
  clear_has_sha_file();
  return sha_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSUploadCommitResponse_File::set_allocated_sha_file(::std::string* sha_file) {
  if (sha_file != NULL) {
    set_has_sha_file();
  } else {
    clear_has_sha_file();
  }
  sha_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha_file);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSUploadCommitResponse.File.sha_file)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSUploadCommitResponse::kFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSUploadCommitResponse::CMsgClientUFSUploadCommitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSUploadCommitResponse)
}
CMsgClientUFSUploadCommitResponse::CMsgClientUFSUploadCommitResponse(const CMsgClientUFSUploadCommitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      files_(from.files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSUploadCommitResponse)
}

void CMsgClientUFSUploadCommitResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClientUFSUploadCommitResponse::~CMsgClientUFSUploadCommitResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSUploadCommitResponse)
  SharedDtor();
}

void CMsgClientUFSUploadCommitResponse::SharedDtor() {
}

void CMsgClientUFSUploadCommitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSUploadCommitResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSUploadCommitResponse& CMsgClientUFSUploadCommitResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSUploadCommitResponse* CMsgClientUFSUploadCommitResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSUploadCommitResponse* n = new CMsgClientUFSUploadCommitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSUploadCommitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSUploadCommitResponse)
  files_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSUploadCommitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSUploadCommitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientUFSUploadCommitResponse.File files = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSUploadCommitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSUploadCommitResponse)
  return false;
#undef DO_
}

void CMsgClientUFSUploadCommitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSUploadCommitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientUFSUploadCommitResponse.File files = 1;
  for (unsigned int i = 0, n = this->files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->files(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSUploadCommitResponse)
}

::google::protobuf::uint8* CMsgClientUFSUploadCommitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSUploadCommitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientUFSUploadCommitResponse.File files = 1;
  for (unsigned int i = 0, n = this->files_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->files(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSUploadCommitResponse)
  return target;
}

size_t CMsgClientUFSUploadCommitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSUploadCommitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientUFSUploadCommitResponse.File files = 1;
  {
    unsigned int count = this->files_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->files(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSUploadCommitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSUploadCommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSUploadCommitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSUploadCommitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSUploadCommitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSUploadCommitResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSUploadCommitResponse::MergeFrom(const CMsgClientUFSUploadCommitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSUploadCommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
}

void CMsgClientUFSUploadCommitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSUploadCommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSUploadCommitResponse::CopyFrom(const CMsgClientUFSUploadCommitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSUploadCommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadCommitResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSUploadCommitResponse::Swap(CMsgClientUFSUploadCommitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSUploadCommitResponse::InternalSwap(CMsgClientUFSUploadCommitResponse* other) {
  files_.InternalSwap(&other->files_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSUploadCommitResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSUploadCommitResponse

// repeated .proto.steam.CMsgClientUFSUploadCommitResponse.File files = 1;
int CMsgClientUFSUploadCommitResponse::files_size() const {
  return files_.size();
}
void CMsgClientUFSUploadCommitResponse::clear_files() {
  files_.Clear();
}
const ::proto::steam::CMsgClientUFSUploadCommitResponse_File& CMsgClientUFSUploadCommitResponse::files(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadCommitResponse.files)
  return files_.Get(index);
}
::proto::steam::CMsgClientUFSUploadCommitResponse_File* CMsgClientUFSUploadCommitResponse::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSUploadCommitResponse.files)
  return files_.Mutable(index);
}
::proto::steam::CMsgClientUFSUploadCommitResponse_File* CMsgClientUFSUploadCommitResponse::add_files() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientUFSUploadCommitResponse.files)
  return files_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientUFSUploadCommitResponse_File >*
CMsgClientUFSUploadCommitResponse::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientUFSUploadCommitResponse.files)
  return &files_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientUFSUploadCommitResponse_File >&
CMsgClientUFSUploadCommitResponse::files() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientUFSUploadCommitResponse.files)
  return files_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSFileChunk::kShaFileFieldNumber;
const int CMsgClientUFSFileChunk::kFileStartFieldNumber;
const int CMsgClientUFSFileChunk::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSFileChunk::CMsgClientUFSFileChunk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSFileChunk)
}
CMsgClientUFSFileChunk::CMsgClientUFSFileChunk(const CMsgClientUFSFileChunk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_file()) {
    sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  file_start_ = from.file_start_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSFileChunk)
}

void CMsgClientUFSFileChunk::SharedCtor() {
  _cached_size_ = 0;
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_start_ = 0u;
}

CMsgClientUFSFileChunk::~CMsgClientUFSFileChunk() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSFileChunk)
  SharedDtor();
}

void CMsgClientUFSFileChunk::SharedDtor() {
  sha_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSFileChunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSFileChunk::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSFileChunk& CMsgClientUFSFileChunk::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSFileChunk* CMsgClientUFSFileChunk::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSFileChunk* n = new CMsgClientUFSFileChunk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSFileChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSFileChunk)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_sha_file()) {
      GOOGLE_DCHECK(!sha_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sha_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
  }
  file_start_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSFileChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSFileChunk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes sha_file = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_file_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSFileChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSFileChunk)
  return false;
#undef DO_
}

void CMsgClientUFSFileChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSFileChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes sha_file = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->sha_file(), output);
  }

  // optional uint32 file_start = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->file_start(), output);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSFileChunk)
}

::google::protobuf::uint8* CMsgClientUFSFileChunk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSFileChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes sha_file = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sha_file(), target);
  }

  // optional uint32 file_start = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->file_start(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSFileChunk)
  return target;
}

size_t CMsgClientUFSFileChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSFileChunk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes sha_file = 1;
    if (has_sha_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 file_start = 2;
    if (has_file_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_start());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSFileChunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSFileChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSFileChunk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSFileChunk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSFileChunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSFileChunk)
    MergeFrom(*source);
  }
}

void CMsgClientUFSFileChunk::MergeFrom(const CMsgClientUFSFileChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSFileChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sha_file();
      sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000004u) {
      file_start_ = from.file_start_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSFileChunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSFileChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSFileChunk::CopyFrom(const CMsgClientUFSFileChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSFileChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSFileChunk::IsInitialized() const {
  return true;
}

void CMsgClientUFSFileChunk::Swap(CMsgClientUFSFileChunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSFileChunk::InternalSwap(CMsgClientUFSFileChunk* other) {
  sha_file_.Swap(&other->sha_file_);
  data_.Swap(&other->data_);
  std::swap(file_start_, other->file_start_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSFileChunk::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSFileChunk

// optional bytes sha_file = 1;
bool CMsgClientUFSFileChunk::has_sha_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUFSFileChunk::set_has_sha_file() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUFSFileChunk::clear_has_sha_file() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUFSFileChunk::clear_sha_file() {
  sha_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha_file();
}
const ::std::string& CMsgClientUFSFileChunk::sha_file() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSFileChunk.sha_file)
  return sha_file_.GetNoArena();
}
void CMsgClientUFSFileChunk::set_sha_file(const ::std::string& value) {
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSFileChunk.sha_file)
}
#if LANG_CXX11
void CMsgClientUFSFileChunk::set_sha_file(::std::string&& value) {
  set_has_sha_file();
  sha_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSFileChunk.sha_file)
}
#endif
void CMsgClientUFSFileChunk::set_sha_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSFileChunk.sha_file)
}
void CMsgClientUFSFileChunk::set_sha_file(const void* value, size_t size) {
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSFileChunk.sha_file)
}
::std::string* CMsgClientUFSFileChunk::mutable_sha_file() {
  set_has_sha_file();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSFileChunk.sha_file)
  return sha_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSFileChunk::release_sha_file() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSFileChunk.sha_file)
  clear_has_sha_file();
  return sha_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSFileChunk::set_allocated_sha_file(::std::string* sha_file) {
  if (sha_file != NULL) {
    set_has_sha_file();
  } else {
    clear_has_sha_file();
  }
  sha_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha_file);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSFileChunk.sha_file)
}

// optional uint32 file_start = 2;
bool CMsgClientUFSFileChunk::has_file_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientUFSFileChunk::set_has_file_start() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientUFSFileChunk::clear_has_file_start() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientUFSFileChunk::clear_file_start() {
  file_start_ = 0u;
  clear_has_file_start();
}
::google::protobuf::uint32 CMsgClientUFSFileChunk::file_start() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSFileChunk.file_start)
  return file_start_;
}
void CMsgClientUFSFileChunk::set_file_start(::google::protobuf::uint32 value) {
  set_has_file_start();
  file_start_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSFileChunk.file_start)
}

// optional bytes data = 3;
bool CMsgClientUFSFileChunk::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientUFSFileChunk::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientUFSFileChunk::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientUFSFileChunk::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& CMsgClientUFSFileChunk::data() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSFileChunk.data)
  return data_.GetNoArena();
}
void CMsgClientUFSFileChunk::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSFileChunk.data)
}
#if LANG_CXX11
void CMsgClientUFSFileChunk::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSFileChunk.data)
}
#endif
void CMsgClientUFSFileChunk::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSFileChunk.data)
}
void CMsgClientUFSFileChunk::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSFileChunk.data)
}
::std::string* CMsgClientUFSFileChunk::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSFileChunk.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSFileChunk::release_data() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSFileChunk.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSFileChunk::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSFileChunk.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSTransferHeartbeat::CMsgClientUFSTransferHeartbeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSTransferHeartbeat)
}
CMsgClientUFSTransferHeartbeat::CMsgClientUFSTransferHeartbeat(const CMsgClientUFSTransferHeartbeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSTransferHeartbeat)
}

void CMsgClientUFSTransferHeartbeat::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClientUFSTransferHeartbeat::~CMsgClientUFSTransferHeartbeat() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSTransferHeartbeat)
  SharedDtor();
}

void CMsgClientUFSTransferHeartbeat::SharedDtor() {
}

void CMsgClientUFSTransferHeartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSTransferHeartbeat::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSTransferHeartbeat& CMsgClientUFSTransferHeartbeat::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSTransferHeartbeat* CMsgClientUFSTransferHeartbeat::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSTransferHeartbeat* n = new CMsgClientUFSTransferHeartbeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSTransferHeartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSTransferHeartbeat)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSTransferHeartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSTransferHeartbeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSTransferHeartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSTransferHeartbeat)
  return false;
#undef DO_
}

void CMsgClientUFSTransferHeartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSTransferHeartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSTransferHeartbeat)
}

::google::protobuf::uint8* CMsgClientUFSTransferHeartbeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSTransferHeartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSTransferHeartbeat)
  return target;
}

size_t CMsgClientUFSTransferHeartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSTransferHeartbeat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSTransferHeartbeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSTransferHeartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSTransferHeartbeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSTransferHeartbeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSTransferHeartbeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSTransferHeartbeat)
    MergeFrom(*source);
  }
}

void CMsgClientUFSTransferHeartbeat::MergeFrom(const CMsgClientUFSTransferHeartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSTransferHeartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClientUFSTransferHeartbeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSTransferHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSTransferHeartbeat::CopyFrom(const CMsgClientUFSTransferHeartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSTransferHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSTransferHeartbeat::IsInitialized() const {
  return true;
}

void CMsgClientUFSTransferHeartbeat::Swap(CMsgClientUFSTransferHeartbeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSTransferHeartbeat::InternalSwap(CMsgClientUFSTransferHeartbeat* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSTransferHeartbeat::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSTransferHeartbeat

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSUploadFileFinished::kEresultFieldNumber;
const int CMsgClientUFSUploadFileFinished::kShaFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSUploadFileFinished::CMsgClientUFSUploadFileFinished()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSUploadFileFinished)
}
CMsgClientUFSUploadFileFinished::CMsgClientUFSUploadFileFinished(const CMsgClientUFSUploadFileFinished& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_file()) {
    sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
  }
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSUploadFileFinished)
}

void CMsgClientUFSUploadFileFinished::SharedCtor() {
  _cached_size_ = 0;
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eresult_ = 2;
}

CMsgClientUFSUploadFileFinished::~CMsgClientUFSUploadFileFinished() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSUploadFileFinished)
  SharedDtor();
}

void CMsgClientUFSUploadFileFinished::SharedDtor() {
  sha_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSUploadFileFinished::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSUploadFileFinished::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSUploadFileFinished& CMsgClientUFSUploadFileFinished::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSUploadFileFinished* CMsgClientUFSUploadFileFinished::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSUploadFileFinished* n = new CMsgClientUFSUploadFileFinished;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSUploadFileFinished::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSUploadFileFinished)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_sha_file()) {
      GOOGLE_DCHECK(!sha_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sha_file_.UnsafeRawStringPointer())->clear();
    }
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSUploadFileFinished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSUploadFileFinished)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_file = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSUploadFileFinished)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSUploadFileFinished)
  return false;
#undef DO_
}

void CMsgClientUFSUploadFileFinished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSUploadFileFinished)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional bytes sha_file = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sha_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSUploadFileFinished)
}

::google::protobuf::uint8* CMsgClientUFSUploadFileFinished::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSUploadFileFinished)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional bytes sha_file = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sha_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSUploadFileFinished)
  return target;
}

size_t CMsgClientUFSUploadFileFinished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSUploadFileFinished)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes sha_file = 2;
    if (has_sha_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSUploadFileFinished::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSUploadFileFinished)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSUploadFileFinished* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSUploadFileFinished>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSUploadFileFinished)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSUploadFileFinished)
    MergeFrom(*source);
  }
}

void CMsgClientUFSUploadFileFinished::MergeFrom(const CMsgClientUFSUploadFileFinished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSUploadFileFinished)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sha_file();
      sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSUploadFileFinished::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSUploadFileFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSUploadFileFinished::CopyFrom(const CMsgClientUFSUploadFileFinished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSUploadFileFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadFileFinished::IsInitialized() const {
  return true;
}

void CMsgClientUFSUploadFileFinished::Swap(CMsgClientUFSUploadFileFinished* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSUploadFileFinished::InternalSwap(CMsgClientUFSUploadFileFinished* other) {
  sha_file_.Swap(&other->sha_file_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSUploadFileFinished::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSUploadFileFinished

// optional int32 eresult = 1 [default = 2];
bool CMsgClientUFSUploadFileFinished::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientUFSUploadFileFinished::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientUFSUploadFileFinished::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientUFSUploadFileFinished::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientUFSUploadFileFinished::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadFileFinished.eresult)
  return eresult_;
}
void CMsgClientUFSUploadFileFinished::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadFileFinished.eresult)
}

// optional bytes sha_file = 2;
bool CMsgClientUFSUploadFileFinished::has_sha_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUFSUploadFileFinished::set_has_sha_file() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUFSUploadFileFinished::clear_has_sha_file() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUFSUploadFileFinished::clear_sha_file() {
  sha_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha_file();
}
const ::std::string& CMsgClientUFSUploadFileFinished::sha_file() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSUploadFileFinished.sha_file)
  return sha_file_.GetNoArena();
}
void CMsgClientUFSUploadFileFinished::set_sha_file(const ::std::string& value) {
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSUploadFileFinished.sha_file)
}
#if LANG_CXX11
void CMsgClientUFSUploadFileFinished::set_sha_file(::std::string&& value) {
  set_has_sha_file();
  sha_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSUploadFileFinished.sha_file)
}
#endif
void CMsgClientUFSUploadFileFinished::set_sha_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSUploadFileFinished.sha_file)
}
void CMsgClientUFSUploadFileFinished::set_sha_file(const void* value, size_t size) {
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSUploadFileFinished.sha_file)
}
::std::string* CMsgClientUFSUploadFileFinished::mutable_sha_file() {
  set_has_sha_file();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSUploadFileFinished.sha_file)
  return sha_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSUploadFileFinished::release_sha_file() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSUploadFileFinished.sha_file)
  clear_has_sha_file();
  return sha_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSUploadFileFinished::set_allocated_sha_file(::std::string* sha_file) {
  if (sha_file != NULL) {
    set_has_sha_file();
  } else {
    clear_has_sha_file();
  }
  sha_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha_file);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSUploadFileFinished.sha_file)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSDeleteFileRequest::kAppIdFieldNumber;
const int CMsgClientUFSDeleteFileRequest::kFileNameFieldNumber;
const int CMsgClientUFSDeleteFileRequest::kIsExplicitDeleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSDeleteFileRequest::CMsgClientUFSDeleteFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSDeleteFileRequest)
}
CMsgClientUFSDeleteFileRequest::CMsgClientUFSDeleteFileRequest(const CMsgClientUFSDeleteFileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&is_explicit_delete_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(is_explicit_delete_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSDeleteFileRequest)
}

void CMsgClientUFSDeleteFileRequest::SharedCtor() {
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&is_explicit_delete_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(is_explicit_delete_));
}

CMsgClientUFSDeleteFileRequest::~CMsgClientUFSDeleteFileRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSDeleteFileRequest)
  SharedDtor();
}

void CMsgClientUFSDeleteFileRequest::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSDeleteFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSDeleteFileRequest::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSDeleteFileRequest& CMsgClientUFSDeleteFileRequest::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSDeleteFileRequest* CMsgClientUFSDeleteFileRequest::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSDeleteFileRequest* n = new CMsgClientUFSDeleteFileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSDeleteFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSDeleteFileRequest)
  if (has_file_name()) {
    GOOGLE_DCHECK(!file_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*file_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&is_explicit_delete_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(is_explicit_delete_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSDeleteFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSDeleteFileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSDeleteFileRequest.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_explicit_delete = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_is_explicit_delete();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_explicit_delete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSDeleteFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSDeleteFileRequest)
  return false;
#undef DO_
}

void CMsgClientUFSDeleteFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSDeleteFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSDeleteFileRequest.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_name(), output);
  }

  // optional bool is_explicit_delete = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_explicit_delete(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSDeleteFileRequest)
}

::google::protobuf::uint8* CMsgClientUFSDeleteFileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSDeleteFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSDeleteFileRequest.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  // optional bool is_explicit_delete = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_explicit_delete(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSDeleteFileRequest)
  return target;
}

size_t CMsgClientUFSDeleteFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSDeleteFileRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional bool is_explicit_delete = 3;
    if (has_is_explicit_delete()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSDeleteFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSDeleteFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSDeleteFileRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSDeleteFileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSDeleteFileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSDeleteFileRequest)
    MergeFrom(*source);
  }
}

void CMsgClientUFSDeleteFileRequest::MergeFrom(const CMsgClientUFSDeleteFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSDeleteFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_explicit_delete_ = from.is_explicit_delete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSDeleteFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSDeleteFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSDeleteFileRequest::CopyFrom(const CMsgClientUFSDeleteFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSDeleteFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSDeleteFileRequest::IsInitialized() const {
  return true;
}

void CMsgClientUFSDeleteFileRequest::Swap(CMsgClientUFSDeleteFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSDeleteFileRequest::InternalSwap(CMsgClientUFSDeleteFileRequest* other) {
  file_name_.Swap(&other->file_name_);
  std::swap(app_id_, other->app_id_);
  std::swap(is_explicit_delete_, other->is_explicit_delete_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSDeleteFileRequest::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSDeleteFileRequest

// optional uint32 app_id = 1;
bool CMsgClientUFSDeleteFileRequest::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientUFSDeleteFileRequest::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientUFSDeleteFileRequest::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientUFSDeleteFileRequest::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientUFSDeleteFileRequest::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSDeleteFileRequest.app_id)
  return app_id_;
}
void CMsgClientUFSDeleteFileRequest::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSDeleteFileRequest.app_id)
}

// optional string file_name = 2;
bool CMsgClientUFSDeleteFileRequest::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUFSDeleteFileRequest::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUFSDeleteFileRequest::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUFSDeleteFileRequest::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
const ::std::string& CMsgClientUFSDeleteFileRequest::file_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSDeleteFileRequest.file_name)
  return file_name_.GetNoArena();
}
void CMsgClientUFSDeleteFileRequest::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSDeleteFileRequest.file_name)
}
#if LANG_CXX11
void CMsgClientUFSDeleteFileRequest::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSDeleteFileRequest.file_name)
}
#endif
void CMsgClientUFSDeleteFileRequest::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSDeleteFileRequest.file_name)
}
void CMsgClientUFSDeleteFileRequest::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSDeleteFileRequest.file_name)
}
::std::string* CMsgClientUFSDeleteFileRequest::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSDeleteFileRequest.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSDeleteFileRequest::release_file_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSDeleteFileRequest.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSDeleteFileRequest::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSDeleteFileRequest.file_name)
}

// optional bool is_explicit_delete = 3;
bool CMsgClientUFSDeleteFileRequest::has_is_explicit_delete() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientUFSDeleteFileRequest::set_has_is_explicit_delete() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientUFSDeleteFileRequest::clear_has_is_explicit_delete() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientUFSDeleteFileRequest::clear_is_explicit_delete() {
  is_explicit_delete_ = false;
  clear_has_is_explicit_delete();
}
bool CMsgClientUFSDeleteFileRequest::is_explicit_delete() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSDeleteFileRequest.is_explicit_delete)
  return is_explicit_delete_;
}
void CMsgClientUFSDeleteFileRequest::set_is_explicit_delete(bool value) {
  set_has_is_explicit_delete();
  is_explicit_delete_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSDeleteFileRequest.is_explicit_delete)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSDeleteFileResponse::kEresultFieldNumber;
const int CMsgClientUFSDeleteFileResponse::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSDeleteFileResponse::CMsgClientUFSDeleteFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSDeleteFileResponse)
}
CMsgClientUFSDeleteFileResponse::CMsgClientUFSDeleteFileResponse(const CMsgClientUFSDeleteFileResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSDeleteFileResponse)
}

void CMsgClientUFSDeleteFileResponse::SharedCtor() {
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eresult_ = 2;
}

CMsgClientUFSDeleteFileResponse::~CMsgClientUFSDeleteFileResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSDeleteFileResponse)
  SharedDtor();
}

void CMsgClientUFSDeleteFileResponse::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSDeleteFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSDeleteFileResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSDeleteFileResponse& CMsgClientUFSDeleteFileResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSDeleteFileResponse* CMsgClientUFSDeleteFileResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSDeleteFileResponse* n = new CMsgClientUFSDeleteFileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSDeleteFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSDeleteFileResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_file_name()) {
      GOOGLE_DCHECK(!file_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_name_.UnsafeRawStringPointer())->clear();
    }
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSDeleteFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSDeleteFileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSDeleteFileResponse.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSDeleteFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSDeleteFileResponse)
  return false;
#undef DO_
}

void CMsgClientUFSDeleteFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSDeleteFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSDeleteFileResponse.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSDeleteFileResponse)
}

::google::protobuf::uint8* CMsgClientUFSDeleteFileResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSDeleteFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSDeleteFileResponse.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSDeleteFileResponse)
  return target;
}

size_t CMsgClientUFSDeleteFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSDeleteFileResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSDeleteFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSDeleteFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSDeleteFileResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSDeleteFileResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSDeleteFileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSDeleteFileResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSDeleteFileResponse::MergeFrom(const CMsgClientUFSDeleteFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSDeleteFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSDeleteFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSDeleteFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSDeleteFileResponse::CopyFrom(const CMsgClientUFSDeleteFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSDeleteFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSDeleteFileResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSDeleteFileResponse::Swap(CMsgClientUFSDeleteFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSDeleteFileResponse::InternalSwap(CMsgClientUFSDeleteFileResponse* other) {
  file_name_.Swap(&other->file_name_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSDeleteFileResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSDeleteFileResponse

// optional int32 eresult = 1 [default = 2];
bool CMsgClientUFSDeleteFileResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientUFSDeleteFileResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientUFSDeleteFileResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientUFSDeleteFileResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientUFSDeleteFileResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSDeleteFileResponse.eresult)
  return eresult_;
}
void CMsgClientUFSDeleteFileResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSDeleteFileResponse.eresult)
}

// optional string file_name = 2;
bool CMsgClientUFSDeleteFileResponse::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUFSDeleteFileResponse::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUFSDeleteFileResponse::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUFSDeleteFileResponse::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
const ::std::string& CMsgClientUFSDeleteFileResponse::file_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSDeleteFileResponse.file_name)
  return file_name_.GetNoArena();
}
void CMsgClientUFSDeleteFileResponse::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSDeleteFileResponse.file_name)
}
#if LANG_CXX11
void CMsgClientUFSDeleteFileResponse::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSDeleteFileResponse.file_name)
}
#endif
void CMsgClientUFSDeleteFileResponse::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSDeleteFileResponse.file_name)
}
void CMsgClientUFSDeleteFileResponse::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSDeleteFileResponse.file_name)
}
::std::string* CMsgClientUFSDeleteFileResponse::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSDeleteFileResponse.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSDeleteFileResponse::release_file_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSDeleteFileResponse.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSDeleteFileResponse::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSDeleteFileResponse.file_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSGetFileListForApp::kAppsToQueryFieldNumber;
const int CMsgClientUFSGetFileListForApp::kSendPathPrefixesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSGetFileListForApp::CMsgClientUFSGetFileListForApp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSGetFileListForApp)
}
CMsgClientUFSGetFileListForApp::CMsgClientUFSGetFileListForApp(const CMsgClientUFSGetFileListForApp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      apps_to_query_(from.apps_to_query_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  send_path_prefixes_ = from.send_path_prefixes_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSGetFileListForApp)
}

void CMsgClientUFSGetFileListForApp::SharedCtor() {
  _cached_size_ = 0;
  send_path_prefixes_ = false;
}

CMsgClientUFSGetFileListForApp::~CMsgClientUFSGetFileListForApp() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSGetFileListForApp)
  SharedDtor();
}

void CMsgClientUFSGetFileListForApp::SharedDtor() {
}

void CMsgClientUFSGetFileListForApp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSGetFileListForApp::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSGetFileListForApp& CMsgClientUFSGetFileListForApp::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSGetFileListForApp* CMsgClientUFSGetFileListForApp::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSGetFileListForApp* n = new CMsgClientUFSGetFileListForApp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSGetFileListForApp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSGetFileListForApp)
  apps_to_query_.Clear();
  send_path_prefixes_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSGetFileListForApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSGetFileListForApp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 apps_to_query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_apps_to_query())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_apps_to_query())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_path_prefixes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_send_path_prefixes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_path_prefixes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSGetFileListForApp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSGetFileListForApp)
  return false;
#undef DO_
}

void CMsgClientUFSGetFileListForApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSGetFileListForApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 apps_to_query = 1;
  for (int i = 0, n = this->apps_to_query_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->apps_to_query(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool send_path_prefixes = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->send_path_prefixes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSGetFileListForApp)
}

::google::protobuf::uint8* CMsgClientUFSGetFileListForApp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSGetFileListForApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 apps_to_query = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->apps_to_query_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool send_path_prefixes = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->send_path_prefixes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSGetFileListForApp)
  return target;
}

size_t CMsgClientUFSGetFileListForApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSGetFileListForApp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 apps_to_query = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->apps_to_query_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->apps_to_query_size());
    total_size += data_size;
  }

  // optional bool send_path_prefixes = 2;
  if (has_send_path_prefixes()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSGetFileListForApp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSGetFileListForApp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSGetFileListForApp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSGetFileListForApp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSGetFileListForApp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSGetFileListForApp)
    MergeFrom(*source);
  }
}

void CMsgClientUFSGetFileListForApp::MergeFrom(const CMsgClientUFSGetFileListForApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSGetFileListForApp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_to_query_.MergeFrom(from.apps_to_query_);
  if (from.has_send_path_prefixes()) {
    set_send_path_prefixes(from.send_path_prefixes());
  }
}

void CMsgClientUFSGetFileListForApp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSGetFileListForApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSGetFileListForApp::CopyFrom(const CMsgClientUFSGetFileListForApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSGetFileListForApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetFileListForApp::IsInitialized() const {
  return true;
}

void CMsgClientUFSGetFileListForApp::Swap(CMsgClientUFSGetFileListForApp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSGetFileListForApp::InternalSwap(CMsgClientUFSGetFileListForApp* other) {
  apps_to_query_.InternalSwap(&other->apps_to_query_);
  std::swap(send_path_prefixes_, other->send_path_prefixes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSGetFileListForApp::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSGetFileListForApp

// repeated uint32 apps_to_query = 1;
int CMsgClientUFSGetFileListForApp::apps_to_query_size() const {
  return apps_to_query_.size();
}
void CMsgClientUFSGetFileListForApp::clear_apps_to_query() {
  apps_to_query_.Clear();
}
::google::protobuf::uint32 CMsgClientUFSGetFileListForApp::apps_to_query(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetFileListForApp.apps_to_query)
  return apps_to_query_.Get(index);
}
void CMsgClientUFSGetFileListForApp::set_apps_to_query(int index, ::google::protobuf::uint32 value) {
  apps_to_query_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetFileListForApp.apps_to_query)
}
void CMsgClientUFSGetFileListForApp::add_apps_to_query(::google::protobuf::uint32 value) {
  apps_to_query_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientUFSGetFileListForApp.apps_to_query)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientUFSGetFileListForApp::apps_to_query() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientUFSGetFileListForApp.apps_to_query)
  return apps_to_query_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientUFSGetFileListForApp::mutable_apps_to_query() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientUFSGetFileListForApp.apps_to_query)
  return &apps_to_query_;
}

// optional bool send_path_prefixes = 2;
bool CMsgClientUFSGetFileListForApp::has_send_path_prefixes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUFSGetFileListForApp::set_has_send_path_prefixes() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUFSGetFileListForApp::clear_has_send_path_prefixes() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUFSGetFileListForApp::clear_send_path_prefixes() {
  send_path_prefixes_ = false;
  clear_has_send_path_prefixes();
}
bool CMsgClientUFSGetFileListForApp::send_path_prefixes() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetFileListForApp.send_path_prefixes)
  return send_path_prefixes_;
}
void CMsgClientUFSGetFileListForApp::set_send_path_prefixes(bool value) {
  set_has_send_path_prefixes();
  send_path_prefixes_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetFileListForApp.send_path_prefixes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSGetFileListForAppResponse_File::kAppIdFieldNumber;
const int CMsgClientUFSGetFileListForAppResponse_File::kFileNameFieldNumber;
const int CMsgClientUFSGetFileListForAppResponse_File::kShaFileFieldNumber;
const int CMsgClientUFSGetFileListForAppResponse_File::kTimeStampFieldNumber;
const int CMsgClientUFSGetFileListForAppResponse_File::kRawFileSizeFieldNumber;
const int CMsgClientUFSGetFileListForAppResponse_File::kIsExplicitDeleteFieldNumber;
const int CMsgClientUFSGetFileListForAppResponse_File::kPlatformsToSyncFieldNumber;
const int CMsgClientUFSGetFileListForAppResponse_File::kPathPrefixIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSGetFileListForAppResponse_File::CMsgClientUFSGetFileListForAppResponse_File()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
}
CMsgClientUFSGetFileListForAppResponse_File::CMsgClientUFSGetFileListForAppResponse_File(const CMsgClientUFSGetFileListForAppResponse_File& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_file()) {
    sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&path_prefix_index_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(path_prefix_index_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
}

void CMsgClientUFSGetFileListForAppResponse_File::SharedCtor() {
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&path_prefix_index_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(path_prefix_index_));
}

CMsgClientUFSGetFileListForAppResponse_File::~CMsgClientUFSGetFileListForAppResponse_File() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  SharedDtor();
}

void CMsgClientUFSGetFileListForAppResponse_File::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSGetFileListForAppResponse_File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSGetFileListForAppResponse_File::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSGetFileListForAppResponse_File& CMsgClientUFSGetFileListForAppResponse_File::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSGetFileListForAppResponse_File* CMsgClientUFSGetFileListForAppResponse_File::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSGetFileListForAppResponse_File* n = new CMsgClientUFSGetFileListForAppResponse_File;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSGetFileListForAppResponse_File::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_file_name()) {
      GOOGLE_DCHECK(!file_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_sha_file()) {
      GOOGLE_DCHECK(!sha_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sha_file_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&path_prefix_index_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(path_prefix_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSGetFileListForAppResponse_File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSGetFileListForAppResponse.File.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 time_stamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_time_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_file_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_raw_file_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_explicit_delete = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_is_explicit_delete();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_explicit_delete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 platforms_to_sync = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_platforms_to_sync();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platforms_to_sync_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 path_prefix_index = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_path_prefix_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &path_prefix_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  return false;
#undef DO_
}

void CMsgClientUFSGetFileListForAppResponse_File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetFileListForAppResponse.File.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_name(), output);
  }

  // optional bytes sha_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sha_file(), output);
  }

  // optional uint64 time_stamp = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time_stamp(), output);
  }

  // optional uint32 raw_file_size = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->raw_file_size(), output);
  }

  // optional bool is_explicit_delete = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_explicit_delete(), output);
  }

  // optional uint32 platforms_to_sync = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->platforms_to_sync(), output);
  }

  // optional uint32 path_prefix_index = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->path_prefix_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
}

::google::protobuf::uint8* CMsgClientUFSGetFileListForAppResponse_File::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetFileListForAppResponse.File.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  // optional bytes sha_file = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sha_file(), target);
  }

  // optional uint64 time_stamp = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time_stamp(), target);
  }

  // optional uint32 raw_file_size = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->raw_file_size(), target);
  }

  // optional bool is_explicit_delete = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_explicit_delete(), target);
  }

  // optional uint32 platforms_to_sync = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->platforms_to_sync(), target);
  }

  // optional uint32 path_prefix_index = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->path_prefix_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  return target;
}

size_t CMsgClientUFSGetFileListForAppResponse_File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional bytes sha_file = 3;
    if (has_sha_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 raw_file_size = 5;
    if (has_raw_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_file_size());
    }

    // optional uint64 time_stamp = 4;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_stamp());
    }

    // optional bool is_explicit_delete = 6;
    if (has_is_explicit_delete()) {
      total_size += 1 + 1;
    }

    // optional uint32 platforms_to_sync = 7;
    if (has_platforms_to_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platforms_to_sync());
    }

    // optional uint32 path_prefix_index = 8;
    if (has_path_prefix_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->path_prefix_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSGetFileListForAppResponse_File::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSGetFileListForAppResponse_File* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSGetFileListForAppResponse_File>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
    MergeFrom(*source);
  }
}

void CMsgClientUFSGetFileListForAppResponse_File::MergeFrom(const CMsgClientUFSGetFileListForAppResponse_File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sha_file();
      sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      raw_file_size_ = from.raw_file_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_explicit_delete_ = from.is_explicit_delete_;
    }
    if (cached_has_bits & 0x00000040u) {
      platforms_to_sync_ = from.platforms_to_sync_;
    }
    if (cached_has_bits & 0x00000080u) {
      path_prefix_index_ = from.path_prefix_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSGetFileListForAppResponse_File::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSGetFileListForAppResponse_File::CopyFrom(const CMsgClientUFSGetFileListForAppResponse_File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSGetFileListForAppResponse.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetFileListForAppResponse_File::IsInitialized() const {
  return true;
}

void CMsgClientUFSGetFileListForAppResponse_File::Swap(CMsgClientUFSGetFileListForAppResponse_File* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSGetFileListForAppResponse_File::InternalSwap(CMsgClientUFSGetFileListForAppResponse_File* other) {
  file_name_.Swap(&other->file_name_);
  sha_file_.Swap(&other->sha_file_);
  std::swap(app_id_, other->app_id_);
  std::swap(raw_file_size_, other->raw_file_size_);
  std::swap(time_stamp_, other->time_stamp_);
  std::swap(is_explicit_delete_, other->is_explicit_delete_);
  std::swap(platforms_to_sync_, other->platforms_to_sync_);
  std::swap(path_prefix_index_, other->path_prefix_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSGetFileListForAppResponse_File::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSGetFileListForAppResponse_File

// optional uint32 app_id = 1;
bool CMsgClientUFSGetFileListForAppResponse_File::has_app_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientUFSGetFileListForAppResponse_File::set_has_app_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientUFSGetFileListForAppResponse_File::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientUFSGetFileListForAppResponse_File::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientUFSGetFileListForAppResponse_File::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.app_id)
  return app_id_;
}
void CMsgClientUFSGetFileListForAppResponse_File::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.app_id)
}

// optional string file_name = 2;
bool CMsgClientUFSGetFileListForAppResponse_File::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUFSGetFileListForAppResponse_File::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUFSGetFileListForAppResponse_File::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUFSGetFileListForAppResponse_File::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
const ::std::string& CMsgClientUFSGetFileListForAppResponse_File::file_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.file_name)
  return file_name_.GetNoArena();
}
void CMsgClientUFSGetFileListForAppResponse_File::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.file_name)
}
#if LANG_CXX11
void CMsgClientUFSGetFileListForAppResponse_File::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.file_name)
}
#endif
void CMsgClientUFSGetFileListForAppResponse_File::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.file_name)
}
void CMsgClientUFSGetFileListForAppResponse_File::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.file_name)
}
::std::string* CMsgClientUFSGetFileListForAppResponse_File::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSGetFileListForAppResponse_File::release_file_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSGetFileListForAppResponse_File::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.file_name)
}

// optional bytes sha_file = 3;
bool CMsgClientUFSGetFileListForAppResponse_File::has_sha_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientUFSGetFileListForAppResponse_File::set_has_sha_file() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientUFSGetFileListForAppResponse_File::clear_has_sha_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientUFSGetFileListForAppResponse_File::clear_sha_file() {
  sha_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha_file();
}
const ::std::string& CMsgClientUFSGetFileListForAppResponse_File::sha_file() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.sha_file)
  return sha_file_.GetNoArena();
}
void CMsgClientUFSGetFileListForAppResponse_File::set_sha_file(const ::std::string& value) {
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.sha_file)
}
#if LANG_CXX11
void CMsgClientUFSGetFileListForAppResponse_File::set_sha_file(::std::string&& value) {
  set_has_sha_file();
  sha_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.sha_file)
}
#endif
void CMsgClientUFSGetFileListForAppResponse_File::set_sha_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.sha_file)
}
void CMsgClientUFSGetFileListForAppResponse_File::set_sha_file(const void* value, size_t size) {
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.sha_file)
}
::std::string* CMsgClientUFSGetFileListForAppResponse_File::mutable_sha_file() {
  set_has_sha_file();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.sha_file)
  return sha_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSGetFileListForAppResponse_File::release_sha_file() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.sha_file)
  clear_has_sha_file();
  return sha_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSGetFileListForAppResponse_File::set_allocated_sha_file(::std::string* sha_file) {
  if (sha_file != NULL) {
    set_has_sha_file();
  } else {
    clear_has_sha_file();
  }
  sha_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha_file);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.sha_file)
}

// optional uint64 time_stamp = 4;
bool CMsgClientUFSGetFileListForAppResponse_File::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientUFSGetFileListForAppResponse_File::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientUFSGetFileListForAppResponse_File::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientUFSGetFileListForAppResponse_File::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_time_stamp();
}
::google::protobuf::uint64 CMsgClientUFSGetFileListForAppResponse_File::time_stamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.time_stamp)
  return time_stamp_;
}
void CMsgClientUFSGetFileListForAppResponse_File::set_time_stamp(::google::protobuf::uint64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.time_stamp)
}

// optional uint32 raw_file_size = 5;
bool CMsgClientUFSGetFileListForAppResponse_File::has_raw_file_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientUFSGetFileListForAppResponse_File::set_has_raw_file_size() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientUFSGetFileListForAppResponse_File::clear_has_raw_file_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientUFSGetFileListForAppResponse_File::clear_raw_file_size() {
  raw_file_size_ = 0u;
  clear_has_raw_file_size();
}
::google::protobuf::uint32 CMsgClientUFSGetFileListForAppResponse_File::raw_file_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.raw_file_size)
  return raw_file_size_;
}
void CMsgClientUFSGetFileListForAppResponse_File::set_raw_file_size(::google::protobuf::uint32 value) {
  set_has_raw_file_size();
  raw_file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.raw_file_size)
}

// optional bool is_explicit_delete = 6;
bool CMsgClientUFSGetFileListForAppResponse_File::has_is_explicit_delete() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientUFSGetFileListForAppResponse_File::set_has_is_explicit_delete() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientUFSGetFileListForAppResponse_File::clear_has_is_explicit_delete() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientUFSGetFileListForAppResponse_File::clear_is_explicit_delete() {
  is_explicit_delete_ = false;
  clear_has_is_explicit_delete();
}
bool CMsgClientUFSGetFileListForAppResponse_File::is_explicit_delete() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.is_explicit_delete)
  return is_explicit_delete_;
}
void CMsgClientUFSGetFileListForAppResponse_File::set_is_explicit_delete(bool value) {
  set_has_is_explicit_delete();
  is_explicit_delete_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.is_explicit_delete)
}

// optional uint32 platforms_to_sync = 7;
bool CMsgClientUFSGetFileListForAppResponse_File::has_platforms_to_sync() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientUFSGetFileListForAppResponse_File::set_has_platforms_to_sync() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientUFSGetFileListForAppResponse_File::clear_has_platforms_to_sync() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientUFSGetFileListForAppResponse_File::clear_platforms_to_sync() {
  platforms_to_sync_ = 0u;
  clear_has_platforms_to_sync();
}
::google::protobuf::uint32 CMsgClientUFSGetFileListForAppResponse_File::platforms_to_sync() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.platforms_to_sync)
  return platforms_to_sync_;
}
void CMsgClientUFSGetFileListForAppResponse_File::set_platforms_to_sync(::google::protobuf::uint32 value) {
  set_has_platforms_to_sync();
  platforms_to_sync_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.platforms_to_sync)
}

// optional uint32 path_prefix_index = 8;
bool CMsgClientUFSGetFileListForAppResponse_File::has_path_prefix_index() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgClientUFSGetFileListForAppResponse_File::set_has_path_prefix_index() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgClientUFSGetFileListForAppResponse_File::clear_has_path_prefix_index() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgClientUFSGetFileListForAppResponse_File::clear_path_prefix_index() {
  path_prefix_index_ = 0u;
  clear_has_path_prefix_index();
}
::google::protobuf::uint32 CMsgClientUFSGetFileListForAppResponse_File::path_prefix_index() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.path_prefix_index)
  return path_prefix_index_;
}
void CMsgClientUFSGetFileListForAppResponse_File::set_path_prefix_index(::google::protobuf::uint32 value) {
  set_has_path_prefix_index();
  path_prefix_index_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetFileListForAppResponse.File.path_prefix_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSGetFileListForAppResponse::kFilesFieldNumber;
const int CMsgClientUFSGetFileListForAppResponse::kPathPrefixesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSGetFileListForAppResponse::CMsgClientUFSGetFileListForAppResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSGetFileListForAppResponse)
}
CMsgClientUFSGetFileListForAppResponse::CMsgClientUFSGetFileListForAppResponse(const CMsgClientUFSGetFileListForAppResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      files_(from.files_),
      path_prefixes_(from.path_prefixes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSGetFileListForAppResponse)
}

void CMsgClientUFSGetFileListForAppResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClientUFSGetFileListForAppResponse::~CMsgClientUFSGetFileListForAppResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  SharedDtor();
}

void CMsgClientUFSGetFileListForAppResponse::SharedDtor() {
}

void CMsgClientUFSGetFileListForAppResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSGetFileListForAppResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSGetFileListForAppResponse& CMsgClientUFSGetFileListForAppResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSGetFileListForAppResponse* CMsgClientUFSGetFileListForAppResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSGetFileListForAppResponse* n = new CMsgClientUFSGetFileListForAppResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSGetFileListForAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  files_.Clear();
  path_prefixes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSGetFileListForAppResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientUFSGetFileListForAppResponse.File files = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string path_prefixes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_path_prefixes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path_prefixes(this->path_prefixes_size() - 1).data(),
            this->path_prefixes(this->path_prefixes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSGetFileListForAppResponse.path_prefixes");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  return false;
#undef DO_
}

void CMsgClientUFSGetFileListForAppResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientUFSGetFileListForAppResponse.File files = 1;
  for (unsigned int i = 0, n = this->files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->files(i), output);
  }

  // repeated string path_prefixes = 2;
  for (int i = 0, n = this->path_prefixes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path_prefixes(i).data(), this->path_prefixes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetFileListForAppResponse.path_prefixes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path_prefixes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSGetFileListForAppResponse)
}

::google::protobuf::uint8* CMsgClientUFSGetFileListForAppResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientUFSGetFileListForAppResponse.File files = 1;
  for (unsigned int i = 0, n = this->files_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->files(i), deterministic, target);
  }

  // repeated string path_prefixes = 2;
  for (int i = 0, n = this->path_prefixes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path_prefixes(i).data(), this->path_prefixes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetFileListForAppResponse.path_prefixes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->path_prefixes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  return target;
}

size_t CMsgClientUFSGetFileListForAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientUFSGetFileListForAppResponse.File files = 1;
  {
    unsigned int count = this->files_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->files(i));
    }
  }

  // repeated string path_prefixes = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->path_prefixes_size());
  for (int i = 0, n = this->path_prefixes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->path_prefixes(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSGetFileListForAppResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSGetFileListForAppResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSGetFileListForAppResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSGetFileListForAppResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSGetFileListForAppResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSGetFileListForAppResponse::MergeFrom(const CMsgClientUFSGetFileListForAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  path_prefixes_.MergeFrom(from.path_prefixes_);
}

void CMsgClientUFSGetFileListForAppResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSGetFileListForAppResponse::CopyFrom(const CMsgClientUFSGetFileListForAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSGetFileListForAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetFileListForAppResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSGetFileListForAppResponse::Swap(CMsgClientUFSGetFileListForAppResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSGetFileListForAppResponse::InternalSwap(CMsgClientUFSGetFileListForAppResponse* other) {
  files_.InternalSwap(&other->files_);
  path_prefixes_.InternalSwap(&other->path_prefixes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSGetFileListForAppResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSGetFileListForAppResponse

// repeated .proto.steam.CMsgClientUFSGetFileListForAppResponse.File files = 1;
int CMsgClientUFSGetFileListForAppResponse::files_size() const {
  return files_.size();
}
void CMsgClientUFSGetFileListForAppResponse::clear_files() {
  files_.Clear();
}
const ::proto::steam::CMsgClientUFSGetFileListForAppResponse_File& CMsgClientUFSGetFileListForAppResponse::files(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetFileListForAppResponse.files)
  return files_.Get(index);
}
::proto::steam::CMsgClientUFSGetFileListForAppResponse_File* CMsgClientUFSGetFileListForAppResponse::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSGetFileListForAppResponse.files)
  return files_.Mutable(index);
}
::proto::steam::CMsgClientUFSGetFileListForAppResponse_File* CMsgClientUFSGetFileListForAppResponse::add_files() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientUFSGetFileListForAppResponse.files)
  return files_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientUFSGetFileListForAppResponse_File >*
CMsgClientUFSGetFileListForAppResponse::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientUFSGetFileListForAppResponse.files)
  return &files_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientUFSGetFileListForAppResponse_File >&
CMsgClientUFSGetFileListForAppResponse::files() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientUFSGetFileListForAppResponse.files)
  return files_;
}

// repeated string path_prefixes = 2;
int CMsgClientUFSGetFileListForAppResponse::path_prefixes_size() const {
  return path_prefixes_.size();
}
void CMsgClientUFSGetFileListForAppResponse::clear_path_prefixes() {
  path_prefixes_.Clear();
}
const ::std::string& CMsgClientUFSGetFileListForAppResponse::path_prefixes(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetFileListForAppResponse.path_prefixes)
  return path_prefixes_.Get(index);
}
::std::string* CMsgClientUFSGetFileListForAppResponse::mutable_path_prefixes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSGetFileListForAppResponse.path_prefixes)
  return path_prefixes_.Mutable(index);
}
void CMsgClientUFSGetFileListForAppResponse::set_path_prefixes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetFileListForAppResponse.path_prefixes)
  path_prefixes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CMsgClientUFSGetFileListForAppResponse::set_path_prefixes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetFileListForAppResponse.path_prefixes)
  path_prefixes_.Mutable(index)->assign(std::move(value));
}
#endif
void CMsgClientUFSGetFileListForAppResponse::set_path_prefixes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  path_prefixes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSGetFileListForAppResponse.path_prefixes)
}
void CMsgClientUFSGetFileListForAppResponse::set_path_prefixes(int index, const char* value, size_t size) {
  path_prefixes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSGetFileListForAppResponse.path_prefixes)
}
::std::string* CMsgClientUFSGetFileListForAppResponse::add_path_prefixes() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CMsgClientUFSGetFileListForAppResponse.path_prefixes)
  return path_prefixes_.Add();
}
void CMsgClientUFSGetFileListForAppResponse::add_path_prefixes(const ::std::string& value) {
  path_prefixes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientUFSGetFileListForAppResponse.path_prefixes)
}
#if LANG_CXX11
void CMsgClientUFSGetFileListForAppResponse::add_path_prefixes(::std::string&& value) {
  path_prefixes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientUFSGetFileListForAppResponse.path_prefixes)
}
#endif
void CMsgClientUFSGetFileListForAppResponse::add_path_prefixes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  path_prefixes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CMsgClientUFSGetFileListForAppResponse.path_prefixes)
}
void CMsgClientUFSGetFileListForAppResponse::add_path_prefixes(const char* value, size_t size) {
  path_prefixes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CMsgClientUFSGetFileListForAppResponse.path_prefixes)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgClientUFSGetFileListForAppResponse::path_prefixes() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientUFSGetFileListForAppResponse.path_prefixes)
  return path_prefixes_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgClientUFSGetFileListForAppResponse::mutable_path_prefixes() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientUFSGetFileListForAppResponse.path_prefixes)
  return &path_prefixes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSDownloadRequest::kAppIdFieldNumber;
const int CMsgClientUFSDownloadRequest::kFileNameFieldNumber;
const int CMsgClientUFSDownloadRequest::kCanHandleHttpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSDownloadRequest::CMsgClientUFSDownloadRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSDownloadRequest)
}
CMsgClientUFSDownloadRequest::CMsgClientUFSDownloadRequest(const CMsgClientUFSDownloadRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&can_handle_http_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(can_handle_http_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSDownloadRequest)
}

void CMsgClientUFSDownloadRequest::SharedCtor() {
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&can_handle_http_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(can_handle_http_));
}

CMsgClientUFSDownloadRequest::~CMsgClientUFSDownloadRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSDownloadRequest)
  SharedDtor();
}

void CMsgClientUFSDownloadRequest::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSDownloadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSDownloadRequest::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSDownloadRequest& CMsgClientUFSDownloadRequest::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSDownloadRequest* CMsgClientUFSDownloadRequest::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSDownloadRequest* n = new CMsgClientUFSDownloadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSDownloadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSDownloadRequest)
  if (has_file_name()) {
    GOOGLE_DCHECK(!file_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*file_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&can_handle_http_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(can_handle_http_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSDownloadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSDownloadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSDownloadRequest.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_handle_http = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_can_handle_http();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_handle_http_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSDownloadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSDownloadRequest)
  return false;
#undef DO_
}

void CMsgClientUFSDownloadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSDownloadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSDownloadRequest.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_name(), output);
  }

  // optional bool can_handle_http = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->can_handle_http(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSDownloadRequest)
}

::google::protobuf::uint8* CMsgClientUFSDownloadRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSDownloadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSDownloadRequest.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  // optional bool can_handle_http = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->can_handle_http(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSDownloadRequest)
  return target;
}

size_t CMsgClientUFSDownloadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSDownloadRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional bool can_handle_http = 3;
    if (has_can_handle_http()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSDownloadRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSDownloadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSDownloadRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSDownloadRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSDownloadRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSDownloadRequest)
    MergeFrom(*source);
  }
}

void CMsgClientUFSDownloadRequest::MergeFrom(const CMsgClientUFSDownloadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSDownloadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_handle_http_ = from.can_handle_http_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSDownloadRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSDownloadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSDownloadRequest::CopyFrom(const CMsgClientUFSDownloadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSDownloadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSDownloadRequest::IsInitialized() const {
  return true;
}

void CMsgClientUFSDownloadRequest::Swap(CMsgClientUFSDownloadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSDownloadRequest::InternalSwap(CMsgClientUFSDownloadRequest* other) {
  file_name_.Swap(&other->file_name_);
  std::swap(app_id_, other->app_id_);
  std::swap(can_handle_http_, other->can_handle_http_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSDownloadRequest::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSDownloadRequest

// optional uint32 app_id = 1;
bool CMsgClientUFSDownloadRequest::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientUFSDownloadRequest::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientUFSDownloadRequest::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientUFSDownloadRequest::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientUFSDownloadRequest::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSDownloadRequest.app_id)
  return app_id_;
}
void CMsgClientUFSDownloadRequest::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSDownloadRequest.app_id)
}

// optional string file_name = 2;
bool CMsgClientUFSDownloadRequest::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUFSDownloadRequest::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUFSDownloadRequest::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUFSDownloadRequest::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
const ::std::string& CMsgClientUFSDownloadRequest::file_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSDownloadRequest.file_name)
  return file_name_.GetNoArena();
}
void CMsgClientUFSDownloadRequest::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSDownloadRequest.file_name)
}
#if LANG_CXX11
void CMsgClientUFSDownloadRequest::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSDownloadRequest.file_name)
}
#endif
void CMsgClientUFSDownloadRequest::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSDownloadRequest.file_name)
}
void CMsgClientUFSDownloadRequest::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSDownloadRequest.file_name)
}
::std::string* CMsgClientUFSDownloadRequest::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSDownloadRequest.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSDownloadRequest::release_file_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSDownloadRequest.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSDownloadRequest::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSDownloadRequest.file_name)
}

// optional bool can_handle_http = 3;
bool CMsgClientUFSDownloadRequest::has_can_handle_http() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientUFSDownloadRequest::set_has_can_handle_http() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientUFSDownloadRequest::clear_has_can_handle_http() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientUFSDownloadRequest::clear_can_handle_http() {
  can_handle_http_ = false;
  clear_has_can_handle_http();
}
bool CMsgClientUFSDownloadRequest::can_handle_http() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSDownloadRequest.can_handle_http)
  return can_handle_http_;
}
void CMsgClientUFSDownloadRequest::set_can_handle_http(bool value) {
  set_has_can_handle_http();
  can_handle_http_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSDownloadRequest.can_handle_http)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSDownloadResponse::kEresultFieldNumber;
const int CMsgClientUFSDownloadResponse::kAppIdFieldNumber;
const int CMsgClientUFSDownloadResponse::kFileSizeFieldNumber;
const int CMsgClientUFSDownloadResponse::kRawFileSizeFieldNumber;
const int CMsgClientUFSDownloadResponse::kShaFileFieldNumber;
const int CMsgClientUFSDownloadResponse::kTimeStampFieldNumber;
const int CMsgClientUFSDownloadResponse::kIsExplicitDeleteFieldNumber;
const int CMsgClientUFSDownloadResponse::kUseHttpFieldNumber;
const int CMsgClientUFSDownloadResponse::kHttpHostFieldNumber;
const int CMsgClientUFSDownloadResponse::kHttpUrlFieldNumber;
const int CMsgClientUFSDownloadResponse::kKvHeadersFieldNumber;
const int CMsgClientUFSDownloadResponse::kUseHttpsFieldNumber;
const int CMsgClientUFSDownloadResponse::kEncryptedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSDownloadResponse::CMsgClientUFSDownloadResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSDownloadResponse)
}
CMsgClientUFSDownloadResponse::CMsgClientUFSDownloadResponse(const CMsgClientUFSDownloadResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_file()) {
    sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
  }
  http_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_http_host()) {
    http_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_host_);
  }
  http_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_http_url()) {
    http_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_url_);
  }
  kv_headers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_kv_headers()) {
    kv_headers_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kv_headers_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSDownloadResponse)
}

void CMsgClientUFSDownloadResponse::SharedCtor() {
  _cached_size_ = 0;
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kv_headers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&encrypted_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(encrypted_));
  eresult_ = 2;
}

CMsgClientUFSDownloadResponse::~CMsgClientUFSDownloadResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSDownloadResponse)
  SharedDtor();
}

void CMsgClientUFSDownloadResponse::SharedDtor() {
  sha_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kv_headers_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSDownloadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSDownloadResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSDownloadResponse& CMsgClientUFSDownloadResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSDownloadResponse* CMsgClientUFSDownloadResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSDownloadResponse* n = new CMsgClientUFSDownloadResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSDownloadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSDownloadResponse)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_sha_file()) {
      GOOGLE_DCHECK(!sha_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sha_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_http_host()) {
      GOOGLE_DCHECK(!http_host_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*http_host_.UnsafeRawStringPointer())->clear();
    }
    if (has_http_url()) {
      GOOGLE_DCHECK(!http_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*http_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_kv_headers()) {
      GOOGLE_DCHECK(!kv_headers_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*kv_headers_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&raw_file_size_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(raw_file_size_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&is_explicit_delete_, 0, reinterpret_cast<char*>(&encrypted_) -
      reinterpret_cast<char*>(&is_explicit_delete_) + sizeof(encrypted_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSDownloadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSDownloadResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_file_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_file_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_raw_file_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_file = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 time_stamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_time_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_explicit_delete = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_is_explicit_delete();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_explicit_delete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_http = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_use_http();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_http_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string http_host = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->http_host().data(), this->http_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSDownloadResponse.http_host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string http_url = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->http_url().data(), this->http_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSDownloadResponse.http_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes kv_headers = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_kv_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_https = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_use_https();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_https_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypted = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_encrypted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSDownloadResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSDownloadResponse)
  return false;
#undef DO_
}

void CMsgClientUFSDownloadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSDownloadResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional uint32 file_size = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->file_size(), output);
  }

  // optional uint32 raw_file_size = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->raw_file_size(), output);
  }

  // optional bytes sha_file = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->sha_file(), output);
  }

  // optional uint64 time_stamp = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->time_stamp(), output);
  }

  // optional bool is_explicit_delete = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_explicit_delete(), output);
  }

  // optional bool use_http = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->use_http(), output);
  }

  // optional string http_host = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_host().data(), this->http_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSDownloadResponse.http_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->http_host(), output);
  }

  // optional string http_url = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_url().data(), this->http_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSDownloadResponse.http_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->http_url(), output);
  }

  // optional bytes kv_headers = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->kv_headers(), output);
  }

  // optional bool use_https = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->use_https(), output);
  }

  // optional bool encrypted = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->encrypted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSDownloadResponse)
}

::google::protobuf::uint8* CMsgClientUFSDownloadResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSDownloadResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_id(), target);
  }

  // optional uint32 file_size = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->file_size(), target);
  }

  // optional uint32 raw_file_size = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->raw_file_size(), target);
  }

  // optional bytes sha_file = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->sha_file(), target);
  }

  // optional uint64 time_stamp = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->time_stamp(), target);
  }

  // optional bool is_explicit_delete = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_explicit_delete(), target);
  }

  // optional bool use_http = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->use_http(), target);
  }

  // optional string http_host = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_host().data(), this->http_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSDownloadResponse.http_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->http_host(), target);
  }

  // optional string http_url = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_url().data(), this->http_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSDownloadResponse.http_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->http_url(), target);
  }

  // optional bytes kv_headers = 11;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->kv_headers(), target);
  }

  // optional bool use_https = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->use_https(), target);
  }

  // optional bool encrypted = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->encrypted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSDownloadResponse)
  return target;
}

size_t CMsgClientUFSDownloadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSDownloadResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes sha_file = 5;
    if (has_sha_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional string http_host = 9;
    if (has_http_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->http_host());
    }

    // optional string http_url = 10;
    if (has_http_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->http_url());
    }

    // optional bytes kv_headers = 11;
    if (has_kv_headers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->kv_headers());
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 file_size = 3;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional uint64 time_stamp = 6;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_stamp());
    }

    // optional uint32 raw_file_size = 4;
    if (has_raw_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_file_size());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional bool is_explicit_delete = 7;
    if (has_is_explicit_delete()) {
      total_size += 1 + 1;
    }

    // optional bool use_http = 8;
    if (has_use_http()) {
      total_size += 1 + 1;
    }

    // optional bool use_https = 12;
    if (has_use_https()) {
      total_size += 1 + 1;
    }

    // optional bool encrypted = 13;
    if (has_encrypted()) {
      total_size += 1 + 1;
    }

    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSDownloadResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSDownloadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSDownloadResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSDownloadResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSDownloadResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSDownloadResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSDownloadResponse::MergeFrom(const CMsgClientUFSDownloadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSDownloadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sha_file();
      sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_http_host();
      http_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_host_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_http_url();
      http_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_kv_headers();
      kv_headers_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kv_headers_);
    }
    if (cached_has_bits & 0x00000010u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      raw_file_size_ = from.raw_file_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      is_explicit_delete_ = from.is_explicit_delete_;
    }
    if (cached_has_bits & 0x00000200u) {
      use_http_ = from.use_http_;
    }
    if (cached_has_bits & 0x00000400u) {
      use_https_ = from.use_https_;
    }
    if (cached_has_bits & 0x00000800u) {
      encrypted_ = from.encrypted_;
    }
    if (cached_has_bits & 0x00001000u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSDownloadResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSDownloadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSDownloadResponse::CopyFrom(const CMsgClientUFSDownloadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSDownloadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSDownloadResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSDownloadResponse::Swap(CMsgClientUFSDownloadResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSDownloadResponse::InternalSwap(CMsgClientUFSDownloadResponse* other) {
  sha_file_.Swap(&other->sha_file_);
  http_host_.Swap(&other->http_host_);
  http_url_.Swap(&other->http_url_);
  kv_headers_.Swap(&other->kv_headers_);
  std::swap(app_id_, other->app_id_);
  std::swap(file_size_, other->file_size_);
  std::swap(time_stamp_, other->time_stamp_);
  std::swap(raw_file_size_, other->raw_file_size_);
  std::swap(is_explicit_delete_, other->is_explicit_delete_);
  std::swap(use_http_, other->use_http_);
  std::swap(use_https_, other->use_https_);
  std::swap(encrypted_, other->encrypted_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSDownloadResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSDownloadResponse

// optional int32 eresult = 1 [default = 2];
bool CMsgClientUFSDownloadResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgClientUFSDownloadResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgClientUFSDownloadResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgClientUFSDownloadResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientUFSDownloadResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSDownloadResponse.eresult)
  return eresult_;
}
void CMsgClientUFSDownloadResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSDownloadResponse.eresult)
}

// optional uint32 app_id = 2;
bool CMsgClientUFSDownloadResponse::has_app_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientUFSDownloadResponse::set_has_app_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientUFSDownloadResponse::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientUFSDownloadResponse::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientUFSDownloadResponse::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSDownloadResponse.app_id)
  return app_id_;
}
void CMsgClientUFSDownloadResponse::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSDownloadResponse.app_id)
}

// optional uint32 file_size = 3;
bool CMsgClientUFSDownloadResponse::has_file_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientUFSDownloadResponse::set_has_file_size() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientUFSDownloadResponse::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientUFSDownloadResponse::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
::google::protobuf::uint32 CMsgClientUFSDownloadResponse::file_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSDownloadResponse.file_size)
  return file_size_;
}
void CMsgClientUFSDownloadResponse::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSDownloadResponse.file_size)
}

// optional uint32 raw_file_size = 4;
bool CMsgClientUFSDownloadResponse::has_raw_file_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgClientUFSDownloadResponse::set_has_raw_file_size() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgClientUFSDownloadResponse::clear_has_raw_file_size() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgClientUFSDownloadResponse::clear_raw_file_size() {
  raw_file_size_ = 0u;
  clear_has_raw_file_size();
}
::google::protobuf::uint32 CMsgClientUFSDownloadResponse::raw_file_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSDownloadResponse.raw_file_size)
  return raw_file_size_;
}
void CMsgClientUFSDownloadResponse::set_raw_file_size(::google::protobuf::uint32 value) {
  set_has_raw_file_size();
  raw_file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSDownloadResponse.raw_file_size)
}

// optional bytes sha_file = 5;
bool CMsgClientUFSDownloadResponse::has_sha_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUFSDownloadResponse::set_has_sha_file() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUFSDownloadResponse::clear_has_sha_file() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUFSDownloadResponse::clear_sha_file() {
  sha_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha_file();
}
const ::std::string& CMsgClientUFSDownloadResponse::sha_file() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSDownloadResponse.sha_file)
  return sha_file_.GetNoArena();
}
void CMsgClientUFSDownloadResponse::set_sha_file(const ::std::string& value) {
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSDownloadResponse.sha_file)
}
#if LANG_CXX11
void CMsgClientUFSDownloadResponse::set_sha_file(::std::string&& value) {
  set_has_sha_file();
  sha_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSDownloadResponse.sha_file)
}
#endif
void CMsgClientUFSDownloadResponse::set_sha_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSDownloadResponse.sha_file)
}
void CMsgClientUFSDownloadResponse::set_sha_file(const void* value, size_t size) {
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSDownloadResponse.sha_file)
}
::std::string* CMsgClientUFSDownloadResponse::mutable_sha_file() {
  set_has_sha_file();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSDownloadResponse.sha_file)
  return sha_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSDownloadResponse::release_sha_file() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSDownloadResponse.sha_file)
  clear_has_sha_file();
  return sha_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSDownloadResponse::set_allocated_sha_file(::std::string* sha_file) {
  if (sha_file != NULL) {
    set_has_sha_file();
  } else {
    clear_has_sha_file();
  }
  sha_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha_file);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSDownloadResponse.sha_file)
}

// optional uint64 time_stamp = 6;
bool CMsgClientUFSDownloadResponse::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientUFSDownloadResponse::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientUFSDownloadResponse::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientUFSDownloadResponse::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_time_stamp();
}
::google::protobuf::uint64 CMsgClientUFSDownloadResponse::time_stamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSDownloadResponse.time_stamp)
  return time_stamp_;
}
void CMsgClientUFSDownloadResponse::set_time_stamp(::google::protobuf::uint64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSDownloadResponse.time_stamp)
}

// optional bool is_explicit_delete = 7;
bool CMsgClientUFSDownloadResponse::has_is_explicit_delete() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgClientUFSDownloadResponse::set_has_is_explicit_delete() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgClientUFSDownloadResponse::clear_has_is_explicit_delete() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgClientUFSDownloadResponse::clear_is_explicit_delete() {
  is_explicit_delete_ = false;
  clear_has_is_explicit_delete();
}
bool CMsgClientUFSDownloadResponse::is_explicit_delete() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSDownloadResponse.is_explicit_delete)
  return is_explicit_delete_;
}
void CMsgClientUFSDownloadResponse::set_is_explicit_delete(bool value) {
  set_has_is_explicit_delete();
  is_explicit_delete_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSDownloadResponse.is_explicit_delete)
}

// optional bool use_http = 8;
bool CMsgClientUFSDownloadResponse::has_use_http() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgClientUFSDownloadResponse::set_has_use_http() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgClientUFSDownloadResponse::clear_has_use_http() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgClientUFSDownloadResponse::clear_use_http() {
  use_http_ = false;
  clear_has_use_http();
}
bool CMsgClientUFSDownloadResponse::use_http() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSDownloadResponse.use_http)
  return use_http_;
}
void CMsgClientUFSDownloadResponse::set_use_http(bool value) {
  set_has_use_http();
  use_http_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSDownloadResponse.use_http)
}

// optional string http_host = 9;
bool CMsgClientUFSDownloadResponse::has_http_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientUFSDownloadResponse::set_has_http_host() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientUFSDownloadResponse::clear_has_http_host() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientUFSDownloadResponse::clear_http_host() {
  http_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_http_host();
}
const ::std::string& CMsgClientUFSDownloadResponse::http_host() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSDownloadResponse.http_host)
  return http_host_.GetNoArena();
}
void CMsgClientUFSDownloadResponse::set_http_host(const ::std::string& value) {
  set_has_http_host();
  http_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSDownloadResponse.http_host)
}
#if LANG_CXX11
void CMsgClientUFSDownloadResponse::set_http_host(::std::string&& value) {
  set_has_http_host();
  http_host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSDownloadResponse.http_host)
}
#endif
void CMsgClientUFSDownloadResponse::set_http_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_http_host();
  http_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSDownloadResponse.http_host)
}
void CMsgClientUFSDownloadResponse::set_http_host(const char* value, size_t size) {
  set_has_http_host();
  http_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSDownloadResponse.http_host)
}
::std::string* CMsgClientUFSDownloadResponse::mutable_http_host() {
  set_has_http_host();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSDownloadResponse.http_host)
  return http_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSDownloadResponse::release_http_host() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSDownloadResponse.http_host)
  clear_has_http_host();
  return http_host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSDownloadResponse::set_allocated_http_host(::std::string* http_host) {
  if (http_host != NULL) {
    set_has_http_host();
  } else {
    clear_has_http_host();
  }
  http_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), http_host);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSDownloadResponse.http_host)
}

// optional string http_url = 10;
bool CMsgClientUFSDownloadResponse::has_http_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientUFSDownloadResponse::set_has_http_url() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientUFSDownloadResponse::clear_has_http_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientUFSDownloadResponse::clear_http_url() {
  http_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_http_url();
}
const ::std::string& CMsgClientUFSDownloadResponse::http_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSDownloadResponse.http_url)
  return http_url_.GetNoArena();
}
void CMsgClientUFSDownloadResponse::set_http_url(const ::std::string& value) {
  set_has_http_url();
  http_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSDownloadResponse.http_url)
}
#if LANG_CXX11
void CMsgClientUFSDownloadResponse::set_http_url(::std::string&& value) {
  set_has_http_url();
  http_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSDownloadResponse.http_url)
}
#endif
void CMsgClientUFSDownloadResponse::set_http_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_http_url();
  http_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSDownloadResponse.http_url)
}
void CMsgClientUFSDownloadResponse::set_http_url(const char* value, size_t size) {
  set_has_http_url();
  http_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSDownloadResponse.http_url)
}
::std::string* CMsgClientUFSDownloadResponse::mutable_http_url() {
  set_has_http_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSDownloadResponse.http_url)
  return http_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSDownloadResponse::release_http_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSDownloadResponse.http_url)
  clear_has_http_url();
  return http_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSDownloadResponse::set_allocated_http_url(::std::string* http_url) {
  if (http_url != NULL) {
    set_has_http_url();
  } else {
    clear_has_http_url();
  }
  http_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), http_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSDownloadResponse.http_url)
}

// optional bytes kv_headers = 11;
bool CMsgClientUFSDownloadResponse::has_kv_headers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientUFSDownloadResponse::set_has_kv_headers() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientUFSDownloadResponse::clear_has_kv_headers() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientUFSDownloadResponse::clear_kv_headers() {
  kv_headers_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_kv_headers();
}
const ::std::string& CMsgClientUFSDownloadResponse::kv_headers() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSDownloadResponse.kv_headers)
  return kv_headers_.GetNoArena();
}
void CMsgClientUFSDownloadResponse::set_kv_headers(const ::std::string& value) {
  set_has_kv_headers();
  kv_headers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSDownloadResponse.kv_headers)
}
#if LANG_CXX11
void CMsgClientUFSDownloadResponse::set_kv_headers(::std::string&& value) {
  set_has_kv_headers();
  kv_headers_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSDownloadResponse.kv_headers)
}
#endif
void CMsgClientUFSDownloadResponse::set_kv_headers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_kv_headers();
  kv_headers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSDownloadResponse.kv_headers)
}
void CMsgClientUFSDownloadResponse::set_kv_headers(const void* value, size_t size) {
  set_has_kv_headers();
  kv_headers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSDownloadResponse.kv_headers)
}
::std::string* CMsgClientUFSDownloadResponse::mutable_kv_headers() {
  set_has_kv_headers();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSDownloadResponse.kv_headers)
  return kv_headers_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSDownloadResponse::release_kv_headers() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSDownloadResponse.kv_headers)
  clear_has_kv_headers();
  return kv_headers_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSDownloadResponse::set_allocated_kv_headers(::std::string* kv_headers) {
  if (kv_headers != NULL) {
    set_has_kv_headers();
  } else {
    clear_has_kv_headers();
  }
  kv_headers_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kv_headers);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSDownloadResponse.kv_headers)
}

// optional bool use_https = 12;
bool CMsgClientUFSDownloadResponse::has_use_https() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgClientUFSDownloadResponse::set_has_use_https() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgClientUFSDownloadResponse::clear_has_use_https() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgClientUFSDownloadResponse::clear_use_https() {
  use_https_ = false;
  clear_has_use_https();
}
bool CMsgClientUFSDownloadResponse::use_https() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSDownloadResponse.use_https)
  return use_https_;
}
void CMsgClientUFSDownloadResponse::set_use_https(bool value) {
  set_has_use_https();
  use_https_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSDownloadResponse.use_https)
}

// optional bool encrypted = 13;
bool CMsgClientUFSDownloadResponse::has_encrypted() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgClientUFSDownloadResponse::set_has_encrypted() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgClientUFSDownloadResponse::clear_has_encrypted() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgClientUFSDownloadResponse::clear_encrypted() {
  encrypted_ = false;
  clear_has_encrypted();
}
bool CMsgClientUFSDownloadResponse::encrypted() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSDownloadResponse.encrypted)
  return encrypted_;
}
void CMsgClientUFSDownloadResponse::set_encrypted(bool value) {
  set_has_encrypted();
  encrypted_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSDownloadResponse.encrypted)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSLoginRequest::kProtocolVersionFieldNumber;
const int CMsgClientUFSLoginRequest::kAmSessionTokenFieldNumber;
const int CMsgClientUFSLoginRequest::kAppsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSLoginRequest::CMsgClientUFSLoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSLoginRequest)
}
CMsgClientUFSLoginRequest::CMsgClientUFSLoginRequest(const CMsgClientUFSLoginRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&am_session_token_, &from.am_session_token_,
    reinterpret_cast<char*>(&protocol_version_) -
    reinterpret_cast<char*>(&am_session_token_) + sizeof(protocol_version_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSLoginRequest)
}

void CMsgClientUFSLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&am_session_token_, 0, reinterpret_cast<char*>(&protocol_version_) -
    reinterpret_cast<char*>(&am_session_token_) + sizeof(protocol_version_));
}

CMsgClientUFSLoginRequest::~CMsgClientUFSLoginRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSLoginRequest)
  SharedDtor();
}

void CMsgClientUFSLoginRequest::SharedDtor() {
}

void CMsgClientUFSLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSLoginRequest::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSLoginRequest& CMsgClientUFSLoginRequest::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSLoginRequest* CMsgClientUFSLoginRequest::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSLoginRequest* n = new CMsgClientUFSLoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSLoginRequest)
  apps_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&am_session_token_, 0, reinterpret_cast<char*>(&protocol_version_) -
      reinterpret_cast<char*>(&am_session_token_) + sizeof(protocol_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSLoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 protocol_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 am_session_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_am_session_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &am_session_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 apps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_apps())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_apps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSLoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSLoginRequest)
  return false;
#undef DO_
}

void CMsgClientUFSLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 protocol_version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->protocol_version(), output);
  }

  // optional uint64 am_session_token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->am_session_token(), output);
  }

  // repeated uint32 apps = 3;
  for (int i = 0, n = this->apps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->apps(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSLoginRequest)
}

::google::protobuf::uint8* CMsgClientUFSLoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 protocol_version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->protocol_version(), target);
  }

  // optional uint64 am_session_token = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->am_session_token(), target);
  }

  // repeated uint32 apps = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->apps_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSLoginRequest)
  return target;
}

size_t CMsgClientUFSLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSLoginRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 apps = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->apps_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->apps_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 am_session_token = 2;
    if (has_am_session_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->am_session_token());
    }

    // optional uint32 protocol_version = 1;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSLoginRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSLoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSLoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSLoginRequest)
    MergeFrom(*source);
  }
}

void CMsgClientUFSLoginRequest::MergeFrom(const CMsgClientUFSLoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      am_session_token_ = from.am_session_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      protocol_version_ = from.protocol_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSLoginRequest::CopyFrom(const CMsgClientUFSLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSLoginRequest::IsInitialized() const {
  return true;
}

void CMsgClientUFSLoginRequest::Swap(CMsgClientUFSLoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSLoginRequest::InternalSwap(CMsgClientUFSLoginRequest* other) {
  apps_.InternalSwap(&other->apps_);
  std::swap(am_session_token_, other->am_session_token_);
  std::swap(protocol_version_, other->protocol_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSLoginRequest::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSLoginRequest

// optional uint32 protocol_version = 1;
bool CMsgClientUFSLoginRequest::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientUFSLoginRequest::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientUFSLoginRequest::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientUFSLoginRequest::clear_protocol_version() {
  protocol_version_ = 0u;
  clear_has_protocol_version();
}
::google::protobuf::uint32 CMsgClientUFSLoginRequest::protocol_version() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSLoginRequest.protocol_version)
  return protocol_version_;
}
void CMsgClientUFSLoginRequest::set_protocol_version(::google::protobuf::uint32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSLoginRequest.protocol_version)
}

// optional uint64 am_session_token = 2;
bool CMsgClientUFSLoginRequest::has_am_session_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUFSLoginRequest::set_has_am_session_token() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUFSLoginRequest::clear_has_am_session_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUFSLoginRequest::clear_am_session_token() {
  am_session_token_ = GOOGLE_ULONGLONG(0);
  clear_has_am_session_token();
}
::google::protobuf::uint64 CMsgClientUFSLoginRequest::am_session_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSLoginRequest.am_session_token)
  return am_session_token_;
}
void CMsgClientUFSLoginRequest::set_am_session_token(::google::protobuf::uint64 value) {
  set_has_am_session_token();
  am_session_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSLoginRequest.am_session_token)
}

// repeated uint32 apps = 3;
int CMsgClientUFSLoginRequest::apps_size() const {
  return apps_.size();
}
void CMsgClientUFSLoginRequest::clear_apps() {
  apps_.Clear();
}
::google::protobuf::uint32 CMsgClientUFSLoginRequest::apps(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSLoginRequest.apps)
  return apps_.Get(index);
}
void CMsgClientUFSLoginRequest::set_apps(int index, ::google::protobuf::uint32 value) {
  apps_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSLoginRequest.apps)
}
void CMsgClientUFSLoginRequest::add_apps(::google::protobuf::uint32 value) {
  apps_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientUFSLoginRequest.apps)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientUFSLoginRequest::apps() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientUFSLoginRequest.apps)
  return apps_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientUFSLoginRequest::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientUFSLoginRequest.apps)
  return &apps_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSLoginResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSLoginResponse::CMsgClientUFSLoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSLoginResponse)
}
CMsgClientUFSLoginResponse::CMsgClientUFSLoginResponse(const CMsgClientUFSLoginResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSLoginResponse)
}

void CMsgClientUFSLoginResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
}

CMsgClientUFSLoginResponse::~CMsgClientUFSLoginResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSLoginResponse)
  SharedDtor();
}

void CMsgClientUFSLoginResponse::SharedDtor() {
}

void CMsgClientUFSLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSLoginResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSLoginResponse& CMsgClientUFSLoginResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSLoginResponse* CMsgClientUFSLoginResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSLoginResponse* n = new CMsgClientUFSLoginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSLoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSLoginResponse)
  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSLoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSLoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSLoginResponse)
  return false;
#undef DO_
}

void CMsgClientUFSLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSLoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSLoginResponse)
}

::google::protobuf::uint8* CMsgClientUFSLoginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSLoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSLoginResponse)
  return target;
}

size_t CMsgClientUFSLoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSLoginResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSLoginResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSLoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSLoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSLoginResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSLoginResponse::MergeFrom(const CMsgClientUFSLoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgClientUFSLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSLoginResponse::CopyFrom(const CMsgClientUFSLoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSLoginResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSLoginResponse::Swap(CMsgClientUFSLoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSLoginResponse::InternalSwap(CMsgClientUFSLoginResponse* other) {
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSLoginResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSLoginResponse

// optional int32 eresult = 1 [default = 2];
bool CMsgClientUFSLoginResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUFSLoginResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUFSLoginResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUFSLoginResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientUFSLoginResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSLoginResponse.eresult)
  return eresult_;
}
void CMsgClientUFSLoginResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSLoginResponse.eresult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRequestEncryptedAppTicket::kAppIdFieldNumber;
const int CMsgClientRequestEncryptedAppTicket::kUserdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRequestEncryptedAppTicket::CMsgClientRequestEncryptedAppTicket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRequestEncryptedAppTicket)
}
CMsgClientRequestEncryptedAppTicket::CMsgClientRequestEncryptedAppTicket(const CMsgClientRequestEncryptedAppTicket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userdata()) {
    userdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userdata_);
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRequestEncryptedAppTicket)
}

void CMsgClientRequestEncryptedAppTicket::SharedCtor() {
  _cached_size_ = 0;
  userdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0u;
}

CMsgClientRequestEncryptedAppTicket::~CMsgClientRequestEncryptedAppTicket() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRequestEncryptedAppTicket)
  SharedDtor();
}

void CMsgClientRequestEncryptedAppTicket::SharedDtor() {
  userdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientRequestEncryptedAppTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestEncryptedAppTicket::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientRequestEncryptedAppTicket& CMsgClientRequestEncryptedAppTicket::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientRequestEncryptedAppTicket* CMsgClientRequestEncryptedAppTicket::New(::google::protobuf::Arena* arena) const {
  CMsgClientRequestEncryptedAppTicket* n = new CMsgClientRequestEncryptedAppTicket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientRequestEncryptedAppTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRequestEncryptedAppTicket)
  if (has_userdata()) {
    GOOGLE_DCHECK(!userdata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*userdata_.UnsafeRawStringPointer())->clear();
  }
  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientRequestEncryptedAppTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRequestEncryptedAppTicket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes userdata = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRequestEncryptedAppTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRequestEncryptedAppTicket)
  return false;
#undef DO_
}

void CMsgClientRequestEncryptedAppTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRequestEncryptedAppTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional bytes userdata = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->userdata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRequestEncryptedAppTicket)
}

::google::protobuf::uint8* CMsgClientRequestEncryptedAppTicket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRequestEncryptedAppTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional bytes userdata = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->userdata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRequestEncryptedAppTicket)
  return target;
}

size_t CMsgClientRequestEncryptedAppTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRequestEncryptedAppTicket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes userdata = 2;
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userdata());
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestEncryptedAppTicket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRequestEncryptedAppTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRequestEncryptedAppTicket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientRequestEncryptedAppTicket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRequestEncryptedAppTicket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRequestEncryptedAppTicket)
    MergeFrom(*source);
  }
}

void CMsgClientRequestEncryptedAppTicket::MergeFrom(const CMsgClientRequestEncryptedAppTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRequestEncryptedAppTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_userdata();
      userdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userdata_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientRequestEncryptedAppTicket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRequestEncryptedAppTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestEncryptedAppTicket::CopyFrom(const CMsgClientRequestEncryptedAppTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRequestEncryptedAppTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestEncryptedAppTicket::IsInitialized() const {
  return true;
}

void CMsgClientRequestEncryptedAppTicket::Swap(CMsgClientRequestEncryptedAppTicket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRequestEncryptedAppTicket::InternalSwap(CMsgClientRequestEncryptedAppTicket* other) {
  userdata_.Swap(&other->userdata_);
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientRequestEncryptedAppTicket::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientRequestEncryptedAppTicket

// optional uint32 app_id = 1;
bool CMsgClientRequestEncryptedAppTicket::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientRequestEncryptedAppTicket::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientRequestEncryptedAppTicket::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientRequestEncryptedAppTicket::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientRequestEncryptedAppTicket::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRequestEncryptedAppTicket.app_id)
  return app_id_;
}
void CMsgClientRequestEncryptedAppTicket::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientRequestEncryptedAppTicket.app_id)
}

// optional bytes userdata = 2;
bool CMsgClientRequestEncryptedAppTicket::has_userdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientRequestEncryptedAppTicket::set_has_userdata() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientRequestEncryptedAppTicket::clear_has_userdata() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientRequestEncryptedAppTicket::clear_userdata() {
  userdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userdata();
}
const ::std::string& CMsgClientRequestEncryptedAppTicket::userdata() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRequestEncryptedAppTicket.userdata)
  return userdata_.GetNoArena();
}
void CMsgClientRequestEncryptedAppTicket::set_userdata(const ::std::string& value) {
  set_has_userdata();
  userdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientRequestEncryptedAppTicket.userdata)
}
#if LANG_CXX11
void CMsgClientRequestEncryptedAppTicket::set_userdata(::std::string&& value) {
  set_has_userdata();
  userdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientRequestEncryptedAppTicket.userdata)
}
#endif
void CMsgClientRequestEncryptedAppTicket::set_userdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userdata();
  userdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientRequestEncryptedAppTicket.userdata)
}
void CMsgClientRequestEncryptedAppTicket::set_userdata(const void* value, size_t size) {
  set_has_userdata();
  userdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientRequestEncryptedAppTicket.userdata)
}
::std::string* CMsgClientRequestEncryptedAppTicket::mutable_userdata() {
  set_has_userdata();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientRequestEncryptedAppTicket.userdata)
  return userdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientRequestEncryptedAppTicket::release_userdata() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientRequestEncryptedAppTicket.userdata)
  clear_has_userdata();
  return userdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientRequestEncryptedAppTicket::set_allocated_userdata(::std::string* userdata) {
  if (userdata != NULL) {
    set_has_userdata();
  } else {
    clear_has_userdata();
  }
  userdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userdata);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientRequestEncryptedAppTicket.userdata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRequestEncryptedAppTicketResponse::kAppIdFieldNumber;
const int CMsgClientRequestEncryptedAppTicketResponse::kEresultFieldNumber;
const int CMsgClientRequestEncryptedAppTicketResponse::kEncryptedAppTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRequestEncryptedAppTicketResponse::CMsgClientRequestEncryptedAppTicketResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
}
CMsgClientRequestEncryptedAppTicketResponse::CMsgClientRequestEncryptedAppTicketResponse(const CMsgClientRequestEncryptedAppTicketResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_encrypted_app_ticket()) {
    encrypted_app_ticket_ = new ::proto::steam::EncryptedAppTicket(*from.encrypted_app_ticket_);
  } else {
    encrypted_app_ticket_ = NULL;
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
}

void CMsgClientRequestEncryptedAppTicketResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&encrypted_app_ticket_, 0, reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&encrypted_app_ticket_) + sizeof(app_id_));
  eresult_ = 2;
}

CMsgClientRequestEncryptedAppTicketResponse::~CMsgClientRequestEncryptedAppTicketResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  SharedDtor();
}

void CMsgClientRequestEncryptedAppTicketResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete encrypted_app_ticket_;
  }
}

void CMsgClientRequestEncryptedAppTicketResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestEncryptedAppTicketResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientRequestEncryptedAppTicketResponse& CMsgClientRequestEncryptedAppTicketResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientRequestEncryptedAppTicketResponse* CMsgClientRequestEncryptedAppTicketResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientRequestEncryptedAppTicketResponse* n = new CMsgClientRequestEncryptedAppTicketResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientRequestEncryptedAppTicketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  if (has_encrypted_app_ticket()) {
    GOOGLE_DCHECK(encrypted_app_ticket_ != NULL);
    encrypted_app_ticket_->::proto::steam::EncryptedAppTicket::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    app_id_ = 0u;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientRequestEncryptedAppTicketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult = 2 [default = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.EncryptedAppTicket encrypted_app_ticket = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_encrypted_app_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  return false;
#undef DO_
}

void CMsgClientRequestEncryptedAppTicketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 eresult = 2 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eresult(), output);
  }

  // optional .proto.steam.EncryptedAppTicket encrypted_app_ticket = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->encrypted_app_ticket_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
}

::google::protobuf::uint8* CMsgClientRequestEncryptedAppTicketResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional int32 eresult = 2 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->eresult(), target);
  }

  // optional .proto.steam.EncryptedAppTicket encrypted_app_ticket = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->encrypted_app_ticket_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  return target;
}

size_t CMsgClientRequestEncryptedAppTicketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .proto.steam.EncryptedAppTicket encrypted_app_ticket = 3;
    if (has_encrypted_app_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->encrypted_app_ticket_);
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 eresult = 2 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestEncryptedAppTicketResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRequestEncryptedAppTicketResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientRequestEncryptedAppTicketResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
    MergeFrom(*source);
  }
}

void CMsgClientRequestEncryptedAppTicketResponse::MergeFrom(const CMsgClientRequestEncryptedAppTicketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_encrypted_app_ticket()->::proto::steam::EncryptedAppTicket::MergeFrom(from.encrypted_app_ticket());
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientRequestEncryptedAppTicketResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestEncryptedAppTicketResponse::CopyFrom(const CMsgClientRequestEncryptedAppTicketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRequestEncryptedAppTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestEncryptedAppTicketResponse::IsInitialized() const {
  return true;
}

void CMsgClientRequestEncryptedAppTicketResponse::Swap(CMsgClientRequestEncryptedAppTicketResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRequestEncryptedAppTicketResponse::InternalSwap(CMsgClientRequestEncryptedAppTicketResponse* other) {
  std::swap(encrypted_app_ticket_, other->encrypted_app_ticket_);
  std::swap(app_id_, other->app_id_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientRequestEncryptedAppTicketResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientRequestEncryptedAppTicketResponse

// optional uint32 app_id = 1;
bool CMsgClientRequestEncryptedAppTicketResponse::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientRequestEncryptedAppTicketResponse::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientRequestEncryptedAppTicketResponse::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientRequestEncryptedAppTicketResponse::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientRequestEncryptedAppTicketResponse::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRequestEncryptedAppTicketResponse.app_id)
  return app_id_;
}
void CMsgClientRequestEncryptedAppTicketResponse::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientRequestEncryptedAppTicketResponse.app_id)
}

// optional int32 eresult = 2 [default = 2];
bool CMsgClientRequestEncryptedAppTicketResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientRequestEncryptedAppTicketResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientRequestEncryptedAppTicketResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientRequestEncryptedAppTicketResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientRequestEncryptedAppTicketResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRequestEncryptedAppTicketResponse.eresult)
  return eresult_;
}
void CMsgClientRequestEncryptedAppTicketResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientRequestEncryptedAppTicketResponse.eresult)
}

// optional .proto.steam.EncryptedAppTicket encrypted_app_ticket = 3;
bool CMsgClientRequestEncryptedAppTicketResponse::has_encrypted_app_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientRequestEncryptedAppTicketResponse::set_has_encrypted_app_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientRequestEncryptedAppTicketResponse::clear_has_encrypted_app_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientRequestEncryptedAppTicketResponse::clear_encrypted_app_ticket() {
  if (encrypted_app_ticket_ != NULL) encrypted_app_ticket_->::proto::steam::EncryptedAppTicket::Clear();
  clear_has_encrypted_app_ticket();
}
const ::proto::steam::EncryptedAppTicket& CMsgClientRequestEncryptedAppTicketResponse::encrypted_app_ticket() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientRequestEncryptedAppTicketResponse.encrypted_app_ticket)
  return encrypted_app_ticket_ != NULL ? *encrypted_app_ticket_
                         : *::proto::steam::EncryptedAppTicket::internal_default_instance();
}
::proto::steam::EncryptedAppTicket* CMsgClientRequestEncryptedAppTicketResponse::mutable_encrypted_app_ticket() {
  set_has_encrypted_app_ticket();
  if (encrypted_app_ticket_ == NULL) {
    encrypted_app_ticket_ = new ::proto::steam::EncryptedAppTicket;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientRequestEncryptedAppTicketResponse.encrypted_app_ticket)
  return encrypted_app_ticket_;
}
::proto::steam::EncryptedAppTicket* CMsgClientRequestEncryptedAppTicketResponse::release_encrypted_app_ticket() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientRequestEncryptedAppTicketResponse.encrypted_app_ticket)
  clear_has_encrypted_app_ticket();
  ::proto::steam::EncryptedAppTicket* temp = encrypted_app_ticket_;
  encrypted_app_ticket_ = NULL;
  return temp;
}
void CMsgClientRequestEncryptedAppTicketResponse::set_allocated_encrypted_app_ticket(::proto::steam::EncryptedAppTicket* encrypted_app_ticket) {
  delete encrypted_app_ticket_;
  encrypted_app_ticket_ = encrypted_app_ticket;
  if (encrypted_app_ticket) {
    set_has_encrypted_app_ticket();
  } else {
    clear_has_encrypted_app_ticket();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientRequestEncryptedAppTicketResponse.encrypted_app_ticket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientWalletInfoUpdate::kHasWalletFieldNumber;
const int CMsgClientWalletInfoUpdate::kBalanceFieldNumber;
const int CMsgClientWalletInfoUpdate::kCurrencyFieldNumber;
const int CMsgClientWalletInfoUpdate::kBalanceDelayedFieldNumber;
const int CMsgClientWalletInfoUpdate::kBalance64FieldNumber;
const int CMsgClientWalletInfoUpdate::kBalance64DelayedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientWalletInfoUpdate::CMsgClientWalletInfoUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientWalletInfoUpdate)
}
CMsgClientWalletInfoUpdate::CMsgClientWalletInfoUpdate(const CMsgClientWalletInfoUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&has_wallet_, &from.has_wallet_,
    reinterpret_cast<char*>(&balance64_delayed_) -
    reinterpret_cast<char*>(&has_wallet_) + sizeof(balance64_delayed_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientWalletInfoUpdate)
}

void CMsgClientWalletInfoUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&has_wallet_, 0, reinterpret_cast<char*>(&balance64_delayed_) -
    reinterpret_cast<char*>(&has_wallet_) + sizeof(balance64_delayed_));
}

CMsgClientWalletInfoUpdate::~CMsgClientWalletInfoUpdate() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientWalletInfoUpdate)
  SharedDtor();
}

void CMsgClientWalletInfoUpdate::SharedDtor() {
}

void CMsgClientWalletInfoUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientWalletInfoUpdate::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientWalletInfoUpdate& CMsgClientWalletInfoUpdate::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientWalletInfoUpdate* CMsgClientWalletInfoUpdate::New(::google::protobuf::Arena* arena) const {
  CMsgClientWalletInfoUpdate* n = new CMsgClientWalletInfoUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientWalletInfoUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientWalletInfoUpdate)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&has_wallet_, 0, reinterpret_cast<char*>(&balance64_delayed_) -
      reinterpret_cast<char*>(&has_wallet_) + sizeof(balance64_delayed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientWalletInfoUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientWalletInfoUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_wallet = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_has_wallet();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_wallet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 balance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_balance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 currency = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_currency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 balance_delayed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_balance_delayed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &balance_delayed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 balance64 = 5 [(.proto.steam.php_output_always_number) = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_balance64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &balance64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 balance64_delayed = 6 [(.proto.steam.php_output_always_number) = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_balance64_delayed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &balance64_delayed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientWalletInfoUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientWalletInfoUpdate)
  return false;
#undef DO_
}

void CMsgClientWalletInfoUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientWalletInfoUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_wallet = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_wallet(), output);
  }

  // optional int32 balance = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->balance(), output);
  }

  // optional int32 currency = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currency(), output);
  }

  // optional int32 balance_delayed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->balance_delayed(), output);
  }

  // optional int64 balance64 = 5 [(.proto.steam.php_output_always_number) = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->balance64(), output);
  }

  // optional int64 balance64_delayed = 6 [(.proto.steam.php_output_always_number) = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->balance64_delayed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientWalletInfoUpdate)
}

::google::protobuf::uint8* CMsgClientWalletInfoUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientWalletInfoUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_wallet = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_wallet(), target);
  }

  // optional int32 balance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->balance(), target);
  }

  // optional int32 currency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currency(), target);
  }

  // optional int32 balance_delayed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->balance_delayed(), target);
  }

  // optional int64 balance64 = 5 [(.proto.steam.php_output_always_number) = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->balance64(), target);
  }

  // optional int64 balance64_delayed = 6 [(.proto.steam.php_output_always_number) = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->balance64_delayed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientWalletInfoUpdate)
  return target;
}

size_t CMsgClientWalletInfoUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientWalletInfoUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bool has_wallet = 1;
    if (has_has_wallet()) {
      total_size += 1 + 1;
    }

    // optional int32 balance = 2;
    if (has_balance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->balance());
    }

    // optional int32 currency = 3;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }

    // optional int32 balance_delayed = 4;
    if (has_balance_delayed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->balance_delayed());
    }

    // optional int64 balance64 = 5 [(.proto.steam.php_output_always_number) = true];
    if (has_balance64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->balance64());
    }

    // optional int64 balance64_delayed = 6 [(.proto.steam.php_output_always_number) = true];
    if (has_balance64_delayed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->balance64_delayed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientWalletInfoUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientWalletInfoUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientWalletInfoUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientWalletInfoUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientWalletInfoUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientWalletInfoUpdate)
    MergeFrom(*source);
  }
}

void CMsgClientWalletInfoUpdate::MergeFrom(const CMsgClientWalletInfoUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientWalletInfoUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      has_wallet_ = from.has_wallet_;
    }
    if (cached_has_bits & 0x00000002u) {
      balance_ = from.balance_;
    }
    if (cached_has_bits & 0x00000004u) {
      currency_ = from.currency_;
    }
    if (cached_has_bits & 0x00000008u) {
      balance_delayed_ = from.balance_delayed_;
    }
    if (cached_has_bits & 0x00000010u) {
      balance64_ = from.balance64_;
    }
    if (cached_has_bits & 0x00000020u) {
      balance64_delayed_ = from.balance64_delayed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientWalletInfoUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientWalletInfoUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientWalletInfoUpdate::CopyFrom(const CMsgClientWalletInfoUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientWalletInfoUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientWalletInfoUpdate::IsInitialized() const {
  return true;
}

void CMsgClientWalletInfoUpdate::Swap(CMsgClientWalletInfoUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientWalletInfoUpdate::InternalSwap(CMsgClientWalletInfoUpdate* other) {
  std::swap(has_wallet_, other->has_wallet_);
  std::swap(balance_, other->balance_);
  std::swap(currency_, other->currency_);
  std::swap(balance_delayed_, other->balance_delayed_);
  std::swap(balance64_, other->balance64_);
  std::swap(balance64_delayed_, other->balance64_delayed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientWalletInfoUpdate::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientWalletInfoUpdate

// optional bool has_wallet = 1;
bool CMsgClientWalletInfoUpdate::has_has_wallet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientWalletInfoUpdate::set_has_has_wallet() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientWalletInfoUpdate::clear_has_has_wallet() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientWalletInfoUpdate::clear_has_wallet() {
  has_wallet_ = false;
  clear_has_has_wallet();
}
bool CMsgClientWalletInfoUpdate::has_wallet() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientWalletInfoUpdate.has_wallet)
  return has_wallet_;
}
void CMsgClientWalletInfoUpdate::set_has_wallet(bool value) {
  set_has_has_wallet();
  has_wallet_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientWalletInfoUpdate.has_wallet)
}

// optional int32 balance = 2;
bool CMsgClientWalletInfoUpdate::has_balance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientWalletInfoUpdate::set_has_balance() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientWalletInfoUpdate::clear_has_balance() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientWalletInfoUpdate::clear_balance() {
  balance_ = 0;
  clear_has_balance();
}
::google::protobuf::int32 CMsgClientWalletInfoUpdate::balance() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientWalletInfoUpdate.balance)
  return balance_;
}
void CMsgClientWalletInfoUpdate::set_balance(::google::protobuf::int32 value) {
  set_has_balance();
  balance_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientWalletInfoUpdate.balance)
}

// optional int32 currency = 3;
bool CMsgClientWalletInfoUpdate::has_currency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientWalletInfoUpdate::set_has_currency() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientWalletInfoUpdate::clear_has_currency() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientWalletInfoUpdate::clear_currency() {
  currency_ = 0;
  clear_has_currency();
}
::google::protobuf::int32 CMsgClientWalletInfoUpdate::currency() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientWalletInfoUpdate.currency)
  return currency_;
}
void CMsgClientWalletInfoUpdate::set_currency(::google::protobuf::int32 value) {
  set_has_currency();
  currency_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientWalletInfoUpdate.currency)
}

// optional int32 balance_delayed = 4;
bool CMsgClientWalletInfoUpdate::has_balance_delayed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientWalletInfoUpdate::set_has_balance_delayed() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientWalletInfoUpdate::clear_has_balance_delayed() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientWalletInfoUpdate::clear_balance_delayed() {
  balance_delayed_ = 0;
  clear_has_balance_delayed();
}
::google::protobuf::int32 CMsgClientWalletInfoUpdate::balance_delayed() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientWalletInfoUpdate.balance_delayed)
  return balance_delayed_;
}
void CMsgClientWalletInfoUpdate::set_balance_delayed(::google::protobuf::int32 value) {
  set_has_balance_delayed();
  balance_delayed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientWalletInfoUpdate.balance_delayed)
}

// optional int64 balance64 = 5 [(.proto.steam.php_output_always_number) = true];
bool CMsgClientWalletInfoUpdate::has_balance64() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientWalletInfoUpdate::set_has_balance64() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientWalletInfoUpdate::clear_has_balance64() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientWalletInfoUpdate::clear_balance64() {
  balance64_ = GOOGLE_LONGLONG(0);
  clear_has_balance64();
}
::google::protobuf::int64 CMsgClientWalletInfoUpdate::balance64() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientWalletInfoUpdate.balance64)
  return balance64_;
}
void CMsgClientWalletInfoUpdate::set_balance64(::google::protobuf::int64 value) {
  set_has_balance64();
  balance64_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientWalletInfoUpdate.balance64)
}

// optional int64 balance64_delayed = 6 [(.proto.steam.php_output_always_number) = true];
bool CMsgClientWalletInfoUpdate::has_balance64_delayed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientWalletInfoUpdate::set_has_balance64_delayed() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientWalletInfoUpdate::clear_has_balance64_delayed() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientWalletInfoUpdate::clear_balance64_delayed() {
  balance64_delayed_ = GOOGLE_LONGLONG(0);
  clear_has_balance64_delayed();
}
::google::protobuf::int64 CMsgClientWalletInfoUpdate::balance64_delayed() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientWalletInfoUpdate.balance64_delayed)
  return balance64_delayed_;
}
void CMsgClientWalletInfoUpdate::set_balance64_delayed(::google::protobuf::int64 value) {
  set_has_balance64_delayed();
  balance64_delayed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientWalletInfoUpdate.balance64_delayed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAppInfoUpdate::kLastChangenumberFieldNumber;
const int CMsgClientAppInfoUpdate::kSendChangelistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAppInfoUpdate::CMsgClientAppInfoUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAppInfoUpdate)
}
CMsgClientAppInfoUpdate::CMsgClientAppInfoUpdate(const CMsgClientAppInfoUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_changenumber_, &from.last_changenumber_,
    reinterpret_cast<char*>(&send_changelist_) -
    reinterpret_cast<char*>(&last_changenumber_) + sizeof(send_changelist_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAppInfoUpdate)
}

void CMsgClientAppInfoUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&last_changenumber_, 0, reinterpret_cast<char*>(&send_changelist_) -
    reinterpret_cast<char*>(&last_changenumber_) + sizeof(send_changelist_));
}

CMsgClientAppInfoUpdate::~CMsgClientAppInfoUpdate() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAppInfoUpdate)
  SharedDtor();
}

void CMsgClientAppInfoUpdate::SharedDtor() {
}

void CMsgClientAppInfoUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAppInfoUpdate::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientAppInfoUpdate& CMsgClientAppInfoUpdate::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientAppInfoUpdate* CMsgClientAppInfoUpdate::New(::google::protobuf::Arena* arena) const {
  CMsgClientAppInfoUpdate* n = new CMsgClientAppInfoUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientAppInfoUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAppInfoUpdate)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&last_changenumber_, 0, reinterpret_cast<char*>(&send_changelist_) -
      reinterpret_cast<char*>(&last_changenumber_) + sizeof(send_changelist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientAppInfoUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAppInfoUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 last_changenumber = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_last_changenumber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_changenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_changelist = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_send_changelist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_changelist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAppInfoUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAppInfoUpdate)
  return false;
#undef DO_
}

void CMsgClientAppInfoUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAppInfoUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 last_changenumber = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->last_changenumber(), output);
  }

  // optional bool send_changelist = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->send_changelist(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAppInfoUpdate)
}

::google::protobuf::uint8* CMsgClientAppInfoUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAppInfoUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 last_changenumber = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->last_changenumber(), target);
  }

  // optional bool send_changelist = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->send_changelist(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAppInfoUpdate)
  return target;
}

size_t CMsgClientAppInfoUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAppInfoUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 last_changenumber = 1;
    if (has_last_changenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_changenumber());
    }

    // optional bool send_changelist = 2;
    if (has_send_changelist()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAppInfoUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAppInfoUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAppInfoUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientAppInfoUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAppInfoUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAppInfoUpdate)
    MergeFrom(*source);
  }
}

void CMsgClientAppInfoUpdate::MergeFrom(const CMsgClientAppInfoUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAppInfoUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      last_changenumber_ = from.last_changenumber_;
    }
    if (cached_has_bits & 0x00000002u) {
      send_changelist_ = from.send_changelist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAppInfoUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAppInfoUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAppInfoUpdate::CopyFrom(const CMsgClientAppInfoUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAppInfoUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoUpdate::IsInitialized() const {
  return true;
}

void CMsgClientAppInfoUpdate::Swap(CMsgClientAppInfoUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAppInfoUpdate::InternalSwap(CMsgClientAppInfoUpdate* other) {
  std::swap(last_changenumber_, other->last_changenumber_);
  std::swap(send_changelist_, other->send_changelist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientAppInfoUpdate::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientAppInfoUpdate

// optional uint32 last_changenumber = 1;
bool CMsgClientAppInfoUpdate::has_last_changenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientAppInfoUpdate::set_has_last_changenumber() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientAppInfoUpdate::clear_has_last_changenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientAppInfoUpdate::clear_last_changenumber() {
  last_changenumber_ = 0u;
  clear_has_last_changenumber();
}
::google::protobuf::uint32 CMsgClientAppInfoUpdate::last_changenumber() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAppInfoUpdate.last_changenumber)
  return last_changenumber_;
}
void CMsgClientAppInfoUpdate::set_last_changenumber(::google::protobuf::uint32 value) {
  set_has_last_changenumber();
  last_changenumber_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAppInfoUpdate.last_changenumber)
}

// optional bool send_changelist = 2;
bool CMsgClientAppInfoUpdate::has_send_changelist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientAppInfoUpdate::set_has_send_changelist() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientAppInfoUpdate::clear_has_send_changelist() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientAppInfoUpdate::clear_send_changelist() {
  send_changelist_ = false;
  clear_has_send_changelist();
}
bool CMsgClientAppInfoUpdate::send_changelist() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAppInfoUpdate.send_changelist)
  return send_changelist_;
}
void CMsgClientAppInfoUpdate::set_send_changelist(bool value) {
  set_has_send_changelist();
  send_changelist_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAppInfoUpdate.send_changelist)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAppInfoChanges::kCurrentChangeNumberFieldNumber;
const int CMsgClientAppInfoChanges::kForceFullUpdateFieldNumber;
const int CMsgClientAppInfoChanges::kAppIDsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAppInfoChanges::CMsgClientAppInfoChanges()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAppInfoChanges)
}
CMsgClientAppInfoChanges::CMsgClientAppInfoChanges(const CMsgClientAppInfoChanges& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      appids_(from.appids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&current_change_number_, &from.current_change_number_,
    reinterpret_cast<char*>(&force_full_update_) -
    reinterpret_cast<char*>(&current_change_number_) + sizeof(force_full_update_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAppInfoChanges)
}

void CMsgClientAppInfoChanges::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&current_change_number_, 0, reinterpret_cast<char*>(&force_full_update_) -
    reinterpret_cast<char*>(&current_change_number_) + sizeof(force_full_update_));
}

CMsgClientAppInfoChanges::~CMsgClientAppInfoChanges() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAppInfoChanges)
  SharedDtor();
}

void CMsgClientAppInfoChanges::SharedDtor() {
}

void CMsgClientAppInfoChanges::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAppInfoChanges::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientAppInfoChanges& CMsgClientAppInfoChanges::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientAppInfoChanges* CMsgClientAppInfoChanges::New(::google::protobuf::Arena* arena) const {
  CMsgClientAppInfoChanges* n = new CMsgClientAppInfoChanges;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientAppInfoChanges::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAppInfoChanges)
  appids_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&current_change_number_, 0, reinterpret_cast<char*>(&force_full_update_) -
      reinterpret_cast<char*>(&current_change_number_) + sizeof(force_full_update_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientAppInfoChanges::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAppInfoChanges)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 current_change_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_current_change_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_change_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_full_update = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_force_full_update();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_full_update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 appIDs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_appids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_appids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAppInfoChanges)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAppInfoChanges)
  return false;
#undef DO_
}

void CMsgClientAppInfoChanges::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAppInfoChanges)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 current_change_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->current_change_number(), output);
  }

  // optional bool force_full_update = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->force_full_update(), output);
  }

  // repeated uint32 appIDs = 3;
  for (int i = 0, n = this->appids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->appids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAppInfoChanges)
}

::google::protobuf::uint8* CMsgClientAppInfoChanges::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAppInfoChanges)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 current_change_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->current_change_number(), target);
  }

  // optional bool force_full_update = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->force_full_update(), target);
  }

  // repeated uint32 appIDs = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->appids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAppInfoChanges)
  return target;
}

size_t CMsgClientAppInfoChanges::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAppInfoChanges)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 appIDs = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->appids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->appids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 current_change_number = 1;
    if (has_current_change_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_change_number());
    }

    // optional bool force_full_update = 2;
    if (has_force_full_update()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAppInfoChanges::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAppInfoChanges)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAppInfoChanges* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientAppInfoChanges>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAppInfoChanges)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAppInfoChanges)
    MergeFrom(*source);
  }
}

void CMsgClientAppInfoChanges::MergeFrom(const CMsgClientAppInfoChanges& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAppInfoChanges)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  appids_.MergeFrom(from.appids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      current_change_number_ = from.current_change_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      force_full_update_ = from.force_full_update_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAppInfoChanges::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAppInfoChanges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAppInfoChanges::CopyFrom(const CMsgClientAppInfoChanges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAppInfoChanges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoChanges::IsInitialized() const {
  return true;
}

void CMsgClientAppInfoChanges::Swap(CMsgClientAppInfoChanges* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAppInfoChanges::InternalSwap(CMsgClientAppInfoChanges* other) {
  appids_.InternalSwap(&other->appids_);
  std::swap(current_change_number_, other->current_change_number_);
  std::swap(force_full_update_, other->force_full_update_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientAppInfoChanges::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientAppInfoChanges

// optional uint32 current_change_number = 1;
bool CMsgClientAppInfoChanges::has_current_change_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientAppInfoChanges::set_has_current_change_number() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientAppInfoChanges::clear_has_current_change_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientAppInfoChanges::clear_current_change_number() {
  current_change_number_ = 0u;
  clear_has_current_change_number();
}
::google::protobuf::uint32 CMsgClientAppInfoChanges::current_change_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAppInfoChanges.current_change_number)
  return current_change_number_;
}
void CMsgClientAppInfoChanges::set_current_change_number(::google::protobuf::uint32 value) {
  set_has_current_change_number();
  current_change_number_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAppInfoChanges.current_change_number)
}

// optional bool force_full_update = 2;
bool CMsgClientAppInfoChanges::has_force_full_update() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientAppInfoChanges::set_has_force_full_update() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientAppInfoChanges::clear_has_force_full_update() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientAppInfoChanges::clear_force_full_update() {
  force_full_update_ = false;
  clear_has_force_full_update();
}
bool CMsgClientAppInfoChanges::force_full_update() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAppInfoChanges.force_full_update)
  return force_full_update_;
}
void CMsgClientAppInfoChanges::set_force_full_update(bool value) {
  set_has_force_full_update();
  force_full_update_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAppInfoChanges.force_full_update)
}

// repeated uint32 appIDs = 3;
int CMsgClientAppInfoChanges::appids_size() const {
  return appids_.size();
}
void CMsgClientAppInfoChanges::clear_appids() {
  appids_.Clear();
}
::google::protobuf::uint32 CMsgClientAppInfoChanges::appids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAppInfoChanges.appIDs)
  return appids_.Get(index);
}
void CMsgClientAppInfoChanges::set_appids(int index, ::google::protobuf::uint32 value) {
  appids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAppInfoChanges.appIDs)
}
void CMsgClientAppInfoChanges::add_appids(::google::protobuf::uint32 value) {
  appids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientAppInfoChanges.appIDs)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientAppInfoChanges::appids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientAppInfoChanges.appIDs)
  return appids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientAppInfoChanges::mutable_appids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientAppInfoChanges.appIDs)
  return &appids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAppInfoRequest_App::kAppIdFieldNumber;
const int CMsgClientAppInfoRequest_App::kSectionFlagsFieldNumber;
const int CMsgClientAppInfoRequest_App::kSectionCRCFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAppInfoRequest_App::CMsgClientAppInfoRequest_App()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAppInfoRequest.App)
}
CMsgClientAppInfoRequest_App::CMsgClientAppInfoRequest_App(const CMsgClientAppInfoRequest_App& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      section_crc_(from.section_crc_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&section_flags_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(section_flags_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAppInfoRequest.App)
}

void CMsgClientAppInfoRequest_App::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&section_flags_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(section_flags_));
}

CMsgClientAppInfoRequest_App::~CMsgClientAppInfoRequest_App() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAppInfoRequest.App)
  SharedDtor();
}

void CMsgClientAppInfoRequest_App::SharedDtor() {
}

void CMsgClientAppInfoRequest_App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAppInfoRequest_App::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientAppInfoRequest_App& CMsgClientAppInfoRequest_App::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientAppInfoRequest_App* CMsgClientAppInfoRequest_App::New(::google::protobuf::Arena* arena) const {
  CMsgClientAppInfoRequest_App* n = new CMsgClientAppInfoRequest_App;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientAppInfoRequest_App::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAppInfoRequest.App)
  section_crc_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&section_flags_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(section_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientAppInfoRequest_App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAppInfoRequest.App)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 section_flags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_section_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 section_CRC = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_section_crc())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_section_crc())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAppInfoRequest.App)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAppInfoRequest.App)
  return false;
#undef DO_
}

void CMsgClientAppInfoRequest_App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAppInfoRequest.App)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 section_flags = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->section_flags(), output);
  }

  // repeated uint32 section_CRC = 3;
  for (int i = 0, n = this->section_crc_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->section_crc(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAppInfoRequest.App)
}

::google::protobuf::uint8* CMsgClientAppInfoRequest_App::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAppInfoRequest.App)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional uint32 section_flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->section_flags(), target);
  }

  // repeated uint32 section_CRC = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->section_crc_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAppInfoRequest.App)
  return target;
}

size_t CMsgClientAppInfoRequest_App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAppInfoRequest.App)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 section_CRC = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->section_crc_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->section_crc_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 section_flags = 2;
    if (has_section_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->section_flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAppInfoRequest_App::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAppInfoRequest.App)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAppInfoRequest_App* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientAppInfoRequest_App>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAppInfoRequest.App)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAppInfoRequest.App)
    MergeFrom(*source);
  }
}

void CMsgClientAppInfoRequest_App::MergeFrom(const CMsgClientAppInfoRequest_App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAppInfoRequest.App)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  section_crc_.MergeFrom(from.section_crc_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      section_flags_ = from.section_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAppInfoRequest_App::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAppInfoRequest.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAppInfoRequest_App::CopyFrom(const CMsgClientAppInfoRequest_App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAppInfoRequest.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoRequest_App::IsInitialized() const {
  return true;
}

void CMsgClientAppInfoRequest_App::Swap(CMsgClientAppInfoRequest_App* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAppInfoRequest_App::InternalSwap(CMsgClientAppInfoRequest_App* other) {
  section_crc_.InternalSwap(&other->section_crc_);
  std::swap(app_id_, other->app_id_);
  std::swap(section_flags_, other->section_flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientAppInfoRequest_App::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientAppInfoRequest_App

// optional uint32 app_id = 1;
bool CMsgClientAppInfoRequest_App::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientAppInfoRequest_App::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientAppInfoRequest_App::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientAppInfoRequest_App::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientAppInfoRequest_App::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAppInfoRequest.App.app_id)
  return app_id_;
}
void CMsgClientAppInfoRequest_App::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAppInfoRequest.App.app_id)
}

// optional uint32 section_flags = 2;
bool CMsgClientAppInfoRequest_App::has_section_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientAppInfoRequest_App::set_has_section_flags() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientAppInfoRequest_App::clear_has_section_flags() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientAppInfoRequest_App::clear_section_flags() {
  section_flags_ = 0u;
  clear_has_section_flags();
}
::google::protobuf::uint32 CMsgClientAppInfoRequest_App::section_flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAppInfoRequest.App.section_flags)
  return section_flags_;
}
void CMsgClientAppInfoRequest_App::set_section_flags(::google::protobuf::uint32 value) {
  set_has_section_flags();
  section_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAppInfoRequest.App.section_flags)
}

// repeated uint32 section_CRC = 3;
int CMsgClientAppInfoRequest_App::section_crc_size() const {
  return section_crc_.size();
}
void CMsgClientAppInfoRequest_App::clear_section_crc() {
  section_crc_.Clear();
}
::google::protobuf::uint32 CMsgClientAppInfoRequest_App::section_crc(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAppInfoRequest.App.section_CRC)
  return section_crc_.Get(index);
}
void CMsgClientAppInfoRequest_App::set_section_crc(int index, ::google::protobuf::uint32 value) {
  section_crc_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAppInfoRequest.App.section_CRC)
}
void CMsgClientAppInfoRequest_App::add_section_crc(::google::protobuf::uint32 value) {
  section_crc_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientAppInfoRequest.App.section_CRC)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientAppInfoRequest_App::section_crc() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientAppInfoRequest.App.section_CRC)
  return section_crc_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientAppInfoRequest_App::mutable_section_crc() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientAppInfoRequest.App.section_CRC)
  return &section_crc_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAppInfoRequest::kAppsFieldNumber;
const int CMsgClientAppInfoRequest::kSupportsBatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAppInfoRequest::CMsgClientAppInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAppInfoRequest)
}
CMsgClientAppInfoRequest::CMsgClientAppInfoRequest(const CMsgClientAppInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  supports_batches_ = from.supports_batches_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAppInfoRequest)
}

void CMsgClientAppInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  supports_batches_ = false;
}

CMsgClientAppInfoRequest::~CMsgClientAppInfoRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAppInfoRequest)
  SharedDtor();
}

void CMsgClientAppInfoRequest::SharedDtor() {
}

void CMsgClientAppInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAppInfoRequest::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientAppInfoRequest& CMsgClientAppInfoRequest::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientAppInfoRequest* CMsgClientAppInfoRequest::New(::google::protobuf::Arena* arena) const {
  CMsgClientAppInfoRequest* n = new CMsgClientAppInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientAppInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAppInfoRequest)
  apps_.Clear();
  supports_batches_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientAppInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAppInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientAppInfoRequest.App apps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool supports_batches = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_supports_batches();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supports_batches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAppInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAppInfoRequest)
  return false;
#undef DO_
}

void CMsgClientAppInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAppInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientAppInfoRequest.App apps = 1;
  for (unsigned int i = 0, n = this->apps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->apps(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool supports_batches = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->supports_batches(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAppInfoRequest)
}

::google::protobuf::uint8* CMsgClientAppInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAppInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientAppInfoRequest.App apps = 1;
  for (unsigned int i = 0, n = this->apps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->apps(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool supports_batches = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->supports_batches(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAppInfoRequest)
  return target;
}

size_t CMsgClientAppInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAppInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientAppInfoRequest.App apps = 1;
  {
    unsigned int count = this->apps_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->apps(i));
    }
  }

  // optional bool supports_batches = 2 [default = false];
  if (has_supports_batches()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAppInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAppInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAppInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientAppInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAppInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAppInfoRequest)
    MergeFrom(*source);
  }
}

void CMsgClientAppInfoRequest::MergeFrom(const CMsgClientAppInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAppInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  if (from.has_supports_batches()) {
    set_supports_batches(from.supports_batches());
  }
}

void CMsgClientAppInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAppInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAppInfoRequest::CopyFrom(const CMsgClientAppInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAppInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoRequest::IsInitialized() const {
  return true;
}

void CMsgClientAppInfoRequest::Swap(CMsgClientAppInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAppInfoRequest::InternalSwap(CMsgClientAppInfoRequest* other) {
  apps_.InternalSwap(&other->apps_);
  std::swap(supports_batches_, other->supports_batches_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientAppInfoRequest::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientAppInfoRequest

// repeated .proto.steam.CMsgClientAppInfoRequest.App apps = 1;
int CMsgClientAppInfoRequest::apps_size() const {
  return apps_.size();
}
void CMsgClientAppInfoRequest::clear_apps() {
  apps_.Clear();
}
const ::proto::steam::CMsgClientAppInfoRequest_App& CMsgClientAppInfoRequest::apps(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAppInfoRequest.apps)
  return apps_.Get(index);
}
::proto::steam::CMsgClientAppInfoRequest_App* CMsgClientAppInfoRequest::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientAppInfoRequest.apps)
  return apps_.Mutable(index);
}
::proto::steam::CMsgClientAppInfoRequest_App* CMsgClientAppInfoRequest::add_apps() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientAppInfoRequest.apps)
  return apps_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientAppInfoRequest_App >*
CMsgClientAppInfoRequest::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientAppInfoRequest.apps)
  return &apps_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientAppInfoRequest_App >&
CMsgClientAppInfoRequest::apps() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientAppInfoRequest.apps)
  return apps_;
}

// optional bool supports_batches = 2 [default = false];
bool CMsgClientAppInfoRequest::has_supports_batches() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientAppInfoRequest::set_has_supports_batches() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientAppInfoRequest::clear_has_supports_batches() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientAppInfoRequest::clear_supports_batches() {
  supports_batches_ = false;
  clear_has_supports_batches();
}
bool CMsgClientAppInfoRequest::supports_batches() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAppInfoRequest.supports_batches)
  return supports_batches_;
}
void CMsgClientAppInfoRequest::set_supports_batches(bool value) {
  set_has_supports_batches();
  supports_batches_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAppInfoRequest.supports_batches)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAppInfoResponse_App_Section::kSectionIdFieldNumber;
const int CMsgClientAppInfoResponse_App_Section::kSectionKvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAppInfoResponse_App_Section::CMsgClientAppInfoResponse_App_Section()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAppInfoResponse.App.Section)
}
CMsgClientAppInfoResponse_App_Section::CMsgClientAppInfoResponse_App_Section(const CMsgClientAppInfoResponse_App_Section& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  section_kv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_section_kv()) {
    section_kv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.section_kv_);
  }
  section_id_ = from.section_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAppInfoResponse.App.Section)
}

void CMsgClientAppInfoResponse_App_Section::SharedCtor() {
  _cached_size_ = 0;
  section_kv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  section_id_ = 0u;
}

CMsgClientAppInfoResponse_App_Section::~CMsgClientAppInfoResponse_App_Section() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAppInfoResponse.App.Section)
  SharedDtor();
}

void CMsgClientAppInfoResponse_App_Section::SharedDtor() {
  section_kv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientAppInfoResponse_App_Section::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAppInfoResponse_App_Section::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientAppInfoResponse_App_Section& CMsgClientAppInfoResponse_App_Section::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientAppInfoResponse_App_Section* CMsgClientAppInfoResponse_App_Section::New(::google::protobuf::Arena* arena) const {
  CMsgClientAppInfoResponse_App_Section* n = new CMsgClientAppInfoResponse_App_Section;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientAppInfoResponse_App_Section::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAppInfoResponse.App.Section)
  if (has_section_kv()) {
    GOOGLE_DCHECK(!section_kv_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*section_kv_.UnsafeRawStringPointer())->clear();
  }
  section_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientAppInfoResponse_App_Section::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAppInfoResponse.App.Section)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 section_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_section_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes section_kv = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_section_kv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAppInfoResponse.App.Section)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAppInfoResponse.App.Section)
  return false;
#undef DO_
}

void CMsgClientAppInfoResponse_App_Section::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAppInfoResponse.App.Section)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 section_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->section_id(), output);
  }

  // optional bytes section_kv = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->section_kv(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAppInfoResponse.App.Section)
}

::google::protobuf::uint8* CMsgClientAppInfoResponse_App_Section::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAppInfoResponse.App.Section)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 section_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->section_id(), target);
  }

  // optional bytes section_kv = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->section_kv(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAppInfoResponse.App.Section)
  return target;
}

size_t CMsgClientAppInfoResponse_App_Section::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAppInfoResponse.App.Section)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes section_kv = 2;
    if (has_section_kv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->section_kv());
    }

    // optional uint32 section_id = 1;
    if (has_section_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->section_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAppInfoResponse_App_Section::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAppInfoResponse.App.Section)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAppInfoResponse_App_Section* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientAppInfoResponse_App_Section>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAppInfoResponse.App.Section)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAppInfoResponse.App.Section)
    MergeFrom(*source);
  }
}

void CMsgClientAppInfoResponse_App_Section::MergeFrom(const CMsgClientAppInfoResponse_App_Section& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAppInfoResponse.App.Section)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_section_kv();
      section_kv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.section_kv_);
    }
    if (cached_has_bits & 0x00000002u) {
      section_id_ = from.section_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAppInfoResponse_App_Section::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAppInfoResponse.App.Section)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAppInfoResponse_App_Section::CopyFrom(const CMsgClientAppInfoResponse_App_Section& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAppInfoResponse.App.Section)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoResponse_App_Section::IsInitialized() const {
  return true;
}

void CMsgClientAppInfoResponse_App_Section::Swap(CMsgClientAppInfoResponse_App_Section* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAppInfoResponse_App_Section::InternalSwap(CMsgClientAppInfoResponse_App_Section* other) {
  section_kv_.Swap(&other->section_kv_);
  std::swap(section_id_, other->section_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientAppInfoResponse_App_Section::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientAppInfoResponse_App_Section

// optional uint32 section_id = 1;
bool CMsgClientAppInfoResponse_App_Section::has_section_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientAppInfoResponse_App_Section::set_has_section_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientAppInfoResponse_App_Section::clear_has_section_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientAppInfoResponse_App_Section::clear_section_id() {
  section_id_ = 0u;
  clear_has_section_id();
}
::google::protobuf::uint32 CMsgClientAppInfoResponse_App_Section::section_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAppInfoResponse.App.Section.section_id)
  return section_id_;
}
void CMsgClientAppInfoResponse_App_Section::set_section_id(::google::protobuf::uint32 value) {
  set_has_section_id();
  section_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAppInfoResponse.App.Section.section_id)
}

// optional bytes section_kv = 2;
bool CMsgClientAppInfoResponse_App_Section::has_section_kv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientAppInfoResponse_App_Section::set_has_section_kv() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientAppInfoResponse_App_Section::clear_has_section_kv() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientAppInfoResponse_App_Section::clear_section_kv() {
  section_kv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_section_kv();
}
const ::std::string& CMsgClientAppInfoResponse_App_Section::section_kv() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAppInfoResponse.App.Section.section_kv)
  return section_kv_.GetNoArena();
}
void CMsgClientAppInfoResponse_App_Section::set_section_kv(const ::std::string& value) {
  set_has_section_kv();
  section_kv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAppInfoResponse.App.Section.section_kv)
}
#if LANG_CXX11
void CMsgClientAppInfoResponse_App_Section::set_section_kv(::std::string&& value) {
  set_has_section_kv();
  section_kv_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientAppInfoResponse.App.Section.section_kv)
}
#endif
void CMsgClientAppInfoResponse_App_Section::set_section_kv(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_section_kv();
  section_kv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientAppInfoResponse.App.Section.section_kv)
}
void CMsgClientAppInfoResponse_App_Section::set_section_kv(const void* value, size_t size) {
  set_has_section_kv();
  section_kv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientAppInfoResponse.App.Section.section_kv)
}
::std::string* CMsgClientAppInfoResponse_App_Section::mutable_section_kv() {
  set_has_section_kv();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientAppInfoResponse.App.Section.section_kv)
  return section_kv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientAppInfoResponse_App_Section::release_section_kv() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientAppInfoResponse.App.Section.section_kv)
  clear_has_section_kv();
  return section_kv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientAppInfoResponse_App_Section::set_allocated_section_kv(::std::string* section_kv) {
  if (section_kv != NULL) {
    set_has_section_kv();
  } else {
    clear_has_section_kv();
  }
  section_kv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), section_kv);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientAppInfoResponse.App.Section.section_kv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAppInfoResponse_App::kAppIdFieldNumber;
const int CMsgClientAppInfoResponse_App::kChangeNumberFieldNumber;
const int CMsgClientAppInfoResponse_App::kSectionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAppInfoResponse_App::CMsgClientAppInfoResponse_App()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAppInfoResponse.App)
}
CMsgClientAppInfoResponse_App::CMsgClientAppInfoResponse_App(const CMsgClientAppInfoResponse_App& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sections_(from.sections_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&change_number_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(change_number_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAppInfoResponse.App)
}

void CMsgClientAppInfoResponse_App::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&change_number_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(change_number_));
}

CMsgClientAppInfoResponse_App::~CMsgClientAppInfoResponse_App() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAppInfoResponse.App)
  SharedDtor();
}

void CMsgClientAppInfoResponse_App::SharedDtor() {
}

void CMsgClientAppInfoResponse_App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAppInfoResponse_App::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientAppInfoResponse_App& CMsgClientAppInfoResponse_App::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientAppInfoResponse_App* CMsgClientAppInfoResponse_App::New(::google::protobuf::Arena* arena) const {
  CMsgClientAppInfoResponse_App* n = new CMsgClientAppInfoResponse_App;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientAppInfoResponse_App::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAppInfoResponse.App)
  sections_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&change_number_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(change_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientAppInfoResponse_App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAppInfoResponse.App)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 change_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_change_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientAppInfoResponse.App.Section sections = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAppInfoResponse.App)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAppInfoResponse.App)
  return false;
#undef DO_
}

void CMsgClientAppInfoResponse_App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAppInfoResponse.App)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_number(), output);
  }

  // repeated .proto.steam.CMsgClientAppInfoResponse.App.Section sections = 3;
  for (unsigned int i = 0, n = this->sections_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sections(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAppInfoResponse.App)
}

::google::protobuf::uint8* CMsgClientAppInfoResponse_App::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAppInfoResponse.App)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->change_number(), target);
  }

  // repeated .proto.steam.CMsgClientAppInfoResponse.App.Section sections = 3;
  for (unsigned int i = 0, n = this->sections_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->sections(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAppInfoResponse.App)
  return target;
}

size_t CMsgClientAppInfoResponse_App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAppInfoResponse.App)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientAppInfoResponse.App.Section sections = 3;
  {
    unsigned int count = this->sections_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sections(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 change_number = 2;
    if (has_change_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAppInfoResponse_App::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAppInfoResponse.App)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAppInfoResponse_App* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientAppInfoResponse_App>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAppInfoResponse.App)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAppInfoResponse.App)
    MergeFrom(*source);
  }
}

void CMsgClientAppInfoResponse_App::MergeFrom(const CMsgClientAppInfoResponse_App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAppInfoResponse.App)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sections_.MergeFrom(from.sections_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      change_number_ = from.change_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAppInfoResponse_App::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAppInfoResponse.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAppInfoResponse_App::CopyFrom(const CMsgClientAppInfoResponse_App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAppInfoResponse.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoResponse_App::IsInitialized() const {
  return true;
}

void CMsgClientAppInfoResponse_App::Swap(CMsgClientAppInfoResponse_App* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAppInfoResponse_App::InternalSwap(CMsgClientAppInfoResponse_App* other) {
  sections_.InternalSwap(&other->sections_);
  std::swap(app_id_, other->app_id_);
  std::swap(change_number_, other->change_number_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientAppInfoResponse_App::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientAppInfoResponse_App

// optional uint32 app_id = 1;
bool CMsgClientAppInfoResponse_App::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientAppInfoResponse_App::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientAppInfoResponse_App::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientAppInfoResponse_App::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientAppInfoResponse_App::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAppInfoResponse.App.app_id)
  return app_id_;
}
void CMsgClientAppInfoResponse_App::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAppInfoResponse.App.app_id)
}

// optional uint32 change_number = 2;
bool CMsgClientAppInfoResponse_App::has_change_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientAppInfoResponse_App::set_has_change_number() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientAppInfoResponse_App::clear_has_change_number() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientAppInfoResponse_App::clear_change_number() {
  change_number_ = 0u;
  clear_has_change_number();
}
::google::protobuf::uint32 CMsgClientAppInfoResponse_App::change_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAppInfoResponse.App.change_number)
  return change_number_;
}
void CMsgClientAppInfoResponse_App::set_change_number(::google::protobuf::uint32 value) {
  set_has_change_number();
  change_number_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAppInfoResponse.App.change_number)
}

// repeated .proto.steam.CMsgClientAppInfoResponse.App.Section sections = 3;
int CMsgClientAppInfoResponse_App::sections_size() const {
  return sections_.size();
}
void CMsgClientAppInfoResponse_App::clear_sections() {
  sections_.Clear();
}
const ::proto::steam::CMsgClientAppInfoResponse_App_Section& CMsgClientAppInfoResponse_App::sections(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAppInfoResponse.App.sections)
  return sections_.Get(index);
}
::proto::steam::CMsgClientAppInfoResponse_App_Section* CMsgClientAppInfoResponse_App::mutable_sections(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientAppInfoResponse.App.sections)
  return sections_.Mutable(index);
}
::proto::steam::CMsgClientAppInfoResponse_App_Section* CMsgClientAppInfoResponse_App::add_sections() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientAppInfoResponse.App.sections)
  return sections_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientAppInfoResponse_App_Section >*
CMsgClientAppInfoResponse_App::mutable_sections() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientAppInfoResponse.App.sections)
  return &sections_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientAppInfoResponse_App_Section >&
CMsgClientAppInfoResponse_App::sections() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientAppInfoResponse.App.sections)
  return sections_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAppInfoResponse::kAppsFieldNumber;
const int CMsgClientAppInfoResponse::kAppsUnknownFieldNumber;
const int CMsgClientAppInfoResponse::kAppsPendingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAppInfoResponse::CMsgClientAppInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAppInfoResponse)
}
CMsgClientAppInfoResponse::CMsgClientAppInfoResponse(const CMsgClientAppInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      apps_(from.apps_),
      apps_unknown_(from.apps_unknown_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  apps_pending_ = from.apps_pending_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAppInfoResponse)
}

void CMsgClientAppInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  apps_pending_ = 0u;
}

CMsgClientAppInfoResponse::~CMsgClientAppInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAppInfoResponse)
  SharedDtor();
}

void CMsgClientAppInfoResponse::SharedDtor() {
}

void CMsgClientAppInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAppInfoResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientAppInfoResponse& CMsgClientAppInfoResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientAppInfoResponse* CMsgClientAppInfoResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientAppInfoResponse* n = new CMsgClientAppInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientAppInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAppInfoResponse)
  apps_.Clear();
  apps_unknown_.Clear();
  apps_pending_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientAppInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAppInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientAppInfoResponse.App apps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 apps_unknown = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_apps_unknown())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_apps_unknown())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 apps_pending = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_apps_pending();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apps_pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAppInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAppInfoResponse)
  return false;
#undef DO_
}

void CMsgClientAppInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAppInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientAppInfoResponse.App apps = 1;
  for (unsigned int i = 0, n = this->apps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->apps(i), output);
  }

  // repeated uint32 apps_unknown = 2;
  for (int i = 0, n = this->apps_unknown_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->apps_unknown(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 apps_pending = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->apps_pending(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAppInfoResponse)
}

::google::protobuf::uint8* CMsgClientAppInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAppInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientAppInfoResponse.App apps = 1;
  for (unsigned int i = 0, n = this->apps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->apps(i), deterministic, target);
  }

  // repeated uint32 apps_unknown = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->apps_unknown_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 apps_pending = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->apps_pending(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAppInfoResponse)
  return target;
}

size_t CMsgClientAppInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAppInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientAppInfoResponse.App apps = 1;
  {
    unsigned int count = this->apps_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->apps(i));
    }
  }

  // repeated uint32 apps_unknown = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->apps_unknown_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->apps_unknown_size());
    total_size += data_size;
  }

  // optional uint32 apps_pending = 3;
  if (has_apps_pending()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->apps_pending());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAppInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAppInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAppInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientAppInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAppInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAppInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgClientAppInfoResponse::MergeFrom(const CMsgClientAppInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAppInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  apps_unknown_.MergeFrom(from.apps_unknown_);
  if (from.has_apps_pending()) {
    set_apps_pending(from.apps_pending());
  }
}

void CMsgClientAppInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAppInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAppInfoResponse::CopyFrom(const CMsgClientAppInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAppInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoResponse::IsInitialized() const {
  return true;
}

void CMsgClientAppInfoResponse::Swap(CMsgClientAppInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAppInfoResponse::InternalSwap(CMsgClientAppInfoResponse* other) {
  apps_.InternalSwap(&other->apps_);
  apps_unknown_.InternalSwap(&other->apps_unknown_);
  std::swap(apps_pending_, other->apps_pending_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientAppInfoResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientAppInfoResponse

// repeated .proto.steam.CMsgClientAppInfoResponse.App apps = 1;
int CMsgClientAppInfoResponse::apps_size() const {
  return apps_.size();
}
void CMsgClientAppInfoResponse::clear_apps() {
  apps_.Clear();
}
const ::proto::steam::CMsgClientAppInfoResponse_App& CMsgClientAppInfoResponse::apps(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAppInfoResponse.apps)
  return apps_.Get(index);
}
::proto::steam::CMsgClientAppInfoResponse_App* CMsgClientAppInfoResponse::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientAppInfoResponse.apps)
  return apps_.Mutable(index);
}
::proto::steam::CMsgClientAppInfoResponse_App* CMsgClientAppInfoResponse::add_apps() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientAppInfoResponse.apps)
  return apps_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientAppInfoResponse_App >*
CMsgClientAppInfoResponse::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientAppInfoResponse.apps)
  return &apps_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientAppInfoResponse_App >&
CMsgClientAppInfoResponse::apps() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientAppInfoResponse.apps)
  return apps_;
}

// repeated uint32 apps_unknown = 2;
int CMsgClientAppInfoResponse::apps_unknown_size() const {
  return apps_unknown_.size();
}
void CMsgClientAppInfoResponse::clear_apps_unknown() {
  apps_unknown_.Clear();
}
::google::protobuf::uint32 CMsgClientAppInfoResponse::apps_unknown(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAppInfoResponse.apps_unknown)
  return apps_unknown_.Get(index);
}
void CMsgClientAppInfoResponse::set_apps_unknown(int index, ::google::protobuf::uint32 value) {
  apps_unknown_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAppInfoResponse.apps_unknown)
}
void CMsgClientAppInfoResponse::add_apps_unknown(::google::protobuf::uint32 value) {
  apps_unknown_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientAppInfoResponse.apps_unknown)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientAppInfoResponse::apps_unknown() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientAppInfoResponse.apps_unknown)
  return apps_unknown_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientAppInfoResponse::mutable_apps_unknown() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientAppInfoResponse.apps_unknown)
  return &apps_unknown_;
}

// optional uint32 apps_pending = 3;
bool CMsgClientAppInfoResponse::has_apps_pending() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientAppInfoResponse::set_has_apps_pending() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientAppInfoResponse::clear_has_apps_pending() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientAppInfoResponse::clear_apps_pending() {
  apps_pending_ = 0u;
  clear_has_apps_pending();
}
::google::protobuf::uint32 CMsgClientAppInfoResponse::apps_pending() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAppInfoResponse.apps_pending)
  return apps_pending_;
}
void CMsgClientAppInfoResponse::set_apps_pending(::google::protobuf::uint32 value) {
  set_has_apps_pending();
  apps_pending_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAppInfoResponse.apps_pending)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPackageInfoRequest::kPackageIdsFieldNumber;
const int CMsgClientPackageInfoRequest::kMetaDataOnlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPackageInfoRequest::CMsgClientPackageInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPackageInfoRequest)
}
CMsgClientPackageInfoRequest::CMsgClientPackageInfoRequest(const CMsgClientPackageInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      package_ids_(from.package_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  meta_data_only_ = from.meta_data_only_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPackageInfoRequest)
}

void CMsgClientPackageInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  meta_data_only_ = false;
}

CMsgClientPackageInfoRequest::~CMsgClientPackageInfoRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPackageInfoRequest)
  SharedDtor();
}

void CMsgClientPackageInfoRequest::SharedDtor() {
}

void CMsgClientPackageInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPackageInfoRequest::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientPackageInfoRequest& CMsgClientPackageInfoRequest::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientPackageInfoRequest* CMsgClientPackageInfoRequest::New(::google::protobuf::Arena* arena) const {
  CMsgClientPackageInfoRequest* n = new CMsgClientPackageInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientPackageInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPackageInfoRequest)
  package_ids_.Clear();
  meta_data_only_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientPackageInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPackageInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 package_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_package_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_package_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool meta_data_only = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_meta_data_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &meta_data_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPackageInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPackageInfoRequest)
  return false;
#undef DO_
}

void CMsgClientPackageInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPackageInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 package_ids = 1;
  for (int i = 0, n = this->package_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->package_ids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool meta_data_only = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->meta_data_only(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPackageInfoRequest)
}

::google::protobuf::uint8* CMsgClientPackageInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPackageInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 package_ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->package_ids_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool meta_data_only = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->meta_data_only(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPackageInfoRequest)
  return target;
}

size_t CMsgClientPackageInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPackageInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 package_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->package_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->package_ids_size());
    total_size += data_size;
  }

  // optional bool meta_data_only = 2;
  if (has_meta_data_only()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPackageInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPackageInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPackageInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientPackageInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPackageInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPackageInfoRequest)
    MergeFrom(*source);
  }
}

void CMsgClientPackageInfoRequest::MergeFrom(const CMsgClientPackageInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPackageInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  package_ids_.MergeFrom(from.package_ids_);
  if (from.has_meta_data_only()) {
    set_meta_data_only(from.meta_data_only());
  }
}

void CMsgClientPackageInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPackageInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPackageInfoRequest::CopyFrom(const CMsgClientPackageInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPackageInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPackageInfoRequest::IsInitialized() const {
  return true;
}

void CMsgClientPackageInfoRequest::Swap(CMsgClientPackageInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPackageInfoRequest::InternalSwap(CMsgClientPackageInfoRequest* other) {
  package_ids_.InternalSwap(&other->package_ids_);
  std::swap(meta_data_only_, other->meta_data_only_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientPackageInfoRequest::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientPackageInfoRequest

// repeated uint32 package_ids = 1;
int CMsgClientPackageInfoRequest::package_ids_size() const {
  return package_ids_.size();
}
void CMsgClientPackageInfoRequest::clear_package_ids() {
  package_ids_.Clear();
}
::google::protobuf::uint32 CMsgClientPackageInfoRequest::package_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPackageInfoRequest.package_ids)
  return package_ids_.Get(index);
}
void CMsgClientPackageInfoRequest::set_package_ids(int index, ::google::protobuf::uint32 value) {
  package_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPackageInfoRequest.package_ids)
}
void CMsgClientPackageInfoRequest::add_package_ids(::google::protobuf::uint32 value) {
  package_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientPackageInfoRequest.package_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientPackageInfoRequest::package_ids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientPackageInfoRequest.package_ids)
  return package_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientPackageInfoRequest::mutable_package_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientPackageInfoRequest.package_ids)
  return &package_ids_;
}

// optional bool meta_data_only = 2;
bool CMsgClientPackageInfoRequest::has_meta_data_only() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientPackageInfoRequest::set_has_meta_data_only() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientPackageInfoRequest::clear_has_meta_data_only() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientPackageInfoRequest::clear_meta_data_only() {
  meta_data_only_ = false;
  clear_has_meta_data_only();
}
bool CMsgClientPackageInfoRequest::meta_data_only() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPackageInfoRequest.meta_data_only)
  return meta_data_only_;
}
void CMsgClientPackageInfoRequest::set_meta_data_only(bool value) {
  set_has_meta_data_only();
  meta_data_only_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPackageInfoRequest.meta_data_only)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPackageInfoResponse_Package::kPackageIdFieldNumber;
const int CMsgClientPackageInfoResponse_Package::kChangeNumberFieldNumber;
const int CMsgClientPackageInfoResponse_Package::kShaFieldNumber;
const int CMsgClientPackageInfoResponse_Package::kBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPackageInfoResponse_Package::CMsgClientPackageInfoResponse_Package()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPackageInfoResponse.Package)
}
CMsgClientPackageInfoResponse_Package::CMsgClientPackageInfoResponse_Package(const CMsgClientPackageInfoResponse_Package& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha()) {
    sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
  }
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buffer()) {
    buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  ::memcpy(&package_id_, &from.package_id_,
    reinterpret_cast<char*>(&change_number_) -
    reinterpret_cast<char*>(&package_id_) + sizeof(change_number_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPackageInfoResponse.Package)
}

void CMsgClientPackageInfoResponse_Package::SharedCtor() {
  _cached_size_ = 0;
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&package_id_, 0, reinterpret_cast<char*>(&change_number_) -
    reinterpret_cast<char*>(&package_id_) + sizeof(change_number_));
}

CMsgClientPackageInfoResponse_Package::~CMsgClientPackageInfoResponse_Package() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPackageInfoResponse.Package)
  SharedDtor();
}

void CMsgClientPackageInfoResponse_Package::SharedDtor() {
  sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientPackageInfoResponse_Package::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPackageInfoResponse_Package::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientPackageInfoResponse_Package& CMsgClientPackageInfoResponse_Package::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientPackageInfoResponse_Package* CMsgClientPackageInfoResponse_Package::New(::google::protobuf::Arena* arena) const {
  CMsgClientPackageInfoResponse_Package* n = new CMsgClientPackageInfoResponse_Package;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientPackageInfoResponse_Package::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPackageInfoResponse.Package)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_sha()) {
      GOOGLE_DCHECK(!sha_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sha_.UnsafeRawStringPointer())->clear();
    }
    if (has_buffer()) {
      GOOGLE_DCHECK(!buffer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*buffer_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&package_id_, 0, reinterpret_cast<char*>(&change_number_) -
      reinterpret_cast<char*>(&package_id_) + sizeof(change_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientPackageInfoResponse_Package::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPackageInfoResponse.Package)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 package_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_package_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 change_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_change_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes buffer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPackageInfoResponse.Package)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPackageInfoResponse.Package)
  return false;
#undef DO_
}

void CMsgClientPackageInfoResponse_Package::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPackageInfoResponse.Package)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 package_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->package_id(), output);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_number(), output);
  }

  // optional bytes sha = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sha(), output);
  }

  // optional bytes buffer = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->buffer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPackageInfoResponse.Package)
}

::google::protobuf::uint8* CMsgClientPackageInfoResponse_Package::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPackageInfoResponse.Package)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 package_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->package_id(), target);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->change_number(), target);
  }

  // optional bytes sha = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sha(), target);
  }

  // optional bytes buffer = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->buffer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPackageInfoResponse.Package)
  return target;
}

size_t CMsgClientPackageInfoResponse_Package::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPackageInfoResponse.Package)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes sha = 3;
    if (has_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha());
    }

    // optional bytes buffer = 4;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }

    // optional uint32 package_id = 1;
    if (has_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_id());
    }

    // optional uint32 change_number = 2;
    if (has_change_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPackageInfoResponse_Package::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPackageInfoResponse.Package)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPackageInfoResponse_Package* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientPackageInfoResponse_Package>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPackageInfoResponse.Package)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPackageInfoResponse.Package)
    MergeFrom(*source);
  }
}

void CMsgClientPackageInfoResponse_Package::MergeFrom(const CMsgClientPackageInfoResponse_Package& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPackageInfoResponse.Package)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sha();
      sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_buffer();
      buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
    }
    if (cached_has_bits & 0x00000004u) {
      package_id_ = from.package_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      change_number_ = from.change_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPackageInfoResponse_Package::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPackageInfoResponse.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPackageInfoResponse_Package::CopyFrom(const CMsgClientPackageInfoResponse_Package& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPackageInfoResponse.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPackageInfoResponse_Package::IsInitialized() const {
  return true;
}

void CMsgClientPackageInfoResponse_Package::Swap(CMsgClientPackageInfoResponse_Package* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPackageInfoResponse_Package::InternalSwap(CMsgClientPackageInfoResponse_Package* other) {
  sha_.Swap(&other->sha_);
  buffer_.Swap(&other->buffer_);
  std::swap(package_id_, other->package_id_);
  std::swap(change_number_, other->change_number_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientPackageInfoResponse_Package::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientPackageInfoResponse_Package

// optional uint32 package_id = 1;
bool CMsgClientPackageInfoResponse_Package::has_package_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientPackageInfoResponse_Package::set_has_package_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientPackageInfoResponse_Package::clear_has_package_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientPackageInfoResponse_Package::clear_package_id() {
  package_id_ = 0u;
  clear_has_package_id();
}
::google::protobuf::uint32 CMsgClientPackageInfoResponse_Package::package_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPackageInfoResponse.Package.package_id)
  return package_id_;
}
void CMsgClientPackageInfoResponse_Package::set_package_id(::google::protobuf::uint32 value) {
  set_has_package_id();
  package_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPackageInfoResponse.Package.package_id)
}

// optional uint32 change_number = 2;
bool CMsgClientPackageInfoResponse_Package::has_change_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientPackageInfoResponse_Package::set_has_change_number() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientPackageInfoResponse_Package::clear_has_change_number() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientPackageInfoResponse_Package::clear_change_number() {
  change_number_ = 0u;
  clear_has_change_number();
}
::google::protobuf::uint32 CMsgClientPackageInfoResponse_Package::change_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPackageInfoResponse.Package.change_number)
  return change_number_;
}
void CMsgClientPackageInfoResponse_Package::set_change_number(::google::protobuf::uint32 value) {
  set_has_change_number();
  change_number_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPackageInfoResponse.Package.change_number)
}

// optional bytes sha = 3;
bool CMsgClientPackageInfoResponse_Package::has_sha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientPackageInfoResponse_Package::set_has_sha() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientPackageInfoResponse_Package::clear_has_sha() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientPackageInfoResponse_Package::clear_sha() {
  sha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha();
}
const ::std::string& CMsgClientPackageInfoResponse_Package::sha() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPackageInfoResponse.Package.sha)
  return sha_.GetNoArena();
}
void CMsgClientPackageInfoResponse_Package::set_sha(const ::std::string& value) {
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPackageInfoResponse.Package.sha)
}
#if LANG_CXX11
void CMsgClientPackageInfoResponse_Package::set_sha(::std::string&& value) {
  set_has_sha();
  sha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientPackageInfoResponse.Package.sha)
}
#endif
void CMsgClientPackageInfoResponse_Package::set_sha(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientPackageInfoResponse.Package.sha)
}
void CMsgClientPackageInfoResponse_Package::set_sha(const void* value, size_t size) {
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientPackageInfoResponse.Package.sha)
}
::std::string* CMsgClientPackageInfoResponse_Package::mutable_sha() {
  set_has_sha();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPackageInfoResponse.Package.sha)
  return sha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientPackageInfoResponse_Package::release_sha() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientPackageInfoResponse.Package.sha)
  clear_has_sha();
  return sha_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientPackageInfoResponse_Package::set_allocated_sha(::std::string* sha) {
  if (sha != NULL) {
    set_has_sha();
  } else {
    clear_has_sha();
  }
  sha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientPackageInfoResponse.Package.sha)
}

// optional bytes buffer = 4;
bool CMsgClientPackageInfoResponse_Package::has_buffer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientPackageInfoResponse_Package::set_has_buffer() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientPackageInfoResponse_Package::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientPackageInfoResponse_Package::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buffer();
}
const ::std::string& CMsgClientPackageInfoResponse_Package::buffer() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPackageInfoResponse.Package.buffer)
  return buffer_.GetNoArena();
}
void CMsgClientPackageInfoResponse_Package::set_buffer(const ::std::string& value) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPackageInfoResponse.Package.buffer)
}
#if LANG_CXX11
void CMsgClientPackageInfoResponse_Package::set_buffer(::std::string&& value) {
  set_has_buffer();
  buffer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientPackageInfoResponse.Package.buffer)
}
#endif
void CMsgClientPackageInfoResponse_Package::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientPackageInfoResponse.Package.buffer)
}
void CMsgClientPackageInfoResponse_Package::set_buffer(const void* value, size_t size) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientPackageInfoResponse.Package.buffer)
}
::std::string* CMsgClientPackageInfoResponse_Package::mutable_buffer() {
  set_has_buffer();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPackageInfoResponse.Package.buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientPackageInfoResponse_Package::release_buffer() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientPackageInfoResponse.Package.buffer)
  clear_has_buffer();
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientPackageInfoResponse_Package::set_allocated_buffer(::std::string* buffer) {
  if (buffer != NULL) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientPackageInfoResponse.Package.buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPackageInfoResponse::kPackagesFieldNumber;
const int CMsgClientPackageInfoResponse::kPackagesUnknownFieldNumber;
const int CMsgClientPackageInfoResponse::kPackagesPendingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPackageInfoResponse::CMsgClientPackageInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPackageInfoResponse)
}
CMsgClientPackageInfoResponse::CMsgClientPackageInfoResponse(const CMsgClientPackageInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      packages_(from.packages_),
      packages_unknown_(from.packages_unknown_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  packages_pending_ = from.packages_pending_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPackageInfoResponse)
}

void CMsgClientPackageInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  packages_pending_ = 0u;
}

CMsgClientPackageInfoResponse::~CMsgClientPackageInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPackageInfoResponse)
  SharedDtor();
}

void CMsgClientPackageInfoResponse::SharedDtor() {
}

void CMsgClientPackageInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPackageInfoResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientPackageInfoResponse& CMsgClientPackageInfoResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientPackageInfoResponse* CMsgClientPackageInfoResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientPackageInfoResponse* n = new CMsgClientPackageInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientPackageInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPackageInfoResponse)
  packages_.Clear();
  packages_unknown_.Clear();
  packages_pending_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientPackageInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPackageInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientPackageInfoResponse.Package packages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_packages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 packages_unknown = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_packages_unknown())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_packages_unknown())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 packages_pending = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_packages_pending();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packages_pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPackageInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPackageInfoResponse)
  return false;
#undef DO_
}

void CMsgClientPackageInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPackageInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPackageInfoResponse.Package packages = 1;
  for (unsigned int i = 0, n = this->packages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->packages(i), output);
  }

  // repeated uint32 packages_unknown = 2;
  for (int i = 0, n = this->packages_unknown_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->packages_unknown(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 packages_pending = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->packages_pending(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPackageInfoResponse)
}

::google::protobuf::uint8* CMsgClientPackageInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPackageInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPackageInfoResponse.Package packages = 1;
  for (unsigned int i = 0, n = this->packages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->packages(i), deterministic, target);
  }

  // repeated uint32 packages_unknown = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->packages_unknown_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 packages_pending = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->packages_pending(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPackageInfoResponse)
  return target;
}

size_t CMsgClientPackageInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPackageInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientPackageInfoResponse.Package packages = 1;
  {
    unsigned int count = this->packages_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->packages(i));
    }
  }

  // repeated uint32 packages_unknown = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->packages_unknown_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->packages_unknown_size());
    total_size += data_size;
  }

  // optional uint32 packages_pending = 3;
  if (has_packages_pending()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packages_pending());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPackageInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPackageInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPackageInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientPackageInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPackageInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPackageInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgClientPackageInfoResponse::MergeFrom(const CMsgClientPackageInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPackageInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  packages_.MergeFrom(from.packages_);
  packages_unknown_.MergeFrom(from.packages_unknown_);
  if (from.has_packages_pending()) {
    set_packages_pending(from.packages_pending());
  }
}

void CMsgClientPackageInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPackageInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPackageInfoResponse::CopyFrom(const CMsgClientPackageInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPackageInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPackageInfoResponse::IsInitialized() const {
  return true;
}

void CMsgClientPackageInfoResponse::Swap(CMsgClientPackageInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPackageInfoResponse::InternalSwap(CMsgClientPackageInfoResponse* other) {
  packages_.InternalSwap(&other->packages_);
  packages_unknown_.InternalSwap(&other->packages_unknown_);
  std::swap(packages_pending_, other->packages_pending_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientPackageInfoResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientPackageInfoResponse

// repeated .proto.steam.CMsgClientPackageInfoResponse.Package packages = 1;
int CMsgClientPackageInfoResponse::packages_size() const {
  return packages_.size();
}
void CMsgClientPackageInfoResponse::clear_packages() {
  packages_.Clear();
}
const ::proto::steam::CMsgClientPackageInfoResponse_Package& CMsgClientPackageInfoResponse::packages(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPackageInfoResponse.packages)
  return packages_.Get(index);
}
::proto::steam::CMsgClientPackageInfoResponse_Package* CMsgClientPackageInfoResponse::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPackageInfoResponse.packages)
  return packages_.Mutable(index);
}
::proto::steam::CMsgClientPackageInfoResponse_Package* CMsgClientPackageInfoResponse::add_packages() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientPackageInfoResponse.packages)
  return packages_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientPackageInfoResponse_Package >*
CMsgClientPackageInfoResponse::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientPackageInfoResponse.packages)
  return &packages_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientPackageInfoResponse_Package >&
CMsgClientPackageInfoResponse::packages() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientPackageInfoResponse.packages)
  return packages_;
}

// repeated uint32 packages_unknown = 2;
int CMsgClientPackageInfoResponse::packages_unknown_size() const {
  return packages_unknown_.size();
}
void CMsgClientPackageInfoResponse::clear_packages_unknown() {
  packages_unknown_.Clear();
}
::google::protobuf::uint32 CMsgClientPackageInfoResponse::packages_unknown(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPackageInfoResponse.packages_unknown)
  return packages_unknown_.Get(index);
}
void CMsgClientPackageInfoResponse::set_packages_unknown(int index, ::google::protobuf::uint32 value) {
  packages_unknown_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPackageInfoResponse.packages_unknown)
}
void CMsgClientPackageInfoResponse::add_packages_unknown(::google::protobuf::uint32 value) {
  packages_unknown_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientPackageInfoResponse.packages_unknown)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientPackageInfoResponse::packages_unknown() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientPackageInfoResponse.packages_unknown)
  return packages_unknown_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientPackageInfoResponse::mutable_packages_unknown() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientPackageInfoResponse.packages_unknown)
  return &packages_unknown_;
}

// optional uint32 packages_pending = 3;
bool CMsgClientPackageInfoResponse::has_packages_pending() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientPackageInfoResponse::set_has_packages_pending() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientPackageInfoResponse::clear_has_packages_pending() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientPackageInfoResponse::clear_packages_pending() {
  packages_pending_ = 0u;
  clear_has_packages_pending();
}
::google::protobuf::uint32 CMsgClientPackageInfoResponse::packages_pending() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPackageInfoResponse.packages_pending)
  return packages_pending_;
}
void CMsgClientPackageInfoResponse::set_packages_pending(::google::protobuf::uint32 value) {
  set_has_packages_pending();
  packages_pending_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPackageInfoResponse.packages_pending)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSChangesSinceRequest::kSinceChangeNumberFieldNumber;
const int CMsgClientPICSChangesSinceRequest::kSendAppInfoChangesFieldNumber;
const int CMsgClientPICSChangesSinceRequest::kSendPackageInfoChangesFieldNumber;
const int CMsgClientPICSChangesSinceRequest::kNumAppInfoCachedFieldNumber;
const int CMsgClientPICSChangesSinceRequest::kNumPackageInfoCachedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSChangesSinceRequest::CMsgClientPICSChangesSinceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSChangesSinceRequest)
}
CMsgClientPICSChangesSinceRequest::CMsgClientPICSChangesSinceRequest(const CMsgClientPICSChangesSinceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&since_change_number_, &from.since_change_number_,
    reinterpret_cast<char*>(&num_package_info_cached_) -
    reinterpret_cast<char*>(&since_change_number_) + sizeof(num_package_info_cached_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSChangesSinceRequest)
}

void CMsgClientPICSChangesSinceRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&since_change_number_, 0, reinterpret_cast<char*>(&num_package_info_cached_) -
    reinterpret_cast<char*>(&since_change_number_) + sizeof(num_package_info_cached_));
}

CMsgClientPICSChangesSinceRequest::~CMsgClientPICSChangesSinceRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSChangesSinceRequest)
  SharedDtor();
}

void CMsgClientPICSChangesSinceRequest::SharedDtor() {
}

void CMsgClientPICSChangesSinceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPICSChangesSinceRequest::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientPICSChangesSinceRequest& CMsgClientPICSChangesSinceRequest::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientPICSChangesSinceRequest* CMsgClientPICSChangesSinceRequest::New(::google::protobuf::Arena* arena) const {
  CMsgClientPICSChangesSinceRequest* n = new CMsgClientPICSChangesSinceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientPICSChangesSinceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSChangesSinceRequest)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&since_change_number_, 0, reinterpret_cast<char*>(&num_package_info_cached_) -
      reinterpret_cast<char*>(&since_change_number_) + sizeof(num_package_info_cached_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientPICSChangesSinceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSChangesSinceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 since_change_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_since_change_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &since_change_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_app_info_changes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_send_app_info_changes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_app_info_changes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_package_info_changes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_send_package_info_changes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_package_info_changes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_app_info_cached = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_num_app_info_cached();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_app_info_cached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_package_info_cached = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_num_package_info_cached();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_package_info_cached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSChangesSinceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSChangesSinceRequest)
  return false;
#undef DO_
}

void CMsgClientPICSChangesSinceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSChangesSinceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 since_change_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->since_change_number(), output);
  }

  // optional bool send_app_info_changes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->send_app_info_changes(), output);
  }

  // optional bool send_package_info_changes = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->send_package_info_changes(), output);
  }

  // optional uint32 num_app_info_cached = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_app_info_cached(), output);
  }

  // optional uint32 num_package_info_cached = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_package_info_cached(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSChangesSinceRequest)
}

::google::protobuf::uint8* CMsgClientPICSChangesSinceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSChangesSinceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 since_change_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->since_change_number(), target);
  }

  // optional bool send_app_info_changes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->send_app_info_changes(), target);
  }

  // optional bool send_package_info_changes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->send_package_info_changes(), target);
  }

  // optional uint32 num_app_info_cached = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_app_info_cached(), target);
  }

  // optional uint32 num_package_info_cached = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_package_info_cached(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSChangesSinceRequest)
  return target;
}

size_t CMsgClientPICSChangesSinceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSChangesSinceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 since_change_number = 1;
    if (has_since_change_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->since_change_number());
    }

    // optional bool send_app_info_changes = 2;
    if (has_send_app_info_changes()) {
      total_size += 1 + 1;
    }

    // optional bool send_package_info_changes = 3;
    if (has_send_package_info_changes()) {
      total_size += 1 + 1;
    }

    // optional uint32 num_app_info_cached = 4;
    if (has_num_app_info_cached()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_app_info_cached());
    }

    // optional uint32 num_package_info_cached = 5;
    if (has_num_package_info_cached()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_package_info_cached());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPICSChangesSinceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSChangesSinceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSChangesSinceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientPICSChangesSinceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSChangesSinceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSChangesSinceRequest)
    MergeFrom(*source);
  }
}

void CMsgClientPICSChangesSinceRequest::MergeFrom(const CMsgClientPICSChangesSinceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSChangesSinceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      since_change_number_ = from.since_change_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      send_app_info_changes_ = from.send_app_info_changes_;
    }
    if (cached_has_bits & 0x00000004u) {
      send_package_info_changes_ = from.send_package_info_changes_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_app_info_cached_ = from.num_app_info_cached_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_package_info_cached_ = from.num_package_info_cached_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSChangesSinceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSChangesSinceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSChangesSinceRequest::CopyFrom(const CMsgClientPICSChangesSinceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSChangesSinceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSChangesSinceRequest::IsInitialized() const {
  return true;
}

void CMsgClientPICSChangesSinceRequest::Swap(CMsgClientPICSChangesSinceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSChangesSinceRequest::InternalSwap(CMsgClientPICSChangesSinceRequest* other) {
  std::swap(since_change_number_, other->since_change_number_);
  std::swap(send_app_info_changes_, other->send_app_info_changes_);
  std::swap(send_package_info_changes_, other->send_package_info_changes_);
  std::swap(num_app_info_cached_, other->num_app_info_cached_);
  std::swap(num_package_info_cached_, other->num_package_info_cached_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientPICSChangesSinceRequest::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientPICSChangesSinceRequest

// optional uint32 since_change_number = 1;
bool CMsgClientPICSChangesSinceRequest::has_since_change_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientPICSChangesSinceRequest::set_has_since_change_number() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientPICSChangesSinceRequest::clear_has_since_change_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientPICSChangesSinceRequest::clear_since_change_number() {
  since_change_number_ = 0u;
  clear_has_since_change_number();
}
::google::protobuf::uint32 CMsgClientPICSChangesSinceRequest::since_change_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSChangesSinceRequest.since_change_number)
  return since_change_number_;
}
void CMsgClientPICSChangesSinceRequest::set_since_change_number(::google::protobuf::uint32 value) {
  set_has_since_change_number();
  since_change_number_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSChangesSinceRequest.since_change_number)
}

// optional bool send_app_info_changes = 2;
bool CMsgClientPICSChangesSinceRequest::has_send_app_info_changes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientPICSChangesSinceRequest::set_has_send_app_info_changes() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientPICSChangesSinceRequest::clear_has_send_app_info_changes() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientPICSChangesSinceRequest::clear_send_app_info_changes() {
  send_app_info_changes_ = false;
  clear_has_send_app_info_changes();
}
bool CMsgClientPICSChangesSinceRequest::send_app_info_changes() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSChangesSinceRequest.send_app_info_changes)
  return send_app_info_changes_;
}
void CMsgClientPICSChangesSinceRequest::set_send_app_info_changes(bool value) {
  set_has_send_app_info_changes();
  send_app_info_changes_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSChangesSinceRequest.send_app_info_changes)
}

// optional bool send_package_info_changes = 3;
bool CMsgClientPICSChangesSinceRequest::has_send_package_info_changes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientPICSChangesSinceRequest::set_has_send_package_info_changes() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientPICSChangesSinceRequest::clear_has_send_package_info_changes() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientPICSChangesSinceRequest::clear_send_package_info_changes() {
  send_package_info_changes_ = false;
  clear_has_send_package_info_changes();
}
bool CMsgClientPICSChangesSinceRequest::send_package_info_changes() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSChangesSinceRequest.send_package_info_changes)
  return send_package_info_changes_;
}
void CMsgClientPICSChangesSinceRequest::set_send_package_info_changes(bool value) {
  set_has_send_package_info_changes();
  send_package_info_changes_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSChangesSinceRequest.send_package_info_changes)
}

// optional uint32 num_app_info_cached = 4;
bool CMsgClientPICSChangesSinceRequest::has_num_app_info_cached() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientPICSChangesSinceRequest::set_has_num_app_info_cached() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientPICSChangesSinceRequest::clear_has_num_app_info_cached() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientPICSChangesSinceRequest::clear_num_app_info_cached() {
  num_app_info_cached_ = 0u;
  clear_has_num_app_info_cached();
}
::google::protobuf::uint32 CMsgClientPICSChangesSinceRequest::num_app_info_cached() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSChangesSinceRequest.num_app_info_cached)
  return num_app_info_cached_;
}
void CMsgClientPICSChangesSinceRequest::set_num_app_info_cached(::google::protobuf::uint32 value) {
  set_has_num_app_info_cached();
  num_app_info_cached_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSChangesSinceRequest.num_app_info_cached)
}

// optional uint32 num_package_info_cached = 5;
bool CMsgClientPICSChangesSinceRequest::has_num_package_info_cached() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientPICSChangesSinceRequest::set_has_num_package_info_cached() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientPICSChangesSinceRequest::clear_has_num_package_info_cached() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientPICSChangesSinceRequest::clear_num_package_info_cached() {
  num_package_info_cached_ = 0u;
  clear_has_num_package_info_cached();
}
::google::protobuf::uint32 CMsgClientPICSChangesSinceRequest::num_package_info_cached() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSChangesSinceRequest.num_package_info_cached)
  return num_package_info_cached_;
}
void CMsgClientPICSChangesSinceRequest::set_num_package_info_cached(::google::protobuf::uint32 value) {
  set_has_num_package_info_cached();
  num_package_info_cached_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSChangesSinceRequest.num_package_info_cached)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSChangesSinceResponse_PackageChange::kPackageidFieldNumber;
const int CMsgClientPICSChangesSinceResponse_PackageChange::kChangeNumberFieldNumber;
const int CMsgClientPICSChangesSinceResponse_PackageChange::kNeedsTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSChangesSinceResponse_PackageChange::CMsgClientPICSChangesSinceResponse_PackageChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
}
CMsgClientPICSChangesSinceResponse_PackageChange::CMsgClientPICSChangesSinceResponse_PackageChange(const CMsgClientPICSChangesSinceResponse_PackageChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&packageid_, &from.packageid_,
    reinterpret_cast<char*>(&needs_token_) -
    reinterpret_cast<char*>(&packageid_) + sizeof(needs_token_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
}

void CMsgClientPICSChangesSinceResponse_PackageChange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&packageid_, 0, reinterpret_cast<char*>(&needs_token_) -
    reinterpret_cast<char*>(&packageid_) + sizeof(needs_token_));
}

CMsgClientPICSChangesSinceResponse_PackageChange::~CMsgClientPICSChangesSinceResponse_PackageChange() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  SharedDtor();
}

void CMsgClientPICSChangesSinceResponse_PackageChange::SharedDtor() {
}

void CMsgClientPICSChangesSinceResponse_PackageChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPICSChangesSinceResponse_PackageChange::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientPICSChangesSinceResponse_PackageChange& CMsgClientPICSChangesSinceResponse_PackageChange::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientPICSChangesSinceResponse_PackageChange* CMsgClientPICSChangesSinceResponse_PackageChange::New(::google::protobuf::Arena* arena) const {
  CMsgClientPICSChangesSinceResponse_PackageChange* n = new CMsgClientPICSChangesSinceResponse_PackageChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientPICSChangesSinceResponse_PackageChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&packageid_, 0, reinterpret_cast<char*>(&needs_token_) -
      reinterpret_cast<char*>(&packageid_) + sizeof(needs_token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientPICSChangesSinceResponse_PackageChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 packageid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_packageid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 change_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_change_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool needs_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_needs_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  return false;
#undef DO_
}

void CMsgClientPICSChangesSinceResponse_PackageChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packageid(), output);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_number(), output);
  }

  // optional bool needs_token = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->needs_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
}

::google::protobuf::uint8* CMsgClientPICSChangesSinceResponse_PackageChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->packageid(), target);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->change_number(), target);
  }

  // optional bool needs_token = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->needs_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  return target;
}

size_t CMsgClientPICSChangesSinceResponse_PackageChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 packageid = 1;
    if (has_packageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packageid());
    }

    // optional uint32 change_number = 2;
    if (has_change_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_number());
    }

    // optional bool needs_token = 3;
    if (has_needs_token()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPICSChangesSinceResponse_PackageChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSChangesSinceResponse_PackageChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientPICSChangesSinceResponse_PackageChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
    MergeFrom(*source);
  }
}

void CMsgClientPICSChangesSinceResponse_PackageChange::MergeFrom(const CMsgClientPICSChangesSinceResponse_PackageChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000002u) {
      change_number_ = from.change_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      needs_token_ = from.needs_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSChangesSinceResponse_PackageChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSChangesSinceResponse_PackageChange::CopyFrom(const CMsgClientPICSChangesSinceResponse_PackageChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSChangesSinceResponse_PackageChange::IsInitialized() const {
  return true;
}

void CMsgClientPICSChangesSinceResponse_PackageChange::Swap(CMsgClientPICSChangesSinceResponse_PackageChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSChangesSinceResponse_PackageChange::InternalSwap(CMsgClientPICSChangesSinceResponse_PackageChange* other) {
  std::swap(packageid_, other->packageid_);
  std::swap(change_number_, other->change_number_);
  std::swap(needs_token_, other->needs_token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientPICSChangesSinceResponse_PackageChange::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientPICSChangesSinceResponse_PackageChange

// optional uint32 packageid = 1;
bool CMsgClientPICSChangesSinceResponse_PackageChange::has_packageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientPICSChangesSinceResponse_PackageChange::set_has_packageid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientPICSChangesSinceResponse_PackageChange::clear_has_packageid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientPICSChangesSinceResponse_PackageChange::clear_packageid() {
  packageid_ = 0u;
  clear_has_packageid();
}
::google::protobuf::uint32 CMsgClientPICSChangesSinceResponse_PackageChange::packageid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange.packageid)
  return packageid_;
}
void CMsgClientPICSChangesSinceResponse_PackageChange::set_packageid(::google::protobuf::uint32 value) {
  set_has_packageid();
  packageid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange.packageid)
}

// optional uint32 change_number = 2;
bool CMsgClientPICSChangesSinceResponse_PackageChange::has_change_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientPICSChangesSinceResponse_PackageChange::set_has_change_number() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientPICSChangesSinceResponse_PackageChange::clear_has_change_number() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientPICSChangesSinceResponse_PackageChange::clear_change_number() {
  change_number_ = 0u;
  clear_has_change_number();
}
::google::protobuf::uint32 CMsgClientPICSChangesSinceResponse_PackageChange::change_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange.change_number)
  return change_number_;
}
void CMsgClientPICSChangesSinceResponse_PackageChange::set_change_number(::google::protobuf::uint32 value) {
  set_has_change_number();
  change_number_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange.change_number)
}

// optional bool needs_token = 3;
bool CMsgClientPICSChangesSinceResponse_PackageChange::has_needs_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientPICSChangesSinceResponse_PackageChange::set_has_needs_token() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientPICSChangesSinceResponse_PackageChange::clear_has_needs_token() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientPICSChangesSinceResponse_PackageChange::clear_needs_token() {
  needs_token_ = false;
  clear_has_needs_token();
}
bool CMsgClientPICSChangesSinceResponse_PackageChange::needs_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange.needs_token)
  return needs_token_;
}
void CMsgClientPICSChangesSinceResponse_PackageChange::set_needs_token(bool value) {
  set_has_needs_token();
  needs_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange.needs_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSChangesSinceResponse_AppChange::kAppidFieldNumber;
const int CMsgClientPICSChangesSinceResponse_AppChange::kChangeNumberFieldNumber;
const int CMsgClientPICSChangesSinceResponse_AppChange::kNeedsTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSChangesSinceResponse_AppChange::CMsgClientPICSChangesSinceResponse_AppChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
}
CMsgClientPICSChangesSinceResponse_AppChange::CMsgClientPICSChangesSinceResponse_AppChange(const CMsgClientPICSChangesSinceResponse_AppChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&needs_token_) -
    reinterpret_cast<char*>(&appid_) + sizeof(needs_token_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
}

void CMsgClientPICSChangesSinceResponse_AppChange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&appid_, 0, reinterpret_cast<char*>(&needs_token_) -
    reinterpret_cast<char*>(&appid_) + sizeof(needs_token_));
}

CMsgClientPICSChangesSinceResponse_AppChange::~CMsgClientPICSChangesSinceResponse_AppChange() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  SharedDtor();
}

void CMsgClientPICSChangesSinceResponse_AppChange::SharedDtor() {
}

void CMsgClientPICSChangesSinceResponse_AppChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPICSChangesSinceResponse_AppChange::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientPICSChangesSinceResponse_AppChange& CMsgClientPICSChangesSinceResponse_AppChange::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientPICSChangesSinceResponse_AppChange* CMsgClientPICSChangesSinceResponse_AppChange::New(::google::protobuf::Arena* arena) const {
  CMsgClientPICSChangesSinceResponse_AppChange* n = new CMsgClientPICSChangesSinceResponse_AppChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientPICSChangesSinceResponse_AppChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&needs_token_) -
      reinterpret_cast<char*>(&appid_) + sizeof(needs_token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientPICSChangesSinceResponse_AppChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 change_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_change_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool needs_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_needs_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  return false;
#undef DO_
}

void CMsgClientPICSChangesSinceResponse_AppChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_number(), output);
  }

  // optional bool needs_token = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->needs_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
}

::google::protobuf::uint8* CMsgClientPICSChangesSinceResponse_AppChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->change_number(), target);
  }

  // optional bool needs_token = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->needs_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  return target;
}

size_t CMsgClientPICSChangesSinceResponse_AppChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 change_number = 2;
    if (has_change_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_number());
    }

    // optional bool needs_token = 3;
    if (has_needs_token()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPICSChangesSinceResponse_AppChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSChangesSinceResponse_AppChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientPICSChangesSinceResponse_AppChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
    MergeFrom(*source);
  }
}

void CMsgClientPICSChangesSinceResponse_AppChange::MergeFrom(const CMsgClientPICSChangesSinceResponse_AppChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      change_number_ = from.change_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      needs_token_ = from.needs_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSChangesSinceResponse_AppChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSChangesSinceResponse_AppChange::CopyFrom(const CMsgClientPICSChangesSinceResponse_AppChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSChangesSinceResponse_AppChange::IsInitialized() const {
  return true;
}

void CMsgClientPICSChangesSinceResponse_AppChange::Swap(CMsgClientPICSChangesSinceResponse_AppChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSChangesSinceResponse_AppChange::InternalSwap(CMsgClientPICSChangesSinceResponse_AppChange* other) {
  std::swap(appid_, other->appid_);
  std::swap(change_number_, other->change_number_);
  std::swap(needs_token_, other->needs_token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientPICSChangesSinceResponse_AppChange::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientPICSChangesSinceResponse_AppChange

// optional uint32 appid = 1;
bool CMsgClientPICSChangesSinceResponse_AppChange::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientPICSChangesSinceResponse_AppChange::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientPICSChangesSinceResponse_AppChange::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientPICSChangesSinceResponse_AppChange::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CMsgClientPICSChangesSinceResponse_AppChange::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange.appid)
  return appid_;
}
void CMsgClientPICSChangesSinceResponse_AppChange::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange.appid)
}

// optional uint32 change_number = 2;
bool CMsgClientPICSChangesSinceResponse_AppChange::has_change_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientPICSChangesSinceResponse_AppChange::set_has_change_number() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientPICSChangesSinceResponse_AppChange::clear_has_change_number() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientPICSChangesSinceResponse_AppChange::clear_change_number() {
  change_number_ = 0u;
  clear_has_change_number();
}
::google::protobuf::uint32 CMsgClientPICSChangesSinceResponse_AppChange::change_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange.change_number)
  return change_number_;
}
void CMsgClientPICSChangesSinceResponse_AppChange::set_change_number(::google::protobuf::uint32 value) {
  set_has_change_number();
  change_number_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange.change_number)
}

// optional bool needs_token = 3;
bool CMsgClientPICSChangesSinceResponse_AppChange::has_needs_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientPICSChangesSinceResponse_AppChange::set_has_needs_token() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientPICSChangesSinceResponse_AppChange::clear_has_needs_token() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientPICSChangesSinceResponse_AppChange::clear_needs_token() {
  needs_token_ = false;
  clear_has_needs_token();
}
bool CMsgClientPICSChangesSinceResponse_AppChange::needs_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange.needs_token)
  return needs_token_;
}
void CMsgClientPICSChangesSinceResponse_AppChange::set_needs_token(bool value) {
  set_has_needs_token();
  needs_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSChangesSinceResponse.AppChange.needs_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSChangesSinceResponse::kCurrentChangeNumberFieldNumber;
const int CMsgClientPICSChangesSinceResponse::kSinceChangeNumberFieldNumber;
const int CMsgClientPICSChangesSinceResponse::kForceFullUpdateFieldNumber;
const int CMsgClientPICSChangesSinceResponse::kPackageChangesFieldNumber;
const int CMsgClientPICSChangesSinceResponse::kAppChangesFieldNumber;
const int CMsgClientPICSChangesSinceResponse::kForceFullAppUpdateFieldNumber;
const int CMsgClientPICSChangesSinceResponse::kForceFullPackageUpdateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSChangesSinceResponse::CMsgClientPICSChangesSinceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSChangesSinceResponse)
}
CMsgClientPICSChangesSinceResponse::CMsgClientPICSChangesSinceResponse(const CMsgClientPICSChangesSinceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      package_changes_(from.package_changes_),
      app_changes_(from.app_changes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&current_change_number_, &from.current_change_number_,
    reinterpret_cast<char*>(&force_full_package_update_) -
    reinterpret_cast<char*>(&current_change_number_) + sizeof(force_full_package_update_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSChangesSinceResponse)
}

void CMsgClientPICSChangesSinceResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&current_change_number_, 0, reinterpret_cast<char*>(&force_full_package_update_) -
    reinterpret_cast<char*>(&current_change_number_) + sizeof(force_full_package_update_));
}

CMsgClientPICSChangesSinceResponse::~CMsgClientPICSChangesSinceResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSChangesSinceResponse)
  SharedDtor();
}

void CMsgClientPICSChangesSinceResponse::SharedDtor() {
}

void CMsgClientPICSChangesSinceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPICSChangesSinceResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientPICSChangesSinceResponse& CMsgClientPICSChangesSinceResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientPICSChangesSinceResponse* CMsgClientPICSChangesSinceResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientPICSChangesSinceResponse* n = new CMsgClientPICSChangesSinceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientPICSChangesSinceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSChangesSinceResponse)
  package_changes_.Clear();
  app_changes_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&current_change_number_, 0, reinterpret_cast<char*>(&force_full_package_update_) -
      reinterpret_cast<char*>(&current_change_number_) + sizeof(force_full_package_update_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientPICSChangesSinceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSChangesSinceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 current_change_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_current_change_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_change_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 since_change_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_since_change_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &since_change_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_full_update = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_force_full_update();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_full_update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange package_changes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_package_changes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientPICSChangesSinceResponse.AppChange app_changes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_app_changes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_full_app_update = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_force_full_app_update();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_full_app_update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_full_package_update = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_force_full_package_update();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_full_package_update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSChangesSinceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSChangesSinceResponse)
  return false;
#undef DO_
}

void CMsgClientPICSChangesSinceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSChangesSinceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 current_change_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->current_change_number(), output);
  }

  // optional uint32 since_change_number = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->since_change_number(), output);
  }

  // optional bool force_full_update = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->force_full_update(), output);
  }

  // repeated .proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange package_changes = 4;
  for (unsigned int i = 0, n = this->package_changes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->package_changes(i), output);
  }

  // repeated .proto.steam.CMsgClientPICSChangesSinceResponse.AppChange app_changes = 5;
  for (unsigned int i = 0, n = this->app_changes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->app_changes(i), output);
  }

  // optional bool force_full_app_update = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->force_full_app_update(), output);
  }

  // optional bool force_full_package_update = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->force_full_package_update(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSChangesSinceResponse)
}

::google::protobuf::uint8* CMsgClientPICSChangesSinceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSChangesSinceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 current_change_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->current_change_number(), target);
  }

  // optional uint32 since_change_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->since_change_number(), target);
  }

  // optional bool force_full_update = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->force_full_update(), target);
  }

  // repeated .proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange package_changes = 4;
  for (unsigned int i = 0, n = this->package_changes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->package_changes(i), deterministic, target);
  }

  // repeated .proto.steam.CMsgClientPICSChangesSinceResponse.AppChange app_changes = 5;
  for (unsigned int i = 0, n = this->app_changes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->app_changes(i), deterministic, target);
  }

  // optional bool force_full_app_update = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->force_full_app_update(), target);
  }

  // optional bool force_full_package_update = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->force_full_package_update(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSChangesSinceResponse)
  return target;
}

size_t CMsgClientPICSChangesSinceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSChangesSinceResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange package_changes = 4;
  {
    unsigned int count = this->package_changes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->package_changes(i));
    }
  }

  // repeated .proto.steam.CMsgClientPICSChangesSinceResponse.AppChange app_changes = 5;
  {
    unsigned int count = this->app_changes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_changes(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 current_change_number = 1;
    if (has_current_change_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_change_number());
    }

    // optional uint32 since_change_number = 2;
    if (has_since_change_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->since_change_number());
    }

    // optional bool force_full_update = 3;
    if (has_force_full_update()) {
      total_size += 1 + 1;
    }

    // optional bool force_full_app_update = 6;
    if (has_force_full_app_update()) {
      total_size += 1 + 1;
    }

    // optional bool force_full_package_update = 7;
    if (has_force_full_package_update()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPICSChangesSinceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSChangesSinceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSChangesSinceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientPICSChangesSinceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSChangesSinceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSChangesSinceResponse)
    MergeFrom(*source);
  }
}

void CMsgClientPICSChangesSinceResponse::MergeFrom(const CMsgClientPICSChangesSinceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSChangesSinceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  package_changes_.MergeFrom(from.package_changes_);
  app_changes_.MergeFrom(from.app_changes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      current_change_number_ = from.current_change_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      since_change_number_ = from.since_change_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      force_full_update_ = from.force_full_update_;
    }
    if (cached_has_bits & 0x00000008u) {
      force_full_app_update_ = from.force_full_app_update_;
    }
    if (cached_has_bits & 0x00000010u) {
      force_full_package_update_ = from.force_full_package_update_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSChangesSinceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSChangesSinceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSChangesSinceResponse::CopyFrom(const CMsgClientPICSChangesSinceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSChangesSinceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSChangesSinceResponse::IsInitialized() const {
  return true;
}

void CMsgClientPICSChangesSinceResponse::Swap(CMsgClientPICSChangesSinceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSChangesSinceResponse::InternalSwap(CMsgClientPICSChangesSinceResponse* other) {
  package_changes_.InternalSwap(&other->package_changes_);
  app_changes_.InternalSwap(&other->app_changes_);
  std::swap(current_change_number_, other->current_change_number_);
  std::swap(since_change_number_, other->since_change_number_);
  std::swap(force_full_update_, other->force_full_update_);
  std::swap(force_full_app_update_, other->force_full_app_update_);
  std::swap(force_full_package_update_, other->force_full_package_update_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientPICSChangesSinceResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientPICSChangesSinceResponse

// optional uint32 current_change_number = 1;
bool CMsgClientPICSChangesSinceResponse::has_current_change_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientPICSChangesSinceResponse::set_has_current_change_number() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientPICSChangesSinceResponse::clear_has_current_change_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientPICSChangesSinceResponse::clear_current_change_number() {
  current_change_number_ = 0u;
  clear_has_current_change_number();
}
::google::protobuf::uint32 CMsgClientPICSChangesSinceResponse::current_change_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSChangesSinceResponse.current_change_number)
  return current_change_number_;
}
void CMsgClientPICSChangesSinceResponse::set_current_change_number(::google::protobuf::uint32 value) {
  set_has_current_change_number();
  current_change_number_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSChangesSinceResponse.current_change_number)
}

// optional uint32 since_change_number = 2;
bool CMsgClientPICSChangesSinceResponse::has_since_change_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientPICSChangesSinceResponse::set_has_since_change_number() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientPICSChangesSinceResponse::clear_has_since_change_number() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientPICSChangesSinceResponse::clear_since_change_number() {
  since_change_number_ = 0u;
  clear_has_since_change_number();
}
::google::protobuf::uint32 CMsgClientPICSChangesSinceResponse::since_change_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSChangesSinceResponse.since_change_number)
  return since_change_number_;
}
void CMsgClientPICSChangesSinceResponse::set_since_change_number(::google::protobuf::uint32 value) {
  set_has_since_change_number();
  since_change_number_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSChangesSinceResponse.since_change_number)
}

// optional bool force_full_update = 3;
bool CMsgClientPICSChangesSinceResponse::has_force_full_update() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientPICSChangesSinceResponse::set_has_force_full_update() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientPICSChangesSinceResponse::clear_has_force_full_update() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientPICSChangesSinceResponse::clear_force_full_update() {
  force_full_update_ = false;
  clear_has_force_full_update();
}
bool CMsgClientPICSChangesSinceResponse::force_full_update() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSChangesSinceResponse.force_full_update)
  return force_full_update_;
}
void CMsgClientPICSChangesSinceResponse::set_force_full_update(bool value) {
  set_has_force_full_update();
  force_full_update_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSChangesSinceResponse.force_full_update)
}

// repeated .proto.steam.CMsgClientPICSChangesSinceResponse.PackageChange package_changes = 4;
int CMsgClientPICSChangesSinceResponse::package_changes_size() const {
  return package_changes_.size();
}
void CMsgClientPICSChangesSinceResponse::clear_package_changes() {
  package_changes_.Clear();
}
const ::proto::steam::CMsgClientPICSChangesSinceResponse_PackageChange& CMsgClientPICSChangesSinceResponse::package_changes(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSChangesSinceResponse.package_changes)
  return package_changes_.Get(index);
}
::proto::steam::CMsgClientPICSChangesSinceResponse_PackageChange* CMsgClientPICSChangesSinceResponse::mutable_package_changes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPICSChangesSinceResponse.package_changes)
  return package_changes_.Mutable(index);
}
::proto::steam::CMsgClientPICSChangesSinceResponse_PackageChange* CMsgClientPICSChangesSinceResponse::add_package_changes() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientPICSChangesSinceResponse.package_changes)
  return package_changes_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientPICSChangesSinceResponse_PackageChange >*
CMsgClientPICSChangesSinceResponse::mutable_package_changes() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientPICSChangesSinceResponse.package_changes)
  return &package_changes_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientPICSChangesSinceResponse_PackageChange >&
CMsgClientPICSChangesSinceResponse::package_changes() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientPICSChangesSinceResponse.package_changes)
  return package_changes_;
}

// repeated .proto.steam.CMsgClientPICSChangesSinceResponse.AppChange app_changes = 5;
int CMsgClientPICSChangesSinceResponse::app_changes_size() const {
  return app_changes_.size();
}
void CMsgClientPICSChangesSinceResponse::clear_app_changes() {
  app_changes_.Clear();
}
const ::proto::steam::CMsgClientPICSChangesSinceResponse_AppChange& CMsgClientPICSChangesSinceResponse::app_changes(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSChangesSinceResponse.app_changes)
  return app_changes_.Get(index);
}
::proto::steam::CMsgClientPICSChangesSinceResponse_AppChange* CMsgClientPICSChangesSinceResponse::mutable_app_changes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPICSChangesSinceResponse.app_changes)
  return app_changes_.Mutable(index);
}
::proto::steam::CMsgClientPICSChangesSinceResponse_AppChange* CMsgClientPICSChangesSinceResponse::add_app_changes() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientPICSChangesSinceResponse.app_changes)
  return app_changes_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientPICSChangesSinceResponse_AppChange >*
CMsgClientPICSChangesSinceResponse::mutable_app_changes() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientPICSChangesSinceResponse.app_changes)
  return &app_changes_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientPICSChangesSinceResponse_AppChange >&
CMsgClientPICSChangesSinceResponse::app_changes() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientPICSChangesSinceResponse.app_changes)
  return app_changes_;
}

// optional bool force_full_app_update = 6;
bool CMsgClientPICSChangesSinceResponse::has_force_full_app_update() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientPICSChangesSinceResponse::set_has_force_full_app_update() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientPICSChangesSinceResponse::clear_has_force_full_app_update() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientPICSChangesSinceResponse::clear_force_full_app_update() {
  force_full_app_update_ = false;
  clear_has_force_full_app_update();
}
bool CMsgClientPICSChangesSinceResponse::force_full_app_update() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSChangesSinceResponse.force_full_app_update)
  return force_full_app_update_;
}
void CMsgClientPICSChangesSinceResponse::set_force_full_app_update(bool value) {
  set_has_force_full_app_update();
  force_full_app_update_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSChangesSinceResponse.force_full_app_update)
}

// optional bool force_full_package_update = 7;
bool CMsgClientPICSChangesSinceResponse::has_force_full_package_update() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientPICSChangesSinceResponse::set_has_force_full_package_update() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientPICSChangesSinceResponse::clear_has_force_full_package_update() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientPICSChangesSinceResponse::clear_force_full_package_update() {
  force_full_package_update_ = false;
  clear_has_force_full_package_update();
}
bool CMsgClientPICSChangesSinceResponse::force_full_package_update() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSChangesSinceResponse.force_full_package_update)
  return force_full_package_update_;
}
void CMsgClientPICSChangesSinceResponse::set_force_full_package_update(bool value) {
  set_has_force_full_package_update();
  force_full_package_update_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSChangesSinceResponse.force_full_package_update)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSProductInfoRequest_AppInfo::kAppidFieldNumber;
const int CMsgClientPICSProductInfoRequest_AppInfo::kAccessTokenFieldNumber;
const int CMsgClientPICSProductInfoRequest_AppInfo::kOnlyPublicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSProductInfoRequest_AppInfo::CMsgClientPICSProductInfoRequest_AppInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
}
CMsgClientPICSProductInfoRequest_AppInfo::CMsgClientPICSProductInfoRequest_AppInfo(const CMsgClientPICSProductInfoRequest_AppInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&access_token_, &from.access_token_,
    reinterpret_cast<char*>(&only_public_) -
    reinterpret_cast<char*>(&access_token_) + sizeof(only_public_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
}

void CMsgClientPICSProductInfoRequest_AppInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&access_token_, 0, reinterpret_cast<char*>(&only_public_) -
    reinterpret_cast<char*>(&access_token_) + sizeof(only_public_));
}

CMsgClientPICSProductInfoRequest_AppInfo::~CMsgClientPICSProductInfoRequest_AppInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  SharedDtor();
}

void CMsgClientPICSProductInfoRequest_AppInfo::SharedDtor() {
}

void CMsgClientPICSProductInfoRequest_AppInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPICSProductInfoRequest_AppInfo::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientPICSProductInfoRequest_AppInfo& CMsgClientPICSProductInfoRequest_AppInfo::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientPICSProductInfoRequest_AppInfo* CMsgClientPICSProductInfoRequest_AppInfo::New(::google::protobuf::Arena* arena) const {
  CMsgClientPICSProductInfoRequest_AppInfo* n = new CMsgClientPICSProductInfoRequest_AppInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientPICSProductInfoRequest_AppInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&access_token_, 0, reinterpret_cast<char*>(&only_public_) -
      reinterpret_cast<char*>(&access_token_) + sizeof(only_public_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientPICSProductInfoRequest_AppInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 access_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_access_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &access_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool only_public = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_only_public();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_public_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  return false;
#undef DO_
}

void CMsgClientPICSProductInfoRequest_AppInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 access_token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->access_token(), output);
  }

  // optional bool only_public = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->only_public(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
}

::google::protobuf::uint8* CMsgClientPICSProductInfoRequest_AppInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 access_token = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->access_token(), target);
  }

  // optional bool only_public = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->only_public(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  return target;
}

size_t CMsgClientPICSProductInfoRequest_AppInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 access_token = 2;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->access_token());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool only_public = 3;
    if (has_only_public()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPICSProductInfoRequest_AppInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSProductInfoRequest_AppInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientPICSProductInfoRequest_AppInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
    MergeFrom(*source);
  }
}

void CMsgClientPICSProductInfoRequest_AppInfo::MergeFrom(const CMsgClientPICSProductInfoRequest_AppInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      access_token_ = from.access_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      only_public_ = from.only_public_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSProductInfoRequest_AppInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSProductInfoRequest_AppInfo::CopyFrom(const CMsgClientPICSProductInfoRequest_AppInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSProductInfoRequest_AppInfo::IsInitialized() const {
  return true;
}

void CMsgClientPICSProductInfoRequest_AppInfo::Swap(CMsgClientPICSProductInfoRequest_AppInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSProductInfoRequest_AppInfo::InternalSwap(CMsgClientPICSProductInfoRequest_AppInfo* other) {
  std::swap(access_token_, other->access_token_);
  std::swap(appid_, other->appid_);
  std::swap(only_public_, other->only_public_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientPICSProductInfoRequest_AppInfo::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientPICSProductInfoRequest_AppInfo

// optional uint32 appid = 1;
bool CMsgClientPICSProductInfoRequest_AppInfo::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientPICSProductInfoRequest_AppInfo::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientPICSProductInfoRequest_AppInfo::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientPICSProductInfoRequest_AppInfo::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CMsgClientPICSProductInfoRequest_AppInfo::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo.appid)
  return appid_;
}
void CMsgClientPICSProductInfoRequest_AppInfo::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo.appid)
}

// optional uint64 access_token = 2;
bool CMsgClientPICSProductInfoRequest_AppInfo::has_access_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientPICSProductInfoRequest_AppInfo::set_has_access_token() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientPICSProductInfoRequest_AppInfo::clear_has_access_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientPICSProductInfoRequest_AppInfo::clear_access_token() {
  access_token_ = GOOGLE_ULONGLONG(0);
  clear_has_access_token();
}
::google::protobuf::uint64 CMsgClientPICSProductInfoRequest_AppInfo::access_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo.access_token)
  return access_token_;
}
void CMsgClientPICSProductInfoRequest_AppInfo::set_access_token(::google::protobuf::uint64 value) {
  set_has_access_token();
  access_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo.access_token)
}

// optional bool only_public = 3;
bool CMsgClientPICSProductInfoRequest_AppInfo::has_only_public() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientPICSProductInfoRequest_AppInfo::set_has_only_public() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientPICSProductInfoRequest_AppInfo::clear_has_only_public() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientPICSProductInfoRequest_AppInfo::clear_only_public() {
  only_public_ = false;
  clear_has_only_public();
}
bool CMsgClientPICSProductInfoRequest_AppInfo::only_public() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo.only_public)
  return only_public_;
}
void CMsgClientPICSProductInfoRequest_AppInfo::set_only_public(bool value) {
  set_has_only_public();
  only_public_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoRequest.AppInfo.only_public)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSProductInfoRequest_PackageInfo::kPackageidFieldNumber;
const int CMsgClientPICSProductInfoRequest_PackageInfo::kAccessTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSProductInfoRequest_PackageInfo::CMsgClientPICSProductInfoRequest_PackageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
}
CMsgClientPICSProductInfoRequest_PackageInfo::CMsgClientPICSProductInfoRequest_PackageInfo(const CMsgClientPICSProductInfoRequest_PackageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&access_token_, &from.access_token_,
    reinterpret_cast<char*>(&packageid_) -
    reinterpret_cast<char*>(&access_token_) + sizeof(packageid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
}

void CMsgClientPICSProductInfoRequest_PackageInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&access_token_, 0, reinterpret_cast<char*>(&packageid_) -
    reinterpret_cast<char*>(&access_token_) + sizeof(packageid_));
}

CMsgClientPICSProductInfoRequest_PackageInfo::~CMsgClientPICSProductInfoRequest_PackageInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  SharedDtor();
}

void CMsgClientPICSProductInfoRequest_PackageInfo::SharedDtor() {
}

void CMsgClientPICSProductInfoRequest_PackageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPICSProductInfoRequest_PackageInfo::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientPICSProductInfoRequest_PackageInfo& CMsgClientPICSProductInfoRequest_PackageInfo::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientPICSProductInfoRequest_PackageInfo* CMsgClientPICSProductInfoRequest_PackageInfo::New(::google::protobuf::Arena* arena) const {
  CMsgClientPICSProductInfoRequest_PackageInfo* n = new CMsgClientPICSProductInfoRequest_PackageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientPICSProductInfoRequest_PackageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&access_token_, 0, reinterpret_cast<char*>(&packageid_) -
      reinterpret_cast<char*>(&access_token_) + sizeof(packageid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientPICSProductInfoRequest_PackageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 packageid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_packageid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 access_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_access_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &access_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  return false;
#undef DO_
}

void CMsgClientPICSProductInfoRequest_PackageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packageid(), output);
  }

  // optional uint64 access_token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->access_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
}

::google::protobuf::uint8* CMsgClientPICSProductInfoRequest_PackageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->packageid(), target);
  }

  // optional uint64 access_token = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->access_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  return target;
}

size_t CMsgClientPICSProductInfoRequest_PackageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 access_token = 2;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->access_token());
    }

    // optional uint32 packageid = 1;
    if (has_packageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packageid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPICSProductInfoRequest_PackageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSProductInfoRequest_PackageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientPICSProductInfoRequest_PackageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
    MergeFrom(*source);
  }
}

void CMsgClientPICSProductInfoRequest_PackageInfo::MergeFrom(const CMsgClientPICSProductInfoRequest_PackageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      access_token_ = from.access_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      packageid_ = from.packageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSProductInfoRequest_PackageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSProductInfoRequest_PackageInfo::CopyFrom(const CMsgClientPICSProductInfoRequest_PackageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSProductInfoRequest_PackageInfo::IsInitialized() const {
  return true;
}

void CMsgClientPICSProductInfoRequest_PackageInfo::Swap(CMsgClientPICSProductInfoRequest_PackageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSProductInfoRequest_PackageInfo::InternalSwap(CMsgClientPICSProductInfoRequest_PackageInfo* other) {
  std::swap(access_token_, other->access_token_);
  std::swap(packageid_, other->packageid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientPICSProductInfoRequest_PackageInfo::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientPICSProductInfoRequest_PackageInfo

// optional uint32 packageid = 1;
bool CMsgClientPICSProductInfoRequest_PackageInfo::has_packageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientPICSProductInfoRequest_PackageInfo::set_has_packageid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientPICSProductInfoRequest_PackageInfo::clear_has_packageid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientPICSProductInfoRequest_PackageInfo::clear_packageid() {
  packageid_ = 0u;
  clear_has_packageid();
}
::google::protobuf::uint32 CMsgClientPICSProductInfoRequest_PackageInfo::packageid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo.packageid)
  return packageid_;
}
void CMsgClientPICSProductInfoRequest_PackageInfo::set_packageid(::google::protobuf::uint32 value) {
  set_has_packageid();
  packageid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo.packageid)
}

// optional uint64 access_token = 2;
bool CMsgClientPICSProductInfoRequest_PackageInfo::has_access_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientPICSProductInfoRequest_PackageInfo::set_has_access_token() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientPICSProductInfoRequest_PackageInfo::clear_has_access_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientPICSProductInfoRequest_PackageInfo::clear_access_token() {
  access_token_ = GOOGLE_ULONGLONG(0);
  clear_has_access_token();
}
::google::protobuf::uint64 CMsgClientPICSProductInfoRequest_PackageInfo::access_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo.access_token)
  return access_token_;
}
void CMsgClientPICSProductInfoRequest_PackageInfo::set_access_token(::google::protobuf::uint64 value) {
  set_has_access_token();
  access_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo.access_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSProductInfoRequest::kPackagesFieldNumber;
const int CMsgClientPICSProductInfoRequest::kAppsFieldNumber;
const int CMsgClientPICSProductInfoRequest::kMetaDataOnlyFieldNumber;
const int CMsgClientPICSProductInfoRequest::kNumPrevFailedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSProductInfoRequest::CMsgClientPICSProductInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSProductInfoRequest)
}
CMsgClientPICSProductInfoRequest::CMsgClientPICSProductInfoRequest(const CMsgClientPICSProductInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      packages_(from.packages_),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&meta_data_only_, &from.meta_data_only_,
    reinterpret_cast<char*>(&num_prev_failed_) -
    reinterpret_cast<char*>(&meta_data_only_) + sizeof(num_prev_failed_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSProductInfoRequest)
}

void CMsgClientPICSProductInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&meta_data_only_, 0, reinterpret_cast<char*>(&num_prev_failed_) -
    reinterpret_cast<char*>(&meta_data_only_) + sizeof(num_prev_failed_));
}

CMsgClientPICSProductInfoRequest::~CMsgClientPICSProductInfoRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSProductInfoRequest)
  SharedDtor();
}

void CMsgClientPICSProductInfoRequest::SharedDtor() {
}

void CMsgClientPICSProductInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPICSProductInfoRequest::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientPICSProductInfoRequest& CMsgClientPICSProductInfoRequest::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientPICSProductInfoRequest* CMsgClientPICSProductInfoRequest::New(::google::protobuf::Arena* arena) const {
  CMsgClientPICSProductInfoRequest* n = new CMsgClientPICSProductInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientPICSProductInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSProductInfoRequest)
  packages_.Clear();
  apps_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&meta_data_only_, 0, reinterpret_cast<char*>(&num_prev_failed_) -
      reinterpret_cast<char*>(&meta_data_only_) + sizeof(num_prev_failed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientPICSProductInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSProductInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo packages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_packages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientPICSProductInfoRequest.AppInfo apps = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool meta_data_only = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_meta_data_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &meta_data_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_prev_failed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_num_prev_failed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_prev_failed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSProductInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSProductInfoRequest)
  return false;
#undef DO_
}

void CMsgClientPICSProductInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSProductInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo packages = 1;
  for (unsigned int i = 0, n = this->packages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->packages(i), output);
  }

  // repeated .proto.steam.CMsgClientPICSProductInfoRequest.AppInfo apps = 2;
  for (unsigned int i = 0, n = this->apps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->apps(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool meta_data_only = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->meta_data_only(), output);
  }

  // optional uint32 num_prev_failed = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_prev_failed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSProductInfoRequest)
}

::google::protobuf::uint8* CMsgClientPICSProductInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSProductInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo packages = 1;
  for (unsigned int i = 0, n = this->packages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->packages(i), deterministic, target);
  }

  // repeated .proto.steam.CMsgClientPICSProductInfoRequest.AppInfo apps = 2;
  for (unsigned int i = 0, n = this->apps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->apps(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool meta_data_only = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->meta_data_only(), target);
  }

  // optional uint32 num_prev_failed = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_prev_failed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSProductInfoRequest)
  return target;
}

size_t CMsgClientPICSProductInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSProductInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo packages = 1;
  {
    unsigned int count = this->packages_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->packages(i));
    }
  }

  // repeated .proto.steam.CMsgClientPICSProductInfoRequest.AppInfo apps = 2;
  {
    unsigned int count = this->apps_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->apps(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bool meta_data_only = 3;
    if (has_meta_data_only()) {
      total_size += 1 + 1;
    }

    // optional uint32 num_prev_failed = 4;
    if (has_num_prev_failed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_prev_failed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPICSProductInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSProductInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSProductInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientPICSProductInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSProductInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSProductInfoRequest)
    MergeFrom(*source);
  }
}

void CMsgClientPICSProductInfoRequest::MergeFrom(const CMsgClientPICSProductInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSProductInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  packages_.MergeFrom(from.packages_);
  apps_.MergeFrom(from.apps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      meta_data_only_ = from.meta_data_only_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_prev_failed_ = from.num_prev_failed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSProductInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSProductInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSProductInfoRequest::CopyFrom(const CMsgClientPICSProductInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSProductInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSProductInfoRequest::IsInitialized() const {
  return true;
}

void CMsgClientPICSProductInfoRequest::Swap(CMsgClientPICSProductInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSProductInfoRequest::InternalSwap(CMsgClientPICSProductInfoRequest* other) {
  packages_.InternalSwap(&other->packages_);
  apps_.InternalSwap(&other->apps_);
  std::swap(meta_data_only_, other->meta_data_only_);
  std::swap(num_prev_failed_, other->num_prev_failed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientPICSProductInfoRequest::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientPICSProductInfoRequest

// repeated .proto.steam.CMsgClientPICSProductInfoRequest.PackageInfo packages = 1;
int CMsgClientPICSProductInfoRequest::packages_size() const {
  return packages_.size();
}
void CMsgClientPICSProductInfoRequest::clear_packages() {
  packages_.Clear();
}
const ::proto::steam::CMsgClientPICSProductInfoRequest_PackageInfo& CMsgClientPICSProductInfoRequest::packages(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoRequest.packages)
  return packages_.Get(index);
}
::proto::steam::CMsgClientPICSProductInfoRequest_PackageInfo* CMsgClientPICSProductInfoRequest::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPICSProductInfoRequest.packages)
  return packages_.Mutable(index);
}
::proto::steam::CMsgClientPICSProductInfoRequest_PackageInfo* CMsgClientPICSProductInfoRequest::add_packages() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientPICSProductInfoRequest.packages)
  return packages_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientPICSProductInfoRequest_PackageInfo >*
CMsgClientPICSProductInfoRequest::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientPICSProductInfoRequest.packages)
  return &packages_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientPICSProductInfoRequest_PackageInfo >&
CMsgClientPICSProductInfoRequest::packages() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientPICSProductInfoRequest.packages)
  return packages_;
}

// repeated .proto.steam.CMsgClientPICSProductInfoRequest.AppInfo apps = 2;
int CMsgClientPICSProductInfoRequest::apps_size() const {
  return apps_.size();
}
void CMsgClientPICSProductInfoRequest::clear_apps() {
  apps_.Clear();
}
const ::proto::steam::CMsgClientPICSProductInfoRequest_AppInfo& CMsgClientPICSProductInfoRequest::apps(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoRequest.apps)
  return apps_.Get(index);
}
::proto::steam::CMsgClientPICSProductInfoRequest_AppInfo* CMsgClientPICSProductInfoRequest::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPICSProductInfoRequest.apps)
  return apps_.Mutable(index);
}
::proto::steam::CMsgClientPICSProductInfoRequest_AppInfo* CMsgClientPICSProductInfoRequest::add_apps() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientPICSProductInfoRequest.apps)
  return apps_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientPICSProductInfoRequest_AppInfo >*
CMsgClientPICSProductInfoRequest::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientPICSProductInfoRequest.apps)
  return &apps_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientPICSProductInfoRequest_AppInfo >&
CMsgClientPICSProductInfoRequest::apps() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientPICSProductInfoRequest.apps)
  return apps_;
}

// optional bool meta_data_only = 3;
bool CMsgClientPICSProductInfoRequest::has_meta_data_only() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientPICSProductInfoRequest::set_has_meta_data_only() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientPICSProductInfoRequest::clear_has_meta_data_only() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientPICSProductInfoRequest::clear_meta_data_only() {
  meta_data_only_ = false;
  clear_has_meta_data_only();
}
bool CMsgClientPICSProductInfoRequest::meta_data_only() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoRequest.meta_data_only)
  return meta_data_only_;
}
void CMsgClientPICSProductInfoRequest::set_meta_data_only(bool value) {
  set_has_meta_data_only();
  meta_data_only_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoRequest.meta_data_only)
}

// optional uint32 num_prev_failed = 4;
bool CMsgClientPICSProductInfoRequest::has_num_prev_failed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientPICSProductInfoRequest::set_has_num_prev_failed() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientPICSProductInfoRequest::clear_has_num_prev_failed() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientPICSProductInfoRequest::clear_num_prev_failed() {
  num_prev_failed_ = 0u;
  clear_has_num_prev_failed();
}
::google::protobuf::uint32 CMsgClientPICSProductInfoRequest::num_prev_failed() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoRequest.num_prev_failed)
  return num_prev_failed_;
}
void CMsgClientPICSProductInfoRequest::set_num_prev_failed(::google::protobuf::uint32 value) {
  set_has_num_prev_failed();
  num_prev_failed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoRequest.num_prev_failed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSProductInfoResponse_AppInfo::kAppidFieldNumber;
const int CMsgClientPICSProductInfoResponse_AppInfo::kChangeNumberFieldNumber;
const int CMsgClientPICSProductInfoResponse_AppInfo::kMissingTokenFieldNumber;
const int CMsgClientPICSProductInfoResponse_AppInfo::kShaFieldNumber;
const int CMsgClientPICSProductInfoResponse_AppInfo::kBufferFieldNumber;
const int CMsgClientPICSProductInfoResponse_AppInfo::kOnlyPublicFieldNumber;
const int CMsgClientPICSProductInfoResponse_AppInfo::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSProductInfoResponse_AppInfo::CMsgClientPICSProductInfoResponse_AppInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
}
CMsgClientPICSProductInfoResponse_AppInfo::CMsgClientPICSProductInfoResponse_AppInfo(const CMsgClientPICSProductInfoResponse_AppInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha()) {
    sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
  }
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buffer()) {
    buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&appid_) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
}

void CMsgClientPICSProductInfoResponse_AppInfo::SharedCtor() {
  _cached_size_ = 0;
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&appid_) + sizeof(size_));
}

CMsgClientPICSProductInfoResponse_AppInfo::~CMsgClientPICSProductInfoResponse_AppInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  SharedDtor();
}

void CMsgClientPICSProductInfoResponse_AppInfo::SharedDtor() {
  sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientPICSProductInfoResponse_AppInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPICSProductInfoResponse_AppInfo::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientPICSProductInfoResponse_AppInfo& CMsgClientPICSProductInfoResponse_AppInfo::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientPICSProductInfoResponse_AppInfo* CMsgClientPICSProductInfoResponse_AppInfo::New(::google::protobuf::Arena* arena) const {
  CMsgClientPICSProductInfoResponse_AppInfo* n = new CMsgClientPICSProductInfoResponse_AppInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientPICSProductInfoResponse_AppInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_sha()) {
      GOOGLE_DCHECK(!sha_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sha_.UnsafeRawStringPointer())->clear();
    }
    if (has_buffer()) {
      GOOGLE_DCHECK(!buffer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*buffer_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&appid_) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientPICSProductInfoResponse_AppInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 change_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_change_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool missing_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_missing_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &missing_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes buffer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool only_public = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_only_public();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_public_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  return false;
#undef DO_
}

void CMsgClientPICSProductInfoResponse_AppInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_number(), output);
  }

  // optional bool missing_token = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->missing_token(), output);
  }

  // optional bytes sha = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->sha(), output);
  }

  // optional bytes buffer = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->buffer(), output);
  }

  // optional bool only_public = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->only_public(), output);
  }

  // optional uint32 size = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
}

::google::protobuf::uint8* CMsgClientPICSProductInfoResponse_AppInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->change_number(), target);
  }

  // optional bool missing_token = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->missing_token(), target);
  }

  // optional bytes sha = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sha(), target);
  }

  // optional bytes buffer = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->buffer(), target);
  }

  // optional bool only_public = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->only_public(), target);
  }

  // optional uint32 size = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  return target;
}

size_t CMsgClientPICSProductInfoResponse_AppInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes sha = 4;
    if (has_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha());
    }

    // optional bytes buffer = 5;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 change_number = 2;
    if (has_change_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_number());
    }

    // optional bool missing_token = 3;
    if (has_missing_token()) {
      total_size += 1 + 1;
    }

    // optional bool only_public = 6;
    if (has_only_public()) {
      total_size += 1 + 1;
    }

    // optional uint32 size = 7;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPICSProductInfoResponse_AppInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSProductInfoResponse_AppInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientPICSProductInfoResponse_AppInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
    MergeFrom(*source);
  }
}

void CMsgClientPICSProductInfoResponse_AppInfo::MergeFrom(const CMsgClientPICSProductInfoResponse_AppInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sha();
      sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_buffer();
      buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      change_number_ = from.change_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      missing_token_ = from.missing_token_;
    }
    if (cached_has_bits & 0x00000020u) {
      only_public_ = from.only_public_;
    }
    if (cached_has_bits & 0x00000040u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSProductInfoResponse_AppInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSProductInfoResponse_AppInfo::CopyFrom(const CMsgClientPICSProductInfoResponse_AppInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSProductInfoResponse_AppInfo::IsInitialized() const {
  return true;
}

void CMsgClientPICSProductInfoResponse_AppInfo::Swap(CMsgClientPICSProductInfoResponse_AppInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSProductInfoResponse_AppInfo::InternalSwap(CMsgClientPICSProductInfoResponse_AppInfo* other) {
  sha_.Swap(&other->sha_);
  buffer_.Swap(&other->buffer_);
  std::swap(appid_, other->appid_);
  std::swap(change_number_, other->change_number_);
  std::swap(missing_token_, other->missing_token_);
  std::swap(only_public_, other->only_public_);
  std::swap(size_, other->size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientPICSProductInfoResponse_AppInfo::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientPICSProductInfoResponse_AppInfo

// optional uint32 appid = 1;
bool CMsgClientPICSProductInfoResponse_AppInfo::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientPICSProductInfoResponse_AppInfo::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientPICSProductInfoResponse_AppInfo::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientPICSProductInfoResponse_AppInfo::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CMsgClientPICSProductInfoResponse_AppInfo::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.appid)
  return appid_;
}
void CMsgClientPICSProductInfoResponse_AppInfo::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.appid)
}

// optional uint32 change_number = 2;
bool CMsgClientPICSProductInfoResponse_AppInfo::has_change_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientPICSProductInfoResponse_AppInfo::set_has_change_number() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientPICSProductInfoResponse_AppInfo::clear_has_change_number() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientPICSProductInfoResponse_AppInfo::clear_change_number() {
  change_number_ = 0u;
  clear_has_change_number();
}
::google::protobuf::uint32 CMsgClientPICSProductInfoResponse_AppInfo::change_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.change_number)
  return change_number_;
}
void CMsgClientPICSProductInfoResponse_AppInfo::set_change_number(::google::protobuf::uint32 value) {
  set_has_change_number();
  change_number_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.change_number)
}

// optional bool missing_token = 3;
bool CMsgClientPICSProductInfoResponse_AppInfo::has_missing_token() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientPICSProductInfoResponse_AppInfo::set_has_missing_token() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientPICSProductInfoResponse_AppInfo::clear_has_missing_token() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientPICSProductInfoResponse_AppInfo::clear_missing_token() {
  missing_token_ = false;
  clear_has_missing_token();
}
bool CMsgClientPICSProductInfoResponse_AppInfo::missing_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.missing_token)
  return missing_token_;
}
void CMsgClientPICSProductInfoResponse_AppInfo::set_missing_token(bool value) {
  set_has_missing_token();
  missing_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.missing_token)
}

// optional bytes sha = 4;
bool CMsgClientPICSProductInfoResponse_AppInfo::has_sha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientPICSProductInfoResponse_AppInfo::set_has_sha() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientPICSProductInfoResponse_AppInfo::clear_has_sha() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientPICSProductInfoResponse_AppInfo::clear_sha() {
  sha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha();
}
const ::std::string& CMsgClientPICSProductInfoResponse_AppInfo::sha() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.sha)
  return sha_.GetNoArena();
}
void CMsgClientPICSProductInfoResponse_AppInfo::set_sha(const ::std::string& value) {
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.sha)
}
#if LANG_CXX11
void CMsgClientPICSProductInfoResponse_AppInfo::set_sha(::std::string&& value) {
  set_has_sha();
  sha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.sha)
}
#endif
void CMsgClientPICSProductInfoResponse_AppInfo::set_sha(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.sha)
}
void CMsgClientPICSProductInfoResponse_AppInfo::set_sha(const void* value, size_t size) {
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.sha)
}
::std::string* CMsgClientPICSProductInfoResponse_AppInfo::mutable_sha() {
  set_has_sha();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.sha)
  return sha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientPICSProductInfoResponse_AppInfo::release_sha() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.sha)
  clear_has_sha();
  return sha_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientPICSProductInfoResponse_AppInfo::set_allocated_sha(::std::string* sha) {
  if (sha != NULL) {
    set_has_sha();
  } else {
    clear_has_sha();
  }
  sha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.sha)
}

// optional bytes buffer = 5;
bool CMsgClientPICSProductInfoResponse_AppInfo::has_buffer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientPICSProductInfoResponse_AppInfo::set_has_buffer() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientPICSProductInfoResponse_AppInfo::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientPICSProductInfoResponse_AppInfo::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buffer();
}
const ::std::string& CMsgClientPICSProductInfoResponse_AppInfo::buffer() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.buffer)
  return buffer_.GetNoArena();
}
void CMsgClientPICSProductInfoResponse_AppInfo::set_buffer(const ::std::string& value) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.buffer)
}
#if LANG_CXX11
void CMsgClientPICSProductInfoResponse_AppInfo::set_buffer(::std::string&& value) {
  set_has_buffer();
  buffer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.buffer)
}
#endif
void CMsgClientPICSProductInfoResponse_AppInfo::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.buffer)
}
void CMsgClientPICSProductInfoResponse_AppInfo::set_buffer(const void* value, size_t size) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.buffer)
}
::std::string* CMsgClientPICSProductInfoResponse_AppInfo::mutable_buffer() {
  set_has_buffer();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientPICSProductInfoResponse_AppInfo::release_buffer() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.buffer)
  clear_has_buffer();
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientPICSProductInfoResponse_AppInfo::set_allocated_buffer(::std::string* buffer) {
  if (buffer != NULL) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.buffer)
}

// optional bool only_public = 6;
bool CMsgClientPICSProductInfoResponse_AppInfo::has_only_public() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientPICSProductInfoResponse_AppInfo::set_has_only_public() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientPICSProductInfoResponse_AppInfo::clear_has_only_public() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientPICSProductInfoResponse_AppInfo::clear_only_public() {
  only_public_ = false;
  clear_has_only_public();
}
bool CMsgClientPICSProductInfoResponse_AppInfo::only_public() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.only_public)
  return only_public_;
}
void CMsgClientPICSProductInfoResponse_AppInfo::set_only_public(bool value) {
  set_has_only_public();
  only_public_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.only_public)
}

// optional uint32 size = 7;
bool CMsgClientPICSProductInfoResponse_AppInfo::has_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientPICSProductInfoResponse_AppInfo::set_has_size() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientPICSProductInfoResponse_AppInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientPICSProductInfoResponse_AppInfo::clear_size() {
  size_ = 0u;
  clear_has_size();
}
::google::protobuf::uint32 CMsgClientPICSProductInfoResponse_AppInfo::size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.size)
  return size_;
}
void CMsgClientPICSProductInfoResponse_AppInfo::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoResponse.AppInfo.size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSProductInfoResponse_PackageInfo::kPackageidFieldNumber;
const int CMsgClientPICSProductInfoResponse_PackageInfo::kChangeNumberFieldNumber;
const int CMsgClientPICSProductInfoResponse_PackageInfo::kMissingTokenFieldNumber;
const int CMsgClientPICSProductInfoResponse_PackageInfo::kShaFieldNumber;
const int CMsgClientPICSProductInfoResponse_PackageInfo::kBufferFieldNumber;
const int CMsgClientPICSProductInfoResponse_PackageInfo::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSProductInfoResponse_PackageInfo::CMsgClientPICSProductInfoResponse_PackageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
}
CMsgClientPICSProductInfoResponse_PackageInfo::CMsgClientPICSProductInfoResponse_PackageInfo(const CMsgClientPICSProductInfoResponse_PackageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha()) {
    sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
  }
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buffer()) {
    buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  ::memcpy(&packageid_, &from.packageid_,
    reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&packageid_) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
}

void CMsgClientPICSProductInfoResponse_PackageInfo::SharedCtor() {
  _cached_size_ = 0;
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&packageid_, 0, reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&packageid_) + sizeof(size_));
}

CMsgClientPICSProductInfoResponse_PackageInfo::~CMsgClientPICSProductInfoResponse_PackageInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  SharedDtor();
}

void CMsgClientPICSProductInfoResponse_PackageInfo::SharedDtor() {
  sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientPICSProductInfoResponse_PackageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPICSProductInfoResponse_PackageInfo::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientPICSProductInfoResponse_PackageInfo& CMsgClientPICSProductInfoResponse_PackageInfo::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientPICSProductInfoResponse_PackageInfo* CMsgClientPICSProductInfoResponse_PackageInfo::New(::google::protobuf::Arena* arena) const {
  CMsgClientPICSProductInfoResponse_PackageInfo* n = new CMsgClientPICSProductInfoResponse_PackageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientPICSProductInfoResponse_PackageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_sha()) {
      GOOGLE_DCHECK(!sha_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sha_.UnsafeRawStringPointer())->clear();
    }
    if (has_buffer()) {
      GOOGLE_DCHECK(!buffer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*buffer_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&packageid_, 0, reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&packageid_) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientPICSProductInfoResponse_PackageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 packageid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_packageid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 change_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_change_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool missing_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_missing_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &missing_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes buffer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  return false;
#undef DO_
}

void CMsgClientPICSProductInfoResponse_PackageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packageid(), output);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_number(), output);
  }

  // optional bool missing_token = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->missing_token(), output);
  }

  // optional bytes sha = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->sha(), output);
  }

  // optional bytes buffer = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->buffer(), output);
  }

  // optional uint32 size = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
}

::google::protobuf::uint8* CMsgClientPICSProductInfoResponse_PackageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->packageid(), target);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->change_number(), target);
  }

  // optional bool missing_token = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->missing_token(), target);
  }

  // optional bytes sha = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sha(), target);
  }

  // optional bytes buffer = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->buffer(), target);
  }

  // optional uint32 size = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  return target;
}

size_t CMsgClientPICSProductInfoResponse_PackageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes sha = 4;
    if (has_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha());
    }

    // optional bytes buffer = 5;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }

    // optional uint32 packageid = 1;
    if (has_packageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packageid());
    }

    // optional uint32 change_number = 2;
    if (has_change_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_number());
    }

    // optional bool missing_token = 3;
    if (has_missing_token()) {
      total_size += 1 + 1;
    }

    // optional uint32 size = 6;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPICSProductInfoResponse_PackageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSProductInfoResponse_PackageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientPICSProductInfoResponse_PackageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
    MergeFrom(*source);
  }
}

void CMsgClientPICSProductInfoResponse_PackageInfo::MergeFrom(const CMsgClientPICSProductInfoResponse_PackageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sha();
      sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_buffer();
      buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
    }
    if (cached_has_bits & 0x00000004u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000008u) {
      change_number_ = from.change_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      missing_token_ = from.missing_token_;
    }
    if (cached_has_bits & 0x00000020u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSProductInfoResponse_PackageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSProductInfoResponse_PackageInfo::CopyFrom(const CMsgClientPICSProductInfoResponse_PackageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSProductInfoResponse_PackageInfo::IsInitialized() const {
  return true;
}

void CMsgClientPICSProductInfoResponse_PackageInfo::Swap(CMsgClientPICSProductInfoResponse_PackageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSProductInfoResponse_PackageInfo::InternalSwap(CMsgClientPICSProductInfoResponse_PackageInfo* other) {
  sha_.Swap(&other->sha_);
  buffer_.Swap(&other->buffer_);
  std::swap(packageid_, other->packageid_);
  std::swap(change_number_, other->change_number_);
  std::swap(missing_token_, other->missing_token_);
  std::swap(size_, other->size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientPICSProductInfoResponse_PackageInfo::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientPICSProductInfoResponse_PackageInfo

// optional uint32 packageid = 1;
bool CMsgClientPICSProductInfoResponse_PackageInfo::has_packageid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientPICSProductInfoResponse_PackageInfo::set_has_packageid() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientPICSProductInfoResponse_PackageInfo::clear_has_packageid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientPICSProductInfoResponse_PackageInfo::clear_packageid() {
  packageid_ = 0u;
  clear_has_packageid();
}
::google::protobuf::uint32 CMsgClientPICSProductInfoResponse_PackageInfo::packageid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.packageid)
  return packageid_;
}
void CMsgClientPICSProductInfoResponse_PackageInfo::set_packageid(::google::protobuf::uint32 value) {
  set_has_packageid();
  packageid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.packageid)
}

// optional uint32 change_number = 2;
bool CMsgClientPICSProductInfoResponse_PackageInfo::has_change_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientPICSProductInfoResponse_PackageInfo::set_has_change_number() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientPICSProductInfoResponse_PackageInfo::clear_has_change_number() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientPICSProductInfoResponse_PackageInfo::clear_change_number() {
  change_number_ = 0u;
  clear_has_change_number();
}
::google::protobuf::uint32 CMsgClientPICSProductInfoResponse_PackageInfo::change_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.change_number)
  return change_number_;
}
void CMsgClientPICSProductInfoResponse_PackageInfo::set_change_number(::google::protobuf::uint32 value) {
  set_has_change_number();
  change_number_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.change_number)
}

// optional bool missing_token = 3;
bool CMsgClientPICSProductInfoResponse_PackageInfo::has_missing_token() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientPICSProductInfoResponse_PackageInfo::set_has_missing_token() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientPICSProductInfoResponse_PackageInfo::clear_has_missing_token() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientPICSProductInfoResponse_PackageInfo::clear_missing_token() {
  missing_token_ = false;
  clear_has_missing_token();
}
bool CMsgClientPICSProductInfoResponse_PackageInfo::missing_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.missing_token)
  return missing_token_;
}
void CMsgClientPICSProductInfoResponse_PackageInfo::set_missing_token(bool value) {
  set_has_missing_token();
  missing_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.missing_token)
}

// optional bytes sha = 4;
bool CMsgClientPICSProductInfoResponse_PackageInfo::has_sha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientPICSProductInfoResponse_PackageInfo::set_has_sha() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientPICSProductInfoResponse_PackageInfo::clear_has_sha() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientPICSProductInfoResponse_PackageInfo::clear_sha() {
  sha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha();
}
const ::std::string& CMsgClientPICSProductInfoResponse_PackageInfo::sha() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.sha)
  return sha_.GetNoArena();
}
void CMsgClientPICSProductInfoResponse_PackageInfo::set_sha(const ::std::string& value) {
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.sha)
}
#if LANG_CXX11
void CMsgClientPICSProductInfoResponse_PackageInfo::set_sha(::std::string&& value) {
  set_has_sha();
  sha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.sha)
}
#endif
void CMsgClientPICSProductInfoResponse_PackageInfo::set_sha(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.sha)
}
void CMsgClientPICSProductInfoResponse_PackageInfo::set_sha(const void* value, size_t size) {
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.sha)
}
::std::string* CMsgClientPICSProductInfoResponse_PackageInfo::mutable_sha() {
  set_has_sha();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.sha)
  return sha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientPICSProductInfoResponse_PackageInfo::release_sha() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.sha)
  clear_has_sha();
  return sha_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientPICSProductInfoResponse_PackageInfo::set_allocated_sha(::std::string* sha) {
  if (sha != NULL) {
    set_has_sha();
  } else {
    clear_has_sha();
  }
  sha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.sha)
}

// optional bytes buffer = 5;
bool CMsgClientPICSProductInfoResponse_PackageInfo::has_buffer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientPICSProductInfoResponse_PackageInfo::set_has_buffer() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientPICSProductInfoResponse_PackageInfo::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientPICSProductInfoResponse_PackageInfo::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buffer();
}
const ::std::string& CMsgClientPICSProductInfoResponse_PackageInfo::buffer() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.buffer)
  return buffer_.GetNoArena();
}
void CMsgClientPICSProductInfoResponse_PackageInfo::set_buffer(const ::std::string& value) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.buffer)
}
#if LANG_CXX11
void CMsgClientPICSProductInfoResponse_PackageInfo::set_buffer(::std::string&& value) {
  set_has_buffer();
  buffer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.buffer)
}
#endif
void CMsgClientPICSProductInfoResponse_PackageInfo::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.buffer)
}
void CMsgClientPICSProductInfoResponse_PackageInfo::set_buffer(const void* value, size_t size) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.buffer)
}
::std::string* CMsgClientPICSProductInfoResponse_PackageInfo::mutable_buffer() {
  set_has_buffer();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientPICSProductInfoResponse_PackageInfo::release_buffer() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.buffer)
  clear_has_buffer();
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientPICSProductInfoResponse_PackageInfo::set_allocated_buffer(::std::string* buffer) {
  if (buffer != NULL) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.buffer)
}

// optional uint32 size = 6;
bool CMsgClientPICSProductInfoResponse_PackageInfo::has_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientPICSProductInfoResponse_PackageInfo::set_has_size() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientPICSProductInfoResponse_PackageInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientPICSProductInfoResponse_PackageInfo::clear_size() {
  size_ = 0u;
  clear_has_size();
}
::google::protobuf::uint32 CMsgClientPICSProductInfoResponse_PackageInfo::size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.size)
  return size_;
}
void CMsgClientPICSProductInfoResponse_PackageInfo::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo.size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSProductInfoResponse::kAppsFieldNumber;
const int CMsgClientPICSProductInfoResponse::kUnknownAppidsFieldNumber;
const int CMsgClientPICSProductInfoResponse::kPackagesFieldNumber;
const int CMsgClientPICSProductInfoResponse::kUnknownPackageidsFieldNumber;
const int CMsgClientPICSProductInfoResponse::kMetaDataOnlyFieldNumber;
const int CMsgClientPICSProductInfoResponse::kResponsePendingFieldNumber;
const int CMsgClientPICSProductInfoResponse::kHttpMinSizeFieldNumber;
const int CMsgClientPICSProductInfoResponse::kHttpHostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSProductInfoResponse::CMsgClientPICSProductInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSProductInfoResponse)
}
CMsgClientPICSProductInfoResponse::CMsgClientPICSProductInfoResponse(const CMsgClientPICSProductInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      apps_(from.apps_),
      unknown_appids_(from.unknown_appids_),
      packages_(from.packages_),
      unknown_packageids_(from.unknown_packageids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  http_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_http_host()) {
    http_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_host_);
  }
  ::memcpy(&meta_data_only_, &from.meta_data_only_,
    reinterpret_cast<char*>(&http_min_size_) -
    reinterpret_cast<char*>(&meta_data_only_) + sizeof(http_min_size_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSProductInfoResponse)
}

void CMsgClientPICSProductInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  http_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_data_only_, 0, reinterpret_cast<char*>(&http_min_size_) -
    reinterpret_cast<char*>(&meta_data_only_) + sizeof(http_min_size_));
}

CMsgClientPICSProductInfoResponse::~CMsgClientPICSProductInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSProductInfoResponse)
  SharedDtor();
}

void CMsgClientPICSProductInfoResponse::SharedDtor() {
  http_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientPICSProductInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPICSProductInfoResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientPICSProductInfoResponse& CMsgClientPICSProductInfoResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientPICSProductInfoResponse* CMsgClientPICSProductInfoResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientPICSProductInfoResponse* n = new CMsgClientPICSProductInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientPICSProductInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSProductInfoResponse)
  apps_.Clear();
  unknown_appids_.Clear();
  packages_.Clear();
  unknown_packageids_.Clear();
  if (has_http_host()) {
    GOOGLE_DCHECK(!http_host_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*http_host_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&meta_data_only_, 0, reinterpret_cast<char*>(&http_min_size_) -
      reinterpret_cast<char*>(&meta_data_only_) + sizeof(http_min_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientPICSProductInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSProductInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientPICSProductInfoResponse.AppInfo apps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 unknown_appids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_unknown_appids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unknown_appids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo packages = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_packages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 unknown_packageids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_unknown_packageids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unknown_packageids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool meta_data_only = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_meta_data_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &meta_data_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool response_pending = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_response_pending();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &response_pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 http_min_size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_http_min_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &http_min_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string http_host = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->http_host().data(), this->http_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientPICSProductInfoResponse.http_host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSProductInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSProductInfoResponse)
  return false;
#undef DO_
}

void CMsgClientPICSProductInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSProductInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPICSProductInfoResponse.AppInfo apps = 1;
  for (unsigned int i = 0, n = this->apps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->apps(i), output);
  }

  // repeated uint32 unknown_appids = 2;
  for (int i = 0, n = this->unknown_appids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->unknown_appids(i), output);
  }

  // repeated .proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo packages = 3;
  for (unsigned int i = 0, n = this->packages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->packages(i), output);
  }

  // repeated uint32 unknown_packageids = 4;
  for (int i = 0, n = this->unknown_packageids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->unknown_packageids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool meta_data_only = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->meta_data_only(), output);
  }

  // optional bool response_pending = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->response_pending(), output);
  }

  // optional uint32 http_min_size = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->http_min_size(), output);
  }

  // optional string http_host = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_host().data(), this->http_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPICSProductInfoResponse.http_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->http_host(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSProductInfoResponse)
}

::google::protobuf::uint8* CMsgClientPICSProductInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSProductInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPICSProductInfoResponse.AppInfo apps = 1;
  for (unsigned int i = 0, n = this->apps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->apps(i), deterministic, target);
  }

  // repeated uint32 unknown_appids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->unknown_appids_, target);

  // repeated .proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo packages = 3;
  for (unsigned int i = 0, n = this->packages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->packages(i), deterministic, target);
  }

  // repeated uint32 unknown_packageids = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->unknown_packageids_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool meta_data_only = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->meta_data_only(), target);
  }

  // optional bool response_pending = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->response_pending(), target);
  }

  // optional uint32 http_min_size = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->http_min_size(), target);
  }

  // optional string http_host = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_host().data(), this->http_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPICSProductInfoResponse.http_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->http_host(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSProductInfoResponse)
  return target;
}

size_t CMsgClientPICSProductInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSProductInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientPICSProductInfoResponse.AppInfo apps = 1;
  {
    unsigned int count = this->apps_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->apps(i));
    }
  }

  // repeated uint32 unknown_appids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->unknown_appids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->unknown_appids_size());
    total_size += data_size;
  }

  // repeated .proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo packages = 3;
  {
    unsigned int count = this->packages_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->packages(i));
    }
  }

  // repeated uint32 unknown_packageids = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->unknown_packageids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->unknown_packageids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string http_host = 8;
    if (has_http_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->http_host());
    }

    // optional bool meta_data_only = 5;
    if (has_meta_data_only()) {
      total_size += 1 + 1;
    }

    // optional bool response_pending = 6;
    if (has_response_pending()) {
      total_size += 1 + 1;
    }

    // optional uint32 http_min_size = 7;
    if (has_http_min_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->http_min_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPICSProductInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSProductInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSProductInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientPICSProductInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSProductInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSProductInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgClientPICSProductInfoResponse::MergeFrom(const CMsgClientPICSProductInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSProductInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  unknown_appids_.MergeFrom(from.unknown_appids_);
  packages_.MergeFrom(from.packages_);
  unknown_packageids_.MergeFrom(from.unknown_packageids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_http_host();
      http_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_host_);
    }
    if (cached_has_bits & 0x00000002u) {
      meta_data_only_ = from.meta_data_only_;
    }
    if (cached_has_bits & 0x00000004u) {
      response_pending_ = from.response_pending_;
    }
    if (cached_has_bits & 0x00000008u) {
      http_min_size_ = from.http_min_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSProductInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSProductInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSProductInfoResponse::CopyFrom(const CMsgClientPICSProductInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSProductInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSProductInfoResponse::IsInitialized() const {
  return true;
}

void CMsgClientPICSProductInfoResponse::Swap(CMsgClientPICSProductInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSProductInfoResponse::InternalSwap(CMsgClientPICSProductInfoResponse* other) {
  apps_.InternalSwap(&other->apps_);
  unknown_appids_.InternalSwap(&other->unknown_appids_);
  packages_.InternalSwap(&other->packages_);
  unknown_packageids_.InternalSwap(&other->unknown_packageids_);
  http_host_.Swap(&other->http_host_);
  std::swap(meta_data_only_, other->meta_data_only_);
  std::swap(response_pending_, other->response_pending_);
  std::swap(http_min_size_, other->http_min_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientPICSProductInfoResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientPICSProductInfoResponse

// repeated .proto.steam.CMsgClientPICSProductInfoResponse.AppInfo apps = 1;
int CMsgClientPICSProductInfoResponse::apps_size() const {
  return apps_.size();
}
void CMsgClientPICSProductInfoResponse::clear_apps() {
  apps_.Clear();
}
const ::proto::steam::CMsgClientPICSProductInfoResponse_AppInfo& CMsgClientPICSProductInfoResponse::apps(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoResponse.apps)
  return apps_.Get(index);
}
::proto::steam::CMsgClientPICSProductInfoResponse_AppInfo* CMsgClientPICSProductInfoResponse::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPICSProductInfoResponse.apps)
  return apps_.Mutable(index);
}
::proto::steam::CMsgClientPICSProductInfoResponse_AppInfo* CMsgClientPICSProductInfoResponse::add_apps() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientPICSProductInfoResponse.apps)
  return apps_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientPICSProductInfoResponse_AppInfo >*
CMsgClientPICSProductInfoResponse::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientPICSProductInfoResponse.apps)
  return &apps_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientPICSProductInfoResponse_AppInfo >&
CMsgClientPICSProductInfoResponse::apps() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientPICSProductInfoResponse.apps)
  return apps_;
}

// repeated uint32 unknown_appids = 2;
int CMsgClientPICSProductInfoResponse::unknown_appids_size() const {
  return unknown_appids_.size();
}
void CMsgClientPICSProductInfoResponse::clear_unknown_appids() {
  unknown_appids_.Clear();
}
::google::protobuf::uint32 CMsgClientPICSProductInfoResponse::unknown_appids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoResponse.unknown_appids)
  return unknown_appids_.Get(index);
}
void CMsgClientPICSProductInfoResponse::set_unknown_appids(int index, ::google::protobuf::uint32 value) {
  unknown_appids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoResponse.unknown_appids)
}
void CMsgClientPICSProductInfoResponse::add_unknown_appids(::google::protobuf::uint32 value) {
  unknown_appids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientPICSProductInfoResponse.unknown_appids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientPICSProductInfoResponse::unknown_appids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientPICSProductInfoResponse.unknown_appids)
  return unknown_appids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientPICSProductInfoResponse::mutable_unknown_appids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientPICSProductInfoResponse.unknown_appids)
  return &unknown_appids_;
}

// repeated .proto.steam.CMsgClientPICSProductInfoResponse.PackageInfo packages = 3;
int CMsgClientPICSProductInfoResponse::packages_size() const {
  return packages_.size();
}
void CMsgClientPICSProductInfoResponse::clear_packages() {
  packages_.Clear();
}
const ::proto::steam::CMsgClientPICSProductInfoResponse_PackageInfo& CMsgClientPICSProductInfoResponse::packages(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoResponse.packages)
  return packages_.Get(index);
}
::proto::steam::CMsgClientPICSProductInfoResponse_PackageInfo* CMsgClientPICSProductInfoResponse::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPICSProductInfoResponse.packages)
  return packages_.Mutable(index);
}
::proto::steam::CMsgClientPICSProductInfoResponse_PackageInfo* CMsgClientPICSProductInfoResponse::add_packages() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientPICSProductInfoResponse.packages)
  return packages_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientPICSProductInfoResponse_PackageInfo >*
CMsgClientPICSProductInfoResponse::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientPICSProductInfoResponse.packages)
  return &packages_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientPICSProductInfoResponse_PackageInfo >&
CMsgClientPICSProductInfoResponse::packages() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientPICSProductInfoResponse.packages)
  return packages_;
}

// repeated uint32 unknown_packageids = 4;
int CMsgClientPICSProductInfoResponse::unknown_packageids_size() const {
  return unknown_packageids_.size();
}
void CMsgClientPICSProductInfoResponse::clear_unknown_packageids() {
  unknown_packageids_.Clear();
}
::google::protobuf::uint32 CMsgClientPICSProductInfoResponse::unknown_packageids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoResponse.unknown_packageids)
  return unknown_packageids_.Get(index);
}
void CMsgClientPICSProductInfoResponse::set_unknown_packageids(int index, ::google::protobuf::uint32 value) {
  unknown_packageids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoResponse.unknown_packageids)
}
void CMsgClientPICSProductInfoResponse::add_unknown_packageids(::google::protobuf::uint32 value) {
  unknown_packageids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientPICSProductInfoResponse.unknown_packageids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientPICSProductInfoResponse::unknown_packageids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientPICSProductInfoResponse.unknown_packageids)
  return unknown_packageids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientPICSProductInfoResponse::mutable_unknown_packageids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientPICSProductInfoResponse.unknown_packageids)
  return &unknown_packageids_;
}

// optional bool meta_data_only = 5;
bool CMsgClientPICSProductInfoResponse::has_meta_data_only() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientPICSProductInfoResponse::set_has_meta_data_only() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientPICSProductInfoResponse::clear_has_meta_data_only() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientPICSProductInfoResponse::clear_meta_data_only() {
  meta_data_only_ = false;
  clear_has_meta_data_only();
}
bool CMsgClientPICSProductInfoResponse::meta_data_only() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoResponse.meta_data_only)
  return meta_data_only_;
}
void CMsgClientPICSProductInfoResponse::set_meta_data_only(bool value) {
  set_has_meta_data_only();
  meta_data_only_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoResponse.meta_data_only)
}

// optional bool response_pending = 6;
bool CMsgClientPICSProductInfoResponse::has_response_pending() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientPICSProductInfoResponse::set_has_response_pending() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientPICSProductInfoResponse::clear_has_response_pending() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientPICSProductInfoResponse::clear_response_pending() {
  response_pending_ = false;
  clear_has_response_pending();
}
bool CMsgClientPICSProductInfoResponse::response_pending() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoResponse.response_pending)
  return response_pending_;
}
void CMsgClientPICSProductInfoResponse::set_response_pending(bool value) {
  set_has_response_pending();
  response_pending_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoResponse.response_pending)
}

// optional uint32 http_min_size = 7;
bool CMsgClientPICSProductInfoResponse::has_http_min_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientPICSProductInfoResponse::set_has_http_min_size() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientPICSProductInfoResponse::clear_has_http_min_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientPICSProductInfoResponse::clear_http_min_size() {
  http_min_size_ = 0u;
  clear_has_http_min_size();
}
::google::protobuf::uint32 CMsgClientPICSProductInfoResponse::http_min_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoResponse.http_min_size)
  return http_min_size_;
}
void CMsgClientPICSProductInfoResponse::set_http_min_size(::google::protobuf::uint32 value) {
  set_has_http_min_size();
  http_min_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoResponse.http_min_size)
}

// optional string http_host = 8;
bool CMsgClientPICSProductInfoResponse::has_http_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientPICSProductInfoResponse::set_has_http_host() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientPICSProductInfoResponse::clear_has_http_host() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientPICSProductInfoResponse::clear_http_host() {
  http_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_http_host();
}
const ::std::string& CMsgClientPICSProductInfoResponse::http_host() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSProductInfoResponse.http_host)
  return http_host_.GetNoArena();
}
void CMsgClientPICSProductInfoResponse::set_http_host(const ::std::string& value) {
  set_has_http_host();
  http_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSProductInfoResponse.http_host)
}
#if LANG_CXX11
void CMsgClientPICSProductInfoResponse::set_http_host(::std::string&& value) {
  set_has_http_host();
  http_host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientPICSProductInfoResponse.http_host)
}
#endif
void CMsgClientPICSProductInfoResponse::set_http_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_http_host();
  http_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientPICSProductInfoResponse.http_host)
}
void CMsgClientPICSProductInfoResponse::set_http_host(const char* value, size_t size) {
  set_has_http_host();
  http_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientPICSProductInfoResponse.http_host)
}
::std::string* CMsgClientPICSProductInfoResponse::mutable_http_host() {
  set_has_http_host();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPICSProductInfoResponse.http_host)
  return http_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientPICSProductInfoResponse::release_http_host() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientPICSProductInfoResponse.http_host)
  clear_has_http_host();
  return http_host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientPICSProductInfoResponse::set_allocated_http_host(::std::string* http_host) {
  if (http_host != NULL) {
    set_has_http_host();
  } else {
    clear_has_http_host();
  }
  http_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), http_host);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientPICSProductInfoResponse.http_host)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSAccessTokenRequest::kPackageidsFieldNumber;
const int CMsgClientPICSAccessTokenRequest::kAppidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSAccessTokenRequest::CMsgClientPICSAccessTokenRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSAccessTokenRequest)
}
CMsgClientPICSAccessTokenRequest::CMsgClientPICSAccessTokenRequest(const CMsgClientPICSAccessTokenRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      packageids_(from.packageids_),
      appids_(from.appids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSAccessTokenRequest)
}

void CMsgClientPICSAccessTokenRequest::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClientPICSAccessTokenRequest::~CMsgClientPICSAccessTokenRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSAccessTokenRequest)
  SharedDtor();
}

void CMsgClientPICSAccessTokenRequest::SharedDtor() {
}

void CMsgClientPICSAccessTokenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPICSAccessTokenRequest::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientPICSAccessTokenRequest& CMsgClientPICSAccessTokenRequest::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientPICSAccessTokenRequest* CMsgClientPICSAccessTokenRequest::New(::google::protobuf::Arena* arena) const {
  CMsgClientPICSAccessTokenRequest* n = new CMsgClientPICSAccessTokenRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientPICSAccessTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSAccessTokenRequest)
  packageids_.Clear();
  appids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientPICSAccessTokenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSAccessTokenRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 packageids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_packageids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_packageids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 appids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_appids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_appids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSAccessTokenRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSAccessTokenRequest)
  return false;
#undef DO_
}

void CMsgClientPICSAccessTokenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSAccessTokenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 packageids = 1;
  for (int i = 0, n = this->packageids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->packageids(i), output);
  }

  // repeated uint32 appids = 2;
  for (int i = 0, n = this->appids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->appids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSAccessTokenRequest)
}

::google::protobuf::uint8* CMsgClientPICSAccessTokenRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSAccessTokenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 packageids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->packageids_, target);

  // repeated uint32 appids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->appids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSAccessTokenRequest)
  return target;
}

size_t CMsgClientPICSAccessTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSAccessTokenRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 packageids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->packageids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->packageids_size());
    total_size += data_size;
  }

  // repeated uint32 appids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->appids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->appids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPICSAccessTokenRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSAccessTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSAccessTokenRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientPICSAccessTokenRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSAccessTokenRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSAccessTokenRequest)
    MergeFrom(*source);
  }
}

void CMsgClientPICSAccessTokenRequest::MergeFrom(const CMsgClientPICSAccessTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSAccessTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  packageids_.MergeFrom(from.packageids_);
  appids_.MergeFrom(from.appids_);
}

void CMsgClientPICSAccessTokenRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSAccessTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSAccessTokenRequest::CopyFrom(const CMsgClientPICSAccessTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSAccessTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSAccessTokenRequest::IsInitialized() const {
  return true;
}

void CMsgClientPICSAccessTokenRequest::Swap(CMsgClientPICSAccessTokenRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSAccessTokenRequest::InternalSwap(CMsgClientPICSAccessTokenRequest* other) {
  packageids_.InternalSwap(&other->packageids_);
  appids_.InternalSwap(&other->appids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientPICSAccessTokenRequest::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientPICSAccessTokenRequest

// repeated uint32 packageids = 1;
int CMsgClientPICSAccessTokenRequest::packageids_size() const {
  return packageids_.size();
}
void CMsgClientPICSAccessTokenRequest::clear_packageids() {
  packageids_.Clear();
}
::google::protobuf::uint32 CMsgClientPICSAccessTokenRequest::packageids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSAccessTokenRequest.packageids)
  return packageids_.Get(index);
}
void CMsgClientPICSAccessTokenRequest::set_packageids(int index, ::google::protobuf::uint32 value) {
  packageids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSAccessTokenRequest.packageids)
}
void CMsgClientPICSAccessTokenRequest::add_packageids(::google::protobuf::uint32 value) {
  packageids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientPICSAccessTokenRequest.packageids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientPICSAccessTokenRequest::packageids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientPICSAccessTokenRequest.packageids)
  return packageids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientPICSAccessTokenRequest::mutable_packageids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientPICSAccessTokenRequest.packageids)
  return &packageids_;
}

// repeated uint32 appids = 2;
int CMsgClientPICSAccessTokenRequest::appids_size() const {
  return appids_.size();
}
void CMsgClientPICSAccessTokenRequest::clear_appids() {
  appids_.Clear();
}
::google::protobuf::uint32 CMsgClientPICSAccessTokenRequest::appids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSAccessTokenRequest.appids)
  return appids_.Get(index);
}
void CMsgClientPICSAccessTokenRequest::set_appids(int index, ::google::protobuf::uint32 value) {
  appids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSAccessTokenRequest.appids)
}
void CMsgClientPICSAccessTokenRequest::add_appids(::google::protobuf::uint32 value) {
  appids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientPICSAccessTokenRequest.appids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientPICSAccessTokenRequest::appids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientPICSAccessTokenRequest.appids)
  return appids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientPICSAccessTokenRequest::mutable_appids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientPICSAccessTokenRequest.appids)
  return &appids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSAccessTokenResponse_PackageToken::kPackageidFieldNumber;
const int CMsgClientPICSAccessTokenResponse_PackageToken::kAccessTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSAccessTokenResponse_PackageToken::CMsgClientPICSAccessTokenResponse_PackageToken()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
}
CMsgClientPICSAccessTokenResponse_PackageToken::CMsgClientPICSAccessTokenResponse_PackageToken(const CMsgClientPICSAccessTokenResponse_PackageToken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&access_token_, &from.access_token_,
    reinterpret_cast<char*>(&packageid_) -
    reinterpret_cast<char*>(&access_token_) + sizeof(packageid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
}

void CMsgClientPICSAccessTokenResponse_PackageToken::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&access_token_, 0, reinterpret_cast<char*>(&packageid_) -
    reinterpret_cast<char*>(&access_token_) + sizeof(packageid_));
}

CMsgClientPICSAccessTokenResponse_PackageToken::~CMsgClientPICSAccessTokenResponse_PackageToken() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  SharedDtor();
}

void CMsgClientPICSAccessTokenResponse_PackageToken::SharedDtor() {
}

void CMsgClientPICSAccessTokenResponse_PackageToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPICSAccessTokenResponse_PackageToken::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientPICSAccessTokenResponse_PackageToken& CMsgClientPICSAccessTokenResponse_PackageToken::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientPICSAccessTokenResponse_PackageToken* CMsgClientPICSAccessTokenResponse_PackageToken::New(::google::protobuf::Arena* arena) const {
  CMsgClientPICSAccessTokenResponse_PackageToken* n = new CMsgClientPICSAccessTokenResponse_PackageToken;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientPICSAccessTokenResponse_PackageToken::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&access_token_, 0, reinterpret_cast<char*>(&packageid_) -
      reinterpret_cast<char*>(&access_token_) + sizeof(packageid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientPICSAccessTokenResponse_PackageToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 packageid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_packageid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 access_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_access_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &access_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  return false;
#undef DO_
}

void CMsgClientPICSAccessTokenResponse_PackageToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packageid(), output);
  }

  // optional uint64 access_token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->access_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
}

::google::protobuf::uint8* CMsgClientPICSAccessTokenResponse_PackageToken::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->packageid(), target);
  }

  // optional uint64 access_token = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->access_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  return target;
}

size_t CMsgClientPICSAccessTokenResponse_PackageToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 access_token = 2;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->access_token());
    }

    // optional uint32 packageid = 1;
    if (has_packageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packageid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPICSAccessTokenResponse_PackageToken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSAccessTokenResponse_PackageToken* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientPICSAccessTokenResponse_PackageToken>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
    MergeFrom(*source);
  }
}

void CMsgClientPICSAccessTokenResponse_PackageToken::MergeFrom(const CMsgClientPICSAccessTokenResponse_PackageToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      access_token_ = from.access_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      packageid_ = from.packageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSAccessTokenResponse_PackageToken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSAccessTokenResponse_PackageToken::CopyFrom(const CMsgClientPICSAccessTokenResponse_PackageToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSAccessTokenResponse_PackageToken::IsInitialized() const {
  return true;
}

void CMsgClientPICSAccessTokenResponse_PackageToken::Swap(CMsgClientPICSAccessTokenResponse_PackageToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSAccessTokenResponse_PackageToken::InternalSwap(CMsgClientPICSAccessTokenResponse_PackageToken* other) {
  std::swap(access_token_, other->access_token_);
  std::swap(packageid_, other->packageid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientPICSAccessTokenResponse_PackageToken::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientPICSAccessTokenResponse_PackageToken

// optional uint32 packageid = 1;
bool CMsgClientPICSAccessTokenResponse_PackageToken::has_packageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientPICSAccessTokenResponse_PackageToken::set_has_packageid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientPICSAccessTokenResponse_PackageToken::clear_has_packageid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientPICSAccessTokenResponse_PackageToken::clear_packageid() {
  packageid_ = 0u;
  clear_has_packageid();
}
::google::protobuf::uint32 CMsgClientPICSAccessTokenResponse_PackageToken::packageid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken.packageid)
  return packageid_;
}
void CMsgClientPICSAccessTokenResponse_PackageToken::set_packageid(::google::protobuf::uint32 value) {
  set_has_packageid();
  packageid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken.packageid)
}

// optional uint64 access_token = 2;
bool CMsgClientPICSAccessTokenResponse_PackageToken::has_access_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientPICSAccessTokenResponse_PackageToken::set_has_access_token() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientPICSAccessTokenResponse_PackageToken::clear_has_access_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientPICSAccessTokenResponse_PackageToken::clear_access_token() {
  access_token_ = GOOGLE_ULONGLONG(0);
  clear_has_access_token();
}
::google::protobuf::uint64 CMsgClientPICSAccessTokenResponse_PackageToken::access_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken.access_token)
  return access_token_;
}
void CMsgClientPICSAccessTokenResponse_PackageToken::set_access_token(::google::protobuf::uint64 value) {
  set_has_access_token();
  access_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken.access_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSAccessTokenResponse_AppToken::kAppidFieldNumber;
const int CMsgClientPICSAccessTokenResponse_AppToken::kAccessTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSAccessTokenResponse_AppToken::CMsgClientPICSAccessTokenResponse_AppToken()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
}
CMsgClientPICSAccessTokenResponse_AppToken::CMsgClientPICSAccessTokenResponse_AppToken(const CMsgClientPICSAccessTokenResponse_AppToken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&access_token_, &from.access_token_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&access_token_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
}

void CMsgClientPICSAccessTokenResponse_AppToken::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&access_token_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&access_token_) + sizeof(appid_));
}

CMsgClientPICSAccessTokenResponse_AppToken::~CMsgClientPICSAccessTokenResponse_AppToken() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  SharedDtor();
}

void CMsgClientPICSAccessTokenResponse_AppToken::SharedDtor() {
}

void CMsgClientPICSAccessTokenResponse_AppToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPICSAccessTokenResponse_AppToken::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientPICSAccessTokenResponse_AppToken& CMsgClientPICSAccessTokenResponse_AppToken::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientPICSAccessTokenResponse_AppToken* CMsgClientPICSAccessTokenResponse_AppToken::New(::google::protobuf::Arena* arena) const {
  CMsgClientPICSAccessTokenResponse_AppToken* n = new CMsgClientPICSAccessTokenResponse_AppToken;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientPICSAccessTokenResponse_AppToken::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&access_token_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&access_token_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientPICSAccessTokenResponse_AppToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 access_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_access_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &access_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  return false;
#undef DO_
}

void CMsgClientPICSAccessTokenResponse_AppToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 access_token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->access_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
}

::google::protobuf::uint8* CMsgClientPICSAccessTokenResponse_AppToken::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 access_token = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->access_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  return target;
}

size_t CMsgClientPICSAccessTokenResponse_AppToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 access_token = 2;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->access_token());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPICSAccessTokenResponse_AppToken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSAccessTokenResponse_AppToken* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientPICSAccessTokenResponse_AppToken>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
    MergeFrom(*source);
  }
}

void CMsgClientPICSAccessTokenResponse_AppToken::MergeFrom(const CMsgClientPICSAccessTokenResponse_AppToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      access_token_ = from.access_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPICSAccessTokenResponse_AppToken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSAccessTokenResponse_AppToken::CopyFrom(const CMsgClientPICSAccessTokenResponse_AppToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSAccessTokenResponse_AppToken::IsInitialized() const {
  return true;
}

void CMsgClientPICSAccessTokenResponse_AppToken::Swap(CMsgClientPICSAccessTokenResponse_AppToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSAccessTokenResponse_AppToken::InternalSwap(CMsgClientPICSAccessTokenResponse_AppToken* other) {
  std::swap(access_token_, other->access_token_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientPICSAccessTokenResponse_AppToken::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientPICSAccessTokenResponse_AppToken

// optional uint32 appid = 1;
bool CMsgClientPICSAccessTokenResponse_AppToken::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientPICSAccessTokenResponse_AppToken::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientPICSAccessTokenResponse_AppToken::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientPICSAccessTokenResponse_AppToken::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CMsgClientPICSAccessTokenResponse_AppToken::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken.appid)
  return appid_;
}
void CMsgClientPICSAccessTokenResponse_AppToken::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken.appid)
}

// optional uint64 access_token = 2;
bool CMsgClientPICSAccessTokenResponse_AppToken::has_access_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientPICSAccessTokenResponse_AppToken::set_has_access_token() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientPICSAccessTokenResponse_AppToken::clear_has_access_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientPICSAccessTokenResponse_AppToken::clear_access_token() {
  access_token_ = GOOGLE_ULONGLONG(0);
  clear_has_access_token();
}
::google::protobuf::uint64 CMsgClientPICSAccessTokenResponse_AppToken::access_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken.access_token)
  return access_token_;
}
void CMsgClientPICSAccessTokenResponse_AppToken::set_access_token(::google::protobuf::uint64 value) {
  set_has_access_token();
  access_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSAccessTokenResponse.AppToken.access_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPICSAccessTokenResponse::kPackageAccessTokensFieldNumber;
const int CMsgClientPICSAccessTokenResponse::kPackageDeniedTokensFieldNumber;
const int CMsgClientPICSAccessTokenResponse::kAppAccessTokensFieldNumber;
const int CMsgClientPICSAccessTokenResponse::kAppDeniedTokensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPICSAccessTokenResponse::CMsgClientPICSAccessTokenResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPICSAccessTokenResponse)
}
CMsgClientPICSAccessTokenResponse::CMsgClientPICSAccessTokenResponse(const CMsgClientPICSAccessTokenResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      package_access_tokens_(from.package_access_tokens_),
      package_denied_tokens_(from.package_denied_tokens_),
      app_access_tokens_(from.app_access_tokens_),
      app_denied_tokens_(from.app_denied_tokens_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPICSAccessTokenResponse)
}

void CMsgClientPICSAccessTokenResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClientPICSAccessTokenResponse::~CMsgClientPICSAccessTokenResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPICSAccessTokenResponse)
  SharedDtor();
}

void CMsgClientPICSAccessTokenResponse::SharedDtor() {
}

void CMsgClientPICSAccessTokenResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPICSAccessTokenResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientPICSAccessTokenResponse& CMsgClientPICSAccessTokenResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientPICSAccessTokenResponse* CMsgClientPICSAccessTokenResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientPICSAccessTokenResponse* n = new CMsgClientPICSAccessTokenResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientPICSAccessTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPICSAccessTokenResponse)
  package_access_tokens_.Clear();
  package_denied_tokens_.Clear();
  app_access_tokens_.Clear();
  app_denied_tokens_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientPICSAccessTokenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPICSAccessTokenResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken package_access_tokens = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_package_access_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 package_denied_tokens = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_package_denied_tokens())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_package_denied_tokens())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientPICSAccessTokenResponse.AppToken app_access_tokens = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_app_access_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 app_denied_tokens = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_app_denied_tokens())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_app_denied_tokens())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPICSAccessTokenResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPICSAccessTokenResponse)
  return false;
#undef DO_
}

void CMsgClientPICSAccessTokenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPICSAccessTokenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken package_access_tokens = 1;
  for (unsigned int i = 0, n = this->package_access_tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->package_access_tokens(i), output);
  }

  // repeated uint32 package_denied_tokens = 2;
  for (int i = 0, n = this->package_denied_tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->package_denied_tokens(i), output);
  }

  // repeated .proto.steam.CMsgClientPICSAccessTokenResponse.AppToken app_access_tokens = 3;
  for (unsigned int i = 0, n = this->app_access_tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->app_access_tokens(i), output);
  }

  // repeated uint32 app_denied_tokens = 4;
  for (int i = 0, n = this->app_denied_tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->app_denied_tokens(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPICSAccessTokenResponse)
}

::google::protobuf::uint8* CMsgClientPICSAccessTokenResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPICSAccessTokenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken package_access_tokens = 1;
  for (unsigned int i = 0, n = this->package_access_tokens_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->package_access_tokens(i), deterministic, target);
  }

  // repeated uint32 package_denied_tokens = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->package_denied_tokens_, target);

  // repeated .proto.steam.CMsgClientPICSAccessTokenResponse.AppToken app_access_tokens = 3;
  for (unsigned int i = 0, n = this->app_access_tokens_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->app_access_tokens(i), deterministic, target);
  }

  // repeated uint32 app_denied_tokens = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->app_denied_tokens_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPICSAccessTokenResponse)
  return target;
}

size_t CMsgClientPICSAccessTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPICSAccessTokenResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken package_access_tokens = 1;
  {
    unsigned int count = this->package_access_tokens_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->package_access_tokens(i));
    }
  }

  // repeated uint32 package_denied_tokens = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->package_denied_tokens_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->package_denied_tokens_size());
    total_size += data_size;
  }

  // repeated .proto.steam.CMsgClientPICSAccessTokenResponse.AppToken app_access_tokens = 3;
  {
    unsigned int count = this->app_access_tokens_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_access_tokens(i));
    }
  }

  // repeated uint32 app_denied_tokens = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->app_denied_tokens_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->app_denied_tokens_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPICSAccessTokenResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPICSAccessTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPICSAccessTokenResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientPICSAccessTokenResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPICSAccessTokenResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPICSAccessTokenResponse)
    MergeFrom(*source);
  }
}

void CMsgClientPICSAccessTokenResponse::MergeFrom(const CMsgClientPICSAccessTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPICSAccessTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  package_access_tokens_.MergeFrom(from.package_access_tokens_);
  package_denied_tokens_.MergeFrom(from.package_denied_tokens_);
  app_access_tokens_.MergeFrom(from.app_access_tokens_);
  app_denied_tokens_.MergeFrom(from.app_denied_tokens_);
}

void CMsgClientPICSAccessTokenResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPICSAccessTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPICSAccessTokenResponse::CopyFrom(const CMsgClientPICSAccessTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPICSAccessTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSAccessTokenResponse::IsInitialized() const {
  return true;
}

void CMsgClientPICSAccessTokenResponse::Swap(CMsgClientPICSAccessTokenResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPICSAccessTokenResponse::InternalSwap(CMsgClientPICSAccessTokenResponse* other) {
  package_access_tokens_.InternalSwap(&other->package_access_tokens_);
  package_denied_tokens_.InternalSwap(&other->package_denied_tokens_);
  app_access_tokens_.InternalSwap(&other->app_access_tokens_);
  app_denied_tokens_.InternalSwap(&other->app_denied_tokens_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientPICSAccessTokenResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientPICSAccessTokenResponse

// repeated .proto.steam.CMsgClientPICSAccessTokenResponse.PackageToken package_access_tokens = 1;
int CMsgClientPICSAccessTokenResponse::package_access_tokens_size() const {
  return package_access_tokens_.size();
}
void CMsgClientPICSAccessTokenResponse::clear_package_access_tokens() {
  package_access_tokens_.Clear();
}
const ::proto::steam::CMsgClientPICSAccessTokenResponse_PackageToken& CMsgClientPICSAccessTokenResponse::package_access_tokens(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSAccessTokenResponse.package_access_tokens)
  return package_access_tokens_.Get(index);
}
::proto::steam::CMsgClientPICSAccessTokenResponse_PackageToken* CMsgClientPICSAccessTokenResponse::mutable_package_access_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPICSAccessTokenResponse.package_access_tokens)
  return package_access_tokens_.Mutable(index);
}
::proto::steam::CMsgClientPICSAccessTokenResponse_PackageToken* CMsgClientPICSAccessTokenResponse::add_package_access_tokens() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientPICSAccessTokenResponse.package_access_tokens)
  return package_access_tokens_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientPICSAccessTokenResponse_PackageToken >*
CMsgClientPICSAccessTokenResponse::mutable_package_access_tokens() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientPICSAccessTokenResponse.package_access_tokens)
  return &package_access_tokens_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientPICSAccessTokenResponse_PackageToken >&
CMsgClientPICSAccessTokenResponse::package_access_tokens() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientPICSAccessTokenResponse.package_access_tokens)
  return package_access_tokens_;
}

// repeated uint32 package_denied_tokens = 2;
int CMsgClientPICSAccessTokenResponse::package_denied_tokens_size() const {
  return package_denied_tokens_.size();
}
void CMsgClientPICSAccessTokenResponse::clear_package_denied_tokens() {
  package_denied_tokens_.Clear();
}
::google::protobuf::uint32 CMsgClientPICSAccessTokenResponse::package_denied_tokens(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSAccessTokenResponse.package_denied_tokens)
  return package_denied_tokens_.Get(index);
}
void CMsgClientPICSAccessTokenResponse::set_package_denied_tokens(int index, ::google::protobuf::uint32 value) {
  package_denied_tokens_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSAccessTokenResponse.package_denied_tokens)
}
void CMsgClientPICSAccessTokenResponse::add_package_denied_tokens(::google::protobuf::uint32 value) {
  package_denied_tokens_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientPICSAccessTokenResponse.package_denied_tokens)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientPICSAccessTokenResponse::package_denied_tokens() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientPICSAccessTokenResponse.package_denied_tokens)
  return package_denied_tokens_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientPICSAccessTokenResponse::mutable_package_denied_tokens() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientPICSAccessTokenResponse.package_denied_tokens)
  return &package_denied_tokens_;
}

// repeated .proto.steam.CMsgClientPICSAccessTokenResponse.AppToken app_access_tokens = 3;
int CMsgClientPICSAccessTokenResponse::app_access_tokens_size() const {
  return app_access_tokens_.size();
}
void CMsgClientPICSAccessTokenResponse::clear_app_access_tokens() {
  app_access_tokens_.Clear();
}
const ::proto::steam::CMsgClientPICSAccessTokenResponse_AppToken& CMsgClientPICSAccessTokenResponse::app_access_tokens(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSAccessTokenResponse.app_access_tokens)
  return app_access_tokens_.Get(index);
}
::proto::steam::CMsgClientPICSAccessTokenResponse_AppToken* CMsgClientPICSAccessTokenResponse::mutable_app_access_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientPICSAccessTokenResponse.app_access_tokens)
  return app_access_tokens_.Mutable(index);
}
::proto::steam::CMsgClientPICSAccessTokenResponse_AppToken* CMsgClientPICSAccessTokenResponse::add_app_access_tokens() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientPICSAccessTokenResponse.app_access_tokens)
  return app_access_tokens_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientPICSAccessTokenResponse_AppToken >*
CMsgClientPICSAccessTokenResponse::mutable_app_access_tokens() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientPICSAccessTokenResponse.app_access_tokens)
  return &app_access_tokens_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientPICSAccessTokenResponse_AppToken >&
CMsgClientPICSAccessTokenResponse::app_access_tokens() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientPICSAccessTokenResponse.app_access_tokens)
  return app_access_tokens_;
}

// repeated uint32 app_denied_tokens = 4;
int CMsgClientPICSAccessTokenResponse::app_denied_tokens_size() const {
  return app_denied_tokens_.size();
}
void CMsgClientPICSAccessTokenResponse::clear_app_denied_tokens() {
  app_denied_tokens_.Clear();
}
::google::protobuf::uint32 CMsgClientPICSAccessTokenResponse::app_denied_tokens(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientPICSAccessTokenResponse.app_denied_tokens)
  return app_denied_tokens_.Get(index);
}
void CMsgClientPICSAccessTokenResponse::set_app_denied_tokens(int index, ::google::protobuf::uint32 value) {
  app_denied_tokens_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientPICSAccessTokenResponse.app_denied_tokens)
}
void CMsgClientPICSAccessTokenResponse::add_app_denied_tokens(::google::protobuf::uint32 value) {
  app_denied_tokens_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientPICSAccessTokenResponse.app_denied_tokens)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientPICSAccessTokenResponse::app_denied_tokens() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientPICSAccessTokenResponse.app_denied_tokens)
  return app_denied_tokens_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientPICSAccessTokenResponse::mutable_app_denied_tokens() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientPICSAccessTokenResponse.app_denied_tokens)
  return &app_denied_tokens_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSGetUGCDetails::kHcontentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSGetUGCDetails::CMsgClientUFSGetUGCDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSGetUGCDetails)
}
CMsgClientUFSGetUGCDetails::CMsgClientUFSGetUGCDetails(const CMsgClientUFSGetUGCDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hcontent_ = from.hcontent_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSGetUGCDetails)
}

void CMsgClientUFSGetUGCDetails::SharedCtor() {
  _cached_size_ = 0;
  hcontent_ = GOOGLE_ULONGLONG(18446744073709551615);
}

CMsgClientUFSGetUGCDetails::~CMsgClientUFSGetUGCDetails() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSGetUGCDetails)
  SharedDtor();
}

void CMsgClientUFSGetUGCDetails::SharedDtor() {
}

void CMsgClientUFSGetUGCDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSGetUGCDetails::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSGetUGCDetails& CMsgClientUFSGetUGCDetails::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSGetUGCDetails* CMsgClientUFSGetUGCDetails::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSGetUGCDetails* n = new CMsgClientUFSGetUGCDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSGetUGCDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSGetUGCDetails)
  hcontent_ = GOOGLE_ULONGLONG(18446744073709551615);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSGetUGCDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSGetUGCDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 hcontent = 1 [default = 18446744073709551615];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_hcontent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hcontent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSGetUGCDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSGetUGCDetails)
  return false;
#undef DO_
}

void CMsgClientUFSGetUGCDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSGetUGCDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 hcontent = 1 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->hcontent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSGetUGCDetails)
}

::google::protobuf::uint8* CMsgClientUFSGetUGCDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSGetUGCDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 hcontent = 1 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->hcontent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSGetUGCDetails)
  return target;
}

size_t CMsgClientUFSGetUGCDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSGetUGCDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 hcontent = 1 [default = 18446744073709551615];
  if (has_hcontent()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSGetUGCDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSGetUGCDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSGetUGCDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSGetUGCDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSGetUGCDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSGetUGCDetails)
    MergeFrom(*source);
  }
}

void CMsgClientUFSGetUGCDetails::MergeFrom(const CMsgClientUFSGetUGCDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSGetUGCDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hcontent()) {
    set_hcontent(from.hcontent());
  }
}

void CMsgClientUFSGetUGCDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSGetUGCDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSGetUGCDetails::CopyFrom(const CMsgClientUFSGetUGCDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSGetUGCDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetUGCDetails::IsInitialized() const {
  return true;
}

void CMsgClientUFSGetUGCDetails::Swap(CMsgClientUFSGetUGCDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSGetUGCDetails::InternalSwap(CMsgClientUFSGetUGCDetails* other) {
  std::swap(hcontent_, other->hcontent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSGetUGCDetails::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSGetUGCDetails

// optional fixed64 hcontent = 1 [default = 18446744073709551615];
bool CMsgClientUFSGetUGCDetails::has_hcontent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUFSGetUGCDetails::set_has_hcontent() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUFSGetUGCDetails::clear_has_hcontent() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUFSGetUGCDetails::clear_hcontent() {
  hcontent_ = GOOGLE_ULONGLONG(18446744073709551615);
  clear_has_hcontent();
}
::google::protobuf::uint64 CMsgClientUFSGetUGCDetails::hcontent() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetUGCDetails.hcontent)
  return hcontent_;
}
void CMsgClientUFSGetUGCDetails::set_hcontent(::google::protobuf::uint64 value) {
  set_has_hcontent();
  hcontent_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetUGCDetails.hcontent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSGetUGCDetailsResponse::kEresultFieldNumber;
const int CMsgClientUFSGetUGCDetailsResponse::kUrlFieldNumber;
const int CMsgClientUFSGetUGCDetailsResponse::kAppIdFieldNumber;
const int CMsgClientUFSGetUGCDetailsResponse::kFilenameFieldNumber;
const int CMsgClientUFSGetUGCDetailsResponse::kSteamidCreatorFieldNumber;
const int CMsgClientUFSGetUGCDetailsResponse::kFileSizeFieldNumber;
const int CMsgClientUFSGetUGCDetailsResponse::kCompressedFileSizeFieldNumber;
const int CMsgClientUFSGetUGCDetailsResponse::kRangecheckHostFieldNumber;
const int CMsgClientUFSGetUGCDetailsResponse::kFileEncodedSha1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSGetUGCDetailsResponse::CMsgClientUFSGetUGCDetailsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
}
CMsgClientUFSGetUGCDetailsResponse::CMsgClientUFSGetUGCDetailsResponse(const CMsgClientUFSGetUGCDetailsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  rangecheck_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rangecheck_host()) {
    rangecheck_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rangecheck_host_);
  }
  file_encoded_sha1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_encoded_sha1()) {
    file_encoded_sha1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_encoded_sha1_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
}

void CMsgClientUFSGetUGCDetailsResponse::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rangecheck_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_encoded_sha1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&compressed_file_size_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(compressed_file_size_));
  eresult_ = 2;
}

CMsgClientUFSGetUGCDetailsResponse::~CMsgClientUFSGetUGCDetailsResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  SharedDtor();
}

void CMsgClientUFSGetUGCDetailsResponse::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rangecheck_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_encoded_sha1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSGetUGCDetailsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSGetUGCDetailsResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSGetUGCDetailsResponse& CMsgClientUFSGetUGCDetailsResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSGetUGCDetailsResponse* CMsgClientUFSGetUGCDetailsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSGetUGCDetailsResponse* n = new CMsgClientUFSGetUGCDetailsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSGetUGCDetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_filename()) {
      GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filename_.UnsafeRawStringPointer())->clear();
    }
    if (has_rangecheck_host()) {
      GOOGLE_DCHECK(!rangecheck_host_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rangecheck_host_.UnsafeRawStringPointer())->clear();
    }
    if (has_file_encoded_sha1()) {
      GOOGLE_DCHECK(!file_encoded_sha1_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_encoded_sha1_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&compressed_file_size_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(compressed_file_size_));
  }
  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSGetUGCDetailsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSGetUGCDetailsResponse.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSGetUGCDetailsResponse.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid_creator = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_steamid_creator();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_creator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_file_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 compressed_file_size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_compressed_file_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compressed_file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rangecheck_host = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rangecheck_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rangecheck_host().data(), this->rangecheck_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSGetUGCDetailsResponse.rangecheck_host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_encoded_sha1 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_encoded_sha1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_encoded_sha1().data(), this->file_encoded_sha1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  return false;
#undef DO_
}

void CMsgClientUFSGetUGCDetailsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetUGCDetailsResponse.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->app_id(), output);
  }

  // optional string filename = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetUGCDetailsResponse.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filename(), output);
  }

  // optional fixed64 steamid_creator = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->steamid_creator(), output);
  }

  // optional uint32 file_size = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->file_size(), output);
  }

  // optional uint32 compressed_file_size = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->compressed_file_size(), output);
  }

  // optional string rangecheck_host = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rangecheck_host().data(), this->rangecheck_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetUGCDetailsResponse.rangecheck_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->rangecheck_host(), output);
  }

  // optional string file_encoded_sha1 = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_encoded_sha1().data(), this->file_encoded_sha1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->file_encoded_sha1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
}

::google::protobuf::uint8* CMsgClientUFSGetUGCDetailsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetUGCDetailsResponse.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->app_id(), target);
  }

  // optional string filename = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetUGCDetailsResponse.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filename(), target);
  }

  // optional fixed64 steamid_creator = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->steamid_creator(), target);
  }

  // optional uint32 file_size = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->file_size(), target);
  }

  // optional uint32 compressed_file_size = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->compressed_file_size(), target);
  }

  // optional string rangecheck_host = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rangecheck_host().data(), this->rangecheck_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetUGCDetailsResponse.rangecheck_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->rangecheck_host(), target);
  }

  // optional string file_encoded_sha1 = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_encoded_sha1().data(), this->file_encoded_sha1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->file_encoded_sha1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  return target;
}

size_t CMsgClientUFSGetUGCDetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string filename = 4;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string rangecheck_host = 8;
    if (has_rangecheck_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rangecheck_host());
    }

    // optional string file_encoded_sha1 = 9;
    if (has_file_encoded_sha1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_encoded_sha1());
    }

    // optional uint32 app_id = 3;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 file_size = 6;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional fixed64 steamid_creator = 5;
    if (has_steamid_creator()) {
      total_size += 1 + 8;
    }

    // optional uint32 compressed_file_size = 7;
    if (has_compressed_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compressed_file_size());
    }

  }
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSGetUGCDetailsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSGetUGCDetailsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSGetUGCDetailsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSGetUGCDetailsResponse::MergeFrom(const CMsgClientUFSGetUGCDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_rangecheck_host();
      rangecheck_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rangecheck_host_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_file_encoded_sha1();
      file_encoded_sha1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_encoded_sha1_);
    }
    if (cached_has_bits & 0x00000010u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      steamid_creator_ = from.steamid_creator_;
    }
    if (cached_has_bits & 0x00000080u) {
      compressed_file_size_ = from.compressed_file_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_eresult(from.eresult());
  }
}

void CMsgClientUFSGetUGCDetailsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSGetUGCDetailsResponse::CopyFrom(const CMsgClientUFSGetUGCDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSGetUGCDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetUGCDetailsResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSGetUGCDetailsResponse::Swap(CMsgClientUFSGetUGCDetailsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSGetUGCDetailsResponse::InternalSwap(CMsgClientUFSGetUGCDetailsResponse* other) {
  url_.Swap(&other->url_);
  filename_.Swap(&other->filename_);
  rangecheck_host_.Swap(&other->rangecheck_host_);
  file_encoded_sha1_.Swap(&other->file_encoded_sha1_);
  std::swap(app_id_, other->app_id_);
  std::swap(file_size_, other->file_size_);
  std::swap(steamid_creator_, other->steamid_creator_);
  std::swap(compressed_file_size_, other->compressed_file_size_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSGetUGCDetailsResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSGetUGCDetailsResponse

// optional int32 eresult = 1 [default = 2];
bool CMsgClientUFSGetUGCDetailsResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgClientUFSGetUGCDetailsResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgClientUFSGetUGCDetailsResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgClientUFSGetUGCDetailsResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientUFSGetUGCDetailsResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetUGCDetailsResponse.eresult)
  return eresult_;
}
void CMsgClientUFSGetUGCDetailsResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetUGCDetailsResponse.eresult)
}

// optional string url = 2;
bool CMsgClientUFSGetUGCDetailsResponse::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUFSGetUGCDetailsResponse::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUFSGetUGCDetailsResponse::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUFSGetUGCDetailsResponse::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CMsgClientUFSGetUGCDetailsResponse::url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetUGCDetailsResponse.url)
  return url_.GetNoArena();
}
void CMsgClientUFSGetUGCDetailsResponse::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetUGCDetailsResponse.url)
}
#if LANG_CXX11
void CMsgClientUFSGetUGCDetailsResponse::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSGetUGCDetailsResponse.url)
}
#endif
void CMsgClientUFSGetUGCDetailsResponse::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSGetUGCDetailsResponse.url)
}
void CMsgClientUFSGetUGCDetailsResponse::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSGetUGCDetailsResponse.url)
}
::std::string* CMsgClientUFSGetUGCDetailsResponse::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSGetUGCDetailsResponse.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSGetUGCDetailsResponse::release_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSGetUGCDetailsResponse.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSGetUGCDetailsResponse::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSGetUGCDetailsResponse.url)
}

// optional uint32 app_id = 3;
bool CMsgClientUFSGetUGCDetailsResponse::has_app_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientUFSGetUGCDetailsResponse::set_has_app_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientUFSGetUGCDetailsResponse::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientUFSGetUGCDetailsResponse::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientUFSGetUGCDetailsResponse::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetUGCDetailsResponse.app_id)
  return app_id_;
}
void CMsgClientUFSGetUGCDetailsResponse::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetUGCDetailsResponse.app_id)
}

// optional string filename = 4;
bool CMsgClientUFSGetUGCDetailsResponse::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientUFSGetUGCDetailsResponse::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientUFSGetUGCDetailsResponse::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientUFSGetUGCDetailsResponse::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& CMsgClientUFSGetUGCDetailsResponse::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetUGCDetailsResponse.filename)
  return filename_.GetNoArena();
}
void CMsgClientUFSGetUGCDetailsResponse::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetUGCDetailsResponse.filename)
}
#if LANG_CXX11
void CMsgClientUFSGetUGCDetailsResponse::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSGetUGCDetailsResponse.filename)
}
#endif
void CMsgClientUFSGetUGCDetailsResponse::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSGetUGCDetailsResponse.filename)
}
void CMsgClientUFSGetUGCDetailsResponse::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSGetUGCDetailsResponse.filename)
}
::std::string* CMsgClientUFSGetUGCDetailsResponse::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSGetUGCDetailsResponse.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSGetUGCDetailsResponse::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSGetUGCDetailsResponse.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSGetUGCDetailsResponse::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSGetUGCDetailsResponse.filename)
}

// optional fixed64 steamid_creator = 5;
bool CMsgClientUFSGetUGCDetailsResponse::has_steamid_creator() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientUFSGetUGCDetailsResponse::set_has_steamid_creator() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientUFSGetUGCDetailsResponse::clear_has_steamid_creator() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientUFSGetUGCDetailsResponse::clear_steamid_creator() {
  steamid_creator_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_creator();
}
::google::protobuf::uint64 CMsgClientUFSGetUGCDetailsResponse::steamid_creator() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetUGCDetailsResponse.steamid_creator)
  return steamid_creator_;
}
void CMsgClientUFSGetUGCDetailsResponse::set_steamid_creator(::google::protobuf::uint64 value) {
  set_has_steamid_creator();
  steamid_creator_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetUGCDetailsResponse.steamid_creator)
}

// optional uint32 file_size = 6;
bool CMsgClientUFSGetUGCDetailsResponse::has_file_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientUFSGetUGCDetailsResponse::set_has_file_size() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientUFSGetUGCDetailsResponse::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientUFSGetUGCDetailsResponse::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
::google::protobuf::uint32 CMsgClientUFSGetUGCDetailsResponse::file_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetUGCDetailsResponse.file_size)
  return file_size_;
}
void CMsgClientUFSGetUGCDetailsResponse::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetUGCDetailsResponse.file_size)
}

// optional uint32 compressed_file_size = 7;
bool CMsgClientUFSGetUGCDetailsResponse::has_compressed_file_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgClientUFSGetUGCDetailsResponse::set_has_compressed_file_size() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgClientUFSGetUGCDetailsResponse::clear_has_compressed_file_size() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgClientUFSGetUGCDetailsResponse::clear_compressed_file_size() {
  compressed_file_size_ = 0u;
  clear_has_compressed_file_size();
}
::google::protobuf::uint32 CMsgClientUFSGetUGCDetailsResponse::compressed_file_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetUGCDetailsResponse.compressed_file_size)
  return compressed_file_size_;
}
void CMsgClientUFSGetUGCDetailsResponse::set_compressed_file_size(::google::protobuf::uint32 value) {
  set_has_compressed_file_size();
  compressed_file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetUGCDetailsResponse.compressed_file_size)
}

// optional string rangecheck_host = 8;
bool CMsgClientUFSGetUGCDetailsResponse::has_rangecheck_host() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientUFSGetUGCDetailsResponse::set_has_rangecheck_host() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientUFSGetUGCDetailsResponse::clear_has_rangecheck_host() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientUFSGetUGCDetailsResponse::clear_rangecheck_host() {
  rangecheck_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rangecheck_host();
}
const ::std::string& CMsgClientUFSGetUGCDetailsResponse::rangecheck_host() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetUGCDetailsResponse.rangecheck_host)
  return rangecheck_host_.GetNoArena();
}
void CMsgClientUFSGetUGCDetailsResponse::set_rangecheck_host(const ::std::string& value) {
  set_has_rangecheck_host();
  rangecheck_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetUGCDetailsResponse.rangecheck_host)
}
#if LANG_CXX11
void CMsgClientUFSGetUGCDetailsResponse::set_rangecheck_host(::std::string&& value) {
  set_has_rangecheck_host();
  rangecheck_host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSGetUGCDetailsResponse.rangecheck_host)
}
#endif
void CMsgClientUFSGetUGCDetailsResponse::set_rangecheck_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rangecheck_host();
  rangecheck_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSGetUGCDetailsResponse.rangecheck_host)
}
void CMsgClientUFSGetUGCDetailsResponse::set_rangecheck_host(const char* value, size_t size) {
  set_has_rangecheck_host();
  rangecheck_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSGetUGCDetailsResponse.rangecheck_host)
}
::std::string* CMsgClientUFSGetUGCDetailsResponse::mutable_rangecheck_host() {
  set_has_rangecheck_host();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSGetUGCDetailsResponse.rangecheck_host)
  return rangecheck_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSGetUGCDetailsResponse::release_rangecheck_host() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSGetUGCDetailsResponse.rangecheck_host)
  clear_has_rangecheck_host();
  return rangecheck_host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSGetUGCDetailsResponse::set_allocated_rangecheck_host(::std::string* rangecheck_host) {
  if (rangecheck_host != NULL) {
    set_has_rangecheck_host();
  } else {
    clear_has_rangecheck_host();
  }
  rangecheck_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rangecheck_host);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSGetUGCDetailsResponse.rangecheck_host)
}

// optional string file_encoded_sha1 = 9;
bool CMsgClientUFSGetUGCDetailsResponse::has_file_encoded_sha1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientUFSGetUGCDetailsResponse::set_has_file_encoded_sha1() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientUFSGetUGCDetailsResponse::clear_has_file_encoded_sha1() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientUFSGetUGCDetailsResponse::clear_file_encoded_sha1() {
  file_encoded_sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_encoded_sha1();
}
const ::std::string& CMsgClientUFSGetUGCDetailsResponse::file_encoded_sha1() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1)
  return file_encoded_sha1_.GetNoArena();
}
void CMsgClientUFSGetUGCDetailsResponse::set_file_encoded_sha1(const ::std::string& value) {
  set_has_file_encoded_sha1();
  file_encoded_sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1)
}
#if LANG_CXX11
void CMsgClientUFSGetUGCDetailsResponse::set_file_encoded_sha1(::std::string&& value) {
  set_has_file_encoded_sha1();
  file_encoded_sha1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1)
}
#endif
void CMsgClientUFSGetUGCDetailsResponse::set_file_encoded_sha1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_encoded_sha1();
  file_encoded_sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1)
}
void CMsgClientUFSGetUGCDetailsResponse::set_file_encoded_sha1(const char* value, size_t size) {
  set_has_file_encoded_sha1();
  file_encoded_sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1)
}
::std::string* CMsgClientUFSGetUGCDetailsResponse::mutable_file_encoded_sha1() {
  set_has_file_encoded_sha1();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1)
  return file_encoded_sha1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSGetUGCDetailsResponse::release_file_encoded_sha1() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1)
  clear_has_file_encoded_sha1();
  return file_encoded_sha1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSGetUGCDetailsResponse::set_allocated_file_encoded_sha1(::std::string* file_encoded_sha1) {
  if (file_encoded_sha1 != NULL) {
    set_has_file_encoded_sha1();
  } else {
    clear_has_file_encoded_sha1();
  }
  file_encoded_sha1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_encoded_sha1);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSGetSingleFileInfo::kAppIdFieldNumber;
const int CMsgClientUFSGetSingleFileInfo::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSGetSingleFileInfo::CMsgClientUFSGetSingleFileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSGetSingleFileInfo)
}
CMsgClientUFSGetSingleFileInfo::CMsgClientUFSGetSingleFileInfo(const CMsgClientUFSGetSingleFileInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSGetSingleFileInfo)
}

void CMsgClientUFSGetSingleFileInfo::SharedCtor() {
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0u;
}

CMsgClientUFSGetSingleFileInfo::~CMsgClientUFSGetSingleFileInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSGetSingleFileInfo)
  SharedDtor();
}

void CMsgClientUFSGetSingleFileInfo::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSGetSingleFileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSGetSingleFileInfo::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSGetSingleFileInfo& CMsgClientUFSGetSingleFileInfo::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSGetSingleFileInfo* CMsgClientUFSGetSingleFileInfo::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSGetSingleFileInfo* n = new CMsgClientUFSGetSingleFileInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSGetSingleFileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSGetSingleFileInfo)
  if (has_file_name()) {
    GOOGLE_DCHECK(!file_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*file_name_.UnsafeRawStringPointer())->clear();
  }
  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSGetSingleFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSGetSingleFileInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSGetSingleFileInfo.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSGetSingleFileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSGetSingleFileInfo)
  return false;
#undef DO_
}

void CMsgClientUFSGetSingleFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSGetSingleFileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetSingleFileInfo.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSGetSingleFileInfo)
}

::google::protobuf::uint8* CMsgClientUFSGetSingleFileInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSGetSingleFileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetSingleFileInfo.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSGetSingleFileInfo)
  return target;
}

size_t CMsgClientUFSGetSingleFileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSGetSingleFileInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSGetSingleFileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSGetSingleFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSGetSingleFileInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSGetSingleFileInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSGetSingleFileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSGetSingleFileInfo)
    MergeFrom(*source);
  }
}

void CMsgClientUFSGetSingleFileInfo::MergeFrom(const CMsgClientUFSGetSingleFileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSGetSingleFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSGetSingleFileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSGetSingleFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSGetSingleFileInfo::CopyFrom(const CMsgClientUFSGetSingleFileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSGetSingleFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetSingleFileInfo::IsInitialized() const {
  return true;
}

void CMsgClientUFSGetSingleFileInfo::Swap(CMsgClientUFSGetSingleFileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSGetSingleFileInfo::InternalSwap(CMsgClientUFSGetSingleFileInfo* other) {
  file_name_.Swap(&other->file_name_);
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSGetSingleFileInfo::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSGetSingleFileInfo

// optional uint32 app_id = 1;
bool CMsgClientUFSGetSingleFileInfo::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientUFSGetSingleFileInfo::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientUFSGetSingleFileInfo::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientUFSGetSingleFileInfo::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientUFSGetSingleFileInfo::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetSingleFileInfo.app_id)
  return app_id_;
}
void CMsgClientUFSGetSingleFileInfo::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetSingleFileInfo.app_id)
}

// optional string file_name = 2;
bool CMsgClientUFSGetSingleFileInfo::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUFSGetSingleFileInfo::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUFSGetSingleFileInfo::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUFSGetSingleFileInfo::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
const ::std::string& CMsgClientUFSGetSingleFileInfo::file_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetSingleFileInfo.file_name)
  return file_name_.GetNoArena();
}
void CMsgClientUFSGetSingleFileInfo::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetSingleFileInfo.file_name)
}
#if LANG_CXX11
void CMsgClientUFSGetSingleFileInfo::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSGetSingleFileInfo.file_name)
}
#endif
void CMsgClientUFSGetSingleFileInfo::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSGetSingleFileInfo.file_name)
}
void CMsgClientUFSGetSingleFileInfo::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSGetSingleFileInfo.file_name)
}
::std::string* CMsgClientUFSGetSingleFileInfo::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSGetSingleFileInfo.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSGetSingleFileInfo::release_file_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSGetSingleFileInfo.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSGetSingleFileInfo::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSGetSingleFileInfo.file_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSGetSingleFileInfoResponse::kEresultFieldNumber;
const int CMsgClientUFSGetSingleFileInfoResponse::kAppIdFieldNumber;
const int CMsgClientUFSGetSingleFileInfoResponse::kFileNameFieldNumber;
const int CMsgClientUFSGetSingleFileInfoResponse::kShaFileFieldNumber;
const int CMsgClientUFSGetSingleFileInfoResponse::kTimeStampFieldNumber;
const int CMsgClientUFSGetSingleFileInfoResponse::kRawFileSizeFieldNumber;
const int CMsgClientUFSGetSingleFileInfoResponse::kIsExplicitDeleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSGetSingleFileInfoResponse::CMsgClientUFSGetSingleFileInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
}
CMsgClientUFSGetSingleFileInfoResponse::CMsgClientUFSGetSingleFileInfoResponse(const CMsgClientUFSGetSingleFileInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_file()) {
    sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
}

void CMsgClientUFSGetSingleFileInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&is_explicit_delete_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(is_explicit_delete_));
  eresult_ = 2;
}

CMsgClientUFSGetSingleFileInfoResponse::~CMsgClientUFSGetSingleFileInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  SharedDtor();
}

void CMsgClientUFSGetSingleFileInfoResponse::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSGetSingleFileInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSGetSingleFileInfoResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSGetSingleFileInfoResponse& CMsgClientUFSGetSingleFileInfoResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSGetSingleFileInfoResponse* CMsgClientUFSGetSingleFileInfoResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSGetSingleFileInfoResponse* n = new CMsgClientUFSGetSingleFileInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSGetSingleFileInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_file_name()) {
      GOOGLE_DCHECK(!file_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_sha_file()) {
      GOOGLE_DCHECK(!sha_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sha_file_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&is_explicit_delete_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(is_explicit_delete_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSGetSingleFileInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSGetSingleFileInfoResponse.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_file = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 time_stamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_time_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_file_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_raw_file_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_explicit_delete = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_is_explicit_delete();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_explicit_delete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  return false;
#undef DO_
}

void CMsgClientUFSGetSingleFileInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional string file_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetSingleFileInfoResponse.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_name(), output);
  }

  // optional bytes sha_file = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->sha_file(), output);
  }

  // optional uint64 time_stamp = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time_stamp(), output);
  }

  // optional uint32 raw_file_size = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->raw_file_size(), output);
  }

  // optional bool is_explicit_delete = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_explicit_delete(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
}

::google::protobuf::uint8* CMsgClientUFSGetSingleFileInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_id(), target);
  }

  // optional string file_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSGetSingleFileInfoResponse.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_name(), target);
  }

  // optional bytes sha_file = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sha_file(), target);
  }

  // optional uint64 time_stamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->time_stamp(), target);
  }

  // optional uint32 raw_file_size = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->raw_file_size(), target);
  }

  // optional bool is_explicit_delete = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_explicit_delete(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  return target;
}

size_t CMsgClientUFSGetSingleFileInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string file_name = 3;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional bytes sha_file = 4;
    if (has_sha_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 raw_file_size = 6;
    if (has_raw_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_file_size());
    }

    // optional uint64 time_stamp = 5;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_stamp());
    }

    // optional bool is_explicit_delete = 7;
    if (has_is_explicit_delete()) {
      total_size += 1 + 1;
    }

    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSGetSingleFileInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSGetSingleFileInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSGetSingleFileInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSGetSingleFileInfoResponse::MergeFrom(const CMsgClientUFSGetSingleFileInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sha_file();
      sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      raw_file_size_ = from.raw_file_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_explicit_delete_ = from.is_explicit_delete_;
    }
    if (cached_has_bits & 0x00000040u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSGetSingleFileInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSGetSingleFileInfoResponse::CopyFrom(const CMsgClientUFSGetSingleFileInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSGetSingleFileInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetSingleFileInfoResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSGetSingleFileInfoResponse::Swap(CMsgClientUFSGetSingleFileInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSGetSingleFileInfoResponse::InternalSwap(CMsgClientUFSGetSingleFileInfoResponse* other) {
  file_name_.Swap(&other->file_name_);
  sha_file_.Swap(&other->sha_file_);
  std::swap(app_id_, other->app_id_);
  std::swap(raw_file_size_, other->raw_file_size_);
  std::swap(time_stamp_, other->time_stamp_);
  std::swap(is_explicit_delete_, other->is_explicit_delete_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSGetSingleFileInfoResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSGetSingleFileInfoResponse

// optional int32 eresult = 1 [default = 2];
bool CMsgClientUFSGetSingleFileInfoResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientUFSGetSingleFileInfoResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientUFSGetSingleFileInfoResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientUFSGetSingleFileInfoResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientUFSGetSingleFileInfoResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.eresult)
  return eresult_;
}
void CMsgClientUFSGetSingleFileInfoResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.eresult)
}

// optional uint32 app_id = 2;
bool CMsgClientUFSGetSingleFileInfoResponse::has_app_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientUFSGetSingleFileInfoResponse::set_has_app_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientUFSGetSingleFileInfoResponse::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientUFSGetSingleFileInfoResponse::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientUFSGetSingleFileInfoResponse::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.app_id)
  return app_id_;
}
void CMsgClientUFSGetSingleFileInfoResponse::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.app_id)
}

// optional string file_name = 3;
bool CMsgClientUFSGetSingleFileInfoResponse::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUFSGetSingleFileInfoResponse::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUFSGetSingleFileInfoResponse::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUFSGetSingleFileInfoResponse::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
const ::std::string& CMsgClientUFSGetSingleFileInfoResponse::file_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.file_name)
  return file_name_.GetNoArena();
}
void CMsgClientUFSGetSingleFileInfoResponse::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.file_name)
}
#if LANG_CXX11
void CMsgClientUFSGetSingleFileInfoResponse::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.file_name)
}
#endif
void CMsgClientUFSGetSingleFileInfoResponse::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.file_name)
}
void CMsgClientUFSGetSingleFileInfoResponse::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.file_name)
}
::std::string* CMsgClientUFSGetSingleFileInfoResponse::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSGetSingleFileInfoResponse::release_file_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSGetSingleFileInfoResponse::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.file_name)
}

// optional bytes sha_file = 4;
bool CMsgClientUFSGetSingleFileInfoResponse::has_sha_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientUFSGetSingleFileInfoResponse::set_has_sha_file() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientUFSGetSingleFileInfoResponse::clear_has_sha_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientUFSGetSingleFileInfoResponse::clear_sha_file() {
  sha_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha_file();
}
const ::std::string& CMsgClientUFSGetSingleFileInfoResponse::sha_file() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.sha_file)
  return sha_file_.GetNoArena();
}
void CMsgClientUFSGetSingleFileInfoResponse::set_sha_file(const ::std::string& value) {
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.sha_file)
}
#if LANG_CXX11
void CMsgClientUFSGetSingleFileInfoResponse::set_sha_file(::std::string&& value) {
  set_has_sha_file();
  sha_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.sha_file)
}
#endif
void CMsgClientUFSGetSingleFileInfoResponse::set_sha_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.sha_file)
}
void CMsgClientUFSGetSingleFileInfoResponse::set_sha_file(const void* value, size_t size) {
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.sha_file)
}
::std::string* CMsgClientUFSGetSingleFileInfoResponse::mutable_sha_file() {
  set_has_sha_file();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.sha_file)
  return sha_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSGetSingleFileInfoResponse::release_sha_file() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.sha_file)
  clear_has_sha_file();
  return sha_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSGetSingleFileInfoResponse::set_allocated_sha_file(::std::string* sha_file) {
  if (sha_file != NULL) {
    set_has_sha_file();
  } else {
    clear_has_sha_file();
  }
  sha_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha_file);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.sha_file)
}

// optional uint64 time_stamp = 5;
bool CMsgClientUFSGetSingleFileInfoResponse::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientUFSGetSingleFileInfoResponse::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientUFSGetSingleFileInfoResponse::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientUFSGetSingleFileInfoResponse::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_time_stamp();
}
::google::protobuf::uint64 CMsgClientUFSGetSingleFileInfoResponse::time_stamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.time_stamp)
  return time_stamp_;
}
void CMsgClientUFSGetSingleFileInfoResponse::set_time_stamp(::google::protobuf::uint64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.time_stamp)
}

// optional uint32 raw_file_size = 6;
bool CMsgClientUFSGetSingleFileInfoResponse::has_raw_file_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientUFSGetSingleFileInfoResponse::set_has_raw_file_size() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientUFSGetSingleFileInfoResponse::clear_has_raw_file_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientUFSGetSingleFileInfoResponse::clear_raw_file_size() {
  raw_file_size_ = 0u;
  clear_has_raw_file_size();
}
::google::protobuf::uint32 CMsgClientUFSGetSingleFileInfoResponse::raw_file_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.raw_file_size)
  return raw_file_size_;
}
void CMsgClientUFSGetSingleFileInfoResponse::set_raw_file_size(::google::protobuf::uint32 value) {
  set_has_raw_file_size();
  raw_file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.raw_file_size)
}

// optional bool is_explicit_delete = 7;
bool CMsgClientUFSGetSingleFileInfoResponse::has_is_explicit_delete() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientUFSGetSingleFileInfoResponse::set_has_is_explicit_delete() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientUFSGetSingleFileInfoResponse::clear_has_is_explicit_delete() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientUFSGetSingleFileInfoResponse::clear_is_explicit_delete() {
  is_explicit_delete_ = false;
  clear_has_is_explicit_delete();
}
bool CMsgClientUFSGetSingleFileInfoResponse::is_explicit_delete() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.is_explicit_delete)
  return is_explicit_delete_;
}
void CMsgClientUFSGetSingleFileInfoResponse::set_is_explicit_delete(bool value) {
  set_has_is_explicit_delete();
  is_explicit_delete_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSGetSingleFileInfoResponse.is_explicit_delete)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSShareFile::kAppIdFieldNumber;
const int CMsgClientUFSShareFile::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSShareFile::CMsgClientUFSShareFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSShareFile)
}
CMsgClientUFSShareFile::CMsgClientUFSShareFile(const CMsgClientUFSShareFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSShareFile)
}

void CMsgClientUFSShareFile::SharedCtor() {
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0u;
}

CMsgClientUFSShareFile::~CMsgClientUFSShareFile() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSShareFile)
  SharedDtor();
}

void CMsgClientUFSShareFile::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSShareFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSShareFile::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSShareFile& CMsgClientUFSShareFile::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSShareFile* CMsgClientUFSShareFile::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSShareFile* n = new CMsgClientUFSShareFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSShareFile::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSShareFile)
  if (has_file_name()) {
    GOOGLE_DCHECK(!file_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*file_name_.UnsafeRawStringPointer())->clear();
  }
  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSShareFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSShareFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientUFSShareFile.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSShareFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSShareFile)
  return false;
#undef DO_
}

void CMsgClientUFSShareFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSShareFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSShareFile.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSShareFile)
}

::google::protobuf::uint8* CMsgClientUFSShareFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSShareFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientUFSShareFile.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSShareFile)
  return target;
}

size_t CMsgClientUFSShareFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSShareFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSShareFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSShareFile)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSShareFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSShareFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSShareFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSShareFile)
    MergeFrom(*source);
  }
}

void CMsgClientUFSShareFile::MergeFrom(const CMsgClientUFSShareFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSShareFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSShareFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSShareFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSShareFile::CopyFrom(const CMsgClientUFSShareFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSShareFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSShareFile::IsInitialized() const {
  return true;
}

void CMsgClientUFSShareFile::Swap(CMsgClientUFSShareFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSShareFile::InternalSwap(CMsgClientUFSShareFile* other) {
  file_name_.Swap(&other->file_name_);
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSShareFile::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSShareFile

// optional uint32 app_id = 1;
bool CMsgClientUFSShareFile::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientUFSShareFile::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientUFSShareFile::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientUFSShareFile::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientUFSShareFile::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSShareFile.app_id)
  return app_id_;
}
void CMsgClientUFSShareFile::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSShareFile.app_id)
}

// optional string file_name = 2;
bool CMsgClientUFSShareFile::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUFSShareFile::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUFSShareFile::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUFSShareFile::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
const ::std::string& CMsgClientUFSShareFile::file_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSShareFile.file_name)
  return file_name_.GetNoArena();
}
void CMsgClientUFSShareFile::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSShareFile.file_name)
}
#if LANG_CXX11
void CMsgClientUFSShareFile::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientUFSShareFile.file_name)
}
#endif
void CMsgClientUFSShareFile::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientUFSShareFile.file_name)
}
void CMsgClientUFSShareFile::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientUFSShareFile.file_name)
}
::std::string* CMsgClientUFSShareFile::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientUFSShareFile.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientUFSShareFile::release_file_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientUFSShareFile.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientUFSShareFile::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientUFSShareFile.file_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientUFSShareFileResponse::kEresultFieldNumber;
const int CMsgClientUFSShareFileResponse::kHcontentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientUFSShareFileResponse::CMsgClientUFSShareFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientUFSShareFileResponse)
}
CMsgClientUFSShareFileResponse::CMsgClientUFSShareFileResponse(const CMsgClientUFSShareFileResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eresult_, &from.eresult_,
    reinterpret_cast<char*>(&hcontent_) -
    reinterpret_cast<char*>(&eresult_) + sizeof(hcontent_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientUFSShareFileResponse)
}

void CMsgClientUFSShareFileResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  hcontent_ = GOOGLE_ULONGLONG(18446744073709551615);
}

CMsgClientUFSShareFileResponse::~CMsgClientUFSShareFileResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientUFSShareFileResponse)
  SharedDtor();
}

void CMsgClientUFSShareFileResponse::SharedDtor() {
}

void CMsgClientUFSShareFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUFSShareFileResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientUFSShareFileResponse& CMsgClientUFSShareFileResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientUFSShareFileResponse* CMsgClientUFSShareFileResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientUFSShareFileResponse* n = new CMsgClientUFSShareFileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientUFSShareFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientUFSShareFileResponse)
  if (_has_bits_[0 / 32] & 3u) {
    eresult_ = 2;
    hcontent_ = GOOGLE_ULONGLONG(18446744073709551615);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientUFSShareFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientUFSShareFileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 hcontent = 2 [default = 18446744073709551615];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_hcontent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hcontent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientUFSShareFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientUFSShareFileResponse)
  return false;
#undef DO_
}

void CMsgClientUFSShareFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientUFSShareFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed64 hcontent = 2 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->hcontent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientUFSShareFileResponse)
}

::google::protobuf::uint8* CMsgClientUFSShareFileResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientUFSShareFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional fixed64 hcontent = 2 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->hcontent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientUFSShareFileResponse)
  return target;
}

size_t CMsgClientUFSShareFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientUFSShareFileResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional fixed64 hcontent = 2 [default = 18446744073709551615];
    if (has_hcontent()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSShareFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientUFSShareFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSShareFileResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientUFSShareFileResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientUFSShareFileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientUFSShareFileResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSShareFileResponse::MergeFrom(const CMsgClientUFSShareFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientUFSShareFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      eresult_ = from.eresult_;
    }
    if (cached_has_bits & 0x00000002u) {
      hcontent_ = from.hcontent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSShareFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientUFSShareFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSShareFileResponse::CopyFrom(const CMsgClientUFSShareFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientUFSShareFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSShareFileResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSShareFileResponse::Swap(CMsgClientUFSShareFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientUFSShareFileResponse::InternalSwap(CMsgClientUFSShareFileResponse* other) {
  std::swap(eresult_, other->eresult_);
  std::swap(hcontent_, other->hcontent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientUFSShareFileResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientUFSShareFileResponse

// optional int32 eresult = 1 [default = 2];
bool CMsgClientUFSShareFileResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientUFSShareFileResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientUFSShareFileResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientUFSShareFileResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientUFSShareFileResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSShareFileResponse.eresult)
  return eresult_;
}
void CMsgClientUFSShareFileResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSShareFileResponse.eresult)
}

// optional fixed64 hcontent = 2 [default = 18446744073709551615];
bool CMsgClientUFSShareFileResponse::has_hcontent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientUFSShareFileResponse::set_has_hcontent() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientUFSShareFileResponse::clear_has_hcontent() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientUFSShareFileResponse::clear_hcontent() {
  hcontent_ = GOOGLE_ULONGLONG(18446744073709551615);
  clear_has_hcontent();
}
::google::protobuf::uint64 CMsgClientUFSShareFileResponse::hcontent() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientUFSShareFileResponse.hcontent)
  return hcontent_;
}
void CMsgClientUFSShareFileResponse::set_hcontent(::google::protobuf::uint64 value) {
  set_has_hcontent();
  hcontent_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientUFSShareFileResponse.hcontent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAMGetClanOfficers::kSteamidClanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAMGetClanOfficers::CMsgClientAMGetClanOfficers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAMGetClanOfficers)
}
CMsgClientAMGetClanOfficers::CMsgClientAMGetClanOfficers(const CMsgClientAMGetClanOfficers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_clan_ = from.steamid_clan_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAMGetClanOfficers)
}

void CMsgClientAMGetClanOfficers::SharedCtor() {
  _cached_size_ = 0;
  steamid_clan_ = GOOGLE_ULONGLONG(0);
}

CMsgClientAMGetClanOfficers::~CMsgClientAMGetClanOfficers() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAMGetClanOfficers)
  SharedDtor();
}

void CMsgClientAMGetClanOfficers::SharedDtor() {
}

void CMsgClientAMGetClanOfficers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAMGetClanOfficers::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientAMGetClanOfficers& CMsgClientAMGetClanOfficers::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientAMGetClanOfficers* CMsgClientAMGetClanOfficers::New(::google::protobuf::Arena* arena) const {
  CMsgClientAMGetClanOfficers* n = new CMsgClientAMGetClanOfficers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientAMGetClanOfficers::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAMGetClanOfficers)
  steamid_clan_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientAMGetClanOfficers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAMGetClanOfficers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_clan = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid_clan();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_clan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAMGetClanOfficers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAMGetClanOfficers)
  return false;
#undef DO_
}

void CMsgClientAMGetClanOfficers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAMGetClanOfficers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_clan = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_clan(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAMGetClanOfficers)
}

::google::protobuf::uint8* CMsgClientAMGetClanOfficers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAMGetClanOfficers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_clan = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_clan(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAMGetClanOfficers)
  return target;
}

size_t CMsgClientAMGetClanOfficers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAMGetClanOfficers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 steamid_clan = 1;
  if (has_steamid_clan()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAMGetClanOfficers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAMGetClanOfficers)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAMGetClanOfficers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientAMGetClanOfficers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAMGetClanOfficers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAMGetClanOfficers)
    MergeFrom(*source);
  }
}

void CMsgClientAMGetClanOfficers::MergeFrom(const CMsgClientAMGetClanOfficers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAMGetClanOfficers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid_clan()) {
    set_steamid_clan(from.steamid_clan());
  }
}

void CMsgClientAMGetClanOfficers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAMGetClanOfficers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetClanOfficers::CopyFrom(const CMsgClientAMGetClanOfficers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAMGetClanOfficers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetClanOfficers::IsInitialized() const {
  return true;
}

void CMsgClientAMGetClanOfficers::Swap(CMsgClientAMGetClanOfficers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAMGetClanOfficers::InternalSwap(CMsgClientAMGetClanOfficers* other) {
  std::swap(steamid_clan_, other->steamid_clan_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientAMGetClanOfficers::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientAMGetClanOfficers

// optional fixed64 steamid_clan = 1;
bool CMsgClientAMGetClanOfficers::has_steamid_clan() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientAMGetClanOfficers::set_has_steamid_clan() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientAMGetClanOfficers::clear_has_steamid_clan() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientAMGetClanOfficers::clear_steamid_clan() {
  steamid_clan_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_clan();
}
::google::protobuf::uint64 CMsgClientAMGetClanOfficers::steamid_clan() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAMGetClanOfficers.steamid_clan)
  return steamid_clan_;
}
void CMsgClientAMGetClanOfficers::set_steamid_clan(::google::protobuf::uint64 value) {
  set_has_steamid_clan();
  steamid_clan_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAMGetClanOfficers.steamid_clan)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAMGetClanOfficersResponse::kEresultFieldNumber;
const int CMsgClientAMGetClanOfficersResponse::kSteamidClanFieldNumber;
const int CMsgClientAMGetClanOfficersResponse::kOfficerCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAMGetClanOfficersResponse::CMsgClientAMGetClanOfficersResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAMGetClanOfficersResponse)
}
CMsgClientAMGetClanOfficersResponse::CMsgClientAMGetClanOfficersResponse(const CMsgClientAMGetClanOfficersResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_clan_, &from.steamid_clan_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steamid_clan_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAMGetClanOfficersResponse)
}

void CMsgClientAMGetClanOfficersResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_clan_, 0, reinterpret_cast<char*>(&officer_count_) -
    reinterpret_cast<char*>(&steamid_clan_) + sizeof(officer_count_));
  eresult_ = 2;
}

CMsgClientAMGetClanOfficersResponse::~CMsgClientAMGetClanOfficersResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAMGetClanOfficersResponse)
  SharedDtor();
}

void CMsgClientAMGetClanOfficersResponse::SharedDtor() {
}

void CMsgClientAMGetClanOfficersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAMGetClanOfficersResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientAMGetClanOfficersResponse& CMsgClientAMGetClanOfficersResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientAMGetClanOfficersResponse* CMsgClientAMGetClanOfficersResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientAMGetClanOfficersResponse* n = new CMsgClientAMGetClanOfficersResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientAMGetClanOfficersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAMGetClanOfficersResponse)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&steamid_clan_, 0, reinterpret_cast<char*>(&officer_count_) -
      reinterpret_cast<char*>(&steamid_clan_) + sizeof(officer_count_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientAMGetClanOfficersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAMGetClanOfficersResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid_clan = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steamid_clan();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_clan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 officer_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_officer_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officer_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAMGetClanOfficersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAMGetClanOfficersResponse)
  return false;
#undef DO_
}

void CMsgClientAMGetClanOfficersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAMGetClanOfficersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed64 steamid_clan = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid_clan(), output);
  }

  // optional int32 officer_count = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->officer_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAMGetClanOfficersResponse)
}

::google::protobuf::uint8* CMsgClientAMGetClanOfficersResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAMGetClanOfficersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional fixed64 steamid_clan = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid_clan(), target);
  }

  // optional int32 officer_count = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->officer_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAMGetClanOfficersResponse)
  return target;
}

size_t CMsgClientAMGetClanOfficersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAMGetClanOfficersResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steamid_clan = 2;
    if (has_steamid_clan()) {
      total_size += 1 + 8;
    }

    // optional int32 officer_count = 3;
    if (has_officer_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officer_count());
    }

    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAMGetClanOfficersResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAMGetClanOfficersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAMGetClanOfficersResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientAMGetClanOfficersResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAMGetClanOfficersResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAMGetClanOfficersResponse)
    MergeFrom(*source);
  }
}

void CMsgClientAMGetClanOfficersResponse::MergeFrom(const CMsgClientAMGetClanOfficersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAMGetClanOfficersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_clan_ = from.steamid_clan_;
    }
    if (cached_has_bits & 0x00000002u) {
      officer_count_ = from.officer_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAMGetClanOfficersResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAMGetClanOfficersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetClanOfficersResponse::CopyFrom(const CMsgClientAMGetClanOfficersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAMGetClanOfficersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetClanOfficersResponse::IsInitialized() const {
  return true;
}

void CMsgClientAMGetClanOfficersResponse::Swap(CMsgClientAMGetClanOfficersResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAMGetClanOfficersResponse::InternalSwap(CMsgClientAMGetClanOfficersResponse* other) {
  std::swap(steamid_clan_, other->steamid_clan_);
  std::swap(officer_count_, other->officer_count_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientAMGetClanOfficersResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientAMGetClanOfficersResponse

// optional int32 eresult = 1 [default = 2];
bool CMsgClientAMGetClanOfficersResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientAMGetClanOfficersResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientAMGetClanOfficersResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientAMGetClanOfficersResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientAMGetClanOfficersResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAMGetClanOfficersResponse.eresult)
  return eresult_;
}
void CMsgClientAMGetClanOfficersResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAMGetClanOfficersResponse.eresult)
}

// optional fixed64 steamid_clan = 2;
bool CMsgClientAMGetClanOfficersResponse::has_steamid_clan() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientAMGetClanOfficersResponse::set_has_steamid_clan() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientAMGetClanOfficersResponse::clear_has_steamid_clan() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientAMGetClanOfficersResponse::clear_steamid_clan() {
  steamid_clan_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_clan();
}
::google::protobuf::uint64 CMsgClientAMGetClanOfficersResponse::steamid_clan() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAMGetClanOfficersResponse.steamid_clan)
  return steamid_clan_;
}
void CMsgClientAMGetClanOfficersResponse::set_steamid_clan(::google::protobuf::uint64 value) {
  set_has_steamid_clan();
  steamid_clan_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAMGetClanOfficersResponse.steamid_clan)
}

// optional int32 officer_count = 3;
bool CMsgClientAMGetClanOfficersResponse::has_officer_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientAMGetClanOfficersResponse::set_has_officer_count() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientAMGetClanOfficersResponse::clear_has_officer_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientAMGetClanOfficersResponse::clear_officer_count() {
  officer_count_ = 0;
  clear_has_officer_count();
}
::google::protobuf::int32 CMsgClientAMGetClanOfficersResponse::officer_count() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAMGetClanOfficersResponse.officer_count)
  return officer_count_;
}
void CMsgClientAMGetClanOfficersResponse::set_officer_count(::google::protobuf::int32 value) {
  set_has_officer_count();
  officer_count_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAMGetClanOfficersResponse.officer_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAMGetPersonaNameHistory_IdInstance::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAMGetPersonaNameHistory_IdInstance::CMsgClientAMGetPersonaNameHistory_IdInstance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
}
CMsgClientAMGetPersonaNameHistory_IdInstance::CMsgClientAMGetPersonaNameHistory_IdInstance(const CMsgClientAMGetPersonaNameHistory_IdInstance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
}

CMsgClientAMGetPersonaNameHistory_IdInstance::~CMsgClientAMGetPersonaNameHistory_IdInstance() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  SharedDtor();
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::SharedDtor() {
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAMGetPersonaNameHistory_IdInstance::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientAMGetPersonaNameHistory_IdInstance& CMsgClientAMGetPersonaNameHistory_IdInstance::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientAMGetPersonaNameHistory_IdInstance* CMsgClientAMGetPersonaNameHistory_IdInstance::New(::google::protobuf::Arena* arena) const {
  CMsgClientAMGetPersonaNameHistory_IdInstance* n = new CMsgClientAMGetPersonaNameHistory_IdInstance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientAMGetPersonaNameHistory_IdInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  return false;
#undef DO_
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
}

::google::protobuf::uint8* CMsgClientAMGetPersonaNameHistory_IdInstance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  return target;
}

size_t CMsgClientAMGetPersonaNameHistory_IdInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAMGetPersonaNameHistory_IdInstance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientAMGetPersonaNameHistory_IdInstance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
    MergeFrom(*source);
  }
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::MergeFrom(const CMsgClientAMGetPersonaNameHistory_IdInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::CopyFrom(const CMsgClientAMGetPersonaNameHistory_IdInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistory_IdInstance::IsInitialized() const {
  return true;
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::Swap(CMsgClientAMGetPersonaNameHistory_IdInstance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAMGetPersonaNameHistory_IdInstance::InternalSwap(CMsgClientAMGetPersonaNameHistory_IdInstance* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientAMGetPersonaNameHistory_IdInstance::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientAMGetPersonaNameHistory_IdInstance

// optional fixed64 steamid = 1;
bool CMsgClientAMGetPersonaNameHistory_IdInstance::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientAMGetPersonaNameHistory_IdInstance::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientAMGetPersonaNameHistory_IdInstance::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientAMGetPersonaNameHistory_IdInstance::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgClientAMGetPersonaNameHistory_IdInstance::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance.steamid)
  return steamid_;
}
void CMsgClientAMGetPersonaNameHistory_IdInstance::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance.steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAMGetPersonaNameHistory::kIdCountFieldNumber;
const int CMsgClientAMGetPersonaNameHistory::kIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAMGetPersonaNameHistory::CMsgClientAMGetPersonaNameHistory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAMGetPersonaNameHistory)
}
CMsgClientAMGetPersonaNameHistory::CMsgClientAMGetPersonaNameHistory(const CMsgClientAMGetPersonaNameHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_count_ = from.id_count_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAMGetPersonaNameHistory)
}

void CMsgClientAMGetPersonaNameHistory::SharedCtor() {
  _cached_size_ = 0;
  id_count_ = 0;
}

CMsgClientAMGetPersonaNameHistory::~CMsgClientAMGetPersonaNameHistory() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAMGetPersonaNameHistory)
  SharedDtor();
}

void CMsgClientAMGetPersonaNameHistory::SharedDtor() {
}

void CMsgClientAMGetPersonaNameHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAMGetPersonaNameHistory::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientAMGetPersonaNameHistory& CMsgClientAMGetPersonaNameHistory::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientAMGetPersonaNameHistory* CMsgClientAMGetPersonaNameHistory::New(::google::protobuf::Arena* arena) const {
  CMsgClientAMGetPersonaNameHistory* n = new CMsgClientAMGetPersonaNameHistory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientAMGetPersonaNameHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAMGetPersonaNameHistory)
  ids_.Clear();
  id_count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientAMGetPersonaNameHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAMGetPersonaNameHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAMGetPersonaNameHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAMGetPersonaNameHistory)
  return false;
#undef DO_
}

void CMsgClientAMGetPersonaNameHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAMGetPersonaNameHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id_count(), output);
  }

  // repeated .proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
  for (unsigned int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAMGetPersonaNameHistory)
}

::google::protobuf::uint8* CMsgClientAMGetPersonaNameHistory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAMGetPersonaNameHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id_count(), target);
  }

  // repeated .proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
  for (unsigned int i = 0, n = this->ids_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->ids(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAMGetPersonaNameHistory)
  return target;
}

size_t CMsgClientAMGetPersonaNameHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAMGetPersonaNameHistory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
  {
    unsigned int count = this->ids_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ids(i));
    }
  }

  // optional int32 id_count = 1;
  if (has_id_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAMGetPersonaNameHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAMGetPersonaNameHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAMGetPersonaNameHistory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientAMGetPersonaNameHistory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAMGetPersonaNameHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAMGetPersonaNameHistory)
    MergeFrom(*source);
  }
}

void CMsgClientAMGetPersonaNameHistory::MergeFrom(const CMsgClientAMGetPersonaNameHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAMGetPersonaNameHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_id_count()) {
    set_id_count(from.id_count());
  }
}

void CMsgClientAMGetPersonaNameHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAMGetPersonaNameHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistory::CopyFrom(const CMsgClientAMGetPersonaNameHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAMGetPersonaNameHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistory::IsInitialized() const {
  return true;
}

void CMsgClientAMGetPersonaNameHistory::Swap(CMsgClientAMGetPersonaNameHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAMGetPersonaNameHistory::InternalSwap(CMsgClientAMGetPersonaNameHistory* other) {
  ids_.InternalSwap(&other->ids_);
  std::swap(id_count_, other->id_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientAMGetPersonaNameHistory::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientAMGetPersonaNameHistory

// optional int32 id_count = 1;
bool CMsgClientAMGetPersonaNameHistory::has_id_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientAMGetPersonaNameHistory::set_has_id_count() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientAMGetPersonaNameHistory::clear_has_id_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientAMGetPersonaNameHistory::clear_id_count() {
  id_count_ = 0;
  clear_has_id_count();
}
::google::protobuf::int32 CMsgClientAMGetPersonaNameHistory::id_count() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAMGetPersonaNameHistory.id_count)
  return id_count_;
}
void CMsgClientAMGetPersonaNameHistory::set_id_count(::google::protobuf::int32 value) {
  set_has_id_count();
  id_count_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAMGetPersonaNameHistory.id_count)
}

// repeated .proto.steam.CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
int CMsgClientAMGetPersonaNameHistory::ids_size() const {
  return ids_.size();
}
void CMsgClientAMGetPersonaNameHistory::clear_ids() {
  ids_.Clear();
}
const ::proto::steam::CMsgClientAMGetPersonaNameHistory_IdInstance& CMsgClientAMGetPersonaNameHistory::ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAMGetPersonaNameHistory.Ids)
  return ids_.Get(index);
}
::proto::steam::CMsgClientAMGetPersonaNameHistory_IdInstance* CMsgClientAMGetPersonaNameHistory::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientAMGetPersonaNameHistory.Ids)
  return ids_.Mutable(index);
}
::proto::steam::CMsgClientAMGetPersonaNameHistory_IdInstance* CMsgClientAMGetPersonaNameHistory::add_ids() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientAMGetPersonaNameHistory.Ids)
  return ids_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientAMGetPersonaNameHistory_IdInstance >*
CMsgClientAMGetPersonaNameHistory::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientAMGetPersonaNameHistory.Ids)
  return &ids_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientAMGetPersonaNameHistory_IdInstance >&
CMsgClientAMGetPersonaNameHistory::ids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientAMGetPersonaNameHistory.Ids)
  return ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::kNameSinceFieldNumber;
const int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
}
CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  name_since_ = from.name_since_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_since_ = 0u;
}

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::~CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  SharedDtor();
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::New(::google::protobuf::Arena* arena) const {
  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* n = new CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  name_since_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 name_since = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_name_since();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &name_since_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  return false;
#undef DO_
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 name_since = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->name_since(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
}

::google::protobuf::uint8* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 name_since = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->name_since(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  return target;
}

size_t CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed32 name_since = 1;
    if (has_name_since()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
    MergeFrom(*source);
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::MergeFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      name_since_ = from.name_since_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::CopyFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::IsInitialized() const {
  return true;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::Swap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::InternalSwap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* other) {
  name_.Swap(&other->name_);
  std::swap(name_since_, other->name_since_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance

// optional fixed32 name_since = 1;
bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::has_name_since() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::set_has_name_since() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::clear_has_name_since() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::clear_name_since() {
  name_since_ = 0u;
  clear_has_name_since();
}
::google::protobuf::uint32 CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::name_since() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name_since)
  return name_since_;
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::set_name_since(::google::protobuf::uint32 value) {
  set_has_name_since();
  name_since_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name_since)
}

// optional string name = 2;
bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name)
  return name_.GetNoArena();
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name)
}
#if LANG_CXX11
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name)
}
#endif
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name)
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name)
}
::std::string* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::release_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::kEresultFieldNumber;
const int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::kSteamidFieldNumber;
const int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::kNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
}
CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      names_(from.names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  eresult_ = 2;
}

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::~CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  SharedDtor();
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::SharedDtor() {
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::New(::google::protobuf::Arena* arena) const {
  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* n = new CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  names_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    steamid_ = GOOGLE_ULONGLONG(0);
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_names()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  return false;
#undef DO_
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid(), output);
  }

  // repeated .proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
  for (unsigned int i = 0, n = this->names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->names(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
}

::google::protobuf::uint8* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid(), target);
  }

  // repeated .proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
  for (unsigned int i = 0, n = this->names_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->names(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  return target;
}

size_t CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
  {
    unsigned int count = this->names_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->names(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamid = 2;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
    MergeFrom(*source);
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::MergeFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::CopyFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::IsInitialized() const {
  return true;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::Swap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::InternalSwap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* other) {
  names_.InternalSwap(&other->names_);
  std::swap(steamid_, other->steamid_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance

// optional int32 eresult = 1 [default = 2];
bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.eresult)
  return eresult_;
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.eresult)
}

// optional fixed64 steamid = 2;
bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.steamid)
  return steamid_;
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.steamid)
}

// repeated .proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::names_size() const {
  return names_.size();
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::clear_names() {
  names_.Clear();
}
const ::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::names(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.names)
  return names_.Get(index);
}
::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.names)
  return names_.Mutable(index);
}
::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::add_names() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.names)
  return names_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance >*
CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.names)
  return &names_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance >&
CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::names() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.names)
  return names_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAMGetPersonaNameHistoryResponse::kResponsesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAMGetPersonaNameHistoryResponse::CMsgClientAMGetPersonaNameHistoryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
}
CMsgClientAMGetPersonaNameHistoryResponse::CMsgClientAMGetPersonaNameHistoryResponse(const CMsgClientAMGetPersonaNameHistoryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
}

void CMsgClientAMGetPersonaNameHistoryResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClientAMGetPersonaNameHistoryResponse::~CMsgClientAMGetPersonaNameHistoryResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  SharedDtor();
}

void CMsgClientAMGetPersonaNameHistoryResponse::SharedDtor() {
}

void CMsgClientAMGetPersonaNameHistoryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAMGetPersonaNameHistoryResponse::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientAMGetPersonaNameHistoryResponse& CMsgClientAMGetPersonaNameHistoryResponse::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientAMGetPersonaNameHistoryResponse* CMsgClientAMGetPersonaNameHistoryResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientAMGetPersonaNameHistoryResponse* n = new CMsgClientAMGetPersonaNameHistoryResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientAMGetPersonaNameHistoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  responses_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientAMGetPersonaNameHistoryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_responses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  return false;
#undef DO_
}

void CMsgClientAMGetPersonaNameHistoryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
  for (unsigned int i = 0, n = this->responses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->responses(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
}

::google::protobuf::uint8* CMsgClientAMGetPersonaNameHistoryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
  for (unsigned int i = 0, n = this->responses_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->responses(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  return target;
}

size_t CMsgClientAMGetPersonaNameHistoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
  {
    unsigned int count = this->responses_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->responses(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAMGetPersonaNameHistoryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAMGetPersonaNameHistoryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientAMGetPersonaNameHistoryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
    MergeFrom(*source);
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse::MergeFrom(const CMsgClientAMGetPersonaNameHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
}

void CMsgClientAMGetPersonaNameHistoryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistoryResponse::CopyFrom(const CMsgClientAMGetPersonaNameHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistoryResponse::IsInitialized() const {
  return true;
}

void CMsgClientAMGetPersonaNameHistoryResponse::Swap(CMsgClientAMGetPersonaNameHistoryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAMGetPersonaNameHistoryResponse::InternalSwap(CMsgClientAMGetPersonaNameHistoryResponse* other) {
  responses_.InternalSwap(&other->responses_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientAMGetPersonaNameHistoryResponse::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientAMGetPersonaNameHistoryResponse

// repeated .proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
int CMsgClientAMGetPersonaNameHistoryResponse::responses_size() const {
  return responses_.size();
}
void CMsgClientAMGetPersonaNameHistoryResponse::clear_responses() {
  responses_.Clear();
}
const ::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& CMsgClientAMGetPersonaNameHistoryResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.responses)
  return responses_.Get(index);
}
::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* CMsgClientAMGetPersonaNameHistoryResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.responses)
  return responses_.Mutable(index);
}
::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* CMsgClientAMGetPersonaNameHistoryResponse::add_responses() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.responses)
  return responses_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance >*
CMsgClientAMGetPersonaNameHistoryResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.responses)
  return &responses_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance >&
CMsgClientAMGetPersonaNameHistoryResponse::responses() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientAMGetPersonaNameHistoryResponse.responses)
  return responses_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientDeregisterWithServer::kEservertypeFieldNumber;
const int CMsgClientDeregisterWithServer::kAppIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientDeregisterWithServer::CMsgClientDeregisterWithServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientDeregisterWithServer)
}
CMsgClientDeregisterWithServer::CMsgClientDeregisterWithServer(const CMsgClientDeregisterWithServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eservertype_, &from.eservertype_,
    reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&eservertype_) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientDeregisterWithServer)
}

void CMsgClientDeregisterWithServer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&eservertype_, 0, reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&eservertype_) + sizeof(app_id_));
}

CMsgClientDeregisterWithServer::~CMsgClientDeregisterWithServer() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientDeregisterWithServer)
  SharedDtor();
}

void CMsgClientDeregisterWithServer::SharedDtor() {
}

void CMsgClientDeregisterWithServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientDeregisterWithServer::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientDeregisterWithServer& CMsgClientDeregisterWithServer::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientDeregisterWithServer* CMsgClientDeregisterWithServer::New(::google::protobuf::Arena* arena) const {
  CMsgClientDeregisterWithServer* n = new CMsgClientDeregisterWithServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientDeregisterWithServer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientDeregisterWithServer)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&eservertype_, 0, reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&eservertype_) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientDeregisterWithServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientDeregisterWithServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eservertype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eservertype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eservertype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientDeregisterWithServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientDeregisterWithServer)
  return false;
#undef DO_
}

void CMsgClientDeregisterWithServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientDeregisterWithServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eservertype = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eservertype(), output);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientDeregisterWithServer)
}

::google::protobuf::uint8* CMsgClientDeregisterWithServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientDeregisterWithServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eservertype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eservertype(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientDeregisterWithServer)
  return target;
}

size_t CMsgClientDeregisterWithServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientDeregisterWithServer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 eservertype = 1;
    if (has_eservertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eservertype());
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientDeregisterWithServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientDeregisterWithServer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientDeregisterWithServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientDeregisterWithServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientDeregisterWithServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientDeregisterWithServer)
    MergeFrom(*source);
  }
}

void CMsgClientDeregisterWithServer::MergeFrom(const CMsgClientDeregisterWithServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientDeregisterWithServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      eservertype_ = from.eservertype_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientDeregisterWithServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientDeregisterWithServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientDeregisterWithServer::CopyFrom(const CMsgClientDeregisterWithServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientDeregisterWithServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDeregisterWithServer::IsInitialized() const {
  return true;
}

void CMsgClientDeregisterWithServer::Swap(CMsgClientDeregisterWithServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientDeregisterWithServer::InternalSwap(CMsgClientDeregisterWithServer* other) {
  std::swap(eservertype_, other->eservertype_);
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientDeregisterWithServer::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientDeregisterWithServer

// optional uint32 eservertype = 1;
bool CMsgClientDeregisterWithServer::has_eservertype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientDeregisterWithServer::set_has_eservertype() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientDeregisterWithServer::clear_has_eservertype() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientDeregisterWithServer::clear_eservertype() {
  eservertype_ = 0u;
  clear_has_eservertype();
}
::google::protobuf::uint32 CMsgClientDeregisterWithServer::eservertype() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientDeregisterWithServer.eservertype)
  return eservertype_;
}
void CMsgClientDeregisterWithServer::set_eservertype(::google::protobuf::uint32 value) {
  set_has_eservertype();
  eservertype_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientDeregisterWithServer.eservertype)
}

// optional uint32 app_id = 2;
bool CMsgClientDeregisterWithServer::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientDeregisterWithServer::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientDeregisterWithServer::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientDeregisterWithServer::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgClientDeregisterWithServer::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientDeregisterWithServer.app_id)
  return app_id_;
}
void CMsgClientDeregisterWithServer::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientDeregisterWithServer.app_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientClanState_NameInfo::kClanNameFieldNumber;
const int CMsgClientClanState_NameInfo::kShaAvatarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientClanState_NameInfo::CMsgClientClanState_NameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientClanState.NameInfo)
}
CMsgClientClanState_NameInfo::CMsgClientClanState_NameInfo(const CMsgClientClanState_NameInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clan_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clan_name()) {
    clan_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clan_name_);
  }
  sha_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_avatar()) {
    sha_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_avatar_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientClanState.NameInfo)
}

void CMsgClientClanState_NameInfo::SharedCtor() {
  _cached_size_ = 0;
  clan_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgClientClanState_NameInfo::~CMsgClientClanState_NameInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientClanState.NameInfo)
  SharedDtor();
}

void CMsgClientClanState_NameInfo::SharedDtor() {
  clan_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientClanState_NameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientClanState_NameInfo::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientClanState_NameInfo& CMsgClientClanState_NameInfo::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientClanState_NameInfo* CMsgClientClanState_NameInfo::New(::google::protobuf::Arena* arena) const {
  CMsgClientClanState_NameInfo* n = new CMsgClientClanState_NameInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientClanState_NameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientClanState.NameInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_clan_name()) {
      GOOGLE_DCHECK(!clan_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clan_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_sha_avatar()) {
      GOOGLE_DCHECK(!sha_avatar_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sha_avatar_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientClanState_NameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientClanState.NameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string clan_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clan_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clan_name().data(), this->clan_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientClanState.NameInfo.clan_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_avatar = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_avatar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientClanState.NameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientClanState.NameInfo)
  return false;
#undef DO_
}

void CMsgClientClanState_NameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientClanState.NameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clan_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clan_name().data(), this->clan_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientClanState.NameInfo.clan_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clan_name(), output);
  }

  // optional bytes sha_avatar = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sha_avatar(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientClanState.NameInfo)
}

::google::protobuf::uint8* CMsgClientClanState_NameInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientClanState.NameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clan_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clan_name().data(), this->clan_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientClanState.NameInfo.clan_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clan_name(), target);
  }

  // optional bytes sha_avatar = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sha_avatar(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientClanState.NameInfo)
  return target;
}

size_t CMsgClientClanState_NameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientClanState.NameInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string clan_name = 1;
    if (has_clan_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clan_name());
    }

    // optional bytes sha_avatar = 2;
    if (has_sha_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_avatar());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientClanState_NameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientClanState.NameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientClanState_NameInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientClanState_NameInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientClanState.NameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientClanState.NameInfo)
    MergeFrom(*source);
  }
}

void CMsgClientClanState_NameInfo::MergeFrom(const CMsgClientClanState_NameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientClanState.NameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clan_name();
      clan_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clan_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sha_avatar();
      sha_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_avatar_);
    }
  }
}

void CMsgClientClanState_NameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientClanState.NameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientClanState_NameInfo::CopyFrom(const CMsgClientClanState_NameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientClanState.NameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientClanState_NameInfo::IsInitialized() const {
  return true;
}

void CMsgClientClanState_NameInfo::Swap(CMsgClientClanState_NameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientClanState_NameInfo::InternalSwap(CMsgClientClanState_NameInfo* other) {
  clan_name_.Swap(&other->clan_name_);
  sha_avatar_.Swap(&other->sha_avatar_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientClanState_NameInfo::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientClanState_NameInfo

// optional string clan_name = 1;
bool CMsgClientClanState_NameInfo::has_clan_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientClanState_NameInfo::set_has_clan_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientClanState_NameInfo::clear_has_clan_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientClanState_NameInfo::clear_clan_name() {
  clan_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clan_name();
}
const ::std::string& CMsgClientClanState_NameInfo::clan_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientClanState.NameInfo.clan_name)
  return clan_name_.GetNoArena();
}
void CMsgClientClanState_NameInfo::set_clan_name(const ::std::string& value) {
  set_has_clan_name();
  clan_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientClanState.NameInfo.clan_name)
}
#if LANG_CXX11
void CMsgClientClanState_NameInfo::set_clan_name(::std::string&& value) {
  set_has_clan_name();
  clan_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientClanState.NameInfo.clan_name)
}
#endif
void CMsgClientClanState_NameInfo::set_clan_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clan_name();
  clan_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientClanState.NameInfo.clan_name)
}
void CMsgClientClanState_NameInfo::set_clan_name(const char* value, size_t size) {
  set_has_clan_name();
  clan_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientClanState.NameInfo.clan_name)
}
::std::string* CMsgClientClanState_NameInfo::mutable_clan_name() {
  set_has_clan_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientClanState.NameInfo.clan_name)
  return clan_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientClanState_NameInfo::release_clan_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientClanState.NameInfo.clan_name)
  clear_has_clan_name();
  return clan_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientClanState_NameInfo::set_allocated_clan_name(::std::string* clan_name) {
  if (clan_name != NULL) {
    set_has_clan_name();
  } else {
    clear_has_clan_name();
  }
  clan_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clan_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientClanState.NameInfo.clan_name)
}

// optional bytes sha_avatar = 2;
bool CMsgClientClanState_NameInfo::has_sha_avatar() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientClanState_NameInfo::set_has_sha_avatar() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientClanState_NameInfo::clear_has_sha_avatar() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientClanState_NameInfo::clear_sha_avatar() {
  sha_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha_avatar();
}
const ::std::string& CMsgClientClanState_NameInfo::sha_avatar() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientClanState.NameInfo.sha_avatar)
  return sha_avatar_.GetNoArena();
}
void CMsgClientClanState_NameInfo::set_sha_avatar(const ::std::string& value) {
  set_has_sha_avatar();
  sha_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientClanState.NameInfo.sha_avatar)
}
#if LANG_CXX11
void CMsgClientClanState_NameInfo::set_sha_avatar(::std::string&& value) {
  set_has_sha_avatar();
  sha_avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientClanState.NameInfo.sha_avatar)
}
#endif
void CMsgClientClanState_NameInfo::set_sha_avatar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha_avatar();
  sha_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientClanState.NameInfo.sha_avatar)
}
void CMsgClientClanState_NameInfo::set_sha_avatar(const void* value, size_t size) {
  set_has_sha_avatar();
  sha_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientClanState.NameInfo.sha_avatar)
}
::std::string* CMsgClientClanState_NameInfo::mutable_sha_avatar() {
  set_has_sha_avatar();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientClanState.NameInfo.sha_avatar)
  return sha_avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientClanState_NameInfo::release_sha_avatar() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientClanState.NameInfo.sha_avatar)
  clear_has_sha_avatar();
  return sha_avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientClanState_NameInfo::set_allocated_sha_avatar(::std::string* sha_avatar) {
  if (sha_avatar != NULL) {
    set_has_sha_avatar();
  } else {
    clear_has_sha_avatar();
  }
  sha_avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha_avatar);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientClanState.NameInfo.sha_avatar)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientClanState_UserCounts::kMembersFieldNumber;
const int CMsgClientClanState_UserCounts::kOnlineFieldNumber;
const int CMsgClientClanState_UserCounts::kChattingFieldNumber;
const int CMsgClientClanState_UserCounts::kInGameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientClanState_UserCounts::CMsgClientClanState_UserCounts()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientClanState.UserCounts)
}
CMsgClientClanState_UserCounts::CMsgClientClanState_UserCounts(const CMsgClientClanState_UserCounts& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&members_, &from.members_,
    reinterpret_cast<char*>(&in_game_) -
    reinterpret_cast<char*>(&members_) + sizeof(in_game_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientClanState.UserCounts)
}

void CMsgClientClanState_UserCounts::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&members_, 0, reinterpret_cast<char*>(&in_game_) -
    reinterpret_cast<char*>(&members_) + sizeof(in_game_));
}

CMsgClientClanState_UserCounts::~CMsgClientClanState_UserCounts() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientClanState.UserCounts)
  SharedDtor();
}

void CMsgClientClanState_UserCounts::SharedDtor() {
}

void CMsgClientClanState_UserCounts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientClanState_UserCounts::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientClanState_UserCounts& CMsgClientClanState_UserCounts::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientClanState_UserCounts* CMsgClientClanState_UserCounts::New(::google::protobuf::Arena* arena) const {
  CMsgClientClanState_UserCounts* n = new CMsgClientClanState_UserCounts;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientClanState_UserCounts::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientClanState.UserCounts)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&members_, 0, reinterpret_cast<char*>(&in_game_) -
      reinterpret_cast<char*>(&members_) + sizeof(in_game_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientClanState_UserCounts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientClanState.UserCounts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 members = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_members();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 online = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 chatting = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_chatting();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chatting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 in_game = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_in_game();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientClanState.UserCounts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientClanState.UserCounts)
  return false;
#undef DO_
}

void CMsgClientClanState_UserCounts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientClanState.UserCounts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 members = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->members(), output);
  }

  // optional uint32 online = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->online(), output);
  }

  // optional uint32 chatting = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->chatting(), output);
  }

  // optional uint32 in_game = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->in_game(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientClanState.UserCounts)
}

::google::protobuf::uint8* CMsgClientClanState_UserCounts::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientClanState.UserCounts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 members = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->members(), target);
  }

  // optional uint32 online = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->online(), target);
  }

  // optional uint32 chatting = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->chatting(), target);
  }

  // optional uint32 in_game = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->in_game(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientClanState.UserCounts)
  return target;
}

size_t CMsgClientClanState_UserCounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientClanState.UserCounts)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 members = 1;
    if (has_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->members());
    }

    // optional uint32 online = 2;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online());
    }

    // optional uint32 chatting = 3;
    if (has_chatting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chatting());
    }

    // optional uint32 in_game = 4;
    if (has_in_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_game());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientClanState_UserCounts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientClanState.UserCounts)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientClanState_UserCounts* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientClanState_UserCounts>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientClanState.UserCounts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientClanState.UserCounts)
    MergeFrom(*source);
  }
}

void CMsgClientClanState_UserCounts::MergeFrom(const CMsgClientClanState_UserCounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientClanState.UserCounts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      members_ = from.members_;
    }
    if (cached_has_bits & 0x00000002u) {
      online_ = from.online_;
    }
    if (cached_has_bits & 0x00000004u) {
      chatting_ = from.chatting_;
    }
    if (cached_has_bits & 0x00000008u) {
      in_game_ = from.in_game_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientClanState_UserCounts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientClanState.UserCounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientClanState_UserCounts::CopyFrom(const CMsgClientClanState_UserCounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientClanState.UserCounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientClanState_UserCounts::IsInitialized() const {
  return true;
}

void CMsgClientClanState_UserCounts::Swap(CMsgClientClanState_UserCounts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientClanState_UserCounts::InternalSwap(CMsgClientClanState_UserCounts* other) {
  std::swap(members_, other->members_);
  std::swap(online_, other->online_);
  std::swap(chatting_, other->chatting_);
  std::swap(in_game_, other->in_game_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientClanState_UserCounts::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientClanState_UserCounts

// optional uint32 members = 1;
bool CMsgClientClanState_UserCounts::has_members() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientClanState_UserCounts::set_has_members() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientClanState_UserCounts::clear_has_members() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientClanState_UserCounts::clear_members() {
  members_ = 0u;
  clear_has_members();
}
::google::protobuf::uint32 CMsgClientClanState_UserCounts::members() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientClanState.UserCounts.members)
  return members_;
}
void CMsgClientClanState_UserCounts::set_members(::google::protobuf::uint32 value) {
  set_has_members();
  members_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientClanState.UserCounts.members)
}

// optional uint32 online = 2;
bool CMsgClientClanState_UserCounts::has_online() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientClanState_UserCounts::set_has_online() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientClanState_UserCounts::clear_has_online() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientClanState_UserCounts::clear_online() {
  online_ = 0u;
  clear_has_online();
}
::google::protobuf::uint32 CMsgClientClanState_UserCounts::online() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientClanState.UserCounts.online)
  return online_;
}
void CMsgClientClanState_UserCounts::set_online(::google::protobuf::uint32 value) {
  set_has_online();
  online_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientClanState.UserCounts.online)
}

// optional uint32 chatting = 3;
bool CMsgClientClanState_UserCounts::has_chatting() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientClanState_UserCounts::set_has_chatting() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientClanState_UserCounts::clear_has_chatting() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientClanState_UserCounts::clear_chatting() {
  chatting_ = 0u;
  clear_has_chatting();
}
::google::protobuf::uint32 CMsgClientClanState_UserCounts::chatting() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientClanState.UserCounts.chatting)
  return chatting_;
}
void CMsgClientClanState_UserCounts::set_chatting(::google::protobuf::uint32 value) {
  set_has_chatting();
  chatting_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientClanState.UserCounts.chatting)
}

// optional uint32 in_game = 4;
bool CMsgClientClanState_UserCounts::has_in_game() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientClanState_UserCounts::set_has_in_game() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientClanState_UserCounts::clear_has_in_game() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientClanState_UserCounts::clear_in_game() {
  in_game_ = 0u;
  clear_has_in_game();
}
::google::protobuf::uint32 CMsgClientClanState_UserCounts::in_game() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientClanState.UserCounts.in_game)
  return in_game_;
}
void CMsgClientClanState_UserCounts::set_in_game(::google::protobuf::uint32 value) {
  set_has_in_game();
  in_game_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientClanState.UserCounts.in_game)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientClanState_Event::kGidFieldNumber;
const int CMsgClientClanState_Event::kEventTimeFieldNumber;
const int CMsgClientClanState_Event::kHeadlineFieldNumber;
const int CMsgClientClanState_Event::kGameIdFieldNumber;
const int CMsgClientClanState_Event::kJustPostedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientClanState_Event::CMsgClientClanState_Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientClanState.Event)
}
CMsgClientClanState_Event::CMsgClientClanState_Event(const CMsgClientClanState_Event& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  headline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_headline()) {
    headline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headline_);
  }
  ::memcpy(&gid_, &from.gid_,
    reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&gid_) + sizeof(game_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientClanState.Event)
}

void CMsgClientClanState_Event::SharedCtor() {
  _cached_size_ = 0;
  headline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gid_, 0, reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&gid_) + sizeof(game_id_));
}

CMsgClientClanState_Event::~CMsgClientClanState_Event() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientClanState.Event)
  SharedDtor();
}

void CMsgClientClanState_Event::SharedDtor() {
  headline_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientClanState_Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientClanState_Event::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientClanState_Event& CMsgClientClanState_Event::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientClanState_Event* CMsgClientClanState_Event::New(::google::protobuf::Arena* arena) const {
  CMsgClientClanState_Event* n = new CMsgClientClanState_Event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientClanState_Event::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientClanState.Event)
  if (has_headline()) {
    GOOGLE_DCHECK(!headline_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*headline_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&gid_, 0, reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&gid_) + sizeof(game_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientClanState_Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientClanState.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 gid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_gid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_event_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string headline = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headline().data(), this->headline().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientClanState.Event.headline");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 game_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool just_posted = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_just_posted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &just_posted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientClanState.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientClanState.Event)
  return false;
#undef DO_
}

void CMsgClientClanState_Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientClanState.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 gid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->gid(), output);
  }

  // optional uint32 event_time = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_time(), output);
  }

  // optional string headline = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headline().data(), this->headline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientClanState.Event.headline");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->headline(), output);
  }

  // optional fixed64 game_id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->game_id(), output);
  }

  // optional bool just_posted = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->just_posted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientClanState.Event)
}

::google::protobuf::uint8* CMsgClientClanState_Event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientClanState.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 gid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->gid(), target);
  }

  // optional uint32 event_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event_time(), target);
  }

  // optional string headline = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headline().data(), this->headline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientClanState.Event.headline");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->headline(), target);
  }

  // optional fixed64 game_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->game_id(), target);
  }

  // optional bool just_posted = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->just_posted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientClanState.Event)
  return target;
}

size_t CMsgClientClanState_Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientClanState.Event)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string headline = 3;
    if (has_headline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headline());
    }

    // optional fixed64 gid = 1;
    if (has_gid()) {
      total_size += 1 + 8;
    }

    // optional uint32 event_time = 2;
    if (has_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_time());
    }

    // optional bool just_posted = 5;
    if (has_just_posted()) {
      total_size += 1 + 1;
    }

    // optional fixed64 game_id = 4;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientClanState_Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientClanState.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientClanState_Event* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientClanState_Event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientClanState.Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientClanState.Event)
    MergeFrom(*source);
  }
}

void CMsgClientClanState_Event::MergeFrom(const CMsgClientClanState_Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientClanState.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_headline();
      headline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headline_);
    }
    if (cached_has_bits & 0x00000002u) {
      gid_ = from.gid_;
    }
    if (cached_has_bits & 0x00000004u) {
      event_time_ = from.event_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      just_posted_ = from.just_posted_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_id_ = from.game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientClanState_Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientClanState.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientClanState_Event::CopyFrom(const CMsgClientClanState_Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientClanState.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientClanState_Event::IsInitialized() const {
  return true;
}

void CMsgClientClanState_Event::Swap(CMsgClientClanState_Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientClanState_Event::InternalSwap(CMsgClientClanState_Event* other) {
  headline_.Swap(&other->headline_);
  std::swap(gid_, other->gid_);
  std::swap(event_time_, other->event_time_);
  std::swap(just_posted_, other->just_posted_);
  std::swap(game_id_, other->game_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientClanState_Event::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientClanState_Event

// optional fixed64 gid = 1;
bool CMsgClientClanState_Event::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientClanState_Event::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientClanState_Event::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientClanState_Event::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
::google::protobuf::uint64 CMsgClientClanState_Event::gid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientClanState.Event.gid)
  return gid_;
}
void CMsgClientClanState_Event::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientClanState.Event.gid)
}

// optional uint32 event_time = 2;
bool CMsgClientClanState_Event::has_event_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientClanState_Event::set_has_event_time() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientClanState_Event::clear_has_event_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientClanState_Event::clear_event_time() {
  event_time_ = 0u;
  clear_has_event_time();
}
::google::protobuf::uint32 CMsgClientClanState_Event::event_time() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientClanState.Event.event_time)
  return event_time_;
}
void CMsgClientClanState_Event::set_event_time(::google::protobuf::uint32 value) {
  set_has_event_time();
  event_time_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientClanState.Event.event_time)
}

// optional string headline = 3;
bool CMsgClientClanState_Event::has_headline() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientClanState_Event::set_has_headline() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientClanState_Event::clear_has_headline() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientClanState_Event::clear_headline() {
  headline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headline();
}
const ::std::string& CMsgClientClanState_Event::headline() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientClanState.Event.headline)
  return headline_.GetNoArena();
}
void CMsgClientClanState_Event::set_headline(const ::std::string& value) {
  set_has_headline();
  headline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientClanState.Event.headline)
}
#if LANG_CXX11
void CMsgClientClanState_Event::set_headline(::std::string&& value) {
  set_has_headline();
  headline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientClanState.Event.headline)
}
#endif
void CMsgClientClanState_Event::set_headline(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_headline();
  headline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientClanState.Event.headline)
}
void CMsgClientClanState_Event::set_headline(const char* value, size_t size) {
  set_has_headline();
  headline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientClanState.Event.headline)
}
::std::string* CMsgClientClanState_Event::mutable_headline() {
  set_has_headline();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientClanState.Event.headline)
  return headline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientClanState_Event::release_headline() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientClanState.Event.headline)
  clear_has_headline();
  return headline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientClanState_Event::set_allocated_headline(::std::string* headline) {
  if (headline != NULL) {
    set_has_headline();
  } else {
    clear_has_headline();
  }
  headline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headline);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientClanState.Event.headline)
}

// optional fixed64 game_id = 4;
bool CMsgClientClanState_Event::has_game_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientClanState_Event::set_has_game_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientClanState_Event::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientClanState_Event::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_id();
}
::google::protobuf::uint64 CMsgClientClanState_Event::game_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientClanState.Event.game_id)
  return game_id_;
}
void CMsgClientClanState_Event::set_game_id(::google::protobuf::uint64 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientClanState.Event.game_id)
}

// optional bool just_posted = 5;
bool CMsgClientClanState_Event::has_just_posted() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientClanState_Event::set_has_just_posted() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientClanState_Event::clear_has_just_posted() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientClanState_Event::clear_just_posted() {
  just_posted_ = false;
  clear_has_just_posted();
}
bool CMsgClientClanState_Event::just_posted() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientClanState.Event.just_posted)
  return just_posted_;
}
void CMsgClientClanState_Event::set_just_posted(bool value) {
  set_has_just_posted();
  just_posted_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientClanState.Event.just_posted)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientClanState::kSteamidClanFieldNumber;
const int CMsgClientClanState::kMUnStatusFlagsFieldNumber;
const int CMsgClientClanState::kClanAccountFlagsFieldNumber;
const int CMsgClientClanState::kNameInfoFieldNumber;
const int CMsgClientClanState::kUserCountsFieldNumber;
const int CMsgClientClanState::kEventsFieldNumber;
const int CMsgClientClanState::kAnnouncementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientClanState::CMsgClientClanState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientClanState)
}
CMsgClientClanState::CMsgClientClanState(const CMsgClientClanState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      events_(from.events_),
      announcements_(from.announcements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name_info()) {
    name_info_ = new ::proto::steam::CMsgClientClanState_NameInfo(*from.name_info_);
  } else {
    name_info_ = NULL;
  }
  if (from.has_user_counts()) {
    user_counts_ = new ::proto::steam::CMsgClientClanState_UserCounts(*from.user_counts_);
  } else {
    user_counts_ = NULL;
  }
  ::memcpy(&steamid_clan_, &from.steamid_clan_,
    reinterpret_cast<char*>(&clan_account_flags_) -
    reinterpret_cast<char*>(&steamid_clan_) + sizeof(clan_account_flags_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientClanState)
}

void CMsgClientClanState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&name_info_, 0, reinterpret_cast<char*>(&clan_account_flags_) -
    reinterpret_cast<char*>(&name_info_) + sizeof(clan_account_flags_));
}

CMsgClientClanState::~CMsgClientClanState() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientClanState)
  SharedDtor();
}

void CMsgClientClanState::SharedDtor() {
  if (this != internal_default_instance()) {
    delete name_info_;
  }
  if (this != internal_default_instance()) {
    delete user_counts_;
  }
}

void CMsgClientClanState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientClanState::descriptor() {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientClanState& CMsgClientClanState::default_instance() {
  protobuf_steammessages_5fclientserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientClanState* CMsgClientClanState::New(::google::protobuf::Arena* arena) const {
  CMsgClientClanState* n = new CMsgClientClanState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientClanState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientClanState)
  events_.Clear();
  announcements_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name_info()) {
      GOOGLE_DCHECK(name_info_ != NULL);
      name_info_->::proto::steam::CMsgClientClanState_NameInfo::Clear();
    }
    if (has_user_counts()) {
      GOOGLE_DCHECK(user_counts_ != NULL);
      user_counts_->::proto::steam::CMsgClientClanState_UserCounts::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&steamid_clan_, 0, reinterpret_cast<char*>(&clan_account_flags_) -
      reinterpret_cast<char*>(&steamid_clan_) + sizeof(clan_account_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientClanState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientClanState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_clan = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid_clan();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_clan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 m_unStatusFlags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_m_unstatusflags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_unstatusflags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clan_account_flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_clan_account_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clan_account_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgClientClanState.NameInfo name_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgClientClanState.UserCounts user_counts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_counts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientClanState.Event events = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientClanState.Event announcements = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_announcements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientClanState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientClanState)
  return false;
#undef DO_
}

void CMsgClientClanState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientClanState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_clan = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_clan(), output);
  }

  // optional uint32 m_unStatusFlags = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_unstatusflags(), output);
  }

  // optional uint32 clan_account_flags = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clan_account_flags(), output);
  }

  // optional .proto.steam.CMsgClientClanState.NameInfo name_info = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->name_info_, output);
  }

  // optional .proto.steam.CMsgClientClanState.UserCounts user_counts = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->user_counts_, output);
  }

  // repeated .proto.steam.CMsgClientClanState.Event events = 6;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->events(i), output);
  }

  // repeated .proto.steam.CMsgClientClanState.Event announcements = 7;
  for (unsigned int i = 0, n = this->announcements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->announcements(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientClanState)
}

::google::protobuf::uint8* CMsgClientClanState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientClanState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_clan = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_clan(), target);
  }

  // optional uint32 m_unStatusFlags = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_unstatusflags(), target);
  }

  // optional uint32 clan_account_flags = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clan_account_flags(), target);
  }

  // optional .proto.steam.CMsgClientClanState.NameInfo name_info = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->name_info_, deterministic, target);
  }

  // optional .proto.steam.CMsgClientClanState.UserCounts user_counts = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->user_counts_, deterministic, target);
  }

  // repeated .proto.steam.CMsgClientClanState.Event events = 6;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->events(i), deterministic, target);
  }

  // repeated .proto.steam.CMsgClientClanState.Event announcements = 7;
  for (unsigned int i = 0, n = this->announcements_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->announcements(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientClanState)
  return target;
}

size_t CMsgClientClanState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientClanState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientClanState.Event events = 6;
  {
    unsigned int count = this->events_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->events(i));
    }
  }

  // repeated .proto.steam.CMsgClientClanState.Event announcements = 7;
  {
    unsigned int count = this->announcements_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->announcements(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .proto.steam.CMsgClientClanState.NameInfo name_info = 4;
    if (has_name_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->name_info_);
    }

    // optional .proto.steam.CMsgClientClanState.UserCounts user_counts = 5;
    if (has_user_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_counts_);
    }

    // optional fixed64 steamid_clan = 1;
    if (has_steamid_clan()) {
      total_size += 1 + 8;
    }

    // optional uint32 m_unStatusFlags = 2;
    if (has_m_unstatusflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_unstatusflags());
    }

    // optional uint32 clan_account_flags = 3;
    if (has_clan_account_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clan_account_flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientClanState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientClanState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientClanState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientClanState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientClanState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientClanState)
    MergeFrom(*source);
  }
}

void CMsgClientClanState::MergeFrom(const CMsgClientClanState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientClanState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  announcements_.MergeFrom(from.announcements_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_name_info()->::proto::steam::CMsgClientClanState_NameInfo::MergeFrom(from.name_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_user_counts()->::proto::steam::CMsgClientClanState_UserCounts::MergeFrom(from.user_counts());
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_clan_ = from.steamid_clan_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_unstatusflags_ = from.m_unstatusflags_;
    }
    if (cached_has_bits & 0x00000010u) {
      clan_account_flags_ = from.clan_account_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientClanState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientClanState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientClanState::CopyFrom(const CMsgClientClanState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientClanState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientClanState::IsInitialized() const {
  return true;
}

void CMsgClientClanState::Swap(CMsgClientClanState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientClanState::InternalSwap(CMsgClientClanState* other) {
  events_.InternalSwap(&other->events_);
  announcements_.InternalSwap(&other->announcements_);
  std::swap(name_info_, other->name_info_);
  std::swap(user_counts_, other->user_counts_);
  std::swap(steamid_clan_, other->steamid_clan_);
  std::swap(m_unstatusflags_, other->m_unstatusflags_);
  std::swap(clan_account_flags_, other->clan_account_flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientClanState::GetMetadata() const {
  protobuf_steammessages_5fclientserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientClanState

// optional fixed64 steamid_clan = 1;
bool CMsgClientClanState::has_steamid_clan() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientClanState::set_has_steamid_clan() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientClanState::clear_has_steamid_clan() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientClanState::clear_steamid_clan() {
  steamid_clan_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_clan();
}
::google::protobuf::uint64 CMsgClientClanState::steamid_clan() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientClanState.steamid_clan)
  return steamid_clan_;
}
void CMsgClientClanState::set_steamid_clan(::google::protobuf::uint64 value) {
  set_has_steamid_clan();
  steamid_clan_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientClanState.steamid_clan)
}

// optional uint32 m_unStatusFlags = 2;
bool CMsgClientClanState::has_m_unstatusflags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientClanState::set_has_m_unstatusflags() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientClanState::clear_has_m_unstatusflags() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientClanState::clear_m_unstatusflags() {
  m_unstatusflags_ = 0u;
  clear_has_m_unstatusflags();
}
::google::protobuf::uint32 CMsgClientClanState::m_unstatusflags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientClanState.m_unStatusFlags)
  return m_unstatusflags_;
}
void CMsgClientClanState::set_m_unstatusflags(::google::protobuf::uint32 value) {
  set_has_m_unstatusflags();
  m_unstatusflags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientClanState.m_unStatusFlags)
}

// optional uint32 clan_account_flags = 3;
bool CMsgClientClanState::has_clan_account_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientClanState::set_has_clan_account_flags() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientClanState::clear_has_clan_account_flags() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientClanState::clear_clan_account_flags() {
  clan_account_flags_ = 0u;
  clear_has_clan_account_flags();
}
::google::protobuf::uint32 CMsgClientClanState::clan_account_flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientClanState.clan_account_flags)
  return clan_account_flags_;
}
void CMsgClientClanState::set_clan_account_flags(::google::protobuf::uint32 value) {
  set_has_clan_account_flags();
  clan_account_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientClanState.clan_account_flags)
}

// optional .proto.steam.CMsgClientClanState.NameInfo name_info = 4;
bool CMsgClientClanState::has_name_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientClanState::set_has_name_info() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientClanState::clear_has_name_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientClanState::clear_name_info() {
  if (name_info_ != NULL) name_info_->::proto::steam::CMsgClientClanState_NameInfo::Clear();
  clear_has_name_info();
}
const ::proto::steam::CMsgClientClanState_NameInfo& CMsgClientClanState::name_info() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientClanState.name_info)
  return name_info_ != NULL ? *name_info_
                         : *::proto::steam::CMsgClientClanState_NameInfo::internal_default_instance();
}
::proto::steam::CMsgClientClanState_NameInfo* CMsgClientClanState::mutable_name_info() {
  set_has_name_info();
  if (name_info_ == NULL) {
    name_info_ = new ::proto::steam::CMsgClientClanState_NameInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientClanState.name_info)
  return name_info_;
}
::proto::steam::CMsgClientClanState_NameInfo* CMsgClientClanState::release_name_info() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientClanState.name_info)
  clear_has_name_info();
  ::proto::steam::CMsgClientClanState_NameInfo* temp = name_info_;
  name_info_ = NULL;
  return temp;
}
void CMsgClientClanState::set_allocated_name_info(::proto::steam::CMsgClientClanState_NameInfo* name_info) {
  delete name_info_;
  name_info_ = name_info;
  if (name_info) {
    set_has_name_info();
  } else {
    clear_has_name_info();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientClanState.name_info)
}

// optional .proto.steam.CMsgClientClanState.UserCounts user_counts = 5;
bool CMsgClientClanState::has_user_counts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientClanState::set_has_user_counts() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientClanState::clear_has_user_counts() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientClanState::clear_user_counts() {
  if (user_counts_ != NULL) user_counts_->::proto::steam::CMsgClientClanState_UserCounts::Clear();
  clear_has_user_counts();
}
const ::proto::steam::CMsgClientClanState_UserCounts& CMsgClientClanState::user_counts() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientClanState.user_counts)
  return user_counts_ != NULL ? *user_counts_
                         : *::proto::steam::CMsgClientClanState_UserCounts::internal_default_instance();
}
::proto::steam::CMsgClientClanState_UserCounts* CMsgClientClanState::mutable_user_counts() {
  set_has_user_counts();
  if (user_counts_ == NULL) {
    user_counts_ = new ::proto::steam::CMsgClientClanState_UserCounts;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientClanState.user_counts)
  return user_counts_;
}
::proto::steam::CMsgClientClanState_UserCounts* CMsgClientClanState::release_user_counts() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientClanState.user_counts)
  clear_has_user_counts();
  ::proto::steam::CMsgClientClanState_UserCounts* temp = user_counts_;
  user_counts_ = NULL;
  return temp;
}
void CMsgClientClanState::set_allocated_user_counts(::proto::steam::CMsgClientClanState_UserCounts* user_counts) {
  delete user_counts_;
  user_counts_ = user_counts;
  if (user_counts) {
    set_has_user_counts();
  } else {
    clear_has_user_counts();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientClanState.user_counts)
}

// repeated .proto.steam.CMsgClientClanState.Event events = 6;
int CMsgClientClanState::events_size() const {
  return events_.size();
}
void CMsgClientClanState::clear_events() {
  events_.Clear();
}
const ::proto::steam::CMsgClientClanState_Event& CMsgClientClanState::events(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientClanState.events)
  return events_.Get(index);
}
::proto::steam::CMsgClientClanState_Event* CMsgClientClanState::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientClanState.events)
  return events_.Mutable(index);
}
::proto::steam::CMsgClientClanState_Event* CMsgClientClanState::add_events() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientClanState.events)
  return events_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientClanState_Event >*
CMsgClientClanState::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientClanState.events)
  return &events_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientClanState_Event >&
CMsgClientClanState::events() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientClanState.events)
  return events_;
}

// repeated .proto.steam.CMsgClientClanState.Event announcements = 7;
int CMsgClientClanState::announcements_size() const {
  return announcements_.size();
}
void CMsgClientClanState::clear_announcements() {
  announcements_.Clear();
}
const ::proto::steam::CMsgClientClanState_Event& CMsgClientClanState::announcements(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientClanState.announcements)
  return announcements_.Get(index);
}
::proto::steam::CMsgClientClanState_Event* CMsgClientClanState::mutable_announcements(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientClanState.announcements)
  return announcements_.Mutable(index);
}
::proto::steam::CMsgClientClanState_Event* CMsgClientClanState::add_announcements() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientClanState.announcements)
  return announcements_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientClanState_Event >*
CMsgClientClanState::mutable_announcements() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientClanState.announcements)
  return &announcements_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientClanState_Event >&
CMsgClientClanState::announcements() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientClanState.announcements)
  return announcements_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
