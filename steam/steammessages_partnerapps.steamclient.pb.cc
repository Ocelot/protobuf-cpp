// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_partnerapps.steamclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_partnerapps.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CPartnerApps_RequestUploadToken_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPartnerApps_RequestUploadToken_Request> {
} _CPartnerApps_RequestUploadToken_Request_default_instance_;
class CPartnerApps_RequestUploadToken_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPartnerApps_RequestUploadToken_Response> {
} _CPartnerApps_RequestUploadToken_Response_default_instance_;
class CPartnerApps_FinishUpload_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPartnerApps_FinishUpload_Request> {
} _CPartnerApps_FinishUpload_Request_default_instance_;
class CPartnerApps_FinishUploadKVSign_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPartnerApps_FinishUploadKVSign_Response> {
} _CPartnerApps_FinishUploadKVSign_Response_default_instance_;
class CPartnerApps_FinishUploadLegacyDRM_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPartnerApps_FinishUploadLegacyDRM_Request> {
} _CPartnerApps_FinishUploadLegacyDRM_Request_default_instance_;
class CPartnerApps_FinishUploadLegacyDRM_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPartnerApps_FinishUploadLegacyDRM_Response> {
} _CPartnerApps_FinishUploadLegacyDRM_Response_default_instance_;
class CPartnerApps_FinishUpload_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPartnerApps_FinishUpload_Response> {
} _CPartnerApps_FinishUpload_Response_default_instance_;
class CPartnerApps_FindDRMUploads_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPartnerApps_FindDRMUploads_Request> {
} _CPartnerApps_FindDRMUploads_Request_default_instance_;
class CPartnerApps_ExistingDRMUploadDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPartnerApps_ExistingDRMUpload> {
} _CPartnerApps_ExistingDRMUpload_default_instance_;
class CPartnerApps_FindDRMUploads_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPartnerApps_FindDRMUploads_Response> {
} _CPartnerApps_FindDRMUploads_Response_default_instance_;
class CPartnerApps_Download_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPartnerApps_Download_Request> {
} _CPartnerApps_Download_Request_default_instance_;
class CPartnerApps_Download_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPartnerApps_Download_Response> {
} _CPartnerApps_Download_Response_default_instance_;

namespace protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_RequestUploadToken_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_RequestUploadToken_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_RequestUploadToken_Request, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_RequestUploadToken_Request, appid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_RequestUploadToken_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_RequestUploadToken_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_RequestUploadToken_Response, upload_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_RequestUploadToken_Response, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_RequestUploadToken_Response, routing_id_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FinishUpload_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FinishUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FinishUpload_Request, upload_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FinishUpload_Request, routing_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FinishUpload_Request, app_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FinishUploadKVSign_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FinishUploadKVSign_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FinishUploadKVSign_Response, signed_installscript_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FinishUploadLegacyDRM_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FinishUploadLegacyDRM_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FinishUploadLegacyDRM_Request, upload_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FinishUploadLegacyDRM_Request, routing_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FinishUploadLegacyDRM_Request, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FinishUploadLegacyDRM_Request, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FinishUploadLegacyDRM_Request, tool_name_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FinishUploadLegacyDRM_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FinishUploadLegacyDRM_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FinishUploadLegacyDRM_Response, file_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FinishUpload_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FinishUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FindDRMUploads_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FindDRMUploads_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FindDRMUploads_Request, app_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_ExistingDRMUpload, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_ExistingDRMUpload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_ExistingDRMUpload, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_ExistingDRMUpload, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_ExistingDRMUpload, actor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_ExistingDRMUpload, supplied_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_ExistingDRMUpload, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_ExistingDRMUpload, mod_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_ExistingDRMUpload, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_ExistingDRMUpload, orig_file_id_),
  0,
  4,
  5,
  1,
  6,
  2,
  7,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FindDRMUploads_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FindDRMUploads_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_FindDRMUploads_Response, uploads_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_Download_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_Download_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_Download_Request, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_Download_Request, app_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_Download_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_Download_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_Download_Response, download_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPartnerApps_Download_Response, app_id_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(CPartnerApps_RequestUploadToken_Request)},
  { 9, 17, sizeof(CPartnerApps_RequestUploadToken_Response)},
  { 20, 28, sizeof(CPartnerApps_FinishUpload_Request)},
  { 31, 37, sizeof(CPartnerApps_FinishUploadKVSign_Response)},
  { 38, 48, sizeof(CPartnerApps_FinishUploadLegacyDRM_Request)},
  { 53, 59, sizeof(CPartnerApps_FinishUploadLegacyDRM_Response)},
  { 60, 65, sizeof(CPartnerApps_FinishUpload_Response)},
  { 65, 71, sizeof(CPartnerApps_FindDRMUploads_Request)},
  { 72, 85, sizeof(CPartnerApps_ExistingDRMUpload)},
  { 93, 99, sizeof(CPartnerApps_FindDRMUploads_Response)},
  { 100, 107, sizeof(CPartnerApps_Download_Request)},
  { 109, 116, sizeof(CPartnerApps_Download_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPartnerApps_RequestUploadToken_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPartnerApps_RequestUploadToken_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPartnerApps_FinishUpload_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPartnerApps_FinishUploadKVSign_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPartnerApps_FinishUploadLegacyDRM_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPartnerApps_FinishUploadLegacyDRM_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPartnerApps_FinishUpload_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPartnerApps_FindDRMUploads_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPartnerApps_ExistingDRMUpload_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPartnerApps_FindDRMUploads_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPartnerApps_Download_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPartnerApps_Download_Response_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_partnerapps.steamclient.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

}  // namespace

void TableStruct::Shutdown() {
  _CPartnerApps_RequestUploadToken_Request_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CPartnerApps_RequestUploadToken_Response_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CPartnerApps_FinishUpload_Request_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CPartnerApps_FinishUploadKVSign_Response_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CPartnerApps_FinishUploadLegacyDRM_Request_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CPartnerApps_FinishUploadLegacyDRM_Response_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CPartnerApps_FinishUpload_Response_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CPartnerApps_FindDRMUploads_Request_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CPartnerApps_ExistingDRMUpload_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CPartnerApps_FindDRMUploads_Response_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CPartnerApps_Download_Request_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CPartnerApps_Download_Response_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::InitDefaults();
  _CPartnerApps_RequestUploadToken_Request_default_instance_.DefaultConstruct();
  _CPartnerApps_RequestUploadToken_Response_default_instance_.DefaultConstruct();
  _CPartnerApps_FinishUpload_Request_default_instance_.DefaultConstruct();
  _CPartnerApps_FinishUploadKVSign_Response_default_instance_.DefaultConstruct();
  _CPartnerApps_FinishUploadLegacyDRM_Request_default_instance_.DefaultConstruct();
  _CPartnerApps_FinishUploadLegacyDRM_Response_default_instance_.DefaultConstruct();
  _CPartnerApps_FinishUpload_Response_default_instance_.DefaultConstruct();
  _CPartnerApps_FindDRMUploads_Request_default_instance_.DefaultConstruct();
  _CPartnerApps_ExistingDRMUpload_default_instance_.DefaultConstruct();
  _CPartnerApps_FindDRMUploads_Response_default_instance_.DefaultConstruct();
  _CPartnerApps_Download_Request_default_instance_.DefaultConstruct();
  _CPartnerApps_Download_Response_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n+steammessages_partnerapps.steamclient."
      "proto\022\013proto.steam\032,steammessages_unifie"
      "d_base.steamclient.proto\"J\n\'CPartnerApps"
      "_RequestUploadToken_Request\022\020\n\010filename\030"
      "\001 \001(\t\022\r\n\005appid\030\002 \001(\r\"f\n(CPartnerApps_Req"
      "uestUploadToken_Response\022\024\n\014upload_token"
      "\030\001 \001(\004\022\020\n\010location\030\002 \001(\t\022\022\n\nrouting_id\030\003"
      " \001(\004\"]\n!CPartnerApps_FinishUpload_Reques"
      "t\022\024\n\014upload_token\030\001 \001(\004\022\022\n\nrouting_id\030\002 "
      "\001(\004\022\016\n\006app_id\030\003 \001(\r\"H\n(CPartnerApps_Fini"
      "shUploadKVSign_Response\022\034\n\024signed_instal"
      "lscript\030\001 \001(\t\"\210\001\n*CPartnerApps_FinishUpl"
      "oadLegacyDRM_Request\022\024\n\014upload_token\030\001 \001"
      "(\004\022\022\n\nrouting_id\030\002 \001(\004\022\016\n\006app_id\030\003 \001(\r\022\r"
      "\n\005flags\030\004 \001(\r\022\021\n\ttool_name\030\005 \001(\t\">\n+CPar"
      "tnerApps_FinishUploadLegacyDRM_Response\022"
      "\017\n\007file_id\030\001 \001(\t\"$\n\"CPartnerApps_FinishU"
      "pload_Response\"5\n#CPartnerApps_FindDRMUp"
      "loads_Request\022\016\n\006app_id\030\001 \001(\005\"\264\001\n\036CPartn"
      "erApps_ExistingDRMUpload\022\017\n\007file_id\030\001 \001("
      "\t\022\016\n\006app_id\030\002 \001(\r\022\020\n\010actor_id\030\003 \001(\005\022\025\n\rs"
      "upplied_name\030\005 \001(\t\022\r\n\005flags\030\006 \001(\r\022\020\n\010mod"
      "_type\030\007 \001(\t\022\021\n\ttimestamp\030\010 \001(\007\022\024\n\014orig_f"
      "ile_id\030\t \001(\t\"d\n$CPartnerApps_FindDRMUplo"
      "ads_Response\022<\n\007uploads\030\001 \003(\0132+.proto.st"
      "eam.CPartnerApps_ExistingDRMUpload\"@\n\035CP"
      "artnerApps_Download_Request\022\017\n\007file_id\030\001"
      " \001(\t\022\016\n\006app_id\030\002 \001(\005\"F\n\036CPartnerApps_Dow"
      "nload_Response\022\024\n\014download_url\030\001 \001(\t\022\016\n\006"
      "app_id\030\002 \001(\0052\354\013\n\013PartnerApps\022\311\001\n\030Request"
      "KVSignUploadToken\0224.proto.steam.CPartner"
      "Apps_RequestUploadToken_Request\0325.proto."
      "steam.CPartnerApps_RequestUploadToken_Re"
      "sponse\"@\202\265\030<Request upload token for ins"
      "tallscript file upload / signing\022\306\001\n\025Req"
      "uestDRMUploadToken\0224.proto.steam.CPartne"
      "rApps_RequestUploadToken_Request\0325.proto"
      ".steam.CPartnerApps_RequestUploadToken_R"
      "esponse\"@\202\265\030<Request upload token for ex"
      "ecutable file upload / processing\022\315\001\n\025Re"
      "questCEGUploadToken\0224.proto.steam.CPartn"
      "erApps_RequestUploadToken_Request\0325.prot"
      "o.steam.CPartnerApps_RequestUploadToken_"
      "Response\"G\202\265\030CRequest upload token for c"
      "ustom executable file upload / processin"
      "g\022\303\001\n\022FinishUploadKVSign\022..proto.steam.C"
      "PartnerApps_FinishUpload_Request\0325.proto"
      ".steam.CPartnerApps_FinishUploadKVSign_R"
      "esponse\"F\202\265\030BCommit method to sign an in"
      "stallscript after an upload is complete\022"
      "\274\001\n\025FinishUploadDRMUpload\0227.proto.steam."
      "CPartnerApps_FinishUploadLegacyDRM_Reque"
      "st\0328.proto.steam.CPartnerApps_FinishUplo"
      "adLegacyDRM_Response\"0\202\265\030,Commit method "
      "for executable file processing\022\261\001\n\025Finis"
      "hUploadCEGUpload\022..proto.steam.CPartnerA"
      "pps_FinishUpload_Request\032/.proto.steam.C"
      "PartnerApps_FinishUpload_Response\"7\202\265\0303C"
      "ommit method for custom executable file "
      "processing\022\245\001\n\016FindDRMUploads\0220.proto.st"
      "eam.CPartnerApps_FindDRMUploads_Request\032"
      "1.proto.steam.CPartnerApps_FindDRMUpload"
      "s_Response\".\202\265\030*Finds N most recent prio"
      "r uploads by appid\022c\n\010Download\022*.proto.s"
      "team.CPartnerApps_Download_Request\032+.pro"
      "to.steam.CPartnerApps_Download_Response\032"
      "2\202\265\030.Service methods for app management "
      "by partnersB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2696);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_partnerapps.steamclient.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPartnerApps_RequestUploadToken_Request::kFilenameFieldNumber;
const int CPartnerApps_RequestUploadToken_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPartnerApps_RequestUploadToken_Request::CPartnerApps_RequestUploadToken_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPartnerApps_RequestUploadToken_Request)
}
CPartnerApps_RequestUploadToken_Request::CPartnerApps_RequestUploadToken_Request(const CPartnerApps_RequestUploadToken_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPartnerApps_RequestUploadToken_Request)
}

void CPartnerApps_RequestUploadToken_Request::SharedCtor() {
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_ = 0u;
}

CPartnerApps_RequestUploadToken_Request::~CPartnerApps_RequestUploadToken_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPartnerApps_RequestUploadToken_Request)
  SharedDtor();
}

void CPartnerApps_RequestUploadToken_Request::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPartnerApps_RequestUploadToken_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPartnerApps_RequestUploadToken_Request::descriptor() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPartnerApps_RequestUploadToken_Request& CPartnerApps_RequestUploadToken_Request::default_instance() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPartnerApps_RequestUploadToken_Request* CPartnerApps_RequestUploadToken_Request::New(::google::protobuf::Arena* arena) const {
  CPartnerApps_RequestUploadToken_Request* n = new CPartnerApps_RequestUploadToken_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPartnerApps_RequestUploadToken_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPartnerApps_RequestUploadToken_Request)
  if (has_filename()) {
    GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*filename_.UnsafeRawStringPointer())->clear();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPartnerApps_RequestUploadToken_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPartnerApps_RequestUploadToken_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPartnerApps_RequestUploadToken_Request.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPartnerApps_RequestUploadToken_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPartnerApps_RequestUploadToken_Request)
  return false;
#undef DO_
}

void CPartnerApps_RequestUploadToken_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPartnerApps_RequestUploadToken_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPartnerApps_RequestUploadToken_Request.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPartnerApps_RequestUploadToken_Request)
}

::google::protobuf::uint8* CPartnerApps_RequestUploadToken_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPartnerApps_RequestUploadToken_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPartnerApps_RequestUploadToken_Request.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPartnerApps_RequestUploadToken_Request)
  return target;
}

size_t CPartnerApps_RequestUploadToken_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPartnerApps_RequestUploadToken_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPartnerApps_RequestUploadToken_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPartnerApps_RequestUploadToken_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPartnerApps_RequestUploadToken_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPartnerApps_RequestUploadToken_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPartnerApps_RequestUploadToken_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPartnerApps_RequestUploadToken_Request)
    MergeFrom(*source);
  }
}

void CPartnerApps_RequestUploadToken_Request::MergeFrom(const CPartnerApps_RequestUploadToken_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPartnerApps_RequestUploadToken_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPartnerApps_RequestUploadToken_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPartnerApps_RequestUploadToken_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPartnerApps_RequestUploadToken_Request::CopyFrom(const CPartnerApps_RequestUploadToken_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPartnerApps_RequestUploadToken_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_RequestUploadToken_Request::IsInitialized() const {
  return true;
}

void CPartnerApps_RequestUploadToken_Request::Swap(CPartnerApps_RequestUploadToken_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPartnerApps_RequestUploadToken_Request::InternalSwap(CPartnerApps_RequestUploadToken_Request* other) {
  filename_.Swap(&other->filename_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPartnerApps_RequestUploadToken_Request::GetMetadata() const {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPartnerApps_RequestUploadToken_Request

// optional string filename = 1;
bool CPartnerApps_RequestUploadToken_Request::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPartnerApps_RequestUploadToken_Request::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
void CPartnerApps_RequestUploadToken_Request::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPartnerApps_RequestUploadToken_Request::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& CPartnerApps_RequestUploadToken_Request::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_RequestUploadToken_Request.filename)
  return filename_.GetNoArena();
}
void CPartnerApps_RequestUploadToken_Request::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_RequestUploadToken_Request.filename)
}
#if LANG_CXX11
void CPartnerApps_RequestUploadToken_Request::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPartnerApps_RequestUploadToken_Request.filename)
}
#endif
void CPartnerApps_RequestUploadToken_Request::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPartnerApps_RequestUploadToken_Request.filename)
}
void CPartnerApps_RequestUploadToken_Request::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPartnerApps_RequestUploadToken_Request.filename)
}
::std::string* CPartnerApps_RequestUploadToken_Request::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPartnerApps_RequestUploadToken_Request.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPartnerApps_RequestUploadToken_Request::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.CPartnerApps_RequestUploadToken_Request.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPartnerApps_RequestUploadToken_Request::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPartnerApps_RequestUploadToken_Request.filename)
}

// optional uint32 appid = 2;
bool CPartnerApps_RequestUploadToken_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPartnerApps_RequestUploadToken_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CPartnerApps_RequestUploadToken_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPartnerApps_RequestUploadToken_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CPartnerApps_RequestUploadToken_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_RequestUploadToken_Request.appid)
  return appid_;
}
void CPartnerApps_RequestUploadToken_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_RequestUploadToken_Request.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPartnerApps_RequestUploadToken_Response::kUploadTokenFieldNumber;
const int CPartnerApps_RequestUploadToken_Response::kLocationFieldNumber;
const int CPartnerApps_RequestUploadToken_Response::kRoutingIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPartnerApps_RequestUploadToken_Response::CPartnerApps_RequestUploadToken_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPartnerApps_RequestUploadToken_Response)
}
CPartnerApps_RequestUploadToken_Response::CPartnerApps_RequestUploadToken_Response(const CPartnerApps_RequestUploadToken_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_location()) {
    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  ::memcpy(&upload_token_, &from.upload_token_,
    reinterpret_cast<char*>(&routing_id_) -
    reinterpret_cast<char*>(&upload_token_) + sizeof(routing_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPartnerApps_RequestUploadToken_Response)
}

void CPartnerApps_RequestUploadToken_Response::SharedCtor() {
  _cached_size_ = 0;
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&upload_token_, 0, reinterpret_cast<char*>(&routing_id_) -
    reinterpret_cast<char*>(&upload_token_) + sizeof(routing_id_));
}

CPartnerApps_RequestUploadToken_Response::~CPartnerApps_RequestUploadToken_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPartnerApps_RequestUploadToken_Response)
  SharedDtor();
}

void CPartnerApps_RequestUploadToken_Response::SharedDtor() {
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPartnerApps_RequestUploadToken_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPartnerApps_RequestUploadToken_Response::descriptor() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPartnerApps_RequestUploadToken_Response& CPartnerApps_RequestUploadToken_Response::default_instance() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPartnerApps_RequestUploadToken_Response* CPartnerApps_RequestUploadToken_Response::New(::google::protobuf::Arena* arena) const {
  CPartnerApps_RequestUploadToken_Response* n = new CPartnerApps_RequestUploadToken_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPartnerApps_RequestUploadToken_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPartnerApps_RequestUploadToken_Response)
  if (has_location()) {
    GOOGLE_DCHECK(!location_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*location_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&upload_token_, 0, reinterpret_cast<char*>(&routing_id_) -
      reinterpret_cast<char*>(&upload_token_) + sizeof(routing_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPartnerApps_RequestUploadToken_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPartnerApps_RequestUploadToken_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 upload_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_upload_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &upload_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPartnerApps_RequestUploadToken_Response.location");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 routing_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_routing_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &routing_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPartnerApps_RequestUploadToken_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPartnerApps_RequestUploadToken_Response)
  return false;
#undef DO_
}

void CPartnerApps_RequestUploadToken_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPartnerApps_RequestUploadToken_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 upload_token = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->upload_token(), output);
  }

  // optional string location = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPartnerApps_RequestUploadToken_Response.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->location(), output);
  }

  // optional uint64 routing_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->routing_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPartnerApps_RequestUploadToken_Response)
}

::google::protobuf::uint8* CPartnerApps_RequestUploadToken_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPartnerApps_RequestUploadToken_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 upload_token = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->upload_token(), target);
  }

  // optional string location = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPartnerApps_RequestUploadToken_Response.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->location(), target);
  }

  // optional uint64 routing_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->routing_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPartnerApps_RequestUploadToken_Response)
  return target;
}

size_t CPartnerApps_RequestUploadToken_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPartnerApps_RequestUploadToken_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

    // optional uint64 upload_token = 1;
    if (has_upload_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->upload_token());
    }

    // optional uint64 routing_id = 3;
    if (has_routing_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->routing_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPartnerApps_RequestUploadToken_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPartnerApps_RequestUploadToken_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPartnerApps_RequestUploadToken_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPartnerApps_RequestUploadToken_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPartnerApps_RequestUploadToken_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPartnerApps_RequestUploadToken_Response)
    MergeFrom(*source);
  }
}

void CPartnerApps_RequestUploadToken_Response::MergeFrom(const CPartnerApps_RequestUploadToken_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPartnerApps_RequestUploadToken_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_location();
      location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
    }
    if (cached_has_bits & 0x00000002u) {
      upload_token_ = from.upload_token_;
    }
    if (cached_has_bits & 0x00000004u) {
      routing_id_ = from.routing_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPartnerApps_RequestUploadToken_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPartnerApps_RequestUploadToken_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPartnerApps_RequestUploadToken_Response::CopyFrom(const CPartnerApps_RequestUploadToken_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPartnerApps_RequestUploadToken_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_RequestUploadToken_Response::IsInitialized() const {
  return true;
}

void CPartnerApps_RequestUploadToken_Response::Swap(CPartnerApps_RequestUploadToken_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPartnerApps_RequestUploadToken_Response::InternalSwap(CPartnerApps_RequestUploadToken_Response* other) {
  location_.Swap(&other->location_);
  std::swap(upload_token_, other->upload_token_);
  std::swap(routing_id_, other->routing_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPartnerApps_RequestUploadToken_Response::GetMetadata() const {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPartnerApps_RequestUploadToken_Response

// optional uint64 upload_token = 1;
bool CPartnerApps_RequestUploadToken_Response::has_upload_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPartnerApps_RequestUploadToken_Response::set_has_upload_token() {
  _has_bits_[0] |= 0x00000002u;
}
void CPartnerApps_RequestUploadToken_Response::clear_has_upload_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPartnerApps_RequestUploadToken_Response::clear_upload_token() {
  upload_token_ = GOOGLE_ULONGLONG(0);
  clear_has_upload_token();
}
::google::protobuf::uint64 CPartnerApps_RequestUploadToken_Response::upload_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_RequestUploadToken_Response.upload_token)
  return upload_token_;
}
void CPartnerApps_RequestUploadToken_Response::set_upload_token(::google::protobuf::uint64 value) {
  set_has_upload_token();
  upload_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_RequestUploadToken_Response.upload_token)
}

// optional string location = 2;
bool CPartnerApps_RequestUploadToken_Response::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPartnerApps_RequestUploadToken_Response::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void CPartnerApps_RequestUploadToken_Response::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPartnerApps_RequestUploadToken_Response::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_location();
}
const ::std::string& CPartnerApps_RequestUploadToken_Response::location() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_RequestUploadToken_Response.location)
  return location_.GetNoArena();
}
void CPartnerApps_RequestUploadToken_Response::set_location(const ::std::string& value) {
  set_has_location();
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_RequestUploadToken_Response.location)
}
#if LANG_CXX11
void CPartnerApps_RequestUploadToken_Response::set_location(::std::string&& value) {
  set_has_location();
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPartnerApps_RequestUploadToken_Response.location)
}
#endif
void CPartnerApps_RequestUploadToken_Response::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_location();
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPartnerApps_RequestUploadToken_Response.location)
}
void CPartnerApps_RequestUploadToken_Response::set_location(const char* value, size_t size) {
  set_has_location();
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPartnerApps_RequestUploadToken_Response.location)
}
::std::string* CPartnerApps_RequestUploadToken_Response::mutable_location() {
  set_has_location();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPartnerApps_RequestUploadToken_Response.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPartnerApps_RequestUploadToken_Response::release_location() {
  // @@protoc_insertion_point(field_release:proto.steam.CPartnerApps_RequestUploadToken_Response.location)
  clear_has_location();
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPartnerApps_RequestUploadToken_Response::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    set_has_location();
  } else {
    clear_has_location();
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPartnerApps_RequestUploadToken_Response.location)
}

// optional uint64 routing_id = 3;
bool CPartnerApps_RequestUploadToken_Response::has_routing_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPartnerApps_RequestUploadToken_Response::set_has_routing_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CPartnerApps_RequestUploadToken_Response::clear_has_routing_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPartnerApps_RequestUploadToken_Response::clear_routing_id() {
  routing_id_ = GOOGLE_ULONGLONG(0);
  clear_has_routing_id();
}
::google::protobuf::uint64 CPartnerApps_RequestUploadToken_Response::routing_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_RequestUploadToken_Response.routing_id)
  return routing_id_;
}
void CPartnerApps_RequestUploadToken_Response::set_routing_id(::google::protobuf::uint64 value) {
  set_has_routing_id();
  routing_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_RequestUploadToken_Response.routing_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPartnerApps_FinishUpload_Request::kUploadTokenFieldNumber;
const int CPartnerApps_FinishUpload_Request::kRoutingIdFieldNumber;
const int CPartnerApps_FinishUpload_Request::kAppIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPartnerApps_FinishUpload_Request::CPartnerApps_FinishUpload_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPartnerApps_FinishUpload_Request)
}
CPartnerApps_FinishUpload_Request::CPartnerApps_FinishUpload_Request(const CPartnerApps_FinishUpload_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&upload_token_, &from.upload_token_,
    reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&upload_token_) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPartnerApps_FinishUpload_Request)
}

void CPartnerApps_FinishUpload_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&upload_token_, 0, reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&upload_token_) + sizeof(app_id_));
}

CPartnerApps_FinishUpload_Request::~CPartnerApps_FinishUpload_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPartnerApps_FinishUpload_Request)
  SharedDtor();
}

void CPartnerApps_FinishUpload_Request::SharedDtor() {
}

void CPartnerApps_FinishUpload_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPartnerApps_FinishUpload_Request::descriptor() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPartnerApps_FinishUpload_Request& CPartnerApps_FinishUpload_Request::default_instance() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPartnerApps_FinishUpload_Request* CPartnerApps_FinishUpload_Request::New(::google::protobuf::Arena* arena) const {
  CPartnerApps_FinishUpload_Request* n = new CPartnerApps_FinishUpload_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPartnerApps_FinishUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPartnerApps_FinishUpload_Request)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&upload_token_, 0, reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&upload_token_) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPartnerApps_FinishUpload_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPartnerApps_FinishUpload_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 upload_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_upload_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &upload_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 routing_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_routing_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &routing_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPartnerApps_FinishUpload_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPartnerApps_FinishUpload_Request)
  return false;
#undef DO_
}

void CPartnerApps_FinishUpload_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPartnerApps_FinishUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 upload_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->upload_token(), output);
  }

  // optional uint64 routing_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->routing_id(), output);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->app_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPartnerApps_FinishUpload_Request)
}

::google::protobuf::uint8* CPartnerApps_FinishUpload_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPartnerApps_FinishUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 upload_token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->upload_token(), target);
  }

  // optional uint64 routing_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->routing_id(), target);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->app_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPartnerApps_FinishUpload_Request)
  return target;
}

size_t CPartnerApps_FinishUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPartnerApps_FinishUpload_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 upload_token = 1;
    if (has_upload_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->upload_token());
    }

    // optional uint64 routing_id = 2;
    if (has_routing_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->routing_id());
    }

    // optional uint32 app_id = 3;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPartnerApps_FinishUpload_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPartnerApps_FinishUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPartnerApps_FinishUpload_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPartnerApps_FinishUpload_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPartnerApps_FinishUpload_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPartnerApps_FinishUpload_Request)
    MergeFrom(*source);
  }
}

void CPartnerApps_FinishUpload_Request::MergeFrom(const CPartnerApps_FinishUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPartnerApps_FinishUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      upload_token_ = from.upload_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      routing_id_ = from.routing_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPartnerApps_FinishUpload_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPartnerApps_FinishUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPartnerApps_FinishUpload_Request::CopyFrom(const CPartnerApps_FinishUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPartnerApps_FinishUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_FinishUpload_Request::IsInitialized() const {
  return true;
}

void CPartnerApps_FinishUpload_Request::Swap(CPartnerApps_FinishUpload_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPartnerApps_FinishUpload_Request::InternalSwap(CPartnerApps_FinishUpload_Request* other) {
  std::swap(upload_token_, other->upload_token_);
  std::swap(routing_id_, other->routing_id_);
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPartnerApps_FinishUpload_Request::GetMetadata() const {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPartnerApps_FinishUpload_Request

// optional uint64 upload_token = 1;
bool CPartnerApps_FinishUpload_Request::has_upload_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPartnerApps_FinishUpload_Request::set_has_upload_token() {
  _has_bits_[0] |= 0x00000001u;
}
void CPartnerApps_FinishUpload_Request::clear_has_upload_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPartnerApps_FinishUpload_Request::clear_upload_token() {
  upload_token_ = GOOGLE_ULONGLONG(0);
  clear_has_upload_token();
}
::google::protobuf::uint64 CPartnerApps_FinishUpload_Request::upload_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_FinishUpload_Request.upload_token)
  return upload_token_;
}
void CPartnerApps_FinishUpload_Request::set_upload_token(::google::protobuf::uint64 value) {
  set_has_upload_token();
  upload_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_FinishUpload_Request.upload_token)
}

// optional uint64 routing_id = 2;
bool CPartnerApps_FinishUpload_Request::has_routing_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPartnerApps_FinishUpload_Request::set_has_routing_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CPartnerApps_FinishUpload_Request::clear_has_routing_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPartnerApps_FinishUpload_Request::clear_routing_id() {
  routing_id_ = GOOGLE_ULONGLONG(0);
  clear_has_routing_id();
}
::google::protobuf::uint64 CPartnerApps_FinishUpload_Request::routing_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_FinishUpload_Request.routing_id)
  return routing_id_;
}
void CPartnerApps_FinishUpload_Request::set_routing_id(::google::protobuf::uint64 value) {
  set_has_routing_id();
  routing_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_FinishUpload_Request.routing_id)
}

// optional uint32 app_id = 3;
bool CPartnerApps_FinishUpload_Request::has_app_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPartnerApps_FinishUpload_Request::set_has_app_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CPartnerApps_FinishUpload_Request::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPartnerApps_FinishUpload_Request::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CPartnerApps_FinishUpload_Request::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_FinishUpload_Request.app_id)
  return app_id_;
}
void CPartnerApps_FinishUpload_Request::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_FinishUpload_Request.app_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPartnerApps_FinishUploadKVSign_Response::kSignedInstallscriptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPartnerApps_FinishUploadKVSign_Response::CPartnerApps_FinishUploadKVSign_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPartnerApps_FinishUploadKVSign_Response)
}
CPartnerApps_FinishUploadKVSign_Response::CPartnerApps_FinishUploadKVSign_Response(const CPartnerApps_FinishUploadKVSign_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signed_installscript_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signed_installscript()) {
    signed_installscript_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signed_installscript_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPartnerApps_FinishUploadKVSign_Response)
}

void CPartnerApps_FinishUploadKVSign_Response::SharedCtor() {
  _cached_size_ = 0;
  signed_installscript_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CPartnerApps_FinishUploadKVSign_Response::~CPartnerApps_FinishUploadKVSign_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPartnerApps_FinishUploadKVSign_Response)
  SharedDtor();
}

void CPartnerApps_FinishUploadKVSign_Response::SharedDtor() {
  signed_installscript_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPartnerApps_FinishUploadKVSign_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPartnerApps_FinishUploadKVSign_Response::descriptor() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPartnerApps_FinishUploadKVSign_Response& CPartnerApps_FinishUploadKVSign_Response::default_instance() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPartnerApps_FinishUploadKVSign_Response* CPartnerApps_FinishUploadKVSign_Response::New(::google::protobuf::Arena* arena) const {
  CPartnerApps_FinishUploadKVSign_Response* n = new CPartnerApps_FinishUploadKVSign_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPartnerApps_FinishUploadKVSign_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPartnerApps_FinishUploadKVSign_Response)
  if (has_signed_installscript()) {
    GOOGLE_DCHECK(!signed_installscript_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*signed_installscript_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPartnerApps_FinishUploadKVSign_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPartnerApps_FinishUploadKVSign_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string signed_installscript = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signed_installscript()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signed_installscript().data(), this->signed_installscript().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPartnerApps_FinishUploadKVSign_Response.signed_installscript");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPartnerApps_FinishUploadKVSign_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPartnerApps_FinishUploadKVSign_Response)
  return false;
#undef DO_
}

void CPartnerApps_FinishUploadKVSign_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPartnerApps_FinishUploadKVSign_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string signed_installscript = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signed_installscript().data(), this->signed_installscript().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPartnerApps_FinishUploadKVSign_Response.signed_installscript");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->signed_installscript(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPartnerApps_FinishUploadKVSign_Response)
}

::google::protobuf::uint8* CPartnerApps_FinishUploadKVSign_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPartnerApps_FinishUploadKVSign_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string signed_installscript = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signed_installscript().data(), this->signed_installscript().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPartnerApps_FinishUploadKVSign_Response.signed_installscript");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signed_installscript(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPartnerApps_FinishUploadKVSign_Response)
  return target;
}

size_t CPartnerApps_FinishUploadKVSign_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPartnerApps_FinishUploadKVSign_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string signed_installscript = 1;
  if (has_signed_installscript()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signed_installscript());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPartnerApps_FinishUploadKVSign_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPartnerApps_FinishUploadKVSign_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPartnerApps_FinishUploadKVSign_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPartnerApps_FinishUploadKVSign_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPartnerApps_FinishUploadKVSign_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPartnerApps_FinishUploadKVSign_Response)
    MergeFrom(*source);
  }
}

void CPartnerApps_FinishUploadKVSign_Response::MergeFrom(const CPartnerApps_FinishUploadKVSign_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPartnerApps_FinishUploadKVSign_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_signed_installscript()) {
    set_has_signed_installscript();
    signed_installscript_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signed_installscript_);
  }
}

void CPartnerApps_FinishUploadKVSign_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPartnerApps_FinishUploadKVSign_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPartnerApps_FinishUploadKVSign_Response::CopyFrom(const CPartnerApps_FinishUploadKVSign_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPartnerApps_FinishUploadKVSign_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_FinishUploadKVSign_Response::IsInitialized() const {
  return true;
}

void CPartnerApps_FinishUploadKVSign_Response::Swap(CPartnerApps_FinishUploadKVSign_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPartnerApps_FinishUploadKVSign_Response::InternalSwap(CPartnerApps_FinishUploadKVSign_Response* other) {
  signed_installscript_.Swap(&other->signed_installscript_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPartnerApps_FinishUploadKVSign_Response::GetMetadata() const {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPartnerApps_FinishUploadKVSign_Response

// optional string signed_installscript = 1;
bool CPartnerApps_FinishUploadKVSign_Response::has_signed_installscript() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPartnerApps_FinishUploadKVSign_Response::set_has_signed_installscript() {
  _has_bits_[0] |= 0x00000001u;
}
void CPartnerApps_FinishUploadKVSign_Response::clear_has_signed_installscript() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPartnerApps_FinishUploadKVSign_Response::clear_signed_installscript() {
  signed_installscript_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signed_installscript();
}
const ::std::string& CPartnerApps_FinishUploadKVSign_Response::signed_installscript() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_FinishUploadKVSign_Response.signed_installscript)
  return signed_installscript_.GetNoArena();
}
void CPartnerApps_FinishUploadKVSign_Response::set_signed_installscript(const ::std::string& value) {
  set_has_signed_installscript();
  signed_installscript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_FinishUploadKVSign_Response.signed_installscript)
}
#if LANG_CXX11
void CPartnerApps_FinishUploadKVSign_Response::set_signed_installscript(::std::string&& value) {
  set_has_signed_installscript();
  signed_installscript_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPartnerApps_FinishUploadKVSign_Response.signed_installscript)
}
#endif
void CPartnerApps_FinishUploadKVSign_Response::set_signed_installscript(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signed_installscript();
  signed_installscript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPartnerApps_FinishUploadKVSign_Response.signed_installscript)
}
void CPartnerApps_FinishUploadKVSign_Response::set_signed_installscript(const char* value, size_t size) {
  set_has_signed_installscript();
  signed_installscript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPartnerApps_FinishUploadKVSign_Response.signed_installscript)
}
::std::string* CPartnerApps_FinishUploadKVSign_Response::mutable_signed_installscript() {
  set_has_signed_installscript();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPartnerApps_FinishUploadKVSign_Response.signed_installscript)
  return signed_installscript_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPartnerApps_FinishUploadKVSign_Response::release_signed_installscript() {
  // @@protoc_insertion_point(field_release:proto.steam.CPartnerApps_FinishUploadKVSign_Response.signed_installscript)
  clear_has_signed_installscript();
  return signed_installscript_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPartnerApps_FinishUploadKVSign_Response::set_allocated_signed_installscript(::std::string* signed_installscript) {
  if (signed_installscript != NULL) {
    set_has_signed_installscript();
  } else {
    clear_has_signed_installscript();
  }
  signed_installscript_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signed_installscript);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPartnerApps_FinishUploadKVSign_Response.signed_installscript)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPartnerApps_FinishUploadLegacyDRM_Request::kUploadTokenFieldNumber;
const int CPartnerApps_FinishUploadLegacyDRM_Request::kRoutingIdFieldNumber;
const int CPartnerApps_FinishUploadLegacyDRM_Request::kAppIdFieldNumber;
const int CPartnerApps_FinishUploadLegacyDRM_Request::kFlagsFieldNumber;
const int CPartnerApps_FinishUploadLegacyDRM_Request::kToolNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPartnerApps_FinishUploadLegacyDRM_Request::CPartnerApps_FinishUploadLegacyDRM_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request)
}
CPartnerApps_FinishUploadLegacyDRM_Request::CPartnerApps_FinishUploadLegacyDRM_Request(const CPartnerApps_FinishUploadLegacyDRM_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tool_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tool_name()) {
    tool_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tool_name_);
  }
  ::memcpy(&upload_token_, &from.upload_token_,
    reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&upload_token_) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request)
}

void CPartnerApps_FinishUploadLegacyDRM_Request::SharedCtor() {
  _cached_size_ = 0;
  tool_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&upload_token_, 0, reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&upload_token_) + sizeof(flags_));
}

CPartnerApps_FinishUploadLegacyDRM_Request::~CPartnerApps_FinishUploadLegacyDRM_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request)
  SharedDtor();
}

void CPartnerApps_FinishUploadLegacyDRM_Request::SharedDtor() {
  tool_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPartnerApps_FinishUploadLegacyDRM_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPartnerApps_FinishUploadLegacyDRM_Request::descriptor() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPartnerApps_FinishUploadLegacyDRM_Request& CPartnerApps_FinishUploadLegacyDRM_Request::default_instance() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPartnerApps_FinishUploadLegacyDRM_Request* CPartnerApps_FinishUploadLegacyDRM_Request::New(::google::protobuf::Arena* arena) const {
  CPartnerApps_FinishUploadLegacyDRM_Request* n = new CPartnerApps_FinishUploadLegacyDRM_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPartnerApps_FinishUploadLegacyDRM_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request)
  if (has_tool_name()) {
    GOOGLE_DCHECK(!tool_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*tool_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&upload_token_, 0, reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&upload_token_) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPartnerApps_FinishUploadLegacyDRM_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 upload_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_upload_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &upload_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 routing_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_routing_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &routing_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tool_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tool_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tool_name().data(), this->tool_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request.tool_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request)
  return false;
#undef DO_
}

void CPartnerApps_FinishUploadLegacyDRM_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 upload_token = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->upload_token(), output);
  }

  // optional uint64 routing_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->routing_id(), output);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->app_id(), output);
  }

  // optional uint32 flags = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flags(), output);
  }

  // optional string tool_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tool_name().data(), this->tool_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request.tool_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tool_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request)
}

::google::protobuf::uint8* CPartnerApps_FinishUploadLegacyDRM_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 upload_token = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->upload_token(), target);
  }

  // optional uint64 routing_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->routing_id(), target);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->app_id(), target);
  }

  // optional uint32 flags = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flags(), target);
  }

  // optional string tool_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tool_name().data(), this->tool_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request.tool_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tool_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request)
  return target;
}

size_t CPartnerApps_FinishUploadLegacyDRM_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string tool_name = 5;
    if (has_tool_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tool_name());
    }

    // optional uint64 upload_token = 1;
    if (has_upload_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->upload_token());
    }

    // optional uint64 routing_id = 2;
    if (has_routing_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->routing_id());
    }

    // optional uint32 app_id = 3;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 flags = 4;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPartnerApps_FinishUploadLegacyDRM_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPartnerApps_FinishUploadLegacyDRM_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPartnerApps_FinishUploadLegacyDRM_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request)
    MergeFrom(*source);
  }
}

void CPartnerApps_FinishUploadLegacyDRM_Request::MergeFrom(const CPartnerApps_FinishUploadLegacyDRM_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tool_name();
      tool_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tool_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      upload_token_ = from.upload_token_;
    }
    if (cached_has_bits & 0x00000004u) {
      routing_id_ = from.routing_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPartnerApps_FinishUploadLegacyDRM_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPartnerApps_FinishUploadLegacyDRM_Request::CopyFrom(const CPartnerApps_FinishUploadLegacyDRM_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_FinishUploadLegacyDRM_Request::IsInitialized() const {
  return true;
}

void CPartnerApps_FinishUploadLegacyDRM_Request::Swap(CPartnerApps_FinishUploadLegacyDRM_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPartnerApps_FinishUploadLegacyDRM_Request::InternalSwap(CPartnerApps_FinishUploadLegacyDRM_Request* other) {
  tool_name_.Swap(&other->tool_name_);
  std::swap(upload_token_, other->upload_token_);
  std::swap(routing_id_, other->routing_id_);
  std::swap(app_id_, other->app_id_);
  std::swap(flags_, other->flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPartnerApps_FinishUploadLegacyDRM_Request::GetMetadata() const {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPartnerApps_FinishUploadLegacyDRM_Request

// optional uint64 upload_token = 1;
bool CPartnerApps_FinishUploadLegacyDRM_Request::has_upload_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPartnerApps_FinishUploadLegacyDRM_Request::set_has_upload_token() {
  _has_bits_[0] |= 0x00000002u;
}
void CPartnerApps_FinishUploadLegacyDRM_Request::clear_has_upload_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPartnerApps_FinishUploadLegacyDRM_Request::clear_upload_token() {
  upload_token_ = GOOGLE_ULONGLONG(0);
  clear_has_upload_token();
}
::google::protobuf::uint64 CPartnerApps_FinishUploadLegacyDRM_Request::upload_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request.upload_token)
  return upload_token_;
}
void CPartnerApps_FinishUploadLegacyDRM_Request::set_upload_token(::google::protobuf::uint64 value) {
  set_has_upload_token();
  upload_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request.upload_token)
}

// optional uint64 routing_id = 2;
bool CPartnerApps_FinishUploadLegacyDRM_Request::has_routing_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPartnerApps_FinishUploadLegacyDRM_Request::set_has_routing_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CPartnerApps_FinishUploadLegacyDRM_Request::clear_has_routing_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPartnerApps_FinishUploadLegacyDRM_Request::clear_routing_id() {
  routing_id_ = GOOGLE_ULONGLONG(0);
  clear_has_routing_id();
}
::google::protobuf::uint64 CPartnerApps_FinishUploadLegacyDRM_Request::routing_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request.routing_id)
  return routing_id_;
}
void CPartnerApps_FinishUploadLegacyDRM_Request::set_routing_id(::google::protobuf::uint64 value) {
  set_has_routing_id();
  routing_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request.routing_id)
}

// optional uint32 app_id = 3;
bool CPartnerApps_FinishUploadLegacyDRM_Request::has_app_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CPartnerApps_FinishUploadLegacyDRM_Request::set_has_app_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CPartnerApps_FinishUploadLegacyDRM_Request::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CPartnerApps_FinishUploadLegacyDRM_Request::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CPartnerApps_FinishUploadLegacyDRM_Request::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request.app_id)
  return app_id_;
}
void CPartnerApps_FinishUploadLegacyDRM_Request::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request.app_id)
}

// optional uint32 flags = 4;
bool CPartnerApps_FinishUploadLegacyDRM_Request::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CPartnerApps_FinishUploadLegacyDRM_Request::set_has_flags() {
  _has_bits_[0] |= 0x00000010u;
}
void CPartnerApps_FinishUploadLegacyDRM_Request::clear_has_flags() {
  _has_bits_[0] &= ~0x00000010u;
}
void CPartnerApps_FinishUploadLegacyDRM_Request::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 CPartnerApps_FinishUploadLegacyDRM_Request::flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request.flags)
  return flags_;
}
void CPartnerApps_FinishUploadLegacyDRM_Request::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request.flags)
}

// optional string tool_name = 5;
bool CPartnerApps_FinishUploadLegacyDRM_Request::has_tool_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPartnerApps_FinishUploadLegacyDRM_Request::set_has_tool_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CPartnerApps_FinishUploadLegacyDRM_Request::clear_has_tool_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPartnerApps_FinishUploadLegacyDRM_Request::clear_tool_name() {
  tool_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tool_name();
}
const ::std::string& CPartnerApps_FinishUploadLegacyDRM_Request::tool_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request.tool_name)
  return tool_name_.GetNoArena();
}
void CPartnerApps_FinishUploadLegacyDRM_Request::set_tool_name(const ::std::string& value) {
  set_has_tool_name();
  tool_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request.tool_name)
}
#if LANG_CXX11
void CPartnerApps_FinishUploadLegacyDRM_Request::set_tool_name(::std::string&& value) {
  set_has_tool_name();
  tool_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request.tool_name)
}
#endif
void CPartnerApps_FinishUploadLegacyDRM_Request::set_tool_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tool_name();
  tool_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request.tool_name)
}
void CPartnerApps_FinishUploadLegacyDRM_Request::set_tool_name(const char* value, size_t size) {
  set_has_tool_name();
  tool_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request.tool_name)
}
::std::string* CPartnerApps_FinishUploadLegacyDRM_Request::mutable_tool_name() {
  set_has_tool_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request.tool_name)
  return tool_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPartnerApps_FinishUploadLegacyDRM_Request::release_tool_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request.tool_name)
  clear_has_tool_name();
  return tool_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPartnerApps_FinishUploadLegacyDRM_Request::set_allocated_tool_name(::std::string* tool_name) {
  if (tool_name != NULL) {
    set_has_tool_name();
  } else {
    clear_has_tool_name();
  }
  tool_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tool_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Request.tool_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPartnerApps_FinishUploadLegacyDRM_Response::kFileIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPartnerApps_FinishUploadLegacyDRM_Response::CPartnerApps_FinishUploadLegacyDRM_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response)
}
CPartnerApps_FinishUploadLegacyDRM_Response::CPartnerApps_FinishUploadLegacyDRM_Response(const CPartnerApps_FinishUploadLegacyDRM_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_id()) {
    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response)
}

void CPartnerApps_FinishUploadLegacyDRM_Response::SharedCtor() {
  _cached_size_ = 0;
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CPartnerApps_FinishUploadLegacyDRM_Response::~CPartnerApps_FinishUploadLegacyDRM_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response)
  SharedDtor();
}

void CPartnerApps_FinishUploadLegacyDRM_Response::SharedDtor() {
  file_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPartnerApps_FinishUploadLegacyDRM_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPartnerApps_FinishUploadLegacyDRM_Response::descriptor() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPartnerApps_FinishUploadLegacyDRM_Response& CPartnerApps_FinishUploadLegacyDRM_Response::default_instance() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPartnerApps_FinishUploadLegacyDRM_Response* CPartnerApps_FinishUploadLegacyDRM_Response::New(::google::protobuf::Arena* arena) const {
  CPartnerApps_FinishUploadLegacyDRM_Response* n = new CPartnerApps_FinishUploadLegacyDRM_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPartnerApps_FinishUploadLegacyDRM_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response)
  if (has_file_id()) {
    GOOGLE_DCHECK(!file_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*file_id_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPartnerApps_FinishUploadLegacyDRM_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response.file_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response)
  return false;
#undef DO_
}

void CPartnerApps_FinishUploadLegacyDRM_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response.file_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response)
}

::google::protobuf::uint8* CPartnerApps_FinishUploadLegacyDRM_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response.file_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response)
  return target;
}

size_t CPartnerApps_FinishUploadLegacyDRM_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string file_id = 1;
  if (has_file_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPartnerApps_FinishUploadLegacyDRM_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPartnerApps_FinishUploadLegacyDRM_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPartnerApps_FinishUploadLegacyDRM_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response)
    MergeFrom(*source);
  }
}

void CPartnerApps_FinishUploadLegacyDRM_Response::MergeFrom(const CPartnerApps_FinishUploadLegacyDRM_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_file_id()) {
    set_has_file_id();
    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
}

void CPartnerApps_FinishUploadLegacyDRM_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPartnerApps_FinishUploadLegacyDRM_Response::CopyFrom(const CPartnerApps_FinishUploadLegacyDRM_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_FinishUploadLegacyDRM_Response::IsInitialized() const {
  return true;
}

void CPartnerApps_FinishUploadLegacyDRM_Response::Swap(CPartnerApps_FinishUploadLegacyDRM_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPartnerApps_FinishUploadLegacyDRM_Response::InternalSwap(CPartnerApps_FinishUploadLegacyDRM_Response* other) {
  file_id_.Swap(&other->file_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPartnerApps_FinishUploadLegacyDRM_Response::GetMetadata() const {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPartnerApps_FinishUploadLegacyDRM_Response

// optional string file_id = 1;
bool CPartnerApps_FinishUploadLegacyDRM_Response::has_file_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPartnerApps_FinishUploadLegacyDRM_Response::set_has_file_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CPartnerApps_FinishUploadLegacyDRM_Response::clear_has_file_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPartnerApps_FinishUploadLegacyDRM_Response::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_id();
}
const ::std::string& CPartnerApps_FinishUploadLegacyDRM_Response::file_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response.file_id)
  return file_id_.GetNoArena();
}
void CPartnerApps_FinishUploadLegacyDRM_Response::set_file_id(const ::std::string& value) {
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response.file_id)
}
#if LANG_CXX11
void CPartnerApps_FinishUploadLegacyDRM_Response::set_file_id(::std::string&& value) {
  set_has_file_id();
  file_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response.file_id)
}
#endif
void CPartnerApps_FinishUploadLegacyDRM_Response::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response.file_id)
}
void CPartnerApps_FinishUploadLegacyDRM_Response::set_file_id(const char* value, size_t size) {
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response.file_id)
}
::std::string* CPartnerApps_FinishUploadLegacyDRM_Response::mutable_file_id() {
  set_has_file_id();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPartnerApps_FinishUploadLegacyDRM_Response::release_file_id() {
  // @@protoc_insertion_point(field_release:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response.file_id)
  clear_has_file_id();
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPartnerApps_FinishUploadLegacyDRM_Response::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    set_has_file_id();
  } else {
    clear_has_file_id();
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPartnerApps_FinishUploadLegacyDRM_Response.file_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPartnerApps_FinishUpload_Response::CPartnerApps_FinishUpload_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPartnerApps_FinishUpload_Response)
}
CPartnerApps_FinishUpload_Response::CPartnerApps_FinishUpload_Response(const CPartnerApps_FinishUpload_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPartnerApps_FinishUpload_Response)
}

void CPartnerApps_FinishUpload_Response::SharedCtor() {
  _cached_size_ = 0;
}

CPartnerApps_FinishUpload_Response::~CPartnerApps_FinishUpload_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPartnerApps_FinishUpload_Response)
  SharedDtor();
}

void CPartnerApps_FinishUpload_Response::SharedDtor() {
}

void CPartnerApps_FinishUpload_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPartnerApps_FinishUpload_Response::descriptor() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPartnerApps_FinishUpload_Response& CPartnerApps_FinishUpload_Response::default_instance() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPartnerApps_FinishUpload_Response* CPartnerApps_FinishUpload_Response::New(::google::protobuf::Arena* arena) const {
  CPartnerApps_FinishUpload_Response* n = new CPartnerApps_FinishUpload_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPartnerApps_FinishUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPartnerApps_FinishUpload_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPartnerApps_FinishUpload_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPartnerApps_FinishUpload_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPartnerApps_FinishUpload_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPartnerApps_FinishUpload_Response)
  return false;
#undef DO_
}

void CPartnerApps_FinishUpload_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPartnerApps_FinishUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPartnerApps_FinishUpload_Response)
}

::google::protobuf::uint8* CPartnerApps_FinishUpload_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPartnerApps_FinishUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPartnerApps_FinishUpload_Response)
  return target;
}

size_t CPartnerApps_FinishUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPartnerApps_FinishUpload_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPartnerApps_FinishUpload_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPartnerApps_FinishUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPartnerApps_FinishUpload_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPartnerApps_FinishUpload_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPartnerApps_FinishUpload_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPartnerApps_FinishUpload_Response)
    MergeFrom(*source);
  }
}

void CPartnerApps_FinishUpload_Response::MergeFrom(const CPartnerApps_FinishUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPartnerApps_FinishUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPartnerApps_FinishUpload_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPartnerApps_FinishUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPartnerApps_FinishUpload_Response::CopyFrom(const CPartnerApps_FinishUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPartnerApps_FinishUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_FinishUpload_Response::IsInitialized() const {
  return true;
}

void CPartnerApps_FinishUpload_Response::Swap(CPartnerApps_FinishUpload_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPartnerApps_FinishUpload_Response::InternalSwap(CPartnerApps_FinishUpload_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPartnerApps_FinishUpload_Response::GetMetadata() const {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPartnerApps_FinishUpload_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPartnerApps_FindDRMUploads_Request::kAppIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPartnerApps_FindDRMUploads_Request::CPartnerApps_FindDRMUploads_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPartnerApps_FindDRMUploads_Request)
}
CPartnerApps_FindDRMUploads_Request::CPartnerApps_FindDRMUploads_Request(const CPartnerApps_FindDRMUploads_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPartnerApps_FindDRMUploads_Request)
}

void CPartnerApps_FindDRMUploads_Request::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0;
}

CPartnerApps_FindDRMUploads_Request::~CPartnerApps_FindDRMUploads_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPartnerApps_FindDRMUploads_Request)
  SharedDtor();
}

void CPartnerApps_FindDRMUploads_Request::SharedDtor() {
}

void CPartnerApps_FindDRMUploads_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPartnerApps_FindDRMUploads_Request::descriptor() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPartnerApps_FindDRMUploads_Request& CPartnerApps_FindDRMUploads_Request::default_instance() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPartnerApps_FindDRMUploads_Request* CPartnerApps_FindDRMUploads_Request::New(::google::protobuf::Arena* arena) const {
  CPartnerApps_FindDRMUploads_Request* n = new CPartnerApps_FindDRMUploads_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPartnerApps_FindDRMUploads_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPartnerApps_FindDRMUploads_Request)
  app_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPartnerApps_FindDRMUploads_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPartnerApps_FindDRMUploads_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPartnerApps_FindDRMUploads_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPartnerApps_FindDRMUploads_Request)
  return false;
#undef DO_
}

void CPartnerApps_FindDRMUploads_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPartnerApps_FindDRMUploads_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->app_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPartnerApps_FindDRMUploads_Request)
}

::google::protobuf::uint8* CPartnerApps_FindDRMUploads_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPartnerApps_FindDRMUploads_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->app_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPartnerApps_FindDRMUploads_Request)
  return target;
}

size_t CPartnerApps_FindDRMUploads_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPartnerApps_FindDRMUploads_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 app_id = 1;
  if (has_app_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->app_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPartnerApps_FindDRMUploads_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPartnerApps_FindDRMUploads_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPartnerApps_FindDRMUploads_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPartnerApps_FindDRMUploads_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPartnerApps_FindDRMUploads_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPartnerApps_FindDRMUploads_Request)
    MergeFrom(*source);
  }
}

void CPartnerApps_FindDRMUploads_Request::MergeFrom(const CPartnerApps_FindDRMUploads_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPartnerApps_FindDRMUploads_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_app_id()) {
    set_app_id(from.app_id());
  }
}

void CPartnerApps_FindDRMUploads_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPartnerApps_FindDRMUploads_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPartnerApps_FindDRMUploads_Request::CopyFrom(const CPartnerApps_FindDRMUploads_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPartnerApps_FindDRMUploads_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_FindDRMUploads_Request::IsInitialized() const {
  return true;
}

void CPartnerApps_FindDRMUploads_Request::Swap(CPartnerApps_FindDRMUploads_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPartnerApps_FindDRMUploads_Request::InternalSwap(CPartnerApps_FindDRMUploads_Request* other) {
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPartnerApps_FindDRMUploads_Request::GetMetadata() const {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPartnerApps_FindDRMUploads_Request

// optional int32 app_id = 1;
bool CPartnerApps_FindDRMUploads_Request::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPartnerApps_FindDRMUploads_Request::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CPartnerApps_FindDRMUploads_Request::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPartnerApps_FindDRMUploads_Request::clear_app_id() {
  app_id_ = 0;
  clear_has_app_id();
}
::google::protobuf::int32 CPartnerApps_FindDRMUploads_Request::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_FindDRMUploads_Request.app_id)
  return app_id_;
}
void CPartnerApps_FindDRMUploads_Request::set_app_id(::google::protobuf::int32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_FindDRMUploads_Request.app_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPartnerApps_ExistingDRMUpload::kFileIdFieldNumber;
const int CPartnerApps_ExistingDRMUpload::kAppIdFieldNumber;
const int CPartnerApps_ExistingDRMUpload::kActorIdFieldNumber;
const int CPartnerApps_ExistingDRMUpload::kSuppliedNameFieldNumber;
const int CPartnerApps_ExistingDRMUpload::kFlagsFieldNumber;
const int CPartnerApps_ExistingDRMUpload::kModTypeFieldNumber;
const int CPartnerApps_ExistingDRMUpload::kTimestampFieldNumber;
const int CPartnerApps_ExistingDRMUpload::kOrigFileIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPartnerApps_ExistingDRMUpload::CPartnerApps_ExistingDRMUpload()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPartnerApps_ExistingDRMUpload)
}
CPartnerApps_ExistingDRMUpload::CPartnerApps_ExistingDRMUpload(const CPartnerApps_ExistingDRMUpload& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_id()) {
    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
  supplied_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_supplied_name()) {
    supplied_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.supplied_name_);
  }
  mod_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mod_type()) {
    mod_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mod_type_);
  }
  orig_file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orig_file_id()) {
    orig_file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orig_file_id_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPartnerApps_ExistingDRMUpload)
}

void CPartnerApps_ExistingDRMUpload::SharedCtor() {
  _cached_size_ = 0;
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supplied_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mod_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orig_file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(timestamp_));
}

CPartnerApps_ExistingDRMUpload::~CPartnerApps_ExistingDRMUpload() {
  // @@protoc_insertion_point(destructor:proto.steam.CPartnerApps_ExistingDRMUpload)
  SharedDtor();
}

void CPartnerApps_ExistingDRMUpload::SharedDtor() {
  file_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supplied_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mod_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orig_file_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPartnerApps_ExistingDRMUpload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPartnerApps_ExistingDRMUpload::descriptor() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPartnerApps_ExistingDRMUpload& CPartnerApps_ExistingDRMUpload::default_instance() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPartnerApps_ExistingDRMUpload* CPartnerApps_ExistingDRMUpload::New(::google::protobuf::Arena* arena) const {
  CPartnerApps_ExistingDRMUpload* n = new CPartnerApps_ExistingDRMUpload;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPartnerApps_ExistingDRMUpload::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPartnerApps_ExistingDRMUpload)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_file_id()) {
      GOOGLE_DCHECK(!file_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_supplied_name()) {
      GOOGLE_DCHECK(!supplied_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*supplied_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_mod_type()) {
      GOOGLE_DCHECK(!mod_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mod_type_.UnsafeRawStringPointer())->clear();
    }
    if (has_orig_file_id()) {
      GOOGLE_DCHECK(!orig_file_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*orig_file_id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPartnerApps_ExistingDRMUpload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPartnerApps_ExistingDRMUpload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPartnerApps_ExistingDRMUpload.file_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 actor_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_actor_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string supplied_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_supplied_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->supplied_name().data(), this->supplied_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPartnerApps_ExistingDRMUpload.supplied_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mod_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mod_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mod_type().data(), this->mod_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPartnerApps_ExistingDRMUpload.mod_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string orig_file_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orig_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orig_file_id().data(), this->orig_file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPartnerApps_ExistingDRMUpload.orig_file_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPartnerApps_ExistingDRMUpload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPartnerApps_ExistingDRMUpload)
  return false;
#undef DO_
}

void CPartnerApps_ExistingDRMUpload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPartnerApps_ExistingDRMUpload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPartnerApps_ExistingDRMUpload.file_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_id(), output);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional int32 actor_id = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actor_id(), output);
  }

  // optional string supplied_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->supplied_name().data(), this->supplied_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPartnerApps_ExistingDRMUpload.supplied_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->supplied_name(), output);
  }

  // optional uint32 flags = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->flags(), output);
  }

  // optional string mod_type = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mod_type().data(), this->mod_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPartnerApps_ExistingDRMUpload.mod_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->mod_type(), output);
  }

  // optional fixed32 timestamp = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->timestamp(), output);
  }

  // optional string orig_file_id = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_file_id().data(), this->orig_file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPartnerApps_ExistingDRMUpload.orig_file_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->orig_file_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPartnerApps_ExistingDRMUpload)
}

::google::protobuf::uint8* CPartnerApps_ExistingDRMUpload::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPartnerApps_ExistingDRMUpload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPartnerApps_ExistingDRMUpload.file_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_id(), target);
  }

  // optional int32 actor_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actor_id(), target);
  }

  // optional string supplied_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->supplied_name().data(), this->supplied_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPartnerApps_ExistingDRMUpload.supplied_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->supplied_name(), target);
  }

  // optional uint32 flags = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->flags(), target);
  }

  // optional string mod_type = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mod_type().data(), this->mod_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPartnerApps_ExistingDRMUpload.mod_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->mod_type(), target);
  }

  // optional fixed32 timestamp = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->timestamp(), target);
  }

  // optional string orig_file_id = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_file_id().data(), this->orig_file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPartnerApps_ExistingDRMUpload.orig_file_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->orig_file_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPartnerApps_ExistingDRMUpload)
  return target;
}

size_t CPartnerApps_ExistingDRMUpload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPartnerApps_ExistingDRMUpload)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string file_id = 1;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

    // optional string supplied_name = 5;
    if (has_supplied_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->supplied_name());
    }

    // optional string mod_type = 7;
    if (has_mod_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mod_type());
    }

    // optional string orig_file_id = 9;
    if (has_orig_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orig_file_id());
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 actor_id = 3;
    if (has_actor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actor_id());
    }

    // optional uint32 flags = 6;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional fixed32 timestamp = 8;
    if (has_timestamp()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPartnerApps_ExistingDRMUpload::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPartnerApps_ExistingDRMUpload)
  GOOGLE_DCHECK_NE(&from, this);
  const CPartnerApps_ExistingDRMUpload* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPartnerApps_ExistingDRMUpload>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPartnerApps_ExistingDRMUpload)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPartnerApps_ExistingDRMUpload)
    MergeFrom(*source);
  }
}

void CPartnerApps_ExistingDRMUpload::MergeFrom(const CPartnerApps_ExistingDRMUpload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPartnerApps_ExistingDRMUpload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_id();
      file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_supplied_name();
      supplied_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.supplied_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_mod_type();
      mod_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mod_type_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_orig_file_id();
      orig_file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orig_file_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      actor_id_ = from.actor_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000080u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPartnerApps_ExistingDRMUpload::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPartnerApps_ExistingDRMUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPartnerApps_ExistingDRMUpload::CopyFrom(const CPartnerApps_ExistingDRMUpload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPartnerApps_ExistingDRMUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_ExistingDRMUpload::IsInitialized() const {
  return true;
}

void CPartnerApps_ExistingDRMUpload::Swap(CPartnerApps_ExistingDRMUpload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPartnerApps_ExistingDRMUpload::InternalSwap(CPartnerApps_ExistingDRMUpload* other) {
  file_id_.Swap(&other->file_id_);
  supplied_name_.Swap(&other->supplied_name_);
  mod_type_.Swap(&other->mod_type_);
  orig_file_id_.Swap(&other->orig_file_id_);
  std::swap(app_id_, other->app_id_);
  std::swap(actor_id_, other->actor_id_);
  std::swap(flags_, other->flags_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPartnerApps_ExistingDRMUpload::GetMetadata() const {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPartnerApps_ExistingDRMUpload

// optional string file_id = 1;
bool CPartnerApps_ExistingDRMUpload::has_file_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPartnerApps_ExistingDRMUpload::set_has_file_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CPartnerApps_ExistingDRMUpload::clear_has_file_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPartnerApps_ExistingDRMUpload::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_id();
}
const ::std::string& CPartnerApps_ExistingDRMUpload::file_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_ExistingDRMUpload.file_id)
  return file_id_.GetNoArena();
}
void CPartnerApps_ExistingDRMUpload::set_file_id(const ::std::string& value) {
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_ExistingDRMUpload.file_id)
}
#if LANG_CXX11
void CPartnerApps_ExistingDRMUpload::set_file_id(::std::string&& value) {
  set_has_file_id();
  file_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPartnerApps_ExistingDRMUpload.file_id)
}
#endif
void CPartnerApps_ExistingDRMUpload::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPartnerApps_ExistingDRMUpload.file_id)
}
void CPartnerApps_ExistingDRMUpload::set_file_id(const char* value, size_t size) {
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPartnerApps_ExistingDRMUpload.file_id)
}
::std::string* CPartnerApps_ExistingDRMUpload::mutable_file_id() {
  set_has_file_id();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPartnerApps_ExistingDRMUpload.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPartnerApps_ExistingDRMUpload::release_file_id() {
  // @@protoc_insertion_point(field_release:proto.steam.CPartnerApps_ExistingDRMUpload.file_id)
  clear_has_file_id();
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPartnerApps_ExistingDRMUpload::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    set_has_file_id();
  } else {
    clear_has_file_id();
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPartnerApps_ExistingDRMUpload.file_id)
}

// optional uint32 app_id = 2;
bool CPartnerApps_ExistingDRMUpload::has_app_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CPartnerApps_ExistingDRMUpload::set_has_app_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CPartnerApps_ExistingDRMUpload::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CPartnerApps_ExistingDRMUpload::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CPartnerApps_ExistingDRMUpload::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_ExistingDRMUpload.app_id)
  return app_id_;
}
void CPartnerApps_ExistingDRMUpload::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_ExistingDRMUpload.app_id)
}

// optional int32 actor_id = 3;
bool CPartnerApps_ExistingDRMUpload::has_actor_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CPartnerApps_ExistingDRMUpload::set_has_actor_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CPartnerApps_ExistingDRMUpload::clear_has_actor_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CPartnerApps_ExistingDRMUpload::clear_actor_id() {
  actor_id_ = 0;
  clear_has_actor_id();
}
::google::protobuf::int32 CPartnerApps_ExistingDRMUpload::actor_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_ExistingDRMUpload.actor_id)
  return actor_id_;
}
void CPartnerApps_ExistingDRMUpload::set_actor_id(::google::protobuf::int32 value) {
  set_has_actor_id();
  actor_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_ExistingDRMUpload.actor_id)
}

// optional string supplied_name = 5;
bool CPartnerApps_ExistingDRMUpload::has_supplied_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPartnerApps_ExistingDRMUpload::set_has_supplied_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CPartnerApps_ExistingDRMUpload::clear_has_supplied_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPartnerApps_ExistingDRMUpload::clear_supplied_name() {
  supplied_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_supplied_name();
}
const ::std::string& CPartnerApps_ExistingDRMUpload::supplied_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_ExistingDRMUpload.supplied_name)
  return supplied_name_.GetNoArena();
}
void CPartnerApps_ExistingDRMUpload::set_supplied_name(const ::std::string& value) {
  set_has_supplied_name();
  supplied_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_ExistingDRMUpload.supplied_name)
}
#if LANG_CXX11
void CPartnerApps_ExistingDRMUpload::set_supplied_name(::std::string&& value) {
  set_has_supplied_name();
  supplied_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPartnerApps_ExistingDRMUpload.supplied_name)
}
#endif
void CPartnerApps_ExistingDRMUpload::set_supplied_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_supplied_name();
  supplied_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPartnerApps_ExistingDRMUpload.supplied_name)
}
void CPartnerApps_ExistingDRMUpload::set_supplied_name(const char* value, size_t size) {
  set_has_supplied_name();
  supplied_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPartnerApps_ExistingDRMUpload.supplied_name)
}
::std::string* CPartnerApps_ExistingDRMUpload::mutable_supplied_name() {
  set_has_supplied_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPartnerApps_ExistingDRMUpload.supplied_name)
  return supplied_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPartnerApps_ExistingDRMUpload::release_supplied_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CPartnerApps_ExistingDRMUpload.supplied_name)
  clear_has_supplied_name();
  return supplied_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPartnerApps_ExistingDRMUpload::set_allocated_supplied_name(::std::string* supplied_name) {
  if (supplied_name != NULL) {
    set_has_supplied_name();
  } else {
    clear_has_supplied_name();
  }
  supplied_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), supplied_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPartnerApps_ExistingDRMUpload.supplied_name)
}

// optional uint32 flags = 6;
bool CPartnerApps_ExistingDRMUpload::has_flags() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CPartnerApps_ExistingDRMUpload::set_has_flags() {
  _has_bits_[0] |= 0x00000040u;
}
void CPartnerApps_ExistingDRMUpload::clear_has_flags() {
  _has_bits_[0] &= ~0x00000040u;
}
void CPartnerApps_ExistingDRMUpload::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 CPartnerApps_ExistingDRMUpload::flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_ExistingDRMUpload.flags)
  return flags_;
}
void CPartnerApps_ExistingDRMUpload::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_ExistingDRMUpload.flags)
}

// optional string mod_type = 7;
bool CPartnerApps_ExistingDRMUpload::has_mod_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPartnerApps_ExistingDRMUpload::set_has_mod_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CPartnerApps_ExistingDRMUpload::clear_has_mod_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPartnerApps_ExistingDRMUpload::clear_mod_type() {
  mod_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mod_type();
}
const ::std::string& CPartnerApps_ExistingDRMUpload::mod_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_ExistingDRMUpload.mod_type)
  return mod_type_.GetNoArena();
}
void CPartnerApps_ExistingDRMUpload::set_mod_type(const ::std::string& value) {
  set_has_mod_type();
  mod_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_ExistingDRMUpload.mod_type)
}
#if LANG_CXX11
void CPartnerApps_ExistingDRMUpload::set_mod_type(::std::string&& value) {
  set_has_mod_type();
  mod_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPartnerApps_ExistingDRMUpload.mod_type)
}
#endif
void CPartnerApps_ExistingDRMUpload::set_mod_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mod_type();
  mod_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPartnerApps_ExistingDRMUpload.mod_type)
}
void CPartnerApps_ExistingDRMUpload::set_mod_type(const char* value, size_t size) {
  set_has_mod_type();
  mod_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPartnerApps_ExistingDRMUpload.mod_type)
}
::std::string* CPartnerApps_ExistingDRMUpload::mutable_mod_type() {
  set_has_mod_type();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPartnerApps_ExistingDRMUpload.mod_type)
  return mod_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPartnerApps_ExistingDRMUpload::release_mod_type() {
  // @@protoc_insertion_point(field_release:proto.steam.CPartnerApps_ExistingDRMUpload.mod_type)
  clear_has_mod_type();
  return mod_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPartnerApps_ExistingDRMUpload::set_allocated_mod_type(::std::string* mod_type) {
  if (mod_type != NULL) {
    set_has_mod_type();
  } else {
    clear_has_mod_type();
  }
  mod_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mod_type);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPartnerApps_ExistingDRMUpload.mod_type)
}

// optional fixed32 timestamp = 8;
bool CPartnerApps_ExistingDRMUpload::has_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CPartnerApps_ExistingDRMUpload::set_has_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
void CPartnerApps_ExistingDRMUpload::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
void CPartnerApps_ExistingDRMUpload::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CPartnerApps_ExistingDRMUpload::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_ExistingDRMUpload.timestamp)
  return timestamp_;
}
void CPartnerApps_ExistingDRMUpload::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_ExistingDRMUpload.timestamp)
}

// optional string orig_file_id = 9;
bool CPartnerApps_ExistingDRMUpload::has_orig_file_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CPartnerApps_ExistingDRMUpload::set_has_orig_file_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CPartnerApps_ExistingDRMUpload::clear_has_orig_file_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CPartnerApps_ExistingDRMUpload::clear_orig_file_id() {
  orig_file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orig_file_id();
}
const ::std::string& CPartnerApps_ExistingDRMUpload::orig_file_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_ExistingDRMUpload.orig_file_id)
  return orig_file_id_.GetNoArena();
}
void CPartnerApps_ExistingDRMUpload::set_orig_file_id(const ::std::string& value) {
  set_has_orig_file_id();
  orig_file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_ExistingDRMUpload.orig_file_id)
}
#if LANG_CXX11
void CPartnerApps_ExistingDRMUpload::set_orig_file_id(::std::string&& value) {
  set_has_orig_file_id();
  orig_file_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPartnerApps_ExistingDRMUpload.orig_file_id)
}
#endif
void CPartnerApps_ExistingDRMUpload::set_orig_file_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orig_file_id();
  orig_file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPartnerApps_ExistingDRMUpload.orig_file_id)
}
void CPartnerApps_ExistingDRMUpload::set_orig_file_id(const char* value, size_t size) {
  set_has_orig_file_id();
  orig_file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPartnerApps_ExistingDRMUpload.orig_file_id)
}
::std::string* CPartnerApps_ExistingDRMUpload::mutable_orig_file_id() {
  set_has_orig_file_id();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPartnerApps_ExistingDRMUpload.orig_file_id)
  return orig_file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPartnerApps_ExistingDRMUpload::release_orig_file_id() {
  // @@protoc_insertion_point(field_release:proto.steam.CPartnerApps_ExistingDRMUpload.orig_file_id)
  clear_has_orig_file_id();
  return orig_file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPartnerApps_ExistingDRMUpload::set_allocated_orig_file_id(::std::string* orig_file_id) {
  if (orig_file_id != NULL) {
    set_has_orig_file_id();
  } else {
    clear_has_orig_file_id();
  }
  orig_file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orig_file_id);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPartnerApps_ExistingDRMUpload.orig_file_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPartnerApps_FindDRMUploads_Response::kUploadsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPartnerApps_FindDRMUploads_Response::CPartnerApps_FindDRMUploads_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPartnerApps_FindDRMUploads_Response)
}
CPartnerApps_FindDRMUploads_Response::CPartnerApps_FindDRMUploads_Response(const CPartnerApps_FindDRMUploads_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      uploads_(from.uploads_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPartnerApps_FindDRMUploads_Response)
}

void CPartnerApps_FindDRMUploads_Response::SharedCtor() {
  _cached_size_ = 0;
}

CPartnerApps_FindDRMUploads_Response::~CPartnerApps_FindDRMUploads_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPartnerApps_FindDRMUploads_Response)
  SharedDtor();
}

void CPartnerApps_FindDRMUploads_Response::SharedDtor() {
}

void CPartnerApps_FindDRMUploads_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPartnerApps_FindDRMUploads_Response::descriptor() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPartnerApps_FindDRMUploads_Response& CPartnerApps_FindDRMUploads_Response::default_instance() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPartnerApps_FindDRMUploads_Response* CPartnerApps_FindDRMUploads_Response::New(::google::protobuf::Arena* arena) const {
  CPartnerApps_FindDRMUploads_Response* n = new CPartnerApps_FindDRMUploads_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPartnerApps_FindDRMUploads_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPartnerApps_FindDRMUploads_Response)
  uploads_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPartnerApps_FindDRMUploads_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPartnerApps_FindDRMUploads_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CPartnerApps_ExistingDRMUpload uploads = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uploads()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPartnerApps_FindDRMUploads_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPartnerApps_FindDRMUploads_Response)
  return false;
#undef DO_
}

void CPartnerApps_FindDRMUploads_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPartnerApps_FindDRMUploads_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CPartnerApps_ExistingDRMUpload uploads = 1;
  for (unsigned int i = 0, n = this->uploads_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uploads(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPartnerApps_FindDRMUploads_Response)
}

::google::protobuf::uint8* CPartnerApps_FindDRMUploads_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPartnerApps_FindDRMUploads_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CPartnerApps_ExistingDRMUpload uploads = 1;
  for (unsigned int i = 0, n = this->uploads_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->uploads(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPartnerApps_FindDRMUploads_Response)
  return target;
}

size_t CPartnerApps_FindDRMUploads_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPartnerApps_FindDRMUploads_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CPartnerApps_ExistingDRMUpload uploads = 1;
  {
    unsigned int count = this->uploads_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uploads(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPartnerApps_FindDRMUploads_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPartnerApps_FindDRMUploads_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPartnerApps_FindDRMUploads_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPartnerApps_FindDRMUploads_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPartnerApps_FindDRMUploads_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPartnerApps_FindDRMUploads_Response)
    MergeFrom(*source);
  }
}

void CPartnerApps_FindDRMUploads_Response::MergeFrom(const CPartnerApps_FindDRMUploads_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPartnerApps_FindDRMUploads_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uploads_.MergeFrom(from.uploads_);
}

void CPartnerApps_FindDRMUploads_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPartnerApps_FindDRMUploads_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPartnerApps_FindDRMUploads_Response::CopyFrom(const CPartnerApps_FindDRMUploads_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPartnerApps_FindDRMUploads_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_FindDRMUploads_Response::IsInitialized() const {
  return true;
}

void CPartnerApps_FindDRMUploads_Response::Swap(CPartnerApps_FindDRMUploads_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPartnerApps_FindDRMUploads_Response::InternalSwap(CPartnerApps_FindDRMUploads_Response* other) {
  uploads_.InternalSwap(&other->uploads_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPartnerApps_FindDRMUploads_Response::GetMetadata() const {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPartnerApps_FindDRMUploads_Response

// repeated .proto.steam.CPartnerApps_ExistingDRMUpload uploads = 1;
int CPartnerApps_FindDRMUploads_Response::uploads_size() const {
  return uploads_.size();
}
void CPartnerApps_FindDRMUploads_Response::clear_uploads() {
  uploads_.Clear();
}
const ::proto::steam::CPartnerApps_ExistingDRMUpload& CPartnerApps_FindDRMUploads_Response::uploads(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_FindDRMUploads_Response.uploads)
  return uploads_.Get(index);
}
::proto::steam::CPartnerApps_ExistingDRMUpload* CPartnerApps_FindDRMUploads_Response::mutable_uploads(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPartnerApps_FindDRMUploads_Response.uploads)
  return uploads_.Mutable(index);
}
::proto::steam::CPartnerApps_ExistingDRMUpload* CPartnerApps_FindDRMUploads_Response::add_uploads() {
  // @@protoc_insertion_point(field_add:proto.steam.CPartnerApps_FindDRMUploads_Response.uploads)
  return uploads_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CPartnerApps_ExistingDRMUpload >*
CPartnerApps_FindDRMUploads_Response::mutable_uploads() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPartnerApps_FindDRMUploads_Response.uploads)
  return &uploads_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPartnerApps_ExistingDRMUpload >&
CPartnerApps_FindDRMUploads_Response::uploads() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPartnerApps_FindDRMUploads_Response.uploads)
  return uploads_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPartnerApps_Download_Request::kFileIdFieldNumber;
const int CPartnerApps_Download_Request::kAppIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPartnerApps_Download_Request::CPartnerApps_Download_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPartnerApps_Download_Request)
}
CPartnerApps_Download_Request::CPartnerApps_Download_Request(const CPartnerApps_Download_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_id()) {
    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPartnerApps_Download_Request)
}

void CPartnerApps_Download_Request::SharedCtor() {
  _cached_size_ = 0;
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0;
}

CPartnerApps_Download_Request::~CPartnerApps_Download_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPartnerApps_Download_Request)
  SharedDtor();
}

void CPartnerApps_Download_Request::SharedDtor() {
  file_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPartnerApps_Download_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPartnerApps_Download_Request::descriptor() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPartnerApps_Download_Request& CPartnerApps_Download_Request::default_instance() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPartnerApps_Download_Request* CPartnerApps_Download_Request::New(::google::protobuf::Arena* arena) const {
  CPartnerApps_Download_Request* n = new CPartnerApps_Download_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPartnerApps_Download_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPartnerApps_Download_Request)
  if (has_file_id()) {
    GOOGLE_DCHECK(!file_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*file_id_.UnsafeRawStringPointer())->clear();
  }
  app_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPartnerApps_Download_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPartnerApps_Download_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPartnerApps_Download_Request.file_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 app_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPartnerApps_Download_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPartnerApps_Download_Request)
  return false;
#undef DO_
}

void CPartnerApps_Download_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPartnerApps_Download_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPartnerApps_Download_Request.file_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_id(), output);
  }

  // optional int32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->app_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPartnerApps_Download_Request)
}

::google::protobuf::uint8* CPartnerApps_Download_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPartnerApps_Download_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPartnerApps_Download_Request.file_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  // optional int32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->app_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPartnerApps_Download_Request)
  return target;
}

size_t CPartnerApps_Download_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPartnerApps_Download_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string file_id = 1;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

    // optional int32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPartnerApps_Download_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPartnerApps_Download_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPartnerApps_Download_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPartnerApps_Download_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPartnerApps_Download_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPartnerApps_Download_Request)
    MergeFrom(*source);
  }
}

void CPartnerApps_Download_Request::MergeFrom(const CPartnerApps_Download_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPartnerApps_Download_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_id();
      file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPartnerApps_Download_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPartnerApps_Download_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPartnerApps_Download_Request::CopyFrom(const CPartnerApps_Download_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPartnerApps_Download_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_Download_Request::IsInitialized() const {
  return true;
}

void CPartnerApps_Download_Request::Swap(CPartnerApps_Download_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPartnerApps_Download_Request::InternalSwap(CPartnerApps_Download_Request* other) {
  file_id_.Swap(&other->file_id_);
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPartnerApps_Download_Request::GetMetadata() const {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPartnerApps_Download_Request

// optional string file_id = 1;
bool CPartnerApps_Download_Request::has_file_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPartnerApps_Download_Request::set_has_file_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CPartnerApps_Download_Request::clear_has_file_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPartnerApps_Download_Request::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_id();
}
const ::std::string& CPartnerApps_Download_Request::file_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_Download_Request.file_id)
  return file_id_.GetNoArena();
}
void CPartnerApps_Download_Request::set_file_id(const ::std::string& value) {
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_Download_Request.file_id)
}
#if LANG_CXX11
void CPartnerApps_Download_Request::set_file_id(::std::string&& value) {
  set_has_file_id();
  file_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPartnerApps_Download_Request.file_id)
}
#endif
void CPartnerApps_Download_Request::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPartnerApps_Download_Request.file_id)
}
void CPartnerApps_Download_Request::set_file_id(const char* value, size_t size) {
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPartnerApps_Download_Request.file_id)
}
::std::string* CPartnerApps_Download_Request::mutable_file_id() {
  set_has_file_id();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPartnerApps_Download_Request.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPartnerApps_Download_Request::release_file_id() {
  // @@protoc_insertion_point(field_release:proto.steam.CPartnerApps_Download_Request.file_id)
  clear_has_file_id();
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPartnerApps_Download_Request::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    set_has_file_id();
  } else {
    clear_has_file_id();
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPartnerApps_Download_Request.file_id)
}

// optional int32 app_id = 2;
bool CPartnerApps_Download_Request::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPartnerApps_Download_Request::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CPartnerApps_Download_Request::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPartnerApps_Download_Request::clear_app_id() {
  app_id_ = 0;
  clear_has_app_id();
}
::google::protobuf::int32 CPartnerApps_Download_Request::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_Download_Request.app_id)
  return app_id_;
}
void CPartnerApps_Download_Request::set_app_id(::google::protobuf::int32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_Download_Request.app_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPartnerApps_Download_Response::kDownloadUrlFieldNumber;
const int CPartnerApps_Download_Response::kAppIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPartnerApps_Download_Response::CPartnerApps_Download_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPartnerApps_Download_Response)
}
CPartnerApps_Download_Response::CPartnerApps_Download_Response(const CPartnerApps_Download_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  download_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_download_url()) {
    download_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.download_url_);
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPartnerApps_Download_Response)
}

void CPartnerApps_Download_Response::SharedCtor() {
  _cached_size_ = 0;
  download_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0;
}

CPartnerApps_Download_Response::~CPartnerApps_Download_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPartnerApps_Download_Response)
  SharedDtor();
}

void CPartnerApps_Download_Response::SharedDtor() {
  download_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPartnerApps_Download_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPartnerApps_Download_Response::descriptor() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPartnerApps_Download_Response& CPartnerApps_Download_Response::default_instance() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPartnerApps_Download_Response* CPartnerApps_Download_Response::New(::google::protobuf::Arena* arena) const {
  CPartnerApps_Download_Response* n = new CPartnerApps_Download_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPartnerApps_Download_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPartnerApps_Download_Response)
  if (has_download_url()) {
    GOOGLE_DCHECK(!download_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*download_url_.UnsafeRawStringPointer())->clear();
  }
  app_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPartnerApps_Download_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPartnerApps_Download_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string download_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_download_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->download_url().data(), this->download_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPartnerApps_Download_Response.download_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 app_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPartnerApps_Download_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPartnerApps_Download_Response)
  return false;
#undef DO_
}

void CPartnerApps_Download_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPartnerApps_Download_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string download_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->download_url().data(), this->download_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPartnerApps_Download_Response.download_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->download_url(), output);
  }

  // optional int32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->app_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPartnerApps_Download_Response)
}

::google::protobuf::uint8* CPartnerApps_Download_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPartnerApps_Download_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string download_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->download_url().data(), this->download_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPartnerApps_Download_Response.download_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->download_url(), target);
  }

  // optional int32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->app_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPartnerApps_Download_Response)
  return target;
}

size_t CPartnerApps_Download_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPartnerApps_Download_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string download_url = 1;
    if (has_download_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->download_url());
    }

    // optional int32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPartnerApps_Download_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPartnerApps_Download_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPartnerApps_Download_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPartnerApps_Download_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPartnerApps_Download_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPartnerApps_Download_Response)
    MergeFrom(*source);
  }
}

void CPartnerApps_Download_Response::MergeFrom(const CPartnerApps_Download_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPartnerApps_Download_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_download_url();
      download_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.download_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPartnerApps_Download_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPartnerApps_Download_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPartnerApps_Download_Response::CopyFrom(const CPartnerApps_Download_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPartnerApps_Download_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_Download_Response::IsInitialized() const {
  return true;
}

void CPartnerApps_Download_Response::Swap(CPartnerApps_Download_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPartnerApps_Download_Response::InternalSwap(CPartnerApps_Download_Response* other) {
  download_url_.Swap(&other->download_url_);
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPartnerApps_Download_Response::GetMetadata() const {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPartnerApps_Download_Response

// optional string download_url = 1;
bool CPartnerApps_Download_Response::has_download_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPartnerApps_Download_Response::set_has_download_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CPartnerApps_Download_Response::clear_has_download_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPartnerApps_Download_Response::clear_download_url() {
  download_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_download_url();
}
const ::std::string& CPartnerApps_Download_Response::download_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_Download_Response.download_url)
  return download_url_.GetNoArena();
}
void CPartnerApps_Download_Response::set_download_url(const ::std::string& value) {
  set_has_download_url();
  download_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_Download_Response.download_url)
}
#if LANG_CXX11
void CPartnerApps_Download_Response::set_download_url(::std::string&& value) {
  set_has_download_url();
  download_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPartnerApps_Download_Response.download_url)
}
#endif
void CPartnerApps_Download_Response::set_download_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_download_url();
  download_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPartnerApps_Download_Response.download_url)
}
void CPartnerApps_Download_Response::set_download_url(const char* value, size_t size) {
  set_has_download_url();
  download_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPartnerApps_Download_Response.download_url)
}
::std::string* CPartnerApps_Download_Response::mutable_download_url() {
  set_has_download_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPartnerApps_Download_Response.download_url)
  return download_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPartnerApps_Download_Response::release_download_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CPartnerApps_Download_Response.download_url)
  clear_has_download_url();
  return download_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPartnerApps_Download_Response::set_allocated_download_url(::std::string* download_url) {
  if (download_url != NULL) {
    set_has_download_url();
  } else {
    clear_has_download_url();
  }
  download_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), download_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPartnerApps_Download_Response.download_url)
}

// optional int32 app_id = 2;
bool CPartnerApps_Download_Response::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPartnerApps_Download_Response::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CPartnerApps_Download_Response::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPartnerApps_Download_Response::clear_app_id() {
  app_id_ = 0;
  clear_has_app_id();
}
::google::protobuf::int32 CPartnerApps_Download_Response::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPartnerApps_Download_Response.app_id)
  return app_id_;
}
void CPartnerApps_Download_Response::set_app_id(::google::protobuf::int32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPartnerApps_Download_Response.app_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

PartnerApps::~PartnerApps() {}

const ::google::protobuf::ServiceDescriptor* PartnerApps::descriptor() {
  protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* PartnerApps::GetDescriptor() {
  return descriptor();
}

void PartnerApps::RequestKVSignUploadToken(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPartnerApps_RequestUploadToken_Request*,
                         ::proto::steam::CPartnerApps_RequestUploadToken_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RequestKVSignUploadToken() not implemented.");
  done->Run();
}

void PartnerApps::RequestDRMUploadToken(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPartnerApps_RequestUploadToken_Request*,
                         ::proto::steam::CPartnerApps_RequestUploadToken_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RequestDRMUploadToken() not implemented.");
  done->Run();
}

void PartnerApps::RequestCEGUploadToken(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPartnerApps_RequestUploadToken_Request*,
                         ::proto::steam::CPartnerApps_RequestUploadToken_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RequestCEGUploadToken() not implemented.");
  done->Run();
}

void PartnerApps::FinishUploadKVSign(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPartnerApps_FinishUpload_Request*,
                         ::proto::steam::CPartnerApps_FinishUploadKVSign_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FinishUploadKVSign() not implemented.");
  done->Run();
}

void PartnerApps::FinishUploadDRMUpload(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPartnerApps_FinishUploadLegacyDRM_Request*,
                         ::proto::steam::CPartnerApps_FinishUploadLegacyDRM_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FinishUploadDRMUpload() not implemented.");
  done->Run();
}

void PartnerApps::FinishUploadCEGUpload(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPartnerApps_FinishUpload_Request*,
                         ::proto::steam::CPartnerApps_FinishUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FinishUploadCEGUpload() not implemented.");
  done->Run();
}

void PartnerApps::FindDRMUploads(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPartnerApps_FindDRMUploads_Request*,
                         ::proto::steam::CPartnerApps_FindDRMUploads_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FindDRMUploads() not implemented.");
  done->Run();
}

void PartnerApps::Download(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPartnerApps_Download_Request*,
                         ::proto::steam::CPartnerApps_Download_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Download() not implemented.");
  done->Run();
}

void PartnerApps::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fpartnerapps_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      RequestKVSignUploadToken(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPartnerApps_RequestUploadToken_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPartnerApps_RequestUploadToken_Response*>(response),
             done);
      break;
    case 1:
      RequestDRMUploadToken(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPartnerApps_RequestUploadToken_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPartnerApps_RequestUploadToken_Response*>(response),
             done);
      break;
    case 2:
      RequestCEGUploadToken(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPartnerApps_RequestUploadToken_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPartnerApps_RequestUploadToken_Response*>(response),
             done);
      break;
    case 3:
      FinishUploadKVSign(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPartnerApps_FinishUpload_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPartnerApps_FinishUploadKVSign_Response*>(response),
             done);
      break;
    case 4:
      FinishUploadDRMUpload(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPartnerApps_FinishUploadLegacyDRM_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPartnerApps_FinishUploadLegacyDRM_Response*>(response),
             done);
      break;
    case 5:
      FinishUploadCEGUpload(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPartnerApps_FinishUpload_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPartnerApps_FinishUpload_Response*>(response),
             done);
      break;
    case 6:
      FindDRMUploads(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPartnerApps_FindDRMUploads_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPartnerApps_FindDRMUploads_Response*>(response),
             done);
      break;
    case 7:
      Download(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPartnerApps_Download_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPartnerApps_Download_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& PartnerApps::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CPartnerApps_RequestUploadToken_Request::default_instance();
    case 1:
      return ::proto::steam::CPartnerApps_RequestUploadToken_Request::default_instance();
    case 2:
      return ::proto::steam::CPartnerApps_RequestUploadToken_Request::default_instance();
    case 3:
      return ::proto::steam::CPartnerApps_FinishUpload_Request::default_instance();
    case 4:
      return ::proto::steam::CPartnerApps_FinishUploadLegacyDRM_Request::default_instance();
    case 5:
      return ::proto::steam::CPartnerApps_FinishUpload_Request::default_instance();
    case 6:
      return ::proto::steam::CPartnerApps_FindDRMUploads_Request::default_instance();
    case 7:
      return ::proto::steam::CPartnerApps_Download_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& PartnerApps::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CPartnerApps_RequestUploadToken_Response::default_instance();
    case 1:
      return ::proto::steam::CPartnerApps_RequestUploadToken_Response::default_instance();
    case 2:
      return ::proto::steam::CPartnerApps_RequestUploadToken_Response::default_instance();
    case 3:
      return ::proto::steam::CPartnerApps_FinishUploadKVSign_Response::default_instance();
    case 4:
      return ::proto::steam::CPartnerApps_FinishUploadLegacyDRM_Response::default_instance();
    case 5:
      return ::proto::steam::CPartnerApps_FinishUpload_Response::default_instance();
    case 6:
      return ::proto::steam::CPartnerApps_FindDRMUploads_Response::default_instance();
    case 7:
      return ::proto::steam::CPartnerApps_Download_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

PartnerApps_Stub::PartnerApps_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
PartnerApps_Stub::PartnerApps_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
PartnerApps_Stub::~PartnerApps_Stub() {
  if (owns_channel_) delete channel_;
}

void PartnerApps_Stub::RequestKVSignUploadToken(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPartnerApps_RequestUploadToken_Request* request,
                              ::proto::steam::CPartnerApps_RequestUploadToken_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void PartnerApps_Stub::RequestDRMUploadToken(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPartnerApps_RequestUploadToken_Request* request,
                              ::proto::steam::CPartnerApps_RequestUploadToken_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void PartnerApps_Stub::RequestCEGUploadToken(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPartnerApps_RequestUploadToken_Request* request,
                              ::proto::steam::CPartnerApps_RequestUploadToken_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void PartnerApps_Stub::FinishUploadKVSign(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPartnerApps_FinishUpload_Request* request,
                              ::proto::steam::CPartnerApps_FinishUploadKVSign_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void PartnerApps_Stub::FinishUploadDRMUpload(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPartnerApps_FinishUploadLegacyDRM_Request* request,
                              ::proto::steam::CPartnerApps_FinishUploadLegacyDRM_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void PartnerApps_Stub::FinishUploadCEGUpload(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPartnerApps_FinishUpload_Request* request,
                              ::proto::steam::CPartnerApps_FinishUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void PartnerApps_Stub::FindDRMUploads(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPartnerApps_FindDRMUploads_Request* request,
                              ::proto::steam::CPartnerApps_FindDRMUploads_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void PartnerApps_Stub::Download(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPartnerApps_Download_Request* request,
                              ::proto::steam::CPartnerApps_Download_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
